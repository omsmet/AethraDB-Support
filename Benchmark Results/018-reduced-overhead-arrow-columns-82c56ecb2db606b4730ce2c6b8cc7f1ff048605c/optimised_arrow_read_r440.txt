# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 05:00:00
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

408.127 ±(99.9%) 82.162 ms/op
# Warmup Iteration   2: 374.322 ±(99.9%) 3.460 ms/op
# Warmup Iteration   3: 373.157 ±(99.9%) 3.338 ms/op
# Warmup Iteration   4: 372.885 ±(99.9%) 2.514 ms/op
# Warmup Iteration   5: 373.332 ±(99.9%) 2.850 ms/op
Iteration   1: 373.740 ±(99.9%) 4.459 ms/op
                 executeQuery·p0.00:   362.283 ms/op
                 executeQuery·p0.50:   371.720 ms/op
                 executeQuery·p0.90:   384.303 ms/op
                 executeQuery·p0.95:   389.231 ms/op
                 executeQuery·p0.99:   391.119 ms/op
                 executeQuery·p0.999:  391.119 ms/op
                 executeQuery·p0.9999: 391.119 ms/op
                 executeQuery·p1.00:   391.119 ms/op

Iteration   2: 373.138 ±(99.9%) 3.734 ms/op
                 executeQuery·p0.00:   363.856 ms/op
                 executeQuery·p0.50:   372.244 ms/op
                 executeQuery·p0.90:   383.884 ms/op
                 executeQuery·p0.95:   387.344 ms/op
                 executeQuery·p0.99:   387.973 ms/op
                 executeQuery·p0.999:  387.973 ms/op
                 executeQuery·p0.9999: 387.973 ms/op
                 executeQuery·p1.00:   387.973 ms/op

Iteration   3: 373.157 ±(99.9%) 2.939 ms/op
                 executeQuery·p0.00:   364.904 ms/op
                 executeQuery·p0.50:   371.720 ms/op
                 executeQuery·p0.90:   381.891 ms/op
                 executeQuery·p0.95:   384.303 ms/op
                 executeQuery·p0.99:   385.352 ms/op
                 executeQuery·p0.999:  385.352 ms/op
                 executeQuery·p0.9999: 385.352 ms/op
                 executeQuery·p1.00:   385.352 ms/op

Iteration   4: 373.914 ±(99.9%) 3.834 ms/op
                 executeQuery·p0.00:   363.332 ms/op
                 executeQuery·p0.50:   372.244 ms/op
                 executeQuery·p0.90:   384.513 ms/op
                 executeQuery·p0.95:   387.239 ms/op
                 executeQuery·p0.99:   388.497 ms/op
                 executeQuery·p0.999:  388.497 ms/op
                 executeQuery·p0.9999: 388.497 ms/op
                 executeQuery·p1.00:   388.497 ms/op

Iteration   5: 373.817 ±(99.9%) 4.127 ms/op
                 executeQuery·p0.00:   364.904 ms/op
                 executeQuery·p0.50:   372.244 ms/op
                 executeQuery·p0.90:   386.400 ms/op
                 executeQuery·p0.95:   390.699 ms/op
                 executeQuery·p0.99:   392.167 ms/op
                 executeQuery·p0.999:  392.167 ms/op
                 executeQuery·p0.9999: 392.167 ms/op
                 executeQuery·p1.00:   392.167 ms/op


# Run progress: 0.56% complete, ETA 05:09:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

376.652 ±(99.9%) 19.791 ms/op
# Warmup Iteration   2: 372.846 ±(99.9%) 1.707 ms/op
# Warmup Iteration   3: 385.211 ±(99.9%) 47.006 ms/op
# Warmup Iteration   4: 372.982 ±(99.9%) 3.547 ms/op
# Warmup Iteration   5: 373.876 ±(99.9%) 3.750 ms/op
Iteration   1: 368.331 ±(99.9%) 2.883 ms/op
                 executeQuery·p0.00:   359.137 ms/op
                 executeQuery·p0.50:   367.526 ms/op
                 executeQuery·p0.90:   372.507 ms/op
                 executeQuery·p0.95:   381.315 ms/op
                 executeQuery·p0.99:   382.730 ms/op
                 executeQuery·p0.999:  382.730 ms/op
                 executeQuery·p0.9999: 382.730 ms/op
                 executeQuery·p1.00:   382.730 ms/op

Iteration   2: 367.938 ±(99.9%) 1.935 ms/op
                 executeQuery·p0.00:   359.662 ms/op
                 executeQuery·p0.50:   367.788 ms/op
                 executeQuery·p0.90:   368.574 ms/op
                 executeQuery·p0.95:   374.630 ms/op
                 executeQuery·p0.99:   379.585 ms/op
                 executeQuery·p0.999:  379.585 ms/op
                 executeQuery·p0.9999: 379.585 ms/op
                 executeQuery·p1.00:   379.585 ms/op

Iteration   3: 367.601 ±(99.9%) 2.224 ms/op
                 executeQuery·p0.00:   359.662 ms/op
                 executeQuery·p0.50:   367.526 ms/op
                 executeQuery·p0.90:   368.574 ms/op
                 executeQuery·p0.95:   374.630 ms/op
                 executeQuery·p0.99:   379.585 ms/op
                 executeQuery·p0.999:  379.585 ms/op
                 executeQuery·p0.9999: 379.585 ms/op
                 executeQuery·p1.00:   379.585 ms/op

Iteration   4: 367.694 ±(99.9%) 2.329 ms/op
                 executeQuery·p0.00:   359.137 ms/op
                 executeQuery·p0.50:   367.788 ms/op
                 executeQuery·p0.90:   368.941 ms/op
                 executeQuery·p0.95:   375.993 ms/op
                 executeQuery·p0.99:   379.060 ms/op
                 executeQuery·p0.999:  379.060 ms/op
                 executeQuery·p0.9999: 379.060 ms/op
                 executeQuery·p1.00:   379.060 ms/op

Iteration   5: 369.992 ±(99.9%) 4.042 ms/op
                 executeQuery·p0.00:   367.002 ms/op
                 executeQuery·p0.50:   368.050 ms/op
                 executeQuery·p0.90:   382.835 ms/op
                 executeQuery·p0.95:   386.715 ms/op
                 executeQuery·p0.99:   389.022 ms/op
                 executeQuery·p0.999:  389.022 ms/op
                 executeQuery·p0.9999: 389.022 ms/op
                 executeQuery·p1.00:   389.022 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 274
  mean =    370.888 ±(99.9%) 1.080 ms/op

  Histogram, ms/op:
    [350.000, 355.000) = 0 
    [355.000, 360.000) = 6 
    [360.000, 365.000) = 8 
    [365.000, 370.000) = 120 
    [370.000, 375.000) = 110 
    [375.000, 380.000) = 8 
    [380.000, 385.000) = 11 
    [385.000, 390.000) = 9 
    [390.000, 395.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    359.137 ms/op
     p(50.0000) =    370.672 ms/op
     p(90.0000) =    376.701 ms/op
     p(95.0000) =    383.779 ms/op
     p(99.0000) =    389.546 ms/op
     p(99.9000) =    392.167 ms/op
     p(99.9900) =    392.167 ms/op
     p(99.9990) =    392.167 ms/op
     p(99.9999) =    392.167 ms/op
    p(100.0000) =    392.167 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 1.11% complete, ETA 05:08:05
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

566.755 ±(99.9%) 77.251 ms/op
# Warmup Iteration   2: 541.948 ±(99.9%) 1.730 ms/op
# Warmup Iteration   3: 545.756 ±(99.9%) 6.798 ms/op
# Warmup Iteration   4: 542.555 ±(99.9%) 0.573 ms/op
# Warmup Iteration   5: 540.182 ±(99.9%) 0.904 ms/op
Iteration   1: 540.293 ±(99.9%) 1.883 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   540.017 ms/op
                 executeQuery·p0.90:   545.260 ms/op
                 executeQuery·p0.95:   546.308 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op

Iteration   2: 540.265 ±(99.9%) 3.614 ms/op
                 executeQuery·p0.00:   535.298 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   549.454 ms/op
                 executeQuery·p0.95:   552.600 ms/op
                 executeQuery·p0.99:   552.600 ms/op
                 executeQuery·p0.999:  552.600 ms/op
                 executeQuery·p0.9999: 552.600 ms/op
                 executeQuery·p1.00:   552.600 ms/op

Iteration   3: 551.275 ±(99.9%) 44.660 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   547.357 ms/op
                 executeQuery·p0.95:   756.023 ms/op
                 executeQuery·p0.99:   756.023 ms/op
                 executeQuery·p0.999:  756.023 ms/op
                 executeQuery·p0.9999: 756.023 ms/op
                 executeQuery·p1.00:   756.023 ms/op

Iteration   4: 539.078 ±(99.9%) 0.826 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   542.114 ms/op
                 executeQuery·p0.99:   542.114 ms/op
                 executeQuery·p0.999:  542.114 ms/op
                 executeQuery·p0.9999: 542.114 ms/op
                 executeQuery·p1.00:   542.114 ms/op

Iteration   5: 540.182 ±(99.9%) 2.800 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   541.065 ms/op
                 executeQuery·p0.95:   552.600 ms/op
                 executeQuery·p0.99:   552.600 ms/op
                 executeQuery·p0.999:  552.600 ms/op
                 executeQuery·p0.9999: 552.600 ms/op
                 executeQuery·p1.00:   552.600 ms/op


# Run progress: 1.67% complete, ETA 05:07:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

549.564 ±(99.9%) 19.215 ms/op
# Warmup Iteration   2: 541.893 ±(99.9%) 1.795 ms/op
# Warmup Iteration   3: 541.562 ±(99.9%) 2.854 ms/op
# Warmup Iteration   4: 542.666 ±(99.9%) 4.763 ms/op
# Warmup Iteration   5: 538.968 ±(99.9%) 0.629 ms/op
Iteration   1: 538.223 ±(99.9%) 1.822 ms/op
                 executeQuery·p0.00:   534.249 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   541.065 ms/op
                 executeQuery·p0.95:   541.065 ms/op
                 executeQuery·p0.99:   541.065 ms/op
                 executeQuery·p0.999:  541.065 ms/op
                 executeQuery·p0.9999: 541.065 ms/op
                 executeQuery·p1.00:   541.065 ms/op

Iteration   2: 539.630 ±(99.9%) 2.500 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   541.065 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op

Iteration   3: 537.809 ±(99.9%) 2.749 ms/op
                 executeQuery·p0.00:   533.725 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   546.308 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op

Iteration   4: 556.473 ±(99.9%) 68.816 ms/op
                 executeQuery·p0.00:   536.347 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   573.991 ms/op
                 executeQuery·p0.95:   851.444 ms/op
                 executeQuery·p0.99:   851.444 ms/op
                 executeQuery·p0.999:  851.444 ms/op
                 executeQuery·p0.9999: 851.444 ms/op
                 executeQuery·p1.00:   851.444 ms/op

Iteration   5: 538.775 ±(99.9%) 2.818 ms/op
                 executeQuery·p0.00:   534.774 ms/op
                 executeQuery·p0.50:   537.919 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 189
  mean =    542.125 ±(99.9%) 6.737 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 183 
    [550.000, 575.000) = 4 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 1 
    [775.000, 800.000) = 0 
    [800.000, 825.000) = 0 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    533.725 ms/op
     p(50.0000) =    538.968 ms/op
     p(90.0000) =    541.065 ms/op
     p(95.0000) =    546.308 ms/op
     p(99.0000) =    765.565 ms/op
     p(99.9000) =    851.444 ms/op
     p(99.9900) =    851.444 ms/op
     p(99.9990) =    851.444 ms/op
     p(99.9999) =    851.444 ms/op
    p(100.0000) =    851.444 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 2.22% complete, ETA 05:06:20
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

757.153 ±(99.9%) 53.515 ms/op
# Warmup Iteration   2: 745.612 ±(99.9%) 9.457 ms/op
# Warmup Iteration   3: 744.639 ±(99.9%) 9.219 ms/op
# Warmup Iteration   4: 742.392 ±(99.9%) 8.705 ms/op
# Warmup Iteration   5: 740.444 ±(99.9%) 6.911 ms/op
Iteration   1: 735.052 ±(99.9%) 7.127 ms/op
                 executeQuery·p0.00:   726.663 ms/op
                 executeQuery·p0.50:   732.955 ms/op
                 executeQuery·p0.90:   743.440 ms/op
                 executeQuery·p0.95:   743.440 ms/op
                 executeQuery·p0.99:   743.440 ms/op
                 executeQuery·p0.999:  743.440 ms/op
                 executeQuery·p0.9999: 743.440 ms/op
                 executeQuery·p1.00:   743.440 ms/op

Iteration   2: 737.374 ±(99.9%) 6.993 ms/op
                 executeQuery·p0.00:   728.760 ms/op
                 executeQuery·p0.50:   738.722 ms/op
                 executeQuery·p0.90:   744.489 ms/op
                 executeQuery·p0.95:   744.489 ms/op
                 executeQuery·p0.99:   744.489 ms/op
                 executeQuery·p0.999:  744.489 ms/op
                 executeQuery·p0.9999: 744.489 ms/op
                 executeQuery·p1.00:   744.489 ms/op

Iteration   3: 748.009 ±(99.9%) 7.758 ms/op
                 executeQuery·p0.00:   735.052 ms/op
                 executeQuery·p0.50:   747.635 ms/op
                 executeQuery·p0.90:   759.693 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op

Iteration   4: 738.048 ±(99.9%) 6.608 ms/op
                 executeQuery·p0.00:   732.955 ms/op
                 executeQuery·p0.50:   735.052 ms/op
                 executeQuery·p0.90:   748.159 ms/op
                 executeQuery·p0.95:   748.683 ms/op
                 executeQuery·p0.99:   748.683 ms/op
                 executeQuery·p0.999:  748.683 ms/op
                 executeQuery·p0.9999: 748.683 ms/op
                 executeQuery·p1.00:   748.683 ms/op

Iteration   5: 747.185 ±(99.9%) 7.168 ms/op
                 executeQuery·p0.00:   735.052 ms/op
                 executeQuery·p0.50:   746.586 ms/op
                 executeQuery·p0.90:   759.169 ms/op
                 executeQuery·p0.95:   759.169 ms/op
                 executeQuery·p0.99:   759.169 ms/op
                 executeQuery·p0.999:  759.169 ms/op
                 executeQuery·p0.9999: 759.169 ms/op
                 executeQuery·p1.00:   759.169 ms/op


# Run progress: 2.78% complete, ETA 05:06:05
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

746.137 ±(99.9%) 21.077 ms/op
# Warmup Iteration   2: 741.568 ±(99.9%) 5.513 ms/op
# Warmup Iteration   3: 743.141 ±(99.9%) 5.175 ms/op
# Warmup Iteration   4: 748.384 ±(99.9%) 10.348 ms/op
# Warmup Iteration   5: 746.886 ±(99.9%) 9.626 ms/op
Iteration   1: 739.171 ±(99.9%) 11.407 ms/op
                 executeQuery·p0.00:   725.615 ms/op
                 executeQuery·p0.50:   738.198 ms/op
                 executeQuery·p0.90:   751.305 ms/op
                 executeQuery·p0.95:   751.829 ms/op
                 executeQuery·p0.99:   751.829 ms/op
                 executeQuery·p0.999:  751.829 ms/op
                 executeQuery·p0.9999: 751.829 ms/op
                 executeQuery·p1.00:   751.829 ms/op

Iteration   2: 738.872 ±(99.9%) 12.193 ms/op
                 executeQuery·p0.00:   724.566 ms/op
                 executeQuery·p0.50:   738.722 ms/op
                 executeQuery·p0.90:   751.829 ms/op
                 executeQuery·p0.95:   751.829 ms/op
                 executeQuery·p0.99:   751.829 ms/op
                 executeQuery·p0.999:  751.829 ms/op
                 executeQuery·p0.9999: 751.829 ms/op
                 executeQuery·p1.00:   751.829 ms/op

Iteration   3: 743.815 ±(99.9%) 8.871 ms/op
                 executeQuery·p0.00:   730.857 ms/op
                 executeQuery·p0.50:   741.343 ms/op
                 executeQuery·p0.90:   754.975 ms/op
                 executeQuery·p0.95:   756.023 ms/op
                 executeQuery·p0.99:   756.023 ms/op
                 executeQuery·p0.999:  756.023 ms/op
                 executeQuery·p0.9999: 756.023 ms/op
                 executeQuery·p1.00:   756.023 ms/op

Iteration   4: 742.841 ±(99.9%) 13.275 ms/op
                 executeQuery·p0.00:   719.323 ms/op
                 executeQuery·p0.50:   742.392 ms/op
                 executeQuery·p0.90:   756.548 ms/op
                 executeQuery·p0.95:   757.072 ms/op
                 executeQuery·p0.99:   757.072 ms/op
                 executeQuery·p0.999:  757.072 ms/op
                 executeQuery·p0.9999: 757.072 ms/op
                 executeQuery·p1.00:   757.072 ms/op

Iteration   5: 739.920 ±(99.9%) 7.504 ms/op
                 executeQuery·p0.00:   730.857 ms/op
                 executeQuery·p0.50:   740.819 ms/op
                 executeQuery·p0.90:   750.256 ms/op
                 executeQuery·p0.95:   754.975 ms/op
                 executeQuery·p0.99:   754.975 ms/op
                 executeQuery·p0.999:  754.975 ms/op
                 executeQuery·p0.9999: 754.975 ms/op
                 executeQuery·p1.00:   754.975 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 140
  mean =    741.029 ±(99.9%) 2.521 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 1 
    [720.000, 725.000) = 1 
    [725.000, 730.000) = 14 
    [730.000, 735.000) = 21 
    [735.000, 740.000) = 23 
    [740.000, 745.000) = 30 
    [745.000, 750.000) = 25 
    [750.000, 755.000) = 18 
    [755.000, 760.000) = 6 
    [760.000, 765.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    719.323 ms/op
     p(50.0000) =    741.343 ms/op
     p(90.0000) =    753.716 ms/op
     p(95.0000) =    755.971 ms/op
     p(99.0000) =    760.406 ms/op
     p(99.9000) =    761.266 ms/op
     p(99.9900) =    761.266 ms/op
     p(99.9990) =    761.266 ms/op
     p(99.9999) =    761.266 ms/op
    p(100.0000) =    761.266 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 3.33% complete, ETA 05:05:41
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1816152612 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1816152612() {
        this(4);
    }
    public KeyValueMap_1816152612(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1816152612 aggregation_state_map = new KeyValueMap_1816152612();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2977.956 ms/op
# Warmup Iteration   2: 2260.730 ms/op
# Warmup Iteration   3: 2218.787 ms/op
# Warmup Iteration   4: 2151.678 ms/op
# Warmup Iteration   5: 2130.706 ms/op
Iteration   1: 2078.278 ms/op
                 executeQuery·p0.00:   2078.278 ms/op
                 executeQuery·p0.50:   2078.278 ms/op
                 executeQuery·p0.90:   2078.278 ms/op
                 executeQuery·p0.95:   2078.278 ms/op
                 executeQuery·p0.99:   2078.278 ms/op
                 executeQuery·p0.999:  2078.278 ms/op
                 executeQuery·p0.9999: 2078.278 ms/op
                 executeQuery·p1.00:   2078.278 ms/op

Iteration   2: 2105.541 ms/op
                 executeQuery·p0.00:   2105.541 ms/op
                 executeQuery·p0.50:   2105.541 ms/op
                 executeQuery·p0.90:   2105.541 ms/op
                 executeQuery·p0.95:   2105.541 ms/op
                 executeQuery·p0.99:   2105.541 ms/op
                 executeQuery·p0.999:  2105.541 ms/op
                 executeQuery·p0.9999: 2105.541 ms/op
                 executeQuery·p1.00:   2105.541 ms/op

Iteration   3: 2069.889 ms/op
                 executeQuery·p0.00:   2069.889 ms/op
                 executeQuery·p0.50:   2069.889 ms/op
                 executeQuery·p0.90:   2069.889 ms/op
                 executeQuery·p0.95:   2069.889 ms/op
                 executeQuery·p0.99:   2069.889 ms/op
                 executeQuery·p0.999:  2069.889 ms/op
                 executeQuery·p0.9999: 2069.889 ms/op
                 executeQuery·p1.00:   2069.889 ms/op

Iteration   4: 2109.735 ms/op
                 executeQuery·p0.00:   2109.735 ms/op
                 executeQuery·p0.50:   2109.735 ms/op
                 executeQuery·p0.90:   2109.735 ms/op
                 executeQuery·p0.95:   2109.735 ms/op
                 executeQuery·p0.99:   2109.735 ms/op
                 executeQuery·p0.999:  2109.735 ms/op
                 executeQuery·p0.9999: 2109.735 ms/op
                 executeQuery·p1.00:   2109.735 ms/op

Iteration   5: 2111.832 ms/op
                 executeQuery·p0.00:   2111.832 ms/op
                 executeQuery·p0.50:   2111.832 ms/op
                 executeQuery·p0.90:   2111.832 ms/op
                 executeQuery·p0.95:   2111.832 ms/op
                 executeQuery·p0.99:   2111.832 ms/op
                 executeQuery·p0.999:  2111.832 ms/op
                 executeQuery·p0.9999: 2111.832 ms/op
                 executeQuery·p1.00:   2111.832 ms/op


# Run progress: 3.89% complete, ETA 05:12:56
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2499.805 ms/op
# Warmup Iteration   2: 2248.147 ms/op
# Warmup Iteration   3: 2222.981 ms/op
# Warmup Iteration   4: 2139.095 ms/op
# Warmup Iteration   5: 2103.443 ms/op
Iteration   1: 2092.958 ms/op
                 executeQuery·p0.00:   2092.958 ms/op
                 executeQuery·p0.50:   2092.958 ms/op
                 executeQuery·p0.90:   2092.958 ms/op
                 executeQuery·p0.95:   2092.958 ms/op
                 executeQuery·p0.99:   2092.958 ms/op
                 executeQuery·p0.999:  2092.958 ms/op
                 executeQuery·p0.9999: 2092.958 ms/op
                 executeQuery·p1.00:   2092.958 ms/op

Iteration   2: 2046.820 ms/op
                 executeQuery·p0.00:   2046.820 ms/op
                 executeQuery·p0.50:   2046.820 ms/op
                 executeQuery·p0.90:   2046.820 ms/op
                 executeQuery·p0.95:   2046.820 ms/op
                 executeQuery·p0.99:   2046.820 ms/op
                 executeQuery·p0.999:  2046.820 ms/op
                 executeQuery·p0.9999: 2046.820 ms/op
                 executeQuery·p1.00:   2046.820 ms/op

Iteration   3: 2120.221 ms/op
                 executeQuery·p0.00:   2120.221 ms/op
                 executeQuery·p0.50:   2120.221 ms/op
                 executeQuery·p0.90:   2120.221 ms/op
                 executeQuery·p0.95:   2120.221 ms/op
                 executeQuery·p0.99:   2120.221 ms/op
                 executeQuery·p0.999:  2120.221 ms/op
                 executeQuery·p0.9999: 2120.221 ms/op
                 executeQuery·p1.00:   2120.221 ms/op

Iteration   4: 2046.820 ms/op
                 executeQuery·p0.00:   2046.820 ms/op
                 executeQuery·p0.50:   2046.820 ms/op
                 executeQuery·p0.90:   2046.820 ms/op
                 executeQuery·p0.95:   2046.820 ms/op
                 executeQuery·p0.99:   2046.820 ms/op
                 executeQuery·p0.999:  2046.820 ms/op
                 executeQuery·p0.9999: 2046.820 ms/op
                 executeQuery·p1.00:   2046.820 ms/op

Iteration   5: 2084.569 ms/op
                 executeQuery·p0.00:   2084.569 ms/op
                 executeQuery·p0.50:   2084.569 ms/op
                 executeQuery·p0.90:   2084.569 ms/op
                 executeQuery·p0.95:   2084.569 ms/op
                 executeQuery·p0.99:   2084.569 ms/op
                 executeQuery·p0.999:  2084.569 ms/op
                 executeQuery·p0.9999: 2084.569 ms/op
                 executeQuery·p1.00:   2084.569 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   2086.666 ±(99.9%) 39.741 ms/op

  Histogram, ms/op:
    [2040.000, 2045.000) = 0 
    [2045.000, 2050.000) = 2 
    [2050.000, 2055.000) = 0 
    [2055.000, 2060.000) = 0 
    [2060.000, 2065.000) = 0 
    [2065.000, 2070.000) = 1 
    [2070.000, 2075.000) = 0 
    [2075.000, 2080.000) = 1 
    [2080.000, 2085.000) = 1 
    [2085.000, 2090.000) = 0 
    [2090.000, 2095.000) = 1 
    [2095.000, 2100.000) = 0 
    [2100.000, 2105.000) = 0 
    [2105.000, 2110.000) = 2 
    [2110.000, 2115.000) = 1 
    [2115.000, 2120.000) = 0 
    [2120.000, 2125.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2046.820 ms/op
     p(50.0000) =   2088.763 ms/op
     p(90.0000) =   2119.382 ms/op
     p(95.0000) =   2120.221 ms/op
     p(99.0000) =   2120.221 ms/op
     p(99.9000) =   2120.221 ms/op
     p(99.9900) =   2120.221 ms/op
     p(99.9990) =   2120.221 ms/op
     p(99.9999) =   2120.221 ms/op
    p(100.0000) =   2120.221 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 4.44% complete, ETA 05:21:47
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5712.642 ms/op
# Warmup Iteration   2: 4999.610 ms/op
# Warmup Iteration   3: 5024.776 ms/op
# Warmup Iteration   4: 5268.046 ms/op
# Warmup Iteration   5: 4898.947 ms/op
Iteration   1: 5100.274 ms/op
                 executeQuery·p0.00:   5100.274 ms/op
                 executeQuery·p0.50:   5100.274 ms/op
                 executeQuery·p0.90:   5100.274 ms/op
                 executeQuery·p0.95:   5100.274 ms/op
                 executeQuery·p0.99:   5100.274 ms/op
                 executeQuery·p0.999:  5100.274 ms/op
                 executeQuery·p0.9999: 5100.274 ms/op
                 executeQuery·p1.00:   5100.274 ms/op

Iteration   2: 5108.662 ms/op
                 executeQuery·p0.00:   5108.662 ms/op
                 executeQuery·p0.50:   5108.662 ms/op
                 executeQuery·p0.90:   5108.662 ms/op
                 executeQuery·p0.95:   5108.662 ms/op
                 executeQuery·p0.99:   5108.662 ms/op
                 executeQuery·p0.999:  5108.662 ms/op
                 executeQuery·p0.9999: 5108.662 ms/op
                 executeQuery·p1.00:   5108.662 ms/op

Iteration   3: 4865.393 ms/op
                 executeQuery·p0.00:   4865.393 ms/op
                 executeQuery·p0.50:   4865.393 ms/op
                 executeQuery·p0.90:   4865.393 ms/op
                 executeQuery·p0.95:   4865.393 ms/op
                 executeQuery·p0.99:   4865.393 ms/op
                 executeQuery·p0.999:  4865.393 ms/op
                 executeQuery·p0.9999: 4865.393 ms/op
                 executeQuery·p1.00:   4865.393 ms/op

Iteration   4: 5108.662 ms/op
                 executeQuery·p0.00:   5108.662 ms/op
                 executeQuery·p0.50:   5108.662 ms/op
                 executeQuery·p0.90:   5108.662 ms/op
                 executeQuery·p0.95:   5108.662 ms/op
                 executeQuery·p0.99:   5108.662 ms/op
                 executeQuery·p0.999:  5108.662 ms/op
                 executeQuery·p0.9999: 5108.662 ms/op
                 executeQuery·p1.00:   5108.662 ms/op

Iteration   5: 4932.502 ms/op
                 executeQuery·p0.00:   4932.502 ms/op
                 executeQuery·p0.50:   4932.502 ms/op
                 executeQuery·p0.90:   4932.502 ms/op
                 executeQuery·p0.95:   4932.502 ms/op
                 executeQuery·p0.99:   4932.502 ms/op
                 executeQuery·p0.999:  4932.502 ms/op
                 executeQuery·p0.9999: 4932.502 ms/op
                 executeQuery·p1.00:   4932.502 ms/op


# Run progress: 5.00% complete, ETA 07:11:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5435.818 ms/op
# Warmup Iteration   2: 5007.999 ms/op
# Warmup Iteration   3: 4940.890 ms/op
# Warmup Iteration   4: 5167.383 ms/op
# Warmup Iteration   5: 4898.947 ms/op
Iteration   1: 4915.724 ms/op
                 executeQuery·p0.00:   4915.724 ms/op
                 executeQuery·p0.50:   4915.724 ms/op
                 executeQuery·p0.90:   4915.724 ms/op
                 executeQuery·p0.95:   4915.724 ms/op
                 executeQuery·p0.99:   4915.724 ms/op
                 executeQuery·p0.999:  4915.724 ms/op
                 executeQuery·p0.9999: 4915.724 ms/op
                 executeQuery·p1.00:   4915.724 ms/op

Iteration   2: 5158.994 ms/op
                 executeQuery·p0.00:   5158.994 ms/op
                 executeQuery·p0.50:   5158.994 ms/op
                 executeQuery·p0.90:   5158.994 ms/op
                 executeQuery·p0.95:   5158.994 ms/op
                 executeQuery·p0.99:   5158.994 ms/op
                 executeQuery·p0.999:  5158.994 ms/op
                 executeQuery·p0.9999: 5158.994 ms/op
                 executeQuery·p1.00:   5158.994 ms/op

Iteration   3: 4873.781 ms/op
                 executeQuery·p0.00:   4873.781 ms/op
                 executeQuery·p0.50:   4873.781 ms/op
                 executeQuery·p0.90:   4873.781 ms/op
                 executeQuery·p0.95:   4873.781 ms/op
                 executeQuery·p0.99:   4873.781 ms/op
                 executeQuery·p0.999:  4873.781 ms/op
                 executeQuery·p0.9999: 4873.781 ms/op
                 executeQuery·p1.00:   4873.781 ms/op

Iteration   4: 5150.605 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5150.605 ms/op
                 executeQuery·p0.90:   5150.605 ms/op
                 executeQuery·p0.95:   5150.605 ms/op
                 executeQuery·p0.99:   5150.605 ms/op
                 executeQuery·p0.999:  5150.605 ms/op
                 executeQuery·p0.9999: 5150.605 ms/op
                 executeQuery·p1.00:   5150.605 ms/op

Iteration   5: 4898.947 ms/op
                 executeQuery·p0.00:   4898.947 ms/op
                 executeQuery·p0.50:   4898.947 ms/op
                 executeQuery·p0.90:   4898.947 ms/op
                 executeQuery·p0.95:   4898.947 ms/op
                 executeQuery·p0.99:   4898.947 ms/op
                 executeQuery·p0.999:  4898.947 ms/op
                 executeQuery·p0.9999: 4898.947 ms/op
                 executeQuery·p1.00:   4898.947 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   5011.354 ±(99.9%) 186.027 ms/op

  Histogram, ms/op:
    [4800.000, 4825.000) = 0 
    [4825.000, 4850.000) = 0 
    [4850.000, 4875.000) = 2 
    [4875.000, 4900.000) = 1 
    [4900.000, 4925.000) = 1 
    [4925.000, 4950.000) = 1 
    [4950.000, 4975.000) = 0 
    [4975.000, 5000.000) = 0 
    [5000.000, 5025.000) = 0 
    [5025.000, 5050.000) = 0 
    [5050.000, 5075.000) = 0 
    [5075.000, 5100.000) = 0 
    [5100.000, 5125.000) = 3 
    [5125.000, 5150.000) = 0 
    [5150.000, 5175.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   4865.393 ms/op
     p(50.0000) =   5016.388 ms/op
     p(90.0000) =   5158.155 ms/op
     p(95.0000) =   5158.994 ms/op
     p(99.0000) =   5158.994 ms/op
     p(99.9000) =   5158.994 ms/op
     p(99.9900) =   5158.994 ms/op
     p(99.9990) =   5158.994 ms/op
     p(99.9999) =   5158.994 ms/op
    p(100.0000) =   5158.994 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 5.56% complete, ETA 08:36:32
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6285.165 ms/op
# Warmup Iteration   2: 3833.594 ±(99.9%) 2610.657 ms/op
# Warmup Iteration   3: 3674.210 ±(99.9%) 265.072 ms/op
# Warmup Iteration   4: 3674.210 ±(99.9%) 0.001 ms/op
# Warmup Iteration   5: 3671.414 ±(99.9%) 44.179 ms/op
Iteration   1: 3677.007 ±(99.9%) 233.772 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3674.210 ms/op
                 executeQuery·p0.90:   3690.988 ms/op
                 executeQuery·p0.95:   3690.988 ms/op
                 executeQuery·p0.99:   3690.988 ms/op
                 executeQuery·p0.999:  3690.988 ms/op
                 executeQuery·p0.9999: 3690.988 ms/op
                 executeQuery·p1.00:   3690.988 ms/op

Iteration   2: 3663.025 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3661.627 ms/op
                 executeQuery·p0.50:   3661.627 ms/op
                 executeQuery·p0.90:   3665.822 ms/op
                 executeQuery·p0.95:   3665.822 ms/op
                 executeQuery·p0.99:   3665.822 ms/op
                 executeQuery·p0.999:  3665.822 ms/op
                 executeQuery·p0.9999: 3665.822 ms/op
                 executeQuery·p1.00:   3665.822 ms/op

Iteration   3: 3665.822 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3665.822 ms/op
                 executeQuery·p0.90:   3665.822 ms/op
                 executeQuery·p0.95:   3665.822 ms/op
                 executeQuery·p0.99:   3665.822 ms/op
                 executeQuery·p0.999:  3665.822 ms/op
                 executeQuery·p0.9999: 3665.822 ms/op
                 executeQuery·p1.00:   3665.822 ms/op

Iteration   4: 3732.931 ±(99.9%) 1383.717 ms/op
                 executeQuery·p0.00:   3661.627 ms/op
                 executeQuery·p0.50:   3724.542 ms/op
                 executeQuery·p0.90:   3812.622 ms/op
                 executeQuery·p0.95:   3812.622 ms/op
                 executeQuery·p0.99:   3812.622 ms/op
                 executeQuery·p0.999:  3812.622 ms/op
                 executeQuery·p0.9999: 3812.622 ms/op
                 executeQuery·p1.00:   3812.622 ms/op

Iteration   5: 3667.220 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3665.822 ms/op
                 executeQuery·p0.90:   3670.016 ms/op
                 executeQuery·p0.95:   3670.016 ms/op
                 executeQuery·p0.99:   3670.016 ms/op
                 executeQuery·p0.999:  3670.016 ms/op
                 executeQuery·p0.9999: 3670.016 ms/op
                 executeQuery·p1.00:   3670.016 ms/op


# Run progress: 6.11% complete, ETA 08:16:07
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3428.144 ±(99.9%) 21410.804 ms/op
# Warmup Iteration   2: 3737.125 ±(99.9%) 2187.179 ms/op
# Warmup Iteration   3: 3734.329 ±(99.9%) 2166.107 ms/op
# Warmup Iteration   4: 3667.220 ±(99.9%) 44.179 ms/op
# Warmup Iteration   5: 3668.618 ±(99.9%) 44.179 ms/op
Iteration   1: 3681.201 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3670.016 ms/op
                 executeQuery·p0.90:   3707.765 ms/op
                 executeQuery·p0.95:   3707.765 ms/op
                 executeQuery·p0.99:   3707.765 ms/op
                 executeQuery·p0.999:  3707.765 ms/op
                 executeQuery·p0.9999: 3707.765 ms/op
                 executeQuery·p1.00:   3707.765 ms/op

Iteration   2: 3742.717 ±(99.9%) 2231.351 ms/op
                 executeQuery·p0.00:   3670.016 ms/op
                 executeQuery·p0.50:   3674.210 ms/op
                 executeQuery·p0.90:   3883.926 ms/op
                 executeQuery·p0.95:   3883.926 ms/op
                 executeQuery·p0.99:   3883.926 ms/op
                 executeQuery·p0.999:  3883.926 ms/op
                 executeQuery·p0.9999: 3883.926 ms/op
                 executeQuery·p1.00:   3883.926 ms/op

Iteration   3: 3668.618 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3670.016 ms/op
                 executeQuery·p0.90:   3670.016 ms/op
                 executeQuery·p0.95:   3670.016 ms/op
                 executeQuery·p0.99:   3670.016 ms/op
                 executeQuery·p0.999:  3670.016 ms/op
                 executeQuery·p0.9999: 3670.016 ms/op
                 executeQuery·p1.00:   3670.016 ms/op

Iteration   4: 3671.414 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3670.016 ms/op
                 executeQuery·p0.50:   3670.016 ms/op
                 executeQuery·p0.90:   3674.210 ms/op
                 executeQuery·p0.95:   3674.210 ms/op
                 executeQuery·p0.99:   3674.210 ms/op
                 executeQuery·p0.999:  3674.210 ms/op
                 executeQuery·p0.9999: 3674.210 ms/op
                 executeQuery·p1.00:   3674.210 ms/op

Iteration   5: 3744.115 ±(99.9%) 2275.524 ms/op
                 executeQuery·p0.00:   3670.016 ms/op
                 executeQuery·p0.50:   3674.210 ms/op
                 executeQuery·p0.90:   3888.120 ms/op
                 executeQuery·p0.95:   3888.120 ms/op
                 executeQuery·p0.99:   3888.120 ms/op
                 executeQuery·p0.999:  3888.120 ms/op
                 executeQuery·p0.9999: 3888.120 ms/op
                 executeQuery·p1.00:   3888.120 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   3691.407 ±(99.9%) 40.243 ms/op

  Histogram, ms/op:
    [3600.000, 3625.000) = 0 
    [3625.000, 3650.000) = 0 
    [3650.000, 3675.000) = 24 
    [3675.000, 3700.000) = 1 
    [3700.000, 3725.000) = 2 
    [3725.000, 3750.000) = 0 
    [3750.000, 3775.000) = 0 
    [3775.000, 3800.000) = 0 
    [3800.000, 3825.000) = 1 
    [3825.000, 3850.000) = 0 
    [3850.000, 3875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3661.627 ms/op
     p(50.0000) =   3670.016 ms/op
     p(90.0000) =   3803.814 ms/op
     p(95.0000) =   3885.813 ms/op
     p(99.0000) =   3888.120 ms/op
     p(99.9000) =   3888.120 ms/op
     p(99.9900) =   3888.120 ms/op
     p(99.9990) =   3888.120 ms/op
     p(99.9999) =   3888.120 ms/op
    p(100.0000) =   3888.120 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 6.67% complete, ETA 07:58:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6811.550 ms/op
# Warmup Iteration   2: 5326.766 ms/op
# Warmup Iteration   3: 5150.605 ms/op
# Warmup Iteration   4: 5217.714 ms/op
# Warmup Iteration   5: 5154.800 ms/op
Iteration   1: 5150.605 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5150.605 ms/op
                 executeQuery·p0.90:   5150.605 ms/op
                 executeQuery·p0.95:   5150.605 ms/op
                 executeQuery·p0.99:   5150.605 ms/op
                 executeQuery·p0.999:  5150.605 ms/op
                 executeQuery·p0.9999: 5150.605 ms/op
                 executeQuery·p1.00:   5150.605 ms/op

Iteration   2: 5167.383 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5167.383 ms/op
                 executeQuery·p0.90:   5184.160 ms/op
                 executeQuery·p0.95:   5184.160 ms/op
                 executeQuery·p0.99:   5184.160 ms/op
                 executeQuery·p0.999:  5184.160 ms/op
                 executeQuery·p0.9999: 5184.160 ms/op
                 executeQuery·p1.00:   5184.160 ms/op

Iteration   3: 5150.605 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5150.605 ms/op
                 executeQuery·p0.90:   5150.605 ms/op
                 executeQuery·p0.95:   5150.605 ms/op
                 executeQuery·p0.99:   5150.605 ms/op
                 executeQuery·p0.999:  5150.605 ms/op
                 executeQuery·p0.9999: 5150.605 ms/op
                 executeQuery·p1.00:   5150.605 ms/op

Iteration   4: 5158.994 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5158.994 ms/op
                 executeQuery·p0.90:   5167.383 ms/op
                 executeQuery·p0.95:   5167.383 ms/op
                 executeQuery·p0.99:   5167.383 ms/op
                 executeQuery·p0.999:  5167.383 ms/op
                 executeQuery·p0.9999: 5167.383 ms/op
                 executeQuery·p1.00:   5167.383 ms/op

Iteration   5: 5179.965 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5179.965 ms/op
                 executeQuery·p0.90:   5209.326 ms/op
                 executeQuery·p0.95:   5209.326 ms/op
                 executeQuery·p0.99:   5209.326 ms/op
                 executeQuery·p0.999:  5209.326 ms/op
                 executeQuery·p0.9999: 5209.326 ms/op
                 executeQuery·p1.00:   5209.326 ms/op


# Run progress: 7.22% complete, ETA 07:42:11
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_457167145 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_457167145() {
        this(4);
    }
    public KeyValueMap_457167145(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_457167145 aggregation_state_map = new KeyValueMap_457167145();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4901.743 ±(99.9%) 8385.574 ms/op
# Warmup Iteration   2: 5247.074 ms/op
# Warmup Iteration   3: 4999.610 ±(99.9%) 1738.194 ms/op
# Warmup Iteration   4: 4952.075 ±(99.9%) 88.357 ms/op
# Warmup Iteration   5: 4946.483 ±(99.9%) 88.357 ms/op
Iteration   1: 4946.483 ±(99.9%) 176.715 ms/op
                 executeQuery·p0.00:   4940.890 ms/op
                 executeQuery·p0.50:   4940.890 ms/op
                 executeQuery·p0.90:   4957.667 ms/op
                 executeQuery·p0.95:   4957.667 ms/op
                 executeQuery·p0.99:   4957.667 ms/op
                 executeQuery·p0.999:  4957.667 ms/op
                 executeQuery·p0.9999: 4957.667 ms/op
                 executeQuery·p1.00:   4957.667 ms/op

Iteration   2: 4929.705 ±(99.9%) 233.772 ms/op
                 executeQuery·p0.00:   4915.724 ms/op
                 executeQuery·p0.50:   4932.502 ms/op
                 executeQuery·p0.90:   4940.890 ms/op
                 executeQuery·p0.95:   4940.890 ms/op
                 executeQuery·p0.99:   4940.890 ms/op
                 executeQuery·p0.999:  4940.890 ms/op
                 executeQuery·p0.9999: 4940.890 ms/op
                 executeQuery·p1.00:   4940.890 ms/op

Iteration   3: 4938.094 ±(99.9%) 318.577 ms/op
                 executeQuery·p0.00:   4924.113 ms/op
                 executeQuery·p0.50:   4932.502 ms/op
                 executeQuery·p0.90:   4957.667 ms/op
                 executeQuery·p0.95:   4957.667 ms/op
                 executeQuery·p0.99:   4957.667 ms/op
                 executeQuery·p0.999:  4957.667 ms/op
                 executeQuery·p0.9999: 4957.667 ms/op
                 executeQuery·p1.00:   4957.667 ms/op

Iteration   4: 4946.483 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   4940.890 ms/op
                 executeQuery·p0.50:   4949.279 ms/op
                 executeQuery·p0.90:   4949.279 ms/op
                 executeQuery·p0.95:   4949.279 ms/op
                 executeQuery·p0.99:   4949.279 ms/op
                 executeQuery·p0.999:  4949.279 ms/op
                 executeQuery·p0.9999: 4949.279 ms/op
                 executeQuery·p1.00:   4949.279 ms/op

Iteration   5: 4938.094 ±(99.9%) 233.772 ms/op
                 executeQuery·p0.00:   4924.113 ms/op
                 executeQuery·p0.50:   4940.890 ms/op
                 executeQuery·p0.90:   4949.279 ms/op
                 executeQuery·p0.95:   4949.279 ms/op
                 executeQuery·p0.99:   4949.279 ms/op
                 executeQuery·p0.999:  4949.279 ms/op
                 executeQuery·p0.9999: 4949.279 ms/op
                 executeQuery·p1.00:   4949.279 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 25
  mean =   5028.467 ±(99.9%) 83.857 ms/op

  Histogram, ms/op:
    [4900.000, 4925.000) = 3 
    [4925.000, 4950.000) = 10 
    [4950.000, 4975.000) = 2 
    [4975.000, 5000.000) = 0 
    [5000.000, 5025.000) = 0 
    [5025.000, 5050.000) = 0 
    [5050.000, 5075.000) = 0 
    [5075.000, 5100.000) = 0 
    [5100.000, 5125.000) = 0 
    [5125.000, 5150.000) = 0 
    [5150.000, 5175.000) = 8 
    [5175.000, 5200.000) = 1 
    [5200.000, 5225.000) = 1 
    [5225.000, 5250.000) = 0 
    [5250.000, 5275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4915.724 ms/op
     p(50.0000) =   4949.279 ms/op
     p(90.0000) =   5174.093 ms/op
     p(95.0000) =   5201.776 ms/op
     p(99.0000) =   5209.326 ms/op
     p(99.9000) =   5209.326 ms/op
     p(99.9900) =   5209.326 ms/op
     p(99.9990) =   5209.326 ms/op
     p(99.9999) =   5209.326 ms/op
    p(100.0000) =   5209.326 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 7.78% complete, ETA 07:35:29
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7734.297 ms/op
# Warmup Iteration   2: 7302.283 ms/op
# Warmup Iteration   3: 7625.245 ms/op
# Warmup Iteration   4: 7356.809 ms/op
# Warmup Iteration   5: 7444.890 ms/op
Iteration   1: 7688.159 ms/op
                 executeQuery·p0.00:   7532.970 ms/op
                 executeQuery·p0.50:   7688.159 ms/op
                 executeQuery·p0.90:   7843.348 ms/op
                 executeQuery·p0.95:   7843.348 ms/op
                 executeQuery·p0.99:   7843.348 ms/op
                 executeQuery·p0.999:  7843.348 ms/op
                 executeQuery·p0.9999: 7843.348 ms/op
                 executeQuery·p1.00:   7843.348 ms/op

Iteration   2: 7474.250 ms/op
                 executeQuery·p0.00:   7440.695 ms/op
                 executeQuery·p0.50:   7474.250 ms/op
                 executeQuery·p0.90:   7507.804 ms/op
                 executeQuery·p0.95:   7507.804 ms/op
                 executeQuery·p0.99:   7507.804 ms/op
                 executeQuery·p0.999:  7507.804 ms/op
                 executeQuery·p0.9999: 7507.804 ms/op
                 executeQuery·p1.00:   7507.804 ms/op

Iteration   3: 7449.084 ms/op
                 executeQuery·p0.00:   7432.307 ms/op
                 executeQuery·p0.50:   7449.084 ms/op
                 executeQuery·p0.90:   7465.861 ms/op
                 executeQuery·p0.95:   7465.861 ms/op
                 executeQuery·p0.99:   7465.861 ms/op
                 executeQuery·p0.999:  7465.861 ms/op
                 executeQuery·p0.9999: 7465.861 ms/op
                 executeQuery·p1.00:   7465.861 ms/op

Iteration   4: 7348.421 ms/op
                 executeQuery·p0.00:   7323.255 ms/op
                 executeQuery·p0.50:   7348.421 ms/op
                 executeQuery·p0.90:   7373.586 ms/op
                 executeQuery·p0.95:   7373.586 ms/op
                 executeQuery·p0.99:   7373.586 ms/op
                 executeQuery·p0.999:  7373.586 ms/op
                 executeQuery·p0.9999: 7373.586 ms/op
                 executeQuery·p1.00:   7373.586 ms/op

Iteration   5: 7314.866 ms/op
                 executeQuery·p0.00:   7197.426 ms/op
                 executeQuery·p0.50:   7314.866 ms/op
                 executeQuery·p0.90:   7432.307 ms/op
                 executeQuery·p0.95:   7432.307 ms/op
                 executeQuery·p0.99:   7432.307 ms/op
                 executeQuery·p0.999:  7432.307 ms/op
                 executeQuery·p0.9999: 7432.307 ms/op
                 executeQuery·p1.00:   7432.307 ms/op


# Run progress: 8.33% complete, ETA 07:30:23
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_457167145 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_457167145() {
        this(4);
    }
    public KeyValueMap_457167145(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_457167145 aggregation_state_map = new KeyValueMap_457167145();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7520.387 ms/op
# Warmup Iteration   2: 7256.146 ms/op
# Warmup Iteration   3: 7499.416 ms/op
# Warmup Iteration   4: 7587.496 ms/op
# Warmup Iteration   5: 7407.141 ms/op
Iteration   1: 7511.998 ms/op
                 executeQuery·p0.00:   7482.638 ms/op
                 executeQuery·p0.50:   7511.998 ms/op
                 executeQuery·p0.90:   7541.359 ms/op
                 executeQuery·p0.95:   7541.359 ms/op
                 executeQuery·p0.99:   7541.359 ms/op
                 executeQuery·p0.999:  7541.359 ms/op
                 executeQuery·p0.9999: 7541.359 ms/op
                 executeQuery·p1.00:   7541.359 ms/op

Iteration   2: 7478.444 ms/op
                 executeQuery·p0.00:   7423.918 ms/op
                 executeQuery·p0.50:   7478.444 ms/op
                 executeQuery·p0.90:   7532.970 ms/op
                 executeQuery·p0.95:   7532.970 ms/op
                 executeQuery·p0.99:   7532.970 ms/op
                 executeQuery·p0.999:  7532.970 ms/op
                 executeQuery·p0.9999: 7532.970 ms/op
                 executeQuery·p1.00:   7532.970 ms/op

Iteration   3: 7461.667 ms/op
                 executeQuery·p0.00:   7415.529 ms/op
                 executeQuery·p0.50:   7461.667 ms/op
                 executeQuery·p0.90:   7507.804 ms/op
                 executeQuery·p0.95:   7507.804 ms/op
                 executeQuery·p0.99:   7507.804 ms/op
                 executeQuery·p0.999:  7507.804 ms/op
                 executeQuery·p0.9999: 7507.804 ms/op
                 executeQuery·p1.00:   7507.804 ms/op

Iteration   4: 7541.359 ms/op
                 executeQuery·p0.00:   7541.359 ms/op
                 executeQuery·p0.50:   7541.359 ms/op
                 executeQuery·p0.90:   7541.359 ms/op
                 executeQuery·p0.95:   7541.359 ms/op
                 executeQuery·p0.99:   7541.359 ms/op
                 executeQuery·p0.999:  7541.359 ms/op
                 executeQuery·p0.9999: 7541.359 ms/op
                 executeQuery·p1.00:   7541.359 ms/op

Iteration   5: 7524.581 ms/op
                 executeQuery·p0.00:   7516.193 ms/op
                 executeQuery·p0.50:   7524.581 ms/op
                 executeQuery·p0.90:   7532.970 ms/op
                 executeQuery·p0.95:   7532.970 ms/op
                 executeQuery·p0.99:   7532.970 ms/op
                 executeQuery·p0.999:  7532.970 ms/op
                 executeQuery·p0.9999: 7532.970 ms/op
                 executeQuery·p1.00:   7532.970 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   7479.283 ±(99.9%) 106.150 ms/op

  Histogram, ms/op:
    [7100.000, 7150.000) = 0 
    [7150.000, 7200.000) = 1 
    [7200.000, 7250.000) = 0 
    [7250.000, 7300.000) = 0 
    [7300.000, 7350.000) = 1 
    [7350.000, 7400.000) = 1 
    [7400.000, 7450.000) = 5 
    [7450.000, 7500.000) = 2 
    [7500.000, 7550.000) = 9 
    [7550.000, 7600.000) = 0 
    [7600.000, 7650.000) = 0 
    [7650.000, 7700.000) = 0 
    [7700.000, 7750.000) = 0 
    [7750.000, 7800.000) = 0 
    [7800.000, 7850.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   7197.426 ms/op
     p(50.0000) =   7495.221 ms/op
     p(90.0000) =   7541.359 ms/op
     p(95.0000) =   7828.249 ms/op
     p(99.0000) =   7843.348 ms/op
     p(99.9000) =   7843.348 ms/op
     p(99.9900) =   7843.348 ms/op
     p(99.9990) =   7843.348 ms/op
     p(99.9999) =   7843.348 ms/op
    p(100.0000) =   7843.348 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 8.89% complete, ETA 07:25:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

29192.356 ms/op
# Warmup Iteration   2: 23521.657 ms/op
# Warmup Iteration   3: 23756.538 ms/op
# Warmup Iteration   4: 24662.508 ms/op
# Warmup Iteration   5: 22515.024 ms/op
Iteration   1: 23722.983 ms/op
                 executeQuery·p0.00:   23722.983 ms/op
                 executeQuery·p0.50:   23722.983 ms/op
                 executeQuery·p0.90:   23722.983 ms/op
                 executeQuery·p0.95:   23722.983 ms/op
                 executeQuery·p0.99:   23722.983 ms/op
                 executeQuery·p0.999:  23722.983 ms/op
                 executeQuery·p0.9999: 23722.983 ms/op
                 executeQuery·p1.00:   23722.983 ms/op

Iteration   2: 23790.092 ms/op
                 executeQuery·p0.00:   23790.092 ms/op
                 executeQuery·p0.50:   23790.092 ms/op
                 executeQuery·p0.90:   23790.092 ms/op
                 executeQuery·p0.95:   23790.092 ms/op
                 executeQuery·p0.99:   23790.092 ms/op
                 executeQuery·p0.999:  23790.092 ms/op
                 executeQuery·p0.9999: 23790.092 ms/op
                 executeQuery·p1.00:   23790.092 ms/op

Iteration   3: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op

Iteration   4: 22850.568 ms/op
                 executeQuery·p0.00:   22850.568 ms/op
                 executeQuery·p0.50:   22850.568 ms/op
                 executeQuery·p0.90:   22850.568 ms/op
                 executeQuery·p0.95:   22850.568 ms/op
                 executeQuery·p0.99:   22850.568 ms/op
                 executeQuery·p0.999:  22850.568 ms/op
                 executeQuery·p0.9999: 22850.568 ms/op
                 executeQuery·p1.00:   22850.568 ms/op

Iteration   5: 24360.518 ms/op
                 executeQuery·p0.00:   24360.518 ms/op
                 executeQuery·p0.50:   24360.518 ms/op
                 executeQuery·p0.90:   24360.518 ms/op
                 executeQuery·p0.95:   24360.518 ms/op
                 executeQuery·p0.99:   24360.518 ms/op
                 executeQuery·p0.999:  24360.518 ms/op
                 executeQuery·p0.9999: 24360.518 ms/op
                 executeQuery·p1.00:   24360.518 ms/op


# Run progress: 9.44% complete, ETA 07:52:40
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

24528.290 ms/op
# Warmup Iteration   2: 23454.548 ms/op
# Warmup Iteration   3: 23756.538 ms/op
# Warmup Iteration   4: 21072.183 ms/op
# Warmup Iteration   5: 21407.728 ms/op
Iteration   1: 24058.528 ms/op
                 executeQuery·p0.00:   24058.528 ms/op
                 executeQuery·p0.50:   24058.528 ms/op
                 executeQuery·p0.90:   24058.528 ms/op
                 executeQuery·p0.95:   24058.528 ms/op
                 executeQuery·p0.99:   24058.528 ms/op
                 executeQuery·p0.999:  24058.528 ms/op
                 executeQuery·p0.9999: 24058.528 ms/op
                 executeQuery·p1.00:   24058.528 ms/op

Iteration   2: 23051.895 ms/op
                 executeQuery·p0.00:   23051.895 ms/op
                 executeQuery·p0.50:   23051.895 ms/op
                 executeQuery·p0.90:   23051.895 ms/op
                 executeQuery·p0.95:   23051.895 ms/op
                 executeQuery·p0.99:   23051.895 ms/op
                 executeQuery·p0.999:  23051.895 ms/op
                 executeQuery·p0.9999: 23051.895 ms/op
                 executeQuery·p1.00:   23051.895 ms/op

Iteration   3: 22414.361 ms/op
                 executeQuery·p0.00:   22414.361 ms/op
                 executeQuery·p0.50:   22414.361 ms/op
                 executeQuery·p0.90:   22414.361 ms/op
                 executeQuery·p0.95:   22414.361 ms/op
                 executeQuery·p0.99:   22414.361 ms/op
                 executeQuery·p0.999:  22414.361 ms/op
                 executeQuery·p0.9999: 22414.361 ms/op
                 executeQuery·p1.00:   22414.361 ms/op

Iteration   4: 23253.221 ms/op
                 executeQuery·p0.00:   23253.221 ms/op
                 executeQuery·p0.50:   23253.221 ms/op
                 executeQuery·p0.90:   23253.221 ms/op
                 executeQuery·p0.95:   23253.221 ms/op
                 executeQuery·p0.99:   23253.221 ms/op
                 executeQuery·p0.999:  23253.221 ms/op
                 executeQuery·p0.9999: 23253.221 ms/op
                 executeQuery·p1.00:   23253.221 ms/op

Iteration   5: 23588.766 ms/op
                 executeQuery·p0.00:   23588.766 ms/op
                 executeQuery·p0.50:   23588.766 ms/op
                 executeQuery·p0.90:   23588.766 ms/op
                 executeQuery·p0.95:   23588.766 ms/op
                 executeQuery·p0.99:   23588.766 ms/op
                 executeQuery·p0.999:  23588.766 ms/op
                 executeQuery·p0.9999: 23588.766 ms/op
                 executeQuery·p1.00:   23588.766 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  23437.771 ±(99.9%) 881.990 ms/op

  Histogram, ms/op:
    [22000.000, 22250.000) = 0 
    [22250.000, 22500.000) = 1 
    [22500.000, 22750.000) = 0 
    [22750.000, 23000.000) = 1 
    [23000.000, 23250.000) = 1 
    [23250.000, 23500.000) = 2 
    [23500.000, 23750.000) = 2 
    [23750.000, 24000.000) = 1 
    [24000.000, 24250.000) = 1 
    [24250.000, 24500.000) = 1 
    [24500.000, 24750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  22414.361 ms/op
     p(50.0000) =  23437.771 ms/op
     p(90.0000) =  24330.319 ms/op
     p(95.0000) =  24360.518 ms/op
     p(99.0000) =  24360.518 ms/op
     p(99.9000) =  24360.518 ms/op
     p(99.9900) =  24360.518 ms/op
     p(99.9990) =  24360.518 ms/op
     p(99.9999) =  24360.518 ms/op
    p(100.0000) =  24360.518 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 10.00% complete, ETA 08:14:25
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

52881.785 ms/op
# Warmup Iteration   2: 49727.668 ms/op
# Warmup Iteration   3: 51472.499 ms/op
# Warmup Iteration   4: 50801.410 ms/op
# Warmup Iteration   5: 48117.055 ms/op
Iteration   1: 51673.825 ms/op
                 executeQuery·p0.00:   51673.825 ms/op
                 executeQuery·p0.50:   51673.825 ms/op
                 executeQuery·p0.90:   51673.825 ms/op
                 executeQuery·p0.95:   51673.825 ms/op
                 executeQuery·p0.99:   51673.825 ms/op
                 executeQuery·p0.999:  51673.825 ms/op
                 executeQuery·p0.9999: 51673.825 ms/op
                 executeQuery·p1.00:   51673.825 ms/op

Iteration   2: 49526.342 ms/op
                 executeQuery·p0.00:   49526.342 ms/op
                 executeQuery·p0.50:   49526.342 ms/op
                 executeQuery·p0.90:   49526.342 ms/op
                 executeQuery·p0.95:   49526.342 ms/op
                 executeQuery·p0.99:   49526.342 ms/op
                 executeQuery·p0.999:  49526.342 ms/op
                 executeQuery·p0.9999: 49526.342 ms/op
                 executeQuery·p1.00:   49526.342 ms/op

Iteration   3: 50734.301 ms/op
                 executeQuery·p0.00:   50734.301 ms/op
                 executeQuery·p0.50:   50734.301 ms/op
                 executeQuery·p0.90:   50734.301 ms/op
                 executeQuery·p0.95:   50734.301 ms/op
                 executeQuery·p0.99:   50734.301 ms/op
                 executeQuery·p0.999:  50734.301 ms/op
                 executeQuery·p0.9999: 50734.301 ms/op
                 executeQuery·p1.00:   50734.301 ms/op

Iteration   4: 48318.382 ms/op
                 executeQuery·p0.00:   48318.382 ms/op
                 executeQuery·p0.50:   48318.382 ms/op
                 executeQuery·p0.90:   48318.382 ms/op
                 executeQuery·p0.95:   48318.382 ms/op
                 executeQuery·p0.99:   48318.382 ms/op
                 executeQuery·p0.999:  48318.382 ms/op
                 executeQuery·p0.9999: 48318.382 ms/op
                 executeQuery·p1.00:   48318.382 ms/op

Iteration   5: 49459.233 ms/op
                 executeQuery·p0.00:   49459.233 ms/op
                 executeQuery·p0.50:   49459.233 ms/op
                 executeQuery·p0.90:   49459.233 ms/op
                 executeQuery·p0.95:   49459.233 ms/op
                 executeQuery·p0.99:   49459.233 ms/op
                 executeQuery·p0.999:  49459.233 ms/op
                 executeQuery·p0.9999: 49459.233 ms/op
                 executeQuery·p1.00:   49459.233 ms/op


# Run progress: 10.56% complete, ETA 09:52:58
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

49392.124 ms/op
# Warmup Iteration   2: 48586.818 ms/op
# Warmup Iteration   3: 51136.954 ms/op
# Warmup Iteration   4: 49727.668 ms/op
# Warmup Iteration   5: 49257.906 ms/op
Iteration   1: 49190.797 ms/op
                 executeQuery·p0.00:   49190.797 ms/op
                 executeQuery·p0.50:   49190.797 ms/op
                 executeQuery·p0.90:   49190.797 ms/op
                 executeQuery·p0.95:   49190.797 ms/op
                 executeQuery·p0.99:   49190.797 ms/op
                 executeQuery·p0.999:  49190.797 ms/op
                 executeQuery·p0.9999: 49190.797 ms/op
                 executeQuery·p1.00:   49190.797 ms/op

Iteration   2: 51271.172 ms/op
                 executeQuery·p0.00:   51271.172 ms/op
                 executeQuery·p0.50:   51271.172 ms/op
                 executeQuery·p0.90:   51271.172 ms/op
                 executeQuery·p0.95:   51271.172 ms/op
                 executeQuery·p0.99:   51271.172 ms/op
                 executeQuery·p0.999:  51271.172 ms/op
                 executeQuery·p0.9999: 51271.172 ms/op
                 executeQuery·p1.00:   51271.172 ms/op

Iteration   3: 49593.450 ms/op
                 executeQuery·p0.00:   49593.450 ms/op
                 executeQuery·p0.50:   49593.450 ms/op
                 executeQuery·p0.90:   49593.450 ms/op
                 executeQuery·p0.95:   49593.450 ms/op
                 executeQuery·p0.99:   49593.450 ms/op
                 executeQuery·p0.999:  49593.450 ms/op
                 executeQuery·p0.9999: 49593.450 ms/op
                 executeQuery·p1.00:   49593.450 ms/op

Iteration   4: 49526.342 ms/op
                 executeQuery·p0.00:   49526.342 ms/op
                 executeQuery·p0.50:   49526.342 ms/op
                 executeQuery·p0.90:   49526.342 ms/op
                 executeQuery·p0.95:   49526.342 ms/op
                 executeQuery·p0.99:   49526.342 ms/op
                 executeQuery·p0.999:  49526.342 ms/op
                 executeQuery·p0.9999: 49526.342 ms/op
                 executeQuery·p1.00:   49526.342 ms/op

Iteration   5: 48117.055 ms/op
                 executeQuery·p0.00:   48117.055 ms/op
                 executeQuery·p0.50:   48117.055 ms/op
                 executeQuery·p0.90:   48117.055 ms/op
                 executeQuery·p0.95:   48117.055 ms/op
                 executeQuery·p0.99:   48117.055 ms/op
                 executeQuery·p0.999:  48117.055 ms/op
                 executeQuery·p0.9999: 48117.055 ms/op
                 executeQuery·p1.00:   48117.055 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  49741.090 ±(99.9%) 1761.742 ms/op

  Histogram, ms/op:
    [48000.000, 48250.000) = 1 
    [48250.000, 48500.000) = 1 
    [48500.000, 48750.000) = 0 
    [48750.000, 49000.000) = 0 
    [49000.000, 49250.000) = 1 
    [49250.000, 49500.000) = 1 
    [49500.000, 49750.000) = 3 
    [49750.000, 50000.000) = 0 
    [50000.000, 50250.000) = 0 
    [50250.000, 50500.000) = 0 
    [50500.000, 50750.000) = 1 
    [50750.000, 51000.000) = 0 
    [51000.000, 51250.000) = 0 
    [51250.000, 51500.000) = 1 
    [51500.000, 51750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  48117.055 ms/op
     p(50.0000) =  49526.342 ms/op
     p(90.0000) =  51633.560 ms/op
     p(95.0000) =  51673.825 ms/op
     p(99.0000) =  51673.825 ms/op
     p(99.9000) =  51673.825 ms/op
     p(99.9900) =  51673.825 ms/op
     p(99.9990) =  51673.825 ms/op
     p(99.9999) =  51673.825 ms/op
    p(100.0000) =  51673.825 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 11.11% complete, ETA 11:20:48
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16626.221 ms/op
# Warmup Iteration   2: 10015.998 ms/op
# Warmup Iteration   3: 7964.983 ms/op
# Warmup Iteration   4: 7189.037 ms/op
# Warmup Iteration   5: 7197.426 ms/op
Iteration   1: 7289.700 ms/op
                 executeQuery·p0.00:   7180.648 ms/op
                 executeQuery·p0.50:   7289.700 ms/op
                 executeQuery·p0.90:   7398.752 ms/op
                 executeQuery·p0.95:   7398.752 ms/op
                 executeQuery·p0.99:   7398.752 ms/op
                 executeQuery·p0.999:  7398.752 ms/op
                 executeQuery·p0.9999: 7398.752 ms/op
                 executeQuery·p1.00:   7398.752 ms/op

Iteration   2: 7184.843 ms/op
                 executeQuery·p0.00:   7172.260 ms/op
                 executeQuery·p0.50:   7184.843 ms/op
                 executeQuery·p0.90:   7197.426 ms/op
                 executeQuery·p0.95:   7197.426 ms/op
                 executeQuery·p0.99:   7197.426 ms/op
                 executeQuery·p0.999:  7197.426 ms/op
                 executeQuery·p0.9999: 7197.426 ms/op
                 executeQuery·p1.00:   7197.426 ms/op

Iteration   3: 7189.037 ms/op
                 executeQuery·p0.00:   7189.037 ms/op
                 executeQuery·p0.50:   7189.037 ms/op
                 executeQuery·p0.90:   7189.037 ms/op
                 executeQuery·p0.95:   7189.037 ms/op
                 executeQuery·p0.99:   7189.037 ms/op
                 executeQuery·p0.999:  7189.037 ms/op
                 executeQuery·p0.9999: 7189.037 ms/op
                 executeQuery·p1.00:   7189.037 ms/op

Iteration   4: 7193.231 ms/op
                 executeQuery·p0.00:   7189.037 ms/op
                 executeQuery·p0.50:   7193.231 ms/op
                 executeQuery·p0.90:   7197.426 ms/op
                 executeQuery·p0.95:   7197.426 ms/op
                 executeQuery·p0.99:   7197.426 ms/op
                 executeQuery·p0.999:  7197.426 ms/op
                 executeQuery·p0.9999: 7197.426 ms/op
                 executeQuery·p1.00:   7197.426 ms/op

Iteration   5: 7176.454 ms/op
                 executeQuery·p0.00:   7163.871 ms/op
                 executeQuery·p0.50:   7176.454 ms/op
                 executeQuery·p0.90:   7189.037 ms/op
                 executeQuery·p0.95:   7189.037 ms/op
                 executeQuery·p0.99:   7189.037 ms/op
                 executeQuery·p0.999:  7189.037 ms/op
                 executeQuery·p0.9999: 7189.037 ms/op
                 executeQuery·p1.00:   7189.037 ms/op


# Run progress: 11.67% complete, ETA 11:02:42
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_457167145 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_457167145() {
        this(4);
    }
    public KeyValueMap_457167145(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_457167145 aggregation_state_map = new KeyValueMap_457167145();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6088.032 ms/op
# Warmup Iteration   2: 7717.519 ms/op
# Warmup Iteration   3: 7834.960 ms/op
# Warmup Iteration   4: 7809.794 ms/op
# Warmup Iteration   5: 7809.794 ms/op
Iteration   1: 7793.017 ms/op
                 executeQuery·p0.00:   7793.017 ms/op
                 executeQuery·p0.50:   7793.017 ms/op
                 executeQuery·p0.90:   7793.017 ms/op
                 executeQuery·p0.95:   7793.017 ms/op
                 executeQuery·p0.99:   7793.017 ms/op
                 executeQuery·p0.999:  7793.017 ms/op
                 executeQuery·p0.9999: 7793.017 ms/op
                 executeQuery·p1.00:   7793.017 ms/op

Iteration   2: 7805.600 ms/op
                 executeQuery·p0.00:   7801.405 ms/op
                 executeQuery·p0.50:   7805.600 ms/op
                 executeQuery·p0.90:   7809.794 ms/op
                 executeQuery·p0.95:   7809.794 ms/op
                 executeQuery·p0.99:   7809.794 ms/op
                 executeQuery·p0.999:  7809.794 ms/op
                 executeQuery·p0.9999: 7809.794 ms/op
                 executeQuery·p1.00:   7809.794 ms/op

Iteration   3: 8065.647 ms/op
                 executeQuery·p0.00:   7809.794 ms/op
                 executeQuery·p0.50:   8065.647 ms/op
                 executeQuery·p0.90:   8321.499 ms/op
                 executeQuery·p0.95:   8321.499 ms/op
                 executeQuery·p0.99:   8321.499 ms/op
                 executeQuery·p0.999:  8321.499 ms/op
                 executeQuery·p0.9999: 8321.499 ms/op
                 executeQuery·p1.00:   8321.499 ms/op

Iteration   4: 7872.709 ms/op
                 executeQuery·p0.00:   7801.405 ms/op
                 executeQuery·p0.50:   7872.709 ms/op
                 executeQuery·p0.90:   7944.012 ms/op
                 executeQuery·p0.95:   7944.012 ms/op
                 executeQuery·p0.99:   7944.012 ms/op
                 executeQuery·p0.999:  7944.012 ms/op
                 executeQuery·p0.9999: 7944.012 ms/op
                 executeQuery·p1.00:   7944.012 ms/op

Iteration   5: 7797.211 ms/op
                 executeQuery·p0.00:   7793.017 ms/op
                 executeQuery·p0.50:   7797.211 ms/op
                 executeQuery·p0.90:   7801.405 ms/op
                 executeQuery·p0.95:   7801.405 ms/op
                 executeQuery·p0.99:   7801.405 ms/op
                 executeQuery·p0.999:  7801.405 ms/op
                 executeQuery·p0.9999: 7801.405 ms/op
                 executeQuery·p1.00:   7801.405 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   7536.745 ±(99.9%) 313.064 ms/op

  Histogram, ms/op:
    [7000.000, 7125.000) = 0 
    [7125.000, 7250.000) = 9 
    [7250.000, 7375.000) = 0 
    [7375.000, 7500.000) = 1 
    [7500.000, 7625.000) = 0 
    [7625.000, 7750.000) = 0 
    [7750.000, 7875.000) = 8 
    [7875.000, 8000.000) = 1 
    [8000.000, 8125.000) = 0 
    [8125.000, 8250.000) = 0 
    [8250.000, 8375.000) = 1 
    [8375.000, 8500.000) = 0 
    [8500.000, 8625.000) = 0 
    [8625.000, 8750.000) = 0 
    [8750.000, 8875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7163.871 ms/op
     p(50.0000) =   7595.885 ms/op
     p(90.0000) =   7930.590 ms/op
     p(95.0000) =   8302.625 ms/op
     p(99.0000) =   8321.499 ms/op
     p(99.9000) =   8321.499 ms/op
     p(99.9900) =   8321.499 ms/op
     p(99.9990) =   8321.499 ms/op
     p(99.9999) =   8321.499 ms/op
    p(100.0000) =   8321.499 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 12.22% complete, ETA 10:47:11
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_457167145 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_457167145() {
        this(4);
    }
    public KeyValueMap_457167145(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_457167145 aggregation_state_map = new KeyValueMap_457167145();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16508.781 ms/op
# Warmup Iteration   2: 13052.674 ms/op
# Warmup Iteration   3: 13287.555 ms/op
# Warmup Iteration   4: 12985.565 ms/op
# Warmup Iteration   5: 12952.011 ms/op
Iteration   1: 12952.011 ms/op
                 executeQuery·p0.00:   12952.011 ms/op
                 executeQuery·p0.50:   12952.011 ms/op
                 executeQuery·p0.90:   12952.011 ms/op
                 executeQuery·p0.95:   12952.011 ms/op
                 executeQuery·p0.99:   12952.011 ms/op
                 executeQuery·p0.999:  12952.011 ms/op
                 executeQuery·p0.9999: 12952.011 ms/op
                 executeQuery·p1.00:   12952.011 ms/op

Iteration   2: 12952.011 ms/op
                 executeQuery·p0.00:   12952.011 ms/op
                 executeQuery·p0.50:   12952.011 ms/op
                 executeQuery·p0.90:   12952.011 ms/op
                 executeQuery·p0.95:   12952.011 ms/op
                 executeQuery·p0.99:   12952.011 ms/op
                 executeQuery·p0.999:  12952.011 ms/op
                 executeQuery·p0.9999: 12952.011 ms/op
                 executeQuery·p1.00:   12952.011 ms/op

Iteration   3: 12968.788 ms/op
                 executeQuery·p0.00:   12968.788 ms/op
                 executeQuery·p0.50:   12968.788 ms/op
                 executeQuery·p0.90:   12968.788 ms/op
                 executeQuery·p0.95:   12968.788 ms/op
                 executeQuery·p0.99:   12968.788 ms/op
                 executeQuery·p0.999:  12968.788 ms/op
                 executeQuery·p0.9999: 12968.788 ms/op
                 executeQuery·p1.00:   12968.788 ms/op

Iteration   4: 12952.011 ms/op
                 executeQuery·p0.00:   12952.011 ms/op
                 executeQuery·p0.50:   12952.011 ms/op
                 executeQuery·p0.90:   12952.011 ms/op
                 executeQuery·p0.95:   12952.011 ms/op
                 executeQuery·p0.99:   12952.011 ms/op
                 executeQuery·p0.999:  12952.011 ms/op
                 executeQuery·p0.9999: 12952.011 ms/op
                 executeQuery·p1.00:   12952.011 ms/op

Iteration   5: 13103.006 ms/op
                 executeQuery·p0.00:   13103.006 ms/op
                 executeQuery·p0.50:   13103.006 ms/op
                 executeQuery·p0.90:   13103.006 ms/op
                 executeQuery·p0.95:   13103.006 ms/op
                 executeQuery·p0.99:   13103.006 ms/op
                 executeQuery·p0.999:  13103.006 ms/op
                 executeQuery·p0.9999: 13103.006 ms/op
                 executeQuery·p1.00:   13103.006 ms/op


# Run progress: 12.78% complete, ETA 10:30:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_457167145 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_457167145() {
        this(4);
    }
    public KeyValueMap_457167145(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_457167145 aggregation_state_map = new KeyValueMap_457167145();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

11408.507 ms/op
# Warmup Iteration   2: 12901.679 ms/op
# Warmup Iteration   3: 13270.778 ms/op
# Warmup Iteration   4: 12801.016 ms/op
# Warmup Iteration   5: 13019.120 ms/op
Iteration   1: 13019.120 ms/op
                 executeQuery·p0.00:   13019.120 ms/op
                 executeQuery·p0.50:   13019.120 ms/op
                 executeQuery·p0.90:   13019.120 ms/op
                 executeQuery·p0.95:   13019.120 ms/op
                 executeQuery·p0.99:   13019.120 ms/op
                 executeQuery·p0.999:  13019.120 ms/op
                 executeQuery·p0.9999: 13019.120 ms/op
                 executeQuery·p1.00:   13019.120 ms/op

Iteration   2: 13052.674 ms/op
                 executeQuery·p0.00:   13052.674 ms/op
                 executeQuery·p0.50:   13052.674 ms/op
                 executeQuery·p0.90:   13052.674 ms/op
                 executeQuery·p0.95:   13052.674 ms/op
                 executeQuery·p0.99:   13052.674 ms/op
                 executeQuery·p0.999:  13052.674 ms/op
                 executeQuery·p0.9999: 13052.674 ms/op
                 executeQuery·p1.00:   13052.674 ms/op

Iteration   3: 13136.560 ms/op
                 executeQuery·p0.00:   13136.560 ms/op
                 executeQuery·p0.50:   13136.560 ms/op
                 executeQuery·p0.90:   13136.560 ms/op
                 executeQuery·p0.95:   13136.560 ms/op
                 executeQuery·p0.99:   13136.560 ms/op
                 executeQuery·p0.999:  13136.560 ms/op
                 executeQuery·p0.9999: 13136.560 ms/op
                 executeQuery·p1.00:   13136.560 ms/op

Iteration   4: 13035.897 ms/op
                 executeQuery·p0.00:   13035.897 ms/op
                 executeQuery·p0.50:   13035.897 ms/op
                 executeQuery·p0.90:   13035.897 ms/op
                 executeQuery·p0.95:   13035.897 ms/op
                 executeQuery·p0.99:   13035.897 ms/op
                 executeQuery·p0.999:  13035.897 ms/op
                 executeQuery·p0.9999: 13035.897 ms/op
                 executeQuery·p1.00:   13035.897 ms/op

Iteration   5: 13002.342 ms/op
                 executeQuery·p0.00:   13002.342 ms/op
                 executeQuery·p0.50:   13002.342 ms/op
                 executeQuery·p0.90:   13002.342 ms/op
                 executeQuery·p0.95:   13002.342 ms/op
                 executeQuery·p0.99:   13002.342 ms/op
                 executeQuery·p0.999:  13002.342 ms/op
                 executeQuery·p0.9999: 13002.342 ms/op
                 executeQuery·p1.00:   13002.342 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  13017.442 ±(99.9%) 98.926 ms/op

  Histogram, ms/op:
    [12900.000, 12925.000) = 0 
    [12925.000, 12950.000) = 0 
    [12950.000, 12975.000) = 4 
    [12975.000, 13000.000) = 0 
    [13000.000, 13025.000) = 2 
    [13025.000, 13050.000) = 1 
    [13050.000, 13075.000) = 1 
    [13075.000, 13100.000) = 0 
    [13100.000, 13125.000) = 1 
    [13125.000, 13150.000) = 1 
    [13150.000, 13175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12952.011 ms/op
     p(50.0000) =  13010.731 ms/op
     p(90.0000) =  13133.205 ms/op
     p(95.0000) =  13136.560 ms/op
     p(99.0000) =  13136.560 ms/op
     p(99.9000) =  13136.560 ms/op
     p(99.9900) =  13136.560 ms/op
     p(99.9990) =  13136.560 ms/op
     p(99.9999) =  13136.560 ms/op
    p(100.0000) =  13136.560 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 13.33% complete, ETA 10:14:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_457167145 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_457167145() {
        this(4);
    }
    public KeyValueMap_457167145(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_457167145 aggregation_state_map = new KeyValueMap_457167145();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16206.791 ms/op
# Warmup Iteration   2: 15820.915 ms/op
# Warmup Iteration   3: 13958.644 ms/op
# Warmup Iteration   4: 15149.826 ms/op
# Warmup Iteration   5: 14931.722 ms/op
Iteration   1: 14713.618 ms/op
                 executeQuery·p0.00:   14713.618 ms/op
                 executeQuery·p0.50:   14713.618 ms/op
                 executeQuery·p0.90:   14713.618 ms/op
                 executeQuery·p0.95:   14713.618 ms/op
                 executeQuery·p0.99:   14713.618 ms/op
                 executeQuery·p0.999:  14713.618 ms/op
                 executeQuery·p0.9999: 14713.618 ms/op
                 executeQuery·p1.00:   14713.618 ms/op

Iteration   2: 14864.613 ms/op
                 executeQuery·p0.00:   14864.613 ms/op
                 executeQuery·p0.50:   14864.613 ms/op
                 executeQuery·p0.90:   14864.613 ms/op
                 executeQuery·p0.95:   14864.613 ms/op
                 executeQuery·p0.99:   14864.613 ms/op
                 executeQuery·p0.999:  14864.613 ms/op
                 executeQuery·p0.9999: 14864.613 ms/op
                 executeQuery·p1.00:   14864.613 ms/op

Iteration   3: 14831.059 ms/op
                 executeQuery·p0.00:   14831.059 ms/op
                 executeQuery·p0.50:   14831.059 ms/op
                 executeQuery·p0.90:   14831.059 ms/op
                 executeQuery·p0.95:   14831.059 ms/op
                 executeQuery·p0.99:   14831.059 ms/op
                 executeQuery·p0.999:  14831.059 ms/op
                 executeQuery·p0.9999: 14831.059 ms/op
                 executeQuery·p1.00:   14831.059 ms/op

Iteration   4: 14680.064 ms/op
                 executeQuery·p0.00:   14680.064 ms/op
                 executeQuery·p0.50:   14680.064 ms/op
                 executeQuery·p0.90:   14680.064 ms/op
                 executeQuery·p0.95:   14680.064 ms/op
                 executeQuery·p0.99:   14680.064 ms/op
                 executeQuery·p0.999:  14680.064 ms/op
                 executeQuery·p0.9999: 14680.064 ms/op
                 executeQuery·p1.00:   14680.064 ms/op

Iteration   5: 14730.396 ms/op
                 executeQuery·p0.00:   14730.396 ms/op
                 executeQuery·p0.50:   14730.396 ms/op
                 executeQuery·p0.90:   14730.396 ms/op
                 executeQuery·p0.95:   14730.396 ms/op
                 executeQuery·p0.99:   14730.396 ms/op
                 executeQuery·p0.999:  14730.396 ms/op
                 executeQuery·p0.9999: 14730.396 ms/op
                 executeQuery·p1.00:   14730.396 ms/op


# Run progress: 13.89% complete, ETA 10:01:58
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

15250.489 ms/op
# Warmup Iteration   2: 14747.173 ms/op
# Warmup Iteration   3: 14076.084 ms/op
# Warmup Iteration   4: 14025.753 ms/op
# Warmup Iteration   5: 14680.064 ms/op
Iteration   1: 14780.727 ms/op
                 executeQuery·p0.00:   14780.727 ms/op
                 executeQuery·p0.50:   14780.727 ms/op
                 executeQuery·p0.90:   14780.727 ms/op
                 executeQuery·p0.95:   14780.727 ms/op
                 executeQuery·p0.99:   14780.727 ms/op
                 executeQuery·p0.999:  14780.727 ms/op
                 executeQuery·p0.9999: 14780.727 ms/op
                 executeQuery·p1.00:   14780.727 ms/op

Iteration   2: 15032.386 ms/op
                 executeQuery·p0.00:   15032.386 ms/op
                 executeQuery·p0.50:   15032.386 ms/op
                 executeQuery·p0.90:   15032.386 ms/op
                 executeQuery·p0.95:   15032.386 ms/op
                 executeQuery·p0.99:   15032.386 ms/op
                 executeQuery·p0.999:  15032.386 ms/op
                 executeQuery·p0.9999: 15032.386 ms/op
                 executeQuery·p1.00:   15032.386 ms/op

Iteration   3: 14763.950 ms/op
                 executeQuery·p0.00:   14763.950 ms/op
                 executeQuery·p0.50:   14763.950 ms/op
                 executeQuery·p0.90:   14763.950 ms/op
                 executeQuery·p0.95:   14763.950 ms/op
                 executeQuery·p0.99:   14763.950 ms/op
                 executeQuery·p0.999:  14763.950 ms/op
                 executeQuery·p0.9999: 14763.950 ms/op
                 executeQuery·p1.00:   14763.950 ms/op

Iteration   4: 14747.173 ms/op
                 executeQuery·p0.00:   14747.173 ms/op
                 executeQuery·p0.50:   14747.173 ms/op
                 executeQuery·p0.90:   14747.173 ms/op
                 executeQuery·p0.95:   14747.173 ms/op
                 executeQuery·p0.99:   14747.173 ms/op
                 executeQuery·p0.999:  14747.173 ms/op
                 executeQuery·p0.9999: 14747.173 ms/op
                 executeQuery·p1.00:   14747.173 ms/op

Iteration   5: 15418.262 ms/op
                 executeQuery·p0.00:   15418.262 ms/op
                 executeQuery·p0.50:   15418.262 ms/op
                 executeQuery·p0.90:   15418.262 ms/op
                 executeQuery·p0.95:   15418.262 ms/op
                 executeQuery·p0.99:   15418.262 ms/op
                 executeQuery·p0.999:  15418.262 ms/op
                 executeQuery·p0.9999: 15418.262 ms/op
                 executeQuery·p1.00:   15418.262 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  14856.225 ±(99.9%) 334.638 ms/op

  Histogram, ms/op:
    [14600.000, 14650.000) = 0 
    [14650.000, 14700.000) = 1 
    [14700.000, 14750.000) = 3 
    [14750.000, 14800.000) = 2 
    [14800.000, 14850.000) = 1 
    [14850.000, 14900.000) = 1 
    [14900.000, 14950.000) = 0 
    [14950.000, 15000.000) = 0 
    [15000.000, 15050.000) = 1 
    [15050.000, 15100.000) = 0 
    [15100.000, 15150.000) = 0 
    [15150.000, 15200.000) = 0 
    [15200.000, 15250.000) = 0 
    [15250.000, 15300.000) = 0 
    [15300.000, 15350.000) = 0 
    [15350.000, 15400.000) = 0 
    [15400.000, 15450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  14680.064 ms/op
     p(50.0000) =  14772.339 ms/op
     p(90.0000) =  15379.674 ms/op
     p(95.0000) =  15418.262 ms/op
     p(99.0000) =  15418.262 ms/op
     p(99.9000) =  15418.262 ms/op
     p(99.9900) =  15418.262 ms/op
     p(99.9990) =  15418.262 ms/op
     p(99.9999) =  15418.262 ms/op
    p(100.0000) =  15418.262 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 14.44% complete, ETA 09:49:52
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

55230.595 ms/op
# Warmup Iteration   2: 42278.584 ms/op
# Warmup Iteration   3: 43620.762 ms/op
# Warmup Iteration   4: 47513.076 ms/op
# Warmup Iteration   5: 48251.273 ms/op
Iteration   1: 43889.197 ms/op
                 executeQuery·p0.00:   43889.197 ms/op
                 executeQuery·p0.50:   43889.197 ms/op
                 executeQuery·p0.90:   43889.197 ms/op
                 executeQuery·p0.95:   43889.197 ms/op
                 executeQuery·p0.99:   43889.197 ms/op
                 executeQuery·p0.999:  43889.197 ms/op
                 executeQuery·p0.9999: 43889.197 ms/op
                 executeQuery·p1.00:   43889.197 ms/op

Iteration   2: 48788.144 ms/op
                 executeQuery·p0.00:   48788.144 ms/op
                 executeQuery·p0.50:   48788.144 ms/op
                 executeQuery·p0.90:   48788.144 ms/op
                 executeQuery·p0.95:   48788.144 ms/op
                 executeQuery·p0.99:   48788.144 ms/op
                 executeQuery·p0.999:  48788.144 ms/op
                 executeQuery·p0.9999: 48788.144 ms/op
                 executeQuery·p1.00:   48788.144 ms/op

Iteration   3: 45499.810 ms/op
                 executeQuery·p0.00:   45499.810 ms/op
                 executeQuery·p0.50:   45499.810 ms/op
                 executeQuery·p0.90:   45499.810 ms/op
                 executeQuery·p0.95:   45499.810 ms/op
                 executeQuery·p0.99:   45499.810 ms/op
                 executeQuery·p0.999:  45499.810 ms/op
                 executeQuery·p0.9999: 45499.810 ms/op
                 executeQuery·p1.00:   45499.810 ms/op

Iteration   4: 48452.600 ms/op
                 executeQuery·p0.00:   48452.600 ms/op
                 executeQuery·p0.50:   48452.600 ms/op
                 executeQuery·p0.90:   48452.600 ms/op
                 executeQuery·p0.95:   48452.600 ms/op
                 executeQuery·p0.99:   48452.600 ms/op
                 executeQuery·p0.999:  48452.600 ms/op
                 executeQuery·p0.9999: 48452.600 ms/op
                 executeQuery·p1.00:   48452.600 ms/op

Iteration   5: 46305.116 ms/op
                 executeQuery·p0.00:   46305.116 ms/op
                 executeQuery·p0.50:   46305.116 ms/op
                 executeQuery·p0.90:   46305.116 ms/op
                 executeQuery·p0.95:   46305.116 ms/op
                 executeQuery·p0.99:   46305.116 ms/op
                 executeQuery·p0.999:  46305.116 ms/op
                 executeQuery·p0.9999: 46305.116 ms/op
                 executeQuery·p1.00:   46305.116 ms/op


# Run progress: 15.00% complete, ETA 10:18:37
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

47781.511 ms/op
# Warmup Iteration   2: 46774.878 ms/op
# Warmup Iteration   3: 47177.531 ms/op
# Warmup Iteration   4: 47580.185 ms/op
# Warmup Iteration   5: 47848.620 ms/op
Iteration   1: 41473.278 ms/op
                 executeQuery·p0.00:   41473.278 ms/op
                 executeQuery·p0.50:   41473.278 ms/op
                 executeQuery·p0.90:   41473.278 ms/op
                 executeQuery·p0.95:   41473.278 ms/op
                 executeQuery·p0.99:   41473.278 ms/op
                 executeQuery·p0.999:  41473.278 ms/op
                 executeQuery·p0.9999: 41473.278 ms/op
                 executeQuery·p1.00:   41473.278 ms/op

Iteration   2: 46372.225 ms/op
                 executeQuery·p0.00:   46372.225 ms/op
                 executeQuery·p0.50:   46372.225 ms/op
                 executeQuery·p0.90:   46372.225 ms/op
                 executeQuery·p0.95:   46372.225 ms/op
                 executeQuery·p0.99:   46372.225 ms/op
                 executeQuery·p0.999:  46372.225 ms/op
                 executeQuery·p0.9999: 46372.225 ms/op
                 executeQuery·p1.00:   46372.225 ms/op

Iteration   3: 48184.164 ms/op
                 executeQuery·p0.00:   48184.164 ms/op
                 executeQuery·p0.50:   48184.164 ms/op
                 executeQuery·p0.90:   48184.164 ms/op
                 executeQuery·p0.95:   48184.164 ms/op
                 executeQuery·p0.99:   48184.164 ms/op
                 executeQuery·p0.999:  48184.164 ms/op
                 executeQuery·p0.9999: 48184.164 ms/op
                 executeQuery·p1.00:   48184.164 ms/op

Iteration   4: 46103.790 ms/op
                 executeQuery·p0.00:   46103.790 ms/op
                 executeQuery·p0.50:   46103.790 ms/op
                 executeQuery·p0.90:   46103.790 ms/op
                 executeQuery·p0.95:   46103.790 ms/op
                 executeQuery·p0.99:   46103.790 ms/op
                 executeQuery·p0.999:  46103.790 ms/op
                 executeQuery·p0.9999: 46103.790 ms/op
                 executeQuery·p1.00:   46103.790 ms/op

Iteration   5: 51338.281 ms/op
                 executeQuery·p0.00:   51338.281 ms/op
                 executeQuery·p0.50:   51338.281 ms/op
                 executeQuery·p0.90:   51338.281 ms/op
                 executeQuery·p0.95:   51338.281 ms/op
                 executeQuery·p0.99:   51338.281 ms/op
                 executeQuery·p0.999:  51338.281 ms/op
                 executeQuery·p0.9999: 51338.281 ms/op
                 executeQuery·p1.00:   51338.281 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  46640.660 ±(99.9%) 4167.649 ms/op

  Histogram, ms/op:
    [41000.000, 42000.000) = 1 
    [42000.000, 43000.000) = 0 
    [43000.000, 44000.000) = 1 
    [44000.000, 45000.000) = 0 
    [45000.000, 46000.000) = 1 
    [46000.000, 47000.000) = 3 
    [47000.000, 48000.000) = 0 
    [48000.000, 49000.000) = 3 
    [49000.000, 50000.000) = 0 
    [50000.000, 51000.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  41473.278 ms/op
     p(50.0000) =  46338.671 ms/op
     p(90.0000) =  51083.267 ms/op
     p(95.0000) =  51338.281 ms/op
     p(99.0000) =  51338.281 ms/op
     p(99.9000) =  51338.281 ms/op
     p(99.9900) =  51338.281 ms/op
     p(99.9990) =  51338.281 ms/op
     p(99.9999) =  51338.281 ms/op
    p(100.0000) =  51338.281 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 15.56% complete, ETA 10:44:55
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

101737.038 ms/op
# Warmup Iteration   2: 101602.820 ms/op
# Warmup Iteration   3: 93818.192 ms/op
# Warmup Iteration   4: 99455.336 ms/op
# Warmup Iteration   5: 95697.240 ms/op
Iteration   1: 93415.539 ms/op
                 executeQuery·p0.00:   93415.539 ms/op
                 executeQuery·p0.50:   93415.539 ms/op
                 executeQuery·p0.90:   93415.539 ms/op
                 executeQuery·p0.95:   93415.539 ms/op
                 executeQuery·p0.99:   93415.539 ms/op
                 executeQuery·p0.999:  93415.539 ms/op
                 executeQuery·p0.9999: 93415.539 ms/op
                 executeQuery·p1.00:   93415.539 ms/op

Iteration   2: 98381.595 ms/op
                 executeQuery·p0.00:   98381.595 ms/op
                 executeQuery·p0.50:   98381.595 ms/op
                 executeQuery·p0.90:   98381.595 ms/op
                 executeQuery·p0.95:   98381.595 ms/op
                 executeQuery·p0.99:   98381.595 ms/op
                 executeQuery·p0.999:  98381.595 ms/op
                 executeQuery·p0.9999: 98381.595 ms/op
                 executeQuery·p1.00:   98381.595 ms/op

Iteration   3: 97173.635 ms/op
                 executeQuery·p0.00:   97173.635 ms/op
                 executeQuery·p0.50:   97173.635 ms/op
                 executeQuery·p0.90:   97173.635 ms/op
                 executeQuery·p0.95:   97173.635 ms/op
                 executeQuery·p0.99:   97173.635 ms/op
                 executeQuery·p0.999:  97173.635 ms/op
                 executeQuery·p0.9999: 97173.635 ms/op
                 executeQuery·p1.00:   97173.635 ms/op

Iteration   4: 95294.587 ms/op
                 executeQuery·p0.00:   95294.587 ms/op
                 executeQuery·p0.50:   95294.587 ms/op
                 executeQuery·p0.90:   95294.587 ms/op
                 executeQuery·p0.95:   95294.587 ms/op
                 executeQuery·p0.99:   95294.587 ms/op
                 executeQuery·p0.999:  95294.587 ms/op
                 executeQuery·p0.9999: 95294.587 ms/op
                 executeQuery·p1.00:   95294.587 ms/op

Iteration   5: 96368.329 ms/op
                 executeQuery·p0.00:   96368.329 ms/op
                 executeQuery·p0.50:   96368.329 ms/op
                 executeQuery·p0.90:   96368.329 ms/op
                 executeQuery·p0.95:   96368.329 ms/op
                 executeQuery·p0.99:   96368.329 ms/op
                 executeQuery·p0.999:  96368.329 ms/op
                 executeQuery·p0.9999: 96368.329 ms/op
                 executeQuery·p1.00:   96368.329 ms/op


# Run progress: 16.11% complete, ETA 12:18:27
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_504679294 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_504679294() {
        this(4);
    }
    public KeyValueMap_504679294(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_504679294 aggregation_state_map = new KeyValueMap_504679294();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

100663.296 ms/op
# Warmup Iteration   2: 103481.868 ms/op
# Warmup Iteration   3: 98515.812 ms/op
# Warmup Iteration   4: 96770.982 ms/op
# Warmup Iteration   5: 99857.990 ms/op
Iteration   1: 98381.595 ms/op
                 executeQuery·p0.00:   98381.595 ms/op
                 executeQuery·p0.50:   98381.595 ms/op
                 executeQuery·p0.90:   98381.595 ms/op
                 executeQuery·p0.95:   98381.595 ms/op
                 executeQuery·p0.99:   98381.595 ms/op
                 executeQuery·p0.999:  98381.595 ms/op
                 executeQuery·p0.9999: 98381.595 ms/op
                 executeQuery·p1.00:   98381.595 ms/op

Iteration   2: 99723.772 ms/op
                 executeQuery·p0.00:   99723.772 ms/op
                 executeQuery·p0.50:   99723.772 ms/op
                 executeQuery·p0.90:   99723.772 ms/op
                 executeQuery·p0.95:   99723.772 ms/op
                 executeQuery·p0.99:   99723.772 ms/op
                 executeQuery·p0.999:  99723.772 ms/op
                 executeQuery·p0.9999: 99723.772 ms/op
                 executeQuery·p1.00:   99723.772 ms/op

Iteration   3: 97710.506 ms/op
                 executeQuery·p0.00:   97710.506 ms/op
                 executeQuery·p0.50:   97710.506 ms/op
                 executeQuery·p0.90:   97710.506 ms/op
                 executeQuery·p0.95:   97710.506 ms/op
                 executeQuery·p0.99:   97710.506 ms/op
                 executeQuery·p0.999:  97710.506 ms/op
                 executeQuery·p0.9999: 97710.506 ms/op
                 executeQuery·p1.00:   97710.506 ms/op

Iteration   4: 97710.506 ms/op
                 executeQuery·p0.00:   97710.506 ms/op
                 executeQuery·p0.50:   97710.506 ms/op
                 executeQuery·p0.90:   97710.506 ms/op
                 executeQuery·p0.95:   97710.506 ms/op
                 executeQuery·p0.99:   97710.506 ms/op
                 executeQuery·p0.999:  97710.506 ms/op
                 executeQuery·p0.9999: 97710.506 ms/op
                 executeQuery·p1.00:   97710.506 ms/op

Iteration   5: 98381.595 ms/op
                 executeQuery·p0.00:   98381.595 ms/op
                 executeQuery·p0.50:   98381.595 ms/op
                 executeQuery·p0.90:   98381.595 ms/op
                 executeQuery·p0.95:   98381.595 ms/op
                 executeQuery·p0.99:   98381.595 ms/op
                 executeQuery·p0.999:  98381.595 ms/op
                 executeQuery·p0.9999: 98381.595 ms/op
                 executeQuery·p1.00:   98381.595 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  97254.166 ±(99.9%) 2746.191 ms/op

  Histogram, ms/op:
    [ 93000.000,  93500.000) = 1 
    [ 93500.000,  94000.000) = 0 
    [ 94000.000,  94500.000) = 0 
    [ 94500.000,  95000.000) = 0 
    [ 95000.000,  95500.000) = 1 
    [ 95500.000,  96000.000) = 0 
    [ 96000.000,  96500.000) = 1 
    [ 96500.000,  97000.000) = 0 
    [ 97000.000,  97500.000) = 1 
    [ 97500.000,  98000.000) = 2 
    [ 98000.000,  98500.000) = 3 
    [ 98500.000,  99000.000) = 0 
    [ 99000.000,  99500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  93415.539 ms/op
     p(50.0000) =  97710.506 ms/op
     p(90.0000) =  99589.554 ms/op
     p(95.0000) =  99723.772 ms/op
     p(99.0000) =  99723.772 ms/op
     p(99.9000) =  99723.772 ms/op
     p(99.9900) =  99723.772 ms/op
     p(99.9990) =  99723.772 ms/op
     p(99.9999) =  99723.772 ms/op
    p(100.0000) =  99723.772 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 16.67% complete, ETA 13:39:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

424.127 ±(99.9%) 90.573 ms/op
# Warmup Iteration   2: 388.094 ±(99.9%) 4.117 ms/op
# Warmup Iteration   3: 401.563 ±(99.9%) 42.482 ms/op
# Warmup Iteration   4: 389.445 ±(99.9%) 3.767 ms/op
# Warmup Iteration   5: 391.200 ±(99.9%) 4.015 ms/op
Iteration   1: 390.816 ±(99.9%) 3.997 ms/op
                 executeQuery·p0.00:   387.449 ms/op
                 executeQuery·p0.50:   388.760 ms/op
                 executeQuery·p0.90:   399.770 ms/op
                 executeQuery·p0.95:   408.080 ms/op
                 executeQuery·p0.99:   411.566 ms/op
                 executeQuery·p0.999:  411.566 ms/op
                 executeQuery·p0.9999: 411.566 ms/op
                 executeQuery·p1.00:   411.566 ms/op

Iteration   2: 392.288 ±(99.9%) 5.852 ms/op
                 executeQuery·p0.00:   387.973 ms/op
                 executeQuery·p0.50:   389.022 ms/op
                 executeQuery·p0.90:   407.214 ms/op
                 executeQuery·p0.95:   416.232 ms/op
                 executeQuery·p0.99:   417.333 ms/op
                 executeQuery·p0.999:  417.333 ms/op
                 executeQuery·p0.9999: 417.333 ms/op
                 executeQuery·p1.00:   417.333 ms/op

Iteration   3: 390.635 ±(99.9%) 4.291 ms/op
                 executeQuery·p0.00:   386.925 ms/op
                 executeQuery·p0.50:   389.284 ms/op
                 executeQuery·p0.90:   397.935 ms/op
                 executeQuery·p0.95:   410.465 ms/op
                 executeQuery·p0.99:   415.236 ms/op
                 executeQuery·p0.999:  415.236 ms/op
                 executeQuery·p0.9999: 415.236 ms/op
                 executeQuery·p1.00:   415.236 ms/op

Iteration   4: 388.074 ±(99.9%) 0.668 ms/op
                 executeQuery·p0.00:   386.400 ms/op
                 executeQuery·p0.50:   388.235 ms/op
                 executeQuery·p0.90:   389.546 ms/op
                 executeQuery·p0.95:   389.546 ms/op
                 executeQuery·p0.99:   389.546 ms/op
                 executeQuery·p0.999:  389.546 ms/op
                 executeQuery·p0.9999: 389.546 ms/op
                 executeQuery·p1.00:   389.546 ms/op

Iteration   5: 390.030 ±(99.9%) 4.329 ms/op
                 executeQuery·p0.00:   386.400 ms/op
                 executeQuery·p0.50:   388.497 ms/op
                 executeQuery·p0.90:   396.834 ms/op
                 executeQuery·p0.95:   410.465 ms/op
                 executeQuery·p0.99:   415.236 ms/op
                 executeQuery·p0.999:  415.236 ms/op
                 executeQuery·p0.9999: 415.236 ms/op
                 executeQuery·p1.00:   415.236 ms/op


# Run progress: 17.22% complete, ETA 13:16:13
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

429.720 ±(99.9%) 32.285 ms/op
# Warmup Iteration   2: 423.494 ±(99.9%) 5.225 ms/op
# Warmup Iteration   3: 425.809 ±(99.9%) 7.305 ms/op
# Warmup Iteration   4: 426.246 ±(99.9%) 6.624 ms/op
# Warmup Iteration   5: 422.401 ±(99.9%) 3.795 ms/op
Iteration   1: 422.554 ±(99.9%) 5.051 ms/op
                 executeQuery·p0.00:   418.906 ms/op
                 executeQuery·p0.50:   420.479 ms/op
                 executeQuery·p0.90:   436.208 ms/op
                 executeQuery·p0.95:   443.154 ms/op
                 executeQuery·p0.99:   444.072 ms/op
                 executeQuery·p0.999:  444.072 ms/op
                 executeQuery·p0.9999: 444.072 ms/op
                 executeQuery·p1.00:   444.072 ms/op

Iteration   2: 426.443 ±(99.9%) 3.214 ms/op
                 executeQuery·p0.00:   423.625 ms/op
                 executeQuery·p0.50:   425.460 ms/op
                 executeQuery·p0.90:   430.703 ms/op
                 executeQuery·p0.95:   441.188 ms/op
                 executeQuery·p0.99:   443.548 ms/op
                 executeQuery·p0.999:  443.548 ms/op
                 executeQuery·p0.9999: 443.548 ms/op
                 executeQuery·p1.00:   443.548 ms/op

Iteration   3: 426.552 ±(99.9%) 3.348 ms/op
                 executeQuery·p0.00:   424.149 ms/op
                 executeQuery·p0.50:   425.722 ms/op
                 executeQuery·p0.90:   427.033 ms/op
                 executeQuery·p0.95:   441.844 ms/op
                 executeQuery·p0.99:   446.693 ms/op
                 executeQuery·p0.999:  446.693 ms/op
                 executeQuery·p0.9999: 446.693 ms/op
                 executeQuery·p1.00:   446.693 ms/op

Iteration   4: 428.802 ±(99.9%) 6.984 ms/op
                 executeQuery·p0.00:   423.625 ms/op
                 executeQuery·p0.50:   425.460 ms/op
                 executeQuery·p0.90:   443.023 ms/op
                 executeQuery·p0.95:   457.834 ms/op
                 executeQuery·p0.99:   460.849 ms/op
                 executeQuery·p0.999:  460.849 ms/op
                 executeQuery·p0.9999: 460.849 ms/op
                 executeQuery·p1.00:   460.849 ms/op

Iteration   5: 426.050 ±(99.9%) 1.868 ms/op
                 executeQuery·p0.00:   423.625 ms/op
                 executeQuery·p0.50:   425.722 ms/op
                 executeQuery·p0.90:   427.819 ms/op
                 executeQuery·p0.95:   434.373 ms/op
                 executeQuery·p0.99:   436.208 ms/op
                 executeQuery·p0.999:  436.208 ms/op
                 executeQuery·p0.9999: 436.208 ms/op
                 executeQuery·p1.00:   436.208 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 250
  mean =    407.510 ±(99.9%) 3.966 ms/op

  Histogram, ms/op:
    [380.000, 385.000) = 0 
    [385.000, 390.000) = 106 
    [390.000, 395.000) = 10 
    [395.000, 400.000) = 4 
    [400.000, 405.000) = 5 
    [405.000, 410.000) = 0 
    [410.000, 415.000) = 2 
    [415.000, 420.000) = 14 
    [420.000, 425.000) = 37 
    [425.000, 430.000) = 60 
    [430.000, 435.000) = 2 
    [435.000, 440.000) = 4 
    [440.000, 445.000) = 3 
    [445.000, 450.000) = 2 
    [450.000, 455.000) = 0 
    [455.000, 460.000) = 0 
    [460.000, 465.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    386.400 ms/op
     p(50.0000) =    407.896 ms/op
     p(90.0000) =    426.246 ms/op
     p(95.0000) =    430.283 ms/op
     p(99.0000) =    447.721 ms/op
     p(99.9000) =    460.849 ms/op
     p(99.9900) =    460.849 ms/op
     p(99.9990) =    460.849 ms/op
     p(99.9999) =    460.849 ms/op
    p(100.0000) =    460.849 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 17.78% complete, ETA 12:54:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

563.202 ±(99.9%) 117.124 ms/op
# Warmup Iteration   2: 523.449 ±(99.9%) 5.577 ms/op
# Warmup Iteration   3: 525.392 ±(99.9%) 9.930 ms/op
# Warmup Iteration   4: 522.453 ±(99.9%) 4.726 ms/op
# Warmup Iteration   5: 522.925 ±(99.9%) 4.246 ms/op
Iteration   1: 527.434 ±(99.9%) 3.195 ms/op
                 executeQuery·p0.00:   521.667 ms/op
                 executeQuery·p0.50:   526.909 ms/op
                 executeQuery·p0.90:   531.628 ms/op
                 executeQuery·p0.95:   538.968 ms/op
                 executeQuery·p0.99:   538.968 ms/op
                 executeQuery·p0.999:  538.968 ms/op
                 executeQuery·p0.9999: 538.968 ms/op
                 executeQuery·p1.00:   538.968 ms/op

Iteration   2: 524.943 ±(99.9%) 6.027 ms/op
                 executeQuery·p0.00:   520.094 ms/op
                 executeQuery·p0.50:   521.142 ms/op
                 executeQuery·p0.90:   536.923 ms/op
                 executeQuery·p0.95:   546.885 ms/op
                 executeQuery·p0.99:   547.357 ms/op
                 executeQuery·p0.999:  547.357 ms/op
                 executeQuery·p0.9999: 547.357 ms/op
                 executeQuery·p1.00:   547.357 ms/op

Iteration   3: 521.011 ±(99.9%) 0.624 ms/op
                 executeQuery·p0.00:   519.569 ms/op
                 executeQuery·p0.50:   521.142 ms/op
                 executeQuery·p0.90:   522.138 ms/op
                 executeQuery·p0.95:   522.191 ms/op
                 executeQuery·p0.99:   522.191 ms/op
                 executeQuery·p0.999:  522.191 ms/op
                 executeQuery·p0.9999: 522.191 ms/op
                 executeQuery·p1.00:   522.191 ms/op

Iteration   4: 521.431 ±(99.9%) 0.829 ms/op
                 executeQuery·p0.00:   519.569 ms/op
                 executeQuery·p0.50:   521.142 ms/op
                 executeQuery·p0.90:   522.663 ms/op
                 executeQuery·p0.95:   523.711 ms/op
                 executeQuery·p0.99:   523.764 ms/op
                 executeQuery·p0.999:  523.764 ms/op
                 executeQuery·p0.9999: 523.764 ms/op
                 executeQuery·p1.00:   523.764 ms/op

Iteration   5: 521.195 ±(99.9%) 0.933 ms/op
                 executeQuery·p0.00:   519.045 ms/op
                 executeQuery·p0.50:   521.142 ms/op
                 executeQuery·p0.90:   523.135 ms/op
                 executeQuery·p0.95:   523.239 ms/op
                 executeQuery·p0.99:   523.239 ms/op
                 executeQuery·p0.999:  523.239 ms/op
                 executeQuery·p0.9999: 523.239 ms/op
                 executeQuery·p1.00:   523.239 ms/op


# Run progress: 18.33% complete, ETA 12:33:31
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

539.713 ±(99.9%) 28.816 ms/op
# Warmup Iteration   2: 527.903 ±(99.9%) 4.115 ms/op
# Warmup Iteration   3: 528.675 ±(99.9%) 5.408 ms/op
# Warmup Iteration   4: 528.262 ±(99.9%) 6.677 ms/op
# Warmup Iteration   5: 530.579 ±(99.9%) 8.732 ms/op
Iteration   1: 530.855 ±(99.9%) 10.208 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   525.861 ms/op
                 executeQuery·p0.90:   558.891 ms/op
                 executeQuery·p0.95:   559.940 ms/op
                 executeQuery·p0.99:   559.940 ms/op
                 executeQuery·p0.999:  559.940 ms/op
                 executeQuery·p0.9999: 559.940 ms/op
                 executeQuery·p1.00:   559.940 ms/op

Iteration   2: 527.323 ±(99.9%) 3.967 ms/op
                 executeQuery·p0.00:   523.764 ms/op
                 executeQuery·p0.50:   526.385 ms/op
                 executeQuery·p0.90:   529.531 ms/op
                 executeQuery·p0.95:   544.211 ms/op
                 executeQuery·p0.99:   544.211 ms/op
                 executeQuery·p0.999:  544.211 ms/op
                 executeQuery·p0.9999: 544.211 ms/op
                 executeQuery·p1.00:   544.211 ms/op

Iteration   3: 527.075 ±(99.9%) 2.603 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   526.385 ms/op
                 executeQuery·p0.90:   529.007 ms/op
                 executeQuery·p0.95:   537.919 ms/op
                 executeQuery·p0.99:   537.919 ms/op
                 executeQuery·p0.999:  537.919 ms/op
                 executeQuery·p0.9999: 537.919 ms/op
                 executeQuery·p1.00:   537.919 ms/op

Iteration   4: 526.716 ±(99.9%) 2.531 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   526.385 ms/op
                 executeQuery·p0.90:   527.434 ms/op
                 executeQuery·p0.95:   537.919 ms/op
                 executeQuery·p0.99:   537.919 ms/op
                 executeQuery·p0.999:  537.919 ms/op
                 executeQuery·p0.9999: 537.919 ms/op
                 executeQuery·p1.00:   537.919 ms/op

Iteration   5: 528.289 ±(99.9%) 5.342 ms/op
                 executeQuery·p0.00:   525.337 ms/op
                 executeQuery·p0.50:   526.385 ms/op
                 executeQuery·p0.90:   538.968 ms/op
                 executeQuery·p0.95:   549.454 ms/op
                 executeQuery·p0.99:   549.454 ms/op
                 executeQuery·p0.999:  549.454 ms/op
                 executeQuery·p0.9999: 549.454 ms/op
                 executeQuery·p1.00:   549.454 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 194
  mean =    525.555 ±(99.9%) 1.424 ms/op

  Histogram, ms/op:
    [510.000, 515.000) = 0 
    [515.000, 520.000) = 4 
    [520.000, 525.000) = 81 
    [525.000, 530.000) = 95 
    [530.000, 535.000) = 2 
    [535.000, 540.000) = 6 
    [540.000, 545.000) = 1 
    [545.000, 550.000) = 3 
    [550.000, 555.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    519.045 ms/op
     p(50.0000) =    525.337 ms/op
     p(90.0000) =    527.958 ms/op
     p(95.0000) =    537.919 ms/op
     p(99.0000) =    558.943 ms/op
     p(99.9000) =    559.940 ms/op
     p(99.9900) =    559.940 ms/op
     p(99.9990) =    559.940 ms/op
     p(99.9999) =    559.940 ms/op
    p(100.0000) =    559.940 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 18.89% complete, ETA 12:13:45
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_44756113 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_44756113() {
        this(4);
    }
    public KeyValueMap_44756113(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_44756113 aggregation_state_map = new KeyValueMap_44756113();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

776.914 ±(99.9%) 71.451 ms/op
# Warmup Iteration   2: 735.726 ±(99.9%) 19.726 ms/op
# Warmup Iteration   3: 747.335 ±(99.9%) 20.364 ms/op
# Warmup Iteration   4: 746.661 ±(99.9%) 21.655 ms/op
# Warmup Iteration   5: 750.031 ±(99.9%) 21.833 ms/op
Iteration   1: 751.604 ±(99.9%) 12.277 ms/op
                 executeQuery·p0.00:   739.246 ms/op
                 executeQuery·p0.50:   744.489 ms/op
                 executeQuery·p0.90:   765.460 ms/op
                 executeQuery·p0.95:   766.509 ms/op
                 executeQuery·p0.99:   766.509 ms/op
                 executeQuery·p0.999:  766.509 ms/op
                 executeQuery·p0.9999: 766.509 ms/op
                 executeQuery·p1.00:   766.509 ms/op

Iteration   2: 750.331 ±(99.9%) 12.464 ms/op
                 executeQuery·p0.00:   738.198 ms/op
                 executeQuery·p0.50:   742.916 ms/op
                 executeQuery·p0.90:   764.412 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op

Iteration   3: 753.701 ±(99.9%) 14.790 ms/op
                 executeQuery·p0.00:   725.615 ms/op
                 executeQuery·p0.50:   748.683 ms/op
                 executeQuery·p0.90:   768.606 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op

Iteration   4: 756.098 ±(99.9%) 11.585 ms/op
                 executeQuery·p0.00:   745.538 ms/op
                 executeQuery·p0.50:   750.780 ms/op
                 executeQuery·p0.90:   768.082 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   5: 741.568 ±(99.9%) 19.707 ms/op
                 executeQuery·p0.00:   711.983 ms/op
                 executeQuery·p0.50:   743.965 ms/op
                 executeQuery·p0.90:   765.460 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op


# Run progress: 19.44% complete, ETA 11:55:21
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

755.943 ±(99.9%) 42.188 ms/op
# Warmup Iteration   2: 751.529 ±(99.9%) 18.665 ms/op
# Warmup Iteration   3: 750.780 ±(99.9%) 14.962 ms/op
# Warmup Iteration   4: 745.538 ±(99.9%) 14.868 ms/op
# Warmup Iteration   5: 750.855 ±(99.9%) 23.673 ms/op
Iteration   1: 750.106 ±(99.9%) 16.949 ms/op
                 executeQuery·p0.00:   706.740 ms/op
                 executeQuery·p0.50:   750.780 ms/op
                 executeQuery·p0.90:   769.130 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   2: 743.291 ±(99.9%) 26.652 ms/op
                 executeQuery·p0.00:   707.789 ms/op
                 executeQuery·p0.50:   747.110 ms/op
                 executeQuery·p0.90:   767.558 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   3: 747.784 ±(99.9%) 17.021 ms/op
                 executeQuery·p0.00:   705.692 ms/op
                 executeQuery·p0.50:   746.586 ms/op
                 executeQuery·p0.90:   768.082 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   4: 745.987 ±(99.9%) 21.491 ms/op
                 executeQuery·p0.00:   718.275 ms/op
                 executeQuery·p0.50:   746.586 ms/op
                 executeQuery·p0.90:   766.509 ms/op
                 executeQuery·p0.95:   766.509 ms/op
                 executeQuery·p0.99:   766.509 ms/op
                 executeQuery·p0.999:  766.509 ms/op
                 executeQuery·p0.9999: 766.509 ms/op
                 executeQuery·p1.00:   766.509 ms/op

Iteration   5: 741.418 ±(99.9%) 19.115 ms/op
                 executeQuery·p0.00:   701.497 ms/op
                 executeQuery·p0.50:   741.868 ms/op
                 executeQuery·p0.90:   763.363 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 140
  mean =    748.189 ±(99.9%) 4.544 ms/op

  Histogram, ms/op:
    [700.000, 705.000) = 1 
    [705.000, 710.000) = 3 
    [710.000, 715.000) = 2 
    [715.000, 720.000) = 5 
    [720.000, 725.000) = 6 
    [725.000, 730.000) = 2 
    [730.000, 735.000) = 0 
    [735.000, 740.000) = 4 
    [740.000, 745.000) = 29 
    [745.000, 750.000) = 35 
    [750.000, 755.000) = 6 
    [755.000, 760.000) = 0 
    [760.000, 765.000) = 14 
    [765.000, 770.000) = 32 
    [770.000, 775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    701.497 ms/op
     p(50.0000) =    746.586 ms/op
     p(90.0000) =    766.509 ms/op
     p(95.0000) =    767.558 ms/op
     p(99.0000) =    770.892 ms/op
     p(99.9000) =    771.752 ms/op
     p(99.9900) =    771.752 ms/op
     p(99.9990) =    771.752 ms/op
     p(99.9999) =    771.752 ms/op
    p(100.0000) =    771.752 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 20.00% complete, ETA 11:37:52
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3275.751 ms/op
# Warmup Iteration   2: 2743.075 ms/op
# Warmup Iteration   3: 2663.383 ms/op
# Warmup Iteration   4: 2659.189 ms/op
# Warmup Iteration   5: 2621.440 ms/op
Iteration   1: 2491.417 ms/op
                 executeQuery·p0.00:   2491.417 ms/op
                 executeQuery·p0.50:   2491.417 ms/op
                 executeQuery·p0.90:   2491.417 ms/op
                 executeQuery·p0.95:   2491.417 ms/op
                 executeQuery·p0.99:   2491.417 ms/op
                 executeQuery·p0.999:  2491.417 ms/op
                 executeQuery·p0.9999: 2491.417 ms/op
                 executeQuery·p1.00:   2491.417 ms/op

Iteration   2: 2394.948 ms/op
                 executeQuery·p0.00:   2394.948 ms/op
                 executeQuery·p0.50:   2394.948 ms/op
                 executeQuery·p0.90:   2394.948 ms/op
                 executeQuery·p0.95:   2394.948 ms/op
                 executeQuery·p0.99:   2394.948 ms/op
                 executeQuery·p0.999:  2394.948 ms/op
                 executeQuery·p0.9999: 2394.948 ms/op
                 executeQuery·p1.00:   2394.948 ms/op

Iteration   3: 2566.914 ms/op
                 executeQuery·p0.00:   2566.914 ms/op
                 executeQuery·p0.50:   2566.914 ms/op
                 executeQuery·p0.90:   2566.914 ms/op
                 executeQuery·p0.95:   2566.914 ms/op
                 executeQuery·p0.99:   2566.914 ms/op
                 executeQuery·p0.999:  2566.914 ms/op
                 executeQuery·p0.9999: 2566.914 ms/op
                 executeQuery·p1.00:   2566.914 ms/op

Iteration   4: 2566.914 ms/op
                 executeQuery·p0.00:   2566.914 ms/op
                 executeQuery·p0.50:   2566.914 ms/op
                 executeQuery·p0.90:   2566.914 ms/op
                 executeQuery·p0.95:   2566.914 ms/op
                 executeQuery·p0.99:   2566.914 ms/op
                 executeQuery·p0.999:  2566.914 ms/op
                 executeQuery·p0.9999: 2566.914 ms/op
                 executeQuery·p1.00:   2566.914 ms/op

Iteration   5: 2470.445 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2470.445 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op


# Run progress: 20.56% complete, ETA 11:23:39
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_44756113 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_44756113() {
        this(4);
    }
    public KeyValueMap_44756113(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_44756113 aggregation_state_map = new KeyValueMap_44756113();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3003.122 ms/op
# Warmup Iteration   2: 2759.852 ms/op
# Warmup Iteration   3: 2587.886 ms/op
# Warmup Iteration   4: 2785.018 ms/op
# Warmup Iteration   5: 2667.577 ms/op
Iteration   1: 2449.474 ms/op
                 executeQuery·p0.00:   2449.474 ms/op
                 executeQuery·p0.50:   2449.474 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op

Iteration   2: 2457.862 ms/op
                 executeQuery·p0.00:   2457.862 ms/op
                 executeQuery·p0.50:   2457.862 ms/op
                 executeQuery·p0.90:   2457.862 ms/op
                 executeQuery·p0.95:   2457.862 ms/op
                 executeQuery·p0.99:   2457.862 ms/op
                 executeQuery·p0.999:  2457.862 ms/op
                 executeQuery·p0.9999: 2457.862 ms/op
                 executeQuery·p1.00:   2457.862 ms/op

Iteration   3: 2445.279 ms/op
                 executeQuery·p0.00:   2445.279 ms/op
                 executeQuery·p0.50:   2445.279 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   4: 2667.577 ms/op
                 executeQuery·p0.00:   2667.577 ms/op
                 executeQuery·p0.50:   2667.577 ms/op
                 executeQuery·p0.90:   2667.577 ms/op
                 executeQuery·p0.95:   2667.577 ms/op
                 executeQuery·p0.99:   2667.577 ms/op
                 executeQuery·p0.999:  2667.577 ms/op
                 executeQuery·p0.9999: 2667.577 ms/op
                 executeQuery·p1.00:   2667.577 ms/op

Iteration   5: 2554.331 ms/op
                 executeQuery·p0.00:   2554.331 ms/op
                 executeQuery·p0.50:   2554.331 ms/op
                 executeQuery·p0.90:   2554.331 ms/op
                 executeQuery·p0.95:   2554.331 ms/op
                 executeQuery·p0.99:   2554.331 ms/op
                 executeQuery·p0.999:  2554.331 ms/op
                 executeQuery·p0.9999: 2554.331 ms/op
                 executeQuery·p1.00:   2554.331 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   2506.516 ±(99.9%) 122.275 ms/op

  Histogram, ms/op:
    [2300.000, 2325.000) = 0 
    [2325.000, 2350.000) = 0 
    [2350.000, 2375.000) = 0 
    [2375.000, 2400.000) = 1 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 2 
    [2450.000, 2475.000) = 2 
    [2475.000, 2500.000) = 1 
    [2500.000, 2525.000) = 0 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 3 
    [2575.000, 2600.000) = 0 
    [2600.000, 2625.000) = 0 
    [2625.000, 2650.000) = 0 
    [2650.000, 2675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2394.948 ms/op
     p(50.0000) =   2480.931 ms/op
     p(90.0000) =   2657.511 ms/op
     p(95.0000) =   2667.577 ms/op
     p(99.0000) =   2667.577 ms/op
     p(99.9000) =   2667.577 ms/op
     p(99.9900) =   2667.577 ms/op
     p(99.9990) =   2667.577 ms/op
     p(99.9999) =   2667.577 ms/op
    p(100.0000) =   2667.577 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 21.11% complete, ETA 11:09:09
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5872.026 ms/op
# Warmup Iteration   2: 5217.714 ms/op
# Warmup Iteration   3: 5133.828 ms/op
# Warmup Iteration   4: 5469.372 ms/op
# Warmup Iteration   5: 5058.331 ms/op
Iteration   1: 5142.217 ms/op
                 executeQuery·p0.00:   5142.217 ms/op
                 executeQuery·p0.50:   5142.217 ms/op
                 executeQuery·p0.90:   5142.217 ms/op
                 executeQuery·p0.95:   5142.217 ms/op
                 executeQuery·p0.99:   5142.217 ms/op
                 executeQuery·p0.999:  5142.217 ms/op
                 executeQuery·p0.9999: 5142.217 ms/op
                 executeQuery·p1.00:   5142.217 ms/op

Iteration   2: 5041.553 ms/op
                 executeQuery·p0.00:   5041.553 ms/op
                 executeQuery·p0.50:   5041.553 ms/op
                 executeQuery·p0.90:   5041.553 ms/op
                 executeQuery·p0.95:   5041.553 ms/op
                 executeQuery·p0.99:   5041.553 ms/op
                 executeQuery·p0.999:  5041.553 ms/op
                 executeQuery·p0.9999: 5041.553 ms/op
                 executeQuery·p1.00:   5041.553 ms/op

Iteration   3: 5066.719 ms/op
                 executeQuery·p0.00:   5066.719 ms/op
                 executeQuery·p0.50:   5066.719 ms/op
                 executeQuery·p0.90:   5066.719 ms/op
                 executeQuery·p0.95:   5066.719 ms/op
                 executeQuery·p0.99:   5066.719 ms/op
                 executeQuery·p0.999:  5066.719 ms/op
                 executeQuery·p0.9999: 5066.719 ms/op
                 executeQuery·p1.00:   5066.719 ms/op

Iteration   4: 5343.543 ms/op
                 executeQuery·p0.00:   5343.543 ms/op
                 executeQuery·p0.50:   5343.543 ms/op
                 executeQuery·p0.90:   5343.543 ms/op
                 executeQuery·p0.95:   5343.543 ms/op
                 executeQuery·p0.99:   5343.543 ms/op
                 executeQuery·p0.999:  5343.543 ms/op
                 executeQuery·p0.9999: 5343.543 ms/op
                 executeQuery·p1.00:   5343.543 ms/op

Iteration   5: 5125.439 ms/op
                 executeQuery·p0.00:   5125.439 ms/op
                 executeQuery·p0.50:   5125.439 ms/op
                 executeQuery·p0.90:   5125.439 ms/op
                 executeQuery·p0.95:   5125.439 ms/op
                 executeQuery·p0.99:   5125.439 ms/op
                 executeQuery·p0.999:  5125.439 ms/op
                 executeQuery·p0.9999: 5125.439 ms/op
                 executeQuery·p1.00:   5125.439 ms/op


# Run progress: 21.67% complete, ETA 11:16:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5544.870 ms/op
# Warmup Iteration   2: 5175.771 ms/op
# Warmup Iteration   3: 5175.771 ms/op
# Warmup Iteration   4: 5528.093 ms/op
# Warmup Iteration   5: 5091.885 ms/op
Iteration   1: 5427.429 ms/op
                 executeQuery·p0.00:   5427.429 ms/op
                 executeQuery·p0.50:   5427.429 ms/op
                 executeQuery·p0.90:   5427.429 ms/op
                 executeQuery·p0.95:   5427.429 ms/op
                 executeQuery·p0.99:   5427.429 ms/op
                 executeQuery·p0.999:  5427.429 ms/op
                 executeQuery·p0.9999: 5427.429 ms/op
                 executeQuery·p1.00:   5427.429 ms/op

Iteration   2: 5150.605 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5150.605 ms/op
                 executeQuery·p0.90:   5150.605 ms/op
                 executeQuery·p0.95:   5150.605 ms/op
                 executeQuery·p0.99:   5150.605 ms/op
                 executeQuery·p0.999:  5150.605 ms/op
                 executeQuery·p0.9999: 5150.605 ms/op
                 executeQuery·p1.00:   5150.605 ms/op

Iteration   3: 5117.051 ms/op
                 executeQuery·p0.00:   5117.051 ms/op
                 executeQuery·p0.50:   5117.051 ms/op
                 executeQuery·p0.90:   5117.051 ms/op
                 executeQuery·p0.95:   5117.051 ms/op
                 executeQuery·p0.99:   5117.051 ms/op
                 executeQuery·p0.999:  5117.051 ms/op
                 executeQuery·p0.9999: 5117.051 ms/op
                 executeQuery·p1.00:   5117.051 ms/op

Iteration   4: 5385.486 ms/op
                 executeQuery·p0.00:   5385.486 ms/op
                 executeQuery·p0.50:   5385.486 ms/op
                 executeQuery·p0.90:   5385.486 ms/op
                 executeQuery·p0.95:   5385.486 ms/op
                 executeQuery·p0.99:   5385.486 ms/op
                 executeQuery·p0.999:  5385.486 ms/op
                 executeQuery·p0.9999: 5385.486 ms/op
                 executeQuery·p1.00:   5385.486 ms/op

Iteration   5: 5033.165 ms/op
                 executeQuery·p0.00:   5033.165 ms/op
                 executeQuery·p0.50:   5033.165 ms/op
                 executeQuery·p0.90:   5033.165 ms/op
                 executeQuery·p0.95:   5033.165 ms/op
                 executeQuery·p0.99:   5033.165 ms/op
                 executeQuery·p0.999:  5033.165 ms/op
                 executeQuery·p0.9999: 5033.165 ms/op
                 executeQuery·p1.00:   5033.165 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   5183.321 ±(99.9%) 221.323 ms/op

  Histogram, ms/op:
    [5000.000, 5050.000) = 2 
    [5050.000, 5100.000) = 1 
    [5100.000, 5150.000) = 3 
    [5150.000, 5200.000) = 1 
    [5200.000, 5250.000) = 0 
    [5250.000, 5300.000) = 0 
    [5300.000, 5350.000) = 1 
    [5350.000, 5400.000) = 1 
    [5400.000, 5450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   5033.165 ms/op
     p(50.0000) =   5133.828 ms/op
     p(90.0000) =   5423.235 ms/op
     p(95.0000) =   5427.429 ms/op
     p(99.0000) =   5427.429 ms/op
     p(99.9000) =   5427.429 ms/op
     p(99.9900) =   5427.429 ms/op
     p(99.9990) =   5427.429 ms/op
     p(99.9999) =   5427.429 ms/op
    p(100.0000) =   5427.429 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 22.22% complete, ETA 11:22:08
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6505.366 ms/op
# Warmup Iteration   2: 4220.868 ±(99.9%) 8335.500 ms/op
# Warmup Iteration   3: 3828.001 ±(99.9%) 116.886 ms/op
# Warmup Iteration   4: 3840.584 ±(99.9%) 435.110 ms/op
# Warmup Iteration   5: 3828.001 ±(99.9%) 88.357 ms/op
Iteration   1: 3833.594 ±(99.9%) 132.536 ms/op
                 executeQuery·p0.00:   3829.400 ms/op
                 executeQuery·p0.50:   3829.400 ms/op
                 executeQuery·p0.90:   3841.982 ms/op
                 executeQuery·p0.95:   3841.982 ms/op
                 executeQuery·p0.99:   3841.982 ms/op
                 executeQuery·p0.999:  3841.982 ms/op
                 executeQuery·p0.9999: 3841.982 ms/op
                 executeQuery·p1.00:   3841.982 ms/op

Iteration   2: 3828.001 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3825.205 ms/op
                 executeQuery·p0.50:   3829.400 ms/op
                 executeQuery·p0.90:   3829.400 ms/op
                 executeQuery·p0.95:   3829.400 ms/op
                 executeQuery·p0.99:   3829.400 ms/op
                 executeQuery·p0.999:  3829.400 ms/op
                 executeQuery·p0.9999: 3829.400 ms/op
                 executeQuery·p1.00:   3829.400 ms/op

Iteration   3: 3834.992 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3833.594 ms/op
                 executeQuery·p0.50:   3833.594 ms/op
                 executeQuery·p0.90:   3837.788 ms/op
                 executeQuery·p0.95:   3837.788 ms/op
                 executeQuery·p0.99:   3837.788 ms/op
                 executeQuery·p0.999:  3837.788 ms/op
                 executeQuery·p0.9999: 3837.788 ms/op
                 executeQuery·p1.00:   3837.788 ms/op

Iteration   4: 3892.314 ±(99.9%) 1000.625 ms/op
                 executeQuery·p0.00:   3829.400 ms/op
                 executeQuery·p0.50:   3917.480 ms/op
                 executeQuery·p0.90:   3930.063 ms/op
                 executeQuery·p0.95:   3930.063 ms/op
                 executeQuery·p0.99:   3930.063 ms/op
                 executeQuery·p0.999:  3930.063 ms/op
                 executeQuery·p0.9999: 3930.063 ms/op
                 executeQuery·p1.00:   3930.063 ms/op

Iteration   5: 3832.196 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3829.400 ms/op
                 executeQuery·p0.50:   3833.594 ms/op
                 executeQuery·p0.90:   3833.594 ms/op
                 executeQuery·p0.95:   3833.594 ms/op
                 executeQuery·p0.99:   3833.594 ms/op
                 executeQuery·p0.999:  3833.594 ms/op
                 executeQuery·p0.9999: 3833.594 ms/op
                 executeQuery·p1.00:   3833.594 ms/op


# Run progress: 22.78% complete, ETA 11:07:31
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3641.355 ±(99.9%) 24306.737 ms/op
# Warmup Iteration   2: 4472.526 ±(99.9%) 6626.949 ms/op
# Warmup Iteration   3: 4641.696 ±(99.9%) 88.357 ms/op
# Warmup Iteration   4: 5351.932 ±(99.9%) 22531.127 ms/op
# Warmup Iteration   5: 6731.858 ms/op
Iteration   1: 6702.498 ms/op
                 executeQuery·p0.00:   6694.109 ms/op
                 executeQuery·p0.50:   6702.498 ms/op
                 executeQuery·p0.90:   6710.886 ms/op
                 executeQuery·p0.95:   6710.886 ms/op
                 executeQuery·p0.99:   6710.886 ms/op
                 executeQuery·p0.999:  6710.886 ms/op
                 executeQuery·p0.9999: 6710.886 ms/op
                 executeQuery·p1.00:   6710.886 ms/op

Iteration   2: 6698.303 ms/op
                 executeQuery·p0.00:   6694.109 ms/op
                 executeQuery·p0.50:   6698.303 ms/op
                 executeQuery·p0.90:   6702.498 ms/op
                 executeQuery·p0.95:   6702.498 ms/op
                 executeQuery·p0.99:   6702.498 ms/op
                 executeQuery·p0.999:  6702.498 ms/op
                 executeQuery·p0.9999: 6702.498 ms/op
                 executeQuery·p1.00:   6702.498 ms/op

Iteration   3: 7465.861 ms/op
                 executeQuery·p0.00:   6694.109 ms/op
                 executeQuery·p0.50:   7465.861 ms/op
                 executeQuery·p0.90:   8237.613 ms/op
                 executeQuery·p0.95:   8237.613 ms/op
                 executeQuery·p0.99:   8237.613 ms/op
                 executeQuery·p0.999:  8237.613 ms/op
                 executeQuery·p0.9999: 8237.613 ms/op
                 executeQuery·p1.00:   8237.613 ms/op

Iteration   4: 6694.109 ms/op
                 executeQuery·p0.00:   6694.109 ms/op
                 executeQuery·p0.50:   6694.109 ms/op
                 executeQuery·p0.90:   6694.109 ms/op
                 executeQuery·p0.95:   6694.109 ms/op
                 executeQuery·p0.99:   6694.109 ms/op
                 executeQuery·p0.999:  6694.109 ms/op
                 executeQuery·p0.9999: 6694.109 ms/op
                 executeQuery·p1.00:   6694.109 ms/op

Iteration   5: 7029.654 ms/op
                 executeQuery·p0.00:   6694.109 ms/op
                 executeQuery·p0.50:   7029.654 ms/op
                 executeQuery·p0.90:   7365.198 ms/op
                 executeQuery·p0.95:   7365.198 ms/op
                 executeQuery·p0.99:   7365.198 ms/op
                 executeQuery·p0.999:  7365.198 ms/op
                 executeQuery·p0.9999: 7365.198 ms/op
                 executeQuery·p1.00:   7365.198 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 25
  mean =   5073.766 ±(99.9%) 1174.868 ms/op

  Histogram, ms/op:
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 15 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 0 
    [6000.000, 6500.000) = 0 
    [6500.000, 7000.000) = 8 
    [7000.000, 7500.000) = 1 
    [7500.000, 8000.000) = 0 
    [8000.000, 8500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3825.205 ms/op
     p(50.0000) =   3841.982 ms/op
     p(90.0000) =   6972.611 ms/op
     p(95.0000) =   7975.888 ms/op
     p(99.0000) =   8237.613 ms/op
     p(99.9000) =   8237.613 ms/op
     p(99.9900) =   8237.613 ms/op
     p(99.9990) =   8237.613 ms/op
     p(99.9999) =   8237.613 ms/op
    p(100.0000) =   8237.613 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 23.33% complete, ETA 10:54:33
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6882.853 ms/op
# Warmup Iteration   2: 5456.790 ms/op
# Warmup Iteration   3: 5402.264 ms/op
# Warmup Iteration   4: 5792.334 ms/op
# Warmup Iteration   5: 5762.974 ms/op
Iteration   1: 5486.150 ms/op
                 executeQuery·p0.00:   5100.274 ms/op
                 executeQuery·p0.50:   5486.150 ms/op
                 executeQuery·p0.90:   5872.026 ms/op
                 executeQuery·p0.95:   5872.026 ms/op
                 executeQuery·p0.99:   5872.026 ms/op
                 executeQuery·p0.999:  5872.026 ms/op
                 executeQuery·p0.9999: 5872.026 ms/op
                 executeQuery·p1.00:   5872.026 ms/op

Iteration   2: 5104.468 ms/op
                 executeQuery·p0.00:   5100.274 ms/op
                 executeQuery·p0.50:   5104.468 ms/op
                 executeQuery·p0.90:   5108.662 ms/op
                 executeQuery·p0.95:   5108.662 ms/op
                 executeQuery·p0.99:   5108.662 ms/op
                 executeQuery·p0.999:  5108.662 ms/op
                 executeQuery·p0.9999: 5108.662 ms/op
                 executeQuery·p1.00:   5108.662 ms/op

Iteration   3: 5100.274 ms/op
                 executeQuery·p0.00:   5100.274 ms/op
                 executeQuery·p0.50:   5100.274 ms/op
                 executeQuery·p0.90:   5100.274 ms/op
                 executeQuery·p0.95:   5100.274 ms/op
                 executeQuery·p0.99:   5100.274 ms/op
                 executeQuery·p0.999:  5100.274 ms/op
                 executeQuery·p0.9999: 5100.274 ms/op
                 executeQuery·p1.00:   5100.274 ms/op

Iteration   4: 5100.274 ms/op
                 executeQuery·p0.00:   5100.274 ms/op
                 executeQuery·p0.50:   5100.274 ms/op
                 executeQuery·p0.90:   5100.274 ms/op
                 executeQuery·p0.95:   5100.274 ms/op
                 executeQuery·p0.99:   5100.274 ms/op
                 executeQuery·p0.999:  5100.274 ms/op
                 executeQuery·p0.9999: 5100.274 ms/op
                 executeQuery·p1.00:   5100.274 ms/op

Iteration   5: 5100.274 ms/op
                 executeQuery·p0.00:   5100.274 ms/op
                 executeQuery·p0.50:   5100.274 ms/op
                 executeQuery·p0.90:   5100.274 ms/op
                 executeQuery·p0.95:   5100.274 ms/op
                 executeQuery·p0.99:   5100.274 ms/op
                 executeQuery·p0.999:  5100.274 ms/op
                 executeQuery·p0.9999: 5100.274 ms/op
                 executeQuery·p1.00:   5100.274 ms/op


# Run progress: 23.89% complete, ETA 10:40:40
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5133.828 ms/op
# Warmup Iteration   2: 5393.875 ms/op
# Warmup Iteration   3: 5322.572 ms/op
# Warmup Iteration   4: 5511.315 ms/op
# Warmup Iteration   5: 5532.287 ms/op
Iteration   1: 5318.377 ms/op
                 executeQuery·p0.00:   5125.439 ms/op
                 executeQuery·p0.50:   5318.377 ms/op
                 executeQuery·p0.90:   5511.315 ms/op
                 executeQuery·p0.95:   5511.315 ms/op
                 executeQuery·p0.99:   5511.315 ms/op
                 executeQuery·p0.999:  5511.315 ms/op
                 executeQuery·p0.9999: 5511.315 ms/op
                 executeQuery·p1.00:   5511.315 ms/op

Iteration   2: 5167.383 ms/op
                 executeQuery·p0.00:   5133.828 ms/op
                 executeQuery·p0.50:   5167.383 ms/op
                 executeQuery·p0.90:   5200.937 ms/op
                 executeQuery·p0.95:   5200.937 ms/op
                 executeQuery·p0.99:   5200.937 ms/op
                 executeQuery·p0.999:  5200.937 ms/op
                 executeQuery·p0.9999: 5200.937 ms/op
                 executeQuery·p1.00:   5200.937 ms/op

Iteration   3: 5142.217 ms/op
                 executeQuery·p0.00:   5142.217 ms/op
                 executeQuery·p0.50:   5142.217 ms/op
                 executeQuery·p0.90:   5142.217 ms/op
                 executeQuery·p0.95:   5142.217 ms/op
                 executeQuery·p0.99:   5142.217 ms/op
                 executeQuery·p0.999:  5142.217 ms/op
                 executeQuery·p0.9999: 5142.217 ms/op
                 executeQuery·p1.00:   5142.217 ms/op

Iteration   4: 5154.800 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5154.800 ms/op
                 executeQuery·p0.90:   5158.994 ms/op
                 executeQuery·p0.95:   5158.994 ms/op
                 executeQuery·p0.99:   5158.994 ms/op
                 executeQuery·p0.999:  5158.994 ms/op
                 executeQuery·p0.9999: 5158.994 ms/op
                 executeQuery·p1.00:   5158.994 ms/op

Iteration   5: 5129.634 ms/op
                 executeQuery·p0.00:   5125.439 ms/op
                 executeQuery·p0.50:   5129.634 ms/op
                 executeQuery·p0.90:   5133.828 ms/op
                 executeQuery·p0.95:   5133.828 ms/op
                 executeQuery·p0.99:   5133.828 ms/op
                 executeQuery·p0.999:  5133.828 ms/op
                 executeQuery·p0.9999: 5133.828 ms/op
                 executeQuery·p1.00:   5133.828 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   5180.385 ±(99.9%) 161.772 ms/op

  Histogram, ms/op:
    [5100.000, 5150.000) = 15 
    [5150.000, 5200.000) = 2 
    [5200.000, 5250.000) = 1 
    [5250.000, 5300.000) = 0 
    [5300.000, 5350.000) = 0 
    [5350.000, 5400.000) = 0 
    [5400.000, 5450.000) = 0 
    [5450.000, 5500.000) = 0 
    [5500.000, 5550.000) = 1 
    [5550.000, 5600.000) = 0 
    [5600.000, 5650.000) = 0 
    [5650.000, 5700.000) = 0 
    [5700.000, 5750.000) = 0 
    [5750.000, 5800.000) = 0 
    [5800.000, 5850.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5100.274 ms/op
     p(50.0000) =   5125.439 ms/op
     p(90.0000) =   5480.278 ms/op
     p(95.0000) =   5853.990 ms/op
     p(99.0000) =   5872.026 ms/op
     p(99.9000) =   5872.026 ms/op
     p(99.9900) =   5872.026 ms/op
     p(99.9990) =   5872.026 ms/op
     p(99.9999) =   5872.026 ms/op
    p(100.0000) =   5872.026 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 24.44% complete, ETA 10:27:05
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7990.149 ms/op
# Warmup Iteration   2: 7365.198 ms/op
# Warmup Iteration   3: 7172.260 ms/op
# Warmup Iteration   4: 7163.871 ms/op
# Warmup Iteration   5: 6937.379 ms/op
Iteration   1: 7000.293 ms/op
                 executeQuery·p0.00:   6853.493 ms/op
                 executeQuery·p0.50:   7000.293 ms/op
                 executeQuery·p0.90:   7147.094 ms/op
                 executeQuery·p0.95:   7147.094 ms/op
                 executeQuery·p0.99:   7147.094 ms/op
                 executeQuery·p0.999:  7147.094 ms/op
                 executeQuery·p0.9999: 7147.094 ms/op
                 executeQuery·p1.00:   7147.094 ms/op

Iteration   2: 6979.322 ms/op
                 executeQuery·p0.00:   6828.327 ms/op
                 executeQuery·p0.50:   6979.322 ms/op
                 executeQuery·p0.90:   7130.317 ms/op
                 executeQuery·p0.95:   7130.317 ms/op
                 executeQuery·p0.99:   7130.317 ms/op
                 executeQuery·p0.999:  7130.317 ms/op
                 executeQuery·p0.9999: 7130.317 ms/op
                 executeQuery·p1.00:   7130.317 ms/op

Iteration   3: 7180.648 ms/op
                 executeQuery·p0.00:   7147.094 ms/op
                 executeQuery·p0.50:   7180.648 ms/op
                 executeQuery·p0.90:   7214.203 ms/op
                 executeQuery·p0.95:   7214.203 ms/op
                 executeQuery·p0.99:   7214.203 ms/op
                 executeQuery·p0.999:  7214.203 ms/op
                 executeQuery·p0.9999: 7214.203 ms/op
                 executeQuery·p1.00:   7214.203 ms/op

Iteration   4: 6840.910 ms/op
                 executeQuery·p0.00:   6819.938 ms/op
                 executeQuery·p0.50:   6840.910 ms/op
                 executeQuery·p0.90:   6861.881 ms/op
                 executeQuery·p0.95:   6861.881 ms/op
                 executeQuery·p0.99:   6861.881 ms/op
                 executeQuery·p0.999:  6861.881 ms/op
                 executeQuery·p0.9999: 6861.881 ms/op
                 executeQuery·p1.00:   6861.881 ms/op

Iteration   5: 7126.122 ms/op
                 executeQuery·p0.00:   7121.928 ms/op
                 executeQuery·p0.50:   7126.122 ms/op
                 executeQuery·p0.90:   7130.317 ms/op
                 executeQuery·p0.95:   7130.317 ms/op
                 executeQuery·p0.99:   7130.317 ms/op
                 executeQuery·p0.999:  7130.317 ms/op
                 executeQuery·p0.9999: 7130.317 ms/op
                 executeQuery·p1.00:   7130.317 ms/op


# Run progress: 25.00% complete, ETA 10:15:56
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7960.789 ms/op
# Warmup Iteration   2: 7671.382 ms/op
# Warmup Iteration   3: 7696.548 ms/op
# Warmup Iteration   4: 7688.159 ms/op
# Warmup Iteration   5: 7482.638 ms/op
Iteration   1: 7612.662 ms/op
                 executeQuery·p0.00:   7474.250 ms/op
                 executeQuery·p0.50:   7612.662 ms/op
                 executeQuery·p0.90:   7751.074 ms/op
                 executeQuery·p0.95:   7751.074 ms/op
                 executeQuery·p0.99:   7751.074 ms/op
                 executeQuery·p0.999:  7751.074 ms/op
                 executeQuery·p0.9999: 7751.074 ms/op
                 executeQuery·p1.00:   7751.074 ms/op

Iteration   2: 7499.416 ms/op
                 executeQuery·p0.00:   7482.638 ms/op
                 executeQuery·p0.50:   7499.416 ms/op
                 executeQuery·p0.90:   7516.193 ms/op
                 executeQuery·p0.95:   7516.193 ms/op
                 executeQuery·p0.99:   7516.193 ms/op
                 executeQuery·p0.999:  7516.193 ms/op
                 executeQuery·p0.9999: 7516.193 ms/op
                 executeQuery·p1.00:   7516.193 ms/op

Iteration   3: 7683.965 ms/op
                 executeQuery·p0.00:   7642.022 ms/op
                 executeQuery·p0.50:   7683.965 ms/op
                 executeQuery·p0.90:   7725.908 ms/op
                 executeQuery·p0.95:   7725.908 ms/op
                 executeQuery·p0.99:   7725.908 ms/op
                 executeQuery·p0.999:  7725.908 ms/op
                 executeQuery·p0.9999: 7725.908 ms/op
                 executeQuery·p1.00:   7725.908 ms/op

Iteration   4: 7491.027 ms/op
                 executeQuery·p0.00:   7491.027 ms/op
                 executeQuery·p0.50:   7491.027 ms/op
                 executeQuery·p0.90:   7491.027 ms/op
                 executeQuery·p0.95:   7491.027 ms/op
                 executeQuery·p0.99:   7491.027 ms/op
                 executeQuery·p0.999:  7491.027 ms/op
                 executeQuery·p0.9999: 7491.027 ms/op
                 executeQuery·p1.00:   7491.027 ms/op

Iteration   5: 7600.079 ms/op
                 executeQuery·p0.00:   7474.250 ms/op
                 executeQuery·p0.50:   7600.079 ms/op
                 executeQuery·p0.90:   7725.908 ms/op
                 executeQuery·p0.95:   7725.908 ms/op
                 executeQuery·p0.99:   7725.908 ms/op
                 executeQuery·p0.999:  7725.908 ms/op
                 executeQuery·p0.9999: 7725.908 ms/op
                 executeQuery·p1.00:   7725.908 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   7301.444 ±(99.9%) 273.488 ms/op

  Histogram, ms/op:
    [6800.000, 6900.000) = 4 
    [6900.000, 7000.000) = 0 
    [7000.000, 7100.000) = 0 
    [7100.000, 7200.000) = 5 
    [7200.000, 7300.000) = 1 
    [7300.000, 7400.000) = 0 
    [7400.000, 7500.000) = 5 
    [7500.000, 7600.000) = 1 
    [7600.000, 7700.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6819.938 ms/op
     p(50.0000) =   7344.226 ms/op
     p(90.0000) =   7725.908 ms/op
     p(95.0000) =   7749.816 ms/op
     p(99.0000) =   7751.074 ms/op
     p(99.9000) =   7751.074 ms/op
     p(99.9900) =   7751.074 ms/op
     p(99.9990) =   7751.074 ms/op
     p(99.9999) =   7751.074 ms/op
    p(100.0000) =   7751.074 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 25.56% complete, ETA 10:05:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

29494.346 ms/op
# Warmup Iteration   2: 25702.695 ms/op
# Warmup Iteration   3: 24863.834 ms/op
# Warmup Iteration   4: 26273.120 ms/op
# Warmup Iteration   5: 25232.933 ms/op
Iteration   1: 25534.923 ms/op
                 executeQuery·p0.00:   25534.923 ms/op
                 executeQuery·p0.50:   25534.923 ms/op
                 executeQuery·p0.90:   25534.923 ms/op
                 executeQuery·p0.95:   25534.923 ms/op
                 executeQuery·p0.99:   25534.923 ms/op
                 executeQuery·p0.999:  25534.923 ms/op
                 executeQuery·p0.9999: 25534.923 ms/op
                 executeQuery·p1.00:   25534.923 ms/op

Iteration   2: 24863.834 ms/op
                 executeQuery·p0.00:   24863.834 ms/op
                 executeQuery·p0.50:   24863.834 ms/op
                 executeQuery·p0.90:   24863.834 ms/op
                 executeQuery·p0.95:   24863.834 ms/op
                 executeQuery·p0.99:   24863.834 ms/op
                 executeQuery·p0.999:  24863.834 ms/op
                 executeQuery·p0.9999: 24863.834 ms/op
                 executeQuery·p1.00:   24863.834 ms/op

Iteration   3: 25199.378 ms/op
                 executeQuery·p0.00:   25199.378 ms/op
                 executeQuery·p0.50:   25199.378 ms/op
                 executeQuery·p0.90:   25199.378 ms/op
                 executeQuery·p0.95:   25199.378 ms/op
                 executeQuery·p0.99:   25199.378 ms/op
                 executeQuery·p0.999:  25199.378 ms/op
                 executeQuery·p0.9999: 25199.378 ms/op
                 executeQuery·p1.00:   25199.378 ms/op

Iteration   4: 25266.487 ms/op
                 executeQuery·p0.00:   25266.487 ms/op
                 executeQuery·p0.50:   25266.487 ms/op
                 executeQuery·p0.90:   25266.487 ms/op
                 executeQuery·p0.95:   25266.487 ms/op
                 executeQuery·p0.99:   25266.487 ms/op
                 executeQuery·p0.999:  25266.487 ms/op
                 executeQuery·p0.9999: 25266.487 ms/op
                 executeQuery·p1.00:   25266.487 ms/op

Iteration   5: 25769.804 ms/op
                 executeQuery·p0.00:   25769.804 ms/op
                 executeQuery·p0.50:   25769.804 ms/op
                 executeQuery·p0.90:   25769.804 ms/op
                 executeQuery·p0.95:   25769.804 ms/op
                 executeQuery·p0.99:   25769.804 ms/op
                 executeQuery·p0.999:  25769.804 ms/op
                 executeQuery·p0.9999: 25769.804 ms/op
                 executeQuery·p1.00:   25769.804 ms/op


# Run progress: 26.11% complete, ETA 10:05:24
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

26273.120 ms/op
# Warmup Iteration   2: 27011.318 ms/op
# Warmup Iteration   3: 25635.586 ms/op
# Warmup Iteration   4: 25434.259 ms/op
# Warmup Iteration   5: 23152.558 ms/op
Iteration   1: 25702.695 ms/op
                 executeQuery·p0.00:   25702.695 ms/op
                 executeQuery·p0.50:   25702.695 ms/op
                 executeQuery·p0.90:   25702.695 ms/op
                 executeQuery·p0.95:   25702.695 ms/op
                 executeQuery·p0.99:   25702.695 ms/op
                 executeQuery·p0.999:  25702.695 ms/op
                 executeQuery·p0.9999: 25702.695 ms/op
                 executeQuery·p1.00:   25702.695 ms/op

Iteration   2: 25803.358 ms/op
                 executeQuery·p0.00:   25803.358 ms/op
                 executeQuery·p0.50:   25803.358 ms/op
                 executeQuery·p0.90:   25803.358 ms/op
                 executeQuery·p0.95:   25803.358 ms/op
                 executeQuery·p0.99:   25803.358 ms/op
                 executeQuery·p0.999:  25803.358 ms/op
                 executeQuery·p0.9999: 25803.358 ms/op
                 executeQuery·p1.00:   25803.358 ms/op

Iteration   3: 26004.685 ms/op
                 executeQuery·p0.00:   26004.685 ms/op
                 executeQuery·p0.50:   26004.685 ms/op
                 executeQuery·p0.90:   26004.685 ms/op
                 executeQuery·p0.95:   26004.685 ms/op
                 executeQuery·p0.99:   26004.685 ms/op
                 executeQuery·p0.999:  26004.685 ms/op
                 executeQuery·p0.9999: 26004.685 ms/op
                 executeQuery·p1.00:   26004.685 ms/op

Iteration   4: 26407.338 ms/op
                 executeQuery·p0.00:   26407.338 ms/op
                 executeQuery·p0.50:   26407.338 ms/op
                 executeQuery·p0.90:   26407.338 ms/op
                 executeQuery·p0.95:   26407.338 ms/op
                 executeQuery·p0.99:   26407.338 ms/op
                 executeQuery·p0.999:  26407.338 ms/op
                 executeQuery·p0.9999: 26407.338 ms/op
                 executeQuery·p1.00:   26407.338 ms/op

Iteration   5: 25669.140 ms/op
                 executeQuery·p0.00:   25669.140 ms/op
                 executeQuery·p0.50:   25669.140 ms/op
                 executeQuery·p0.90:   25669.140 ms/op
                 executeQuery·p0.95:   25669.140 ms/op
                 executeQuery·p0.99:   25669.140 ms/op
                 executeQuery·p0.999:  25669.140 ms/op
                 executeQuery·p0.9999: 25669.140 ms/op
                 executeQuery·p1.00:   25669.140 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  25622.164 ±(99.9%) 659.787 ms/op

  Histogram, ms/op:
    [24000.000, 24250.000) = 0 
    [24250.000, 24500.000) = 0 
    [24500.000, 24750.000) = 0 
    [24750.000, 25000.000) = 1 
    [25000.000, 25250.000) = 1 
    [25250.000, 25500.000) = 1 
    [25500.000, 25750.000) = 3 
    [25750.000, 26000.000) = 2 
    [26000.000, 26250.000) = 1 
    [26250.000, 26500.000) = 1 
    [26500.000, 26750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  24863.834 ms/op
     p(50.0000) =  25685.918 ms/op
     p(90.0000) =  26367.073 ms/op
     p(95.0000) =  26407.338 ms/op
     p(99.0000) =  26407.338 ms/op
     p(99.9000) =  26407.338 ms/op
     p(99.9900) =  26407.338 ms/op
     p(99.9990) =  26407.338 ms/op
     p(99.9999) =  26407.338 ms/op
    p(100.0000) =  26407.338 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 26.67% complete, ETA 10:04:54
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

54492.398 ms/op
# Warmup Iteration   2: 60196.651 ms/op
# Warmup Iteration   3: 51002.737 ms/op
# Warmup Iteration   4: 52479.132 ms/op
# Warmup Iteration   5: 50264.539 ms/op
Iteration   1: 51942.261 ms/op
                 executeQuery·p0.00:   51942.261 ms/op
                 executeQuery·p0.50:   51942.261 ms/op
                 executeQuery·p0.90:   51942.261 ms/op
                 executeQuery·p0.95:   51942.261 ms/op
                 executeQuery·p0.99:   51942.261 ms/op
                 executeQuery·p0.999:  51942.261 ms/op
                 executeQuery·p0.9999: 51942.261 ms/op
                 executeQuery·p1.00:   51942.261 ms/op

Iteration   2: 52143.587 ms/op
                 executeQuery·p0.00:   52143.587 ms/op
                 executeQuery·p0.50:   52143.587 ms/op
                 executeQuery·p0.90:   52143.587 ms/op
                 executeQuery·p0.95:   52143.587 ms/op
                 executeQuery·p0.99:   52143.587 ms/op
                 executeQuery·p0.999:  52143.587 ms/op
                 executeQuery·p0.9999: 52143.587 ms/op
                 executeQuery·p1.00:   52143.587 ms/op

Iteration   3: 53150.220 ms/op
                 executeQuery·p0.00:   53150.220 ms/op
                 executeQuery·p0.50:   53150.220 ms/op
                 executeQuery·p0.90:   53150.220 ms/op
                 executeQuery·p0.95:   53150.220 ms/op
                 executeQuery·p0.99:   53150.220 ms/op
                 executeQuery·p0.999:  53150.220 ms/op
                 executeQuery·p0.9999: 53150.220 ms/op
                 executeQuery·p1.00:   53150.220 ms/op

Iteration   4: 50935.628 ms/op
                 executeQuery·p0.00:   50935.628 ms/op
                 executeQuery·p0.50:   50935.628 ms/op
                 executeQuery·p0.90:   50935.628 ms/op
                 executeQuery·p0.95:   50935.628 ms/op
                 executeQuery·p0.99:   50935.628 ms/op
                 executeQuery·p0.999:  50935.628 ms/op
                 executeQuery·p0.9999: 50935.628 ms/op
                 executeQuery·p1.00:   50935.628 ms/op

Iteration   5: 51875.152 ms/op
                 executeQuery·p0.00:   51875.152 ms/op
                 executeQuery·p0.50:   51875.152 ms/op
                 executeQuery·p0.90:   51875.152 ms/op
                 executeQuery·p0.95:   51875.152 ms/op
                 executeQuery·p0.99:   51875.152 ms/op
                 executeQuery·p0.999:  51875.152 ms/op
                 executeQuery·p0.9999: 51875.152 ms/op
                 executeQuery·p1.00:   51875.152 ms/op


# Run progress: 27.22% complete, ETA 10:29:25
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

51673.825 ms/op
# Warmup Iteration   2: 53687.091 ms/op
# Warmup Iteration   3: 50264.539 ms/op
# Warmup Iteration   4: 50532.975 ms/op
# Warmup Iteration   5: 51472.499 ms/op
Iteration   1: 50935.628 ms/op
                 executeQuery·p0.00:   50935.628 ms/op
                 executeQuery·p0.50:   50935.628 ms/op
                 executeQuery·p0.90:   50935.628 ms/op
                 executeQuery·p0.95:   50935.628 ms/op
                 executeQuery·p0.99:   50935.628 ms/op
                 executeQuery·p0.999:  50935.628 ms/op
                 executeQuery·p0.9999: 50935.628 ms/op
                 executeQuery·p1.00:   50935.628 ms/op

Iteration   2: 50063.213 ms/op
                 executeQuery·p0.00:   50063.213 ms/op
                 executeQuery·p0.50:   50063.213 ms/op
                 executeQuery·p0.90:   50063.213 ms/op
                 executeQuery·p0.95:   50063.213 ms/op
                 executeQuery·p0.99:   50063.213 ms/op
                 executeQuery·p0.999:  50063.213 ms/op
                 executeQuery·p0.9999: 50063.213 ms/op
                 executeQuery·p1.00:   50063.213 ms/op

Iteration   3: 51405.390 ms/op
                 executeQuery·p0.00:   51405.390 ms/op
                 executeQuery·p0.50:   51405.390 ms/op
                 executeQuery·p0.90:   51405.390 ms/op
                 executeQuery·p0.95:   51405.390 ms/op
                 executeQuery·p0.99:   51405.390 ms/op
                 executeQuery·p0.999:  51405.390 ms/op
                 executeQuery·p0.9999: 51405.390 ms/op
                 executeQuery·p1.00:   51405.390 ms/op

Iteration   4: 52613.349 ms/op
                 executeQuery·p0.00:   52613.349 ms/op
                 executeQuery·p0.50:   52613.349 ms/op
                 executeQuery·p0.90:   52613.349 ms/op
                 executeQuery·p0.95:   52613.349 ms/op
                 executeQuery·p0.99:   52613.349 ms/op
                 executeQuery·p0.999:  52613.349 ms/op
                 executeQuery·p0.9999: 52613.349 ms/op
                 executeQuery·p1.00:   52613.349 ms/op

Iteration   5: 49996.104 ms/op
                 executeQuery·p0.00:   49996.104 ms/op
                 executeQuery·p0.50:   49996.104 ms/op
                 executeQuery·p0.90:   49996.104 ms/op
                 executeQuery·p0.95:   49996.104 ms/op
                 executeQuery·p0.99:   49996.104 ms/op
                 executeQuery·p0.999:  49996.104 ms/op
                 executeQuery·p0.9999: 49996.104 ms/op
                 executeQuery·p1.00:   49996.104 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  51506.053 ±(99.9%) 1568.336 ms/op

  Histogram, ms/op:
    [49000.000, 49500.000) = 0 
    [49500.000, 50000.000) = 1 
    [50000.000, 50500.000) = 1 
    [50500.000, 51000.000) = 2 
    [51000.000, 51500.000) = 1 
    [51500.000, 52000.000) = 2 
    [52000.000, 52500.000) = 1 
    [52500.000, 53000.000) = 1 
    [53000.000, 53500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  49996.104 ms/op
     p(50.0000) =  51640.271 ms/op
     p(90.0000) =  53096.533 ms/op
     p(95.0000) =  53150.220 ms/op
     p(99.0000) =  53150.220 ms/op
     p(99.9000) =  53150.220 ms/op
     p(99.9900) =  53150.220 ms/op
     p(99.9990) =  53150.220 ms/op
     p(99.9999) =  53150.220 ms/op
    p(100.0000) =  53150.220 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 27.78% complete, ETA 10:52:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17012.097 ms/op
# Warmup Iteration   2: 8782.873 ms/op
# Warmup Iteration   3: 9168.749 ms/op
# Warmup Iteration   4: 8401.191 ms/op
# Warmup Iteration   5: 8438.940 ms/op
Iteration   1: 8376.025 ms/op
                 executeQuery·p0.00:   8371.831 ms/op
                 executeQuery·p0.50:   8376.025 ms/op
                 executeQuery·p0.90:   8380.219 ms/op
                 executeQuery·p0.95:   8380.219 ms/op
                 executeQuery·p0.99:   8380.219 ms/op
                 executeQuery·p0.999:  8380.219 ms/op
                 executeQuery·p0.9999: 8380.219 ms/op
                 executeQuery·p1.00:   8380.219 ms/op

Iteration   2: 8514.437 ms/op
                 executeQuery·p0.00:   8388.608 ms/op
                 executeQuery·p0.50:   8514.437 ms/op
                 executeQuery·p0.90:   8640.266 ms/op
                 executeQuery·p0.95:   8640.266 ms/op
                 executeQuery·p0.99:   8640.266 ms/op
                 executeQuery·p0.999:  8640.266 ms/op
                 executeQuery·p0.9999: 8640.266 ms/op
                 executeQuery·p1.00:   8640.266 ms/op

Iteration   3: 8388.608 ms/op
                 executeQuery·p0.00:   8388.608 ms/op
                 executeQuery·p0.50:   8388.608 ms/op
                 executeQuery·p0.90:   8388.608 ms/op
                 executeQuery·p0.95:   8388.608 ms/op
                 executeQuery·p0.99:   8388.608 ms/op
                 executeQuery·p0.999:  8388.608 ms/op
                 executeQuery·p0.9999: 8388.608 ms/op
                 executeQuery·p1.00:   8388.608 ms/op

Iteration   4: 8556.380 ms/op
                 executeQuery·p0.00:   8472.494 ms/op
                 executeQuery·p0.50:   8556.380 ms/op
                 executeQuery·p0.90:   8640.266 ms/op
                 executeQuery·p0.95:   8640.266 ms/op
                 executeQuery·p0.99:   8640.266 ms/op
                 executeQuery·p0.999:  8640.266 ms/op
                 executeQuery·p0.9999: 8640.266 ms/op
                 executeQuery·p1.00:   8640.266 ms/op

Iteration   5: 8384.414 ms/op
                 executeQuery·p0.00:   8380.219 ms/op
                 executeQuery·p0.50:   8384.414 ms/op
                 executeQuery·p0.90:   8388.608 ms/op
                 executeQuery·p0.95:   8388.608 ms/op
                 executeQuery·p0.99:   8388.608 ms/op
                 executeQuery·p0.999:  8388.608 ms/op
                 executeQuery·p0.9999: 8388.608 ms/op
                 executeQuery·p1.00:   8388.608 ms/op


# Run progress: 28.33% complete, ETA 10:42:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6532.628 ms/op
# Warmup Iteration   2: 8749.318 ms/op
# Warmup Iteration   3: 7793.017 ms/op
# Warmup Iteration   4: 7793.017 ms/op
# Warmup Iteration   5: 7813.988 ms/op
Iteration   1: 7784.628 ms/op
                 executeQuery·p0.00:   7784.628 ms/op
                 executeQuery·p0.50:   7784.628 ms/op
                 executeQuery·p0.90:   7784.628 ms/op
                 executeQuery·p0.95:   7784.628 ms/op
                 executeQuery·p0.99:   7784.628 ms/op
                 executeQuery·p0.999:  7784.628 ms/op
                 executeQuery·p0.9999: 7784.628 ms/op
                 executeQuery·p1.00:   7784.628 ms/op

Iteration   2: 7772.045 ms/op
                 executeQuery·p0.00:   7767.851 ms/op
                 executeQuery·p0.50:   7772.045 ms/op
                 executeQuery·p0.90:   7776.240 ms/op
                 executeQuery·p0.95:   7776.240 ms/op
                 executeQuery·p0.99:   7776.240 ms/op
                 executeQuery·p0.999:  7776.240 ms/op
                 executeQuery·p0.9999: 7776.240 ms/op
                 executeQuery·p1.00:   7776.240 ms/op

Iteration   3: 7776.240 ms/op
                 executeQuery·p0.00:   7776.240 ms/op
                 executeQuery·p0.50:   7776.240 ms/op
                 executeQuery·p0.90:   7776.240 ms/op
                 executeQuery·p0.95:   7776.240 ms/op
                 executeQuery·p0.99:   7776.240 ms/op
                 executeQuery·p0.999:  7776.240 ms/op
                 executeQuery·p0.9999: 7776.240 ms/op
                 executeQuery·p1.00:   7776.240 ms/op

Iteration   4: 7784.628 ms/op
                 executeQuery·p0.00:   7776.240 ms/op
                 executeQuery·p0.50:   7784.628 ms/op
                 executeQuery·p0.90:   7793.017 ms/op
                 executeQuery·p0.95:   7793.017 ms/op
                 executeQuery·p0.99:   7793.017 ms/op
                 executeQuery·p0.999:  7793.017 ms/op
                 executeQuery·p0.9999: 7793.017 ms/op
                 executeQuery·p1.00:   7793.017 ms/op

Iteration   5: 7793.017 ms/op
                 executeQuery·p0.00:   7784.628 ms/op
                 executeQuery·p0.50:   7793.017 ms/op
                 executeQuery·p0.90:   7801.405 ms/op
                 executeQuery·p0.95:   7801.405 ms/op
                 executeQuery·p0.99:   7801.405 ms/op
                 executeQuery·p0.999:  7801.405 ms/op
                 executeQuery·p0.9999: 7801.405 ms/op
                 executeQuery·p1.00:   7801.405 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   8113.042 ±(99.9%) 301.770 ms/op

  Histogram, ms/op:
    [7700.000, 7800.000) = 9 
    [7800.000, 7900.000) = 1 
    [7900.000, 8000.000) = 0 
    [8000.000, 8100.000) = 0 
    [8100.000, 8200.000) = 0 
    [8200.000, 8300.000) = 0 
    [8300.000, 8400.000) = 7 
    [8400.000, 8500.000) = 1 
    [8500.000, 8600.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7767.851 ms/op
     p(50.0000) =   8086.618 ms/op
     p(90.0000) =   8623.489 ms/op
     p(95.0000) =   8640.266 ms/op
     p(99.0000) =   8640.266 ms/op
     p(99.9000) =   8640.266 ms/op
     p(99.9900) =   8640.266 ms/op
     p(99.9990) =   8640.266 ms/op
     p(99.9999) =   8640.266 ms/op
    p(100.0000) =   8640.266 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 28.89% complete, ETA 10:31:23
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16978.543 ms/op
# Warmup Iteration   2: 12952.011 ms/op
# Warmup Iteration   3: 12146.704 ms/op
# Warmup Iteration   4: 13723.763 ms/op
# Warmup Iteration   5: 12213.813 ms/op
Iteration   1: 12415.140 ms/op
                 executeQuery·p0.00:   12415.140 ms/op
                 executeQuery·p0.50:   12415.140 ms/op
                 executeQuery·p0.90:   12415.140 ms/op
                 executeQuery·p0.95:   12415.140 ms/op
                 executeQuery·p0.99:   12415.140 ms/op
                 executeQuery·p0.999:  12415.140 ms/op
                 executeQuery·p0.9999: 12415.140 ms/op
                 executeQuery·p1.00:   12415.140 ms/op

Iteration   2: 12230.590 ms/op
                 executeQuery·p0.00:   12230.590 ms/op
                 executeQuery·p0.50:   12230.590 ms/op
                 executeQuery·p0.90:   12230.590 ms/op
                 executeQuery·p0.95:   12230.590 ms/op
                 executeQuery·p0.99:   12230.590 ms/op
                 executeQuery·p0.999:  12230.590 ms/op
                 executeQuery·p0.9999: 12230.590 ms/op
                 executeQuery·p1.00:   12230.590 ms/op

Iteration   3: 12247.368 ms/op
                 executeQuery·p0.00:   12247.368 ms/op
                 executeQuery·p0.50:   12247.368 ms/op
                 executeQuery·p0.90:   12247.368 ms/op
                 executeQuery·p0.95:   12247.368 ms/op
                 executeQuery·p0.99:   12247.368 ms/op
                 executeQuery·p0.999:  12247.368 ms/op
                 executeQuery·p0.9999: 12247.368 ms/op
                 executeQuery·p1.00:   12247.368 ms/op

Iteration   4: 12247.368 ms/op
                 executeQuery·p0.00:   12247.368 ms/op
                 executeQuery·p0.50:   12247.368 ms/op
                 executeQuery·p0.90:   12247.368 ms/op
                 executeQuery·p0.95:   12247.368 ms/op
                 executeQuery·p0.99:   12247.368 ms/op
                 executeQuery·p0.999:  12247.368 ms/op
                 executeQuery·p0.9999: 12247.368 ms/op
                 executeQuery·p1.00:   12247.368 ms/op

Iteration   5: 12264.145 ms/op
                 executeQuery·p0.00:   12264.145 ms/op
                 executeQuery·p0.50:   12264.145 ms/op
                 executeQuery·p0.90:   12264.145 ms/op
                 executeQuery·p0.95:   12264.145 ms/op
                 executeQuery·p0.99:   12264.145 ms/op
                 executeQuery·p0.999:  12264.145 ms/op
                 executeQuery·p0.9999: 12264.145 ms/op
                 executeQuery·p1.00:   12264.145 ms/op


# Run progress: 29.44% complete, ETA 10:19:53
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

11207.180 ms/op
# Warmup Iteration   2: 12784.239 ms/op
# Warmup Iteration   3: 12280.922 ms/op
# Warmup Iteration   4: 16693.330 ms/op
# Warmup Iteration   5: 12213.813 ms/op
Iteration   1: 12230.590 ms/op
                 executeQuery·p0.00:   12230.590 ms/op
                 executeQuery·p0.50:   12230.590 ms/op
                 executeQuery·p0.90:   12230.590 ms/op
                 executeQuery·p0.95:   12230.590 ms/op
                 executeQuery·p0.99:   12230.590 ms/op
                 executeQuery·p0.999:  12230.590 ms/op
                 executeQuery·p0.9999: 12230.590 ms/op
                 executeQuery·p1.00:   12230.590 ms/op

Iteration   2: 12230.590 ms/op
                 executeQuery·p0.00:   12230.590 ms/op
                 executeQuery·p0.50:   12230.590 ms/op
                 executeQuery·p0.90:   12230.590 ms/op
                 executeQuery·p0.95:   12230.590 ms/op
                 executeQuery·p0.99:   12230.590 ms/op
                 executeQuery·p0.999:  12230.590 ms/op
                 executeQuery·p0.9999: 12230.590 ms/op
                 executeQuery·p1.00:   12230.590 ms/op

Iteration   3: 12515.803 ms/op
                 executeQuery·p0.00:   12515.803 ms/op
                 executeQuery·p0.50:   12515.803 ms/op
                 executeQuery·p0.90:   12515.803 ms/op
                 executeQuery·p0.95:   12515.803 ms/op
                 executeQuery·p0.99:   12515.803 ms/op
                 executeQuery·p0.999:  12515.803 ms/op
                 executeQuery·p0.9999: 12515.803 ms/op
                 executeQuery·p1.00:   12515.803 ms/op

Iteration   4: 12213.813 ms/op
                 executeQuery·p0.00:   12213.813 ms/op
                 executeQuery·p0.50:   12213.813 ms/op
                 executeQuery·p0.90:   12213.813 ms/op
                 executeQuery·p0.95:   12213.813 ms/op
                 executeQuery·p0.99:   12213.813 ms/op
                 executeQuery·p0.999:  12213.813 ms/op
                 executeQuery·p0.9999: 12213.813 ms/op
                 executeQuery·p1.00:   12213.813 ms/op

Iteration   5: 12213.813 ms/op
                 executeQuery·p0.00:   12213.813 ms/op
                 executeQuery·p0.50:   12213.813 ms/op
                 executeQuery·p0.90:   12213.813 ms/op
                 executeQuery·p0.95:   12213.813 ms/op
                 executeQuery·p0.99:   12213.813 ms/op
                 executeQuery·p0.999:  12213.813 ms/op
                 executeQuery·p0.9999: 12213.813 ms/op
                 executeQuery·p1.00:   12213.813 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  12280.922 ±(99.9%) 153.125 ms/op

  Histogram, ms/op:
    [12200.000, 12225.000) = 2 
    [12225.000, 12250.000) = 5 
    [12250.000, 12275.000) = 1 
    [12275.000, 12300.000) = 0 
    [12300.000, 12325.000) = 0 
    [12325.000, 12350.000) = 0 
    [12350.000, 12375.000) = 0 
    [12375.000, 12400.000) = 0 
    [12400.000, 12425.000) = 1 
    [12425.000, 12450.000) = 0 
    [12450.000, 12475.000) = 0 
    [12475.000, 12500.000) = 0 
    [12500.000, 12525.000) = 1 
    [12525.000, 12550.000) = 0 
    [12550.000, 12575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12213.813 ms/op
     p(50.0000) =  12238.979 ms/op
     p(90.0000) =  12505.737 ms/op
     p(95.0000) =  12515.803 ms/op
     p(99.0000) =  12515.803 ms/op
     p(99.9000) =  12515.803 ms/op
     p(99.9900) =  12515.803 ms/op
     p(99.9990) =  12515.803 ms/op
     p(99.9999) =  12515.803 ms/op
    p(100.0000) =  12515.803 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 30.00% complete, ETA 10:08:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16793.993 ms/op
# Warmup Iteration   2: 16525.558 ms/op
# Warmup Iteration   3: 14612.955 ms/op
# Warmup Iteration   4: 15921.578 ms/op
# Warmup Iteration   5: 15418.262 ms/op
Iteration   1: 14713.618 ms/op
                 executeQuery·p0.00:   14713.618 ms/op
                 executeQuery·p0.50:   14713.618 ms/op
                 executeQuery·p0.90:   14713.618 ms/op
                 executeQuery·p0.95:   14713.618 ms/op
                 executeQuery·p0.99:   14713.618 ms/op
                 executeQuery·p0.999:  14713.618 ms/op
                 executeQuery·p0.9999: 14713.618 ms/op
                 executeQuery·p1.00:   14713.618 ms/op

Iteration   2: 15334.375 ms/op
                 executeQuery·p0.00:   15334.375 ms/op
                 executeQuery·p0.50:   15334.375 ms/op
                 executeQuery·p0.90:   15334.375 ms/op
                 executeQuery·p0.95:   15334.375 ms/op
                 executeQuery·p0.99:   15334.375 ms/op
                 executeQuery·p0.999:  15334.375 ms/op
                 executeQuery·p0.9999: 15334.375 ms/op
                 executeQuery·p1.00:   15334.375 ms/op

Iteration   3: 15250.489 ms/op
                 executeQuery·p0.00:   15250.489 ms/op
                 executeQuery·p0.50:   15250.489 ms/op
                 executeQuery·p0.90:   15250.489 ms/op
                 executeQuery·p0.95:   15250.489 ms/op
                 executeQuery·p0.99:   15250.489 ms/op
                 executeQuery·p0.999:  15250.489 ms/op
                 executeQuery·p0.9999: 15250.489 ms/op
                 executeQuery·p1.00:   15250.489 ms/op

Iteration   4: 14831.059 ms/op
                 executeQuery·p0.00:   14831.059 ms/op
                 executeQuery·p0.50:   14831.059 ms/op
                 executeQuery·p0.90:   14831.059 ms/op
                 executeQuery·p0.95:   14831.059 ms/op
                 executeQuery·p0.99:   14831.059 ms/op
                 executeQuery·p0.999:  14831.059 ms/op
                 executeQuery·p0.9999: 14831.059 ms/op
                 executeQuery·p1.00:   14831.059 ms/op

Iteration   5: 14898.168 ms/op
                 executeQuery·p0.00:   14898.168 ms/op
                 executeQuery·p0.50:   14898.168 ms/op
                 executeQuery·p0.90:   14898.168 ms/op
                 executeQuery·p0.95:   14898.168 ms/op
                 executeQuery·p0.99:   14898.168 ms/op
                 executeQuery·p0.999:  14898.168 ms/op
                 executeQuery·p0.9999: 14898.168 ms/op
                 executeQuery·p1.00:   14898.168 ms/op


# Run progress: 30.56% complete, ETA 09:58:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_44756113 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_44756113() {
        this(4);
    }
    public KeyValueMap_44756113(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_44756113 aggregation_state_map = new KeyValueMap_44756113();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

14394.851 ms/op
# Warmup Iteration   2: 16441.672 ms/op
# Warmup Iteration   3: 14411.629 ms/op
# Warmup Iteration   4: 15804.137 ms/op
# Warmup Iteration   5: 14763.950 ms/op
Iteration   1: 15200.158 ms/op
                 executeQuery·p0.00:   15200.158 ms/op
                 executeQuery·p0.50:   15200.158 ms/op
                 executeQuery·p0.90:   15200.158 ms/op
                 executeQuery·p0.95:   15200.158 ms/op
                 executeQuery·p0.99:   15200.158 ms/op
                 executeQuery·p0.999:  15200.158 ms/op
                 executeQuery·p0.9999: 15200.158 ms/op
                 executeQuery·p1.00:   15200.158 ms/op

Iteration   2: 15133.049 ms/op
                 executeQuery·p0.00:   15133.049 ms/op
                 executeQuery·p0.50:   15133.049 ms/op
                 executeQuery·p0.90:   15133.049 ms/op
                 executeQuery·p0.95:   15133.049 ms/op
                 executeQuery·p0.99:   15133.049 ms/op
                 executeQuery·p0.999:  15133.049 ms/op
                 executeQuery·p0.9999: 15133.049 ms/op
                 executeQuery·p1.00:   15133.049 ms/op

Iteration   3: 14898.168 ms/op
                 executeQuery·p0.00:   14898.168 ms/op
                 executeQuery·p0.50:   14898.168 ms/op
                 executeQuery·p0.90:   14898.168 ms/op
                 executeQuery·p0.95:   14898.168 ms/op
                 executeQuery·p0.99:   14898.168 ms/op
                 executeQuery·p0.999:  14898.168 ms/op
                 executeQuery·p0.9999: 14898.168 ms/op
                 executeQuery·p1.00:   14898.168 ms/op

Iteration   4: 15485.370 ms/op
                 executeQuery·p0.00:   15485.370 ms/op
                 executeQuery·p0.50:   15485.370 ms/op
                 executeQuery·p0.90:   15485.370 ms/op
                 executeQuery·p0.95:   15485.370 ms/op
                 executeQuery·p0.99:   15485.370 ms/op
                 executeQuery·p0.999:  15485.370 ms/op
                 executeQuery·p0.9999: 15485.370 ms/op
                 executeQuery·p1.00:   15485.370 ms/op

Iteration   5: 14831.059 ms/op
                 executeQuery·p0.00:   14831.059 ms/op
                 executeQuery·p0.50:   14831.059 ms/op
                 executeQuery·p0.90:   14831.059 ms/op
                 executeQuery·p0.95:   14831.059 ms/op
                 executeQuery·p0.99:   14831.059 ms/op
                 executeQuery·p0.999:  14831.059 ms/op
                 executeQuery·p0.9999: 14831.059 ms/op
                 executeQuery·p1.00:   14831.059 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  15057.551 ±(99.9%) 388.604 ms/op

  Histogram, ms/op:
    [14700.000, 14750.000) = 1 
    [14750.000, 14800.000) = 0 
    [14800.000, 14850.000) = 2 
    [14850.000, 14900.000) = 2 
    [14900.000, 14950.000) = 0 
    [14950.000, 15000.000) = 0 
    [15000.000, 15050.000) = 0 
    [15050.000, 15100.000) = 0 
    [15100.000, 15150.000) = 1 
    [15150.000, 15200.000) = 0 
    [15200.000, 15250.000) = 1 
    [15250.000, 15300.000) = 1 
    [15300.000, 15350.000) = 1 
    [15350.000, 15400.000) = 0 
    [15400.000, 15450.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  14713.618 ms/op
     p(50.0000) =  15015.608 ms/op
     p(90.0000) =  15470.271 ms/op
     p(95.0000) =  15485.370 ms/op
     p(99.0000) =  15485.370 ms/op
     p(99.9000) =  15485.370 ms/op
     p(99.9900) =  15485.370 ms/op
     p(99.9990) =  15485.370 ms/op
     p(99.9999) =  15485.370 ms/op
    p(100.0000) =  15485.370 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 31.11% complete, ETA 09:49:00
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

60263.760 ms/op
# Warmup Iteration   2: 53083.111 ms/op
# Warmup Iteration   3: 49928.995 ms/op
# Warmup Iteration   4: 52546.241 ms/op
# Warmup Iteration   5: 52747.567 ms/op
Iteration   1: 51472.499 ms/op
                 executeQuery·p0.00:   51472.499 ms/op
                 executeQuery·p0.50:   51472.499 ms/op
                 executeQuery·p0.90:   51472.499 ms/op
                 executeQuery·p0.95:   51472.499 ms/op
                 executeQuery·p0.99:   51472.499 ms/op
                 executeQuery·p0.999:  51472.499 ms/op
                 executeQuery·p0.9999: 51472.499 ms/op
                 executeQuery·p1.00:   51472.499 ms/op

Iteration   2: 51740.934 ms/op
                 executeQuery·p0.00:   51740.934 ms/op
                 executeQuery·p0.50:   51740.934 ms/op
                 executeQuery·p0.90:   51740.934 ms/op
                 executeQuery·p0.95:   51740.934 ms/op
                 executeQuery·p0.99:   51740.934 ms/op
                 executeQuery·p0.999:  51740.934 ms/op
                 executeQuery·p0.9999: 51740.934 ms/op
                 executeQuery·p1.00:   51740.934 ms/op

Iteration   3: 51136.954 ms/op
                 executeQuery·p0.00:   51136.954 ms/op
                 executeQuery·p0.50:   51136.954 ms/op
                 executeQuery·p0.90:   51136.954 ms/op
                 executeQuery·p0.95:   51136.954 ms/op
                 executeQuery·p0.99:   51136.954 ms/op
                 executeQuery·p0.999:  51136.954 ms/op
                 executeQuery·p0.9999: 51136.954 ms/op
                 executeQuery·p1.00:   51136.954 ms/op

Iteration   4: 52546.241 ms/op
                 executeQuery·p0.00:   52546.241 ms/op
                 executeQuery·p0.50:   52546.241 ms/op
                 executeQuery·p0.90:   52546.241 ms/op
                 executeQuery·p0.95:   52546.241 ms/op
                 executeQuery·p0.99:   52546.241 ms/op
                 executeQuery·p0.999:  52546.241 ms/op
                 executeQuery·p0.9999: 52546.241 ms/op
                 executeQuery·p1.00:   52546.241 ms/op

Iteration   5: 49660.559 ms/op
                 executeQuery·p0.00:   49660.559 ms/op
                 executeQuery·p0.50:   49660.559 ms/op
                 executeQuery·p0.90:   49660.559 ms/op
                 executeQuery·p0.95:   49660.559 ms/op
                 executeQuery·p0.99:   49660.559 ms/op
                 executeQuery·p0.999:  49660.559 ms/op
                 executeQuery·p0.9999: 49660.559 ms/op
                 executeQuery·p1.00:   49660.559 ms/op


# Run progress: 31.67% complete, ETA 09:56:34
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_44756113 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_44756113() {
        this(4);
    }
    public KeyValueMap_44756113(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_44756113 aggregation_state_map = new KeyValueMap_44756113();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

53485.765 ms/op
# Warmup Iteration   2: 53619.982 ms/op
# Warmup Iteration   3: 60062.433 ms/op
# Warmup Iteration   4: 50935.628 ms/op
# Warmup Iteration   5: 51942.261 ms/op
Iteration   1: 51271.172 ms/op
                 executeQuery·p0.00:   51271.172 ms/op
                 executeQuery·p0.50:   51271.172 ms/op
                 executeQuery·p0.90:   51271.172 ms/op
                 executeQuery·p0.95:   51271.172 ms/op
                 executeQuery·p0.99:   51271.172 ms/op
                 executeQuery·p0.999:  51271.172 ms/op
                 executeQuery·p0.9999: 51271.172 ms/op
                 executeQuery·p1.00:   51271.172 ms/op

Iteration   2: 43419.435 ms/op
                 executeQuery·p0.00:   43419.435 ms/op
                 executeQuery·p0.50:   43419.435 ms/op
                 executeQuery·p0.90:   43419.435 ms/op
                 executeQuery·p0.95:   43419.435 ms/op
                 executeQuery·p0.99:   43419.435 ms/op
                 executeQuery·p0.999:  43419.435 ms/op
                 executeQuery·p0.9999: 43419.435 ms/op
                 executeQuery·p1.00:   43419.435 ms/op

Iteration   3: 50063.213 ms/op
                 executeQuery·p0.00:   50063.213 ms/op
                 executeQuery·p0.50:   50063.213 ms/op
                 executeQuery·p0.90:   50063.213 ms/op
                 executeQuery·p0.95:   50063.213 ms/op
                 executeQuery·p0.99:   50063.213 ms/op
                 executeQuery·p0.999:  50063.213 ms/op
                 executeQuery·p0.9999: 50063.213 ms/op
                 executeQuery·p1.00:   50063.213 ms/op

Iteration   4: 52479.132 ms/op
                 executeQuery·p0.00:   52479.132 ms/op
                 executeQuery·p0.50:   52479.132 ms/op
                 executeQuery·p0.90:   52479.132 ms/op
                 executeQuery·p0.95:   52479.132 ms/op
                 executeQuery·p0.99:   52479.132 ms/op
                 executeQuery·p0.999:  52479.132 ms/op
                 executeQuery·p0.9999: 52479.132 ms/op
                 executeQuery·p1.00:   52479.132 ms/op

Iteration   5: 50063.213 ms/op
                 executeQuery·p0.00:   50063.213 ms/op
                 executeQuery·p0.50:   50063.213 ms/op
                 executeQuery·p0.90:   50063.213 ms/op
                 executeQuery·p0.95:   50063.213 ms/op
                 executeQuery·p0.99:   50063.213 ms/op
                 executeQuery·p0.999:  50063.213 ms/op
                 executeQuery·p0.9999: 50063.213 ms/op
                 executeQuery·p1.00:   50063.213 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  50385.335 ±(99.9%) 3989.804 ms/op

  Histogram, ms/op:
    [43000.000, 44000.000) = 1 
    [44000.000, 45000.000) = 0 
    [45000.000, 46000.000) = 0 
    [46000.000, 47000.000) = 0 
    [47000.000, 48000.000) = 0 
    [48000.000, 49000.000) = 0 
    [49000.000, 50000.000) = 1 
    [50000.000, 51000.000) = 2 
    [51000.000, 52000.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =  43419.435 ms/op
     p(50.0000) =  51204.063 ms/op
     p(90.0000) =  52539.530 ms/op
     p(95.0000) =  52546.241 ms/op
     p(99.0000) =  52546.241 ms/op
     p(99.9000) =  52546.241 ms/op
     p(99.9900) =  52546.241 ms/op
     p(99.9990) =  52546.241 ms/op
     p(99.9999) =  52546.241 ms/op
    p(100.0000) =  52546.241 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 32.22% complete, ETA 10:03:32
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

107239.965 ms/op
# Warmup Iteration   2: 101065.949 ms/op
# Warmup Iteration   3: 99455.336 ms/op
# Warmup Iteration   4: 103750.304 ms/op
# Warmup Iteration   5: 99857.990 ms/op
Iteration   1: 99186.901 ms/op
                 executeQuery·p0.00:   99186.901 ms/op
                 executeQuery·p0.50:   99186.901 ms/op
                 executeQuery·p0.90:   99186.901 ms/op
                 executeQuery·p0.95:   99186.901 ms/op
                 executeQuery·p0.99:   99186.901 ms/op
                 executeQuery·p0.999:  99186.901 ms/op
                 executeQuery·p0.9999: 99186.901 ms/op
                 executeQuery·p1.00:   99186.901 ms/op

Iteration   2: 103213.433 ms/op
                 executeQuery·p0.00:   103213.433 ms/op
                 executeQuery·p0.50:   103213.433 ms/op
                 executeQuery·p0.90:   103213.433 ms/op
                 executeQuery·p0.95:   103213.433 ms/op
                 executeQuery·p0.99:   103213.433 ms/op
                 executeQuery·p0.999:  103213.433 ms/op
                 executeQuery·p0.9999: 103213.433 ms/op
                 executeQuery·p1.00:   103213.433 ms/op

Iteration   3: 100394.861 ms/op
                 executeQuery·p0.00:   100394.861 ms/op
                 executeQuery·p0.50:   100394.861 ms/op
                 executeQuery·p0.90:   100394.861 ms/op
                 executeQuery·p0.95:   100394.861 ms/op
                 executeQuery·p0.99:   100394.861 ms/op
                 executeQuery·p0.999:  100394.861 ms/op
                 executeQuery·p0.9999: 100394.861 ms/op
                 executeQuery·p1.00:   100394.861 ms/op

Iteration   4: 98784.248 ms/op
                 executeQuery·p0.00:   98784.248 ms/op
                 executeQuery·p0.50:   98784.248 ms/op
                 executeQuery·p0.90:   98784.248 ms/op
                 executeQuery·p0.95:   98784.248 ms/op
                 executeQuery·p0.99:   98784.248 ms/op
                 executeQuery·p0.999:  98784.248 ms/op
                 executeQuery·p0.9999: 98784.248 ms/op
                 executeQuery·p1.00:   98784.248 ms/op

Iteration   5: 100394.861 ms/op
                 executeQuery·p0.00:   100394.861 ms/op
                 executeQuery·p0.50:   100394.861 ms/op
                 executeQuery·p0.90:   100394.861 ms/op
                 executeQuery·p0.95:   100394.861 ms/op
                 executeQuery·p0.99:   100394.861 ms/op
                 executeQuery·p0.999:  100394.861 ms/op
                 executeQuery·p0.9999: 100394.861 ms/op
                 executeQuery·p1.00:   100394.861 ms/op


# Run progress: 32.78% complete, ETA 10:37:53
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_187034128 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_187034128() {
        this(4);
    }
    public KeyValueMap_187034128(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_187034128 aggregation_state_map = new KeyValueMap_187034128();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

100931.731 ms/op
# Warmup Iteration   2: 108582.142 ms/op
# Warmup Iteration   3: 99589.554 ms/op
# Warmup Iteration   4: 99723.772 ms/op
# Warmup Iteration   5: 101334.385 ms/op
Iteration   1: 97307.853 ms/op
                 executeQuery·p0.00:   97307.853 ms/op
                 executeQuery·p0.50:   97307.853 ms/op
                 executeQuery·p0.90:   97307.853 ms/op
                 executeQuery·p0.95:   97307.853 ms/op
                 executeQuery·p0.99:   97307.853 ms/op
                 executeQuery·p0.999:  97307.853 ms/op
                 executeQuery·p0.9999: 97307.853 ms/op
                 executeQuery·p1.00:   97307.853 ms/op

Iteration   2: 102408.126 ms/op
                 executeQuery·p0.00:   102408.126 ms/op
                 executeQuery·p0.50:   102408.126 ms/op
                 executeQuery·p0.90:   102408.126 ms/op
                 executeQuery·p0.95:   102408.126 ms/op
                 executeQuery·p0.99:   102408.126 ms/op
                 executeQuery·p0.999:  102408.126 ms/op
                 executeQuery·p0.9999: 102408.126 ms/op
                 executeQuery·p1.00:   102408.126 ms/op

Iteration   3: 104689.828 ms/op
                 executeQuery·p0.00:   104689.828 ms/op
                 executeQuery·p0.50:   104689.828 ms/op
                 executeQuery·p0.90:   104689.828 ms/op
                 executeQuery·p0.95:   104689.828 ms/op
                 executeQuery·p0.99:   104689.828 ms/op
                 executeQuery·p0.999:  104689.828 ms/op
                 executeQuery·p0.9999: 104689.828 ms/op
                 executeQuery·p1.00:   104689.828 ms/op

Iteration   4: 96770.982 ms/op
                 executeQuery·p0.00:   96770.982 ms/op
                 executeQuery·p0.50:   96770.982 ms/op
                 executeQuery·p0.90:   96770.982 ms/op
                 executeQuery·p0.95:   96770.982 ms/op
                 executeQuery·p0.99:   96770.982 ms/op
                 executeQuery·p0.999:  96770.982 ms/op
                 executeQuery·p0.9999: 96770.982 ms/op
                 executeQuery·p1.00:   96770.982 ms/op

Iteration   5: 102273.909 ms/op
                 executeQuery·p0.00:   102273.909 ms/op
                 executeQuery·p0.50:   102273.909 ms/op
                 executeQuery·p0.90:   102273.909 ms/op
                 executeQuery·p0.95:   102273.909 ms/op
                 executeQuery·p0.99:   102273.909 ms/op
                 executeQuery·p0.999:  102273.909 ms/op
                 executeQuery·p0.9999: 102273.909 ms/op
                 executeQuery·p1.00:   102273.909 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean = 100542.500 ±(99.9%) 3918.940 ms/op

  Histogram, ms/op:
    [ 96000.000,  96500.000) = 0 
    [ 96500.000,  97000.000) = 1 
    [ 97000.000,  97500.000) = 1 
    [ 97500.000,  98000.000) = 0 
    [ 98000.000,  98500.000) = 0 
    [ 98500.000,  99000.000) = 1 
    [ 99000.000,  99500.000) = 1 
    [ 99500.000, 100000.000) = 0 
    [100000.000, 100500.000) = 2 
    [100500.000, 101000.000) = 0 
    [101000.000, 101500.000) = 0 
    [101500.000, 102000.000) = 0 
    [102000.000, 102500.000) = 2 
    [102500.000, 103000.000) = 0 
    [103000.000, 103500.000) = 1 
    [103500.000, 104000.000) = 0 
    [104000.000, 104500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  96770.982 ms/op
     p(50.0000) = 100394.861 ms/op
     p(90.0000) = 104542.188 ms/op
     p(95.0000) = 104689.828 ms/op
     p(99.0000) = 104689.828 ms/op
     p(99.9000) = 104689.828 ms/op
     p(99.9900) = 104689.828 ms/op
     p(99.9990) = 104689.828 ms/op
     p(99.9999) = 104689.828 ms/op
    p(100.0000) = 104689.828 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 33.33% complete, ETA 11:09:43
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

83.384 ±(99.9%) 17.020 ms/op
# Warmup Iteration   2: 77.727 ±(99.9%) 0.673 ms/op
# Warmup Iteration   3: 78.537 ±(99.9%) 0.340 ms/op
# Warmup Iteration   4: 78.295 ±(99.9%) 0.368 ms/op
# Warmup Iteration   5: 79.190 ±(99.9%) 0.365 ms/op
Iteration   1: 78.374 ±(99.9%) 0.570 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   78.381 ms/op
                 executeFilterQuery·p0.90:   80.400 ms/op
                 executeFilterQuery·p0.95:   81.225 ms/op
                 executeFilterQuery·p0.99:   86.217 ms/op
                 executeFilterQuery·p0.999:  87.818 ms/op
                 executeFilterQuery·p0.9999: 87.818 ms/op
                 executeFilterQuery·p1.00:   87.818 ms/op

Iteration   2: 75.638 ±(99.9%) 0.433 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   75.235 ms/op
                 executeFilterQuery·p0.90:   77.857 ms/op
                 executeFilterQuery·p0.95:   78.905 ms/op
                 executeFilterQuery·p0.99:   79.257 ms/op
                 executeFilterQuery·p0.999:  79.299 ms/op
                 executeFilterQuery·p0.9999: 79.299 ms/op
                 executeFilterQuery·p1.00:   79.299 ms/op

Iteration   3: 75.390 ±(99.9%) 0.391 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   74.842 ms/op
                 executeFilterQuery·p0.90:   77.595 ms/op
                 executeFilterQuery·p0.95:   77.909 ms/op
                 executeFilterQuery·p0.99:   79.257 ms/op
                 executeFilterQuery·p0.999:  79.430 ms/op
                 executeFilterQuery·p0.9999: 79.430 ms/op
                 executeFilterQuery·p1.00:   79.430 ms/op

Iteration   4: 76.066 ±(99.9%) 0.515 ms/op
                 executeFilterQuery·p0.00:   73.400 ms/op
                 executeFilterQuery·p0.50:   75.760 ms/op
                 executeFilterQuery·p0.90:   78.643 ms/op
                 executeFilterQuery·p0.95:   79.358 ms/op
                 executeFilterQuery·p0.99:   81.726 ms/op
                 executeFilterQuery·p0.999:  82.051 ms/op
                 executeFilterQuery·p0.9999: 82.051 ms/op
                 executeFilterQuery·p1.00:   82.051 ms/op

Iteration   5: 76.030 ±(99.9%) 0.486 ms/op
                 executeFilterQuery·p0.00:   73.794 ms/op
                 executeFilterQuery·p0.50:   75.760 ms/op
                 executeFilterQuery·p0.90:   77.831 ms/op
                 executeFilterQuery·p0.95:   79.325 ms/op
                 executeFilterQuery·p0.99:   84.678 ms/op
                 executeFilterQuery·p0.999:  86.901 ms/op
                 executeFilterQuery·p0.9999: 86.901 ms/op
                 executeFilterQuery·p1.00:   86.901 ms/op


# Run progress: 33.89% complete, ETA 10:56:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

79.056 ±(99.9%) 2.894 ms/op
# Warmup Iteration   2: 76.378 ±(99.9%) 0.598 ms/op
# Warmup Iteration   3: 77.635 ±(99.9%) 0.345 ms/op
# Warmup Iteration   4: 77.489 ±(99.9%) 0.338 ms/op
# Warmup Iteration   5: 77.796 ±(99.9%) 0.258 ms/op
Iteration   1: 77.425 ±(99.9%) 0.619 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   77.857 ms/op
                 executeFilterQuery·p0.90:   79.194 ms/op
                 executeFilterQuery·p0.95:   79.639 ms/op
                 executeFilterQuery·p0.99:   85.690 ms/op
                 executeFilterQuery·p0.999:  87.818 ms/op
                 executeFilterQuery·p0.9999: 87.818 ms/op
                 executeFilterQuery·p1.00:   87.818 ms/op

Iteration   2: 74.540 ±(99.9%) 0.459 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   74.056 ms/op
                 executeFilterQuery·p0.90:   76.939 ms/op
                 executeFilterQuery·p0.95:   77.988 ms/op
                 executeFilterQuery·p0.99:   79.036 ms/op
                 executeFilterQuery·p0.999:  79.036 ms/op
                 executeFilterQuery·p0.9999: 79.036 ms/op
                 executeFilterQuery·p1.00:   79.036 ms/op

Iteration   3: 75.923 ±(99.9%) 0.479 ms/op
                 executeFilterQuery·p0.00:   73.400 ms/op
                 executeFilterQuery·p0.50:   75.891 ms/op
                 executeFilterQuery·p0.90:   78.381 ms/op
                 executeFilterQuery·p0.95:   79.167 ms/op
                 executeFilterQuery·p0.99:   79.519 ms/op
                 executeFilterQuery·p0.999:  79.561 ms/op
                 executeFilterQuery·p0.9999: 79.561 ms/op
                 executeFilterQuery·p1.00:   79.561 ms/op

Iteration   4: 75.418 ±(99.9%) 0.492 ms/op
                 executeFilterQuery·p0.00:   71.303 ms/op
                 executeFilterQuery·p0.50:   74.842 ms/op
                 executeFilterQuery·p0.90:   78.080 ms/op
                 executeFilterQuery·p0.95:   78.951 ms/op
                 executeFilterQuery·p0.99:   79.869 ms/op
                 executeFilterQuery·p0.999:  80.085 ms/op
                 executeFilterQuery·p0.9999: 80.085 ms/op
                 executeFilterQuery·p1.00:   80.085 ms/op

Iteration   5: 75.706 ±(99.9%) 0.472 ms/op
                 executeFilterQuery·p0.00:   73.400 ms/op
                 executeFilterQuery·p0.50:   75.235 ms/op
                 executeFilterQuery·p0.90:   77.857 ms/op
                 executeFilterQuery·p0.95:   78.302 ms/op
                 executeFilterQuery·p0.99:   84.054 ms/op
                 executeFilterQuery·p0.999:  84.935 ms/op
                 executeFilterQuery·p0.9999: 84.935 ms/op
                 executeFilterQuery·p1.00:   84.935 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1303
  mean =     76.033 ±(99.9%) 0.179 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 0 
    [71.250, 72.500) = 2 
    [72.500, 73.750) = 113 
    [73.750, 75.000) = 376 
    [75.000, 76.250) = 281 
    [76.250, 77.500) = 211 
    [77.500, 78.750) = 197 
    [78.750, 80.000) = 98 
    [80.000, 81.250) = 14 
    [81.250, 82.500) = 7 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 1 
    [85.000, 86.250) = 0 
    [86.250, 87.500) = 1 
    [87.500, 88.750) = 2 

  Percentiles, ms/op:
      p(0.0000) =     71.303 ms/op
     p(50.0000) =     75.760 ms/op
     p(90.0000) =     78.643 ms/op
     p(95.0000) =     79.430 ms/op
     p(99.0000) =     81.002 ms/op
     p(99.9000) =     87.818 ms/op
     p(99.9900) =     87.818 ms/op
     p(99.9990) =     87.818 ms/op
     p(99.9999) =     87.818 ms/op
    p(100.0000) =     87.818 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 34.44% complete, ETA 10:43:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

84.115 ±(99.9%) 16.972 ms/op
# Warmup Iteration   2: 76.634 ±(99.9%) 0.591 ms/op
# Warmup Iteration   3: 77.073 ±(99.9%) 0.245 ms/op
# Warmup Iteration   4: 78.256 ±(99.9%) 0.324 ms/op
# Warmup Iteration   5: 77.949 ±(99.9%) 0.461 ms/op
Iteration   1: 76.020 ±(99.9%) 0.469 ms/op
                 executeFilterQuery·p0.00:   74.056 ms/op
                 executeFilterQuery·p0.50:   75.629 ms/op
                 executeFilterQuery·p0.90:   78.643 ms/op
                 executeFilterQuery·p0.95:   78.905 ms/op
                 executeFilterQuery·p0.99:   80.054 ms/op
                 executeFilterQuery·p0.999:  80.347 ms/op
                 executeFilterQuery·p0.9999: 80.347 ms/op
                 executeFilterQuery·p1.00:   80.347 ms/op

Iteration   2: 76.572 ±(99.9%) 0.413 ms/op
                 executeFilterQuery·p0.00:   74.318 ms/op
                 executeFilterQuery·p0.50:   76.153 ms/op
                 executeFilterQuery·p0.90:   78.774 ms/op
                 executeFilterQuery·p0.95:   79.102 ms/op
                 executeFilterQuery·p0.99:   80.098 ms/op
                 executeFilterQuery·p0.999:  80.216 ms/op
                 executeFilterQuery·p0.9999: 80.216 ms/op
                 executeFilterQuery·p1.00:   80.216 ms/op

Iteration   3: 76.070 ±(99.9%) 0.605 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   75.891 ms/op
                 executeFilterQuery·p0.90:   78.905 ms/op
                 executeFilterQuery·p0.95:   79.167 ms/op
                 executeFilterQuery·p0.99:   81.092 ms/op
                 executeFilterQuery·p0.999:  81.134 ms/op
                 executeFilterQuery·p0.9999: 81.134 ms/op
                 executeFilterQuery·p1.00:   81.134 ms/op

Iteration   4: 75.357 ±(99.9%) 0.551 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   74.711 ms/op
                 executeFilterQuery·p0.90:   77.332 ms/op
                 executeFilterQuery·p0.95:   78.034 ms/op
                 executeFilterQuery·p0.99:   84.745 ms/op
                 executeFilterQuery·p0.999:  87.556 ms/op
                 executeFilterQuery·p0.9999: 87.556 ms/op
                 executeFilterQuery·p1.00:   87.556 ms/op

Iteration   5: 75.067 ±(99.9%) 0.339 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   74.842 ms/op
                 executeFilterQuery·p0.90:   76.546 ms/op
                 executeFilterQuery·p0.95:   76.979 ms/op
                 executeFilterQuery·p0.99:   78.116 ms/op
                 executeFilterQuery·p0.999:  78.250 ms/op
                 executeFilterQuery·p0.9999: 78.250 ms/op
                 executeFilterQuery·p1.00:   78.250 ms/op


# Run progress: 35.00% complete, ETA 10:31:25
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

79.403 ±(99.9%) 2.806 ms/op
# Warmup Iteration   2: 77.105 ±(99.9%) 0.581 ms/op
# Warmup Iteration   3: 77.908 ±(99.9%) 0.325 ms/op
# Warmup Iteration   4: 78.533 ±(99.9%) 0.337 ms/op
# Warmup Iteration   5: 78.591 ±(99.9%) 0.504 ms/op
Iteration   1: 75.770 ±(99.9%) 0.487 ms/op
                 executeFilterQuery·p0.00:   73.400 ms/op
                 executeFilterQuery·p0.50:   75.891 ms/op
                 executeFilterQuery·p0.90:   78.224 ms/op
                 executeFilterQuery·p0.95:   79.089 ms/op
                 executeFilterQuery·p0.99:   79.697 ms/op
                 executeFilterQuery·p0.999:  79.823 ms/op
                 executeFilterQuery·p0.9999: 79.823 ms/op
                 executeFilterQuery·p1.00:   79.823 ms/op

Iteration   2: 75.813 ±(99.9%) 0.577 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   75.891 ms/op
                 executeFilterQuery·p0.90:   78.381 ms/op
                 executeFilterQuery·p0.95:   79.482 ms/op
                 executeFilterQuery·p0.99:   80.305 ms/op
                 executeFilterQuery·p0.999:  80.347 ms/op
                 executeFilterQuery·p0.9999: 80.347 ms/op
                 executeFilterQuery·p1.00:   80.347 ms/op

Iteration   3: 76.676 ±(99.9%) 0.588 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   76.546 ms/op
                 executeFilterQuery·p0.90:   79.692 ms/op
                 executeFilterQuery·p0.95:   79.888 ms/op
                 executeFilterQuery·p0.99:   80.793 ms/op
                 executeFilterQuery·p0.999:  80.871 ms/op
                 executeFilterQuery·p0.9999: 80.871 ms/op
                 executeFilterQuery·p1.00:   80.871 ms/op

Iteration   4: 76.935 ±(99.9%) 0.710 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   76.677 ms/op
                 executeFilterQuery·p0.90:   80.085 ms/op
                 executeFilterQuery·p0.95:   80.478 ms/op
                 executeFilterQuery·p0.99:   84.397 ms/op
                 executeFilterQuery·p0.999:  85.852 ms/op
                 executeFilterQuery·p0.9999: 85.852 ms/op
                 executeFilterQuery·p1.00:   85.852 ms/op

Iteration   5: 75.168 ±(99.9%) 0.345 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   74.973 ms/op
                 executeFilterQuery·p0.90:   76.808 ms/op
                 executeFilterQuery·p0.95:   76.939 ms/op
                 executeFilterQuery·p0.99:   78.111 ms/op
                 executeFilterQuery·p0.999:  78.512 ms/op
                 executeFilterQuery·p0.9999: 78.512 ms/op
                 executeFilterQuery·p1.00:   78.512 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1309
  mean =     75.938 ±(99.9%) 0.170 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 0 
    [71.250, 72.500) = 0 
    [72.500, 73.750) = 168 
    [73.750, 75.000) = 314 
    [75.000, 76.250) = 314 
    [76.250, 77.500) = 268 
    [77.500, 78.750) = 117 
    [78.750, 80.000) = 99 
    [80.000, 81.250) = 27 
    [81.250, 82.500) = 0 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 0 
    [85.000, 86.250) = 1 
    [86.250, 87.500) = 0 
    [87.500, 88.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =     73.007 ms/op
     p(50.0000) =     75.760 ms/op
     p(90.0000) =     78.643 ms/op
     p(95.0000) =     79.299 ms/op
     p(99.0000) =     80.478 ms/op
     p(99.9000) =     87.028 ms/op
     p(99.9900) =     87.556 ms/op
     p(99.9990) =     87.556 ms/op
     p(99.9999) =     87.556 ms/op
    p(100.0000) =     87.556 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 35.56% complete, ETA 10:19:20
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

85.221 ±(99.9%) 17.366 ms/op
# Warmup Iteration   2: 78.746 ±(99.9%) 0.707 ms/op
# Warmup Iteration   3: 80.629 ±(99.9%) 0.386 ms/op
# Warmup Iteration   4: 80.606 ±(99.9%) 0.338 ms/op
# Warmup Iteration   5: 80.068 ±(99.9%) 0.221 ms/op
Iteration   1: 77.844 ±(99.9%) 0.635 ms/op
                 executeFilterQuery·p0.00:   75.235 ms/op
                 executeFilterQuery·p0.50:   77.988 ms/op
                 executeFilterQuery·p0.90:   80.111 ms/op
                 executeFilterQuery·p0.95:   80.347 ms/op
                 executeFilterQuery·p0.99:   87.567 ms/op
                 executeFilterQuery·p0.999:  89.915 ms/op
                 executeFilterQuery·p0.9999: 89.915 ms/op
                 executeFilterQuery·p1.00:   89.915 ms/op

Iteration   2: 77.055 ±(99.9%) 0.559 ms/op
                 executeFilterQuery·p0.00:   74.318 ms/op
                 executeFilterQuery·p0.50:   76.415 ms/op
                 executeFilterQuery·p0.90:   79.823 ms/op
                 executeFilterQuery·p0.95:   80.550 ms/op
                 executeFilterQuery·p0.99:   83.764 ms/op
                 executeFilterQuery·p0.999:  84.410 ms/op
                 executeFilterQuery·p0.9999: 84.410 ms/op
                 executeFilterQuery·p1.00:   84.410 ms/op

Iteration   3: 77.201 ±(99.9%) 0.504 ms/op
                 executeFilterQuery·p0.00:   75.235 ms/op
                 executeFilterQuery·p0.50:   76.743 ms/op
                 executeFilterQuery·p0.90:   79.967 ms/op
                 executeFilterQuery·p0.95:   80.360 ms/op
                 executeFilterQuery·p0.99:   81.468 ms/op
                 executeFilterQuery·p0.999:  81.658 ms/op
                 executeFilterQuery·p0.9999: 81.658 ms/op
                 executeFilterQuery·p1.00:   81.658 ms/op

Iteration   4: 77.721 ±(99.9%) 0.560 ms/op
                 executeFilterQuery·p0.00:   74.973 ms/op
                 executeFilterQuery·p0.50:   77.005 ms/op
                 executeFilterQuery·p0.90:   80.347 ms/op
                 executeFilterQuery·p0.95:   80.609 ms/op
                 executeFilterQuery·p0.99:   84.209 ms/op
                 executeFilterQuery·p0.999:  85.197 ms/op
                 executeFilterQuery·p0.9999: 85.197 ms/op
                 executeFilterQuery·p1.00:   85.197 ms/op

Iteration   5: 75.925 ±(99.9%) 0.502 ms/op
                 executeFilterQuery·p0.00:   74.449 ms/op
                 executeFilterQuery·p0.50:   75.235 ms/op
                 executeFilterQuery·p0.90:   77.831 ms/op
                 executeFilterQuery·p0.95:   78.643 ms/op
                 executeFilterQuery·p0.99:   87.079 ms/op
                 executeFilterQuery·p0.999:  90.309 ms/op
                 executeFilterQuery·p0.9999: 90.309 ms/op
                 executeFilterQuery·p1.00:   90.309 ms/op


# Run progress: 36.11% complete, ETA 10:07:34
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

80.296 ±(99.9%) 3.218 ms/op
# Warmup Iteration   2: 78.411 ±(99.9%) 0.572 ms/op
# Warmup Iteration   3: 79.907 ±(99.9%) 0.314 ms/op
# Warmup Iteration   4: 80.009 ±(99.9%) 0.298 ms/op
# Warmup Iteration   5: 79.730 ±(99.9%) 0.247 ms/op
Iteration   1: 79.956 ±(99.9%) 0.444 ms/op
                 executeFilterQuery·p0.00:   75.497 ms/op
                 executeFilterQuery·p0.50:   80.085 ms/op
                 executeFilterQuery·p0.90:   81.396 ms/op
                 executeFilterQuery·p0.95:   82.471 ms/op
                 executeFilterQuery·p0.99:   86.549 ms/op
                 executeFilterQuery·p0.999:  87.556 ms/op
                 executeFilterQuery·p0.9999: 87.556 ms/op
                 executeFilterQuery·p1.00:   87.556 ms/op

Iteration   2: 76.559 ±(99.9%) 0.405 ms/op
                 executeFilterQuery·p0.00:   74.842 ms/op
                 executeFilterQuery·p0.50:   76.284 ms/op
                 executeFilterQuery·p0.90:   78.512 ms/op
                 executeFilterQuery·p0.95:   79.299 ms/op
                 executeFilterQuery·p0.99:   80.831 ms/op
                 executeFilterQuery·p0.999:  80.871 ms/op
                 executeFilterQuery·p0.9999: 80.871 ms/op
                 executeFilterQuery·p1.00:   80.871 ms/op

Iteration   3: 77.060 ±(99.9%) 0.420 ms/op
                 executeFilterQuery·p0.00:   74.973 ms/op
                 executeFilterQuery·p0.50:   76.546 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   80.019 ms/op
                 executeFilterQuery·p0.99:   80.963 ms/op
                 executeFilterQuery·p0.999:  81.002 ms/op
                 executeFilterQuery·p0.9999: 81.002 ms/op
                 executeFilterQuery·p1.00:   81.002 ms/op

Iteration   4: 76.697 ±(99.9%) 0.435 ms/op
                 executeFilterQuery·p0.00:   74.973 ms/op
                 executeFilterQuery·p0.50:   76.284 ms/op
                 executeFilterQuery·p0.90:   79.154 ms/op
                 executeFilterQuery·p0.95:   79.489 ms/op
                 executeFilterQuery·p0.99:   80.840 ms/op
                 executeFilterQuery·p0.999:  81.002 ms/op
                 executeFilterQuery·p0.9999: 81.002 ms/op
                 executeFilterQuery·p1.00:   81.002 ms/op

Iteration   5: 76.525 ±(99.9%) 0.429 ms/op
                 executeFilterQuery·p0.00:   74.580 ms/op
                 executeFilterQuery·p0.50:   76.284 ms/op
                 executeFilterQuery·p0.90:   79.233 ms/op
                 executeFilterQuery·p0.95:   79.751 ms/op
                 executeFilterQuery·p0.99:   81.143 ms/op
                 executeFilterQuery·p0.999:  81.265 ms/op
                 executeFilterQuery·p0.9999: 81.265 ms/op
                 executeFilterQuery·p1.00:   81.265 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1284
  mean =     77.237 ±(99.9%) 0.180 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 36 
    [ 75.000,  77.500) = 787 
    [ 77.500,  80.000) = 322 
    [ 80.000,  82.500) = 129 
    [ 82.500,  85.000) = 6 
    [ 85.000,  87.500) = 1 
    [ 87.500,  90.000) = 2 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     74.318 ms/op
     p(50.0000) =     76.546 ms/op
     p(90.0000) =     80.085 ms/op
     p(95.0000) =     80.478 ms/op
     p(99.0000) =     82.051 ms/op
     p(99.9000) =     90.197 ms/op
     p(99.9900) =     90.309 ms/op
     p(99.9990) =     90.309 ms/op
     p(99.9999) =     90.309 ms/op
    p(100.0000) =     90.309 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 36.67% complete, ETA 09:56:07
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1763.705 ±(99.9%) 6466.946 ms/op
# Warmup Iteration   2: 737.299 ±(99.9%) 12.915 ms/op
# Warmup Iteration   3: 739.695 ±(99.9%) 17.051 ms/op
# Warmup Iteration   4: 760.143 ±(99.9%) 6.163 ms/op
# Warmup Iteration   5: 756.323 ±(99.9%) 6.318 ms/op
Iteration   1: 756.323 ±(99.9%) 5.175 ms/op
                 executeFilterQuery·p0.00:   750.780 ms/op
                 executeFilterQuery·p0.50:   753.926 ms/op
                 executeFilterQuery·p0.90:   762.315 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op

Iteration   2: 748.309 ±(99.9%) 21.922 ms/op
                 executeFilterQuery·p0.00:   716.177 ms/op
                 executeFilterQuery·p0.50:   757.596 ms/op
                 executeFilterQuery·p0.90:   767.558 ms/op
                 executeFilterQuery·p0.95:   768.606 ms/op
                 executeFilterQuery·p0.99:   768.606 ms/op
                 executeFilterQuery·p0.999:  768.606 ms/op
                 executeFilterQuery·p0.9999: 768.606 ms/op
                 executeFilterQuery·p1.00:   768.606 ms/op

Iteration   3: 726.064 ±(99.9%) 6.524 ms/op
                 executeFilterQuery·p0.00:   717.226 ms/op
                 executeFilterQuery·p0.50:   725.090 ms/op
                 executeFilterQuery·p0.90:   734.003 ms/op
                 executeFilterQuery·p0.95:   734.003 ms/op
                 executeFilterQuery·p0.99:   734.003 ms/op
                 executeFilterQuery·p0.999:  734.003 ms/op
                 executeFilterQuery·p0.9999: 734.003 ms/op
                 executeFilterQuery·p1.00:   734.003 ms/op

Iteration   4: 726.364 ±(99.9%) 5.821 ms/op
                 executeFilterQuery·p0.00:   718.275 ms/op
                 executeFilterQuery·p0.50:   727.187 ms/op
                 executeFilterQuery·p0.90:   734.003 ms/op
                 executeFilterQuery·p0.95:   735.052 ms/op
                 executeFilterQuery·p0.99:   735.052 ms/op
                 executeFilterQuery·p0.999:  735.052 ms/op
                 executeFilterQuery·p0.9999: 735.052 ms/op
                 executeFilterQuery·p1.00:   735.052 ms/op

Iteration   5: 727.113 ±(99.9%) 5.790 ms/op
                 executeFilterQuery·p0.00:   719.323 ms/op
                 executeFilterQuery·p0.50:   728.760 ms/op
                 executeFilterQuery·p0.90:   732.955 ms/op
                 executeFilterQuery·p0.95:   732.955 ms/op
                 executeFilterQuery·p0.99:   732.955 ms/op
                 executeFilterQuery·p0.999:  732.955 ms/op
                 executeFilterQuery·p0.9999: 732.955 ms/op
                 executeFilterQuery·p1.00:   732.955 ms/op


# Run progress: 37.22% complete, ETA 09:45:04
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

760.892 ±(99.9%) 53.602 ms/op
# Warmup Iteration   2: 731.831 ±(99.9%) 17.554 ms/op
# Warmup Iteration   3: 749.582 ±(99.9%) 12.062 ms/op
# Warmup Iteration   4: 757.521 ±(99.9%) 8.412 ms/op
# Warmup Iteration   5: 764.262 ±(99.9%) 4.636 ms/op
Iteration   1: 761.191 ±(99.9%) 8.002 ms/op
                 executeFilterQuery·p0.00:   743.440 ms/op
                 executeFilterQuery·p0.50:   761.266 ms/op
                 executeFilterQuery·p0.90:   768.082 ms/op
                 executeFilterQuery·p0.95:   768.606 ms/op
                 executeFilterQuery·p0.99:   768.606 ms/op
                 executeFilterQuery·p0.999:  768.606 ms/op
                 executeFilterQuery·p0.9999: 768.606 ms/op
                 executeFilterQuery·p1.00:   768.606 ms/op

Iteration   2: 754.226 ±(99.9%) 7.298 ms/op
                 executeFilterQuery·p0.00:   742.392 ms/op
                 executeFilterQuery·p0.50:   752.353 ms/op
                 executeFilterQuery·p0.90:   765.985 ms/op
                 executeFilterQuery·p0.95:   766.509 ms/op
                 executeFilterQuery·p0.99:   766.509 ms/op
                 executeFilterQuery·p0.999:  766.509 ms/op
                 executeFilterQuery·p0.9999: 766.509 ms/op
                 executeFilterQuery·p1.00:   766.509 ms/op

Iteration   3: 752.803 ±(99.9%) 7.028 ms/op
                 executeFilterQuery·p0.00:   744.489 ms/op
                 executeFilterQuery·p0.50:   750.780 ms/op
                 executeFilterQuery·p0.90:   763.888 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   4: 742.691 ±(99.9%) 22.612 ms/op
                 executeFilterQuery·p0.00:   714.080 ms/op
                 executeFilterQuery·p0.50:   751.305 ms/op
                 executeFilterQuery·p0.90:   763.363 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   5: 722.094 ±(99.9%) 5.423 ms/op
                 executeFilterQuery·p0.00:   715.129 ms/op
                 executeFilterQuery·p0.50:   721.420 ms/op
                 executeFilterQuery·p0.90:   728.760 ms/op
                 executeFilterQuery·p0.95:   728.760 ms/op
                 executeFilterQuery·p0.99:   728.760 ms/op
                 executeFilterQuery·p0.999:  728.760 ms/op
                 executeFilterQuery·p0.9999: 728.760 ms/op
                 executeFilterQuery·p1.00:   728.760 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 140
  mean =    741.718 ±(99.9%) 4.908 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 1 
    [715.000, 720.000) = 14 
    [720.000, 725.000) = 20 
    [725.000, 730.000) = 17 
    [730.000, 735.000) = 13 
    [735.000, 740.000) = 1 
    [740.000, 745.000) = 3 
    [745.000, 750.000) = 8 
    [750.000, 755.000) = 24 
    [755.000, 760.000) = 11 
    [760.000, 765.000) = 17 

  Percentiles, ms/op:
      p(0.0000) =    714.080 ms/op
     p(50.0000) =    746.586 ms/op
     p(90.0000) =    763.363 ms/op
     p(95.0000) =    766.509 ms/op
     p(99.0000) =    768.606 ms/op
     p(99.9000) =    768.606 ms/op
     p(99.9900) =    768.606 ms/op
     p(99.9990) =    768.606 ms/op
     p(99.9999) =    768.606 ms/op
    p(100.0000) =    768.606 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 37.78% complete, ETA 09:34:19
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1765.627 ±(99.9%) 6384.568 ms/op
# Warmup Iteration   2: 738.422 ±(99.9%) 16.921 ms/op
# Warmup Iteration   3: 739.021 ±(99.9%) 20.426 ms/op
# Warmup Iteration   4: 755.873 ±(99.9%) 4.274 ms/op
# Warmup Iteration   5: 760.592 ±(99.9%) 5.095 ms/op
Iteration   1: 754.900 ±(99.9%) 6.683 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   753.402 ms/op
                 executeFilterQuery·p0.90:   762.839 ms/op
                 executeFilterQuery·p0.95:   763.363 ms/op
                 executeFilterQuery·p0.99:   763.363 ms/op
                 executeFilterQuery·p0.999:  763.363 ms/op
                 executeFilterQuery·p0.9999: 763.363 ms/op
                 executeFilterQuery·p1.00:   763.363 ms/op

Iteration   2: 759.019 ±(99.9%) 6.592 ms/op
                 executeFilterQuery·p0.00:   747.635 ms/op
                 executeFilterQuery·p0.50:   759.169 ms/op
                 executeFilterQuery·p0.90:   766.509 ms/op
                 executeFilterQuery·p0.95:   767.558 ms/op
                 executeFilterQuery·p0.99:   767.558 ms/op
                 executeFilterQuery·p0.999:  767.558 ms/op
                 executeFilterQuery·p0.9999: 767.558 ms/op
                 executeFilterQuery·p1.00:   767.558 ms/op

Iteration   3: 756.548 ±(99.9%) 4.220 ms/op
                 executeFilterQuery·p0.00:   752.878 ms/op
                 executeFilterQuery·p0.50:   755.499 ms/op
                 executeFilterQuery·p0.90:   762.315 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   4: 762.090 ±(99.9%) 5.314 ms/op
                 executeFilterQuery·p0.00:   752.878 ms/op
                 executeFilterQuery·p0.50:   761.790 ms/op
                 executeFilterQuery·p0.90:   767.033 ms/op
                 executeFilterQuery·p0.95:   767.558 ms/op
                 executeFilterQuery·p0.99:   767.558 ms/op
                 executeFilterQuery·p0.999:  767.558 ms/op
                 executeFilterQuery·p0.9999: 767.558 ms/op
                 executeFilterQuery·p1.00:   767.558 ms/op

Iteration   5: 734.827 ±(99.9%) 13.360 ms/op
                 executeFilterQuery·p0.00:   721.420 ms/op
                 executeFilterQuery·p0.50:   734.003 ms/op
                 executeFilterQuery·p0.90:   759.693 ms/op
                 executeFilterQuery·p0.95:   761.266 ms/op
                 executeFilterQuery·p0.99:   761.266 ms/op
                 executeFilterQuery·p0.999:  761.266 ms/op
                 executeFilterQuery·p0.9999: 761.266 ms/op
                 executeFilterQuery·p1.00:   761.266 ms/op


# Run progress: 38.33% complete, ETA 09:23:50
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

774.333 ±(99.9%) 76.995 ms/op
# Warmup Iteration   2: 736.625 ±(99.9%) 17.907 ms/op
# Warmup Iteration   3: 753.552 ±(99.9%) 15.806 ms/op
# Warmup Iteration   4: 759.918 ±(99.9%) 3.976 ms/op
# Warmup Iteration   5: 758.046 ±(99.9%) 5.071 ms/op
Iteration   1: 759.019 ±(99.9%) 4.041 ms/op
                 executeFilterQuery·p0.00:   753.926 ms/op
                 executeFilterQuery·p0.50:   757.596 ms/op
                 executeFilterQuery·p0.90:   763.888 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   2: 756.622 ±(99.9%) 4.815 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   757.072 ms/op
                 executeFilterQuery·p0.90:   762.839 ms/op
                 executeFilterQuery·p0.95:   763.363 ms/op
                 executeFilterQuery·p0.99:   763.363 ms/op
                 executeFilterQuery·p0.999:  763.363 ms/op
                 executeFilterQuery·p0.9999: 763.363 ms/op
                 executeFilterQuery·p1.00:   763.363 ms/op

Iteration   3: 752.878 ±(99.9%) 5.061 ms/op
                 executeFilterQuery·p0.00:   746.586 ms/op
                 executeFilterQuery·p0.50:   753.926 ms/op
                 executeFilterQuery·p0.90:   758.645 ms/op
                 executeFilterQuery·p0.95:   759.169 ms/op
                 executeFilterQuery·p0.99:   759.169 ms/op
                 executeFilterQuery·p0.999:  759.169 ms/op
                 executeFilterQuery·p0.9999: 759.169 ms/op
                 executeFilterQuery·p1.00:   759.169 ms/op

Iteration   4: 748.833 ±(99.9%) 13.502 ms/op
                 executeFilterQuery·p0.00:   726.663 ms/op
                 executeFilterQuery·p0.50:   749.208 ms/op
                 executeFilterQuery·p0.90:   763.888 ms/op
                 executeFilterQuery·p0.95:   765.460 ms/op
                 executeFilterQuery·p0.99:   765.460 ms/op
                 executeFilterQuery·p0.999:  765.460 ms/op
                 executeFilterQuery·p0.9999: 765.460 ms/op
                 executeFilterQuery·p1.00:   765.460 ms/op

Iteration   5: 732.430 ±(99.9%) 7.048 ms/op
                 executeFilterQuery·p0.00:   719.323 ms/op
                 executeFilterQuery·p0.50:   733.479 ms/op
                 executeFilterQuery·p0.90:   740.819 ms/op
                 executeFilterQuery·p0.95:   741.343 ms/op
                 executeFilterQuery·p0.99:   741.343 ms/op
                 executeFilterQuery·p0.999:  741.343 ms/op
                 executeFilterQuery·p0.9999: 741.343 ms/op
                 executeFilterQuery·p1.00:   741.343 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 140
  mean =    751.717 ±(99.9%) 3.354 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 1 
    [720.000, 725.000) = 4 
    [725.000, 730.000) = 8 
    [730.000, 735.000) = 6 
    [735.000, 740.000) = 8 
    [740.000, 745.000) = 2 
    [745.000, 750.000) = 17 
    [750.000, 755.000) = 22 
    [755.000, 760.000) = 34 
    [760.000, 765.000) = 29 

  Percentiles, ms/op:
      p(0.0000) =    719.323 ms/op
     p(50.0000) =    756.023 ms/op
     p(90.0000) =    763.363 ms/op
     p(95.0000) =    765.460 ms/op
     p(99.0000) =    767.558 ms/op
     p(99.9000) =    767.558 ms/op
     p(99.9900) =    767.558 ms/op
     p(99.9990) =    767.558 ms/op
     p(99.9999) =    767.558 ms/op
    p(100.0000) =    767.558 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 38.89% complete, ETA 09:13:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2006.765 ±(99.9%) 9401.364 ms/op
# Warmup Iteration   2: 746.736 ±(99.9%) 18.099 ms/op
# Warmup Iteration   3: 740.145 ±(99.9%) 15.182 ms/op
# Warmup Iteration   4: 767.800 ±(99.9%) 3.842 ms/op
# Warmup Iteration   5: 767.800 ±(99.9%) 5.053 ms/op
Iteration   1: 767.961 ±(99.9%) 1.741 ms/op
                 executeFilterQuery·p0.00:   765.460 ms/op
                 executeFilterQuery·p0.50:   767.558 ms/op
                 executeFilterQuery·p0.90:   770.284 ms/op
                 executeFilterQuery·p0.95:   770.703 ms/op
                 executeFilterQuery·p0.99:   770.703 ms/op
                 executeFilterQuery·p0.999:  770.703 ms/op
                 executeFilterQuery·p0.9999: 770.703 ms/op
                 executeFilterQuery·p1.00:   770.703 ms/op

Iteration   2: 769.735 ±(99.9%) 6.288 ms/op
                 executeFilterQuery·p0.00:   761.266 ms/op
                 executeFilterQuery·p0.50:   768.606 ms/op
                 executeFilterQuery·p0.90:   779.721 ms/op
                 executeFilterQuery·p0.95:   780.141 ms/op
                 executeFilterQuery·p0.99:   780.141 ms/op
                 executeFilterQuery·p0.999:  780.141 ms/op
                 executeFilterQuery·p0.9999: 780.141 ms/op
                 executeFilterQuery·p1.00:   780.141 ms/op

Iteration   3: 776.188 ±(99.9%) 2.720 ms/op
                 executeFilterQuery·p0.00:   769.655 ms/op
                 executeFilterQuery·p0.50:   775.946 ms/op
                 executeFilterQuery·p0.90:   778.673 ms/op
                 executeFilterQuery·p0.95:   779.092 ms/op
                 executeFilterQuery·p0.99:   779.092 ms/op
                 executeFilterQuery·p0.999:  779.092 ms/op
                 executeFilterQuery·p0.9999: 779.092 ms/op
                 executeFilterQuery·p1.00:   779.092 ms/op

Iteration   4: 772.720 ±(99.9%) 5.265 ms/op
                 executeFilterQuery·p0.00:   763.363 ms/op
                 executeFilterQuery·p0.50:   772.801 ms/op
                 executeFilterQuery·p0.90:   778.673 ms/op
                 executeFilterQuery·p0.95:   779.092 ms/op
                 executeFilterQuery·p0.99:   779.092 ms/op
                 executeFilterQuery·p0.999:  779.092 ms/op
                 executeFilterQuery·p0.9999: 779.092 ms/op
                 executeFilterQuery·p1.00:   779.092 ms/op

Iteration   5: 759.993 ±(99.9%) 23.585 ms/op
                 executeFilterQuery·p0.00:   724.566 ms/op
                 executeFilterQuery·p0.50:   768.082 ms/op
                 executeFilterQuery·p0.90:   781.713 ms/op
                 executeFilterQuery·p0.95:   784.335 ms/op
                 executeFilterQuery·p0.99:   784.335 ms/op
                 executeFilterQuery·p0.999:  784.335 ms/op
                 executeFilterQuery·p0.9999: 784.335 ms/op
                 executeFilterQuery·p1.00:   784.335 ms/op


# Run progress: 39.44% complete, ETA 09:03:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

799.822 ±(99.9%) 118.217 ms/op
# Warmup Iteration   2: 733.853 ±(99.9%) 13.613 ms/op
# Warmup Iteration   3: 762.539 ±(99.9%) 14.165 ms/op
# Warmup Iteration   4: 766.670 ±(99.9%) 6.084 ms/op
# Warmup Iteration   5: 767.800 ±(99.9%) 4.414 ms/op
Iteration   1: 770.461 ±(99.9%) 4.618 ms/op
                 executeFilterQuery·p0.00:   763.363 ms/op
                 executeFilterQuery·p0.50:   770.703 ms/op
                 executeFilterQuery·p0.90:   776.575 ms/op
                 executeFilterQuery·p0.95:   779.092 ms/op
                 executeFilterQuery·p0.99:   779.092 ms/op
                 executeFilterQuery·p0.999:  779.092 ms/op
                 executeFilterQuery·p0.9999: 779.092 ms/op
                 executeFilterQuery·p1.00:   779.092 ms/op

Iteration   2: 769.735 ±(99.9%) 4.541 ms/op
                 executeFilterQuery·p0.00:   762.315 ms/op
                 executeFilterQuery·p0.50:   770.703 ms/op
                 executeFilterQuery·p0.90:   775.527 ms/op
                 executeFilterQuery·p0.95:   778.043 ms/op
                 executeFilterQuery·p0.99:   778.043 ms/op
                 executeFilterQuery·p0.999:  778.043 ms/op
                 executeFilterQuery·p0.9999: 778.043 ms/op
                 executeFilterQuery·p1.00:   778.043 ms/op

Iteration   3: 770.623 ±(99.9%) 3.341 ms/op
                 executeFilterQuery·p0.00:   765.460 ms/op
                 executeFilterQuery·p0.50:   770.703 ms/op
                 executeFilterQuery·p0.90:   775.527 ms/op
                 executeFilterQuery·p0.95:   778.043 ms/op
                 executeFilterQuery·p0.99:   778.043 ms/op
                 executeFilterQuery·p0.999:  778.043 ms/op
                 executeFilterQuery·p0.9999: 778.043 ms/op
                 executeFilterQuery·p1.00:   778.043 ms/op

Iteration   4: 766.751 ±(99.9%) 4.786 ms/op
                 executeFilterQuery·p0.00:   761.266 ms/op
                 executeFilterQuery·p0.50:   766.509 ms/op
                 executeFilterQuery·p0.90:   775.107 ms/op
                 executeFilterQuery·p0.95:   775.946 ms/op
                 executeFilterQuery·p0.99:   775.946 ms/op
                 executeFilterQuery·p0.999:  775.946 ms/op
                 executeFilterQuery·p0.9999: 775.946 ms/op
                 executeFilterQuery·p1.00:   775.946 ms/op

Iteration   5: 738.422 ±(99.9%) 15.298 ms/op
                 executeFilterQuery·p0.00:   726.663 ms/op
                 executeFilterQuery·p0.50:   732.955 ms/op
                 executeFilterQuery·p0.90:   765.985 ms/op
                 executeFilterQuery·p0.95:   779.092 ms/op
                 executeFilterQuery·p0.99:   779.092 ms/op
                 executeFilterQuery·p0.999:  779.092 ms/op
                 executeFilterQuery·p0.9999: 779.092 ms/op
                 executeFilterQuery·p1.00:   779.092 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 132
  mean =    766.001 ±(99.9%) 3.916 ms/op

  Histogram, ms/op:
    [720.000, 725.000) = 1 
    [725.000, 730.000) = 3 
    [730.000, 735.000) = 8 
    [735.000, 740.000) = 2 
    [740.000, 745.000) = 2 
    [745.000, 750.000) = 0 
    [750.000, 755.000) = 1 
    [755.000, 760.000) = 0 
    [760.000, 765.000) = 11 
    [765.000, 770.000) = 46 
    [770.000, 775.000) = 32 
    [775.000, 780.000) = 24 
    [780.000, 785.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    724.566 ms/op
     p(50.0000) =    769.655 ms/op
     p(90.0000) =    778.043 ms/op
     p(95.0000) =    779.092 ms/op
     p(99.0000) =    782.951 ms/op
     p(99.9000) =    784.335 ms/op
     p(99.9900) =    784.335 ms/op
     p(99.9990) =    784.335 ms/op
     p(99.9999) =    784.335 ms/op
    p(100.0000) =    784.335 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 40.00% complete, ETA 08:53:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12767.461 ms/op
# Warmup Iteration   2: 1521.933 ±(99.9%) 424.801 ms/op
# Warmup Iteration   3: 1427.898 ±(99.9%) 57.167 ms/op
# Warmup Iteration   4: 1477.593 ±(99.9%) 11.524 ms/op
# Warmup Iteration   5: 1468.006 ±(99.9%) 13.078 ms/op
Iteration   1: 1475.197 ±(99.9%) 17.852 ms/op
                 executeFilterQuery·p0.00:   1459.618 ms/op
                 executeFilterQuery·p0.50:   1476.395 ms/op
                 executeFilterQuery·p0.90:   1482.686 ms/op
                 executeFilterQuery·p0.95:   1482.686 ms/op
                 executeFilterQuery·p0.99:   1482.686 ms/op
                 executeFilterQuery·p0.999:  1482.686 ms/op
                 executeFilterQuery·p0.9999: 1482.686 ms/op
                 executeFilterQuery·p1.00:   1482.686 ms/op

Iteration   2: 1405.878 ±(99.9%) 18.800 ms/op
                 executeFilterQuery·p0.00:   1388.315 ms/op
                 executeFilterQuery·p0.50:   1405.092 ms/op
                 executeFilterQuery·p0.90:   1423.966 ms/op
                 executeFilterQuery·p0.95:   1423.966 ms/op
                 executeFilterQuery·p0.99:   1423.966 ms/op
                 executeFilterQuery·p0.999:  1423.966 ms/op
                 executeFilterQuery·p0.9999: 1423.966 ms/op
                 executeFilterQuery·p1.00:   1423.966 ms/op

Iteration   3: 1405.354 ±(99.9%) 12.394 ms/op
                 executeFilterQuery·p0.00:   1396.703 ms/op
                 executeFilterQuery·p0.50:   1407.189 ms/op
                 executeFilterQuery·p0.90:   1411.383 ms/op
                 executeFilterQuery·p0.95:   1411.383 ms/op
                 executeFilterQuery·p0.99:   1411.383 ms/op
                 executeFilterQuery·p0.999:  1411.383 ms/op
                 executeFilterQuery·p0.9999: 1411.383 ms/op
                 executeFilterQuery·p1.00:   1411.383 ms/op

Iteration   4: 1401.422 ±(99.9%) 15.859 ms/op
                 executeFilterQuery·p0.00:   1388.315 ms/op
                 executeFilterQuery·p0.50:   1404.043 ms/op
                 executeFilterQuery·p0.90:   1411.383 ms/op
                 executeFilterQuery·p0.95:   1411.383 ms/op
                 executeFilterQuery·p0.99:   1411.383 ms/op
                 executeFilterQuery·p0.999:  1411.383 ms/op
                 executeFilterQuery·p0.9999: 1411.383 ms/op
                 executeFilterQuery·p1.00:   1411.383 ms/op

Iteration   5: 1435.650 ±(99.9%) 88.945 ms/op
                 executeFilterQuery·p0.00:   1396.703 ms/op
                 executeFilterQuery·p0.50:   1413.480 ms/op
                 executeFilterQuery·p0.90:   1484.784 ms/op
                 executeFilterQuery·p0.95:   1484.784 ms/op
                 executeFilterQuery·p0.99:   1484.784 ms/op
                 executeFilterQuery·p0.999:  1484.784 ms/op
                 executeFilterQuery·p0.9999: 1484.784 ms/op
                 executeFilterQuery·p1.00:   1484.784 ms/op


# Run progress: 40.56% complete, ETA 08:44:11
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1456.322 ±(99.9%) 153.047 ms/op
# Warmup Iteration   2: 1406.140 ±(99.9%) 30.235 ms/op
# Warmup Iteration   3: 1461.715 ±(99.9%) 7.713 ms/op
# Warmup Iteration   4: 1455.124 ±(99.9%) 26.075 ms/op
# Warmup Iteration   5: 1457.820 ±(99.9%) 19.933 ms/op
Iteration   1: 1461.116 ±(99.9%) 11.797 ms/op
                 executeFilterQuery·p0.00:   1453.326 ms/op
                 executeFilterQuery·p0.50:   1461.715 ms/op
                 executeFilterQuery·p0.90:   1470.104 ms/op
                 executeFilterQuery·p0.95:   1470.104 ms/op
                 executeFilterQuery·p0.99:   1470.104 ms/op
                 executeFilterQuery·p0.999:  1470.104 ms/op
                 executeFilterQuery·p0.9999: 1470.104 ms/op
                 executeFilterQuery·p1.00:   1470.104 ms/op

Iteration   2: 1462.913 ±(99.9%) 15.392 ms/op
                 executeFilterQuery·p0.00:   1449.132 ms/op
                 executeFilterQuery·p0.50:   1463.812 ms/op
                 executeFilterQuery·p0.90:   1470.104 ms/op
                 executeFilterQuery·p0.95:   1470.104 ms/op
                 executeFilterQuery·p0.99:   1470.104 ms/op
                 executeFilterQuery·p0.999:  1470.104 ms/op
                 executeFilterQuery·p0.9999: 1470.104 ms/op
                 executeFilterQuery·p1.00:   1470.104 ms/op

Iteration   3: 1459.917 ±(99.9%) 30.173 ms/op
                 executeFilterQuery·p0.00:   1438.646 ms/op
                 executeFilterQuery·p0.50:   1465.909 ms/op
                 executeFilterQuery·p0.90:   1472.201 ms/op
                 executeFilterQuery·p0.95:   1472.201 ms/op
                 executeFilterQuery·p0.99:   1472.201 ms/op
                 executeFilterQuery·p0.999:  1472.201 ms/op
                 executeFilterQuery·p0.9999: 1472.201 ms/op
                 executeFilterQuery·p1.00:   1472.201 ms/op

Iteration   4: 1455.423 ±(99.9%) 77.419 ms/op
                 executeFilterQuery·p0.00:   1386.217 ms/op
                 executeFilterQuery·p0.50:   1465.909 ms/op
                 executeFilterQuery·p0.90:   1495.269 ms/op
                 executeFilterQuery·p0.95:   1495.269 ms/op
                 executeFilterQuery·p0.99:   1495.269 ms/op
                 executeFilterQuery·p0.999:  1495.269 ms/op
                 executeFilterQuery·p0.9999: 1495.269 ms/op
                 executeFilterQuery·p1.00:   1495.269 ms/op

Iteration   5: 1398.538 ±(99.9%) 20.269 ms/op
                 executeFilterQuery·p0.00:   1392.509 ms/op
                 executeFilterQuery·p0.50:   1394.606 ms/op
                 executeFilterQuery·p0.90:   1423.966 ms/op
                 executeFilterQuery·p0.95:   1423.966 ms/op
                 executeFilterQuery·p0.99:   1423.966 ms/op
                 executeFilterQuery·p0.999:  1423.966 ms/op
                 executeFilterQuery·p0.9999: 1423.966 ms/op
                 executeFilterQuery·p1.00:   1423.966 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 74
  mean =   1434.339 ±(99.9%) 13.427 ms/op

  Histogram, ms/op:
    [1300.000, 1312.500) = 0 
    [1312.500, 1325.000) = 0 
    [1325.000, 1337.500) = 0 
    [1337.500, 1350.000) = 0 
    [1350.000, 1362.500) = 0 
    [1362.500, 1375.000) = 0 
    [1375.000, 1387.500) = 1 
    [1387.500, 1400.000) = 15 
    [1400.000, 1412.500) = 18 
    [1412.500, 1425.000) = 3 
    [1425.000, 1437.500) = 0 
    [1437.500, 1450.000) = 4 
    [1450.000, 1462.500) = 9 
    [1462.500, 1475.000) = 17 
    [1475.000, 1487.500) = 6 

  Percentiles, ms/op:
      p(0.0000) =   1386.217 ms/op
     p(50.0000) =   1431.306 ms/op
     p(90.0000) =   1475.346 ms/op
     p(95.0000) =   1483.211 ms/op
     p(99.0000) =   1495.269 ms/op
     p(99.9000) =   1495.269 ms/op
     p(99.9900) =   1495.269 ms/op
     p(99.9990) =   1495.269 ms/op
     p(99.9999) =   1495.269 ms/op
    p(100.0000) =   1495.269 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 41.11% complete, ETA 08:34:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12851.347 ms/op
# Warmup Iteration   2: 1543.803 ±(99.9%) 402.692 ms/op
# Warmup Iteration   3: 1446.436 ±(99.9%) 77.645 ms/op
# Warmup Iteration   4: 1519.237 ±(99.9%) 20.381 ms/op
# Warmup Iteration   5: 1520.735 ±(99.9%) 6.914 ms/op
Iteration   1: 1496.767 ±(99.9%) 84.391 ms/op
                 executeFilterQuery·p0.00:   1440.743 ms/op
                 executeFilterQuery·p0.50:   1520.435 ms/op
                 executeFilterQuery·p0.90:   1522.532 ms/op
                 executeFilterQuery·p0.95:   1522.532 ms/op
                 executeFilterQuery·p0.99:   1522.532 ms/op
                 executeFilterQuery·p0.999:  1522.532 ms/op
                 executeFilterQuery·p0.9999: 1522.532 ms/op
                 executeFilterQuery·p1.00:   1522.532 ms/op

Iteration   2: 1434.452 ±(99.9%) 18.089 ms/op
                 executeFilterQuery·p0.00:   1421.869 ms/op
                 executeFilterQuery·p0.50:   1432.355 ms/op
                 executeFilterQuery·p0.90:   1447.035 ms/op
                 executeFilterQuery·p0.95:   1447.035 ms/op
                 executeFilterQuery·p0.99:   1447.035 ms/op
                 executeFilterQuery·p0.999:  1447.035 ms/op
                 executeFilterQuery·p0.9999: 1447.035 ms/op
                 executeFilterQuery·p1.00:   1447.035 ms/op

Iteration   3: 1439.245 ±(99.9%) 29.080 ms/op
                 executeFilterQuery·p0.00:   1419.772 ms/op
                 executeFilterQuery·p0.50:   1434.452 ms/op
                 executeFilterQuery·p0.90:   1455.423 ms/op
                 executeFilterQuery·p0.95:   1455.423 ms/op
                 executeFilterQuery·p0.99:   1455.423 ms/op
                 executeFilterQuery·p0.999:  1455.423 ms/op
                 executeFilterQuery·p0.9999: 1455.423 ms/op
                 executeFilterQuery·p1.00:   1455.423 ms/op

Iteration   4: 1430.557 ±(99.9%) 25.057 ms/op
                 executeFilterQuery·p0.00:   1419.772 ms/op
                 executeFilterQuery·p0.50:   1430.258 ms/op
                 executeFilterQuery·p0.90:   1451.229 ms/op
                 executeFilterQuery·p0.95:   1451.229 ms/op
                 executeFilterQuery·p0.99:   1451.229 ms/op
                 executeFilterQuery·p0.999:  1451.229 ms/op
                 executeFilterQuery·p0.9999: 1451.229 ms/op
                 executeFilterQuery·p1.00:   1451.229 ms/op

Iteration   5: 1497.666 ±(99.9%) 65.187 ms/op
                 executeFilterQuery·p0.00:   1451.229 ms/op
                 executeFilterQuery·p0.50:   1503.658 ms/op
                 executeFilterQuery·p0.90:   1524.630 ms/op
                 executeFilterQuery·p0.95:   1524.630 ms/op
                 executeFilterQuery·p0.99:   1524.630 ms/op
                 executeFilterQuery·p0.999:  1524.630 ms/op
                 executeFilterQuery·p0.9999: 1524.630 ms/op
                 executeFilterQuery·p1.00:   1524.630 ms/op


# Run progress: 41.67% complete, ETA 08:25:42
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1546.799 ±(99.9%) 273.267 ms/op
# Warmup Iteration   2: 1444.339 ±(99.9%) 97.170 ms/op
# Warmup Iteration   3: 1484.184 ±(99.9%) 57.442 ms/op
# Warmup Iteration   4: 1503.358 ±(99.9%) 45.421 ms/op
# Warmup Iteration   5: 1504.557 ±(99.9%) 40.801 ms/op
Iteration   1: 1496.767 ±(99.9%) 45.852 ms/op
                 executeFilterQuery·p0.00:   1476.395 ms/op
                 executeFilterQuery·p0.50:   1484.784 ms/op
                 executeFilterQuery·p0.90:   1518.338 ms/op
                 executeFilterQuery·p0.95:   1518.338 ms/op
                 executeFilterQuery·p0.99:   1518.338 ms/op
                 executeFilterQuery·p0.999:  1518.338 ms/op
                 executeFilterQuery·p0.9999: 1518.338 ms/op
                 executeFilterQuery·p1.00:   1518.338 ms/op

Iteration   2: 1498.565 ±(99.9%) 41.791 ms/op
                 executeFilterQuery·p0.00:   1478.492 ms/op
                 executeFilterQuery·p0.50:   1488.978 ms/op
                 executeFilterQuery·p0.90:   1522.532 ms/op
                 executeFilterQuery·p0.95:   1522.532 ms/op
                 executeFilterQuery·p0.99:   1522.532 ms/op
                 executeFilterQuery·p0.999:  1522.532 ms/op
                 executeFilterQuery·p0.9999: 1522.532 ms/op
                 executeFilterQuery·p1.00:   1522.532 ms/op

Iteration   3: 3399.483 ±(99.9%) 59608.333 ms/op
                 executeFilterQuery·p0.00:   1503.658 ms/op
                 executeFilterQuery·p0.50:   1522.532 ms/op
                 executeFilterQuery·p0.90:   7172.260 ms/op
                 executeFilterQuery·p0.95:   7172.260 ms/op
                 executeFilterQuery·p0.99:   7172.260 ms/op
                 executeFilterQuery·p0.999:  7172.260 ms/op
                 executeFilterQuery·p0.9999: 7172.260 ms/op
                 executeFilterQuery·p1.00:   7172.260 ms/op

Iteration   4: 1497.666 ±(99.9%) 26.358 ms/op
                 executeFilterQuery·p0.00:   1482.686 ms/op
                 executeFilterQuery·p0.50:   1497.367 ms/op
                 executeFilterQuery·p0.90:   1516.241 ms/op
                 executeFilterQuery·p0.95:   1516.241 ms/op
                 executeFilterQuery·p0.99:   1516.241 ms/op
                 executeFilterQuery·p0.999:  1516.241 ms/op
                 executeFilterQuery·p0.9999: 1516.241 ms/op
                 executeFilterQuery·p1.00:   1516.241 ms/op

Iteration   5: 1491.974 ±(99.9%) 29.479 ms/op
                 executeFilterQuery·p0.00:   1482.686 ms/op
                 executeFilterQuery·p0.50:   1484.784 ms/op
                 executeFilterQuery·p0.90:   1518.338 ms/op
                 executeFilterQuery·p0.95:   1518.338 ms/op
                 executeFilterQuery·p0.99:   1518.338 ms/op
                 executeFilterQuery·p0.999:  1518.338 ms/op
                 executeFilterQuery·p0.9999: 1518.338 ms/op
                 executeFilterQuery·p1.00:   1518.338 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 66
  mean =   1563.395 ±(99.9%) 297.774 ms/op

  Histogram, ms/op:
    [1000.000, 1500.000) = 43 
    [1500.000, 2000.000) = 22 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 0 
    [6000.000, 6500.000) = 0 
    [6500.000, 7000.000) = 0 
    [7000.000, 7500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1419.772 ms/op
     p(50.0000) =   1483.735 ms/op
     p(90.0000) =   1522.532 ms/op
     p(95.0000) =   1522.532 ms/op
     p(99.0000) =   7172.260 ms/op
     p(99.9000) =   7172.260 ms/op
     p(99.9900) =   7172.260 ms/op
     p(99.9990) =   7172.260 ms/op
     p(99.9999) =   7172.260 ms/op
    p(100.0000) =   7172.260 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 42.22% complete, ETA 08:16:44
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12633.244 ms/op
# Warmup Iteration   2: 1619.900 ±(99.9%) 472.591 ms/op
# Warmup Iteration   3: 1478.193 ±(99.9%) 57.424 ms/op
# Warmup Iteration   4: 1520.435 ±(99.9%) 50.504 ms/op
# Warmup Iteration   5: 1530.921 ±(99.9%) 3.857 ms/op
Iteration   1: 1532.119 ±(99.9%) 23.276 ms/op
                 executeFilterQuery·p0.00:   1516.241 ms/op
                 executeFilterQuery·p0.50:   1530.921 ms/op
                 executeFilterQuery·p0.90:   1549.795 ms/op
                 executeFilterQuery·p0.95:   1549.795 ms/op
                 executeFilterQuery·p0.99:   1549.795 ms/op
                 executeFilterQuery·p0.999:  1549.795 ms/op
                 executeFilterQuery·p0.9999: 1549.795 ms/op
                 executeFilterQuery·p1.00:   1549.795 ms/op

Iteration   2: 1530.322 ±(99.9%) 7.574 ms/op
                 executeFilterQuery·p0.00:   1526.727 ms/op
                 executeFilterQuery·p0.50:   1528.824 ms/op
                 executeFilterQuery·p0.90:   1535.115 ms/op
                 executeFilterQuery·p0.95:   1535.115 ms/op
                 executeFilterQuery·p0.99:   1535.115 ms/op
                 executeFilterQuery·p0.999:  1535.115 ms/op
                 executeFilterQuery·p0.9999: 1535.115 ms/op
                 executeFilterQuery·p1.00:   1535.115 ms/op

Iteration   3: 1530.921 ±(99.9%) 20.946 ms/op
                 executeFilterQuery·p0.00:   1514.144 ms/op
                 executeFilterQuery·p0.50:   1530.921 ms/op
                 executeFilterQuery·p0.90:   1545.601 ms/op
                 executeFilterQuery·p0.95:   1545.601 ms/op
                 executeFilterQuery·p0.99:   1545.601 ms/op
                 executeFilterQuery·p0.999:  1545.601 ms/op
                 executeFilterQuery·p0.9999: 1545.601 ms/op
                 executeFilterQuery·p1.00:   1545.601 ms/op

Iteration   4: 1530.322 ±(99.9%) 7.574 ms/op
                 executeFilterQuery·p0.00:   1526.727 ms/op
                 executeFilterQuery·p0.50:   1528.824 ms/op
                 executeFilterQuery·p0.90:   1535.115 ms/op
                 executeFilterQuery·p0.95:   1535.115 ms/op
                 executeFilterQuery·p0.99:   1535.115 ms/op
                 executeFilterQuery·p0.999:  1535.115 ms/op
                 executeFilterQuery·p0.9999: 1535.115 ms/op
                 executeFilterQuery·p1.00:   1535.115 ms/op

Iteration   5: 1518.937 ±(99.9%) 59.038 ms/op
                 executeFilterQuery·p0.00:   1459.618 ms/op
                 executeFilterQuery·p0.50:   1528.824 ms/op
                 executeFilterQuery·p0.90:   1530.921 ms/op
                 executeFilterQuery·p0.95:   1530.921 ms/op
                 executeFilterQuery·p0.99:   1530.921 ms/op
                 executeFilterQuery·p0.999:  1530.921 ms/op
                 executeFilterQuery·p0.9999: 1530.921 ms/op
                 executeFilterQuery·p1.00:   1530.921 ms/op


# Run progress: 42.78% complete, ETA 08:08:04
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1685.062 ±(99.9%) 575.728 ms/op
# Warmup Iteration   2: 1478.492 ±(99.9%) 52.312 ms/op
# Warmup Iteration   3: 1515.043 ±(99.9%) 60.907 ms/op
# Warmup Iteration   4: 1529.423 ±(99.9%) 29.207 ms/op
# Warmup Iteration   5: 1521.634 ±(99.9%) 15.392 ms/op
Iteration   1: 1518.338 ±(99.9%) 18.495 ms/op
                 executeFilterQuery·p0.00:   1509.949 ms/op
                 executeFilterQuery·p0.50:   1514.144 ms/op
                 executeFilterQuery·p0.90:   1528.824 ms/op
                 executeFilterQuery·p0.95:   1528.824 ms/op
                 executeFilterQuery·p0.99:   1528.824 ms/op
                 executeFilterQuery·p0.999:  1528.824 ms/op
                 executeFilterQuery·p0.9999: 1528.824 ms/op
                 executeFilterQuery·p1.00:   1528.824 ms/op

Iteration   2: 1522.532 ±(99.9%) 14.685 ms/op
                 executeFilterQuery·p0.00:   1512.047 ms/op
                 executeFilterQuery·p0.50:   1524.630 ms/op
                 executeFilterQuery·p0.90:   1528.824 ms/op
                 executeFilterQuery·p0.95:   1528.824 ms/op
                 executeFilterQuery·p0.99:   1528.824 ms/op
                 executeFilterQuery·p0.999:  1528.824 ms/op
                 executeFilterQuery·p0.9999: 1528.824 ms/op
                 executeFilterQuery·p1.00:   1528.824 ms/op

Iteration   3: 1519.237 ±(99.9%) 16.999 ms/op
                 executeFilterQuery·p0.00:   1507.852 ms/op
                 executeFilterQuery·p0.50:   1520.435 ms/op
                 executeFilterQuery·p0.90:   1528.824 ms/op
                 executeFilterQuery·p0.95:   1528.824 ms/op
                 executeFilterQuery·p0.99:   1528.824 ms/op
                 executeFilterQuery·p0.999:  1528.824 ms/op
                 executeFilterQuery·p0.9999: 1528.824 ms/op
                 executeFilterQuery·p1.00:   1528.824 ms/op

Iteration   4: 1518.038 ±(99.9%) 17.763 ms/op
                 executeFilterQuery·p0.00:   1507.852 ms/op
                 executeFilterQuery·p0.50:   1516.241 ms/op
                 executeFilterQuery·p0.90:   1526.727 ms/op
                 executeFilterQuery·p0.95:   1526.727 ms/op
                 executeFilterQuery·p0.99:   1526.727 ms/op
                 executeFilterQuery·p0.999:  1526.727 ms/op
                 executeFilterQuery·p0.9999: 1526.727 ms/op
                 executeFilterQuery·p1.00:   1526.727 ms/op

Iteration   5: 1480.290 ±(99.9%) 68.143 ms/op
                 executeFilterQuery·p0.00:   1451.229 ms/op
                 executeFilterQuery·p0.50:   1465.909 ms/op
                 executeFilterQuery·p0.90:   1524.630 ms/op
                 executeFilterQuery·p0.95:   1524.630 ms/op
                 executeFilterQuery·p0.99:   1524.630 ms/op
                 executeFilterQuery·p0.999:  1524.630 ms/op
                 executeFilterQuery·p0.9999: 1524.630 ms/op
                 executeFilterQuery·p1.00:   1524.630 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =   1520.106 ±(99.9%) 8.094 ms/op

  Histogram, ms/op:
    [1450.000, 1460.000) = 3 
    [1460.000, 1470.000) = 2 
    [1470.000, 1480.000) = 0 
    [1480.000, 1490.000) = 1 
    [1490.000, 1500.000) = 0 
    [1500.000, 1510.000) = 3 
    [1510.000, 1520.000) = 12 
    [1520.000, 1530.000) = 32 
    [1530.000, 1540.000) = 15 

  Percentiles, ms/op:
      p(0.0000) =   1451.229 ms/op
     p(50.0000) =   1526.727 ms/op
     p(90.0000) =   1533.018 ms/op
     p(95.0000) =   1537.003 ms/op
     p(99.0000) =   1549.795 ms/op
     p(99.9000) =   1549.795 ms/op
     p(99.9900) =   1549.795 ms/op
     p(99.9990) =   1549.795 ms/op
     p(99.9999) =   1549.795 ms/op
    p(100.0000) =   1549.795 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 43.33% complete, ETA 07:59:29
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

82.432 ±(99.9%) 11.991 ms/op
# Warmup Iteration   2: 79.963 ±(99.9%) 0.368 ms/op
# Warmup Iteration   3: 79.184 ±(99.9%) 0.294 ms/op
# Warmup Iteration   4: 79.348 ±(99.9%) 0.353 ms/op
# Warmup Iteration   5: 76.444 ±(99.9%) 0.448 ms/op
Iteration   1: 75.658 ±(99.9%) 0.448 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   75.629 ms/op
                 executeFilterQuery·p0.90:   77.857 ms/op
                 executeFilterQuery·p0.95:   78.302 ms/op
                 executeFilterQuery·p0.99:   79.660 ms/op
                 executeFilterQuery·p0.999:  79.954 ms/op
                 executeFilterQuery·p0.9999: 79.954 ms/op
                 executeFilterQuery·p1.00:   79.954 ms/op

Iteration   2: 76.110 ±(99.9%) 0.515 ms/op
                 executeFilterQuery·p0.00:   71.041 ms/op
                 executeFilterQuery·p0.50:   76.022 ms/op
                 executeFilterQuery·p0.90:   78.643 ms/op
                 executeFilterQuery·p0.95:   78.905 ms/op
                 executeFilterQuery·p0.99:   80.316 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op

Iteration   3: 78.445 ±(99.9%) 0.525 ms/op
                 executeFilterQuery·p0.00:   74.842 ms/op
                 executeFilterQuery·p0.50:   78.643 ms/op
                 executeFilterQuery·p0.90:   80.137 ms/op
                 executeFilterQuery·p0.95:   80.662 ms/op
                 executeFilterQuery·p0.99:   86.987 ms/op
                 executeFilterQuery·p0.999:  88.998 ms/op
                 executeFilterQuery·p0.9999: 88.998 ms/op
                 executeFilterQuery·p1.00:   88.998 ms/op

Iteration   4: 76.193 ±(99.9%) 0.425 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   76.153 ms/op
                 executeFilterQuery·p0.90:   77.962 ms/op
                 executeFilterQuery·p0.95:   78.696 ms/op
                 executeFilterQuery·p0.99:   80.227 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op

Iteration   5: 74.955 ±(99.9%) 0.367 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   74.973 ms/op
                 executeFilterQuery·p0.90:   76.546 ms/op
                 executeFilterQuery·p0.95:   77.247 ms/op
                 executeFilterQuery·p0.99:   79.348 ms/op
                 executeFilterQuery·p0.999:  79.954 ms/op
                 executeFilterQuery·p0.9999: 79.954 ms/op
                 executeFilterQuery·p1.00:   79.954 ms/op


# Run progress: 43.89% complete, ETA 07:50:57
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

78.226 ±(99.9%) 2.804 ms/op
# Warmup Iteration   2: 75.992 ±(99.9%) 0.819 ms/op
# Warmup Iteration   3: 77.754 ±(99.9%) 0.389 ms/op
# Warmup Iteration   4: 76.918 ±(99.9%) 0.409 ms/op
# Warmup Iteration   5: 78.628 ±(99.9%) 0.517 ms/op
Iteration   1: 75.769 ±(99.9%) 0.540 ms/op
                 executeFilterQuery·p0.00:   72.221 ms/op
                 executeFilterQuery·p0.50:   75.235 ms/op
                 executeFilterQuery·p0.90:   78.591 ms/op
                 executeFilterQuery·p0.95:   79.377 ms/op
                 executeFilterQuery·p0.99:   81.186 ms/op
                 executeFilterQuery·p0.999:  81.396 ms/op
                 executeFilterQuery·p0.9999: 81.396 ms/op
                 executeFilterQuery·p1.00:   81.396 ms/op

Iteration   2: 76.137 ±(99.9%) 0.461 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   76.153 ms/op
                 executeFilterQuery·p0.90:   78.119 ms/op
                 executeFilterQuery·p0.95:   79.095 ms/op
                 executeFilterQuery·p0.99:   80.113 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op

Iteration   3: 75.961 ±(99.9%) 0.429 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   75.760 ms/op
                 executeFilterQuery·p0.90:   77.844 ms/op
                 executeFilterQuery·p0.95:   78.702 ms/op
                 executeFilterQuery·p0.99:   80.487 ms/op
                 executeFilterQuery·p0.999:  80.609 ms/op
                 executeFilterQuery·p0.9999: 80.609 ms/op
                 executeFilterQuery·p1.00:   80.609 ms/op

Iteration   4: 76.417 ±(99.9%) 0.614 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   76.022 ms/op
                 executeFilterQuery·p0.90:   79.430 ms/op
                 executeFilterQuery·p0.95:   80.013 ms/op
                 executeFilterQuery·p0.99:   83.363 ms/op
                 executeFilterQuery·p0.999:  84.541 ms/op
                 executeFilterQuery·p0.9999: 84.541 ms/op
                 executeFilterQuery·p1.00:   84.541 ms/op

Iteration   5: 75.643 ±(99.9%) 0.272 ms/op
                 executeFilterQuery·p0.00:   73.400 ms/op
                 executeFilterQuery·p0.50:   75.629 ms/op
                 executeFilterQuery·p0.90:   76.808 ms/op
                 executeFilterQuery·p0.95:   77.201 ms/op
                 executeFilterQuery·p0.99:   77.511 ms/op
                 executeFilterQuery·p0.999:  77.595 ms/op
                 executeFilterQuery·p0.9999: 77.595 ms/op
                 executeFilterQuery·p1.00:   77.595 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1301
  mean =     76.117 ±(99.9%) 0.164 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 1 
    [71.250, 72.500) = 6 
    [72.500, 73.750) = 60 
    [73.750, 75.000) = 336 
    [75.000, 76.250) = 350 
    [76.250, 77.500) = 274 
    [77.500, 78.750) = 152 
    [78.750, 80.000) = 91 
    [80.000, 81.250) = 27 
    [81.250, 82.500) = 2 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 1 
    [85.000, 86.250) = 0 
    [86.250, 87.500) = 0 
    [87.500, 88.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     71.041 ms/op
     p(50.0000) =     75.891 ms/op
     p(90.0000) =     78.643 ms/op
     p(95.0000) =     79.430 ms/op
     p(99.0000) =     80.478 ms/op
     p(99.9000) =     87.652 ms/op
     p(99.9900) =     88.998 ms/op
     p(99.9990) =     88.998 ms/op
     p(99.9999) =     88.998 ms/op
    p(100.0000) =     88.998 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 44.44% complete, ETA 07:42:36
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

81.444 ±(99.9%) 10.440 ms/op
# Warmup Iteration   2: 76.840 ±(99.9%) 0.556 ms/op
# Warmup Iteration   3: 78.873 ±(99.9%) 0.419 ms/op
# Warmup Iteration   4: 78.524 ±(99.9%) 0.442 ms/op
# Warmup Iteration   5: 76.877 ±(99.9%) 0.334 ms/op
Iteration   1: 76.799 ±(99.9%) 0.470 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   77.201 ms/op
                 executeFilterQuery·p0.90:   78.512 ms/op
                 executeFilterQuery·p0.95:   78.643 ms/op
                 executeFilterQuery·p0.99:   79.299 ms/op
                 executeFilterQuery·p0.999:  79.299 ms/op
                 executeFilterQuery·p0.9999: 79.299 ms/op
                 executeFilterQuery·p1.00:   79.299 ms/op

Iteration   2: 75.120 ±(99.9%) 0.458 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   75.104 ms/op
                 executeFilterQuery·p0.90:   77.595 ms/op
                 executeFilterQuery·p0.95:   77.857 ms/op
                 executeFilterQuery·p0.99:   78.250 ms/op
                 executeFilterQuery·p0.999:  78.250 ms/op
                 executeFilterQuery·p0.9999: 78.250 ms/op
                 executeFilterQuery·p1.00:   78.250 ms/op

Iteration   3: 75.032 ±(99.9%) 0.490 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   74.711 ms/op
                 executeFilterQuery·p0.90:   77.726 ms/op
                 executeFilterQuery·p0.95:   78.211 ms/op
                 executeFilterQuery·p0.99:   79.781 ms/op
                 executeFilterQuery·p0.999:  79.954 ms/op
                 executeFilterQuery·p0.9999: 79.954 ms/op
                 executeFilterQuery·p1.00:   79.954 ms/op

Iteration   4: 75.192 ±(99.9%) 0.472 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   75.104 ms/op
                 executeFilterQuery·p0.90:   77.555 ms/op
                 executeFilterQuery·p0.95:   78.342 ms/op
                 executeFilterQuery·p0.99:   79.167 ms/op
                 executeFilterQuery·p0.999:  79.167 ms/op
                 executeFilterQuery·p0.9999: 79.167 ms/op
                 executeFilterQuery·p1.00:   79.167 ms/op

Iteration   5: 74.606 ±(99.9%) 0.525 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   74.580 ms/op
                 executeFilterQuery·p0.90:   76.494 ms/op
                 executeFilterQuery·p0.95:   77.634 ms/op
                 executeFilterQuery·p0.99:   84.313 ms/op
                 executeFilterQuery·p0.999:  87.032 ms/op
                 executeFilterQuery·p0.9999: 87.032 ms/op
                 executeFilterQuery·p1.00:   87.032 ms/op


# Run progress: 45.00% complete, ETA 07:34:25
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

79.234 ±(99.9%) 3.200 ms/op
# Warmup Iteration   2: 76.164 ±(99.9%) 0.613 ms/op
# Warmup Iteration   3: 79.363 ±(99.9%) 0.281 ms/op
# Warmup Iteration   4: 79.202 ±(99.9%) 0.329 ms/op
# Warmup Iteration   5: 78.902 ±(99.9%) 0.310 ms/op
Iteration   1: 78.711 ±(99.9%) 0.252 ms/op
                 executeFilterQuery·p0.00:   77.332 ms/op
                 executeFilterQuery·p0.50:   78.381 ms/op
                 executeFilterQuery·p0.90:   80.059 ms/op
                 executeFilterQuery·p0.95:   80.439 ms/op
                 executeFilterQuery·p0.99:   81.134 ms/op
                 executeFilterQuery·p0.999:  81.134 ms/op
                 executeFilterQuery·p0.9999: 81.134 ms/op
                 executeFilterQuery·p1.00:   81.134 ms/op

Iteration   2: 79.035 ±(99.9%) 0.679 ms/op
                 executeFilterQuery·p0.00:   77.201 ms/op
                 executeFilterQuery·p0.50:   78.512 ms/op
                 executeFilterQuery·p0.90:   80.478 ms/op
                 executeFilterQuery·p0.95:   80.609 ms/op
                 executeFilterQuery·p0.99:   96.105 ms/op
                 executeFilterQuery·p0.999:  101.319 ms/op
                 executeFilterQuery·p0.9999: 101.319 ms/op
                 executeFilterQuery·p1.00:   101.319 ms/op

Iteration   3: 77.285 ±(99.9%) 0.627 ms/op
                 executeFilterQuery·p0.00:   74.318 ms/op
                 executeFilterQuery·p0.50:   77.726 ms/op
                 executeFilterQuery·p0.90:   79.430 ms/op
                 executeFilterQuery·p0.95:   79.561 ms/op
                 executeFilterQuery·p0.99:   86.062 ms/op
                 executeFilterQuery·p0.999:  88.343 ms/op
                 executeFilterQuery·p0.9999: 88.343 ms/op
                 executeFilterQuery·p1.00:   88.343 ms/op

Iteration   4: 75.667 ±(99.9%) 0.331 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   75.497 ms/op
                 executeFilterQuery·p0.90:   77.201 ms/op
                 executeFilterQuery·p0.95:   77.332 ms/op
                 executeFilterQuery·p0.99:   79.789 ms/op
                 executeFilterQuery·p0.999:  80.740 ms/op
                 executeFilterQuery·p0.9999: 80.740 ms/op
                 executeFilterQuery·p1.00:   80.740 ms/op

Iteration   5: 75.488 ±(99.9%) 0.309 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   75.235 ms/op
                 executeFilterQuery·p0.90:   77.070 ms/op
                 executeFilterQuery·p0.95:   77.201 ms/op
                 executeFilterQuery·p0.99:   77.595 ms/op
                 executeFilterQuery·p0.999:  77.595 ms/op
                 executeFilterQuery·p0.9999: 77.595 ms/op
                 executeFilterQuery·p1.00:   77.595 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1299
  mean =     76.260 ±(99.9%) 0.201 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 6 
    [ 72.500,  75.000) = 417 
    [ 75.000,  77.500) = 480 
    [ 77.500,  80.000) = 354 
    [ 80.000,  82.500) = 39 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 1 
    [ 87.500,  90.000) = 1 
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 
    [ 97.500, 100.000) = 0 
    [100.000, 102.500) = 1 
    [102.500, 105.000) = 0 
    [105.000, 107.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.352 ms/op
     p(50.0000) =     76.022 ms/op
     p(90.0000) =     79.036 ms/op
     p(95.0000) =     79.561 ms/op
     p(99.0000) =     80.478 ms/op
     p(99.9000) =     97.426 ms/op
     p(99.9900) =    101.319 ms/op
     p(99.9990) =    101.319 ms/op
     p(99.9999) =    101.319 ms/op
    p(100.0000) =    101.319 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 45.56% complete, ETA 07:26:23
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

110.829 ±(99.9%) 13.608 ms/op
# Warmup Iteration   2: 117.072 ±(99.9%) 0.492 ms/op
# Warmup Iteration   3: 116.922 ±(99.9%) 0.308 ms/op
# Warmup Iteration   4: 116.881 ±(99.9%) 0.242 ms/op
# Warmup Iteration   5: 116.969 ±(99.9%) 0.160 ms/op
Iteration   1: 117.050 ±(99.9%) 0.166 ms/op
                 executeFilterQuery·p0.00:   116.130 ms/op
                 executeFilterQuery·p0.50:   117.047 ms/op
                 executeFilterQuery·p0.90:   117.572 ms/op
                 executeFilterQuery·p0.95:   117.703 ms/op
                 executeFilterQuery·p0.99:   118.096 ms/op
                 executeFilterQuery·p0.999:  118.096 ms/op
                 executeFilterQuery·p0.9999: 118.096 ms/op
                 executeFilterQuery·p1.00:   118.096 ms/op

Iteration   2: 116.811 ±(99.9%) 0.146 ms/op
                 executeFilterQuery·p0.00:   116.261 ms/op
                 executeFilterQuery·p0.50:   116.654 ms/op
                 executeFilterQuery·p0.90:   117.309 ms/op
                 executeFilterQuery·p0.95:   117.663 ms/op
                 executeFilterQuery·p0.99:   118.096 ms/op
                 executeFilterQuery·p0.999:  118.096 ms/op
                 executeFilterQuery·p0.9999: 118.096 ms/op
                 executeFilterQuery·p1.00:   118.096 ms/op

Iteration   3: 117.380 ±(99.9%) 0.456 ms/op
                 executeFilterQuery·p0.00:   116.392 ms/op
                 executeFilterQuery·p0.50:   117.309 ms/op
                 executeFilterQuery·p0.90:   117.755 ms/op
                 executeFilterQuery·p0.95:   117.834 ms/op
                 executeFilterQuery·p0.99:   127.926 ms/op
                 executeFilterQuery·p0.999:  127.926 ms/op
                 executeFilterQuery·p0.9999: 127.926 ms/op
                 executeFilterQuery·p1.00:   127.926 ms/op

Iteration   4: 117.222 ±(99.9%) 0.133 ms/op
                 executeFilterQuery·p0.00:   116.523 ms/op
                 executeFilterQuery·p0.50:   117.178 ms/op
                 executeFilterQuery·p0.90:   117.703 ms/op
                 executeFilterQuery·p0.95:   117.794 ms/op
                 executeFilterQuery·p0.99:   118.227 ms/op
                 executeFilterQuery·p0.999:  118.227 ms/op
                 executeFilterQuery·p0.9999: 118.227 ms/op
                 executeFilterQuery·p1.00:   118.227 ms/op

Iteration   5: 117.276 ±(99.9%) 0.125 ms/op
                 executeFilterQuery·p0.00:   116.654 ms/op
                 executeFilterQuery·p0.50:   117.309 ms/op
                 executeFilterQuery·p0.90:   117.703 ms/op
                 executeFilterQuery·p0.95:   117.834 ms/op
                 executeFilterQuery·p0.99:   117.965 ms/op
                 executeFilterQuery·p0.999:  117.965 ms/op
                 executeFilterQuery·p0.9999: 117.965 ms/op
                 executeFilterQuery·p1.00:   117.965 ms/op


# Run progress: 46.11% complete, ETA 07:18:31
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

108.886 ±(99.9%) 4.694 ms/op
# Warmup Iteration   2: 119.012 ±(99.9%) 0.466 ms/op
# Warmup Iteration   3: 118.903 ±(99.9%) 0.158 ms/op
# Warmup Iteration   4: 118.882 ±(99.9%) 0.158 ms/op
# Warmup Iteration   5: 119.054 ±(99.9%) 0.146 ms/op
Iteration   1: 118.867 ±(99.9%) 0.123 ms/op
                 executeFilterQuery·p0.00:   118.358 ms/op
                 executeFilterQuery·p0.50:   118.882 ms/op
                 executeFilterQuery·p0.90:   119.407 ms/op
                 executeFilterQuery·p0.95:   119.538 ms/op
                 executeFilterQuery·p0.99:   119.669 ms/op
                 executeFilterQuery·p0.999:  119.669 ms/op
                 executeFilterQuery·p0.9999: 119.669 ms/op
                 executeFilterQuery·p1.00:   119.669 ms/op

Iteration   2: 118.832 ±(99.9%) 0.131 ms/op
                 executeFilterQuery·p0.00:   118.227 ms/op
                 executeFilterQuery·p0.50:   118.751 ms/op
                 executeFilterQuery·p0.90:   119.472 ms/op
                 executeFilterQuery·p0.95:   119.538 ms/op
                 executeFilterQuery·p0.99:   120.062 ms/op
                 executeFilterQuery·p0.999:  120.062 ms/op
                 executeFilterQuery·p0.9999: 120.062 ms/op
                 executeFilterQuery·p1.00:   120.062 ms/op

Iteration   3: 118.832 ±(99.9%) 0.135 ms/op
                 executeFilterQuery·p0.00:   118.358 ms/op
                 executeFilterQuery·p0.50:   118.751 ms/op
                 executeFilterQuery·p0.90:   119.407 ms/op
                 executeFilterQuery·p0.95:   119.669 ms/op
                 executeFilterQuery·p0.99:   120.193 ms/op
                 executeFilterQuery·p0.999:  120.193 ms/op
                 executeFilterQuery·p0.9999: 120.193 ms/op
                 executeFilterQuery·p1.00:   120.193 ms/op

Iteration   4: 118.615 ±(99.9%) 0.148 ms/op
                 executeFilterQuery·p0.00:   117.965 ms/op
                 executeFilterQuery·p0.50:   118.620 ms/op
                 executeFilterQuery·p0.90:   119.144 ms/op
                 executeFilterQuery·p0.95:   119.538 ms/op
                 executeFilterQuery·p0.99:   119.669 ms/op
                 executeFilterQuery·p0.999:  119.669 ms/op
                 executeFilterQuery·p0.9999: 119.669 ms/op
                 executeFilterQuery·p1.00:   119.669 ms/op

Iteration   5: 118.264 ±(99.9%) 0.089 ms/op
                 executeFilterQuery·p0.00:   117.834 ms/op
                 executeFilterQuery·p0.50:   118.227 ms/op
                 executeFilterQuery·p0.90:   118.620 ms/op
                 executeFilterQuery·p0.95:   118.751 ms/op
                 executeFilterQuery·p0.99:   118.751 ms/op
                 executeFilterQuery·p0.999:  118.751 ms/op
                 executeFilterQuery·p0.9999: 118.751 ms/op
                 executeFilterQuery·p1.00:   118.751 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 845
  mean =    117.910 ±(99.9%) 0.108 ms/op

  Histogram, ms/op:
    [110.000, 111.250) = 0 
    [111.250, 112.500) = 0 
    [112.500, 113.750) = 0 
    [113.750, 115.000) = 0 
    [115.000, 116.250) = 1 
    [116.250, 117.500) = 324 
    [117.500, 118.750) = 327 
    [118.750, 120.000) = 190 
    [120.000, 121.250) = 2 
    [121.250, 122.500) = 0 
    [122.500, 123.750) = 0 
    [123.750, 125.000) = 0 
    [125.000, 126.250) = 0 
    [126.250, 127.500) = 0 
    [127.500, 128.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =    116.130 ms/op
     p(50.0000) =    117.965 ms/op
     p(90.0000) =    119.013 ms/op
     p(95.0000) =    119.236 ms/op
     p(99.0000) =    119.669 ms/op
     p(99.9000) =    127.926 ms/op
     p(99.9900) =    127.926 ms/op
     p(99.9990) =    127.926 ms/op
     p(99.9999) =    127.926 ms/op
    p(100.0000) =    127.926 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 46.67% complete, ETA 07:10:47
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1109.393 ±(99.9%) 1693.153 ms/op
# Warmup Iteration   2: 745.388 ±(99.9%) 13.478 ms/op
# Warmup Iteration   3: 758.420 ±(99.9%) 21.065 ms/op
# Warmup Iteration   4: 768.929 ±(99.9%) 3.781 ms/op
# Warmup Iteration   5: 770.703 ±(99.9%) 6.000 ms/op
Iteration   1: 768.687 ±(99.9%) 5.113 ms/op
                 executeFilterQuery·p0.00:   764.412 ms/op
                 executeFilterQuery·p0.50:   766.509 ms/op
                 executeFilterQuery·p0.90:   776.995 ms/op
                 executeFilterQuery·p0.95:   779.092 ms/op
                 executeFilterQuery·p0.99:   779.092 ms/op
                 executeFilterQuery·p0.999:  779.092 ms/op
                 executeFilterQuery·p0.9999: 779.092 ms/op
                 executeFilterQuery·p1.00:   779.092 ms/op

Iteration   2: 765.236 ±(99.9%) 6.742 ms/op
                 executeFilterQuery·p0.00:   754.975 ms/op
                 executeFilterQuery·p0.50:   767.558 ms/op
                 executeFilterQuery·p0.90:   772.801 ms/op
                 executeFilterQuery·p0.95:   773.849 ms/op
                 executeFilterQuery·p0.99:   773.849 ms/op
                 executeFilterQuery·p0.999:  773.849 ms/op
                 executeFilterQuery·p0.9999: 773.849 ms/op
                 executeFilterQuery·p1.00:   773.849 ms/op

Iteration   3: 772.881 ±(99.9%) 5.485 ms/op
                 executeFilterQuery·p0.00:   764.412 ms/op
                 executeFilterQuery·p0.50:   773.849 ms/op
                 executeFilterQuery·p0.90:   777.624 ms/op
                 executeFilterQuery·p0.95:   778.043 ms/op
                 executeFilterQuery·p0.99:   778.043 ms/op
                 executeFilterQuery·p0.999:  778.043 ms/op
                 executeFilterQuery·p0.9999: 778.043 ms/op
                 executeFilterQuery·p1.00:   778.043 ms/op

Iteration   4: 765.299 ±(99.9%) 15.766 ms/op
                 executeFilterQuery·p0.00:   741.343 ms/op
                 executeFilterQuery·p0.50:   772.801 ms/op
                 executeFilterQuery·p0.90:   775.946 ms/op
                 executeFilterQuery·p0.95:   775.946 ms/op
                 executeFilterQuery·p0.99:   775.946 ms/op
                 executeFilterQuery·p0.999:  775.946 ms/op
                 executeFilterQuery·p0.9999: 775.946 ms/op
                 executeFilterQuery·p1.00:   775.946 ms/op

Iteration   5: 729.135 ±(99.9%) 19.122 ms/op
                 executeFilterQuery·p0.00:   708.837 ms/op
                 executeFilterQuery·p0.50:   726.663 ms/op
                 executeFilterQuery·p0.90:   756.023 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op


# Run progress: 47.22% complete, ETA 07:03:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

768.364 ±(99.9%) 54.577 ms/op
# Warmup Iteration   2: 745.163 ±(99.9%) 15.813 ms/op
# Warmup Iteration   3: 770.623 ±(99.9%) 11.740 ms/op
# Warmup Iteration   4: 769.816 ±(99.9%) 6.127 ms/op
# Warmup Iteration   5: 772.155 ±(99.9%) 3.572 ms/op
Iteration   1: 763.963 ±(99.9%) 8.399 ms/op
                 executeFilterQuery·p0.00:   751.829 ms/op
                 executeFilterQuery·p0.50:   765.460 ms/op
                 executeFilterQuery·p0.90:   771.752 ms/op
                 executeFilterQuery·p0.95:   771.752 ms/op
                 executeFilterQuery·p0.99:   771.752 ms/op
                 executeFilterQuery·p0.999:  771.752 ms/op
                 executeFilterQuery·p0.9999: 771.752 ms/op
                 executeFilterQuery·p1.00:   771.752 ms/op

Iteration   2: 766.025 ±(99.9%) 8.323 ms/op
                 executeFilterQuery·p0.00:   746.586 ms/op
                 executeFilterQuery·p0.50:   768.606 ms/op
                 executeFilterQuery·p0.90:   772.381 ms/op
                 executeFilterQuery·p0.95:   772.801 ms/op
                 executeFilterQuery·p0.99:   772.801 ms/op
                 executeFilterQuery·p0.999:  772.801 ms/op
                 executeFilterQuery·p0.9999: 772.801 ms/op
                 executeFilterQuery·p1.00:   772.801 ms/op

Iteration   3: 769.977 ±(99.9%) 2.479 ms/op
                 executeFilterQuery·p0.00:   766.509 ms/op
                 executeFilterQuery·p0.50:   770.703 ms/op
                 executeFilterQuery·p0.90:   772.801 ms/op
                 executeFilterQuery·p0.95:   772.801 ms/op
                 executeFilterQuery·p0.99:   772.801 ms/op
                 executeFilterQuery·p0.999:  772.801 ms/op
                 executeFilterQuery·p0.9999: 772.801 ms/op
                 executeFilterQuery·p1.00:   772.801 ms/op

Iteration   4: 762.165 ±(99.9%) 9.719 ms/op
                 executeFilterQuery·p0.00:   746.586 ms/op
                 executeFilterQuery·p0.50:   766.509 ms/op
                 executeFilterQuery·p0.90:   771.228 ms/op
                 executeFilterQuery·p0.95:   771.752 ms/op
                 executeFilterQuery·p0.99:   771.752 ms/op
                 executeFilterQuery·p0.999:  771.752 ms/op
                 executeFilterQuery·p0.9999: 771.752 ms/op
                 executeFilterQuery·p1.00:   771.752 ms/op

Iteration   5: 738.422 ±(99.9%) 4.406 ms/op
                 executeFilterQuery·p0.00:   734.003 ms/op
                 executeFilterQuery·p0.50:   738.198 ms/op
                 executeFilterQuery·p0.90:   745.013 ms/op
                 executeFilterQuery·p0.95:   748.683 ms/op
                 executeFilterQuery·p0.99:   748.683 ms/op
                 executeFilterQuery·p0.999:  748.683 ms/op
                 executeFilterQuery·p0.9999: 748.683 ms/op
                 executeFilterQuery·p1.00:   748.683 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 135
  mean =    759.868 ±(99.9%) 4.684 ms/op

  Histogram, ms/op:
    [700.000, 705.000) = 0 
    [705.000, 710.000) = 3 
    [710.000, 715.000) = 1 
    [715.000, 720.000) = 0 
    [720.000, 725.000) = 3 
    [725.000, 730.000) = 0 
    [730.000, 735.000) = 5 
    [735.000, 740.000) = 8 
    [740.000, 745.000) = 6 
    [745.000, 750.000) = 6 
    [750.000, 755.000) = 8 
    [755.000, 760.000) = 5 
    [760.000, 765.000) = 12 
    [765.000, 770.000) = 38 
    [770.000, 775.000) = 32 

  Percentiles, ms/op:
      p(0.0000) =    708.837 ms/op
     p(50.0000) =    766.509 ms/op
     p(90.0000) =    773.849 ms/op
     p(95.0000) =    775.946 ms/op
     p(99.0000) =    778.714 ms/op
     p(99.9000) =    779.092 ms/op
     p(99.9900) =    779.092 ms/op
     p(99.9990) =    779.092 ms/op
     p(99.9999) =    779.092 ms/op
    p(100.0000) =    779.092 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 47.78% complete, ETA 06:55:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1048.052 ±(99.9%) 1446.787 ms/op
# Warmup Iteration   2: 716.177 ±(99.9%) 14.723 ms/op
# Warmup Iteration   3: 748.833 ±(99.9%) 19.050 ms/op
# Warmup Iteration   4: 756.473 ±(99.9%) 12.838 ms/op
# Warmup Iteration   5: 739.546 ±(99.9%) 1.636 ms/op
Iteration   1: 749.282 ±(99.9%) 11.257 ms/op
                 executeFilterQuery·p0.00:   738.198 ms/op
                 executeFilterQuery·p0.50:   747.635 ms/op
                 executeFilterQuery·p0.90:   765.985 ms/op
                 executeFilterQuery·p0.95:   766.509 ms/op
                 executeFilterQuery·p0.99:   766.509 ms/op
                 executeFilterQuery·p0.999:  766.509 ms/op
                 executeFilterQuery·p0.9999: 766.509 ms/op
                 executeFilterQuery·p1.00:   766.509 ms/op

Iteration   2: 761.191 ±(99.9%) 6.794 ms/op
                 executeFilterQuery·p0.00:   749.732 ms/op
                 executeFilterQuery·p0.50:   762.839 ms/op
                 executeFilterQuery·p0.90:   768.606 ms/op
                 executeFilterQuery·p0.95:   770.703 ms/op
                 executeFilterQuery·p0.99:   770.703 ms/op
                 executeFilterQuery·p0.999:  770.703 ms/op
                 executeFilterQuery·p0.9999: 770.703 ms/op
                 executeFilterQuery·p1.00:   770.703 ms/op

Iteration   3: 754.750 ±(99.9%) 11.498 ms/op
                 executeFilterQuery·p0.00:   739.246 ms/op
                 executeFilterQuery·p0.50:   754.975 ms/op
                 executeFilterQuery·p0.90:   765.460 ms/op
                 executeFilterQuery·p0.95:   765.460 ms/op
                 executeFilterQuery·p0.99:   765.460 ms/op
                 executeFilterQuery·p0.999:  765.460 ms/op
                 executeFilterQuery·p0.9999: 765.460 ms/op
                 executeFilterQuery·p1.00:   765.460 ms/op

Iteration   4: 757.222 ±(99.9%) 17.414 ms/op
                 executeFilterQuery·p0.00:   716.177 ms/op
                 executeFilterQuery·p0.50:   762.839 ms/op
                 executeFilterQuery·p0.90:   767.558 ms/op
                 executeFilterQuery·p0.95:   767.558 ms/op
                 executeFilterQuery·p0.99:   767.558 ms/op
                 executeFilterQuery·p0.999:  767.558 ms/op
                 executeFilterQuery·p0.9999: 767.558 ms/op
                 executeFilterQuery·p1.00:   767.558 ms/op

Iteration   5: 722.094 ±(99.9%) 10.515 ms/op
                 executeFilterQuery·p0.00:   700.449 ms/op
                 executeFilterQuery·p0.50:   726.663 ms/op
                 executeFilterQuery·p0.90:   731.906 ms/op
                 executeFilterQuery·p0.95:   734.003 ms/op
                 executeFilterQuery·p0.99:   734.003 ms/op
                 executeFilterQuery·p0.999:  734.003 ms/op
                 executeFilterQuery·p0.9999: 734.003 ms/op
                 executeFilterQuery·p1.00:   734.003 ms/op


# Run progress: 48.33% complete, ETA 06:48:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

762.015 ±(99.9%) 66.618 ms/op
# Warmup Iteration   2: 734.153 ±(99.9%) 19.084 ms/op
# Warmup Iteration   3: 753.177 ±(99.9%) 17.504 ms/op
# Warmup Iteration   4: 758.420 ±(99.9%) 4.003 ms/op
# Warmup Iteration   5: 757.746 ±(99.9%) 3.521 ms/op
Iteration   1: 756.697 ±(99.9%) 8.650 ms/op
                 executeFilterQuery·p0.00:   737.149 ms/op
                 executeFilterQuery·p0.50:   756.548 ms/op
                 executeFilterQuery·p0.90:   764.412 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   2: 755.499 ±(99.9%) 6.799 ms/op
                 executeFilterQuery·p0.00:   736.100 ms/op
                 executeFilterQuery·p0.50:   756.548 ms/op
                 executeFilterQuery·p0.90:   761.266 ms/op
                 executeFilterQuery·p0.95:   763.363 ms/op
                 executeFilterQuery·p0.99:   763.363 ms/op
                 executeFilterQuery·p0.999:  763.363 ms/op
                 executeFilterQuery·p0.9999: 763.363 ms/op
                 executeFilterQuery·p1.00:   763.363 ms/op

Iteration   3: 761.716 ±(99.9%) 6.289 ms/op
                 executeFilterQuery·p0.00:   754.975 ms/op
                 executeFilterQuery·p0.50:   761.266 ms/op
                 executeFilterQuery·p0.90:   771.228 ms/op
                 executeFilterQuery·p0.95:   779.092 ms/op
                 executeFilterQuery·p0.99:   779.092 ms/op
                 executeFilterQuery·p0.999:  779.092 ms/op
                 executeFilterQuery·p0.9999: 779.092 ms/op
                 executeFilterQuery·p1.00:   779.092 ms/op

Iteration   4: 761.116 ±(99.9%) 7.967 ms/op
                 executeFilterQuery·p0.00:   753.926 ms/op
                 executeFilterQuery·p0.50:   760.742 ms/op
                 executeFilterQuery·p0.90:   773.325 ms/op
                 executeFilterQuery·p0.95:   781.189 ms/op
                 executeFilterQuery·p0.99:   781.189 ms/op
                 executeFilterQuery·p0.999:  781.189 ms/op
                 executeFilterQuery·p0.9999: 781.189 ms/op
                 executeFilterQuery·p1.00:   781.189 ms/op

Iteration   5: 717.451 ±(99.9%) 16.832 ms/op
                 executeFilterQuery·p0.00:   703.594 ms/op
                 executeFilterQuery·p0.50:   710.410 ms/op
                 executeFilterQuery·p0.90:   747.635 ms/op
                 executeFilterQuery·p0.95:   748.683 ms/op
                 executeFilterQuery·p0.99:   748.683 ms/op
                 executeFilterQuery·p0.999:  748.683 ms/op
                 executeFilterQuery·p0.9999: 748.683 ms/op
                 executeFilterQuery·p1.00:   748.683 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 140
  mean =    749.702 ±(99.9%) 5.155 ms/op

  Histogram, ms/op:
    [700.000, 705.000) = 3 
    [705.000, 710.000) = 5 
    [710.000, 715.000) = 2 
    [715.000, 720.000) = 7 
    [720.000, 725.000) = 0 
    [725.000, 730.000) = 10 
    [730.000, 735.000) = 1 
    [735.000, 740.000) = 5 
    [740.000, 745.000) = 7 
    [745.000, 750.000) = 8 
    [750.000, 755.000) = 15 
    [755.000, 760.000) = 22 
    [760.000, 765.000) = 38 
    [765.000, 770.000) = 14 
    [770.000, 775.000) = 1 
    [775.000, 780.000) = 1 
    [780.000, 785.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    700.449 ms/op
     p(50.0000) =    756.023 ms/op
     p(90.0000) =    765.460 ms/op
     p(95.0000) =    766.509 ms/op
     p(99.0000) =    780.329 ms/op
     p(99.9000) =    781.189 ms/op
     p(99.9900) =    781.189 ms/op
     p(99.9990) =    781.189 ms/op
     p(99.9999) =    781.189 ms/op
    p(100.0000) =    781.189 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 48.89% complete, ETA 06:41:28
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1375.338 ±(99.9%) 1765.787 ms/op
# Warmup Iteration   2: 1167.182 ±(99.9%) 3.984 ms/op
# Warmup Iteration   3: 1169.512 ±(99.9%) 7.476 ms/op
# Warmup Iteration   4: 1169.046 ±(99.9%) 6.619 ms/op
# Warmup Iteration   5: 1166.017 ±(99.9%) 3.940 ms/op
Iteration   1: 1169.512 ±(99.9%) 6.353 ms/op
                 executeFilterQuery·p0.00:   1166.017 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1178.599 ms/op
                 executeFilterQuery·p0.95:   1178.599 ms/op
                 executeFilterQuery·p0.99:   1178.599 ms/op
                 executeFilterQuery·p0.999:  1178.599 ms/op
                 executeFilterQuery·p0.9999: 1178.599 ms/op
                 executeFilterQuery·p1.00:   1178.599 ms/op

Iteration   2: 1170.677 ±(99.9%) 6.999 ms/op
                 executeFilterQuery·p0.00:   1166.017 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1178.599 ms/op
                 executeFilterQuery·p0.95:   1178.599 ms/op
                 executeFilterQuery·p0.99:   1178.599 ms/op
                 executeFilterQuery·p0.999:  1178.599 ms/op
                 executeFilterQuery·p0.9999: 1178.599 ms/op
                 executeFilterQuery·p1.00:   1178.599 ms/op

Iteration   3: 1168.580 ±(99.9%) 4.235 ms/op
                 executeFilterQuery·p0.00:   1166.017 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1172.308 ms/op
                 executeFilterQuery·p0.95:   1172.308 ms/op
                 executeFilterQuery·p0.99:   1172.308 ms/op
                 executeFilterQuery·p0.999:  1172.308 ms/op
                 executeFilterQuery·p0.9999: 1172.308 ms/op
                 executeFilterQuery·p1.00:   1172.308 ms/op

Iteration   4: 1167.881 ±(99.9%) 5.695 ms/op
                 executeFilterQuery·p0.00:   1163.919 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1174.405 ms/op
                 executeFilterQuery·p0.95:   1174.405 ms/op
                 executeFilterQuery·p0.99:   1174.405 ms/op
                 executeFilterQuery·p0.999:  1174.405 ms/op
                 executeFilterQuery·p0.9999: 1174.405 ms/op
                 executeFilterQuery·p1.00:   1174.405 ms/op

Iteration   5: 1167.881 ±(99.9%) 4.473 ms/op
                 executeFilterQuery·p0.00:   1163.919 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1172.308 ms/op
                 executeFilterQuery·p0.95:   1172.308 ms/op
                 executeFilterQuery·p0.99:   1172.308 ms/op
                 executeFilterQuery·p0.999:  1172.308 ms/op
                 executeFilterQuery·p0.9999: 1172.308 ms/op
                 executeFilterQuery·p1.00:   1172.308 ms/op


# Run progress: 49.44% complete, ETA 06:34:29
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1085.381 ±(99.9%) 138.537 ms/op
# Warmup Iteration   2: 1179.998 ±(99.9%) 7.265 ms/op
# Warmup Iteration   3: 1176.502 ±(99.9%) 2.492 ms/op
# Warmup Iteration   4: 1182.095 ±(99.9%) 29.955 ms/op
# Warmup Iteration   5: 1174.638 ±(99.9%) 4.111 ms/op
Iteration   1: 1175.803 ±(99.9%) 6.824 ms/op
                 executeFilterQuery·p0.00:   1172.308 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1184.891 ms/op
                 executeFilterQuery·p0.95:   1184.891 ms/op
                 executeFilterQuery·p0.99:   1184.891 ms/op
                 executeFilterQuery·p0.999:  1184.891 ms/op
                 executeFilterQuery·p0.9999: 1184.891 ms/op
                 executeFilterQuery·p1.00:   1184.891 ms/op

Iteration   2: 1174.638 ±(99.9%) 4.808 ms/op
                 executeFilterQuery·p0.00:   1172.308 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1180.697 ms/op
                 executeFilterQuery·p0.95:   1180.697 ms/op
                 executeFilterQuery·p0.99:   1180.697 ms/op
                 executeFilterQuery·p0.999:  1180.697 ms/op
                 executeFilterQuery·p0.9999: 1180.697 ms/op
                 executeFilterQuery·p1.00:   1180.697 ms/op

Iteration   3: 1175.337 ±(99.9%) 2.560 ms/op
                 executeFilterQuery·p0.00:   1172.308 ms/op
                 executeFilterQuery·p0.50:   1176.502 ms/op
                 executeFilterQuery·p0.90:   1176.502 ms/op
                 executeFilterQuery·p0.95:   1176.502 ms/op
                 executeFilterQuery·p0.99:   1176.502 ms/op
                 executeFilterQuery·p0.999:  1176.502 ms/op
                 executeFilterQuery·p0.9999: 1176.502 ms/op
                 executeFilterQuery·p1.00:   1176.502 ms/op

Iteration   4: 1175.337 ±(99.9%) 1.857 ms/op
                 executeFilterQuery·p0.00:   1174.405 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1176.502 ms/op
                 executeFilterQuery·p0.95:   1176.502 ms/op
                 executeFilterQuery·p0.99:   1176.502 ms/op
                 executeFilterQuery·p0.999:  1176.502 ms/op
                 executeFilterQuery·p0.9999: 1176.502 ms/op
                 executeFilterQuery·p1.00:   1176.502 ms/op

Iteration   5: 1175.337 ±(99.9%) 3.108 ms/op
                 executeFilterQuery·p0.00:   1172.308 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1178.599 ms/op
                 executeFilterQuery·p0.95:   1178.599 ms/op
                 executeFilterQuery·p0.99:   1178.599 ms/op
                 executeFilterQuery·p0.999:  1178.599 ms/op
                 executeFilterQuery·p0.9999: 1178.599 ms/op
                 executeFilterQuery·p1.00:   1178.599 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 90
  mean =   1172.098 ±(99.9%) 1.559 ms/op

  Histogram, ms/op:
    [1160.000, 1162.500) = 0 
    [1162.500, 1165.000) = 3 
    [1165.000, 1167.500) = 11 
    [1167.500, 1170.000) = 14 
    [1170.000, 1172.500) = 21 
    [1172.500, 1175.000) = 19 
    [1175.000, 1177.500) = 16 
    [1177.500, 1180.000) = 4 
    [1180.000, 1182.500) = 1 
    [1182.500, 1185.000) = 1 
    [1185.000, 1187.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1163.919 ms/op
     p(50.0000) =   1172.308 ms/op
     p(90.0000) =   1176.502 ms/op
     p(95.0000) =   1178.599 ms/op
     p(99.0000) =   1184.891 ms/op
     p(99.9000) =   1184.891 ms/op
     p(99.9900) =   1184.891 ms/op
     p(99.9990) =   1184.891 ms/op
     p(99.9999) =   1184.891 ms/op
    p(100.0000) =   1184.891 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 50.00% complete, ETA 06:27:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3500.846 ±(99.9%) 62914.210 ms/op
# Warmup Iteration   2: 1424.865 ±(99.9%) 61.996 ms/op
# Warmup Iteration   3: 1454.525 ±(99.9%) 81.848 ms/op
# Warmup Iteration   4: 1482.387 ±(99.9%) 46.071 ms/op
# Warmup Iteration   5: 1489.278 ±(99.9%) 27.192 ms/op
Iteration   1: 1487.780 ±(99.9%) 31.432 ms/op
                 executeFilterQuery·p0.00:   1470.104 ms/op
                 executeFilterQuery·p0.50:   1484.784 ms/op
                 executeFilterQuery·p0.90:   1505.755 ms/op
                 executeFilterQuery·p0.95:   1505.755 ms/op
                 executeFilterQuery·p0.99:   1505.755 ms/op
                 executeFilterQuery·p0.999:  1505.755 ms/op
                 executeFilterQuery·p0.9999: 1505.755 ms/op
                 executeFilterQuery·p1.00:   1505.755 ms/op

Iteration   2: 1472.500 ±(99.9%) 23.996 ms/op
                 executeFilterQuery·p0.00:   1455.423 ms/op
                 executeFilterQuery·p0.50:   1472.201 ms/op
                 executeFilterQuery·p0.90:   1488.978 ms/op
                 executeFilterQuery·p0.95:   1488.978 ms/op
                 executeFilterQuery·p0.99:   1488.978 ms/op
                 executeFilterQuery·p0.999:  1488.978 ms/op
                 executeFilterQuery·p0.9999: 1488.978 ms/op
                 executeFilterQuery·p1.00:   1488.978 ms/op

Iteration   3: 1481.788 ±(99.9%) 31.314 ms/op
                 executeFilterQuery·p0.00:   1472.201 ms/op
                 executeFilterQuery·p0.50:   1472.201 ms/op
                 executeFilterQuery·p0.90:   1503.658 ms/op
                 executeFilterQuery·p0.95:   1503.658 ms/op
                 executeFilterQuery·p0.99:   1503.658 ms/op
                 executeFilterQuery·p0.999:  1503.658 ms/op
                 executeFilterQuery·p0.9999: 1503.658 ms/op
                 executeFilterQuery·p1.00:   1503.658 ms/op

Iteration   4: 1484.784 ±(99.9%) 24.844 ms/op
                 executeFilterQuery·p0.00:   1470.104 ms/op
                 executeFilterQuery·p0.50:   1480.589 ms/op
                 executeFilterQuery·p0.90:   1501.561 ms/op
                 executeFilterQuery·p0.95:   1501.561 ms/op
                 executeFilterQuery·p0.99:   1501.561 ms/op
                 executeFilterQuery·p0.999:  1501.561 ms/op
                 executeFilterQuery·p0.9999: 1501.561 ms/op
                 executeFilterQuery·p1.00:   1501.561 ms/op

Iteration   5: 1434.452 ±(99.9%) 68.663 ms/op
                 executeFilterQuery·p0.00:   1394.606 ms/op
                 executeFilterQuery·p0.50:   1440.743 ms/op
                 executeFilterQuery·p0.90:   1476.395 ms/op
                 executeFilterQuery·p0.95:   1476.395 ms/op
                 executeFilterQuery·p0.99:   1476.395 ms/op
                 executeFilterQuery·p0.999:  1476.395 ms/op
                 executeFilterQuery·p0.9999: 1476.395 ms/op
                 executeFilterQuery·p1.00:   1476.395 ms/op


# Run progress: 50.56% complete, ETA 06:20:50
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1491.075 ±(99.9%) 184.388 ms/op
# Warmup Iteration   2: 1425.165 ±(99.9%) 65.325 ms/op
# Warmup Iteration   3: 1484.184 ±(99.9%) 75.902 ms/op
# Warmup Iteration   4: 1496.767 ±(99.9%) 22.106 ms/op
# Warmup Iteration   5: 1478.792 ±(99.9%) 24.150 ms/op
Iteration   1: 1486.881 ±(99.9%) 23.458 ms/op
                 executeFilterQuery·p0.00:   1468.006 ms/op
                 executeFilterQuery·p0.50:   1491.075 ms/op
                 executeFilterQuery·p0.90:   1497.367 ms/op
                 executeFilterQuery·p0.95:   1497.367 ms/op
                 executeFilterQuery·p0.99:   1497.367 ms/op
                 executeFilterQuery·p0.999:  1497.367 ms/op
                 executeFilterQuery·p0.9999: 1497.367 ms/op
                 executeFilterQuery·p1.00:   1497.367 ms/op

Iteration   2: 1486.282 ±(99.9%) 34.355 ms/op
                 executeFilterQuery·p0.00:   1459.618 ms/op
                 executeFilterQuery·p0.50:   1482.686 ms/op
                 executeFilterQuery·p0.90:   1507.852 ms/op
                 executeFilterQuery·p0.95:   1507.852 ms/op
                 executeFilterQuery·p0.99:   1507.852 ms/op
                 executeFilterQuery·p0.999:  1507.852 ms/op
                 executeFilterQuery·p0.9999: 1507.852 ms/op
                 executeFilterQuery·p1.00:   1507.852 ms/op

Iteration   3: 1496.468 ±(99.9%) 19.826 ms/op
                 executeFilterQuery·p0.00:   1484.784 ms/op
                 executeFilterQuery·p0.50:   1499.464 ms/op
                 executeFilterQuery·p0.90:   1509.949 ms/op
                 executeFilterQuery·p0.95:   1509.949 ms/op
                 executeFilterQuery·p0.99:   1509.949 ms/op
                 executeFilterQuery·p0.999:  1509.949 ms/op
                 executeFilterQuery·p0.9999: 1509.949 ms/op
                 executeFilterQuery·p1.00:   1509.949 ms/op

Iteration   4: 1497.666 ±(99.9%) 37.134 ms/op
                 executeFilterQuery·p0.00:   1461.715 ms/op
                 executeFilterQuery·p0.50:   1503.658 ms/op
                 executeFilterQuery·p0.90:   1509.949 ms/op
                 executeFilterQuery·p0.95:   1509.949 ms/op
                 executeFilterQuery·p0.99:   1509.949 ms/op
                 executeFilterQuery·p0.999:  1509.949 ms/op
                 executeFilterQuery·p0.9999: 1509.949 ms/op
                 executeFilterQuery·p1.00:   1509.949 ms/op

Iteration   5: 1421.607 ±(99.9%) 22.524 ms/op
                 executeFilterQuery·p0.00:   1405.092 ms/op
                 executeFilterQuery·p0.50:   1421.869 ms/op
                 executeFilterQuery·p0.90:   1438.646 ms/op
                 executeFilterQuery·p0.95:   1438.646 ms/op
                 executeFilterQuery·p0.99:   1438.646 ms/op
                 executeFilterQuery·p0.999:  1438.646 ms/op
                 executeFilterQuery·p0.9999: 1438.646 ms/op
                 executeFilterQuery·p1.00:   1438.646 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 71
  mean =   1474.268 ±(99.9%) 11.894 ms/op

  Histogram, ms/op:
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 6 
    [1425.000, 1450.000) = 5 
    [1450.000, 1475.000) = 16 
    [1475.000, 1500.000) = 31 
    [1500.000, 1525.000) = 12 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1394.606 ms/op
     p(50.0000) =   1480.589 ms/op
     p(90.0000) =   1503.658 ms/op
     p(95.0000) =   1506.594 ms/op
     p(99.0000) =   1509.949 ms/op
     p(99.9000) =   1509.949 ms/op
     p(99.9900) =   1509.949 ms/op
     p(99.9990) =   1509.949 ms/op
     p(99.9999) =   1509.949 ms/op
    p(100.0000) =   1509.949 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 51.11% complete, ETA 06:14:11
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1510.249 ±(99.9%) 195.876 ms/op
# Warmup Iteration   2: 1427.374 ±(99.9%) 40.944 ms/op
# Warmup Iteration   3: 1493.771 ±(99.9%) 24.951 ms/op
# Warmup Iteration   4: 1494.071 ±(99.9%) 21.961 ms/op
# Warmup Iteration   5: 1486.881 ±(99.9%) 26.014 ms/op
Iteration   1: 1476.095 ±(99.9%) 3.259 ms/op
                 executeFilterQuery·p0.00:   1474.298 ms/op
                 executeFilterQuery·p0.50:   1476.395 ms/op
                 executeFilterQuery·p0.90:   1478.492 ms/op
                 executeFilterQuery·p0.95:   1478.492 ms/op
                 executeFilterQuery·p0.99:   1478.492 ms/op
                 executeFilterQuery·p0.999:  1478.492 ms/op
                 executeFilterQuery·p0.9999: 1478.492 ms/op
                 executeFilterQuery·p1.00:   1478.492 ms/op

Iteration   2: 1488.678 ±(99.9%) 23.996 ms/op
                 executeFilterQuery·p0.00:   1476.395 ms/op
                 executeFilterQuery·p0.50:   1486.881 ms/op
                 executeFilterQuery·p0.90:   1501.561 ms/op
                 executeFilterQuery·p0.95:   1501.561 ms/op
                 executeFilterQuery·p0.99:   1501.561 ms/op
                 executeFilterQuery·p0.999:  1501.561 ms/op
                 executeFilterQuery·p0.9999: 1501.561 ms/op
                 executeFilterQuery·p1.00:   1501.561 ms/op

Iteration   3: 1494.970 ±(99.9%) 21.718 ms/op
                 executeFilterQuery·p0.00:   1476.395 ms/op
                 executeFilterQuery·p0.50:   1499.464 ms/op
                 executeFilterQuery·p0.90:   1501.561 ms/op
                 executeFilterQuery·p0.95:   1501.561 ms/op
                 executeFilterQuery·p0.99:   1501.561 ms/op
                 executeFilterQuery·p0.999:  1501.561 ms/op
                 executeFilterQuery·p0.9999: 1501.561 ms/op
                 executeFilterQuery·p1.00:   1501.561 ms/op

Iteration   4: 1480.589 ±(99.9%) 60.732 ms/op
                 executeFilterQuery·p0.00:   1423.966 ms/op
                 executeFilterQuery·p0.50:   1484.784 ms/op
                 executeFilterQuery·p0.90:   1503.658 ms/op
                 executeFilterQuery·p0.95:   1503.658 ms/op
                 executeFilterQuery·p0.99:   1503.658 ms/op
                 executeFilterQuery·p0.999:  1503.658 ms/op
                 executeFilterQuery·p0.9999: 1503.658 ms/op
                 executeFilterQuery·p1.00:   1503.658 ms/op

Iteration   5: 1405.878 ±(99.9%) 7.709 ms/op
                 executeFilterQuery·p0.00:   1400.898 ms/op
                 executeFilterQuery·p0.50:   1405.092 ms/op
                 executeFilterQuery·p0.90:   1413.480 ms/op
                 executeFilterQuery·p0.95:   1413.480 ms/op
                 executeFilterQuery·p0.99:   1413.480 ms/op
                 executeFilterQuery·p0.999:  1413.480 ms/op
                 executeFilterQuery·p0.9999: 1413.480 ms/op
                 executeFilterQuery·p1.00:   1413.480 ms/op


# Run progress: 51.67% complete, ETA 06:07:39
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1507.852 ±(99.9%) 185.494 ms/op
# Warmup Iteration   2: 1445.537 ±(99.9%) 40.605 ms/op
# Warmup Iteration   3: 1498.265 ±(99.9%) 41.254 ms/op
# Warmup Iteration   4: 1484.784 ±(99.9%) 17.030 ms/op
# Warmup Iteration   5: 1482.087 ±(99.9%) 17.613 ms/op
Iteration   1: 1483.585 ±(99.9%) 20.381 ms/op
                 executeFilterQuery·p0.00:   1476.395 ms/op
                 executeFilterQuery·p0.50:   1480.589 ms/op
                 executeFilterQuery·p0.90:   1497.367 ms/op
                 executeFilterQuery·p0.95:   1497.367 ms/op
                 executeFilterQuery·p0.99:   1497.367 ms/op
                 executeFilterQuery·p0.999:  1497.367 ms/op
                 executeFilterQuery·p0.9999: 1497.367 ms/op
                 executeFilterQuery·p1.00:   1497.367 ms/op

Iteration   2: 1483.585 ±(99.9%) 24.521 ms/op
                 executeFilterQuery·p0.00:   1476.395 ms/op
                 executeFilterQuery·p0.50:   1480.589 ms/op
                 executeFilterQuery·p0.90:   1507.852 ms/op
                 executeFilterQuery·p0.95:   1507.852 ms/op
                 executeFilterQuery·p0.99:   1507.852 ms/op
                 executeFilterQuery·p0.999:  1507.852 ms/op
                 executeFilterQuery·p0.9999: 1507.852 ms/op
                 executeFilterQuery·p1.00:   1507.852 ms/op

Iteration   3: 1480.889 ±(99.9%) 16.683 ms/op
                 executeFilterQuery·p0.00:   1476.395 ms/op
                 executeFilterQuery·p0.50:   1478.492 ms/op
                 executeFilterQuery·p0.90:   1497.367 ms/op
                 executeFilterQuery·p0.95:   1497.367 ms/op
                 executeFilterQuery·p0.99:   1497.367 ms/op
                 executeFilterQuery·p0.999:  1497.367 ms/op
                 executeFilterQuery·p0.9999: 1497.367 ms/op
                 executeFilterQuery·p1.00:   1497.367 ms/op

Iteration   4: 1481.188 ±(99.9%) 20.895 ms/op
                 executeFilterQuery·p0.00:   1474.298 ms/op
                 executeFilterQuery·p0.50:   1478.492 ms/op
                 executeFilterQuery·p0.90:   1501.561 ms/op
                 executeFilterQuery·p0.95:   1501.561 ms/op
                 executeFilterQuery·p0.99:   1501.561 ms/op
                 executeFilterQuery·p0.999:  1501.561 ms/op
                 executeFilterQuery·p0.9999: 1501.561 ms/op
                 executeFilterQuery·p1.00:   1501.561 ms/op

Iteration   5: 1410.859 ±(99.9%) 24.694 ms/op
                 executeFilterQuery·p0.00:   1396.703 ms/op
                 executeFilterQuery·p0.50:   1405.092 ms/op
                 executeFilterQuery·p0.90:   1428.161 ms/op
                 executeFilterQuery·p0.95:   1428.161 ms/op
                 executeFilterQuery·p0.99:   1428.161 ms/op
                 executeFilterQuery·p0.999:  1428.161 ms/op
                 executeFilterQuery·p0.9999: 1428.161 ms/op
                 executeFilterQuery·p1.00:   1428.161 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 72
  mean =   1466.958 ±(99.9%) 13.690 ms/op

  Histogram, ms/op:
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 14 
    [1425.000, 1450.000) = 2 
    [1450.000, 1475.000) = 4 
    [1475.000, 1500.000) = 44 
    [1500.000, 1525.000) = 7 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1396.703 ms/op
     p(50.0000) =   1478.492 ms/op
     p(90.0000) =   1500.932 ms/op
     p(95.0000) =   1501.561 ms/op
     p(99.0000) =   1507.852 ms/op
     p(99.9000) =   1507.852 ms/op
     p(99.9900) =   1507.852 ms/op
     p(99.9990) =   1507.852 ms/op
     p(99.9999) =   1507.852 ms/op
    p(100.0000) =   1507.852 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 52.22% complete, ETA 06:01:11
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3809.127 ±(99.9%) 55525.593 ms/op
# Warmup Iteration   2: 2375.654 ±(99.9%) 304.004 ms/op
# Warmup Iteration   3: 2342.938 ±(99.9%) 18.415 ms/op
# Warmup Iteration   4: 2349.649 ±(99.9%) 57.557 ms/op
# Warmup Iteration   5: 2372.298 ±(99.9%) 338.126 ms/op
Iteration   1: 2373.137 ±(99.9%) 336.347 ms/op
                 executeFilterQuery·p0.00:   2327.839 ms/op
                 executeFilterQuery·p0.50:   2336.227 ms/op
                 executeFilterQuery·p0.90:   2529.165 ms/op
                 executeFilterQuery·p0.95:   2529.165 ms/op
                 executeFilterQuery·p0.99:   2529.165 ms/op
                 executeFilterQuery·p0.999:  2529.165 ms/op
                 executeFilterQuery·p0.9999: 2529.165 ms/op
                 executeFilterQuery·p1.00:   2529.165 ms/op

Iteration   2: 2341.260 ±(99.9%) 21.058 ms/op
                 executeFilterQuery·p0.00:   2336.227 ms/op
                 executeFilterQuery·p0.50:   2340.422 ms/op
                 executeFilterQuery·p0.90:   2348.810 ms/op
                 executeFilterQuery·p0.95:   2348.810 ms/op
                 executeFilterQuery·p0.99:   2348.810 ms/op
                 executeFilterQuery·p0.999:  2348.810 ms/op
                 executeFilterQuery·p0.9999: 2348.810 ms/op
                 executeFilterQuery·p1.00:   2348.810 ms/op

Iteration   3: 2359.715 ±(99.9%) 247.745 ms/op
                 executeFilterQuery·p0.00:   2327.839 ms/op
                 executeFilterQuery·p0.50:   2332.033 ms/op
                 executeFilterQuery·p0.90:   2474.639 ms/op
                 executeFilterQuery·p0.95:   2474.639 ms/op
                 executeFilterQuery·p0.99:   2474.639 ms/op
                 executeFilterQuery·p0.999:  2474.639 ms/op
                 executeFilterQuery·p0.9999: 2474.639 ms/op
                 executeFilterQuery·p1.00:   2474.639 ms/op

Iteration   4: 2337.905 ±(99.9%) 18.415 ms/op
                 executeFilterQuery·p0.00:   2332.033 ms/op
                 executeFilterQuery·p0.50:   2336.227 ms/op
                 executeFilterQuery·p0.90:   2344.616 ms/op
                 executeFilterQuery·p0.95:   2344.616 ms/op
                 executeFilterQuery·p0.99:   2344.616 ms/op
                 executeFilterQuery·p0.999:  2344.616 ms/op
                 executeFilterQuery·p0.9999: 2344.616 ms/op
                 executeFilterQuery·p1.00:   2344.616 ms/op

Iteration   5: 2336.227 ±(99.9%) 19.781 ms/op
                 executeFilterQuery·p0.00:   2332.033 ms/op
                 executeFilterQuery·p0.50:   2336.227 ms/op
                 executeFilterQuery·p0.90:   2344.616 ms/op
                 executeFilterQuery·p0.95:   2344.616 ms/op
                 executeFilterQuery·p0.99:   2344.616 ms/op
                 executeFilterQuery·p0.999:  2344.616 ms/op
                 executeFilterQuery·p0.9999: 2344.616 ms/op
                 executeFilterQuery·p1.00:   2344.616 ms/op


# Run progress: 52.78% complete, ETA 05:55:01
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

2155.872 ±(99.9%) 634.804 ms/op
# Warmup Iteration   2: 2343.777 ±(99.9%) 147.760 ms/op
# Warmup Iteration   3: 2329.516 ±(99.9%) 14.446 ms/op
# Warmup Iteration   4: 2338.744 ±(99.9%) 42.116 ms/op
# Warmup Iteration   5: 2327.839 ±(99.9%) 11.420 ms/op
Iteration   1: 2325.322 ±(99.9%) 18.415 ms/op
                 executeFilterQuery·p0.00:   2319.450 ms/op
                 executeFilterQuery·p0.50:   2323.644 ms/op
                 executeFilterQuery·p0.90:   2332.033 ms/op
                 executeFilterQuery·p0.95:   2332.033 ms/op
                 executeFilterQuery·p0.99:   2332.033 ms/op
                 executeFilterQuery·p0.999:  2332.033 ms/op
                 executeFilterQuery·p0.9999: 2332.033 ms/op
                 executeFilterQuery·p1.00:   2332.033 ms/op

Iteration   2: 2329.516 ±(99.9%) 21.669 ms/op
                 executeFilterQuery·p0.00:   2323.644 ms/op
                 executeFilterQuery·p0.50:   2332.033 ms/op
                 executeFilterQuery·p0.90:   2336.227 ms/op
                 executeFilterQuery·p0.95:   2336.227 ms/op
                 executeFilterQuery·p0.99:   2336.227 ms/op
                 executeFilterQuery·p0.999:  2336.227 ms/op
                 executeFilterQuery·p0.9999: 2336.227 ms/op
                 executeFilterQuery·p1.00:   2336.227 ms/op

Iteration   3: 2327.839 ±(99.9%) 11.420 ms/op
                 executeFilterQuery·p0.00:   2323.644 ms/op
                 executeFilterQuery·p0.50:   2327.839 ms/op
                 executeFilterQuery·p0.90:   2332.033 ms/op
                 executeFilterQuery·p0.95:   2332.033 ms/op
                 executeFilterQuery·p0.99:   2332.033 ms/op
                 executeFilterQuery·p0.999:  2332.033 ms/op
                 executeFilterQuery·p0.9999: 2332.033 ms/op
                 executeFilterQuery·p1.00:   2332.033 ms/op

Iteration   4: 2327.000 ±(99.9%) 13.513 ms/op
                 executeFilterQuery·p0.00:   2323.644 ms/op
                 executeFilterQuery·p0.50:   2327.839 ms/op
                 executeFilterQuery·p0.90:   2332.033 ms/op
                 executeFilterQuery·p0.95:   2332.033 ms/op
                 executeFilterQuery·p0.99:   2332.033 ms/op
                 executeFilterQuery·p0.999:  2332.033 ms/op
                 executeFilterQuery·p0.9999: 2332.033 ms/op
                 executeFilterQuery·p1.00:   2332.033 ms/op

Iteration   5: 2327.839 ±(99.9%) 11.420 ms/op
                 executeFilterQuery·p0.00:   2323.644 ms/op
                 executeFilterQuery·p0.50:   2327.839 ms/op
                 executeFilterQuery·p0.90:   2332.033 ms/op
                 executeFilterQuery·p0.95:   2332.033 ms/op
                 executeFilterQuery·p0.99:   2332.033 ms/op
                 executeFilterQuery·p0.999:  2332.033 ms/op
                 executeFilterQuery·p0.9999: 2332.033 ms/op
                 executeFilterQuery·p1.00:   2332.033 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 50
  mean =   2338.576 ±(99.9%) 17.195 ms/op

  Histogram, ms/op:
    [2300.000, 2325.000) = 9 
    [2325.000, 2350.000) = 39 
    [2350.000, 2375.000) = 0 
    [2375.000, 2400.000) = 0 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 0 
    [2450.000, 2475.000) = 1 
    [2475.000, 2500.000) = 0 
    [2500.000, 2525.000) = 0 
    [2525.000, 2550.000) = 1 
    [2550.000, 2575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2319.450 ms/op
     p(50.0000) =   2332.033 ms/op
     p(90.0000) =   2344.616 ms/op
     p(95.0000) =   2405.433 ms/op
     p(99.0000) =   2529.165 ms/op
     p(99.9000) =   2529.165 ms/op
     p(99.9900) =   2529.165 ms/op
     p(99.9990) =   2529.165 ms/op
     p(99.9999) =   2529.165 ms/op
    p(100.0000) =   2529.165 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 53.33% complete, ETA 05:48:55
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_252380417 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_252380417() {
        this(4);
    }
    public KeyMultiRecordMap_252380417(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_252380417 join_map = new KeyMultiRecordMap_252380417();
private final class KeyMultiRecordMap_1827130251 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1827130251() {
        this(4);
    }
    public KeyMultiRecordMap_1827130251(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1827130251 join_map_0 = new KeyMultiRecordMap_1827130251();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4661.270 ±(99.9%) 3777.729 ms/op
# Warmup Iteration   2: 4543.829 ±(99.9%) 537.457 ms/op
# Warmup Iteration   3: 4342.503 ±(99.9%) 785.337 ms/op
# Warmup Iteration   4: 4348.095 ±(99.9%) 2739.078 ms/op
# Warmup Iteration   5: 4331.318 ±(99.9%) 1793.459 ms/op
Iteration   1: 4345.299 ±(99.9%) 1738.194 ms/op
                 executeQuery·p0.00:   4236.247 ms/op
                 executeQuery·p0.50:   4387.242 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   2: 4445.962 ±(99.9%) 1911.462 ms/op
                 executeQuery·p0.00:   4362.076 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4563.403 ms/op
                 executeQuery·p0.95:   4563.403 ms/op
                 executeQuery·p0.99:   4563.403 ms/op
                 executeQuery·p0.999:  4563.403 ms/op
                 executeQuery·p0.9999: 4563.403 ms/op
                 executeQuery·p1.00:   4563.403 ms/op

Iteration   3: 4301.958 ±(99.9%) 743.200 ms/op
                 executeQuery·p0.00:   4257.219 ms/op
                 executeQuery·p0.50:   4311.745 ms/op
                 executeQuery·p0.90:   4336.910 ms/op
                 executeQuery·p0.95:   4336.910 ms/op
                 executeQuery·p0.99:   4336.910 ms/op
                 executeQuery·p0.999:  4336.910 ms/op
                 executeQuery·p0.9999: 4336.910 ms/op
                 executeQuery·p1.00:   4336.910 ms/op

Iteration   4: 4404.019 ±(99.9%) 1530.394 ms/op
                 executeQuery·p0.00:   4320.133 ms/op
                 executeQuery·p0.50:   4404.019 ms/op
                 executeQuery·p0.90:   4487.905 ms/op
                 executeQuery·p0.95:   4487.905 ms/op
                 executeQuery·p0.99:   4487.905 ms/op
                 executeQuery·p0.999:  4487.905 ms/op
                 executeQuery·p0.9999: 4487.905 ms/op
                 executeQuery·p1.00:   4487.905 ms/op

Iteration   5: 4459.943 ±(99.9%) 2864.469 ms/op
                 executeQuery·p0.00:   4345.299 ms/op
                 executeQuery·p0.50:   4395.631 ms/op
                 executeQuery·p0.90:   4638.900 ms/op
                 executeQuery·p0.95:   4638.900 ms/op
                 executeQuery·p0.99:   4638.900 ms/op
                 executeQuery·p0.999:  4638.900 ms/op
                 executeQuery·p0.9999: 4638.900 ms/op
                 executeQuery·p1.00:   4638.900 ms/op


# Run progress: 53.89% complete, ETA 05:43:08
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_252380417 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_252380417() {
        this(4);
    }
    public KeyMultiRecordMap_252380417(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_252380417 join_map = new KeyMultiRecordMap_252380417();
private final class KeyMultiRecordMap_1827130251 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1827130251() {
        this(4);
    }
    public KeyMultiRecordMap_1827130251(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1827130251 join_map_0 = new KeyMultiRecordMap_1827130251();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4636.104 ±(99.9%) 3490.954 ms/op
# Warmup Iteration   2: 4444.564 ±(99.9%) 2563.506 ms/op
# Warmup Iteration   3: 4370.465 ±(99.9%) 1103.583 ms/op
# Warmup Iteration   4: 4341.105 ±(99.9%) 976.938 ms/op
# Warmup Iteration   5: 4332.716 ±(99.9%) 2266.069 ms/op
Iteration   1: 4296.365 ±(99.9%) 1701.309 ms/op
                 executeQuery·p0.00:   4240.441 ms/op
                 executeQuery·p0.50:   4244.636 ms/op
                 executeQuery·p0.90:   4404.019 ms/op
                 executeQuery·p0.95:   4404.019 ms/op
                 executeQuery·p0.99:   4404.019 ms/op
                 executeQuery·p0.999:  4404.019 ms/op
                 executeQuery·p0.9999: 4404.019 ms/op
                 executeQuery·p1.00:   4404.019 ms/op

Iteration   2: 4317.337 ±(99.9%) 1018.987 ms/op
                 executeQuery·p0.00:   4269.801 ms/op
                 executeQuery·p0.50:   4303.356 ms/op
                 executeQuery·p0.90:   4378.853 ms/op
                 executeQuery·p0.95:   4378.853 ms/op
                 executeQuery·p0.99:   4378.853 ms/op
                 executeQuery·p0.999:  4378.853 ms/op
                 executeQuery·p0.9999: 4378.853 ms/op
                 executeQuery·p1.00:   4378.853 ms/op

Iteration   3: 4301.958 ±(99.9%) 1634.611 ms/op
                 executeQuery·p0.00:   4236.247 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4404.019 ms/op
                 executeQuery·p0.95:   4404.019 ms/op
                 executeQuery·p0.99:   4404.019 ms/op
                 executeQuery·p0.999:  4404.019 ms/op
                 executeQuery·p0.9999: 4404.019 ms/op
                 executeQuery·p1.00:   4404.019 ms/op

Iteration   4: 4482.313 ±(99.9%) 2219.512 ms/op
                 executeQuery·p0.00:   4362.076 ms/op
                 executeQuery·p0.50:   4479.517 ms/op
                 executeQuery·p0.90:   4605.346 ms/op
                 executeQuery·p0.95:   4605.346 ms/op
                 executeQuery·p0.99:   4605.346 ms/op
                 executeQuery·p0.999:  4605.346 ms/op
                 executeQuery·p0.9999: 4605.346 ms/op
                 executeQuery·p1.00:   4605.346 ms/op

Iteration   5: 4293.569 ±(99.9%) 1373.808 ms/op
                 executeQuery·p0.00:   4236.247 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4378.853 ms/op
                 executeQuery·p0.95:   4378.853 ms/op
                 executeQuery·p0.99:   4378.853 ms/op
                 executeQuery·p0.999:  4378.853 ms/op
                 executeQuery·p0.9999: 4378.853 ms/op
                 executeQuery·p1.00:   4378.853 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   4364.872 ±(99.9%) 72.476 ms/op

  Histogram, ms/op:
    [4200.000, 4250.000) = 5 
    [4250.000, 4300.000) = 4 
    [4300.000, 4350.000) = 5 
    [4350.000, 4400.000) = 6 
    [4400.000, 4450.000) = 5 
    [4450.000, 4500.000) = 2 
    [4500.000, 4550.000) = 0 
    [4550.000, 4600.000) = 1 
    [4600.000, 4650.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   4236.247 ms/op
     p(50.0000) =   4362.076 ms/op
     p(90.0000) =   4555.853 ms/op
     p(95.0000) =   4620.445 ms/op
     p(99.0000) =   4638.900 ms/op
     p(99.9000) =   4638.900 ms/op
     p(99.9900) =   4638.900 ms/op
     p(99.9990) =   4638.900 ms/op
     p(99.9999) =   4638.900 ms/op
    p(100.0000) =   4638.900 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 54.44% complete, ETA 05:37:25
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_252380417 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_252380417() {
        this(4);
    }
    public KeyMultiRecordMap_252380417(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_252380417 join_map = new KeyMultiRecordMap_252380417();
private final class KeyMultiRecordMap_1827130251 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1827130251() {
        this(4);
    }
    public KeyMultiRecordMap_1827130251(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1827130251 join_map_0 = new KeyMultiRecordMap_1827130251();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51942.261 ms/op
# Warmup Iteration   2: 50868.519 ms/op
# Warmup Iteration   3: 49190.797 ms/op
# Warmup Iteration   4: 48318.382 ms/op
# Warmup Iteration   5: 48385.491 ms/op
Iteration   1: 48385.491 ms/op
                 executeQuery·p0.00:   48385.491 ms/op
                 executeQuery·p0.50:   48385.491 ms/op
                 executeQuery·p0.90:   48385.491 ms/op
                 executeQuery·p0.95:   48385.491 ms/op
                 executeQuery·p0.99:   48385.491 ms/op
                 executeQuery·p0.999:  48385.491 ms/op
                 executeQuery·p0.9999: 48385.491 ms/op
                 executeQuery·p1.00:   48385.491 ms/op

Iteration   2: 48318.382 ms/op
                 executeQuery·p0.00:   48318.382 ms/op
                 executeQuery·p0.50:   48318.382 ms/op
                 executeQuery·p0.90:   48318.382 ms/op
                 executeQuery·p0.95:   48318.382 ms/op
                 executeQuery·p0.99:   48318.382 ms/op
                 executeQuery·p0.999:  48318.382 ms/op
                 executeQuery·p0.9999: 48318.382 ms/op
                 executeQuery·p1.00:   48318.382 ms/op

Iteration   3: 47982.838 ms/op
                 executeQuery·p0.00:   47982.838 ms/op
                 executeQuery·p0.50:   47982.838 ms/op
                 executeQuery·p0.90:   47982.838 ms/op
                 executeQuery·p0.95:   47982.838 ms/op
                 executeQuery·p0.99:   47982.838 ms/op
                 executeQuery·p0.999:  47982.838 ms/op
                 executeQuery·p0.9999: 47982.838 ms/op
                 executeQuery·p1.00:   47982.838 ms/op

Iteration   4: 48184.164 ms/op
                 executeQuery·p0.00:   48184.164 ms/op
                 executeQuery·p0.50:   48184.164 ms/op
                 executeQuery·p0.90:   48184.164 ms/op
                 executeQuery·p0.95:   48184.164 ms/op
                 executeQuery·p0.99:   48184.164 ms/op
                 executeQuery·p0.999:  48184.164 ms/op
                 executeQuery·p0.9999: 48184.164 ms/op
                 executeQuery·p1.00:   48184.164 ms/op

Iteration   5: 48721.035 ms/op
                 executeQuery·p0.00:   48721.035 ms/op
                 executeQuery·p0.50:   48721.035 ms/op
                 executeQuery·p0.90:   48721.035 ms/op
                 executeQuery·p0.95:   48721.035 ms/op
                 executeQuery·p0.99:   48721.035 ms/op
                 executeQuery·p0.999:  48721.035 ms/op
                 executeQuery·p0.9999: 48721.035 ms/op
                 executeQuery·p1.00:   48721.035 ms/op


# Run progress: 55.00% complete, ETA 05:36:40
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_252380417 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_252380417() {
        this(4);
    }
    public KeyMultiRecordMap_252380417(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_252380417 join_map = new KeyMultiRecordMap_252380417();
private final class KeyMultiRecordMap_1827130251 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1827130251() {
        this(4);
    }
    public KeyMultiRecordMap_1827130251(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1827130251 join_map_0 = new KeyMultiRecordMap_1827130251();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51338.281 ms/op
# Warmup Iteration   2: 49325.015 ms/op
# Warmup Iteration   3: 49459.233 ms/op
# Warmup Iteration   4: 48855.253 ms/op
# Warmup Iteration   5: 48318.382 ms/op
Iteration   1: 48318.382 ms/op
                 executeQuery·p0.00:   48318.382 ms/op
                 executeQuery·p0.50:   48318.382 ms/op
                 executeQuery·p0.90:   48318.382 ms/op
                 executeQuery·p0.95:   48318.382 ms/op
                 executeQuery·p0.99:   48318.382 ms/op
                 executeQuery·p0.999:  48318.382 ms/op
                 executeQuery·p0.9999: 48318.382 ms/op
                 executeQuery·p1.00:   48318.382 ms/op

Iteration   2: 48855.253 ms/op
                 executeQuery·p0.00:   48855.253 ms/op
                 executeQuery·p0.50:   48855.253 ms/op
                 executeQuery·p0.90:   48855.253 ms/op
                 executeQuery·p0.95:   48855.253 ms/op
                 executeQuery·p0.99:   48855.253 ms/op
                 executeQuery·p0.999:  48855.253 ms/op
                 executeQuery·p0.9999: 48855.253 ms/op
                 executeQuery·p1.00:   48855.253 ms/op

Iteration   3: 48385.491 ms/op
                 executeQuery·p0.00:   48385.491 ms/op
                 executeQuery·p0.50:   48385.491 ms/op
                 executeQuery·p0.90:   48385.491 ms/op
                 executeQuery·p0.95:   48385.491 ms/op
                 executeQuery·p0.99:   48385.491 ms/op
                 executeQuery·p0.999:  48385.491 ms/op
                 executeQuery·p0.9999: 48385.491 ms/op
                 executeQuery·p1.00:   48385.491 ms/op

Iteration   4: 47982.838 ms/op
                 executeQuery·p0.00:   47982.838 ms/op
                 executeQuery·p0.50:   47982.838 ms/op
                 executeQuery·p0.90:   47982.838 ms/op
                 executeQuery·p0.95:   47982.838 ms/op
                 executeQuery·p0.99:   47982.838 ms/op
                 executeQuery·p0.999:  47982.838 ms/op
                 executeQuery·p0.9999: 47982.838 ms/op
                 executeQuery·p1.00:   47982.838 ms/op

Iteration   5: 48049.947 ms/op
                 executeQuery·p0.00:   48049.947 ms/op
                 executeQuery·p0.50:   48049.947 ms/op
                 executeQuery·p0.90:   48049.947 ms/op
                 executeQuery·p0.95:   48049.947 ms/op
                 executeQuery·p0.99:   48049.947 ms/op
                 executeQuery·p0.999:  48049.947 ms/op
                 executeQuery·p0.9999: 48049.947 ms/op
                 executeQuery·p1.00:   48049.947 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  48318.382 ±(99.9%) 443.541 ms/op

  Histogram, ms/op:
    [47900.000, 48000.000) = 2 
    [48000.000, 48100.000) = 1 
    [48100.000, 48200.000) = 1 
    [48200.000, 48300.000) = 0 
    [48300.000, 48400.000) = 4 
    [48400.000, 48500.000) = 0 
    [48500.000, 48600.000) = 0 
    [48600.000, 48700.000) = 0 
    [48700.000, 48800.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  47982.838 ms/op
     p(50.0000) =  48318.382 ms/op
     p(90.0000) =  48841.831 ms/op
     p(95.0000) =  48855.253 ms/op
     p(99.0000) =  48855.253 ms/op
     p(99.9000) =  48855.253 ms/op
     p(99.9900) =  48855.253 ms/op
     p(99.9990) =  48855.253 ms/op
     p(99.9999) =  48855.253 ms/op
    p(100.0000) =  48855.253 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 55.56% complete, ETA 05:35:44
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1017577592 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1017577592() {
        this(4);
    }
    public KeyMultiRecordMap_1017577592(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1017577592 join_map = new KeyMultiRecordMap_1017577592();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_537335350 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_537335350() {
        this(4);
    }
    public KeyMultiRecordMap_537335350(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_537335350 join_map_0 = new KeyMultiRecordMap_537335350();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4574.588 ±(99.9%) 2450.225 ms/op
# Warmup Iteration   2: 4613.734 ±(99.9%) 1989.513 ms/op
# Warmup Iteration   3: 4513.071 ±(99.9%) 1459.903 ms/op
# Warmup Iteration   4: 4471.128 ±(99.9%) 2859.013 ms/op
# Warmup Iteration   5: 4532.645 ±(99.9%) 690.093 ms/op
Iteration   1: 4418.000 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4420.796 ms/op
                 executeQuery·p0.90:   4420.796 ms/op
                 executeQuery·p0.95:   4420.796 ms/op
                 executeQuery·p0.99:   4420.796 ms/op
                 executeQuery·p0.999:  4420.796 ms/op
                 executeQuery·p0.9999: 4420.796 ms/op
                 executeQuery·p1.00:   4420.796 ms/op

Iteration   2: 4596.957 ±(99.9%) 1195.276 ms/op
                 executeQuery·p0.00:   4521.460 ms/op
                 executeQuery·p0.50:   4630.512 ms/op
                 executeQuery·p0.90:   4638.900 ms/op
                 executeQuery·p0.95:   4638.900 ms/op
                 executeQuery·p0.99:   4638.900 ms/op
                 executeQuery·p0.999:  4638.900 ms/op
                 executeQuery·p0.9999: 4638.900 ms/op
                 executeQuery·p1.00:   4638.900 ms/op

Iteration   3: 4493.498 ±(99.9%) 1760.508 ms/op
                 executeQuery·p0.00:   4395.631 ms/op
                 executeQuery·p0.50:   4496.294 ms/op
                 executeQuery·p0.90:   4588.569 ms/op
                 executeQuery·p0.95:   4588.569 ms/op
                 executeQuery·p0.99:   4588.569 ms/op
                 executeQuery·p0.999:  4588.569 ms/op
                 executeQuery·p0.9999: 4588.569 ms/op
                 executeQuery·p1.00:   4588.569 ms/op

Iteration   4: 4465.536 ±(99.9%) 1413.718 ms/op
                 executeQuery·p0.00:   4420.796 ms/op
                 executeQuery·p0.50:   4420.796 ms/op
                 executeQuery·p0.90:   4555.014 ms/op
                 executeQuery·p0.95:   4555.014 ms/op
                 executeQuery·p0.99:   4555.014 ms/op
                 executeQuery·p0.999:  4555.014 ms/op
                 executeQuery·p0.9999: 4555.014 ms/op
                 executeQuery·p1.00:   4555.014 ms/op

Iteration   5: 4457.147 ±(99.9%) 1844.956 ms/op
                 executeQuery·p0.00:   4362.076 ms/op
                 executeQuery·p0.50:   4445.962 ms/op
                 executeQuery·p0.90:   4563.403 ms/op
                 executeQuery·p0.95:   4563.403 ms/op
                 executeQuery·p0.99:   4563.403 ms/op
                 executeQuery·p0.999:  4563.403 ms/op
                 executeQuery·p0.9999: 4563.403 ms/op
                 executeQuery·p1.00:   4563.403 ms/op


# Run progress: 56.11% complete, ETA 05:30:04
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_322461987 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_322461987() {
        this(4);
    }
    public KeyMultiRecordMap_322461987(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_322461987 join_map = new KeyMultiRecordMap_322461987();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1274575793 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1274575793() {
        this(4);
    }
    public KeyMultiRecordMap_1274575793(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1274575793 join_map_0 = new KeyMultiRecordMap_1274575793();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4566.199 ±(99.9%) 3450.465 ms/op
# Warmup Iteration   2: 4555.014 ±(99.9%) 2668.334 ms/op
# Warmup Iteration   3: 4602.550 ±(99.9%) 2968.860 ms/op
# Warmup Iteration   4: 4521.460 ±(99.9%) 918.237 ms/op
# Warmup Iteration   5: 4571.791 ±(99.9%) 1507.264 ms/op
Iteration   1: 4471.128 ±(99.9%) 1103.583 ms/op
                 executeQuery·p0.00:   4420.796 ms/op
                 executeQuery·p0.50:   4454.351 ms/op
                 executeQuery·p0.90:   4538.237 ms/op
                 executeQuery·p0.95:   4538.237 ms/op
                 executeQuery·p0.99:   4538.237 ms/op
                 executeQuery·p0.999:  4538.237 ms/op
                 executeQuery·p0.9999: 4538.237 ms/op
                 executeQuery·p1.00:   4538.237 ms/op

Iteration   2: 4541.033 ±(99.9%) 1388.645 ms/op
                 executeQuery·p0.00:   4454.351 ms/op
                 executeQuery·p0.50:   4571.791 ms/op
                 executeQuery·p0.90:   4596.957 ms/op
                 executeQuery·p0.95:   4596.957 ms/op
                 executeQuery·p0.99:   4596.957 ms/op
                 executeQuery·p0.999:  4596.957 ms/op
                 executeQuery·p0.9999: 4596.957 ms/op
                 executeQuery·p1.00:   4596.957 ms/op

Iteration   3: 4529.848 ±(99.9%) 1612.371 ms/op
                 executeQuery·p0.00:   4437.574 ms/op
                 executeQuery·p0.50:   4538.237 ms/op
                 executeQuery·p0.90:   4613.734 ms/op
                 executeQuery·p0.95:   4613.734 ms/op
                 executeQuery·p0.99:   4613.734 ms/op
                 executeQuery·p0.999:  4613.734 ms/op
                 executeQuery·p0.9999: 4613.734 ms/op
                 executeQuery·p1.00:   4613.734 ms/op

Iteration   4: 4412.408 ±(99.9%) 306.079 ms/op
                 executeQuery·p0.00:   4395.631 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4429.185 ms/op
                 executeQuery·p0.95:   4429.185 ms/op
                 executeQuery·p0.99:   4429.185 ms/op
                 executeQuery·p0.999:  4429.185 ms/op
                 executeQuery·p0.9999: 4429.185 ms/op
                 executeQuery·p1.00:   4429.185 ms/op

Iteration   5: 4462.739 ±(99.9%) 404.904 ms/op
                 executeQuery·p0.00:   4437.574 ms/op
                 executeQuery·p0.50:   4471.128 ms/op
                 executeQuery·p0.90:   4479.517 ms/op
                 executeQuery·p0.95:   4479.517 ms/op
                 executeQuery·p0.99:   4479.517 ms/op
                 executeQuery·p0.999:  4479.517 ms/op
                 executeQuery·p0.9999: 4479.517 ms/op
                 executeQuery·p1.00:   4479.517 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   4484.829 ±(99.9%) 53.200 ms/op

  Histogram, ms/op:
    [4300.000, 4325.000) = 0 
    [4325.000, 4350.000) = 0 
    [4350.000, 4375.000) = 1 
    [4375.000, 4400.000) = 2 
    [4400.000, 4425.000) = 7 
    [4425.000, 4450.000) = 4 
    [4450.000, 4475.000) = 3 
    [4475.000, 4500.000) = 2 
    [4500.000, 4525.000) = 1 
    [4525.000, 4550.000) = 2 
    [4550.000, 4575.000) = 3 
    [4575.000, 4600.000) = 2 
    [4600.000, 4625.000) = 1 
    [4625.000, 4650.000) = 2 
    [4650.000, 4675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4362.076 ms/op
     p(50.0000) =   4454.351 ms/op
     p(90.0000) =   4612.057 ms/op
     p(95.0000) =   4634.286 ms/op
     p(99.0000) =   4638.900 ms/op
     p(99.9000) =   4638.900 ms/op
     p(99.9900) =   4638.900 ms/op
     p(99.9990) =   4638.900 ms/op
     p(99.9999) =   4638.900 ms/op
    p(100.0000) =   4638.900 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 56.67% complete, ETA 05:24:27
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1017577592 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1017577592() {
        this(4);
    }
    public KeyMultiRecordMap_1017577592(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1017577592 join_map = new KeyMultiRecordMap_1017577592();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_537335350 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_537335350() {
        this(4);
    }
    public KeyMultiRecordMap_537335350(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_537335350 join_map_0 = new KeyMultiRecordMap_537335350();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51338.281 ms/op
# Warmup Iteration   2: 49861.886 ms/op
# Warmup Iteration   3: 48989.471 ms/op
# Warmup Iteration   4: 50130.321 ms/op
# Warmup Iteration   5: 50935.628 ms/op
Iteration   1: 49928.995 ms/op
                 executeQuery·p0.00:   49928.995 ms/op
                 executeQuery·p0.50:   49928.995 ms/op
                 executeQuery·p0.90:   49928.995 ms/op
                 executeQuery·p0.95:   49928.995 ms/op
                 executeQuery·p0.99:   49928.995 ms/op
                 executeQuery·p0.999:  49928.995 ms/op
                 executeQuery·p0.9999: 49928.995 ms/op
                 executeQuery·p1.00:   49928.995 ms/op

Iteration   2: 50600.083 ms/op
                 executeQuery·p0.00:   50600.083 ms/op
                 executeQuery·p0.50:   50600.083 ms/op
                 executeQuery·p0.90:   50600.083 ms/op
                 executeQuery·p0.95:   50600.083 ms/op
                 executeQuery·p0.99:   50600.083 ms/op
                 executeQuery·p0.999:  50600.083 ms/op
                 executeQuery·p0.9999: 50600.083 ms/op
                 executeQuery·p1.00:   50600.083 ms/op

Iteration   3: 50465.866 ms/op
                 executeQuery·p0.00:   50465.866 ms/op
                 executeQuery·p0.50:   50465.866 ms/op
                 executeQuery·p0.90:   50465.866 ms/op
                 executeQuery·p0.95:   50465.866 ms/op
                 executeQuery·p0.99:   50465.866 ms/op
                 executeQuery·p0.999:  50465.866 ms/op
                 executeQuery·p0.9999: 50465.866 ms/op
                 executeQuery·p1.00:   50465.866 ms/op

Iteration   4: 50331.648 ms/op
                 executeQuery·p0.00:   50331.648 ms/op
                 executeQuery·p0.50:   50331.648 ms/op
                 executeQuery·p0.90:   50331.648 ms/op
                 executeQuery·p0.95:   50331.648 ms/op
                 executeQuery·p0.99:   50331.648 ms/op
                 executeQuery·p0.999:  50331.648 ms/op
                 executeQuery·p0.9999: 50331.648 ms/op
                 executeQuery·p1.00:   50331.648 ms/op

Iteration   5: 50600.083 ms/op
                 executeQuery·p0.00:   50600.083 ms/op
                 executeQuery·p0.50:   50600.083 ms/op
                 executeQuery·p0.90:   50600.083 ms/op
                 executeQuery·p0.95:   50600.083 ms/op
                 executeQuery·p0.99:   50600.083 ms/op
                 executeQuery·p0.999:  50600.083 ms/op
                 executeQuery·p0.9999: 50600.083 ms/op
                 executeQuery·p1.00:   50600.083 ms/op


# Run progress: 57.22% complete, ETA 05:23:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_322461987 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_322461987() {
        this(4);
    }
    public KeyMultiRecordMap_322461987(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_322461987 join_map = new KeyMultiRecordMap_322461987();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1274575793 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1274575793() {
        this(4);
    }
    public KeyMultiRecordMap_1274575793(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1274575793 join_map_0 = new KeyMultiRecordMap_1274575793();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

50868.519 ms/op
# Warmup Iteration   2: 49526.342 ms/op
# Warmup Iteration   3: 49257.906 ms/op
# Warmup Iteration   4: 50667.192 ms/op
# Warmup Iteration   5: 50801.410 ms/op
Iteration   1: 51002.737 ms/op
                 executeQuery·p0.00:   51002.737 ms/op
                 executeQuery·p0.50:   51002.737 ms/op
                 executeQuery·p0.90:   51002.737 ms/op
                 executeQuery·p0.95:   51002.737 ms/op
                 executeQuery·p0.99:   51002.737 ms/op
                 executeQuery·p0.999:  51002.737 ms/op
                 executeQuery·p0.9999: 51002.737 ms/op
                 executeQuery·p1.00:   51002.737 ms/op

Iteration   2: 51002.737 ms/op
                 executeQuery·p0.00:   51002.737 ms/op
                 executeQuery·p0.50:   51002.737 ms/op
                 executeQuery·p0.90:   51002.737 ms/op
                 executeQuery·p0.95:   51002.737 ms/op
                 executeQuery·p0.99:   51002.737 ms/op
                 executeQuery·p0.999:  51002.737 ms/op
                 executeQuery·p0.9999: 51002.737 ms/op
                 executeQuery·p1.00:   51002.737 ms/op

Iteration   3: 50600.083 ms/op
                 executeQuery·p0.00:   50600.083 ms/op
                 executeQuery·p0.50:   50600.083 ms/op
                 executeQuery·p0.90:   50600.083 ms/op
                 executeQuery·p0.95:   50600.083 ms/op
                 executeQuery·p0.99:   50600.083 ms/op
                 executeQuery·p0.999:  50600.083 ms/op
                 executeQuery·p0.9999: 50600.083 ms/op
                 executeQuery·p1.00:   50600.083 ms/op

Iteration   4: 51271.172 ms/op
                 executeQuery·p0.00:   51271.172 ms/op
                 executeQuery·p0.50:   51271.172 ms/op
                 executeQuery·p0.90:   51271.172 ms/op
                 executeQuery·p0.95:   51271.172 ms/op
                 executeQuery·p0.99:   51271.172 ms/op
                 executeQuery·p0.999:  51271.172 ms/op
                 executeQuery·p0.9999: 51271.172 ms/op
                 executeQuery·p1.00:   51271.172 ms/op

Iteration   5: 50935.628 ms/op
                 executeQuery·p0.00:   50935.628 ms/op
                 executeQuery·p0.50:   50935.628 ms/op
                 executeQuery·p0.90:   50935.628 ms/op
                 executeQuery·p0.95:   50935.628 ms/op
                 executeQuery·p0.99:   50935.628 ms/op
                 executeQuery·p0.999:  50935.628 ms/op
                 executeQuery·p0.9999: 50935.628 ms/op
                 executeQuery·p1.00:   50935.628 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  50673.903 ±(99.9%) 590.538 ms/op

  Histogram, ms/op:
    [49000.000, 49250.000) = 0 
    [49250.000, 49500.000) = 0 
    [49500.000, 49750.000) = 0 
    [49750.000, 50000.000) = 1 
    [50000.000, 50250.000) = 0 
    [50250.000, 50500.000) = 2 
    [50500.000, 50750.000) = 3 
    [50750.000, 51000.000) = 1 
    [51000.000, 51250.000) = 2 
    [51250.000, 51500.000) = 1 
    [51500.000, 51750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  49928.995 ms/op
     p(50.0000) =  50600.083 ms/op
     p(90.0000) =  51244.329 ms/op
     p(95.0000) =  51271.172 ms/op
     p(99.0000) =  51271.172 ms/op
     p(99.9000) =  51271.172 ms/op
     p(99.9900) =  51271.172 ms/op
     p(99.9990) =  51271.172 ms/op
     p(99.9999) =  51271.172 ms/op
    p(100.0000) =  51271.172 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 57.78% complete, ETA 05:22:26
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1886.388 ±(99.9%) 448.328 ms/op
# Warmup Iteration   2: 1818.580 ±(99.9%) 10.790 ms/op
# Warmup Iteration   3: 1814.386 ±(99.9%) 4.427 ms/op
# Warmup Iteration   4: 1814.036 ±(99.9%) 5.260 ms/op
# Warmup Iteration   5: 1813.687 ±(99.9%) 10.790 ms/op
Iteration   1: 1811.240 ±(99.9%) 14.722 ms/op
                 executeQuery·p0.00:   1803.551 ms/op
                 executeQuery·p0.50:   1811.939 ms/op
                 executeQuery·p0.90:   1818.231 ms/op
                 executeQuery·p0.95:   1818.231 ms/op
                 executeQuery·p0.99:   1818.231 ms/op
                 executeQuery·p0.999:  1818.231 ms/op
                 executeQuery·p0.9999: 1818.231 ms/op
                 executeQuery·p1.00:   1818.231 ms/op

Iteration   2: 1813.687 ±(99.9%) 6.875 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1814.036 ms/op
                 executeQuery·p0.90:   1816.134 ms/op
                 executeQuery·p0.95:   1816.134 ms/op
                 executeQuery·p0.99:   1816.134 ms/op
                 executeQuery·p0.999:  1816.134 ms/op
                 executeQuery·p0.9999: 1816.134 ms/op
                 executeQuery·p1.00:   1816.134 ms/op

Iteration   3: 1814.386 ±(99.9%) 8.656 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1815.085 ms/op
                 executeQuery·p0.90:   1818.231 ms/op
                 executeQuery·p0.95:   1818.231 ms/op
                 executeQuery·p0.99:   1818.231 ms/op
                 executeQuery·p0.999:  1818.231 ms/op
                 executeQuery·p0.9999: 1818.231 ms/op
                 executeQuery·p1.00:   1818.231 ms/op

Iteration   4: 1813.337 ±(99.9%) 4.802 ms/op
                 executeQuery·p0.00:   1811.939 ms/op
                 executeQuery·p0.50:   1812.988 ms/op
                 executeQuery·p0.90:   1816.134 ms/op
                 executeQuery·p0.95:   1816.134 ms/op
                 executeQuery·p0.99:   1816.134 ms/op
                 executeQuery·p0.999:  1816.134 ms/op
                 executeQuery·p0.9999: 1816.134 ms/op
                 executeQuery·p1.00:   1816.134 ms/op

Iteration   5: 1821.377 ±(99.9%) 62.098 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1812.988 ms/op
                 executeQuery·p0.90:   1866.465 ms/op
                 executeQuery·p0.95:   1866.465 ms/op
                 executeQuery·p0.99:   1866.465 ms/op
                 executeQuery·p0.999:  1866.465 ms/op
                 executeQuery·p0.9999: 1866.465 ms/op
                 executeQuery·p1.00:   1866.465 ms/op


# Run progress: 58.33% complete, ETA 05:16:31
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1902.466 ±(99.9%) 455.607 ms/op
# Warmup Iteration   2: 1815.784 ±(99.9%) 18.751 ms/op
# Warmup Iteration   3: 1811.590 ±(99.9%) 6.875 ms/op
# Warmup Iteration   4: 1811.590 ±(99.9%) 8.656 ms/op
# Warmup Iteration   5: 1809.842 ±(99.9%) 11.762 ms/op
Iteration   1: 1811.240 ±(99.9%) 8.035 ms/op
                 executeQuery·p0.00:   1807.745 ms/op
                 executeQuery·p0.50:   1810.891 ms/op
                 executeQuery·p0.90:   1816.134 ms/op
                 executeQuery·p0.95:   1816.134 ms/op
                 executeQuery·p0.99:   1816.134 ms/op
                 executeQuery·p0.999:  1816.134 ms/op
                 executeQuery·p0.9999: 1816.134 ms/op
                 executeQuery·p1.00:   1816.134 ms/op

Iteration   2: 1811.240 ±(99.9%) 4.802 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1810.891 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   3: 1813.687 ±(99.9%) 5.782 ms/op
                 executeQuery·p0.00:   1811.939 ms/op
                 executeQuery·p0.50:   1812.988 ms/op
                 executeQuery·p0.90:   1816.134 ms/op
                 executeQuery·p0.95:   1816.134 ms/op
                 executeQuery·p0.99:   1816.134 ms/op
                 executeQuery·p0.999:  1816.134 ms/op
                 executeQuery·p0.9999: 1816.134 ms/op
                 executeQuery·p1.00:   1816.134 ms/op

Iteration   4: 1811.240 ±(99.9%) 4.802 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1810.891 ms/op
                 executeQuery·p0.90:   1814.036 ms/op
                 executeQuery·p0.95:   1814.036 ms/op
                 executeQuery·p0.99:   1814.036 ms/op
                 executeQuery·p0.999:  1814.036 ms/op
                 executeQuery·p0.9999: 1814.036 ms/op
                 executeQuery·p1.00:   1814.036 ms/op

Iteration   5: 1821.027 ±(99.9%) 62.863 ms/op
                 executeQuery·p0.00:   1809.842 ms/op
                 executeQuery·p0.50:   1811.939 ms/op
                 executeQuery·p0.90:   1866.465 ms/op
                 executeQuery·p0.95:   1866.465 ms/op
                 executeQuery·p0.99:   1866.465 ms/op
                 executeQuery·p0.999:  1866.465 ms/op
                 executeQuery·p0.9999: 1866.465 ms/op
                 executeQuery·p1.00:   1866.465 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 60
  mean =   1814.246 ±(99.9%) 4.544 ms/op

  Histogram, ms/op:
    [1800.000, 1805.000) = 1 
    [1805.000, 1810.000) = 17 
    [1810.000, 1815.000) = 29 
    [1815.000, 1820.000) = 11 
    [1820.000, 1825.000) = 0 
    [1825.000, 1830.000) = 0 
    [1830.000, 1835.000) = 0 
    [1835.000, 1840.000) = 0 
    [1840.000, 1845.000) = 0 
    [1845.000, 1850.000) = 0 
    [1850.000, 1855.000) = 0 
    [1855.000, 1860.000) = 0 
    [1860.000, 1865.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1803.551 ms/op
     p(50.0000) =   1811.939 ms/op
     p(90.0000) =   1816.134 ms/op
     p(95.0000) =   1818.231 ms/op
     p(99.0000) =   1866.465 ms/op
     p(99.9000) =   1866.465 ms/op
     p(99.9900) =   1866.465 ms/op
     p(99.9990) =   1866.465 ms/op
     p(99.9999) =   1866.465 ms/op
    p(100.0000) =   1866.465 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 58.89% complete, ETA 05:10:41
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
29158.801 ms/op
# Warmup Iteration   2: 29863.444 ms/op
# Warmup Iteration   3: 28017.951 ms/op
# Warmup Iteration   4: 23588.766 ms/op
# Warmup Iteration   5: 23488.102 ms/op
Iteration   1: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op

Iteration   2: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op

Iteration   3: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op

Iteration   4: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op

Iteration   5: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op


# Run progress: 59.44% complete, ETA 05:06:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
29494.346 ms/op
# Warmup Iteration   2: 30198.989 ms/op
# Warmup Iteration   3: 28085.060 ms/op
# Warmup Iteration   4: 23957.864 ms/op
# Warmup Iteration   5: 30198.989 ms/op
Iteration   1: 23320.330 ms/op
                 executeQuery·p0.00:   23320.330 ms/op
                 executeQuery·p0.50:   23320.330 ms/op
                 executeQuery·p0.90:   23320.330 ms/op
                 executeQuery·p0.95:   23320.330 ms/op
                 executeQuery·p0.99:   23320.330 ms/op
                 executeQuery·p0.999:  23320.330 ms/op
                 executeQuery·p0.9999: 23320.330 ms/op
                 executeQuery·p1.00:   23320.330 ms/op

Iteration   2: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op

Iteration   3: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op

Iteration   4: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op

Iteration   5: 23286.776 ms/op
                 executeQuery·p0.00:   23286.776 ms/op
                 executeQuery·p0.50:   23286.776 ms/op
                 executeQuery·p0.90:   23286.776 ms/op
                 executeQuery·p0.95:   23286.776 ms/op
                 executeQuery·p0.99:   23286.776 ms/op
                 executeQuery·p0.999:  23286.776 ms/op
                 executeQuery·p0.9999: 23286.776 ms/op
                 executeQuery·p1.00:   23286.776 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  23290.131 ±(99.9%) 16.042 ms/op

  Histogram, ms/op:
    [23280.000, 23285.000) = 0 
    [23285.000, 23290.000) = 9 
    [23290.000, 23295.000) = 0 
    [23295.000, 23300.000) = 0 
    [23300.000, 23305.000) = 0 
    [23305.000, 23310.000) = 0 
    [23310.000, 23315.000) = 0 
    [23315.000, 23320.000) = 0 
    [23320.000, 23325.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  23286.776 ms/op
     p(50.0000) =  23286.776 ms/op
     p(90.0000) =  23316.975 ms/op
     p(95.0000) =  23320.330 ms/op
     p(99.0000) =  23320.330 ms/op
     p(99.9000) =  23320.330 ms/op
     p(99.9900) =  23320.330 ms/op
     p(99.9990) =  23320.330 ms/op
     p(99.9999) =  23320.330 ms/op
    p(100.0000) =  23320.330 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 60.00% complete, ETA 05:02:46
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1474.897 ±(99.9%) 233.530 ms/op
# Warmup Iteration   2: 1406.889 ±(99.9%) 146.203 ms/op
# Warmup Iteration   3: 1358.692 ±(99.9%) 3.346 ms/op
# Warmup Iteration   4: 1357.382 ±(99.9%) 3.554 ms/op
# Warmup Iteration   5: 1356.595 ±(99.9%) 5.438 ms/op
Iteration   1: 1358.168 ±(99.9%) 9.327 ms/op
                 executeQuery·p0.00:   1352.663 ms/op
                 executeQuery·p0.50:   1356.857 ms/op
                 executeQuery·p0.90:   1367.343 ms/op
                 executeQuery·p0.95:   1367.343 ms/op
                 executeQuery·p0.99:   1367.343 ms/op
                 executeQuery·p0.999:  1367.343 ms/op
                 executeQuery·p0.9999: 1367.343 ms/op
                 executeQuery·p1.00:   1367.343 ms/op

Iteration   2: 1359.741 ±(99.9%) 6.038 ms/op
                 executeQuery·p0.00:   1354.760 ms/op
                 executeQuery·p0.50:   1361.052 ms/op
                 executeQuery·p0.90:   1363.149 ms/op
                 executeQuery·p0.95:   1363.149 ms/op
                 executeQuery·p0.99:   1363.149 ms/op
                 executeQuery·p0.999:  1363.149 ms/op
                 executeQuery·p0.9999: 1363.149 ms/op
                 executeQuery·p1.00:   1363.149 ms/op

Iteration   3: 1357.906 ±(99.9%) 5.671 ms/op
                 executeQuery·p0.00:   1352.663 ms/op
                 executeQuery·p0.50:   1358.954 ms/op
                 executeQuery·p0.90:   1361.052 ms/op
                 executeQuery·p0.95:   1361.052 ms/op
                 executeQuery·p0.99:   1361.052 ms/op
                 executeQuery·p0.999:  1361.052 ms/op
                 executeQuery·p0.9999: 1361.052 ms/op
                 executeQuery·p1.00:   1361.052 ms/op

Iteration   4: 1355.022 ±(99.9%) 3.974 ms/op
                 executeQuery·p0.00:   1350.566 ms/op
                 executeQuery·p0.50:   1354.760 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op

Iteration   5: 1356.595 ±(99.9%) 4.515 ms/op
                 executeQuery·p0.00:   1354.760 ms/op
                 executeQuery·p0.50:   1355.809 ms/op
                 executeQuery·p0.90:   1361.052 ms/op
                 executeQuery·p0.95:   1361.052 ms/op
                 executeQuery·p0.99:   1361.052 ms/op
                 executeQuery·p0.999:  1361.052 ms/op
                 executeQuery·p0.9999: 1361.052 ms/op
                 executeQuery·p1.00:   1361.052 ms/op


# Run progress: 60.56% complete, ETA 04:57:02
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1343.750 ±(99.9%) 275.965 ms/op
# Warmup Iteration   2: 1250.951 ±(99.9%) 36.812 ms/op
# Warmup Iteration   3: 1242.038 ±(99.9%) 1.856 ms/op
# Warmup Iteration   4: 1241.514 ±(99.9%) 0.001 ms/op
# Warmup Iteration   5: 1240.990 ±(99.9%) 1.856 ms/op
Iteration   1: 1239.417 ±(99.9%) 3.031 ms/op
                 executeQuery·p0.00:   1237.320 ms/op
                 executeQuery·p0.50:   1239.417 ms/op
                 executeQuery·p0.90:   1241.514 ms/op
                 executeQuery·p0.95:   1241.514 ms/op
                 executeQuery·p0.99:   1241.514 ms/op
                 executeQuery·p0.999:  1241.514 ms/op
                 executeQuery·p0.9999: 1241.514 ms/op
                 executeQuery·p1.00:   1241.514 ms/op

Iteration   2: 1241.252 ±(99.9%) 2.570 ms/op
                 executeQuery·p0.00:   1239.417 ms/op
                 executeQuery·p0.50:   1241.514 ms/op
                 executeQuery·p0.90:   1243.611 ms/op
                 executeQuery·p0.95:   1243.611 ms/op
                 executeQuery·p0.99:   1243.611 ms/op
                 executeQuery·p0.999:  1243.611 ms/op
                 executeQuery·p0.9999: 1243.611 ms/op
                 executeQuery·p1.00:   1243.611 ms/op

Iteration   3: 1241.252 ±(99.9%) 1.418 ms/op
                 executeQuery·p0.00:   1239.417 ms/op
                 executeQuery·p0.50:   1241.514 ms/op
                 executeQuery·p0.90:   1241.514 ms/op
                 executeQuery·p0.95:   1241.514 ms/op
                 executeQuery·p0.99:   1241.514 ms/op
                 executeQuery·p0.999:  1241.514 ms/op
                 executeQuery·p0.9999: 1241.514 ms/op
                 executeQuery·p1.00:   1241.514 ms/op

Iteration   4: 1240.465 ±(99.9%) 2.143 ms/op
                 executeQuery·p0.00:   1239.417 ms/op
                 executeQuery·p0.50:   1240.465 ms/op
                 executeQuery·p0.90:   1241.514 ms/op
                 executeQuery·p0.95:   1241.514 ms/op
                 executeQuery·p0.99:   1241.514 ms/op
                 executeQuery·p0.999:  1241.514 ms/op
                 executeQuery·p0.9999: 1241.514 ms/op
                 executeQuery·p1.00:   1241.514 ms/op

Iteration   5: 1241.252 ±(99.9%) 1.418 ms/op
                 executeQuery·p0.00:   1239.417 ms/op
                 executeQuery·p0.50:   1241.514 ms/op
                 executeQuery·p0.90:   1241.514 ms/op
                 executeQuery·p0.95:   1241.514 ms/op
                 executeQuery·p0.99:   1241.514 ms/op
                 executeQuery·p0.999:  1241.514 ms/op
                 executeQuery·p0.9999: 1241.514 ms/op
                 executeQuery·p1.00:   1241.514 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 80
  mean =   1299.107 ±(99.9%) 22.472 ms/op

  Histogram, ms/op:
    [1200.000, 1212.500) = 0 
    [1212.500, 1225.000) = 0 
    [1225.000, 1237.500) = 2 
    [1237.500, 1250.000) = 38 
    [1250.000, 1262.500) = 0 
    [1262.500, 1275.000) = 0 
    [1275.000, 1287.500) = 0 
    [1287.500, 1300.000) = 0 
    [1300.000, 1312.500) = 0 
    [1312.500, 1325.000) = 0 
    [1325.000, 1337.500) = 0 
    [1337.500, 1350.000) = 0 
    [1350.000, 1362.500) = 37 
    [1362.500, 1375.000) = 3 
    [1375.000, 1387.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1237.320 ms/op
     p(50.0000) =   1297.089 ms/op
     p(90.0000) =   1361.052 ms/op
     p(95.0000) =   1361.052 ms/op
     p(99.0000) =   1367.343 ms/op
     p(99.9000) =   1367.343 ms/op
     p(99.9900) =   1367.343 ms/op
     p(99.9990) =   1367.343 ms/op
     p(99.9999) =   1367.343 ms/op
    p(100.0000) =   1367.343 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 61.11% complete, ETA 04:51:17
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
19428.016 ms/op
# Warmup Iteration   2: 19159.581 ms/op
# Warmup Iteration   3: 17582.522 ms/op
# Warmup Iteration   4: 17314.087 ms/op
# Warmup Iteration   5: 17314.087 ms/op
Iteration   1: 17314.087 ms/op
                 executeQuery·p0.00:   17314.087 ms/op
                 executeQuery·p0.50:   17314.087 ms/op
                 executeQuery·p0.90:   17314.087 ms/op
                 executeQuery·p0.95:   17314.087 ms/op
                 executeQuery·p0.99:   17314.087 ms/op
                 executeQuery·p0.999:  17314.087 ms/op
                 executeQuery·p0.9999: 17314.087 ms/op
                 executeQuery·p1.00:   17314.087 ms/op

Iteration   2: 17314.087 ms/op
                 executeQuery·p0.00:   17314.087 ms/op
                 executeQuery·p0.50:   17314.087 ms/op
                 executeQuery·p0.90:   17314.087 ms/op
                 executeQuery·p0.95:   17314.087 ms/op
                 executeQuery·p0.99:   17314.087 ms/op
                 executeQuery·p0.999:  17314.087 ms/op
                 executeQuery·p0.9999: 17314.087 ms/op
                 executeQuery·p1.00:   17314.087 ms/op

Iteration   3: 17314.087 ms/op
                 executeQuery·p0.00:   17314.087 ms/op
                 executeQuery·p0.50:   17314.087 ms/op
                 executeQuery·p0.90:   17314.087 ms/op
                 executeQuery·p0.95:   17314.087 ms/op
                 executeQuery·p0.99:   17314.087 ms/op
                 executeQuery·p0.999:  17314.087 ms/op
                 executeQuery·p0.9999: 17314.087 ms/op
                 executeQuery·p1.00:   17314.087 ms/op

Iteration   4: 17314.087 ms/op
                 executeQuery·p0.00:   17314.087 ms/op
                 executeQuery·p0.50:   17314.087 ms/op
                 executeQuery·p0.90:   17314.087 ms/op
                 executeQuery·p0.95:   17314.087 ms/op
                 executeQuery·p0.99:   17314.087 ms/op
                 executeQuery·p0.999:  17314.087 ms/op
                 executeQuery·p0.9999: 17314.087 ms/op
                 executeQuery·p1.00:   17314.087 ms/op

Iteration   5: 17280.532 ms/op
                 executeQuery·p0.00:   17280.532 ms/op
                 executeQuery·p0.50:   17280.532 ms/op
                 executeQuery·p0.90:   17280.532 ms/op
                 executeQuery·p0.95:   17280.532 ms/op
                 executeQuery·p0.99:   17280.532 ms/op
                 executeQuery·p0.999:  17280.532 ms/op
                 executeQuery·p0.9999: 17280.532 ms/op
                 executeQuery·p1.00:   17280.532 ms/op


# Run progress: 61.67% complete, ETA 04:46:27
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
19293.798 ms/op
# Warmup Iteration   2: 19092.472 ms/op
# Warmup Iteration   3: 17381.196 ms/op
# Warmup Iteration   4: 17280.532 ms/op
# Warmup Iteration   5: 17280.532 ms/op
Iteration   1: 17314.087 ms/op
                 executeQuery·p0.00:   17314.087 ms/op
                 executeQuery·p0.50:   17314.087 ms/op
                 executeQuery·p0.90:   17314.087 ms/op
                 executeQuery·p0.95:   17314.087 ms/op
                 executeQuery·p0.99:   17314.087 ms/op
                 executeQuery·p0.999:  17314.087 ms/op
                 executeQuery·p0.9999: 17314.087 ms/op
                 executeQuery·p1.00:   17314.087 ms/op

Iteration   2: 17314.087 ms/op
                 executeQuery·p0.00:   17314.087 ms/op
                 executeQuery·p0.50:   17314.087 ms/op
                 executeQuery·p0.90:   17314.087 ms/op
                 executeQuery·p0.95:   17314.087 ms/op
                 executeQuery·p0.99:   17314.087 ms/op
                 executeQuery·p0.999:  17314.087 ms/op
                 executeQuery·p0.9999: 17314.087 ms/op
                 executeQuery·p1.00:   17314.087 ms/op

Iteration   3: 17213.424 ms/op
                 executeQuery·p0.00:   17213.424 ms/op
                 executeQuery·p0.50:   17213.424 ms/op
                 executeQuery·p0.90:   17213.424 ms/op
                 executeQuery·p0.95:   17213.424 ms/op
                 executeQuery·p0.99:   17213.424 ms/op
                 executeQuery·p0.999:  17213.424 ms/op
                 executeQuery·p0.9999: 17213.424 ms/op
                 executeQuery·p1.00:   17213.424 ms/op

Iteration   4: 17381.196 ms/op
                 executeQuery·p0.00:   17381.196 ms/op
                 executeQuery·p0.50:   17381.196 ms/op
                 executeQuery·p0.90:   17381.196 ms/op
                 executeQuery·p0.95:   17381.196 ms/op
                 executeQuery·p0.99:   17381.196 ms/op
                 executeQuery·p0.999:  17381.196 ms/op
                 executeQuery·p0.9999: 17381.196 ms/op
                 executeQuery·p1.00:   17381.196 ms/op

Iteration   5: 17347.641 ms/op
                 executeQuery·p0.00:   17347.641 ms/op
                 executeQuery·p0.50:   17347.641 ms/op
                 executeQuery·p0.90:   17347.641 ms/op
                 executeQuery·p0.95:   17347.641 ms/op
                 executeQuery·p0.99:   17347.641 ms/op
                 executeQuery·p0.999:  17347.641 ms/op
                 executeQuery·p0.9999: 17347.641 ms/op
                 executeQuery·p1.00:   17347.641 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 10
  mean =  17310.731 ±(99.9%) 65.273 ms/op

  Histogram, ms/op:
    [17200.000, 17212.500) = 0 
    [17212.500, 17225.000) = 1 
    [17225.000, 17237.500) = 0 
    [17237.500, 17250.000) = 0 
    [17250.000, 17262.500) = 0 
    [17262.500, 17275.000) = 0 
    [17275.000, 17287.500) = 1 
    [17287.500, 17300.000) = 0 
    [17300.000, 17312.500) = 0 
    [17312.500, 17325.000) = 6 
    [17325.000, 17337.500) = 0 
    [17337.500, 17350.000) = 1 
    [17350.000, 17362.500) = 0 
    [17362.500, 17375.000) = 0 
    [17375.000, 17387.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =  17213.424 ms/op
     p(50.0000) =  17314.087 ms/op
     p(90.0000) =  17377.840 ms/op
     p(95.0000) =  17381.196 ms/op
     p(99.0000) =  17381.196 ms/op
     p(99.9000) =  17381.196 ms/op
     p(99.9900) =  17381.196 ms/op
     p(99.9990) =  17381.196 ms/op
     p(99.9999) =  17381.196 ms/op
    p(100.0000) =  17381.196 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 62.22% complete, ETA 04:41:39
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1979.292 ±(99.9%) 119.832 ms/op
# Warmup Iteration   2: 1954.895 ±(99.9%) 11.413 ms/op
# Warmup Iteration   3: 1952.798 ±(99.9%) 2.401 ms/op
# Warmup Iteration   4: 1951.749 ±(99.9%) 3.037 ms/op
# Warmup Iteration   5: 1951.050 ±(99.9%) 3.037 ms/op
Iteration   1: 1959.439 ±(99.9%) 59.587 ms/op
                 executeQuery·p0.00:   1950.351 ms/op
                 executeQuery·p0.50:   1950.351 ms/op
                 executeQuery·p0.90:   2002.780 ms/op
                 executeQuery·p0.95:   2002.780 ms/op
                 executeQuery·p0.99:   2002.780 ms/op
                 executeQuery·p0.999:  2002.780 ms/op
                 executeQuery·p0.9999: 2002.780 ms/op
                 executeQuery·p1.00:   2002.780 ms/op

Iteration   2: 1954.546 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   1954.546 ms/op
                 executeQuery·p0.50:   1954.546 ms/op
                 executeQuery·p0.90:   1954.546 ms/op
                 executeQuery·p0.95:   1954.546 ms/op
                 executeQuery·p0.99:   1954.546 ms/op
                 executeQuery·p0.999:  1954.546 ms/op
                 executeQuery·p0.9999: 1954.546 ms/op
                 executeQuery·p1.00:   1954.546 ms/op

Iteration   3: 1956.643 ±(99.9%) 9.111 ms/op
                 executeQuery·p0.00:   1954.546 ms/op
                 executeQuery·p0.50:   1955.594 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op

Iteration   4: 1954.895 ±(99.9%) 4.427 ms/op
                 executeQuery·p0.00:   1952.449 ms/op
                 executeQuery·p0.50:   1954.546 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   5: 1955.245 ±(99.9%) 3.037 ms/op
                 executeQuery·p0.00:   1954.546 ms/op
                 executeQuery·p0.50:   1954.546 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op


# Run progress: 62.78% complete, ETA 04:36:15
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1982.648 ±(99.9%) 112.709 ms/op
# Warmup Iteration   2: 1961.886 ±(99.9%) 10.354 ms/op
# Warmup Iteration   3: 1956.643 ±(99.9%) 0.001 ms/op
# Warmup Iteration   4: 1956.992 ±(99.9%) 2.401 ms/op
# Warmup Iteration   5: 1956.643 ±(99.9%) 0.001 ms/op
Iteration   1: 1965.381 ±(99.9%) 68.724 ms/op
                 executeQuery·p0.00:   1954.546 ms/op
                 executeQuery·p0.50:   1955.594 ms/op
                 executeQuery·p0.90:   2015.363 ms/op
                 executeQuery·p0.95:   2015.363 ms/op
                 executeQuery·p0.99:   2015.363 ms/op
                 executeQuery·p0.999:  2015.363 ms/op
                 executeQuery·p0.9999: 2015.363 ms/op
                 executeQuery·p1.00:   2015.363 ms/op

Iteration   2: 1959.789 ±(99.9%) 3.221 ms/op
                 executeQuery·p0.00:   1958.740 ms/op
                 executeQuery·p0.50:   1959.789 ms/op
                 executeQuery·p0.90:   1960.837 ms/op
                 executeQuery·p0.95:   1960.837 ms/op
                 executeQuery·p0.99:   1960.837 ms/op
                 executeQuery·p0.999:  1960.837 ms/op
                 executeQuery·p0.9999: 1960.837 ms/op
                 executeQuery·p1.00:   1960.837 ms/op

Iteration   3: 1958.740 ±(99.9%) 6.442 ms/op
                 executeQuery·p0.00:   1956.643 ms/op
                 executeQuery·p0.50:   1958.740 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op

Iteration   4: 1958.390 ±(99.9%) 4.427 ms/op
                 executeQuery·p0.00:   1956.643 ms/op
                 executeQuery·p0.50:   1958.740 ms/op
                 executeQuery·p0.90:   1960.837 ms/op
                 executeQuery·p0.95:   1960.837 ms/op
                 executeQuery·p0.99:   1960.837 ms/op
                 executeQuery·p0.999:  1960.837 ms/op
                 executeQuery·p0.9999: 1960.837 ms/op
                 executeQuery·p1.00:   1960.837 ms/op

Iteration   5: 1958.390 ±(99.9%) 6.875 ms/op
                 executeQuery·p0.00:   1954.546 ms/op
                 executeQuery·p0.50:   1958.740 ms/op
                 executeQuery·p0.90:   1960.837 ms/op
                 executeQuery·p0.95:   1960.837 ms/op
                 executeQuery·p0.99:   1960.837 ms/op
                 executeQuery·p0.999:  1960.837 ms/op
                 executeQuery·p0.9999: 1960.837 ms/op
                 executeQuery·p1.00:   1960.837 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 60
  mean =   1958.146 ±(99.9%) 4.492 ms/op

  Histogram, ms/op:
    [1950.000, 1955.000) = 26 
    [1955.000, 1960.000) = 24 
    [1960.000, 1965.000) = 8 
    [1965.000, 1970.000) = 0 
    [1970.000, 1975.000) = 0 
    [1975.000, 1980.000) = 0 
    [1980.000, 1985.000) = 0 
    [1985.000, 1990.000) = 0 
    [1990.000, 1995.000) = 0 
    [1995.000, 2000.000) = 0 
    [2000.000, 2005.000) = 1 
    [2005.000, 2010.000) = 0 
    [2010.000, 2015.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1950.351 ms/op
     p(50.0000) =   1956.643 ms/op
     p(90.0000) =   1960.837 ms/op
     p(95.0000) =   1962.934 ms/op
     p(99.0000) =   2015.363 ms/op
     p(99.9000) =   2015.363 ms/op
     p(99.9900) =   2015.363 ms/op
     p(99.9990) =   2015.363 ms/op
     p(99.9999) =   2015.363 ms/op
    p(100.0000) =   2015.363 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 63.33% complete, ETA 04:30:54
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
23957.864 ms/op
# Warmup Iteration   2: 26306.675 ms/op
# Warmup Iteration   3: 25971.130 ms/op
# Warmup Iteration   4: 25803.358 ms/op
# Warmup Iteration   5: 25803.358 ms/op
Iteration   1: 25769.804 ms/op
                 executeQuery·p0.00:   25769.804 ms/op
                 executeQuery·p0.50:   25769.804 ms/op
                 executeQuery·p0.90:   25769.804 ms/op
                 executeQuery·p0.95:   25769.804 ms/op
                 executeQuery·p0.99:   25769.804 ms/op
                 executeQuery·p0.999:  25769.804 ms/op
                 executeQuery·p0.9999: 25769.804 ms/op
                 executeQuery·p1.00:   25769.804 ms/op

Iteration   2: 25769.804 ms/op
                 executeQuery·p0.00:   25769.804 ms/op
                 executeQuery·p0.50:   25769.804 ms/op
                 executeQuery·p0.90:   25769.804 ms/op
                 executeQuery·p0.95:   25769.804 ms/op
                 executeQuery·p0.99:   25769.804 ms/op
                 executeQuery·p0.999:  25769.804 ms/op
                 executeQuery·p0.9999: 25769.804 ms/op
                 executeQuery·p1.00:   25769.804 ms/op

Iteration   3: 25803.358 ms/op
                 executeQuery·p0.00:   25803.358 ms/op
                 executeQuery·p0.50:   25803.358 ms/op
                 executeQuery·p0.90:   25803.358 ms/op
                 executeQuery·p0.95:   25803.358 ms/op
                 executeQuery·p0.99:   25803.358 ms/op
                 executeQuery·p0.999:  25803.358 ms/op
                 executeQuery·p0.9999: 25803.358 ms/op
                 executeQuery·p1.00:   25803.358 ms/op

Iteration   4: 25803.358 ms/op
                 executeQuery·p0.00:   25803.358 ms/op
                 executeQuery·p0.50:   25803.358 ms/op
                 executeQuery·p0.90:   25803.358 ms/op
                 executeQuery·p0.95:   25803.358 ms/op
                 executeQuery·p0.99:   25803.358 ms/op
                 executeQuery·p0.999:  25803.358 ms/op
                 executeQuery·p0.9999: 25803.358 ms/op
                 executeQuery·p1.00:   25803.358 ms/op

Iteration   5: 25803.358 ms/op
                 executeQuery·p0.00:   25803.358 ms/op
                 executeQuery·p0.50:   25803.358 ms/op
                 executeQuery·p0.90:   25803.358 ms/op
                 executeQuery·p0.95:   25803.358 ms/op
                 executeQuery·p0.99:   25803.358 ms/op
                 executeQuery·p0.999:  25803.358 ms/op
                 executeQuery·p0.9999: 25803.358 ms/op
                 executeQuery·p1.00:   25803.358 ms/op


# Run progress: 63.89% complete, ETA 04:27:05
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
24024.973 ms/op
# Warmup Iteration   2: 25803.358 ms/op
# Warmup Iteration   3: 25635.586 ms/op
# Warmup Iteration   4: 25635.586 ms/op
# Warmup Iteration   5: 25635.586 ms/op
Iteration   1: 25769.804 ms/op
                 executeQuery·p0.00:   25769.804 ms/op
                 executeQuery·p0.50:   25769.804 ms/op
                 executeQuery·p0.90:   25769.804 ms/op
                 executeQuery·p0.95:   25769.804 ms/op
                 executeQuery·p0.99:   25769.804 ms/op
                 executeQuery·p0.999:  25769.804 ms/op
                 executeQuery·p0.9999: 25769.804 ms/op
                 executeQuery·p1.00:   25769.804 ms/op

Iteration   2: 25635.586 ms/op
                 executeQuery·p0.00:   25635.586 ms/op
                 executeQuery·p0.50:   25635.586 ms/op
                 executeQuery·p0.90:   25635.586 ms/op
                 executeQuery·p0.95:   25635.586 ms/op
                 executeQuery·p0.99:   25635.586 ms/op
                 executeQuery·p0.999:  25635.586 ms/op
                 executeQuery·p0.9999: 25635.586 ms/op
                 executeQuery·p1.00:   25635.586 ms/op

Iteration   3: 25635.586 ms/op
                 executeQuery·p0.00:   25635.586 ms/op
                 executeQuery·p0.50:   25635.586 ms/op
                 executeQuery·p0.90:   25635.586 ms/op
                 executeQuery·p0.95:   25635.586 ms/op
                 executeQuery·p0.99:   25635.586 ms/op
                 executeQuery·p0.999:  25635.586 ms/op
                 executeQuery·p0.9999: 25635.586 ms/op
                 executeQuery·p1.00:   25635.586 ms/op

Iteration   4: 25635.586 ms/op
                 executeQuery·p0.00:   25635.586 ms/op
                 executeQuery·p0.50:   25635.586 ms/op
                 executeQuery·p0.90:   25635.586 ms/op
                 executeQuery·p0.95:   25635.586 ms/op
                 executeQuery·p0.99:   25635.586 ms/op
                 executeQuery·p0.999:  25635.586 ms/op
                 executeQuery·p0.9999: 25635.586 ms/op
                 executeQuery·p1.00:   25635.586 ms/op

Iteration   5: 25602.032 ms/op
                 executeQuery·p0.00:   25602.032 ms/op
                 executeQuery·p0.50:   25602.032 ms/op
                 executeQuery·p0.90:   25602.032 ms/op
                 executeQuery·p0.95:   25602.032 ms/op
                 executeQuery·p0.99:   25602.032 ms/op
                 executeQuery·p0.999:  25602.032 ms/op
                 executeQuery·p0.9999: 25602.032 ms/op
                 executeQuery·p1.00:   25602.032 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  25722.828 ±(99.9%) 126.993 ms/op

  Histogram, ms/op:
    [25600.000, 25625.000) = 1 
    [25625.000, 25650.000) = 3 
    [25650.000, 25675.000) = 0 
    [25675.000, 25700.000) = 0 
    [25700.000, 25725.000) = 0 
    [25725.000, 25750.000) = 0 
    [25750.000, 25775.000) = 3 
    [25775.000, 25800.000) = 0 
    [25800.000, 25825.000) = 3 
    [25825.000, 25850.000) = 0 
    [25850.000, 25875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  25602.032 ms/op
     p(50.0000) =  25769.804 ms/op
     p(90.0000) =  25803.358 ms/op
     p(95.0000) =  25803.358 ms/op
     p(99.0000) =  25803.358 ms/op
     p(99.9000) =  25803.358 ms/op
     p(99.9900) =  25803.358 ms/op
     p(99.9990) =  25803.358 ms/op
     p(99.9999) =  25803.358 ms/op
    p(100.0000) =  25803.358 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 64.44% complete, ETA 04:23:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
955.443 ±(99.9%) 130.124 ms/op
# Warmup Iteration   2: 896.532 ±(99.9%) 3.782 ms/op
# Warmup Iteration   3: 895.579 ±(99.9%) 2.631 ms/op
# Warmup Iteration   4: 896.151 ±(99.9%) 3.959 ms/op
# Warmup Iteration   5: 896.723 ±(99.9%) 16.353 ms/op
Iteration   1: 894.054 ±(99.9%) 2.272 ms/op
                 executeQuery·p0.00:   892.338 ms/op
                 executeQuery·p0.50:   893.387 ms/op
                 executeQuery·p0.90:   897.371 ms/op
                 executeQuery·p0.95:   897.581 ms/op
                 executeQuery·p0.99:   897.581 ms/op
                 executeQuery·p0.999:  897.581 ms/op
                 executeQuery·p0.9999: 897.581 ms/op
                 executeQuery·p1.00:   897.581 ms/op

Iteration   2: 895.007 ±(99.9%) 2.186 ms/op
                 executeQuery·p0.00:   892.338 ms/op
                 executeQuery·p0.50:   895.484 ms/op
                 executeQuery·p0.90:   897.371 ms/op
                 executeQuery·p0.95:   897.581 ms/op
                 executeQuery·p0.99:   897.581 ms/op
                 executeQuery·p0.999:  897.581 ms/op
                 executeQuery·p0.9999: 897.581 ms/op
                 executeQuery·p1.00:   897.581 ms/op

Iteration   3: 895.484 ±(99.9%) 2.338 ms/op
                 executeQuery·p0.00:   892.338 ms/op
                 executeQuery·p0.50:   895.484 ms/op
                 executeQuery·p0.90:   898.210 ms/op
                 executeQuery·p0.95:   898.630 ms/op
                 executeQuery·p0.99:   898.630 ms/op
                 executeQuery·p0.999:  898.630 ms/op
                 executeQuery·p0.9999: 898.630 ms/op
                 executeQuery·p1.00:   898.630 ms/op

Iteration   4: 896.342 ±(99.9%) 3.421 ms/op
                 executeQuery·p0.00:   893.387 ms/op
                 executeQuery·p0.50:   895.484 ms/op
                 executeQuery·p0.90:   900.727 ms/op
                 executeQuery·p0.95:   900.727 ms/op
                 executeQuery·p0.99:   900.727 ms/op
                 executeQuery·p0.999:  900.727 ms/op
                 executeQuery·p0.9999: 900.727 ms/op
                 executeQuery·p1.00:   900.727 ms/op

Iteration   5: 895.389 ±(99.9%) 1.369 ms/op
                 executeQuery·p0.00:   894.435 ms/op
                 executeQuery·p0.50:   895.484 ms/op
                 executeQuery·p0.90:   897.371 ms/op
                 executeQuery·p0.95:   897.581 ms/op
                 executeQuery·p0.99:   897.581 ms/op
                 executeQuery·p0.999:  897.581 ms/op
                 executeQuery·p0.9999: 897.581 ms/op
                 executeQuery·p1.00:   897.581 ms/op


# Run progress: 65.00% complete, ETA 04:17:50
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
949.152 ±(99.9%) 125.460 ms/op
# Warmup Iteration   2: 893.005 ±(99.9%) 2.535 ms/op
# Warmup Iteration   3: 892.243 ±(99.9%) 1.648 ms/op
# Warmup Iteration   4: 892.243 ±(99.9%) 2.195 ms/op
# Warmup Iteration   5: 892.434 ±(99.9%) 3.272 ms/op
Iteration   1: 894.054 ±(99.9%) 2.616 ms/op
                 executeQuery·p0.00:   891.290 ms/op
                 executeQuery·p0.50:   893.387 ms/op
                 executeQuery·p0.90:   897.371 ms/op
                 executeQuery·p0.95:   897.581 ms/op
                 executeQuery·p0.99:   897.581 ms/op
                 executeQuery·p0.999:  897.581 ms/op
                 executeQuery·p0.9999: 897.581 ms/op
                 executeQuery·p1.00:   897.581 ms/op

Iteration   2: 895.484 ±(99.9%) 2.051 ms/op
                 executeQuery·p0.00:   893.387 ms/op
                 executeQuery·p0.50:   895.484 ms/op
                 executeQuery·p0.90:   898.420 ms/op
                 executeQuery·p0.95:   898.630 ms/op
                 executeQuery·p0.99:   898.630 ms/op
                 executeQuery·p0.999:  898.630 ms/op
                 executeQuery·p0.9999: 898.630 ms/op
                 executeQuery·p1.00:   898.630 ms/op

Iteration   3: 895.103 ±(99.9%) 2.177 ms/op
                 executeQuery·p0.00:   892.338 ms/op
                 executeQuery·p0.50:   895.484 ms/op
                 executeQuery·p0.90:   896.532 ms/op
                 executeQuery·p0.95:   896.532 ms/op
                 executeQuery·p0.99:   896.532 ms/op
                 executeQuery·p0.999:  896.532 ms/op
                 executeQuery·p0.9999: 896.532 ms/op
                 executeQuery·p1.00:   896.532 ms/op

Iteration   4: 894.340 ±(99.9%) 1.205 ms/op
                 executeQuery·p0.00:   893.387 ms/op
                 executeQuery·p0.50:   894.435 ms/op
                 executeQuery·p0.90:   896.113 ms/op
                 executeQuery·p0.95:   896.532 ms/op
                 executeQuery·p0.99:   896.532 ms/op
                 executeQuery·p0.999:  896.532 ms/op
                 executeQuery·p0.9999: 896.532 ms/op
                 executeQuery·p1.00:   896.532 ms/op

Iteration   5: 894.912 ±(99.9%) 1.876 ms/op
                 executeQuery·p0.00:   893.387 ms/op
                 executeQuery·p0.50:   894.435 ms/op
                 executeQuery·p0.90:   897.371 ms/op
                 executeQuery·p0.95:   897.581 ms/op
                 executeQuery·p0.99:   897.581 ms/op
                 executeQuery·p0.999:  897.581 ms/op
                 executeQuery·p0.9999: 897.581 ms/op
                 executeQuery·p1.00:   897.581 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 110
  mean =    895.017 ±(99.9%) 0.545 ms/op

  Histogram, ms/op:
    [891.000, 892.000) = 1 
    [892.000, 893.000) = 7 
    [893.000, 894.000) = 20 
    [894.000, 895.000) = 32 
    [895.000, 896.000) = 21 
    [896.000, 897.000) = 18 
    [897.000, 898.000) = 7 
    [898.000, 899.000) = 2 
    [899.000, 900.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    891.290 ms/op
     p(50.0000) =    894.435 ms/op
     p(90.0000) =    897.476 ms/op
     p(95.0000) =    897.581 ms/op
     p(99.0000) =    900.727 ms/op
     p(99.9000) =    900.727 ms/op
     p(99.9900) =    900.727 ms/op
     p(99.9990) =    900.727 ms/op
     p(99.9999) =    900.727 ms/op
    p(100.0000) =    900.727 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 65.56% complete, ETA 04:12:30
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
13472.104 ms/op
# Warmup Iteration   2: 13337.887 ms/op
# Warmup Iteration   3: 12767.461 ms/op
# Warmup Iteration   4: 12750.684 ms/op
# Warmup Iteration   5: 12750.684 ms/op
Iteration   1: 12767.461 ms/op
                 executeQuery·p0.00:   12767.461 ms/op
                 executeQuery·p0.50:   12767.461 ms/op
                 executeQuery·p0.90:   12767.461 ms/op
                 executeQuery·p0.95:   12767.461 ms/op
                 executeQuery·p0.99:   12767.461 ms/op
                 executeQuery·p0.999:  12767.461 ms/op
                 executeQuery·p0.9999: 12767.461 ms/op
                 executeQuery·p1.00:   12767.461 ms/op

Iteration   2: 12717.130 ms/op
                 executeQuery·p0.00:   12717.130 ms/op
                 executeQuery·p0.50:   12717.130 ms/op
                 executeQuery·p0.90:   12717.130 ms/op
                 executeQuery·p0.95:   12717.130 ms/op
                 executeQuery·p0.99:   12717.130 ms/op
                 executeQuery·p0.999:  12717.130 ms/op
                 executeQuery·p0.9999: 12717.130 ms/op
                 executeQuery·p1.00:   12717.130 ms/op

Iteration   3: 12733.907 ms/op
                 executeQuery·p0.00:   12733.907 ms/op
                 executeQuery·p0.50:   12733.907 ms/op
                 executeQuery·p0.90:   12733.907 ms/op
                 executeQuery·p0.95:   12733.907 ms/op
                 executeQuery·p0.99:   12733.907 ms/op
                 executeQuery·p0.999:  12733.907 ms/op
                 executeQuery·p0.9999: 12733.907 ms/op
                 executeQuery·p1.00:   12733.907 ms/op

Iteration   4: 12750.684 ms/op
                 executeQuery·p0.00:   12750.684 ms/op
                 executeQuery·p0.50:   12750.684 ms/op
                 executeQuery·p0.90:   12750.684 ms/op
                 executeQuery·p0.95:   12750.684 ms/op
                 executeQuery·p0.99:   12750.684 ms/op
                 executeQuery·p0.999:  12750.684 ms/op
                 executeQuery·p0.9999: 12750.684 ms/op
                 executeQuery·p1.00:   12750.684 ms/op

Iteration   5: 12750.684 ms/op
                 executeQuery·p0.00:   12750.684 ms/op
                 executeQuery·p0.50:   12750.684 ms/op
                 executeQuery·p0.90:   12750.684 ms/op
                 executeQuery·p0.95:   12750.684 ms/op
                 executeQuery·p0.99:   12750.684 ms/op
                 executeQuery·p0.999:  12750.684 ms/op
                 executeQuery·p0.9999: 12750.684 ms/op
                 executeQuery·p1.00:   12750.684 ms/op


# Run progress: 66.11% complete, ETA 04:07:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
13203.669 ms/op
# Warmup Iteration   2: 13086.228 ms/op
# Warmup Iteration   3: 12532.580 ms/op
# Warmup Iteration   4: 12532.580 ms/op
# Warmup Iteration   5: 12532.580 ms/op
Iteration   1: 12515.803 ms/op
                 executeQuery·p0.00:   12515.803 ms/op
                 executeQuery·p0.50:   12515.803 ms/op
                 executeQuery·p0.90:   12515.803 ms/op
                 executeQuery·p0.95:   12515.803 ms/op
                 executeQuery·p0.99:   12515.803 ms/op
                 executeQuery·p0.999:  12515.803 ms/op
                 executeQuery·p0.9999: 12515.803 ms/op
                 executeQuery·p1.00:   12515.803 ms/op

Iteration   2: 12515.803 ms/op
                 executeQuery·p0.00:   12515.803 ms/op
                 executeQuery·p0.50:   12515.803 ms/op
                 executeQuery·p0.90:   12515.803 ms/op
                 executeQuery·p0.95:   12515.803 ms/op
                 executeQuery·p0.99:   12515.803 ms/op
                 executeQuery·p0.999:  12515.803 ms/op
                 executeQuery·p0.9999: 12515.803 ms/op
                 executeQuery·p1.00:   12515.803 ms/op

Iteration   3: 12515.803 ms/op
                 executeQuery·p0.00:   12515.803 ms/op
                 executeQuery·p0.50:   12515.803 ms/op
                 executeQuery·p0.90:   12515.803 ms/op
                 executeQuery·p0.95:   12515.803 ms/op
                 executeQuery·p0.99:   12515.803 ms/op
                 executeQuery·p0.999:  12515.803 ms/op
                 executeQuery·p0.9999: 12515.803 ms/op
                 executeQuery·p1.00:   12515.803 ms/op

Iteration   4: 12532.580 ms/op
                 executeQuery·p0.00:   12532.580 ms/op
                 executeQuery·p0.50:   12532.580 ms/op
                 executeQuery·p0.90:   12532.580 ms/op
                 executeQuery·p0.95:   12532.580 ms/op
                 executeQuery·p0.99:   12532.580 ms/op
                 executeQuery·p0.999:  12532.580 ms/op
                 executeQuery·p0.9999: 12532.580 ms/op
                 executeQuery·p1.00:   12532.580 ms/op

Iteration   5: 12532.580 ms/op
                 executeQuery·p0.00:   12532.580 ms/op
                 executeQuery·p0.50:   12532.580 ms/op
                 executeQuery·p0.90:   12532.580 ms/op
                 executeQuery·p0.95:   12532.580 ms/op
                 executeQuery·p0.99:   12532.580 ms/op
                 executeQuery·p0.999:  12532.580 ms/op
                 executeQuery·p0.9999: 12532.580 ms/op
                 executeQuery·p1.00:   12532.580 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 10
  mean =  12633.244 ±(99.9%) 177.754 ms/op

  Histogram, ms/op:
    [12500.000, 12525.000) = 3 
    [12525.000, 12550.000) = 2 
    [12550.000, 12575.000) = 0 
    [12575.000, 12600.000) = 0 
    [12600.000, 12625.000) = 0 
    [12625.000, 12650.000) = 0 
    [12650.000, 12675.000) = 0 
    [12675.000, 12700.000) = 0 
    [12700.000, 12725.000) = 1 
    [12725.000, 12750.000) = 1 
    [12750.000, 12775.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =  12515.803 ms/op
     p(50.0000) =  12624.855 ms/op
     p(90.0000) =  12765.784 ms/op
     p(95.0000) =  12767.461 ms/op
     p(99.0000) =  12767.461 ms/op
     p(99.9000) =  12767.461 ms/op
     p(99.9900) =  12767.461 ms/op
     p(99.9990) =  12767.461 ms/op
     p(99.9999) =  12767.461 ms/op
    p(100.0000) =  12767.461 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 66.67% complete, ETA 04:02:32
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
567.437 ±(99.9%) 682.100 ms/op
# Warmup Iteration   2: 425.058 ±(99.9%) 16.936 ms/op
# Warmup Iteration   3: 420.151 ±(99.9%) 14.067 ms/op
# Warmup Iteration   4: 462.072 ±(99.9%) 30.752 ms/op
# Warmup Iteration   5: 423.035 ±(99.9%) 19.856 ms/op
Iteration   1: 476.128 ±(99.9%) 1.966 ms/op
                 executeQuery·p0.00:   473.956 ms/op
                 executeQuery·p0.50:   475.791 ms/op
                 executeQuery·p0.90:   478.937 ms/op
                 executeQuery·p0.95:   479.724 ms/op
                 executeQuery·p0.99:   479.724 ms/op
                 executeQuery·p0.999:  479.724 ms/op
                 executeQuery·p0.9999: 479.724 ms/op
                 executeQuery·p1.00:   479.724 ms/op

Iteration   2: 476.203 ±(99.9%) 17.270 ms/op
                 executeQuery·p0.00:   434.110 ms/op
                 executeQuery·p0.50:   475.791 ms/op
                 executeQuery·p0.90:   501.219 ms/op
                 executeQuery·p0.95:   501.744 ms/op
                 executeQuery·p0.99:   501.744 ms/op
                 executeQuery·p0.999:  501.744 ms/op
                 executeQuery·p0.9999: 501.744 ms/op
                 executeQuery·p1.00:   501.744 ms/op

Iteration   3: 415.465 ±(99.9%) 7.322 ms/op
                 executeQuery·p0.00:   409.469 ms/op
                 executeQuery·p0.50:   413.139 ms/op
                 executeQuery·p0.90:   432.695 ms/op
                 executeQuery·p0.95:   433.062 ms/op
                 executeQuery·p0.99:   433.062 ms/op
                 executeQuery·p0.999:  433.062 ms/op
                 executeQuery·p0.9999: 433.062 ms/op
                 executeQuery·p1.00:   433.062 ms/op

Iteration   4: 416.547 ±(99.9%) 2.153 ms/op
                 executeQuery·p0.00:   413.663 ms/op
                 executeQuery·p0.50:   416.547 ms/op
                 executeQuery·p0.90:   419.588 ms/op
                 executeQuery·p0.95:   419.955 ms/op
                 executeQuery·p0.99:   419.955 ms/op
                 executeQuery·p0.999:  419.955 ms/op
                 executeQuery·p0.9999: 419.955 ms/op
                 executeQuery·p1.00:   419.955 ms/op

Iteration   5: 415.662 ±(99.9%) 8.045 ms/op
                 executeQuery·p0.00:   408.945 ms/op
                 executeQuery·p0.50:   414.712 ms/op
                 executeQuery·p0.90:   425.565 ms/op
                 executeQuery·p0.95:   443.548 ms/op
                 executeQuery·p0.99:   443.548 ms/op
                 executeQuery·p0.999:  443.548 ms/op
                 executeQuery·p0.9999: 443.548 ms/op
                 executeQuery·p1.00:   443.548 ms/op


# Run progress: 67.22% complete, ETA 03:57:23
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
425.399 ±(99.9%) 185.704 ms/op
# Warmup Iteration   2: 371.659 ±(99.9%) 18.149 ms/op
# Warmup Iteration   3: 378.968 ±(99.9%) 25.741 ms/op
# Warmup Iteration   4: 420.905 ±(99.9%) 44.578 ms/op
# Warmup Iteration   5: 410.321 ±(99.9%) 27.743 ms/op
Iteration   1: 436.732 ±(99.9%) 4.000 ms/op
                 executeQuery·p0.00:   430.965 ms/op
                 executeQuery·p0.50:   436.470 ms/op
                 executeQuery·p0.90:   441.922 ms/op
                 executeQuery·p0.95:   443.023 ms/op
                 executeQuery·p0.99:   443.023 ms/op
                 executeQuery·p0.999:  443.023 ms/op
                 executeQuery·p0.9999: 443.023 ms/op
                 executeQuery·p1.00:   443.023 ms/op

Iteration   2: 378.968 ±(99.9%) 37.745 ms/op
                 executeQuery·p0.00:   351.273 ms/op
                 executeQuery·p0.50:   354.943 ms/op
                 executeQuery·p0.90:   443.023 ms/op
                 executeQuery·p0.95:   455.606 ms/op
                 executeQuery·p0.99:   455.606 ms/op
                 executeQuery·p0.999:  455.606 ms/op
                 executeQuery·p0.9999: 455.606 ms/op
                 executeQuery·p1.00:   455.606 ms/op

Iteration   3: 379.184 ±(99.9%) 10.595 ms/op
                 executeQuery·p0.00:   351.797 ms/op
                 executeQuery·p0.50:   381.682 ms/op
                 executeQuery·p0.90:   388.288 ms/op
                 executeQuery·p0.95:   389.546 ms/op
                 executeQuery·p0.99:   389.546 ms/op
                 executeQuery·p0.999:  389.546 ms/op
                 executeQuery·p0.9999: 389.546 ms/op
                 executeQuery·p1.00:   389.546 ms/op

Iteration   4: 373.540 ±(99.9%) 11.267 ms/op
                 executeQuery·p0.00:   352.322 ms/op
                 executeQuery·p0.50:   375.914 ms/op
                 executeQuery·p0.90:   385.457 ms/op
                 executeQuery·p0.95:   387.973 ms/op
                 executeQuery·p0.99:   387.973 ms/op
                 executeQuery·p0.999:  387.973 ms/op
                 executeQuery·p0.9999: 387.973 ms/op
                 executeQuery·p1.00:   387.973 ms/op

Iteration   5: 353.661 ±(99.9%) 3.299 ms/op
                 executeQuery·p0.00:   351.273 ms/op
                 executeQuery·p0.50:   352.322 ms/op
                 executeQuery·p0.90:   359.819 ms/op
                 executeQuery·p0.95:   365.953 ms/op
                 executeQuery·p0.99:   365.953 ms/op
                 executeQuery·p0.999:  365.953 ms/op
                 executeQuery·p0.9999: 365.953 ms/op
                 executeQuery·p1.00:   365.953 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 161
  mean =    409.241 ±(99.9%) 11.077 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 40 
    [375.000, 400.000) = 24 
    [400.000, 425.000) = 46 
    [425.000, 450.000) = 23 
    [450.000, 475.000) = 7 
    [475.000, 500.000) = 19 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    351.273 ms/op
     p(50.0000) =    413.663 ms/op
     p(90.0000) =    475.424 ms/op
     p(95.0000) =    477.050 ms/op
     p(99.0000) =    501.093 ms/op
     p(99.9000) =    501.744 ms/op
     p(99.9900) =    501.744 ms/op
     p(99.9990) =    501.744 ms/op
     p(99.9999) =    501.744 ms/op
    p(100.0000) =    501.744 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 67.78% complete, ETA 03:52:17
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
20031.996 ms/op
# Warmup Iteration   2: 4420.796 ms/op
# Warmup Iteration   3: 4747.952 ms/op
# Warmup Iteration   4: 4404.019 ms/op
# Warmup Iteration   5: 4563.403 ms/op
Iteration   1: 4529.848 ms/op
                 executeQuery·p0.00:   4529.848 ms/op
                 executeQuery·p0.50:   4529.848 ms/op
                 executeQuery·p0.90:   4529.848 ms/op
                 executeQuery·p0.95:   4529.848 ms/op
                 executeQuery·p0.99:   4529.848 ms/op
                 executeQuery·p0.999:  4529.848 ms/op
                 executeQuery·p0.9999: 4529.848 ms/op
                 executeQuery·p1.00:   4529.848 ms/op

Iteration   2: 4412.408 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   3: 4437.574 ms/op
                 executeQuery·p0.00:   4437.574 ms/op
                 executeQuery·p0.50:   4437.574 ms/op
                 executeQuery·p0.90:   4437.574 ms/op
                 executeQuery·p0.95:   4437.574 ms/op
                 executeQuery·p0.99:   4437.574 ms/op
                 executeQuery·p0.999:  4437.574 ms/op
                 executeQuery·p0.9999: 4437.574 ms/op
                 executeQuery·p1.00:   4437.574 ms/op

Iteration   4: 4412.408 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   5: 4580.180 ms/op
                 executeQuery·p0.00:   4580.180 ms/op
                 executeQuery·p0.50:   4580.180 ms/op
                 executeQuery·p0.90:   4580.180 ms/op
                 executeQuery·p0.95:   4580.180 ms/op
                 executeQuery·p0.99:   4580.180 ms/op
                 executeQuery·p0.999:  4580.180 ms/op
                 executeQuery·p0.9999: 4580.180 ms/op
                 executeQuery·p1.00:   4580.180 ms/op


# Run progress: 68.33% complete, ETA 03:50:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
7499.416 ms/op
# Warmup Iteration   2: 4265.607 ms/op
# Warmup Iteration   3: 4932.502 ms/op
# Warmup Iteration   4: 4273.996 ms/op
# Warmup Iteration   5: 4521.460 ms/op
Iteration   1: 4211.081 ms/op
                 executeQuery·p0.00:   4211.081 ms/op
                 executeQuery·p0.50:   4211.081 ms/op
                 executeQuery·p0.90:   4211.081 ms/op
                 executeQuery·p0.95:   4211.081 ms/op
                 executeQuery·p0.99:   4211.081 ms/op
                 executeQuery·p0.999:  4211.081 ms/op
                 executeQuery·p0.9999: 4211.081 ms/op
                 executeQuery·p1.00:   4211.081 ms/op

Iteration   2: 4294.967 ms/op
                 executeQuery·p0.00:   4294.967 ms/op
                 executeQuery·p0.50:   4294.967 ms/op
                 executeQuery·p0.90:   4294.967 ms/op
                 executeQuery·p0.95:   4294.967 ms/op
                 executeQuery·p0.99:   4294.967 ms/op
                 executeQuery·p0.999:  4294.967 ms/op
                 executeQuery·p0.9999: 4294.967 ms/op
                 executeQuery·p1.00:   4294.967 ms/op

Iteration   3: 4336.910 ms/op
                 executeQuery·p0.00:   4336.910 ms/op
                 executeQuery·p0.50:   4336.910 ms/op
                 executeQuery·p0.90:   4336.910 ms/op
                 executeQuery·p0.95:   4336.910 ms/op
                 executeQuery·p0.99:   4336.910 ms/op
                 executeQuery·p0.999:  4336.910 ms/op
                 executeQuery·p0.9999: 4336.910 ms/op
                 executeQuery·p1.00:   4336.910 ms/op

Iteration   4: 4353.688 ms/op
                 executeQuery·p0.00:   4353.688 ms/op
                 executeQuery·p0.50:   4353.688 ms/op
                 executeQuery·p0.90:   4353.688 ms/op
                 executeQuery·p0.95:   4353.688 ms/op
                 executeQuery·p0.99:   4353.688 ms/op
                 executeQuery·p0.999:  4353.688 ms/op
                 executeQuery·p0.9999: 4353.688 ms/op
                 executeQuery·p1.00:   4353.688 ms/op

Iteration   5: 4294.967 ms/op
                 executeQuery·p0.00:   4294.967 ms/op
                 executeQuery·p0.50:   4294.967 ms/op
                 executeQuery·p0.90:   4294.967 ms/op
                 executeQuery·p0.95:   4294.967 ms/op
                 executeQuery·p0.99:   4294.967 ms/op
                 executeQuery·p0.999:  4294.967 ms/op
                 executeQuery·p0.9999: 4294.967 ms/op
                 executeQuery·p1.00:   4294.967 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   4386.403 ±(99.9%) 169.463 ms/op

  Histogram, ms/op:
    [4200.000, 4225.000) = 1 
    [4225.000, 4250.000) = 0 
    [4250.000, 4275.000) = 0 
    [4275.000, 4300.000) = 2 
    [4300.000, 4325.000) = 0 
    [4325.000, 4350.000) = 1 
    [4350.000, 4375.000) = 1 
    [4375.000, 4400.000) = 0 
    [4400.000, 4425.000) = 2 
    [4425.000, 4450.000) = 1 
    [4450.000, 4475.000) = 0 
    [4475.000, 4500.000) = 0 
    [4500.000, 4525.000) = 0 
    [4525.000, 4550.000) = 1 
    [4550.000, 4575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4211.081 ms/op
     p(50.0000) =   4383.048 ms/op
     p(90.0000) =   4575.147 ms/op
     p(95.0000) =   4580.180 ms/op
     p(99.0000) =   4580.180 ms/op
     p(99.9000) =   4580.180 ms/op
     p(99.9900) =   4580.180 ms/op
     p(99.9990) =   4580.180 ms/op
     p(99.9999) =   4580.180 ms/op
    p(100.0000) =   4580.180 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 68.89% complete, ETA 03:48:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
402.169 ±(99.9%) 218.332 ms/op
# Warmup Iteration   2: 335.195 ±(99.9%) 20.514 ms/op
# Warmup Iteration   3: 333.069 ±(99.9%) 11.922 ms/op
# Warmup Iteration   4: 333.855 ±(99.9%) 13.104 ms/op
# Warmup Iteration   5: 354.172 ±(99.9%) 17.937 ms/op
Iteration   1: 349.608 ±(99.9%) 19.017 ms/op
                 executeQuery·p0.00:   322.961 ms/op
                 executeQuery·p0.50:   351.273 ms/op
                 executeQuery·p0.90:   374.132 ms/op
                 executeQuery·p0.95:   390.070 ms/op
                 executeQuery·p0.99:   390.070 ms/op
                 executeQuery·p0.999:  390.070 ms/op
                 executeQuery·p0.9999: 390.070 ms/op
                 executeQuery·p1.00:   390.070 ms/op

Iteration   2: 335.253 ±(99.9%) 4.713 ms/op
                 executeQuery·p0.00:   324.534 ms/op
                 executeQuery·p0.50:   336.331 ms/op
                 executeQuery·p0.90:   341.102 ms/op
                 executeQuery·p0.95:   343.933 ms/op
                 executeQuery·p0.99:   343.933 ms/op
                 executeQuery·p0.999:  343.933 ms/op
                 executeQuery·p0.9999: 343.933 ms/op
                 executeQuery·p1.00:   343.933 ms/op

Iteration   3: 358.983 ±(99.9%) 6.345 ms/op
                 executeQuery·p0.00:   345.506 ms/op
                 executeQuery·p0.50:   358.613 ms/op
                 executeQuery·p0.90:   370.776 ms/op
                 executeQuery·p0.95:   371.196 ms/op
                 executeQuery·p0.99:   371.196 ms/op
                 executeQuery·p0.999:  371.196 ms/op
                 executeQuery·p0.9999: 371.196 ms/op
                 executeQuery·p1.00:   371.196 ms/op

Iteration   4: 360.278 ±(99.9%) 7.582 ms/op
                 executeQuery·p0.00:   349.176 ms/op
                 executeQuery·p0.50:   362.807 ms/op
                 executeQuery·p0.90:   370.252 ms/op
                 executeQuery·p0.95:   370.672 ms/op
                 executeQuery·p0.99:   370.672 ms/op
                 executeQuery·p0.999:  370.672 ms/op
                 executeQuery·p0.9999: 370.672 ms/op
                 executeQuery·p1.00:   370.672 ms/op

Iteration   5: 349.299 ±(99.9%) 15.269 ms/op
                 executeQuery·p0.00:   318.243 ms/op
                 executeQuery·p0.50:   359.662 ms/op
                 executeQuery·p0.90:   363.646 ms/op
                 executeQuery·p0.95:   364.904 ms/op
                 executeQuery·p0.99:   364.904 ms/op
                 executeQuery·p0.999:  364.904 ms/op
                 executeQuery·p0.9999: 364.904 ms/op
                 executeQuery·p1.00:   364.904 ms/op


# Run progress: 69.44% complete, ETA 03:42:57
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
421.337 ±(99.9%) 250.386 ms/op
# Warmup Iteration   2: 332.107 ±(99.9%) 16.750 ms/op
# Warmup Iteration   3: 330.564 ±(99.9%) 9.493 ms/op
# Warmup Iteration   4: 330.680 ±(99.9%) 15.477 ms/op
# Warmup Iteration   5: 348.185 ±(99.9%) 19.336 ms/op
Iteration   1: 366.724 ±(99.9%) 4.762 ms/op
                 executeQuery·p0.00:   357.040 ms/op
                 executeQuery·p0.50:   364.904 ms/op
                 executeQuery·p0.90:   372.559 ms/op
                 executeQuery·p0.95:   373.817 ms/op
                 executeQuery·p0.99:   373.817 ms/op
                 executeQuery·p0.999:  373.817 ms/op
                 executeQuery·p0.9999: 373.817 ms/op
                 executeQuery·p1.00:   373.817 ms/op

Iteration   2: 338.894 ±(99.9%) 7.113 ms/op
                 executeQuery·p0.00:   329.253 ms/op
                 executeQuery·p0.50:   336.593 ms/op
                 executeQuery·p0.90:   351.640 ms/op
                 executeQuery·p0.95:   359.662 ms/op
                 executeQuery·p0.99:   359.662 ms/op
                 executeQuery·p0.999:  359.662 ms/op
                 executeQuery·p0.9999: 359.662 ms/op
                 executeQuery·p1.00:   359.662 ms/op

Iteration   3: 342.447 ±(99.9%) 13.965 ms/op
                 executeQuery·p0.00:   328.729 ms/op
                 executeQuery·p0.50:   335.020 ms/op
                 executeQuery·p0.90:   368.207 ms/op
                 executeQuery·p0.95:   369.623 ms/op
                 executeQuery·p0.99:   369.623 ms/op
                 executeQuery·p0.999:  369.623 ms/op
                 executeQuery·p0.9999: 369.623 ms/op
                 executeQuery·p1.00:   369.623 ms/op

Iteration   4: 364.473 ±(99.9%) 3.656 ms/op
                 executeQuery·p0.00:   357.564 ms/op
                 executeQuery·p0.50:   363.856 ms/op
                 executeQuery·p0.90:   370.567 ms/op
                 executeQuery·p0.95:   372.244 ms/op
                 executeQuery·p0.99:   372.244 ms/op
                 executeQuery·p0.999:  372.244 ms/op
                 executeQuery·p0.9999: 372.244 ms/op
                 executeQuery·p1.00:   372.244 ms/op

Iteration   5: 363.547 ±(99.9%) 3.551 ms/op
                 executeQuery·p0.00:   357.564 ms/op
                 executeQuery·p0.50:   363.856 ms/op
                 executeQuery·p0.90:   368.784 ms/op
                 executeQuery·p0.95:   369.623 ms/op
                 executeQuery·p0.99:   369.623 ms/op
                 executeQuery·p0.999:  369.623 ms/op
                 executeQuery·p0.9999: 369.623 ms/op
                 executeQuery·p1.00:   369.623 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 173
  mean =    352.706 ±(99.9%) 3.795 ms/op

  Histogram, ms/op:
    [310.000, 315.000) = 0 
    [315.000, 320.000) = 1 
    [320.000, 325.000) = 2 
    [325.000, 330.000) = 8 
    [330.000, 335.000) = 19 
    [335.000, 340.000) = 22 
    [340.000, 345.000) = 6 
    [345.000, 350.000) = 5 
    [350.000, 355.000) = 13 
    [355.000, 360.000) = 21 
    [360.000, 365.000) = 36 
    [365.000, 370.000) = 26 
    [370.000, 375.000) = 13 
    [375.000, 380.000) = 0 
    [380.000, 385.000) = 0 
    [385.000, 390.000) = 0 
    [390.000, 395.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    318.243 ms/op
     p(50.0000) =    358.613 ms/op
     p(90.0000) =    369.204 ms/op
     p(95.0000) =    370.829 ms/op
     p(99.0000) =    378.043 ms/op
     p(99.9000) =    390.070 ms/op
     p(99.9900) =    390.070 ms/op
     p(99.9990) =    390.070 ms/op
     p(99.9999) =    390.070 ms/op
    p(100.0000) =    390.070 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 70.00% complete, ETA 03:37:54
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
7298.089 ms/op
# Warmup Iteration   2: 4068.475 ms/op
# Warmup Iteration   3: 4265.607 ms/op
# Warmup Iteration   4: 3896.508 ms/op
# Warmup Iteration   5: 3867.148 ms/op
Iteration   1: 3732.931 ms/op
                 executeQuery·p0.00:   3732.931 ms/op
                 executeQuery·p0.50:   3732.931 ms/op
                 executeQuery·p0.90:   3732.931 ms/op
                 executeQuery·p0.95:   3732.931 ms/op
                 executeQuery·p0.99:   3732.931 ms/op
                 executeQuery·p0.999:  3732.931 ms/op
                 executeQuery·p0.9999: 3732.931 ms/op
                 executeQuery·p1.00:   3732.931 ms/op

Iteration   2: 3695.182 ms/op
                 executeQuery·p0.00:   3695.182 ms/op
                 executeQuery·p0.50:   3695.182 ms/op
                 executeQuery·p0.90:   3695.182 ms/op
                 executeQuery·p0.95:   3695.182 ms/op
                 executeQuery·p0.99:   3695.182 ms/op
                 executeQuery·p0.999:  3695.182 ms/op
                 executeQuery·p0.9999: 3695.182 ms/op
                 executeQuery·p1.00:   3695.182 ms/op

Iteration   3: 3904.897 ms/op
                 executeQuery·p0.00:   3904.897 ms/op
                 executeQuery·p0.50:   3904.897 ms/op
                 executeQuery·p0.90:   3904.897 ms/op
                 executeQuery·p0.95:   3904.897 ms/op
                 executeQuery·p0.99:   3904.897 ms/op
                 executeQuery·p0.999:  3904.897 ms/op
                 executeQuery·p0.9999: 3904.897 ms/op
                 executeQuery·p1.00:   3904.897 ms/op

Iteration   4: 3800.039 ms/op
                 executeQuery·p0.00:   3800.039 ms/op
                 executeQuery·p0.50:   3800.039 ms/op
                 executeQuery·p0.90:   3800.039 ms/op
                 executeQuery·p0.95:   3800.039 ms/op
                 executeQuery·p0.99:   3800.039 ms/op
                 executeQuery·p0.999:  3800.039 ms/op
                 executeQuery·p0.9999: 3800.039 ms/op
                 executeQuery·p1.00:   3800.039 ms/op

Iteration   5: 3787.457 ms/op
                 executeQuery·p0.00:   3787.457 ms/op
                 executeQuery·p0.50:   3787.457 ms/op
                 executeQuery·p0.90:   3787.457 ms/op
                 executeQuery·p0.95:   3787.457 ms/op
                 executeQuery·p0.99:   3787.457 ms/op
                 executeQuery·p0.999:  3787.457 ms/op
                 executeQuery·p0.9999: 3787.457 ms/op
                 executeQuery·p1.00:   3787.457 ms/op


# Run progress: 70.56% complete, ETA 03:35:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
7256.146 ms/op
# Warmup Iteration   2: 4232.053 ms/op
# Warmup Iteration   3: 4076.863 ms/op
# Warmup Iteration   4: 4521.460 ms/op
# Warmup Iteration   5: 4412.408 ms/op
Iteration   1: 4353.688 ms/op
                 executeQuery·p0.00:   4353.688 ms/op
                 executeQuery·p0.50:   4353.688 ms/op
                 executeQuery·p0.90:   4353.688 ms/op
                 executeQuery·p0.95:   4353.688 ms/op
                 executeQuery·p0.99:   4353.688 ms/op
                 executeQuery·p0.999:  4353.688 ms/op
                 executeQuery·p0.9999: 4353.688 ms/op
                 executeQuery·p1.00:   4353.688 ms/op

Iteration   2: 4479.517 ms/op
                 executeQuery·p0.00:   4479.517 ms/op
                 executeQuery·p0.50:   4479.517 ms/op
                 executeQuery·p0.90:   4479.517 ms/op
                 executeQuery·p0.95:   4479.517 ms/op
                 executeQuery·p0.99:   4479.517 ms/op
                 executeQuery·p0.999:  4479.517 ms/op
                 executeQuery·p0.9999: 4479.517 ms/op
                 executeQuery·p1.00:   4479.517 ms/op

Iteration   3: 4303.356 ms/op
                 executeQuery·p0.00:   4303.356 ms/op
                 executeQuery·p0.50:   4303.356 ms/op
                 executeQuery·p0.90:   4303.356 ms/op
                 executeQuery·p0.95:   4303.356 ms/op
                 executeQuery·p0.99:   4303.356 ms/op
                 executeQuery·p0.999:  4303.356 ms/op
                 executeQuery·p0.9999: 4303.356 ms/op
                 executeQuery·p1.00:   4303.356 ms/op

Iteration   4: 4420.796 ms/op
                 executeQuery·p0.00:   4420.796 ms/op
                 executeQuery·p0.50:   4420.796 ms/op
                 executeQuery·p0.90:   4420.796 ms/op
                 executeQuery·p0.95:   4420.796 ms/op
                 executeQuery·p0.99:   4420.796 ms/op
                 executeQuery·p0.999:  4420.796 ms/op
                 executeQuery·p0.9999: 4420.796 ms/op
                 executeQuery·p1.00:   4420.796 ms/op

Iteration   5: 3825.205 ms/op
                 executeQuery·p0.00:   3825.205 ms/op
                 executeQuery·p0.50:   3825.205 ms/op
                 executeQuery·p0.90:   3825.205 ms/op
                 executeQuery·p0.95:   3825.205 ms/op
                 executeQuery·p0.99:   3825.205 ms/op
                 executeQuery·p0.999:  3825.205 ms/op
                 executeQuery·p0.9999: 3825.205 ms/op
                 executeQuery·p1.00:   3825.205 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   4030.307 ±(99.9%) 479.136 ms/op

  Histogram, ms/op:
    [3600.000, 3650.000) = 0 
    [3650.000, 3700.000) = 1 
    [3700.000, 3750.000) = 1 
    [3750.000, 3800.000) = 1 
    [3800.000, 3850.000) = 2 
    [3850.000, 3900.000) = 0 
    [3900.000, 3950.000) = 1 
    [3950.000, 4000.000) = 0 
    [4000.000, 4050.000) = 0 
    [4050.000, 4100.000) = 0 
    [4100.000, 4150.000) = 0 
    [4150.000, 4200.000) = 0 
    [4200.000, 4250.000) = 0 
    [4250.000, 4300.000) = 0 
    [4300.000, 4350.000) = 1 
    [4350.000, 4400.000) = 1 
    [4400.000, 4450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3695.182 ms/op
     p(50.0000) =   3865.051 ms/op
     p(90.0000) =   4473.645 ms/op
     p(95.0000) =   4479.517 ms/op
     p(99.0000) =   4479.517 ms/op
     p(99.9000) =   4479.517 ms/op
     p(99.9900) =   4479.517 ms/op
     p(99.9990) =   4479.517 ms/op
     p(99.9999) =   4479.517 ms/op
    p(100.0000) =   4479.517 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 71.11% complete, ETA 03:32:12
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
428.518 ±(99.9%) 239.041 ms/op
# Warmup Iteration   2: 352.229 ±(99.9%) 9.526 ms/op
# Warmup Iteration   3: 350.286 ±(99.9%) 12.104 ms/op
# Warmup Iteration   4: 352.722 ±(99.9%) 12.364 ms/op
# Warmup Iteration   5: 361.481 ±(99.9%) 17.171 ms/op
Iteration   1: 385.876 ±(99.9%) 7.590 ms/op
                 executeQuery·p0.00:   377.487 ms/op
                 executeQuery·p0.50:   385.090 ms/op
                 executeQuery·p0.90:   396.571 ms/op
                 executeQuery·p0.95:   410.518 ms/op
                 executeQuery·p0.99:   410.518 ms/op
                 executeQuery·p0.999:  410.518 ms/op
                 executeQuery·p0.9999: 410.518 ms/op
                 executeQuery·p1.00:   410.518 ms/op

Iteration   2: 354.264 ±(99.9%) 5.536 ms/op
                 executeQuery·p0.00:   342.360 ms/op
                 executeQuery·p0.50:   355.467 ms/op
                 executeQuery·p0.90:   360.815 ms/op
                 executeQuery·p0.95:   363.332 ms/op
                 executeQuery·p0.99:   363.332 ms/op
                 executeQuery·p0.999:  363.332 ms/op
                 executeQuery·p0.9999: 363.332 ms/op
                 executeQuery·p1.00:   363.332 ms/op

Iteration   3: 366.817 ±(99.9%) 14.769 ms/op
                 executeQuery·p0.00:   352.846 ms/op
                 executeQuery·p0.50:   358.613 ms/op
                 executeQuery·p0.90:   388.183 ms/op
                 executeQuery·p0.95:   389.022 ms/op
                 executeQuery·p0.99:   389.022 ms/op
                 executeQuery·p0.999:  389.022 ms/op
                 executeQuery·p0.9999: 389.022 ms/op
                 executeQuery·p1.00:   389.022 ms/op

Iteration   4: 383.025 ±(99.9%) 4.763 ms/op
                 executeQuery·p0.00:   376.963 ms/op
                 executeQuery·p0.50:   381.682 ms/op
                 executeQuery·p0.90:   391.433 ms/op
                 executeQuery·p0.95:   392.167 ms/op
                 executeQuery·p0.99:   392.167 ms/op
                 executeQuery·p0.999:  392.167 ms/op
                 executeQuery·p0.9999: 392.167 ms/op
                 executeQuery·p1.00:   392.167 ms/op

Iteration   5: 382.861 ±(99.9%) 2.500 ms/op
                 executeQuery·p0.00:   379.585 ms/op
                 executeQuery·p0.50:   382.206 ms/op
                 executeQuery·p0.90:   387.449 ms/op
                 executeQuery·p0.95:   387.449 ms/op
                 executeQuery·p0.99:   387.449 ms/op
                 executeQuery·p0.999:  387.449 ms/op
                 executeQuery·p0.9999: 387.449 ms/op
                 executeQuery·p1.00:   387.449 ms/op


# Run progress: 71.67% complete, ETA 03:27:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
429.726 ±(99.9%) 253.567 ms/op
# Warmup Iteration   2: 356.177 ±(99.9%) 15.469 ms/op
# Warmup Iteration   3: 364.781 ±(99.9%) 8.023 ms/op
# Warmup Iteration   4: 361.296 ±(99.9%) 12.831 ms/op
# Warmup Iteration   5: 355.560 ±(99.9%) 14.933 ms/op
Iteration   1: 378.995 ±(99.9%) 4.837 ms/op
                 executeQuery·p0.00:   373.817 ms/op
                 executeQuery·p0.50:   377.750 ms/op
                 executeQuery·p0.90:   385.614 ms/op
                 executeQuery·p0.95:   394.789 ms/op
                 executeQuery·p0.99:   394.789 ms/op
                 executeQuery·p0.999:  394.789 ms/op
                 executeQuery·p0.9999: 394.789 ms/op
                 executeQuery·p1.00:   394.789 ms/op

Iteration   2: 356.207 ±(99.9%) 18.125 ms/op
                 executeQuery·p0.00:   339.739 ms/op
                 executeQuery·p0.50:   348.127 ms/op
                 executeQuery·p0.90:   394.160 ms/op
                 executeQuery·p0.95:   395.837 ms/op
                 executeQuery·p0.99:   395.837 ms/op
                 executeQuery·p0.999:  395.837 ms/op
                 executeQuery·p0.9999: 395.837 ms/op
                 executeQuery·p1.00:   395.837 ms/op

Iteration   3: 348.806 ±(99.9%) 2.260 ms/op
                 executeQuery·p0.00:   344.457 ms/op
                 executeQuery·p0.50:   349.176 ms/op
                 executeQuery·p0.90:   352.426 ms/op
                 executeQuery·p0.95:   352.846 ms/op
                 executeQuery·p0.99:   352.846 ms/op
                 executeQuery·p0.999:  352.846 ms/op
                 executeQuery·p0.9999: 352.846 ms/op
                 executeQuery·p1.00:   352.846 ms/op

Iteration   4: 378.667 ±(99.9%) 5.070 ms/op
                 executeQuery·p0.00:   373.817 ms/op
                 executeQuery·p0.50:   377.225 ms/op
                 executeQuery·p0.90:   389.127 ms/op
                 executeQuery·p0.95:   390.595 ms/op
                 executeQuery·p0.99:   390.595 ms/op
                 executeQuery·p0.999:  390.595 ms/op
                 executeQuery·p0.9999: 390.595 ms/op
                 executeQuery·p1.00:   390.595 ms/op

Iteration   5: 376.871 ±(99.9%) 1.657 ms/op
                 executeQuery·p0.00:   374.342 ms/op
                 executeQuery·p0.50:   376.963 ms/op
                 executeQuery·p0.90:   379.689 ms/op
                 executeQuery·p0.95:   380.109 ms/op
                 executeQuery·p0.99:   380.109 ms/op
                 executeQuery·p0.999:  380.109 ms/op
                 executeQuery·p0.9999: 380.109 ms/op
                 executeQuery·p1.00:   380.109 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 165
  mean =    370.916 ±(99.9%) 4.056 ms/op

  Histogram, ms/op:
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 1 
    [340.000, 345.000) = 7 
    [345.000, 350.000) = 19 
    [350.000, 355.000) = 16 
    [355.000, 360.000) = 11 
    [360.000, 365.000) = 4 
    [365.000, 370.000) = 0 
    [370.000, 375.000) = 10 
    [375.000, 380.000) = 39 
    [380.000, 385.000) = 32 
    [385.000, 390.000) = 18 
    [390.000, 395.000) = 6 
    [395.000, 400.000) = 1 
    [400.000, 405.000) = 0 
    [405.000, 410.000) = 0 
    [410.000, 415.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    339.739 ms/op
     p(50.0000) =    377.487 ms/op
     p(90.0000) =    387.449 ms/op
     p(95.0000) =    390.123 ms/op
     p(99.0000) =    400.829 ms/op
     p(99.9000) =    410.518 ms/op
     p(99.9900) =    410.518 ms/op
     p(99.9990) =    410.518 ms/op
     p(99.9999) =    410.518 ms/op
    p(100.0000) =    410.518 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 72.22% complete, ETA 03:22:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
7549.747 ms/op
# Warmup Iteration   2: 3904.897 ms/op
# Warmup Iteration   3: 4311.745 ms/op
# Warmup Iteration   4: 3808.428 ms/op
# Warmup Iteration   5: 4236.247 ms/op
Iteration   1: 4244.636 ms/op
                 executeQuery·p0.00:   4244.636 ms/op
                 executeQuery·p0.50:   4244.636 ms/op
                 executeQuery·p0.90:   4244.636 ms/op
                 executeQuery·p0.95:   4244.636 ms/op
                 executeQuery·p0.99:   4244.636 ms/op
                 executeQuery·p0.999:  4244.636 ms/op
                 executeQuery·p0.9999: 4244.636 ms/op
                 executeQuery·p1.00:   4244.636 ms/op

Iteration   2: 4152.361 ms/op
                 executeQuery·p0.00:   4152.361 ms/op
                 executeQuery·p0.50:   4152.361 ms/op
                 executeQuery·p0.90:   4152.361 ms/op
                 executeQuery·p0.95:   4152.361 ms/op
                 executeQuery·p0.99:   4152.361 ms/op
                 executeQuery·p0.999:  4152.361 ms/op
                 executeQuery·p0.9999: 4152.361 ms/op
                 executeQuery·p1.00:   4152.361 ms/op

Iteration   3: 4055.892 ms/op
                 executeQuery·p0.00:   4055.892 ms/op
                 executeQuery·p0.50:   4055.892 ms/op
                 executeQuery·p0.90:   4055.892 ms/op
                 executeQuery·p0.95:   4055.892 ms/op
                 executeQuery·p0.99:   4055.892 ms/op
                 executeQuery·p0.999:  4055.892 ms/op
                 executeQuery·p0.9999: 4055.892 ms/op
                 executeQuery·p1.00:   4055.892 ms/op

Iteration   4: 4253.024 ms/op
                 executeQuery·p0.00:   4253.024 ms/op
                 executeQuery·p0.50:   4253.024 ms/op
                 executeQuery·p0.90:   4253.024 ms/op
                 executeQuery·p0.95:   4253.024 ms/op
                 executeQuery·p0.99:   4253.024 ms/op
                 executeQuery·p0.999:  4253.024 ms/op
                 executeQuery·p0.9999: 4253.024 ms/op
                 executeQuery·p1.00:   4253.024 ms/op

Iteration   5: 4219.470 ms/op
                 executeQuery·p0.00:   4219.470 ms/op
                 executeQuery·p0.50:   4219.470 ms/op
                 executeQuery·p0.90:   4219.470 ms/op
                 executeQuery·p0.95:   4219.470 ms/op
                 executeQuery·p0.99:   4219.470 ms/op
                 executeQuery·p0.999:  4219.470 ms/op
                 executeQuery·p0.9999: 4219.470 ms/op
                 executeQuery·p1.00:   4219.470 ms/op


# Run progress: 72.78% complete, ETA 03:19:07
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
7432.307 ms/op
# Warmup Iteration   2: 4181.721 ms/op
# Warmup Iteration   3: 4106.224 ms/op
# Warmup Iteration   4: 3972.006 ms/op
# Warmup Iteration   5: 4064.281 ms/op
Iteration   1: 4244.636 ms/op
                 executeQuery·p0.00:   4244.636 ms/op
                 executeQuery·p0.50:   4244.636 ms/op
                 executeQuery·p0.90:   4244.636 ms/op
                 executeQuery·p0.95:   4244.636 ms/op
                 executeQuery·p0.99:   4244.636 ms/op
                 executeQuery·p0.999:  4244.636 ms/op
                 executeQuery·p0.9999: 4244.636 ms/op
                 executeQuery·p1.00:   4244.636 ms/op

Iteration   2: 4240.441 ms/op
                 executeQuery·p0.00:   4240.441 ms/op
                 executeQuery·p0.50:   4240.441 ms/op
                 executeQuery·p0.90:   4240.441 ms/op
                 executeQuery·p0.95:   4240.441 ms/op
                 executeQuery·p0.99:   4240.441 ms/op
                 executeQuery·p0.999:  4240.441 ms/op
                 executeQuery·p0.9999: 4240.441 ms/op
                 executeQuery·p1.00:   4240.441 ms/op

Iteration   3: 4169.138 ms/op
                 executeQuery·p0.00:   4169.138 ms/op
                 executeQuery·p0.50:   4169.138 ms/op
                 executeQuery·p0.90:   4169.138 ms/op
                 executeQuery·p0.95:   4169.138 ms/op
                 executeQuery·p0.99:   4169.138 ms/op
                 executeQuery·p0.999:  4169.138 ms/op
                 executeQuery·p0.9999: 4169.138 ms/op
                 executeQuery·p1.00:   4169.138 ms/op

Iteration   4: 4232.053 ms/op
                 executeQuery·p0.00:   4232.053 ms/op
                 executeQuery·p0.50:   4232.053 ms/op
                 executeQuery·p0.90:   4232.053 ms/op
                 executeQuery·p0.95:   4232.053 ms/op
                 executeQuery·p0.99:   4232.053 ms/op
                 executeQuery·p0.999:  4232.053 ms/op
                 executeQuery·p0.9999: 4232.053 ms/op
                 executeQuery·p1.00:   4232.053 ms/op

Iteration   5: 4185.915 ms/op
                 executeQuery·p0.00:   4185.915 ms/op
                 executeQuery·p0.50:   4185.915 ms/op
                 executeQuery·p0.90:   4185.915 ms/op
                 executeQuery·p0.95:   4185.915 ms/op
                 executeQuery·p0.99:   4185.915 ms/op
                 executeQuery·p0.999:  4185.915 ms/op
                 executeQuery·p0.9999: 4185.915 ms/op
                 executeQuery·p1.00:   4185.915 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 10
  mean =   4199.757 ±(99.9%) 92.958 ms/op

  Histogram, ms/op:
    [4000.000, 4025.000) = 0 
    [4025.000, 4050.000) = 0 
    [4050.000, 4075.000) = 1 
    [4075.000, 4100.000) = 0 
    [4100.000, 4125.000) = 0 
    [4125.000, 4150.000) = 0 
    [4150.000, 4175.000) = 2 
    [4175.000, 4200.000) = 1 
    [4200.000, 4225.000) = 1 
    [4225.000, 4250.000) = 4 
    [4250.000, 4275.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4055.892 ms/op
     p(50.0000) =   4225.761 ms/op
     p(90.0000) =   4252.185 ms/op
     p(95.0000) =   4253.024 ms/op
     p(99.0000) =   4253.024 ms/op
     p(99.9000) =   4253.024 ms/op
     p(99.9900) =   4253.024 ms/op
     p(99.9990) =   4253.024 ms/op
     p(99.9999) =   4253.024 ms/op
    p(100.0000) =   4253.024 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 73.33% complete, ETA 03:16:10
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
252.707 ±(99.9%) 15.986 ms/op
# Warmup Iteration   2: 243.813 ±(99.9%) 2.183 ms/op
# Warmup Iteration   3: 263.986 ±(99.9%) 6.060 ms/op
# Warmup Iteration   4: 267.056 ±(99.9%) 3.029 ms/op
# Warmup Iteration   5: 263.337 ±(99.9%) 10.876 ms/op
Iteration   1: 241.048 ±(99.9%) 3.215 ms/op
                 executeQuery·p0.00:   238.289 ms/op
                 executeQuery·p0.50:   240.124 ms/op
                 executeQuery·p0.90:   241.356 ms/op
                 executeQuery·p0.95:   242.890 ms/op
                 executeQuery·p0.99:   277.873 ms/op
                 executeQuery·p0.999:  277.873 ms/op
                 executeQuery·p0.9999: 277.873 ms/op
                 executeQuery·p1.00:   277.873 ms/op

Iteration   2: 240.168 ±(99.9%) 0.315 ms/op
                 executeQuery·p0.00:   238.813 ms/op
                 executeQuery·p0.50:   240.124 ms/op
                 executeQuery·p0.90:   240.910 ms/op
                 executeQuery·p0.95:   241.133 ms/op
                 executeQuery·p0.99:   241.435 ms/op
                 executeQuery·p0.999:  241.435 ms/op
                 executeQuery·p0.9999: 241.435 ms/op
                 executeQuery·p1.00:   241.435 ms/op

Iteration   3: 242.159 ±(99.9%) 6.705 ms/op
                 executeQuery·p0.00:   239.075 ms/op
                 executeQuery·p0.50:   240.124 ms/op
                 executeQuery·p0.90:   240.910 ms/op
                 executeQuery·p0.95:   246.966 ms/op
                 executeQuery·p0.99:   319.291 ms/op
                 executeQuery·p0.999:  319.291 ms/op
                 executeQuery·p0.9999: 319.291 ms/op
                 executeQuery·p1.00:   319.291 ms/op

Iteration   4: 240.037 ±(99.9%) 0.462 ms/op
                 executeQuery·p0.00:   237.765 ms/op
                 executeQuery·p0.50:   239.862 ms/op
                 executeQuery·p0.90:   240.910 ms/op
                 executeQuery·p0.95:   241.841 ms/op
                 executeQuery·p0.99:   242.745 ms/op
                 executeQuery·p0.999:  242.745 ms/op
                 executeQuery·p0.9999: 242.745 ms/op
                 executeQuery·p1.00:   242.745 ms/op

Iteration   5: 240.704 ±(99.9%) 2.332 ms/op
                 executeQuery·p0.00:   239.075 ms/op
                 executeQuery·p0.50:   240.124 ms/op
                 executeQuery·p0.90:   241.356 ms/op
                 executeQuery·p0.95:   242.142 ms/op
                 executeQuery·p0.99:   267.387 ms/op
                 executeQuery·p0.999:  267.387 ms/op
                 executeQuery·p0.9999: 267.387 ms/op
                 executeQuery·p1.00:   267.387 ms/op


# Run progress: 73.89% complete, ETA 03:11:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
251.914 ±(99.9%) 15.334 ms/op
# Warmup Iteration   2: 249.548 ±(99.9%) 0.675 ms/op
# Warmup Iteration   3: 249.568 ±(99.9%) 0.847 ms/op
# Warmup Iteration   4: 249.928 ±(99.9%) 2.969 ms/op
# Warmup Iteration   5: 249.804 ±(99.9%) 2.916 ms/op
Iteration   1: 249.797 ±(99.9%) 3.741 ms/op
                 executeQuery·p0.00:   245.367 ms/op
                 executeQuery·p0.50:   248.906 ms/op
                 executeQuery·p0.90:   251.370 ms/op
                 executeQuery·p0.95:   251.920 ms/op
                 executeQuery·p0.99:   289.407 ms/op
                 executeQuery·p0.999:  289.407 ms/op
                 executeQuery·p0.9999: 289.407 ms/op
                 executeQuery·p1.00:   289.407 ms/op

Iteration   2: 250.728 ±(99.9%) 7.339 ms/op
                 executeQuery·p0.00:   244.580 ms/op
                 executeQuery·p0.50:   248.775 ms/op
                 executeQuery·p0.90:   251.396 ms/op
                 executeQuery·p0.95:   252.445 ms/op
                 executeQuery·p0.99:   330.301 ms/op
                 executeQuery·p0.999:  330.301 ms/op
                 executeQuery·p0.9999: 330.301 ms/op
                 executeQuery·p1.00:   330.301 ms/op

Iteration   3: 249.115 ±(99.9%) 1.291 ms/op
                 executeQuery·p0.00:   244.580 ms/op
                 executeQuery·p0.50:   249.037 ms/op
                 executeQuery·p0.90:   251.658 ms/op
                 executeQuery·p0.95:   253.703 ms/op
                 executeQuery·p0.99:   255.590 ms/op
                 executeQuery·p0.999:  255.590 ms/op
                 executeQuery·p0.9999: 255.590 ms/op
                 executeQuery·p1.00:   255.590 ms/op

Iteration   4: 249.876 ±(99.9%) 3.217 ms/op
                 executeQuery·p0.00:   245.629 ms/op
                 executeQuery·p0.50:   249.037 ms/op
                 executeQuery·p0.90:   251.396 ms/op
                 executeQuery·p0.95:   252.405 ms/op
                 executeQuery·p0.99:   283.640 ms/op
                 executeQuery·p0.999:  283.640 ms/op
                 executeQuery·p0.9999: 283.640 ms/op
                 executeQuery·p1.00:   283.640 ms/op

Iteration   5: 249.666 ±(99.9%) 0.954 ms/op
                 executeQuery·p0.00:   247.464 ms/op
                 executeQuery·p0.50:   249.168 ms/op
                 executeQuery·p0.90:   251.894 ms/op
                 executeQuery·p0.95:   253.913 ms/op
                 executeQuery·p0.99:   254.542 ms/op
                 executeQuery·p0.999:  254.542 ms/op
                 executeQuery·p0.9999: 254.542 ms/op
                 executeQuery·p1.00:   254.542 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 410
  mean =    245.220 ±(99.9%) 1.326 ms/op

  Histogram, ms/op:
    [230.000, 240.000) = 89 
    [240.000, 250.000) = 257 
    [250.000, 260.000) = 58 
    [260.000, 270.000) = 1 
    [270.000, 280.000) = 1 
    [280.000, 290.000) = 2 
    [290.000, 300.000) = 0 
    [300.000, 310.000) = 0 
    [310.000, 320.000) = 1 
    [320.000, 330.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    237.765 ms/op
     p(50.0000) =    242.876 ms/op
     p(90.0000) =    250.872 ms/op
     p(95.0000) =    251.658 ms/op
     p(99.0000) =    283.005 ms/op
     p(99.9000) =    330.301 ms/op
     p(99.9900) =    330.301 ms/op
     p(99.9990) =    330.301 ms/op
     p(99.9999) =    330.301 ms/op
    p(100.0000) =    330.301 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 74.44% complete, ETA 03:06:21
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2390.753 ±(99.9%) 635.549 ms/op
# Warmup Iteration   2: 2295.123 ±(99.9%) 424.768 ms/op
# Warmup Iteration   3: 2472.962 ±(99.9%) 51.834 ms/op
# Warmup Iteration   4: 2474.639 ±(99.9%) 16.151 ms/op
# Warmup Iteration   5: 2462.056 ±(99.9%) 41.177 ms/op
Iteration   1: 2498.757 ±(99.9%) 529.907 ms/op
                 executeQuery·p0.00:   2449.474 ms/op
                 executeQuery·p0.50:   2462.056 ms/op
                 executeQuery·p0.90:   2621.440 ms/op
                 executeQuery·p0.95:   2621.440 ms/op
                 executeQuery·p0.99:   2621.440 ms/op
                 executeQuery·p0.999:  2621.440 ms/op
                 executeQuery·p0.9999: 2621.440 ms/op
                 executeQuery·p1.00:   2621.440 ms/op

Iteration   2: 2440.246 ±(99.9%) 28.891 ms/op
                 executeQuery·p0.00:   2432.696 ms/op
                 executeQuery·p0.50:   2441.085 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op

Iteration   3: 2435.213 ±(99.9%) 46.530 ms/op
                 executeQuery·p0.00:   2415.919 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   4: 2459.540 ±(99.9%) 157.667 ms/op
                 executeQuery·p0.00:   2428.502 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2524.971 ms/op
                 executeQuery·p0.95:   2524.971 ms/op
                 executeQuery·p0.99:   2524.971 ms/op
                 executeQuery·p0.999:  2524.971 ms/op
                 executeQuery·p0.9999: 2524.971 ms/op
                 executeQuery·p1.00:   2524.971 ms/op

Iteration   5: 2438.568 ±(99.9%) 27.025 ms/op
                 executeQuery·p0.00:   2432.696 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op


# Run progress: 75.00% complete, ETA 03:01:37
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2392.431 ±(99.9%) 691.906 ms/op
# Warmup Iteration   2: 2310.223 ±(99.9%) 381.069 ms/op
# Warmup Iteration   3: 2483.867 ±(99.9%) 26.538 ms/op
# Warmup Iteration   4: 2477.995 ±(99.9%) 59.780 ms/op
# Warmup Iteration   5: 2452.829 ±(99.9%) 61.923 ms/op
Iteration   1: 2452.829 ±(99.9%) 63.995 ms/op
                 executeQuery·p0.00:   2428.502 ms/op
                 executeQuery·p0.50:   2453.668 ms/op
                 executeQuery·p0.90:   2474.639 ms/op
                 executeQuery·p0.95:   2474.639 ms/op
                 executeQuery·p0.99:   2474.639 ms/op
                 executeQuery·p0.999:  2474.639 ms/op
                 executeQuery·p0.9999: 2474.639 ms/op
                 executeQuery·p1.00:   2474.639 ms/op

Iteration   2: 2562.720 ±(99.9%) 1084.389 ms/op
                 executeQuery·p0.00:   2420.113 ms/op
                 executeQuery·p0.50:   2436.891 ms/op
                 executeQuery·p0.90:   3066.036 ms/op
                 executeQuery·p0.95:   3066.036 ms/op
                 executeQuery·p0.99:   3066.036 ms/op
                 executeQuery·p0.999:  3066.036 ms/op
                 executeQuery·p0.9999: 3066.036 ms/op
                 executeQuery·p1.00:   3066.036 ms/op

Iteration   3: 2469.606 ±(99.9%) 199.578 ms/op
                 executeQuery·p0.00:   2411.725 ms/op
                 executeQuery·p0.50:   2457.862 ms/op
                 executeQuery·p0.90:   2550.137 ms/op
                 executeQuery·p0.95:   2550.137 ms/op
                 executeQuery·p0.99:   2550.137 ms/op
                 executeQuery·p0.999:  2550.137 ms/op
                 executeQuery·p0.9999: 2550.137 ms/op
                 executeQuery·p1.00:   2550.137 ms/op

Iteration   4: 2464.573 ±(99.9%) 108.102 ms/op
                 executeQuery·p0.00:   2420.113 ms/op
                 executeQuery·p0.50:   2466.251 ms/op
                 executeQuery·p0.90:   2495.611 ms/op
                 executeQuery·p0.95:   2495.611 ms/op
                 executeQuery·p0.99:   2495.611 ms/op
                 executeQuery·p0.999:  2495.611 ms/op
                 executeQuery·p0.9999: 2495.611 ms/op
                 executeQuery·p1.00:   2495.611 ms/op

Iteration   5: 2466.251 ±(99.9%) 189.385 ms/op
                 executeQuery·p0.00:   2407.530 ms/op
                 executeQuery·p0.50:   2453.668 ms/op
                 executeQuery·p0.90:   2524.971 ms/op
                 executeQuery·p0.95:   2524.971 ms/op
                 executeQuery·p0.99:   2524.971 ms/op
                 executeQuery·p0.999:  2524.971 ms/op
                 executeQuery·p0.9999: 2524.971 ms/op
                 executeQuery·p1.00:   2524.971 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 49
  mean =   2468.220 ±(99.9%) 47.590 ms/op

  Histogram, ms/op:
    [2400.000, 2450.000) = 29 
    [2450.000, 2500.000) = 14 
    [2500.000, 2550.000) = 3 
    [2550.000, 2600.000) = 1 
    [2600.000, 2650.000) = 1 
    [2650.000, 2700.000) = 0 
    [2700.000, 2750.000) = 0 
    [2750.000, 2800.000) = 0 
    [2800.000, 2850.000) = 0 
    [2850.000, 2900.000) = 0 
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 0 
    [3000.000, 3050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2407.530 ms/op
     p(50.0000) =   2445.279 ms/op
     p(90.0000) =   2524.971 ms/op
     p(95.0000) =   2585.788 ms/op
     p(99.0000) =   3066.036 ms/op
     p(99.9000) =   3066.036 ms/op
     p(99.9900) =   3066.036 ms/op
     p(99.9990) =   3066.036 ms/op
     p(99.9999) =   3066.036 ms/op
    p(100.0000) =   3066.036 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 75.56% complete, ETA 02:56:57
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
113413.980 ms/op
# Warmup Iteration   2: 112742.892 ms/op
# Warmup Iteration   3: 113279.762 ms/op
# Warmup Iteration   4: 113548.198 ms/op
# Warmup Iteration   5: 112742.892 ms/op
Iteration   1: 112877.109 ms/op
                 executeQuery·p0.00:   112877.109 ms/op
                 executeQuery·p0.50:   112877.109 ms/op
                 executeQuery·p0.90:   112877.109 ms/op
                 executeQuery·p0.95:   112877.109 ms/op
                 executeQuery·p0.99:   112877.109 ms/op
                 executeQuery·p0.999:  112877.109 ms/op
                 executeQuery·p0.9999: 112877.109 ms/op
                 executeQuery·p1.00:   112877.109 ms/op

Iteration   2: 113011.327 ms/op
                 executeQuery·p0.00:   113011.327 ms/op
                 executeQuery·p0.50:   113011.327 ms/op
                 executeQuery·p0.90:   113011.327 ms/op
                 executeQuery·p0.95:   113011.327 ms/op
                 executeQuery·p0.99:   113011.327 ms/op
                 executeQuery·p0.999:  113011.327 ms/op
                 executeQuery·p0.9999: 113011.327 ms/op
                 executeQuery·p1.00:   113011.327 ms/op

Iteration   3: 113548.198 ms/op
                 executeQuery·p0.00:   113548.198 ms/op
                 executeQuery·p0.50:   113548.198 ms/op
                 executeQuery·p0.90:   113548.198 ms/op
                 executeQuery·p0.95:   113548.198 ms/op
                 executeQuery·p0.99:   113548.198 ms/op
                 executeQuery·p0.999:  113548.198 ms/op
                 executeQuery·p0.9999: 113548.198 ms/op
                 executeQuery·p1.00:   113548.198 ms/op

Iteration   4: 112474.456 ms/op
                 executeQuery·p0.00:   112474.456 ms/op
                 executeQuery·p0.50:   112474.456 ms/op
                 executeQuery·p0.90:   112474.456 ms/op
                 executeQuery·p0.95:   112474.456 ms/op
                 executeQuery·p0.99:   112474.456 ms/op
                 executeQuery·p0.999:  112474.456 ms/op
                 executeQuery·p0.9999: 112474.456 ms/op
                 executeQuery·p1.00:   112474.456 ms/op

Iteration   5: 112608.674 ms/op
                 executeQuery·p0.00:   112608.674 ms/op
                 executeQuery·p0.50:   112608.674 ms/op
                 executeQuery·p0.90:   112608.674 ms/op
                 executeQuery·p0.95:   112608.674 ms/op
                 executeQuery·p0.99:   112608.674 ms/op
                 executeQuery·p0.999:  112608.674 ms/op
                 executeQuery·p0.9999: 112608.674 ms/op
                 executeQuery·p1.00:   112608.674 ms/op


# Run progress: 76.11% complete, ETA 02:57:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
113145.545 ms/op
# Warmup Iteration   2: 113682.416 ms/op
# Warmup Iteration   3: 113011.327 ms/op
# Warmup Iteration   4: 113279.762 ms/op
# Warmup Iteration   5: 112474.456 ms/op
Iteration   1: 112608.674 ms/op
                 executeQuery·p0.00:   112608.674 ms/op
                 executeQuery·p0.50:   112608.674 ms/op
                 executeQuery·p0.90:   112608.674 ms/op
                 executeQuery·p0.95:   112608.674 ms/op
                 executeQuery·p0.99:   112608.674 ms/op
                 executeQuery·p0.999:  112608.674 ms/op
                 executeQuery·p0.9999: 112608.674 ms/op
                 executeQuery·p1.00:   112608.674 ms/op

Iteration   2: 113413.980 ms/op
                 executeQuery·p0.00:   113413.980 ms/op
                 executeQuery·p0.50:   113413.980 ms/op
                 executeQuery·p0.90:   113413.980 ms/op
                 executeQuery·p0.95:   113413.980 ms/op
                 executeQuery·p0.99:   113413.980 ms/op
                 executeQuery·p0.999:  113413.980 ms/op
                 executeQuery·p0.9999: 113413.980 ms/op
                 executeQuery·p1.00:   113413.980 ms/op

Iteration   3: 112206.021 ms/op
                 executeQuery·p0.00:   112206.021 ms/op
                 executeQuery·p0.50:   112206.021 ms/op
                 executeQuery·p0.90:   112206.021 ms/op
                 executeQuery·p0.95:   112206.021 ms/op
                 executeQuery·p0.99:   112206.021 ms/op
                 executeQuery·p0.999:  112206.021 ms/op
                 executeQuery·p0.9999: 112206.021 ms/op
                 executeQuery·p1.00:   112206.021 ms/op

Iteration   4: 113816.633 ms/op
                 executeQuery·p0.00:   113816.633 ms/op
                 executeQuery·p0.50:   113816.633 ms/op
                 executeQuery·p0.90:   113816.633 ms/op
                 executeQuery·p0.95:   113816.633 ms/op
                 executeQuery·p0.99:   113816.633 ms/op
                 executeQuery·p0.999:  113816.633 ms/op
                 executeQuery·p0.9999: 113816.633 ms/op
                 executeQuery·p1.00:   113816.633 ms/op

Iteration   5: 113145.545 ms/op
                 executeQuery·p0.00:   113145.545 ms/op
                 executeQuery·p0.50:   113145.545 ms/op
                 executeQuery·p0.90:   113145.545 ms/op
                 executeQuery·p0.95:   113145.545 ms/op
                 executeQuery·p0.99:   113145.545 ms/op
                 executeQuery·p0.999:  113145.545 ms/op
                 executeQuery·p0.9999: 113145.545 ms/op
                 executeQuery·p1.00:   113145.545 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean = 112971.062 ±(99.9%) 777.411 ms/op

  Histogram, ms/op:
    [112000.000, 112125.000) = 0 
    [112125.000, 112250.000) = 1 
    [112250.000, 112375.000) = 0 
    [112375.000, 112500.000) = 1 
    [112500.000, 112625.000) = 2 
    [112625.000, 112750.000) = 0 
    [112750.000, 112875.000) = 0 
    [112875.000, 113000.000) = 1 
    [113000.000, 113125.000) = 1 
    [113125.000, 113250.000) = 1 
    [113250.000, 113375.000) = 0 
    [113375.000, 113500.000) = 1 
    [113500.000, 113625.000) = 1 
    [113625.000, 113750.000) = 0 
    [113750.000, 113875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) = 112206.021 ms/op
     p(50.0000) = 112944.218 ms/op
     p(90.0000) = 113789.790 ms/op
     p(95.0000) = 113816.633 ms/op
     p(99.0000) = 113816.633 ms/op
     p(99.9000) = 113816.633 ms/op
     p(99.9900) = 113816.633 ms/op
     p(99.9990) = 113816.633 ms/op
     p(99.9999) = 113816.633 ms/op
    p(100.0000) = 113816.633 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 76.67% complete, ETA 02:57:56
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
410.329 ±(99.9%) 151.628 ms/op
# Warmup Iteration   2: 360.804 ±(99.9%) 5.186 ms/op
# Warmup Iteration   3: 357.396 ±(99.9%) 5.391 ms/op
# Warmup Iteration   4: 359.886 ±(99.9%) 11.852 ms/op
# Warmup Iteration   5: 353.280 ±(99.9%) 4.445 ms/op
Iteration   1: 350.514 ±(99.9%) 1.925 ms/op
                 executeQuery·p0.00:   347.603 ms/op
                 executeQuery·p0.50:   349.700 ms/op
                 executeQuery·p0.90:   354.943 ms/op
                 executeQuery·p0.95:   358.875 ms/op
                 executeQuery·p0.99:   361.234 ms/op
                 executeQuery·p0.999:  361.234 ms/op
                 executeQuery·p0.9999: 361.234 ms/op
                 executeQuery·p1.00:   361.234 ms/op

Iteration   2: 361.253 ±(99.9%) 18.990 ms/op
                 executeQuery·p0.00:   348.127 ms/op
                 executeQuery·p0.50:   350.749 ms/op
                 executeQuery·p0.90:   383.097 ms/op
                 executeQuery·p0.95:   442.342 ms/op
                 executeQuery·p0.99:   488.112 ms/op
                 executeQuery·p0.999:  488.112 ms/op
                 executeQuery·p0.9999: 488.112 ms/op
                 executeQuery·p1.00:   488.112 ms/op

Iteration   3: 363.369 ±(99.9%) 8.424 ms/op
                 executeQuery·p0.00:   351.273 ms/op
                 executeQuery·p0.50:   365.167 ms/op
                 executeQuery·p0.90:   381.682 ms/op
                 executeQuery·p0.95:   394.291 ms/op
                 executeQuery·p0.99:   396.886 ms/op
                 executeQuery·p0.999:  396.886 ms/op
                 executeQuery·p0.9999: 396.886 ms/op
                 executeQuery·p1.00:   396.886 ms/op

Iteration   4: 367.545 ±(99.9%) 2.132 ms/op
                 executeQuery·p0.00:   363.856 ms/op
                 executeQuery·p0.50:   367.002 ms/op
                 executeQuery·p0.90:   371.825 ms/op
                 executeQuery·p0.95:   375.600 ms/op
                 executeQuery·p0.99:   376.439 ms/op
                 executeQuery·p0.999:  376.439 ms/op
                 executeQuery·p0.9999: 376.439 ms/op
                 executeQuery·p1.00:   376.439 ms/op

Iteration   5: 368.982 ±(99.9%) 7.039 ms/op
                 executeQuery·p0.00:   350.224 ms/op
                 executeQuery·p0.50:   365.953 ms/op
                 executeQuery·p0.90:   384.932 ms/op
                 executeQuery·p0.95:   397.305 ms/op
                 executeQuery·p0.99:   405.275 ms/op
                 executeQuery·p0.999:  405.275 ms/op
                 executeQuery·p0.9999: 405.275 ms/op
                 executeQuery·p1.00:   405.275 ms/op


# Run progress: 77.22% complete, ETA 02:52:58
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
371.856 ±(99.9%) 11.281 ms/op
# Warmup Iteration   2: 370.885 ±(99.9%) 9.997 ms/op
# Warmup Iteration   3: 369.021 ±(99.9%) 9.416 ms/op
# Warmup Iteration   4: 362.807 ±(99.9%) 4.729 ms/op
# Warmup Iteration   5: 362.732 ±(99.9%) 4.896 ms/op
Iteration   1: 354.148 ±(99.9%) 5.263 ms/op
                 executeQuery·p0.00:   349.700 ms/op
                 executeQuery·p0.50:   351.797 ms/op
                 executeQuery·p0.90:   361.234 ms/op
                 executeQuery·p0.95:   376.701 ms/op
                 executeQuery·p0.99:   389.546 ms/op
                 executeQuery·p0.999:  389.546 ms/op
                 executeQuery·p0.9999: 389.546 ms/op
                 executeQuery·p1.00:   389.546 ms/op

Iteration   2: 356.123 ±(99.9%) 8.623 ms/op
                 executeQuery·p0.00:   349.700 ms/op
                 executeQuery·p0.50:   351.273 ms/op
                 executeQuery·p0.90:   367.578 ms/op
                 executeQuery·p0.95:   392.849 ms/op
                 executeQuery·p0.99:   413.139 ms/op
                 executeQuery·p0.999:  413.139 ms/op
                 executeQuery·p0.9999: 413.139 ms/op
                 executeQuery·p1.00:   413.139 ms/op

Iteration   3: 354.383 ±(99.9%) 5.566 ms/op
                 executeQuery·p0.00:   348.652 ms/op
                 executeQuery·p0.50:   351.273 ms/op
                 executeQuery·p0.90:   366.477 ms/op
                 executeQuery·p0.95:   376.177 ms/op
                 executeQuery·p0.99:   384.303 ms/op
                 executeQuery·p0.999:  384.303 ms/op
                 executeQuery·p0.9999: 384.303 ms/op
                 executeQuery·p1.00:   384.303 ms/op

Iteration   4: 364.549 ±(99.9%) 44.208 ms/op
                 executeQuery·p0.00:   348.652 ms/op
                 executeQuery·p0.50:   351.011 ms/op
                 executeQuery·p0.90:   362.126 ms/op
                 executeQuery·p0.95:   552.233 ms/op
                 executeQuery·p0.99:   685.769 ms/op
                 executeQuery·p0.999:  685.769 ms/op
                 executeQuery·p0.9999: 685.769 ms/op
                 executeQuery·p1.00:   685.769 ms/op

Iteration   5: 357.227 ±(99.9%) 11.633 ms/op
                 executeQuery·p0.00:   348.127 ms/op
                 executeQuery·p0.50:   350.224 ms/op
                 executeQuery·p0.90:   374.604 ms/op
                 executeQuery·p0.95:   410.937 ms/op
                 executeQuery·p0.99:   419.430 ms/op
                 executeQuery·p0.999:  419.430 ms/op
                 executeQuery·p0.9999: 419.430 ms/op
                 executeQuery·p1.00:   419.430 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 281
  mean =    359.676 ±(99.9%) 4.749 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 59 
    [350.000, 375.000) = 204 
    [375.000, 400.000) = 12 
    [400.000, 425.000) = 4 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    347.603 ms/op
     p(50.0000) =    352.322 ms/op
     p(90.0000) =    370.672 ms/op
     p(95.0000) =    384.146 ms/op
     p(99.0000) =    431.793 ms/op
     p(99.9000) =    685.769 ms/op
     p(99.9900) =    685.769 ms/op
     p(99.9990) =    685.769 ms/op
     p(99.9999) =    685.769 ms/op
    p(100.0000) =    685.769 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 77.78% complete, ETA 02:48:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4504.682 ±(99.9%) 28636.067 ms/op
# Warmup Iteration   2: 3465.893 ±(99.9%) 723.236 ms/op
# Warmup Iteration   3: 3467.291 ±(99.9%) 912.907 ms/op
# Warmup Iteration   4: 3454.708 ±(99.9%) 435.110 ms/op
# Warmup Iteration   5: 3433.737 ±(99.9%) 392.669 ms/op
Iteration   1: 3435.135 ±(99.9%) 202.452 ms/op
                 executeQuery·p0.00:   3426.746 ms/op
                 executeQuery·p0.50:   3430.941 ms/op
                 executeQuery·p0.90:   3447.718 ms/op
                 executeQuery·p0.95:   3447.718 ms/op
                 executeQuery·p0.99:   3447.718 ms/op
                 executeQuery·p0.999:  3447.718 ms/op
                 executeQuery·p0.9999: 3447.718 ms/op
                 executeQuery·p1.00:   3447.718 ms/op

Iteration   2: 3442.125 ±(99.9%) 361.618 ms/op
                 executeQuery·p0.00:   3426.746 ms/op
                 executeQuery·p0.50:   3435.135 ms/op
                 executeQuery·p0.90:   3464.495 ms/op
                 executeQuery·p0.95:   3464.495 ms/op
                 executeQuery·p0.99:   3464.495 ms/op
                 executeQuery·p0.999:  3464.495 ms/op
                 executeQuery·p0.9999: 3464.495 ms/op
                 executeQuery·p1.00:   3464.495 ms/op

Iteration   3: 3498.050 ±(99.9%) 882.468 ms/op
                 executeQuery·p0.00:   3447.718 ms/op
                 executeQuery·p0.50:   3502.244 ms/op
                 executeQuery·p0.90:   3544.187 ms/op
                 executeQuery·p0.95:   3544.187 ms/op
                 executeQuery·p0.99:   3544.187 ms/op
                 executeQuery·p0.999:  3544.187 ms/op
                 executeQuery·p0.9999: 3544.187 ms/op
                 executeQuery·p1.00:   3544.187 ms/op

Iteration   4: 3446.320 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3443.524 ms/op
                 executeQuery·p0.50:   3447.718 ms/op
                 executeQuery·p0.90:   3447.718 ms/op
                 executeQuery·p0.95:   3447.718 ms/op
                 executeQuery·p0.99:   3447.718 ms/op
                 executeQuery·p0.999:  3447.718 ms/op
                 executeQuery·p0.9999: 3447.718 ms/op
                 executeQuery·p1.00:   3447.718 ms/op

Iteration   5: 3443.524 ±(99.9%) 333.542 ms/op
                 executeQuery·p0.00:   3430.941 ms/op
                 executeQuery·p0.50:   3435.135 ms/op
                 executeQuery·p0.90:   3464.495 ms/op
                 executeQuery·p0.95:   3464.495 ms/op
                 executeQuery·p0.99:   3464.495 ms/op
                 executeQuery·p0.999:  3464.495 ms/op
                 executeQuery·p0.9999: 3464.495 ms/op
                 executeQuery·p1.00:   3464.495 ms/op


# Run progress: 78.33% complete, ETA 02:43:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3605.703 ±(99.9%) 4075.229 ms/op
# Warmup Iteration   2: 3439.329 ±(99.9%) 350.657 ms/op
# Warmup Iteration   3: 3401.581 ±(99.9%) 0.001 ms/op
# Warmup Iteration   4: 3479.874 ±(99.9%) 377.463 ms/op
# Warmup Iteration   5: 3467.291 ±(99.9%) 1745.477 ms/op
Iteration   1: 3437.931 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   3430.941 ms/op
                 executeQuery·p0.50:   3439.329 ms/op
                 executeQuery·p0.90:   3443.524 ms/op
                 executeQuery·p0.95:   3443.524 ms/op
                 executeQuery·p0.99:   3443.524 ms/op
                 executeQuery·p0.999:  3443.524 ms/op
                 executeQuery·p0.9999: 3443.524 ms/op
                 executeQuery·p1.00:   3443.524 ms/op

Iteration   2: 3436.533 ±(99.9%) 385.141 ms/op
                 executeQuery·p0.00:   3414.163 ms/op
                 executeQuery·p0.50:   3439.329 ms/op
                 executeQuery·p0.90:   3456.106 ms/op
                 executeQuery·p0.95:   3456.106 ms/op
                 executeQuery·p0.99:   3456.106 ms/op
                 executeQuery·p0.999:  3456.106 ms/op
                 executeQuery·p0.9999: 3456.106 ms/op
                 executeQuery·p1.00:   3456.106 ms/op

Iteration   3: 3423.950 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   3414.163 ms/op
                 executeQuery·p0.50:   3414.163 ms/op
                 executeQuery·p0.90:   3443.524 ms/op
                 executeQuery·p0.95:   3443.524 ms/op
                 executeQuery·p0.99:   3443.524 ms/op
                 executeQuery·p0.999:  3443.524 ms/op
                 executeQuery·p0.9999: 3443.524 ms/op
                 executeQuery·p1.00:   3443.524 ms/op

Iteration   4: 3481.272 ±(99.9%) 927.752 ms/op
                 executeQuery·p0.00:   3422.552 ms/op
                 executeQuery·p0.50:   3510.632 ms/op
                 executeQuery·p0.90:   3510.632 ms/op
                 executeQuery·p0.95:   3510.632 ms/op
                 executeQuery·p0.99:   3510.632 ms/op
                 executeQuery·p0.999:  3510.632 ms/op
                 executeQuery·p0.9999: 3510.632 ms/op
                 executeQuery·p1.00:   3510.632 ms/op

Iteration   5: 3538.594 ±(99.9%) 3737.997 ms/op
                 executeQuery·p0.00:   3409.969 ms/op
                 executeQuery·p0.50:   3430.941 ms/op
                 executeQuery·p0.90:   3774.874 ms/op
                 executeQuery·p0.95:   3774.874 ms/op
                 executeQuery·p0.99:   3774.874 ms/op
                 executeQuery·p0.999:  3774.874 ms/op
                 executeQuery·p0.9999: 3774.874 ms/op
                 executeQuery·p1.00:   3774.874 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 30
  mean =   3458.343 ±(99.9%) 45.148 ms/op

  Histogram, ms/op:
    [3400.000, 3425.000) = 5 
    [3425.000, 3450.000) = 17 
    [3450.000, 3475.000) = 3 
    [3475.000, 3500.000) = 0 
    [3500.000, 3525.000) = 3 
    [3525.000, 3550.000) = 1 
    [3550.000, 3575.000) = 0 
    [3575.000, 3600.000) = 0 
    [3600.000, 3625.000) = 0 
    [3625.000, 3650.000) = 0 
    [3650.000, 3675.000) = 0 
    [3675.000, 3700.000) = 0 
    [3700.000, 3725.000) = 0 
    [3725.000, 3750.000) = 0 
    [3750.000, 3775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3409.969 ms/op
     p(50.0000) =   3441.426 ms/op
     p(90.0000) =   3510.632 ms/op
     p(95.0000) =   3647.996 ms/op
     p(99.0000) =   3774.874 ms/op
     p(99.9000) =   3774.874 ms/op
     p(99.9900) =   3774.874 ms/op
     p(99.9990) =   3774.874 ms/op
     p(99.9999) =   3774.874 ms/op
    p(100.0000) =   3774.874 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 78.89% complete, ETA 02:38:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
113950.851 ms/op
# Warmup Iteration   2: 112474.456 ms/op
# Warmup Iteration   3: 112474.456 ms/op
# Warmup Iteration   4: 112071.803 ms/op
# Warmup Iteration   5: 112206.021 ms/op
Iteration   1: 112206.021 ms/op
                 executeQuery·p0.00:   112206.021 ms/op
                 executeQuery·p0.50:   112206.021 ms/op
                 executeQuery·p0.90:   112206.021 ms/op
                 executeQuery·p0.95:   112206.021 ms/op
                 executeQuery·p0.99:   112206.021 ms/op
                 executeQuery·p0.999:  112206.021 ms/op
                 executeQuery·p0.9999: 112206.021 ms/op
                 executeQuery·p1.00:   112206.021 ms/op

Iteration   2: 112340.238 ms/op
                 executeQuery·p0.00:   112340.238 ms/op
                 executeQuery·p0.50:   112340.238 ms/op
                 executeQuery·p0.90:   112340.238 ms/op
                 executeQuery·p0.95:   112340.238 ms/op
                 executeQuery·p0.99:   112340.238 ms/op
                 executeQuery·p0.999:  112340.238 ms/op
                 executeQuery·p0.9999: 112340.238 ms/op
                 executeQuery·p1.00:   112340.238 ms/op

Iteration   3: 112877.109 ms/op
                 executeQuery·p0.00:   112877.109 ms/op
                 executeQuery·p0.50:   112877.109 ms/op
                 executeQuery·p0.90:   112877.109 ms/op
                 executeQuery·p0.95:   112877.109 ms/op
                 executeQuery·p0.99:   112877.109 ms/op
                 executeQuery·p0.999:  112877.109 ms/op
                 executeQuery·p0.9999: 112877.109 ms/op
                 executeQuery·p1.00:   112877.109 ms/op

Iteration   4: 112206.021 ms/op
                 executeQuery·p0.00:   112206.021 ms/op
                 executeQuery·p0.50:   112206.021 ms/op
                 executeQuery·p0.90:   112206.021 ms/op
                 executeQuery·p0.95:   112206.021 ms/op
                 executeQuery·p0.99:   112206.021 ms/op
                 executeQuery·p0.999:  112206.021 ms/op
                 executeQuery·p0.9999: 112206.021 ms/op
                 executeQuery·p1.00:   112206.021 ms/op

Iteration   5: 112340.238 ms/op
                 executeQuery·p0.00:   112340.238 ms/op
                 executeQuery·p0.50:   112340.238 ms/op
                 executeQuery·p0.90:   112340.238 ms/op
                 executeQuery·p0.95:   112340.238 ms/op
                 executeQuery·p0.99:   112340.238 ms/op
                 executeQuery·p0.999:  112340.238 ms/op
                 executeQuery·p0.9999: 112340.238 ms/op
                 executeQuery·p1.00:   112340.238 ms/op


# Run progress: 79.44% complete, ETA 02:38:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
113011.327 ms/op
# Warmup Iteration   2: 111937.585 ms/op
# Warmup Iteration   3: 112071.803 ms/op
# Warmup Iteration   4: 112206.021 ms/op
# Warmup Iteration   5: 112742.892 ms/op
Iteration   1: 112206.021 ms/op
                 executeQuery·p0.00:   112206.021 ms/op
                 executeQuery·p0.50:   112206.021 ms/op
                 executeQuery·p0.90:   112206.021 ms/op
                 executeQuery·p0.95:   112206.021 ms/op
                 executeQuery·p0.99:   112206.021 ms/op
                 executeQuery·p0.999:  112206.021 ms/op
                 executeQuery·p0.9999: 112206.021 ms/op
                 executeQuery·p1.00:   112206.021 ms/op

Iteration   2: 113145.545 ms/op
                 executeQuery·p0.00:   113145.545 ms/op
                 executeQuery·p0.50:   113145.545 ms/op
                 executeQuery·p0.90:   113145.545 ms/op
                 executeQuery·p0.95:   113145.545 ms/op
                 executeQuery·p0.99:   113145.545 ms/op
                 executeQuery·p0.999:  113145.545 ms/op
                 executeQuery·p0.9999: 113145.545 ms/op
                 executeQuery·p1.00:   113145.545 ms/op

Iteration   3: 112608.674 ms/op
                 executeQuery·p0.00:   112608.674 ms/op
                 executeQuery·p0.50:   112608.674 ms/op
                 executeQuery·p0.90:   112608.674 ms/op
                 executeQuery·p0.95:   112608.674 ms/op
                 executeQuery·p0.99:   112608.674 ms/op
                 executeQuery·p0.999:  112608.674 ms/op
                 executeQuery·p0.9999: 112608.674 ms/op
                 executeQuery·p1.00:   112608.674 ms/op

Iteration   4: 113011.327 ms/op
                 executeQuery·p0.00:   113011.327 ms/op
                 executeQuery·p0.50:   113011.327 ms/op
                 executeQuery·p0.90:   113011.327 ms/op
                 executeQuery·p0.95:   113011.327 ms/op
                 executeQuery·p0.99:   113011.327 ms/op
                 executeQuery·p0.999:  113011.327 ms/op
                 executeQuery·p0.9999: 113011.327 ms/op
                 executeQuery·p1.00:   113011.327 ms/op

Iteration   5: 112877.109 ms/op
                 executeQuery·p0.00:   112877.109 ms/op
                 executeQuery·p0.50:   112877.109 ms/op
                 executeQuery·p0.90:   112877.109 ms/op
                 executeQuery·p0.95:   112877.109 ms/op
                 executeQuery·p0.99:   112877.109 ms/op
                 executeQuery·p0.999:  112877.109 ms/op
                 executeQuery·p0.9999: 112877.109 ms/op
                 executeQuery·p1.00:   112877.109 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 10
  mean = 112581.830 ±(99.9%) 556.125 ms/op

  Histogram, ms/op:
    [112200.000, 112300.000) = 3 
    [112300.000, 112400.000) = 2 
    [112400.000, 112500.000) = 0 
    [112500.000, 112600.000) = 0 
    [112600.000, 112700.000) = 1 
    [112700.000, 112800.000) = 0 
    [112800.000, 112900.000) = 2 
    [112900.000, 113000.000) = 0 
    [113000.000, 113100.000) = 1 

  Percentiles, ms/op:
      p(0.0000) = 112206.021 ms/op
     p(50.0000) = 112474.456 ms/op
     p(90.0000) = 113132.123 ms/op
     p(95.0000) = 113145.545 ms/op
     p(99.0000) = 113145.545 ms/op
     p(99.9000) = 113145.545 ms/op
     p(99.9900) = 113145.545 ms/op
     p(99.9990) = 113145.545 ms/op
     p(99.9999) = 113145.545 ms/op
    p(100.0000) = 113145.545 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 80.00% complete, ETA 02:37:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
529.393 ±(99.9%) 165.967 ms/op
# Warmup Iteration   2: 571.008 ±(99.9%) 7.108 ms/op
# Warmup Iteration   3: 507.773 ±(99.9%) 49.041 ms/op
# Warmup Iteration   4: 452.324 ±(99.9%) 6.947 ms/op
# Warmup Iteration   5: 448.973 ±(99.9%) 4.096 ms/op
Iteration   1: 448.335 ±(99.9%) 1.421 ms/op
                 executeQuery·p0.00:   446.169 ms/op
                 executeQuery·p0.50:   447.742 ms/op
                 executeQuery·p0.90:   450.049 ms/op
                 executeQuery·p0.95:   454.663 ms/op
                 executeQuery·p0.99:   455.606 ms/op
                 executeQuery·p0.999:  455.606 ms/op
                 executeQuery·p0.9999: 455.606 ms/op
                 executeQuery·p1.00:   455.606 ms/op

Iteration   2: 453.509 ±(99.9%) 7.153 ms/op
                 executeQuery·p0.00:   445.645 ms/op
                 executeQuery·p0.50:   448.266 ms/op
                 executeQuery·p0.90:   465.043 ms/op
                 executeQuery·p0.95:   468.163 ms/op
                 executeQuery·p0.99:   468.713 ms/op
                 executeQuery·p0.999:  468.713 ms/op
                 executeQuery·p0.9999: 468.713 ms/op
                 executeQuery·p1.00:   468.713 ms/op

Iteration   3: 458.013 ±(99.9%) 6.987 ms/op
                 executeQuery·p0.00:   445.645 ms/op
                 executeQuery·p0.50:   462.946 ms/op
                 executeQuery·p0.90:   465.410 ms/op
                 executeQuery·p0.95:   465.568 ms/op
                 executeQuery·p0.99:   465.568 ms/op
                 executeQuery·p0.999:  465.568 ms/op
                 executeQuery·p0.9999: 465.568 ms/op
                 executeQuery·p1.00:   465.568 ms/op

Iteration   4: 461.397 ±(99.9%) 7.396 ms/op
                 executeQuery·p0.00:   445.645 ms/op
                 executeQuery·p0.50:   464.519 ms/op
                 executeQuery·p0.90:   470.286 ms/op
                 executeQuery·p0.95:   473.406 ms/op
                 executeQuery·p0.99:   473.956 ms/op
                 executeQuery·p0.999:  473.956 ms/op
                 executeQuery·p0.9999: 473.956 ms/op
                 executeQuery·p1.00:   473.956 ms/op

Iteration   5: 468.642 ±(99.9%) 4.457 ms/op
                 executeQuery·p0.00:   451.936 ms/op
                 executeQuery·p0.50:   470.024 ms/op
                 executeQuery·p0.90:   471.335 ms/op
                 executeQuery·p0.95:   472.226 ms/op
                 executeQuery·p0.99:   472.383 ms/op
                 executeQuery·p0.999:  472.383 ms/op
                 executeQuery·p0.9999: 472.383 ms/op
                 executeQuery·p1.00:   472.383 ms/op


# Run progress: 80.56% complete, ETA 02:32:22
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
512.046 ±(99.9%) 55.150 ms/op
# Warmup Iteration   2: 587.696 ±(99.9%) 2.913 ms/op
# Warmup Iteration   3: 536.650 ±(99.9%) 47.917 ms/op
# Warmup Iteration   4: 475.105 ±(99.9%) 1.066 ms/op
# Warmup Iteration   5: 470.358 ±(99.9%) 3.391 ms/op
Iteration   1: 468.880 ±(99.9%) 1.860 ms/op
                 executeQuery·p0.00:   465.568 ms/op
                 executeQuery·p0.50:   468.713 ms/op
                 executeQuery·p0.90:   470.811 ms/op
                 executeQuery·p0.95:   476.158 ms/op
                 executeQuery·p0.99:   477.102 ms/op
                 executeQuery·p0.999:  477.102 ms/op
                 executeQuery·p0.9999: 477.102 ms/op
                 executeQuery·p1.00:   477.102 ms/op

Iteration   2: 468.690 ±(99.9%) 0.762 ms/op
                 executeQuery·p0.00:   466.616 ms/op
                 executeQuery·p0.50:   468.713 ms/op
                 executeQuery·p0.90:   470.129 ms/op
                 executeQuery·p0.95:   470.732 ms/op
                 executeQuery·p0.99:   470.811 ms/op
                 executeQuery·p0.999:  470.811 ms/op
                 executeQuery·p0.9999: 470.811 ms/op
                 executeQuery·p1.00:   470.811 ms/op

Iteration   3: 472.884 ±(99.9%) 2.543 ms/op
                 executeQuery·p0.00:   467.665 ms/op
                 executeQuery·p0.50:   473.956 ms/op
                 executeQuery·p0.90:   475.529 ms/op
                 executeQuery·p0.95:   479.094 ms/op
                 executeQuery·p0.99:   479.724 ms/op
                 executeQuery·p0.999:  479.724 ms/op
                 executeQuery·p0.9999: 479.724 ms/op
                 executeQuery·p1.00:   479.724 ms/op

Iteration   4: 474.281 ±(99.9%) 1.464 ms/op
                 executeQuery·p0.00:   467.665 ms/op
                 executeQuery·p0.50:   474.481 ms/op
                 executeQuery·p0.90:   475.529 ms/op
                 executeQuery·p0.95:   476.001 ms/op
                 executeQuery·p0.99:   476.054 ms/op
                 executeQuery·p0.999:  476.054 ms/op
                 executeQuery·p0.9999: 476.054 ms/op
                 executeQuery·p1.00:   476.054 ms/op

Iteration   5: 468.690 ±(99.9%) 0.817 ms/op
                 executeQuery·p0.00:   466.092 ms/op
                 executeQuery·p0.50:   468.713 ms/op
                 executeQuery·p0.90:   469.762 ms/op
                 executeQuery·p0.95:   470.653 ms/op
                 executeQuery·p0.99:   470.811 ms/op
                 executeQuery·p0.999:  470.811 ms/op
                 executeQuery·p0.9999: 470.811 ms/op
                 executeQuery·p1.00:   470.811 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 220
  mean =    464.214 ±(99.9%) 2.198 ms/op

  Histogram, ms/op:
    [440.000, 442.500) = 0 
    [442.500, 445.000) = 0 
    [445.000, 447.500) = 24 
    [447.500, 450.000) = 22 
    [450.000, 452.500) = 6 
    [452.500, 455.000) = 0 
    [455.000, 457.500) = 1 
    [457.500, 460.000) = 0 
    [460.000, 462.500) = 5 
    [462.500, 465.000) = 15 
    [465.000, 467.500) = 18 
    [467.500, 470.000) = 73 
    [470.000, 472.500) = 19 
    [472.500, 475.000) = 21 
    [475.000, 477.500) = 15 

  Percentiles, ms/op:
      p(0.0000) =    445.645 ms/op
     p(50.0000) =    468.189 ms/op
     p(90.0000) =    473.956 ms/op
     p(95.0000) =    475.529 ms/op
     p(99.0000) =    476.882 ms/op
     p(99.9000) =    479.724 ms/op
     p(99.9900) =    479.724 ms/op
     p(99.9990) =    479.724 ms/op
     p(99.9999) =    479.724 ms/op
    p(100.0000) =    479.724 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 81.11% complete, ETA 02:27:24
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
11978.932 ms/op
# Warmup Iteration   2: 5335.155 ms/op
# Warmup Iteration   3: 5620.367 ms/op
# Warmup Iteration   4: 4445.962 ±(99.9%) 0.001 ms/op
# Warmup Iteration   5: 4390.038 ±(99.9%) 233.772 ms/op
Iteration   1: 5019.184 ±(99.9%) 6406.366 ms/op
                 executeQuery·p0.00:   4613.734 ms/op
                 executeQuery·p0.50:   5217.714 ms/op
                 executeQuery·p0.90:   5226.103 ms/op
                 executeQuery·p0.95:   5226.103 ms/op
                 executeQuery·p0.99:   5226.103 ms/op
                 executeQuery·p0.999:  5226.103 ms/op
                 executeQuery·p0.9999: 5226.103 ms/op
                 executeQuery·p1.00:   5226.103 ms/op

Iteration   2: 4775.914 ±(99.9%) 7773.942 ms/op
                 executeQuery·p0.00:   4378.853 ms/op
                 executeQuery·p0.50:   4722.786 ms/op
                 executeQuery·p0.90:   5226.103 ms/op
                 executeQuery·p0.95:   5226.103 ms/op
                 executeQuery·p0.99:   5226.103 ms/op
                 executeQuery·p0.999:  5226.103 ms/op
                 executeQuery·p0.9999: 5226.103 ms/op
                 executeQuery·p1.00:   5226.103 ms/op

Iteration   3: 4376.057 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   4370.465 ms/op
                 executeQuery·p0.50:   4378.853 ms/op
                 executeQuery·p0.90:   4378.853 ms/op
                 executeQuery·p0.95:   4378.853 ms/op
                 executeQuery·p0.99:   4378.853 ms/op
                 executeQuery·p0.999:  4378.853 ms/op
                 executeQuery·p0.9999: 4378.853 ms/op
                 executeQuery·p1.00:   4378.853 ms/op

Iteration   4: 4390.038 ±(99.9%) 353.429 ms/op
                 executeQuery·p0.00:   4378.853 ms/op
                 executeQuery·p0.50:   4378.853 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   5: 4482.313 ±(99.9%) 1283.465 ms/op
                 executeQuery·p0.00:   4437.574 ms/op
                 executeQuery·p0.50:   4445.962 ms/op
                 executeQuery·p0.90:   4563.403 ms/op
                 executeQuery·p0.95:   4563.403 ms/op
                 executeQuery·p0.99:   4563.403 ms/op
                 executeQuery·p0.999:  4563.403 ms/op
                 executeQuery·p0.9999: 4563.403 ms/op
                 executeQuery·p1.00:   4563.403 ms/op


# Run progress: 81.67% complete, ETA 02:22:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5044.350 ±(99.9%) 9495.025 ms/op
# Warmup Iteration   2: 5498.733 ms/op
# Warmup Iteration   3: 4303.356 ±(99.9%) 0.001 ms/op
# Warmup Iteration   4: 4303.356 ±(99.9%) 0.001 ms/op
# Warmup Iteration   5: 5595.202 ms/op
Iteration   1: 5616.173 ms/op
                 executeQuery·p0.00:   5611.979 ms/op
                 executeQuery·p0.50:   5616.173 ms/op
                 executeQuery·p0.90:   5620.367 ms/op
                 executeQuery·p0.95:   5620.367 ms/op
                 executeQuery·p0.99:   5620.367 ms/op
                 executeQuery·p0.999:  5620.367 ms/op
                 executeQuery·p0.9999: 5620.367 ms/op
                 executeQuery·p1.00:   5620.367 ms/op

Iteration   2: 5549.064 ms/op
                 executeQuery·p0.00:   5536.481 ms/op
                 executeQuery·p0.50:   5549.064 ms/op
                 executeQuery·p0.90:   5561.647 ms/op
                 executeQuery·p0.95:   5561.647 ms/op
                 executeQuery·p0.99:   5561.647 ms/op
                 executeQuery·p0.999:  5561.647 ms/op
                 executeQuery·p0.9999: 5561.647 ms/op
                 executeQuery·p1.00:   5561.647 ms/op

Iteration   3: 5540.676 ms/op
                 executeQuery·p0.00:   5536.481 ms/op
                 executeQuery·p0.50:   5540.676 ms/op
                 executeQuery·p0.90:   5544.870 ms/op
                 executeQuery·p0.95:   5544.870 ms/op
                 executeQuery·p0.99:   5544.870 ms/op
                 executeQuery·p0.999:  5544.870 ms/op
                 executeQuery·p0.9999: 5544.870 ms/op
                 executeQuery·p1.00:   5544.870 ms/op

Iteration   4: 5540.676 ms/op
                 executeQuery·p0.00:   5536.481 ms/op
                 executeQuery·p0.50:   5540.676 ms/op
                 executeQuery·p0.90:   5544.870 ms/op
                 executeQuery·p0.95:   5544.870 ms/op
                 executeQuery·p0.99:   5544.870 ms/op
                 executeQuery·p0.999:  5544.870 ms/op
                 executeQuery·p0.9999: 5544.870 ms/op
                 executeQuery·p1.00:   5544.870 ms/op

Iteration   5: 5549.064 ms/op
                 executeQuery·p0.00:   5544.870 ms/op
                 executeQuery·p0.50:   5549.064 ms/op
                 executeQuery·p0.90:   5553.258 ms/op
                 executeQuery·p0.95:   5553.258 ms/op
                 executeQuery·p0.99:   5553.258 ms/op
                 executeQuery·p0.999:  5553.258 ms/op
                 executeQuery·p0.9999: 5553.258 ms/op
                 executeQuery·p1.00:   5553.258 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 25
  mean =   4988.873 ±(99.9%) 404.324 ms/op

  Histogram, ms/op:
    [4000.000, 4125.000) = 0 
    [4125.000, 4250.000) = 0 
    [4250.000, 4375.000) = 1 
    [4375.000, 4500.000) = 8 
    [4500.000, 4625.000) = 2 
    [4625.000, 4750.000) = 1 
    [4750.000, 4875.000) = 0 
    [4875.000, 5000.000) = 0 
    [5000.000, 5125.000) = 0 
    [5125.000, 5250.000) = 3 
    [5250.000, 5375.000) = 0 
    [5375.000, 5500.000) = 0 
    [5500.000, 5625.000) = 10 
    [5625.000, 5750.000) = 0 
    [5750.000, 5875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4370.465 ms/op
     p(50.0000) =   5217.714 ms/op
     p(90.0000) =   5581.780 ms/op
     p(95.0000) =   5617.851 ms/op
     p(99.0000) =   5620.367 ms/op
     p(99.9000) =   5620.367 ms/op
     p(99.9900) =   5620.367 ms/op
     p(99.9990) =   5620.367 ms/op
     p(99.9999) =   5620.367 ms/op
    p(100.0000) =   5620.367 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 82.22% complete, ETA 02:17:45
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
112474.456 ms/op
# Warmup Iteration   2: 113279.762 ms/op
# Warmup Iteration   3: 114219.287 ms/op
# Warmup Iteration   4: 114353.504 ms/op
# Warmup Iteration   5: 114219.287 ms/op
Iteration   1: 114621.940 ms/op
                 executeQuery·p0.00:   114621.940 ms/op
                 executeQuery·p0.50:   114621.940 ms/op
                 executeQuery·p0.90:   114621.940 ms/op
                 executeQuery·p0.95:   114621.940 ms/op
                 executeQuery·p0.99:   114621.940 ms/op
                 executeQuery·p0.999:  114621.940 ms/op
                 executeQuery·p0.9999: 114621.940 ms/op
                 executeQuery·p1.00:   114621.940 ms/op

Iteration   2: 114353.504 ms/op
                 executeQuery·p0.00:   114353.504 ms/op
                 executeQuery·p0.50:   114353.504 ms/op
                 executeQuery·p0.90:   114353.504 ms/op
                 executeQuery·p0.95:   114353.504 ms/op
                 executeQuery·p0.99:   114353.504 ms/op
                 executeQuery·p0.999:  114353.504 ms/op
                 executeQuery·p0.9999: 114353.504 ms/op
                 executeQuery·p1.00:   114353.504 ms/op

Iteration   3: 114353.504 ms/op
                 executeQuery·p0.00:   114353.504 ms/op
                 executeQuery·p0.50:   114353.504 ms/op
                 executeQuery·p0.90:   114353.504 ms/op
                 executeQuery·p0.95:   114353.504 ms/op
                 executeQuery·p0.99:   114353.504 ms/op
                 executeQuery·p0.999:  114353.504 ms/op
                 executeQuery·p0.9999: 114353.504 ms/op
                 executeQuery·p1.00:   114353.504 ms/op

Iteration   4: 114353.504 ms/op
                 executeQuery·p0.00:   114353.504 ms/op
                 executeQuery·p0.50:   114353.504 ms/op
                 executeQuery·p0.90:   114353.504 ms/op
                 executeQuery·p0.95:   114353.504 ms/op
                 executeQuery·p0.99:   114353.504 ms/op
                 executeQuery·p0.999:  114353.504 ms/op
                 executeQuery·p0.9999: 114353.504 ms/op
                 executeQuery·p1.00:   114353.504 ms/op

Iteration   5: 113548.198 ms/op
                 executeQuery·p0.00:   113548.198 ms/op
                 executeQuery·p0.50:   113548.198 ms/op
                 executeQuery·p0.90:   113548.198 ms/op
                 executeQuery·p0.95:   113548.198 ms/op
                 executeQuery·p0.99:   113548.198 ms/op
                 executeQuery·p0.999:  113548.198 ms/op
                 executeQuery·p0.9999: 113548.198 ms/op
                 executeQuery·p1.00:   113548.198 ms/op


# Run progress: 82.78% complete, ETA 02:16:31
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
118111.601 ms/op
# Warmup Iteration   2: 118111.601 ms/op
# Warmup Iteration   3: 118245.818 ms/op
# Warmup Iteration   4: 117843.165 ms/op
# Warmup Iteration   5: 118514.254 ms/op
Iteration   1: 118111.601 ms/op
                 executeQuery·p0.00:   118111.601 ms/op
                 executeQuery·p0.50:   118111.601 ms/op
                 executeQuery·p0.90:   118111.601 ms/op
                 executeQuery·p0.95:   118111.601 ms/op
                 executeQuery·p0.99:   118111.601 ms/op
                 executeQuery·p0.999:  118111.601 ms/op
                 executeQuery·p0.9999: 118111.601 ms/op
                 executeQuery·p1.00:   118111.601 ms/op

Iteration   2: 119051.125 ms/op
                 executeQuery·p0.00:   119051.125 ms/op
                 executeQuery·p0.50:   119051.125 ms/op
                 executeQuery·p0.90:   119051.125 ms/op
                 executeQuery·p0.95:   119051.125 ms/op
                 executeQuery·p0.99:   119051.125 ms/op
                 executeQuery·p0.999:  119051.125 ms/op
                 executeQuery·p0.9999: 119051.125 ms/op
                 executeQuery·p1.00:   119051.125 ms/op

Iteration   3: 118245.818 ms/op
                 executeQuery·p0.00:   118245.818 ms/op
                 executeQuery·p0.50:   118245.818 ms/op
                 executeQuery·p0.90:   118245.818 ms/op
                 executeQuery·p0.95:   118245.818 ms/op
                 executeQuery·p0.99:   118245.818 ms/op
                 executeQuery·p0.999:  118245.818 ms/op
                 executeQuery·p0.9999: 118245.818 ms/op
                 executeQuery·p1.00:   118245.818 ms/op

Iteration   4: 117708.947 ms/op
                 executeQuery·p0.00:   117708.947 ms/op
                 executeQuery·p0.50:   117708.947 ms/op
                 executeQuery·p0.90:   117708.947 ms/op
                 executeQuery·p0.95:   117708.947 ms/op
                 executeQuery·p0.99:   117708.947 ms/op
                 executeQuery·p0.999:  117708.947 ms/op
                 executeQuery·p0.9999: 117708.947 ms/op
                 executeQuery·p1.00:   117708.947 ms/op

Iteration   5: 117977.383 ms/op
                 executeQuery·p0.00:   117977.383 ms/op
                 executeQuery·p0.50:   117977.383 ms/op
                 executeQuery·p0.90:   117977.383 ms/op
                 executeQuery·p0.95:   117977.383 ms/op
                 executeQuery·p0.99:   117977.383 ms/op
                 executeQuery·p0.999:  117977.383 ms/op
                 executeQuery·p0.9999: 117977.383 ms/op
                 executeQuery·p1.00:   117977.383 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean = 116232.552 ±(99.9%) 3232.567 ms/op

  Histogram, ms/op:
    [113000.000, 113500.000) = 0 
    [113500.000, 114000.000) = 1 
    [114000.000, 114500.000) = 3 
    [114500.000, 115000.000) = 1 
    [115000.000, 115500.000) = 0 
    [115500.000, 116000.000) = 0 
    [116000.000, 116500.000) = 0 
    [116500.000, 117000.000) = 0 
    [117000.000, 117500.000) = 0 
    [117500.000, 118000.000) = 2 
    [118000.000, 118500.000) = 2 
    [118500.000, 119000.000) = 0 
    [119000.000, 119500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) = 113548.198 ms/op
     p(50.0000) = 116165.444 ms/op
     p(90.0000) = 118970.594 ms/op
     p(95.0000) = 119051.125 ms/op
     p(99.0000) = 119051.125 ms/op
     p(99.9000) = 119051.125 ms/op
     p(99.9900) = 119051.125 ms/op
     p(99.9990) = 119051.125 ms/op
     p(99.9999) = 119051.125 ms/op
    p(100.0000) = 119051.125 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 83.33% complete, ETA 02:15:11
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
523.869 ±(99.9%) 159.994 ms/op
# Warmup Iteration   2: 560.522 ±(99.9%) 5.607 ms/op
# Warmup Iteration   3: 500.249 ±(99.9%) 51.701 ms/op
# Warmup Iteration   4: 444.459 ±(99.9%) 4.739 ms/op
# Warmup Iteration   5: 442.909 ±(99.9%) 4.324 ms/op
Iteration   1: 475.754 ±(99.9%) 33.755 ms/op
                 executeQuery·p0.00:   438.305 ms/op
                 executeQuery·p0.50:   447.742 ms/op
                 executeQuery·p0.90:   522.820 ms/op
                 executeQuery·p0.95:   530.317 ms/op
                 executeQuery·p0.99:   531.104 ms/op
                 executeQuery·p0.999:  531.104 ms/op
                 executeQuery·p0.9999: 531.104 ms/op
                 executeQuery·p1.00:   531.104 ms/op

Iteration   2: 522.060 ±(99.9%) 5.119 ms/op
                 executeQuery·p0.00:   513.278 ms/op
                 executeQuery·p0.50:   520.618 ms/op
                 executeQuery·p0.90:   530.946 ms/op
                 executeQuery·p0.95:   534.092 ms/op
                 executeQuery·p0.99:   534.249 ms/op
                 executeQuery·p0.999:  534.249 ms/op
                 executeQuery·p0.9999: 534.249 ms/op
                 executeQuery·p1.00:   534.249 ms/op

Iteration   3: 461.802 ±(99.9%) 27.176 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   445.383 ms/op
                 executeQuery·p0.90:   521.929 ms/op
                 executeQuery·p0.95:   524.498 ms/op
                 executeQuery·p0.99:   524.812 ms/op
                 executeQuery·p0.999:  524.812 ms/op
                 executeQuery·p0.9999: 524.812 ms/op
                 executeQuery·p1.00:   524.812 ms/op

Iteration   4: 442.112 ±(99.9%) 4.185 ms/op
                 executeQuery·p0.00:   435.683 ms/op
                 executeQuery·p0.50:   440.402 ms/op
                 executeQuery·p0.90:   452.146 ms/op
                 executeQuery·p0.95:   454.663 ms/op
                 executeQuery·p0.99:   455.082 ms/op
                 executeQuery·p0.999:  455.082 ms/op
                 executeQuery·p0.9999: 455.082 ms/op
                 executeQuery·p1.00:   455.082 ms/op

Iteration   5: 442.636 ±(99.9%) 3.067 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   441.975 ms/op
                 executeQuery·p0.90:   448.895 ms/op
                 executeQuery·p0.95:   450.573 ms/op
                 executeQuery·p0.99:   450.888 ms/op
                 executeQuery·p0.999:  450.888 ms/op
                 executeQuery·p0.9999: 450.888 ms/op
                 executeQuery·p1.00:   450.888 ms/op


# Run progress: 83.89% complete, ETA 02:10:09
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
491.183 ±(99.9%) 58.960 ms/op
# Warmup Iteration   2: 546.584 ±(99.9%) 8.825 ms/op
# Warmup Iteration   3: 484.867 ±(99.9%) 46.617 ms/op
# Warmup Iteration   4: 438.601 ±(99.9%) 6.675 ms/op
# Warmup Iteration   5: 437.370 ±(99.9%) 5.743 ms/op
Iteration   1: 436.755 ±(99.9%) 4.258 ms/op
                 executeQuery·p0.00:   427.819 ms/op
                 executeQuery·p0.50:   436.208 ms/op
                 executeQuery·p0.90:   444.072 ms/op
                 executeQuery·p0.95:   450.573 ms/op
                 executeQuery·p0.99:   451.936 ms/op
                 executeQuery·p0.999:  451.936 ms/op
                 executeQuery·p0.9999: 451.936 ms/op
                 executeQuery·p1.00:   451.936 ms/op

Iteration   2: 438.715 ±(99.9%) 5.068 ms/op
                 executeQuery·p0.00:   432.013 ms/op
                 executeQuery·p0.50:   435.683 ms/op
                 executeQuery·p0.90:   450.049 ms/op
                 executeQuery·p0.95:   450.888 ms/op
                 executeQuery·p0.99:   450.888 ms/op
                 executeQuery·p0.999:  450.888 ms/op
                 executeQuery·p0.9999: 450.888 ms/op
                 executeQuery·p1.00:   450.888 ms/op

Iteration   3: 438.031 ±(99.9%) 5.939 ms/op
                 executeQuery·p0.00:   429.916 ms/op
                 executeQuery·p0.50:   435.159 ms/op
                 executeQuery·p0.90:   452.251 ms/op
                 executeQuery·p0.95:   456.235 ms/op
                 executeQuery·p0.99:   456.655 ms/op
                 executeQuery·p0.999:  456.655 ms/op
                 executeQuery·p0.9999: 456.655 ms/op
                 executeQuery·p1.00:   456.655 ms/op

Iteration   4: 436.208 ±(99.9%) 6.686 ms/op
                 executeQuery·p0.00:   428.343 ms/op
                 executeQuery·p0.50:   432.538 ms/op
                 executeQuery·p0.90:   449.944 ms/op
                 executeQuery·p0.95:   462.527 ms/op
                 executeQuery·p0.99:   464.519 ms/op
                 executeQuery·p0.999:  464.519 ms/op
                 executeQuery·p0.9999: 464.519 ms/op
                 executeQuery·p1.00:   464.519 ms/op

Iteration   5: 439.695 ±(99.9%) 5.936 ms/op
                 executeQuery·p0.00:   431.489 ms/op
                 executeQuery·p0.50:   436.208 ms/op
                 executeQuery·p0.90:   451.727 ms/op
                 executeQuery·p0.95:   453.404 ms/op
                 executeQuery·p0.99:   453.509 ms/op
                 executeQuery·p0.999:  453.509 ms/op
                 executeQuery·p0.9999: 453.509 ms/op
                 executeQuery·p1.00:   453.509 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 224
  mean =    452.219 ±(99.9%) 6.712 ms/op

  Histogram, ms/op:
    [400.000, 412.500) = 0 
    [412.500, 425.000) = 0 
    [425.000, 437.500) = 70 
    [437.500, 450.000) = 102 
    [450.000, 462.500) = 17 
    [462.500, 475.000) = 1 
    [475.000, 487.500) = 0 
    [487.500, 500.000) = 0 
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 26 
    [525.000, 537.500) = 8 
    [537.500, 550.000) = 0 
    [550.000, 562.500) = 0 
    [562.500, 575.000) = 0 
    [575.000, 587.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    427.819 ms/op
     p(50.0000) =    440.402 ms/op
     p(90.0000) =    519.832 ms/op
     p(95.0000) =    522.453 ms/op
     p(99.0000) =    531.104 ms/op
     p(99.9000) =    534.249 ms/op
     p(99.9900) =    534.249 ms/op
     p(99.9990) =    534.249 ms/op
     p(99.9999) =    534.249 ms/op
    p(100.0000) =    534.249 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 84.44% complete, ETA 02:05:09
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
11777.606 ms/op
# Warmup Iteration   2: 5020.582 ms/op
# Warmup Iteration   3: 5301.600 ms/op
# Warmup Iteration   4: 4083.854 ±(99.9%) 441.787 ms/op
# Warmup Iteration   5: 4043.309 ±(99.9%) 626.341 ms/op
Iteration   1: 4046.105 ±(99.9%) 392.669 ms/op
                 executeQuery·p0.00:   4022.338 ms/op
                 executeQuery·p0.50:   4051.698 ms/op
                 executeQuery·p0.90:   4064.281 ms/op
                 executeQuery·p0.95:   4064.281 ms/op
                 executeQuery·p0.99:   4064.281 ms/op
                 executeQuery·p0.999:  4064.281 ms/op
                 executeQuery·p0.9999: 4064.281 ms/op
                 executeQuery·p1.00:   4064.281 ms/op

Iteration   2: 4072.669 ±(99.9%) 501.773 ms/op
                 executeQuery·p0.00:   4043.309 ms/op
                 executeQuery·p0.50:   4076.863 ms/op
                 executeQuery·p0.90:   4097.835 ms/op
                 executeQuery·p0.95:   4097.835 ms/op
                 executeQuery·p0.99:   4097.835 ms/op
                 executeQuery·p0.999:  4097.835 ms/op
                 executeQuery·p0.9999: 4097.835 ms/op
                 executeQuery·p1.00:   4097.835 ms/op

Iteration   3: 4160.750 ±(99.9%) 1475.859 ms/op
                 executeQuery·p0.00:   4068.475 ms/op
                 executeQuery·p0.50:   4194.304 ms/op
                 executeQuery·p0.90:   4219.470 ms/op
                 executeQuery·p0.95:   4219.470 ms/op
                 executeQuery·p0.99:   4219.470 ms/op
                 executeQuery·p0.999:  4219.470 ms/op
                 executeQuery·p0.9999: 4219.470 ms/op
                 executeQuery·p1.00:   4219.470 ms/op

Iteration   4: 4138.380 ±(99.9%) 968.914 ms/op
                 executeQuery·p0.00:   4097.835 ms/op
                 executeQuery·p0.50:   4118.807 ms/op
                 executeQuery·p0.90:   4198.498 ms/op
                 executeQuery·p0.95:   4198.498 ms/op
                 executeQuery·p0.99:   4198.498 ms/op
                 executeQuery·p0.999:  4198.498 ms/op
                 executeQuery·p0.9999: 4198.498 ms/op
                 executeQuery·p1.00:   4198.498 ms/op

Iteration   5: 4053.096 ±(99.9%) 268.728 ms/op
                 executeQuery·p0.00:   4039.115 ms/op
                 executeQuery·p0.50:   4051.698 ms/op
                 executeQuery·p0.90:   4068.475 ms/op
                 executeQuery·p0.95:   4068.475 ms/op
                 executeQuery·p0.99:   4068.475 ms/op
                 executeQuery·p0.999:  4068.475 ms/op
                 executeQuery·p0.9999: 4068.475 ms/op
                 executeQuery·p1.00:   4068.475 ms/op


# Run progress: 85.00% complete, ETA 02:00:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4910.132 ±(99.9%) 5673.478 ms/op
# Warmup Iteration   2: 5263.852 ms/op
# Warmup Iteration   3: 4206.887 ±(99.9%) 994.756 ms/op
# Warmup Iteration   4: 4212.479 ±(99.9%) 353.429 ms/op
# Warmup Iteration   5: 4267.005 ±(99.9%) 1135.830 ms/op
Iteration   1: 4278.190 ±(99.9%) 2690.188 ms/op
                 executeQuery·p0.00:   4169.138 ms/op
                 executeQuery·p0.50:   4219.470 ms/op
                 executeQuery·p0.90:   4445.962 ms/op
                 executeQuery·p0.95:   4445.962 ms/op
                 executeQuery·p0.99:   4445.962 ms/op
                 executeQuery·p0.999:  4445.962 ms/op
                 executeQuery·p0.9999: 4445.962 ms/op
                 executeQuery·p1.00:   4445.962 ms/op

Iteration   2: 4233.451 ±(99.9%) 1692.684 ms/op
                 executeQuery·p0.00:   4135.584 ms/op
                 executeQuery·p0.50:   4244.636 ms/op
                 executeQuery·p0.90:   4320.133 ms/op
                 executeQuery·p0.95:   4320.133 ms/op
                 executeQuery·p0.99:   4320.133 ms/op
                 executeQuery·p0.999:  4320.133 ms/op
                 executeQuery·p0.9999: 4320.133 ms/op
                 executeQuery·p1.00:   4320.133 ms/op

Iteration   3: 4345.299 ±(99.9%) 2390.552 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4429.185 ms/op
                 executeQuery·p0.95:   4429.185 ms/op
                 executeQuery·p0.99:   4429.185 ms/op
                 executeQuery·p0.999:  4429.185 ms/op
                 executeQuery·p0.9999: 4429.185 ms/op
                 executeQuery·p1.00:   4429.185 ms/op

Iteration   4: 4283.782 ±(99.9%) 723.236 ms/op
                 executeQuery·p0.00:   4253.024 ms/op
                 executeQuery·p0.50:   4269.801 ms/op
                 executeQuery·p0.90:   4328.522 ms/op
                 executeQuery·p0.95:   4328.522 ms/op
                 executeQuery·p0.99:   4328.522 ms/op
                 executeQuery·p0.999:  4328.522 ms/op
                 executeQuery·p0.9999: 4328.522 ms/op
                 executeQuery·p1.00:   4328.522 ms/op

Iteration   5: 4283.782 ±(99.9%) 318.577 ms/op
                 executeQuery·p0.00:   4269.801 ms/op
                 executeQuery·p0.50:   4278.190 ms/op
                 executeQuery·p0.90:   4303.356 ms/op
                 executeQuery·p0.95:   4303.356 ms/op
                 executeQuery·p0.99:   4303.356 ms/op
                 executeQuery·p0.999:  4303.356 ms/op
                 executeQuery·p0.9999: 4303.356 ms/op
                 executeQuery·p1.00:   4303.356 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 30
  mean =   4189.550 ±(99.9%) 82.736 ms/op

  Histogram, ms/op:
    [4000.000, 4050.000) = 3 
    [4050.000, 4100.000) = 8 
    [4100.000, 4150.000) = 2 
    [4150.000, 4200.000) = 4 
    [4200.000, 4250.000) = 3 
    [4250.000, 4300.000) = 4 
    [4300.000, 4350.000) = 3 
    [4350.000, 4400.000) = 0 
    [4400.000, 4450.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   4022.338 ms/op
     p(50.0000) =   4194.304 ms/op
     p(90.0000) =   4404.019 ms/op
     p(95.0000) =   4436.735 ms/op
     p(99.0000) =   4445.962 ms/op
     p(99.9000) =   4445.962 ms/op
     p(99.9900) =   4445.962 ms/op
     p(99.9990) =   4445.962 ms/op
     p(99.9999) =   4445.962 ms/op
    p(100.0000) =   4445.962 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 85.56% complete, ETA 01:55:24
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
119185.342 ms/op
# Warmup Iteration   2: 112474.456 ms/op
# Warmup Iteration   3: 114756.157 ms/op
# Warmup Iteration   4: 115964.117 ms/op
# Warmup Iteration   5: 115024.593 ms/op
Iteration   1: 115964.117 ms/op
                 executeQuery·p0.00:   115964.117 ms/op
                 executeQuery·p0.50:   115964.117 ms/op
                 executeQuery·p0.90:   115964.117 ms/op
                 executeQuery·p0.95:   115964.117 ms/op
                 executeQuery·p0.99:   115964.117 ms/op
                 executeQuery·p0.999:  115964.117 ms/op
                 executeQuery·p0.9999: 115964.117 ms/op
                 executeQuery·p1.00:   115964.117 ms/op

Iteration   2: 114756.157 ms/op
                 executeQuery·p0.00:   114756.157 ms/op
                 executeQuery·p0.50:   114756.157 ms/op
                 executeQuery·p0.90:   114756.157 ms/op
                 executeQuery·p0.95:   114756.157 ms/op
                 executeQuery·p0.99:   114756.157 ms/op
                 executeQuery·p0.999:  114756.157 ms/op
                 executeQuery·p0.9999: 114756.157 ms/op
                 executeQuery·p1.00:   114756.157 ms/op

Iteration   3: 114621.940 ms/op
                 executeQuery·p0.00:   114621.940 ms/op
                 executeQuery·p0.50:   114621.940 ms/op
                 executeQuery·p0.90:   114621.940 ms/op
                 executeQuery·p0.95:   114621.940 ms/op
                 executeQuery·p0.99:   114621.940 ms/op
                 executeQuery·p0.999:  114621.940 ms/op
                 executeQuery·p0.9999: 114621.940 ms/op
                 executeQuery·p1.00:   114621.940 ms/op

Iteration   4: 114353.504 ms/op
                 executeQuery·p0.00:   114353.504 ms/op
                 executeQuery·p0.50:   114353.504 ms/op
                 executeQuery·p0.90:   114353.504 ms/op
                 executeQuery·p0.95:   114353.504 ms/op
                 executeQuery·p0.99:   114353.504 ms/op
                 executeQuery·p0.999:  114353.504 ms/op
                 executeQuery·p0.9999: 114353.504 ms/op
                 executeQuery·p1.00:   114353.504 ms/op

Iteration   5: 115158.811 ms/op
                 executeQuery·p0.00:   115158.811 ms/op
                 executeQuery·p0.50:   115158.811 ms/op
                 executeQuery·p0.90:   115158.811 ms/op
                 executeQuery·p0.95:   115158.811 ms/op
                 executeQuery·p0.99:   115158.811 ms/op
                 executeQuery·p0.999:  115158.811 ms/op
                 executeQuery·p0.9999: 115158.811 ms/op
                 executeQuery·p1.00:   115158.811 ms/op


# Run progress: 86.11% complete, ETA 01:53:21
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
114890.375 ms/op
# Warmup Iteration   2: 114219.287 ms/op
# Warmup Iteration   3: 114621.940 ms/op
# Warmup Iteration   4: 115695.682 ms/op
# Warmup Iteration   5: 115024.593 ms/op
Iteration   1: 114621.940 ms/op
                 executeQuery·p0.00:   114621.940 ms/op
                 executeQuery·p0.50:   114621.940 ms/op
                 executeQuery·p0.90:   114621.940 ms/op
                 executeQuery·p0.95:   114621.940 ms/op
                 executeQuery·p0.99:   114621.940 ms/op
                 executeQuery·p0.999:  114621.940 ms/op
                 executeQuery·p0.9999: 114621.940 ms/op
                 executeQuery·p1.00:   114621.940 ms/op

Iteration   2: 114487.722 ms/op
                 executeQuery·p0.00:   114487.722 ms/op
                 executeQuery·p0.50:   114487.722 ms/op
                 executeQuery·p0.90:   114487.722 ms/op
                 executeQuery·p0.95:   114487.722 ms/op
                 executeQuery·p0.99:   114487.722 ms/op
                 executeQuery·p0.999:  114487.722 ms/op
                 executeQuery·p0.9999: 114487.722 ms/op
                 executeQuery·p1.00:   114487.722 ms/op

Iteration   3: 114353.504 ms/op
                 executeQuery·p0.00:   114353.504 ms/op
                 executeQuery·p0.50:   114353.504 ms/op
                 executeQuery·p0.90:   114353.504 ms/op
                 executeQuery·p0.95:   114353.504 ms/op
                 executeQuery·p0.99:   114353.504 ms/op
                 executeQuery·p0.999:  114353.504 ms/op
                 executeQuery·p0.9999: 114353.504 ms/op
                 executeQuery·p1.00:   114353.504 ms/op

Iteration   4: 114487.722 ms/op
                 executeQuery·p0.00:   114487.722 ms/op
                 executeQuery·p0.50:   114487.722 ms/op
                 executeQuery·p0.90:   114487.722 ms/op
                 executeQuery·p0.95:   114487.722 ms/op
                 executeQuery·p0.99:   114487.722 ms/op
                 executeQuery·p0.999:  114487.722 ms/op
                 executeQuery·p0.9999: 114487.722 ms/op
                 executeQuery·p1.00:   114487.722 ms/op

Iteration   5: 114487.722 ms/op
                 executeQuery·p0.00:   114487.722 ms/op
                 executeQuery·p0.50:   114487.722 ms/op
                 executeQuery·p0.90:   114487.722 ms/op
                 executeQuery·p0.95:   114487.722 ms/op
                 executeQuery·p0.99:   114487.722 ms/op
                 executeQuery·p0.999:  114487.722 ms/op
                 executeQuery·p0.9999: 114487.722 ms/op
                 executeQuery·p1.00:   114487.722 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 10
  mean = 114729.314 ±(99.9%) 745.875 ms/op

  Histogram, ms/op:
    [114000.000, 114125.000) = 0 
    [114125.000, 114250.000) = 0 
    [114250.000, 114375.000) = 2 
    [114375.000, 114500.000) = 3 
    [114500.000, 114625.000) = 2 
    [114625.000, 114750.000) = 0 
    [114750.000, 114875.000) = 1 
    [114875.000, 115000.000) = 0 
    [115000.000, 115125.000) = 0 
    [115125.000, 115250.000) = 1 
    [115250.000, 115375.000) = 0 
    [115375.000, 115500.000) = 0 
    [115500.000, 115625.000) = 0 
    [115625.000, 115750.000) = 0 
    [115750.000, 115875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) = 114353.504 ms/op
     p(50.0000) = 114554.831 ms/op
     p(90.0000) = 115883.586 ms/op
     p(95.0000) = 115964.117 ms/op
     p(99.0000) = 115964.117 ms/op
     p(99.9000) = 115964.117 ms/op
     p(99.9900) = 115964.117 ms/op
     p(99.9990) = 115964.117 ms/op
     p(99.9999) = 115964.117 ms/op
    p(100.0000) = 115964.117 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 86.67% complete, ETA 01:51:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
332.227 ±(99.9%) 182.114 ms/op
# Warmup Iteration   2: 271.494 ±(99.9%) 2.952 ms/op
# Warmup Iteration   3: 265.552 ±(99.9%) 10.584 ms/op
# Warmup Iteration   4: 265.220 ±(99.9%) 1.818 ms/op
# Warmup Iteration   5: 268.944 ±(99.9%) 2.255 ms/op
Iteration   1: 268.196 ±(99.9%) 2.701 ms/op
                 executeQuery·p0.00:   262.930 ms/op
                 executeQuery·p0.50:   266.338 ms/op
                 executeQuery·p0.90:   275.513 ms/op
                 executeQuery·p0.95:   275.775 ms/op
                 executeQuery·p0.99:   275.775 ms/op
                 executeQuery·p0.999:  275.775 ms/op
                 executeQuery·p0.9999: 275.775 ms/op
                 executeQuery·p1.00:   275.775 ms/op

Iteration   2: 268.744 ±(99.9%) 2.351 ms/op
                 executeQuery·p0.00:   263.455 ms/op
                 executeQuery·p0.50:   267.518 ms/op
                 executeQuery·p0.90:   274.727 ms/op
                 executeQuery·p0.95:   275.644 ms/op
                 executeQuery·p0.99:   276.824 ms/op
                 executeQuery·p0.999:  276.824 ms/op
                 executeQuery·p0.9999: 276.824 ms/op
                 executeQuery·p1.00:   276.824 ms/op

Iteration   3: 267.734 ±(99.9%) 2.851 ms/op
                 executeQuery·p0.00:   263.455 ms/op
                 executeQuery·p0.50:   266.469 ms/op
                 executeQuery·p0.90:   273.940 ms/op
                 executeQuery·p0.95:   279.314 ms/op
                 executeQuery·p0.99:   286.786 ms/op
                 executeQuery·p0.999:  286.786 ms/op
                 executeQuery·p0.9999: 286.786 ms/op
                 executeQuery·p1.00:   286.786 ms/op

Iteration   4: 267.734 ±(99.9%) 1.970 ms/op
                 executeQuery·p0.00:   264.503 ms/op
                 executeQuery·p0.50:   266.469 ms/op
                 executeQuery·p0.90:   273.416 ms/op
                 executeQuery·p0.95:   275.120 ms/op
                 executeQuery·p0.99:   276.300 ms/op
                 executeQuery·p0.999:  276.300 ms/op
                 executeQuery·p0.9999: 276.300 ms/op
                 executeQuery·p1.00:   276.300 ms/op

Iteration   5: 267.942 ±(99.9%) 2.704 ms/op
                 executeQuery·p0.00:   259.523 ms/op
                 executeQuery·p0.50:   267.518 ms/op
                 executeQuery·p0.90:   272.892 ms/op
                 executeQuery·p0.95:   275.907 ms/op
                 executeQuery·p0.99:   282.591 ms/op
                 executeQuery·p0.999:  282.591 ms/op
                 executeQuery·p0.9999: 282.591 ms/op
                 executeQuery·p1.00:   282.591 ms/op


# Run progress: 87.22% complete, ETA 01:46:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
290.368 ±(99.9%) 31.768 ms/op
# Warmup Iteration   2: 271.820 ±(99.9%) 2.695 ms/op
# Warmup Iteration   3: 271.265 ±(99.9%) 4.380 ms/op
# Warmup Iteration   4: 267.589 ±(99.9%) 1.749 ms/op
# Warmup Iteration   5: 268.383 ±(99.9%) 3.488 ms/op
Iteration   1: 267.642 ±(99.9%) 2.501 ms/op
                 executeQuery·p0.00:   262.668 ms/op
                 executeQuery·p0.50:   266.600 ms/op
                 executeQuery·p0.90:   274.727 ms/op
                 executeQuery·p0.95:   275.880 ms/op
                 executeQuery·p0.99:   278.397 ms/op
                 executeQuery·p0.999:  278.397 ms/op
                 executeQuery·p0.9999: 278.397 ms/op
                 executeQuery·p1.00:   278.397 ms/op

Iteration   2: 271.697 ±(99.9%) 2.510 ms/op
                 executeQuery·p0.00:   265.028 ms/op
                 executeQuery·p0.50:   271.843 ms/op
                 executeQuery·p0.90:   276.562 ms/op
                 executeQuery·p0.95:   278.004 ms/op
                 executeQuery·p0.99:   279.970 ms/op
                 executeQuery·p0.999:  279.970 ms/op
                 executeQuery·p0.9999: 279.970 ms/op
                 executeQuery·p1.00:   279.970 ms/op

Iteration   3: 269.823 ±(99.9%) 2.187 ms/op
                 executeQuery·p0.00:   266.076 ms/op
                 executeQuery·p0.50:   269.484 ms/op
                 executeQuery·p0.90:   272.105 ms/op
                 executeQuery·p0.95:   276.693 ms/op
                 executeQuery·p0.99:   287.310 ms/op
                 executeQuery·p0.999:  287.310 ms/op
                 executeQuery·p0.9999: 287.310 ms/op
                 executeQuery·p1.00:   287.310 ms/op

Iteration   4: 271.018 ±(99.9%) 1.346 ms/op
                 executeQuery·p0.00:   266.600 ms/op
                 executeQuery·p0.50:   271.057 ms/op
                 executeQuery·p0.90:   273.940 ms/op
                 executeQuery·p0.95:   275.382 ms/op
                 executeQuery·p0.99:   275.775 ms/op
                 executeQuery·p0.999:  275.775 ms/op
                 executeQuery·p0.9999: 275.775 ms/op
                 executeQuery·p1.00:   275.775 ms/op

Iteration   5: 274.650 ±(99.9%) 1.575 ms/op
                 executeQuery·p0.00:   270.533 ms/op
                 executeQuery·p0.50:   274.465 ms/op
                 executeQuery·p0.90:   278.397 ms/op
                 executeQuery·p0.95:   280.101 ms/op
                 executeQuery·p0.99:   280.494 ms/op
                 executeQuery·p0.999:  280.494 ms/op
                 executeQuery·p0.9999: 280.494 ms/op
                 executeQuery·p1.00:   280.494 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 341
  mean =    269.512 ±(99.9%) 0.774 ms/op

  Histogram, ms/op:
    [250.000, 252.500) = 0 
    [252.500, 255.000) = 0 
    [255.000, 257.500) = 0 
    [257.500, 260.000) = 1 
    [260.000, 262.500) = 0 
    [262.500, 265.000) = 42 
    [265.000, 267.500) = 88 
    [267.500, 270.000) = 70 
    [270.000, 272.500) = 52 
    [272.500, 275.000) = 48 
    [275.000, 277.500) = 30 
    [277.500, 280.000) = 6 
    [280.000, 282.500) = 1 
    [282.500, 285.000) = 1 
    [285.000, 287.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    259.523 ms/op
     p(50.0000) =    268.960 ms/op
     p(90.0000) =    275.251 ms/op
     p(95.0000) =    276.300 ms/op
     p(99.0000) =    281.710 ms/op
     p(99.9000) =    287.310 ms/op
     p(99.9900) =    287.310 ms/op
     p(99.9990) =    287.310 ms/op
     p(99.9999) =    287.310 ms/op
    p(100.0000) =    287.310 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 87.78% complete, ETA 01:41:00
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
14227.079 ms/op
# Warmup Iteration   2: 3250.586 ms/op
# Warmup Iteration   3: 3149.922 ms/op
# Warmup Iteration   4: 2971.664 ms/op
# Warmup Iteration   5: 2545.943 ±(99.9%) 76.520 ms/op
Iteration   1: 2545.943 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2545.943 ms/op
                 executeQuery·p0.50:   2545.943 ms/op
                 executeQuery·p0.90:   2545.943 ms/op
                 executeQuery·p0.95:   2545.943 ms/op
                 executeQuery·p0.99:   2545.943 ms/op
                 executeQuery·p0.999:  2545.943 ms/op
                 executeQuery·p0.9999: 2545.943 ms/op
                 executeQuery·p1.00:   2545.943 ms/op

Iteration   2: 2593.478 ±(99.9%) 1568.810 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2545.943 ms/op
                 executeQuery·p0.90:   2692.743 ms/op
                 executeQuery·p0.95:   2692.743 ms/op
                 executeQuery·p0.99:   2692.743 ms/op
                 executeQuery·p0.999:  2692.743 ms/op
                 executeQuery·p0.9999: 2692.743 ms/op
                 executeQuery·p1.00:   2692.743 ms/op

Iteration   3: 2544.544 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2545.943 ms/op
                 executeQuery·p0.90:   2545.943 ms/op
                 executeQuery·p0.95:   2545.943 ms/op
                 executeQuery·p0.99:   2545.943 ms/op
                 executeQuery·p0.999:  2545.943 ms/op
                 executeQuery·p0.9999: 2545.943 ms/op
                 executeQuery·p1.00:   2545.943 ms/op

Iteration   4: 2543.146 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2541.748 ms/op
                 executeQuery·p0.50:   2541.748 ms/op
                 executeQuery·p0.90:   2545.943 ms/op
                 executeQuery·p0.95:   2545.943 ms/op
                 executeQuery·p0.99:   2545.943 ms/op
                 executeQuery·p0.999:  2545.943 ms/op
                 executeQuery·p0.9999: 2545.943 ms/op
                 executeQuery·p1.00:   2545.943 ms/op

Iteration   5: 2552.933 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   2537.554 ms/op
                 executeQuery·p0.50:   2550.137 ms/op
                 executeQuery·p0.90:   2571.108 ms/op
                 executeQuery·p0.95:   2571.108 ms/op
                 executeQuery·p0.99:   2571.108 ms/op
                 executeQuery·p0.999:  2571.108 ms/op
                 executeQuery·p0.9999: 2571.108 ms/op
                 executeQuery·p1.00:   2571.108 ms/op


# Run progress: 88.33% complete, ETA 01:36:08
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3730.833 ms/op
# Warmup Iteration   2: 3187.671 ms/op
# Warmup Iteration   3: 3154.117 ms/op
# Warmup Iteration   4: 2839.544 ms/op
# Warmup Iteration   5: 3158.311 ms/op
Iteration   1: 2596.274 ms/op
                 executeQuery·p0.00:   2596.274 ms/op
                 executeQuery·p0.50:   2596.274 ms/op
                 executeQuery·p0.90:   2596.274 ms/op
                 executeQuery·p0.95:   2596.274 ms/op
                 executeQuery·p0.99:   2596.274 ms/op
                 executeQuery·p0.999:  2596.274 ms/op
                 executeQuery·p0.9999: 2596.274 ms/op
                 executeQuery·p1.00:   2596.274 ms/op

Iteration   2: 2592.080 ms/op
                 executeQuery·p0.00:   2592.080 ms/op
                 executeQuery·p0.50:   2592.080 ms/op
                 executeQuery·p0.90:   2592.080 ms/op
                 executeQuery·p0.95:   2592.080 ms/op
                 executeQuery·p0.99:   2592.080 ms/op
                 executeQuery·p0.999:  2592.080 ms/op
                 executeQuery·p0.9999: 2592.080 ms/op
                 executeQuery·p1.00:   2592.080 ms/op

Iteration   3: 2600.468 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2600.468 ms/op
                 executeQuery·p0.90:   2600.468 ms/op
                 executeQuery·p0.95:   2600.468 ms/op
                 executeQuery·p0.99:   2600.468 ms/op
                 executeQuery·p0.999:  2600.468 ms/op
                 executeQuery·p0.9999: 2600.468 ms/op
                 executeQuery·p1.00:   2600.468 ms/op

Iteration   4: 2654.994 ms/op
                 executeQuery·p0.00:   2654.994 ms/op
                 executeQuery·p0.50:   2654.994 ms/op
                 executeQuery·p0.90:   2654.994 ms/op
                 executeQuery·p0.95:   2654.994 ms/op
                 executeQuery·p0.99:   2654.994 ms/op
                 executeQuery·p0.999:  2654.994 ms/op
                 executeQuery·p0.9999: 2654.994 ms/op
                 executeQuery·p1.00:   2654.994 ms/op

Iteration   5: 2587.886 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2587.886 ms/op
                 executeQuery·p0.90:   2587.886 ms/op
                 executeQuery·p0.95:   2587.886 ms/op
                 executeQuery·p0.99:   2587.886 ms/op
                 executeQuery·p0.999:  2587.886 ms/op
                 executeQuery·p0.9999: 2587.886 ms/op
                 executeQuery·p1.00:   2587.886 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   2568.592 ±(99.9%) 36.391 ms/op

  Histogram, ms/op:
    [2500.000, 2512.500) = 0 
    [2512.500, 2525.000) = 0 
    [2525.000, 2537.500) = 0 
    [2537.500, 2550.000) = 12 
    [2550.000, 2562.500) = 1 
    [2562.500, 2575.000) = 1 
    [2575.000, 2587.500) = 0 
    [2587.500, 2600.000) = 3 
    [2600.000, 2612.500) = 1 
    [2612.500, 2625.000) = 0 
    [2625.000, 2637.500) = 0 
    [2637.500, 2650.000) = 0 
    [2650.000, 2662.500) = 1 
    [2662.500, 2675.000) = 0 
    [2675.000, 2687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2537.554 ms/op
     p(50.0000) =   2545.943 ms/op
     p(90.0000) =   2649.542 ms/op
     p(95.0000) =   2690.856 ms/op
     p(99.0000) =   2692.743 ms/op
     p(99.9000) =   2692.743 ms/op
     p(99.9900) =   2692.743 ms/op
     p(99.9990) =   2692.743 ms/op
     p(99.9999) =   2692.743 ms/op
    p(100.0000) =   2692.743 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 88.89% complete, ETA 01:31:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
289.365 ±(99.9%) 40.956 ms/op
# Warmup Iteration   2: 264.025 ±(99.9%) 4.451 ms/op
# Warmup Iteration   3: 259.905 ±(99.9%) 2.799 ms/op
# Warmup Iteration   4: 259.912 ±(99.9%) 2.474 ms/op
# Warmup Iteration   5: 261.784 ±(99.9%) 3.528 ms/op
Iteration   1: 264.010 ±(99.9%) 4.253 ms/op
                 executeQuery·p0.00:   254.280 ms/op
                 executeQuery·p0.50:   261.882 ms/op
                 executeQuery·p0.90:   274.203 ms/op
                 executeQuery·p0.95:   276.431 ms/op
                 executeQuery·p0.99:   276.824 ms/op
                 executeQuery·p0.999:  276.824 ms/op
                 executeQuery·p0.9999: 276.824 ms/op
                 executeQuery·p1.00:   276.824 ms/op

Iteration   2: 257.995 ±(99.9%) 3.349 ms/op
                 executeQuery·p0.00:   249.823 ms/op
                 executeQuery·p0.50:   256.901 ms/op
                 executeQuery·p0.90:   263.088 ms/op
                 executeQuery·p0.95:   270.323 ms/op
                 executeQuery·p0.99:   281.018 ms/op
                 executeQuery·p0.999:  281.018 ms/op
                 executeQuery·p0.9999: 281.018 ms/op
                 executeQuery·p1.00:   281.018 ms/op

Iteration   3: 257.253 ±(99.9%) 4.472 ms/op
                 executeQuery·p0.00:   248.513 ms/op
                 executeQuery·p0.50:   255.328 ms/op
                 executeQuery·p0.90:   267.701 ms/op
                 executeQuery·p0.95:   272.210 ms/op
                 executeQuery·p0.99:   281.018 ms/op
                 executeQuery·p0.999:  281.018 ms/op
                 executeQuery·p0.9999: 281.018 ms/op
                 executeQuery·p1.00:   281.018 ms/op

Iteration   4: 263.848 ±(99.9%) 4.040 ms/op
                 executeQuery·p0.00:   255.853 ms/op
                 executeQuery·p0.50:   261.620 ms/op
                 executeQuery·p0.90:   274.465 ms/op
                 executeQuery·p0.95:   275.382 ms/op
                 executeQuery·p0.99:   275.775 ms/op
                 executeQuery·p0.999:  275.775 ms/op
                 executeQuery·p0.9999: 275.775 ms/op
                 executeQuery·p1.00:   275.775 ms/op

Iteration   5: 260.949 ±(99.9%) 2.652 ms/op
                 executeQuery·p0.00:   255.328 ms/op
                 executeQuery·p0.50:   259.916 ms/op
                 executeQuery·p0.90:   267.911 ms/op
                 executeQuery·p0.95:   271.712 ms/op
                 executeQuery·p0.99:   272.105 ms/op
                 executeQuery·p0.999:  272.105 ms/op
                 executeQuery·p0.9999: 272.105 ms/op
                 executeQuery·p1.00:   272.105 ms/op


# Run progress: 89.44% complete, ETA 01:26:20
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
285.511 ±(99.9%) 33.380 ms/op
# Warmup Iteration   2: 259.785 ±(99.9%) 4.195 ms/op
# Warmup Iteration   3: 261.814 ±(99.9%) 2.786 ms/op
# Warmup Iteration   4: 263.170 ±(99.9%) 2.352 ms/op
# Warmup Iteration   5: 262.399 ±(99.9%) 2.739 ms/op
Iteration   1: 266.608 ±(99.9%) 1.828 ms/op
                 executeQuery·p0.00:   260.047 ms/op
                 executeQuery·p0.50:   266.338 ms/op
                 executeQuery·p0.90:   268.960 ms/op
                 executeQuery·p0.95:   272.368 ms/op
                 executeQuery·p0.99:   279.446 ms/op
                 executeQuery·p0.999:  279.446 ms/op
                 executeQuery·p0.9999: 279.446 ms/op
                 executeQuery·p1.00:   279.446 ms/op

Iteration   2: 267.140 ±(99.9%) 1.482 ms/op
                 executeQuery·p0.00:   261.095 ms/op
                 executeQuery·p0.50:   267.518 ms/op
                 executeQuery·p0.90:   269.746 ms/op
                 executeQuery·p0.95:   270.664 ms/op
                 executeQuery·p0.99:   272.630 ms/op
                 executeQuery·p0.999:  272.630 ms/op
                 executeQuery·p0.9999: 272.630 ms/op
                 executeQuery·p1.00:   272.630 ms/op

Iteration   3: 266.307 ±(99.9%) 1.469 ms/op
                 executeQuery·p0.00:   260.571 ms/op
                 executeQuery·p0.50:   266.600 ms/op
                 executeQuery·p0.90:   269.222 ms/op
                 executeQuery·p0.95:   269.615 ms/op
                 executeQuery·p0.99:   270.008 ms/op
                 executeQuery·p0.999:  270.008 ms/op
                 executeQuery·p0.9999: 270.008 ms/op
                 executeQuery·p1.00:   270.008 ms/op

Iteration   4: 266.716 ±(99.9%) 2.252 ms/op
                 executeQuery·p0.00:   259.260 ms/op
                 executeQuery·p0.50:   266.732 ms/op
                 executeQuery·p0.90:   270.008 ms/op
                 executeQuery·p0.95:   275.513 ms/op
                 executeQuery·p0.99:   281.018 ms/op
                 executeQuery·p0.999:  281.018 ms/op
                 executeQuery·p0.9999: 281.018 ms/op
                 executeQuery·p1.00:   281.018 ms/op

Iteration   5: 263.655 ±(99.9%) 1.859 ms/op
                 executeQuery·p0.00:   257.163 ms/op
                 executeQuery·p0.50:   263.324 ms/op
                 executeQuery·p0.90:   267.256 ms/op
                 executeQuery·p0.95:   269.484 ms/op
                 executeQuery·p0.99:   272.630 ms/op
                 executeQuery·p0.999:  272.630 ms/op
                 executeQuery·p0.9999: 272.630 ms/op
                 executeQuery·p1.00:   272.630 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 342
  mean =    263.414 ±(99.9%) 1.060 ms/op

  Histogram, ms/op:
    [240.000, 245.000) = 0 
    [245.000, 250.000) = 5 
    [250.000, 255.000) = 19 
    [255.000, 260.000) = 76 
    [260.000, 265.000) = 79 
    [265.000, 270.000) = 127 
    [270.000, 275.000) = 28 
    [275.000, 280.000) = 5 
    [280.000, 285.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    248.513 ms/op
     p(50.0000) =    264.372 ms/op
     p(90.0000) =    270.008 ms/op
     p(95.0000) =    272.630 ms/op
     p(99.0000) =    280.342 ms/op
     p(99.9000) =    281.018 ms/op
     p(99.9900) =    281.018 ms/op
     p(99.9990) =    281.018 ms/op
     p(99.9999) =    281.018 ms/op
    p(100.0000) =    281.018 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 90.00% complete, ETA 01:21:29
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3569.353 ms/op
# Warmup Iteration   2: 2787.814 ±(99.9%) 5125.298 ms/op
# Warmup Iteration   3: 2677.364 ±(99.9%) 893.459 ms/op
# Warmup Iteration   4: 2603.265 ±(99.9%) 159.288 ms/op
# Warmup Iteration   5: 2631.227 ±(99.9%) 553.557 ms/op
Iteration   1: 2678.762 ±(99.9%) 1436.317 ms/op
                 executeQuery·p0.00:   2608.857 ms/op
                 executeQuery·p0.50:   2663.383 ms/op
                 executeQuery·p0.90:   2764.046 ms/op
                 executeQuery·p0.95:   2764.046 ms/op
                 executeQuery·p0.99:   2764.046 ms/op
                 executeQuery·p0.999:  2764.046 ms/op
                 executeQuery·p0.9999: 2764.046 ms/op
                 executeQuery·p1.00:   2764.046 ms/op

Iteration   2: 2607.459 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2608.857 ms/op
                 executeQuery·p0.90:   2613.051 ms/op
                 executeQuery·p0.95:   2613.051 ms/op
                 executeQuery·p0.99:   2613.051 ms/op
                 executeQuery·p0.999:  2613.051 ms/op
                 executeQuery·p0.9999: 2613.051 ms/op
                 executeQuery·p1.00:   2613.051 ms/op

Iteration   3: 2635.421 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   2617.246 ms/op
                 executeQuery·p0.50:   2638.217 ms/op
                 executeQuery·p0.90:   2650.800 ms/op
                 executeQuery·p0.95:   2650.800 ms/op
                 executeQuery·p0.99:   2650.800 ms/op
                 executeQuery·p0.999:  2650.800 ms/op
                 executeQuery·p0.9999: 2650.800 ms/op
                 executeQuery·p1.00:   2650.800 ms/op

Iteration   4: 2649.402 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2646.606 ms/op
                 executeQuery·p0.50:   2650.800 ms/op
                 executeQuery·p0.90:   2650.800 ms/op
                 executeQuery·p0.95:   2650.800 ms/op
                 executeQuery·p0.99:   2650.800 ms/op
                 executeQuery·p0.999:  2650.800 ms/op
                 executeQuery·p0.9999: 2650.800 ms/op
                 executeQuery·p1.00:   2650.800 ms/op

Iteration   5: 2648.004 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   2642.412 ms/op
                 executeQuery·p0.50:   2646.606 ms/op
                 executeQuery·p0.90:   2654.994 ms/op
                 executeQuery·p0.95:   2654.994 ms/op
                 executeQuery·p0.99:   2654.994 ms/op
                 executeQuery·p0.999:  2654.994 ms/op
                 executeQuery·p0.9999: 2654.994 ms/op
                 executeQuery·p1.00:   2654.994 ms/op


# Run progress: 90.56% complete, ETA 01:16:43
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3418.358 ms/op
# Warmup Iteration   2: 3063.939 ms/op
# Warmup Iteration   3: 2657.791 ±(99.9%) 1812.941 ms/op
# Warmup Iteration   4: 2624.236 ±(99.9%) 353.429 ms/op
# Warmup Iteration   5: 2618.644 ±(99.9%) 44.179 ms/op
Iteration   1: 2622.838 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2621.440 ms/op
                 executeQuery·p0.50:   2621.440 ms/op
                 executeQuery·p0.90:   2625.634 ms/op
                 executeQuery·p0.95:   2625.634 ms/op
                 executeQuery·p0.99:   2625.634 ms/op
                 executeQuery·p0.999:  2625.634 ms/op
                 executeQuery·p0.9999: 2625.634 ms/op
                 executeQuery·p1.00:   2625.634 ms/op

Iteration   2: 2597.672 ±(99.9%) 176.715 ms/op
                 executeQuery·p0.00:   2592.080 ms/op
                 executeQuery·p0.50:   2592.080 ms/op
                 executeQuery·p0.90:   2608.857 ms/op
                 executeQuery·p0.95:   2608.857 ms/op
                 executeQuery·p0.99:   2608.857 ms/op
                 executeQuery·p0.999:  2608.857 ms/op
                 executeQuery·p0.9999: 2608.857 ms/op
                 executeQuery·p1.00:   2608.857 ms/op

Iteration   3: 2593.478 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2596.274 ms/op
                 executeQuery·p0.90:   2596.274 ms/op
                 executeQuery·p0.95:   2596.274 ms/op
                 executeQuery·p0.99:   2596.274 ms/op
                 executeQuery·p0.999:  2596.274 ms/op
                 executeQuery·p0.9999: 2596.274 ms/op
                 executeQuery·p1.00:   2596.274 ms/op

Iteration   4: 2684.355 ±(99.9%) 1459.903 ms/op
                 executeQuery·p0.00:   2592.080 ms/op
                 executeQuery·p0.50:   2726.298 ms/op
                 executeQuery·p0.90:   2734.686 ms/op
                 executeQuery·p0.95:   2734.686 ms/op
                 executeQuery·p0.99:   2734.686 ms/op
                 executeQuery·p0.999:  2734.686 ms/op
                 executeQuery·p0.9999: 2734.686 ms/op
                 executeQuery·p1.00:   2734.686 ms/op

Iteration   5: 2592.080 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2592.080 ms/op
                 executeQuery·p0.90:   2596.274 ms/op
                 executeQuery·p0.95:   2596.274 ms/op
                 executeQuery·p0.99:   2596.274 ms/op
                 executeQuery·p0.999:  2596.274 ms/op
                 executeQuery·p0.9999: 2596.274 ms/op
                 executeQuery·p1.00:   2596.274 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   2630.947 ±(99.9%) 29.756 ms/op

  Histogram, ms/op:
    [2500.000, 2525.000) = 0 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 0 
    [2575.000, 2600.000) = 9 
    [2600.000, 2625.000) = 8 
    [2625.000, 2650.000) = 5 
    [2650.000, 2675.000) = 5 
    [2675.000, 2700.000) = 0 
    [2700.000, 2725.000) = 0 
    [2725.000, 2750.000) = 2 
    [2750.000, 2775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2587.886 ms/op
     p(50.0000) =   2619.343 ms/op
     p(90.0000) =   2720.006 ms/op
     p(95.0000) =   2747.898 ms/op
     p(99.0000) =   2764.046 ms/op
     p(99.9000) =   2764.046 ms/op
     p(99.9900) =   2764.046 ms/op
     p(99.9990) =   2764.046 ms/op
     p(99.9999) =   2764.046 ms/op
    p(100.0000) =   2764.046 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 91.11% complete, ETA 01:11:59
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
278.607 ±(99.9%) 36.870 ms/op
# Warmup Iteration   2: 260.961 ±(99.9%) 3.474 ms/op
# Warmup Iteration   3: 258.452 ±(99.9%) 3.062 ms/op
# Warmup Iteration   4: 256.005 ±(99.9%) 2.825 ms/op
# Warmup Iteration   5: 257.665 ±(99.9%) 3.064 ms/op
Iteration   1: 257.058 ±(99.9%) 3.048 ms/op
                 executeQuery·p0.00:   251.396 ms/op
                 executeQuery·p0.50:   255.328 ms/op
                 executeQuery·p0.90:   267.125 ms/op
                 executeQuery·p0.95:   268.331 ms/op
                 executeQuery·p0.99:   271.057 ms/op
                 executeQuery·p0.999:  271.057 ms/op
                 executeQuery·p0.9999: 271.057 ms/op
                 executeQuery·p1.00:   271.057 ms/op

Iteration   2: 259.171 ±(99.9%) 3.084 ms/op
                 executeQuery·p0.00:   252.183 ms/op
                 executeQuery·p0.50:   258.212 ms/op
                 executeQuery·p0.90:   267.125 ms/op
                 executeQuery·p0.95:   268.645 ms/op
                 executeQuery·p0.99:   272.630 ms/op
                 executeQuery·p0.999:  272.630 ms/op
                 executeQuery·p0.9999: 272.630 ms/op
                 executeQuery·p1.00:   272.630 ms/op

Iteration   3: 253.632 ±(99.9%) 3.140 ms/op
                 executeQuery·p0.00:   248.250 ms/op
                 executeQuery·p0.50:   251.658 ms/op
                 executeQuery·p0.90:   263.874 ms/op
                 executeQuery·p0.95:   264.320 ms/op
                 executeQuery·p0.99:   264.765 ms/op
                 executeQuery·p0.999:  264.765 ms/op
                 executeQuery·p0.9999: 264.765 ms/op
                 executeQuery·p1.00:   264.765 ms/op

Iteration   4: 251.280 ±(99.9%) 2.196 ms/op
                 executeQuery·p0.00:   245.891 ms/op
                 executeQuery·p0.50:   250.479 ms/op
                 executeQuery·p0.90:   256.980 ms/op
                 executeQuery·p0.95:   260.859 ms/op
                 executeQuery·p0.99:   263.979 ms/op
                 executeQuery·p0.999:  263.979 ms/op
                 executeQuery·p0.9999: 263.979 ms/op
                 executeQuery·p1.00:   263.979 ms/op

Iteration   5: 252.153 ±(99.9%) 2.984 ms/op
                 executeQuery·p0.00:   246.678 ms/op
                 executeQuery·p0.50:   249.823 ms/op
                 executeQuery·p0.90:   261.960 ms/op
                 executeQuery·p0.95:   262.445 ms/op
                 executeQuery·p0.99:   262.668 ms/op
                 executeQuery·p0.999:  262.668 ms/op
                 executeQuery·p0.9999: 262.668 ms/op
                 executeQuery·p1.00:   262.668 ms/op


# Run progress: 91.67% complete, ETA 01:07:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
293.442 ±(99.9%) 38.966 ms/op
# Warmup Iteration   2: 264.858 ±(99.9%) 2.418 ms/op
# Warmup Iteration   3: 262.571 ±(99.9%) 2.769 ms/op
# Warmup Iteration   4: 261.725 ±(99.9%) 2.992 ms/op
# Warmup Iteration   5: 262.144 ±(99.9%) 2.677 ms/op
Iteration   1: 262.599 ±(99.9%) 1.750 ms/op
                 executeQuery·p0.00:   255.853 ms/op
                 executeQuery·p0.50:   262.275 ms/op
                 executeQuery·p0.90:   267.911 ms/op
                 executeQuery·p0.95:   268.698 ms/op
                 executeQuery·p0.99:   269.484 ms/op
                 executeQuery·p0.999:  269.484 ms/op
                 executeQuery·p0.9999: 269.484 ms/op
                 executeQuery·p1.00:   269.484 ms/op

Iteration   2: 264.750 ±(99.9%) 2.249 ms/op
                 executeQuery·p0.00:   257.950 ms/op
                 executeQuery·p0.50:   264.241 ms/op
                 executeQuery·p0.90:   269.746 ms/op
                 executeQuery·p0.95:   272.105 ms/op
                 executeQuery·p0.99:   275.251 ms/op
                 executeQuery·p0.999:  275.251 ms/op
                 executeQuery·p0.9999: 275.251 ms/op
                 executeQuery·p1.00:   275.251 ms/op

Iteration   3: 262.391 ±(99.9%) 2.625 ms/op
                 executeQuery·p0.00:   256.901 ms/op
                 executeQuery·p0.50:   261.620 ms/op
                 executeQuery·p0.90:   267.780 ms/op
                 executeQuery·p0.95:   272.368 ms/op
                 executeQuery·p0.99:   281.018 ms/op
                 executeQuery·p0.999:  281.018 ms/op
                 executeQuery·p0.9999: 281.018 ms/op
                 executeQuery·p1.00:   281.018 ms/op

Iteration   4: 263.578 ±(99.9%) 2.278 ms/op
                 executeQuery·p0.00:   257.688 ms/op
                 executeQuery·p0.50:   262.799 ms/op
                 executeQuery·p0.90:   267.649 ms/op
                 executeQuery·p0.95:   270.467 ms/op
                 executeQuery·p0.99:   277.348 ms/op
                 executeQuery·p0.999:  277.348 ms/op
                 executeQuery·p0.9999: 277.348 ms/op
                 executeQuery·p1.00:   277.348 ms/op

Iteration   5: 260.818 ±(99.9%) 1.457 ms/op
                 executeQuery·p0.00:   256.377 ms/op
                 executeQuery·p0.50:   260.964 ms/op
                 executeQuery·p0.90:   264.503 ms/op
                 executeQuery·p0.95:   265.355 ms/op
                 executeQuery·p0.99:   266.338 ms/op
                 executeQuery·p0.999:  266.338 ms/op
                 executeQuery·p0.9999: 266.338 ms/op
                 executeQuery·p1.00:   266.338 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 348
  mean =    258.629 ±(99.9%) 1.117 ms/op

  Histogram, ms/op:
    [240.000, 245.000) = 0 
    [245.000, 250.000) = 41 
    [250.000, 255.000) = 70 
    [255.000, 260.000) = 64 
    [260.000, 265.000) = 127 
    [265.000, 270.000) = 39 
    [270.000, 275.000) = 4 
    [275.000, 280.000) = 2 
    [280.000, 285.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    245.891 ms/op
     p(50.0000) =    259.785 ms/op
     p(90.0000) =    266.338 ms/op
     p(95.0000) =    267.793 ms/op
     p(99.0000) =    273.967 ms/op
     p(99.9000) =    281.018 ms/op
     p(99.9900) =    281.018 ms/op
     p(99.9990) =    281.018 ms/op
     p(99.9999) =    281.018 ms/op
    p(100.0000) =    281.018 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 92.22% complete, ETA 01:02:31
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3527.410 ms/op
# Warmup Iteration   2: 2810.184 ±(99.9%) 6040.213 ms/op
# Warmup Iteration   3: 2628.431 ±(99.9%) 584.429 ms/op
# Warmup Iteration   4: 2624.236 ±(99.9%) 116.886 ms/op
# Warmup Iteration   5: 2620.042 ±(99.9%) 88.357 ms/op
Iteration   1: 2639.615 ±(99.9%) 893.459 ms/op
                 executeQuery·p0.00:   2596.274 ms/op
                 executeQuery·p0.50:   2629.829 ms/op
                 executeQuery·p0.90:   2692.743 ms/op
                 executeQuery·p0.95:   2692.743 ms/op
                 executeQuery·p0.99:   2692.743 ms/op
                 executeQuery·p0.999:  2692.743 ms/op
                 executeQuery·p0.9999: 2692.743 ms/op
                 executeQuery·p1.00:   2692.743 ms/op

Iteration   2: 2594.876 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2592.080 ms/op
                 executeQuery·p0.50:   2596.274 ms/op
                 executeQuery·p0.90:   2596.274 ms/op
                 executeQuery·p0.95:   2596.274 ms/op
                 executeQuery·p0.99:   2596.274 ms/op
                 executeQuery·p0.999:  2596.274 ms/op
                 executeQuery·p0.9999: 2596.274 ms/op
                 executeQuery·p1.00:   2596.274 ms/op

Iteration   3: 2642.412 ±(99.9%) 1457.896 ms/op
                 executeQuery·p0.00:   2596.274 ms/op
                 executeQuery·p0.50:   2596.274 ms/op
                 executeQuery·p0.90:   2734.686 ms/op
                 executeQuery·p0.95:   2734.686 ms/op
                 executeQuery·p0.99:   2734.686 ms/op
                 executeQuery·p0.999:  2734.686 ms/op
                 executeQuery·p0.9999: 2734.686 ms/op
                 executeQuery·p1.00:   2734.686 ms/op

Iteration   4: 2660.587 ±(99.9%) 1899.683 ms/op
                 executeQuery·p0.00:   2600.468 ms/op
                 executeQuery·p0.50:   2600.468 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op

Iteration   5: 2590.682 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2587.886 ms/op
                 executeQuery·p0.50:   2592.080 ms/op
                 executeQuery·p0.90:   2592.080 ms/op
                 executeQuery·p0.95:   2592.080 ms/op
                 executeQuery·p0.99:   2592.080 ms/op
                 executeQuery·p0.999:  2592.080 ms/op
                 executeQuery·p0.9999: 2592.080 ms/op
                 executeQuery·p1.00:   2592.080 ms/op


# Run progress: 92.78% complete, ETA 00:57:52
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3701.473 ms/op
# Warmup Iteration   2: 2870.302 ±(99.9%) 4947.420 ms/op
# Warmup Iteration   3: 2681.558 ±(99.9%) 448.365 ms/op
# Warmup Iteration   4: 2671.772 ±(99.9%) 202.452 ms/op
# Warmup Iteration   5: 2685.753 ±(99.9%) 509.493 ms/op
Iteration   1: 2664.781 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   2659.189 ms/op
                 executeQuery·p0.50:   2667.577 ms/op
                 executeQuery·p0.90:   2667.577 ms/op
                 executeQuery·p0.95:   2667.577 ms/op
                 executeQuery·p0.99:   2667.577 ms/op
                 executeQuery·p0.999:  2667.577 ms/op
                 executeQuery·p0.9999: 2667.577 ms/op
                 executeQuery·p1.00:   2667.577 ms/op

Iteration   2: 2699.734 ±(99.9%) 1148.646 ms/op
                 executeQuery·p0.00:   2663.383 ms/op
                 executeQuery·p0.50:   2663.383 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op

Iteration   3: 2649.402 ±(99.9%) 377.463 ms/op
                 executeQuery·p0.00:   2625.634 ms/op
                 executeQuery·p0.50:   2659.189 ms/op
                 executeQuery·p0.90:   2663.383 ms/op
                 executeQuery·p0.95:   2663.383 ms/op
                 executeQuery·p0.99:   2663.383 ms/op
                 executeQuery·p0.999:  2663.383 ms/op
                 executeQuery·p0.9999: 2663.383 ms/op
                 executeQuery·p1.00:   2663.383 ms/op

Iteration   4: 2664.781 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   2659.189 ms/op
                 executeQuery·p0.50:   2667.577 ms/op
                 executeQuery·p0.90:   2667.577 ms/op
                 executeQuery·p0.95:   2667.577 ms/op
                 executeQuery·p0.99:   2667.577 ms/op
                 executeQuery·p0.999:  2667.577 ms/op
                 executeQuery·p0.9999: 2667.577 ms/op
                 executeQuery·p1.00:   2667.577 ms/op

Iteration   5: 2668.975 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2667.577 ms/op
                 executeQuery·p0.50:   2667.577 ms/op
                 executeQuery·p0.90:   2671.772 ms/op
                 executeQuery·p0.95:   2671.772 ms/op
                 executeQuery·p0.99:   2671.772 ms/op
                 executeQuery·p0.999:  2671.772 ms/op
                 executeQuery·p0.9999: 2671.772 ms/op
                 executeQuery·p1.00:   2671.772 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 30
  mean =   2647.584 ±(99.9%) 34.718 ms/op

  Histogram, ms/op:
    [2500.000, 2525.000) = 0 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 0 
    [2575.000, 2600.000) = 9 
    [2600.000, 2625.000) = 2 
    [2625.000, 2650.000) = 2 
    [2650.000, 2675.000) = 13 
    [2675.000, 2700.000) = 1 
    [2700.000, 2725.000) = 0 
    [2725.000, 2750.000) = 1 
    [2750.000, 2775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2587.886 ms/op
     p(50.0000) =   2659.189 ms/op
     p(90.0000) =   2730.492 ms/op
     p(95.0000) =   2776.210 ms/op
     p(99.0000) =   2780.824 ms/op
     p(99.9000) =   2780.824 ms/op
     p(99.9900) =   2780.824 ms/op
     p(99.9990) =   2780.824 ms/op
     p(99.9999) =   2780.824 ms/op
    p(100.0000) =   2780.824 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 93.33% complete, ETA 00:53:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
209.584 ±(99.9%) 9.000 ms/op
# Warmup Iteration   2: 201.185 ±(99.9%) 1.571 ms/op
# Warmup Iteration   3: 200.084 ±(99.9%) 1.590 ms/op
# Warmup Iteration   4: 199.147 ±(99.9%) 1.611 ms/op
# Warmup Iteration   5: 200.194 ±(99.9%) 1.579 ms/op
Iteration   1: 201.935 ±(99.9%) 1.233 ms/op
                 executeQuery·p0.00:   198.705 ms/op
                 executeQuery·p0.50:   201.720 ms/op
                 executeQuery·p0.90:   204.446 ms/op
                 executeQuery·p0.95:   208.090 ms/op
                 executeQuery·p0.99:   211.288 ms/op
                 executeQuery·p0.999:  211.288 ms/op
                 executeQuery·p0.9999: 211.288 ms/op
                 executeQuery·p1.00:   211.288 ms/op

Iteration   2: 200.362 ±(99.9%) 1.476 ms/op
                 executeQuery·p0.00:   195.035 ms/op
                 executeQuery·p0.50:   199.098 ms/op
                 executeQuery·p0.90:   203.686 ms/op
                 executeQuery·p0.95:   204.734 ms/op
                 executeQuery·p0.99:   206.045 ms/op
                 executeQuery·p0.999:  206.045 ms/op
                 executeQuery·p0.9999: 206.045 ms/op
                 executeQuery·p1.00:   206.045 ms/op

Iteration   3: 201.038 ±(99.9%) 1.625 ms/op
                 executeQuery·p0.00:   195.035 ms/op
                 executeQuery·p0.50:   201.720 ms/op
                 executeQuery·p0.90:   205.180 ms/op
                 executeQuery·p0.95:   205.993 ms/op
                 executeQuery·p0.99:   208.667 ms/op
                 executeQuery·p0.999:  208.667 ms/op
                 executeQuery·p0.9999: 208.667 ms/op
                 executeQuery·p1.00:   208.667 ms/op

Iteration   4: 200.624 ±(99.9%) 1.453 ms/op
                 executeQuery·p0.00:   194.511 ms/op
                 executeQuery·p0.50:   201.458 ms/op
                 executeQuery·p0.90:   204.184 ms/op
                 executeQuery·p0.95:   204.852 ms/op
                 executeQuery·p0.99:   205.259 ms/op
                 executeQuery·p0.999:  205.259 ms/op
                 executeQuery·p0.9999: 205.259 ms/op
                 executeQuery·p1.00:   205.259 ms/op

Iteration   5: 203.183 ±(99.9%) 1.684 ms/op
                 executeQuery·p0.00:   195.559 ms/op
                 executeQuery·p0.50:   203.686 ms/op
                 executeQuery·p0.90:   207.094 ms/op
                 executeQuery·p0.95:   208.208 ms/op
                 executeQuery·p0.99:   210.502 ms/op
                 executeQuery·p0.999:  210.502 ms/op
                 executeQuery·p0.9999: 210.502 ms/op
                 executeQuery·p1.00:   210.502 ms/op


# Run progress: 93.89% complete, ETA 00:48:39
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
207.875 ±(99.9%) 8.578 ms/op
# Warmup Iteration   2: 202.569 ±(99.9%) 1.630 ms/op
# Warmup Iteration   3: 196.721 ±(99.9%) 1.234 ms/op
# Warmup Iteration   4: 197.405 ±(99.9%) 1.109 ms/op
# Warmup Iteration   5: 200.776 ±(99.9%) 1.151 ms/op
Iteration   1: 201.054 ±(99.9%) 1.391 ms/op
                 executeQuery·p0.00:   195.822 ms/op
                 executeQuery·p0.50:   201.851 ms/op
                 executeQuery·p0.90:   203.660 ms/op
                 executeQuery·p0.95:   205.337 ms/op
                 executeQuery·p0.99:   208.929 ms/op
                 executeQuery·p0.999:  208.929 ms/op
                 executeQuery·p0.9999: 208.929 ms/op
                 executeQuery·p1.00:   208.929 ms/op

Iteration   2: 200.325 ±(99.9%) 1.509 ms/op
                 executeQuery·p0.00:   193.987 ms/op
                 executeQuery·p0.50:   200.409 ms/op
                 executeQuery·p0.90:   203.948 ms/op
                 executeQuery·p0.95:   204.800 ms/op
                 executeQuery·p0.99:   207.094 ms/op
                 executeQuery·p0.999:  207.094 ms/op
                 executeQuery·p0.9999: 207.094 ms/op
                 executeQuery·p1.00:   207.094 ms/op

Iteration   3: 200.587 ±(99.9%) 1.079 ms/op
                 executeQuery·p0.00:   195.297 ms/op
                 executeQuery·p0.50:   201.064 ms/op
                 executeQuery·p0.90:   202.899 ms/op
                 executeQuery·p0.95:   203.162 ms/op
                 executeQuery·p0.99:   203.686 ms/op
                 executeQuery·p0.999:  203.686 ms/op
                 executeQuery·p0.9999: 203.686 ms/op
                 executeQuery·p1.00:   203.686 ms/op

Iteration   4: 201.227 ±(99.9%) 2.028 ms/op
                 executeQuery·p0.00:   194.249 ms/op
                 executeQuery·p0.50:   202.113 ms/op
                 executeQuery·p0.90:   204.682 ms/op
                 executeQuery·p0.95:   206.950 ms/op
                 executeQuery·p0.99:   218.890 ms/op
                 executeQuery·p0.999:  218.890 ms/op
                 executeQuery·p0.9999: 218.890 ms/op
                 executeQuery·p1.00:   218.890 ms/op

Iteration   5: 201.211 ±(99.9%) 1.243 ms/op
                 executeQuery·p0.00:   197.132 ms/op
                 executeQuery·p0.50:   201.064 ms/op
                 executeQuery·p0.90:   204.970 ms/op
                 executeQuery·p0.95:   206.163 ms/op
                 executeQuery·p0.99:   206.832 ms/op
                 executeQuery·p0.999:  206.832 ms/op
                 executeQuery·p0.9999: 206.832 ms/op
                 executeQuery·p1.00:   206.832 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 500
  mean =    201.155 ±(99.9%) 0.459 ms/op

  Histogram, ms/op:
    [190.000, 192.500) = 0 
    [192.500, 195.000) = 5 
    [195.000, 197.500) = 64 
    [197.500, 200.000) = 113 
    [200.000, 202.500) = 145 
    [202.500, 205.000) = 133 
    [205.000, 207.500) = 31 
    [207.500, 210.000) = 6 
    [210.000, 212.500) = 2 
    [212.500, 215.000) = 0 
    [215.000, 217.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    193.987 ms/op
     p(50.0000) =    201.589 ms/op
     p(90.0000) =    204.472 ms/op
     p(95.0000) =    206.307 ms/op
     p(99.0000) =    208.926 ms/op
     p(99.9000) =    218.890 ms/op
     p(99.9900) =    218.890 ms/op
     p(99.9990) =    218.890 ms/op
     p(99.9999) =    218.890 ms/op
    p(100.0000) =    218.890 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 94.44% complete, ETA 00:44:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1997.328 ±(99.9%) 392.658 ms/op
# Warmup Iteration   2: 1917.496 ±(99.9%) 54.621 ms/op
# Warmup Iteration   3: 1895.476 ±(99.9%) 60.480 ms/op
# Warmup Iteration   4: 1915.049 ±(99.9%) 45.311 ms/op
# Warmup Iteration   5: 1917.496 ±(99.9%) 55.625 ms/op
Iteration   1: 1929.380 ±(99.9%) 23.227 ms/op
                 executeQuery·p0.00:   1923.088 ms/op
                 executeQuery·p0.50:   1925.186 ms/op
                 executeQuery·p0.90:   1941.963 ms/op
                 executeQuery·p0.95:   1941.963 ms/op
                 executeQuery·p0.99:   1941.963 ms/op
                 executeQuery·p0.999:  1941.963 ms/op
                 executeQuery·p0.9999: 1941.963 ms/op
                 executeQuery·p1.00:   1941.963 ms/op

Iteration   2: 1914.700 ±(99.9%) 54.409 ms/op
                 executeQuery·p0.00:   1879.048 ms/op
                 executeQuery·p0.50:   1918.894 ms/op
                 executeQuery·p0.90:   1937.768 ms/op
                 executeQuery·p0.95:   1937.768 ms/op
                 executeQuery·p0.99:   1937.768 ms/op
                 executeQuery·p0.999:  1937.768 ms/op
                 executeQuery·p0.9999: 1937.768 ms/op
                 executeQuery·p1.00:   1937.768 ms/op

Iteration   3: 1907.360 ±(99.9%) 50.417 ms/op
                 executeQuery·p0.00:   1887.437 ms/op
                 executeQuery·p0.50:   1904.214 ms/op
                 executeQuery·p0.90:   1935.671 ms/op
                 executeQuery·p0.95:   1935.671 ms/op
                 executeQuery·p0.99:   1935.671 ms/op
                 executeQuery·p0.999:  1935.671 ms/op
                 executeQuery·p0.9999: 1935.671 ms/op
                 executeQuery·p1.00:   1935.671 ms/op

Iteration   4: 1929.380 ±(99.9%) 19.681 ms/op
                 executeQuery·p0.00:   1920.991 ms/op
                 executeQuery·p0.50:   1929.380 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op

Iteration   5: 1958.041 ±(99.9%) 15.184 ms/op
                 executeQuery·p0.00:   1950.351 ms/op
                 executeQuery·p0.50:   1959.789 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op


# Run progress: 95.00% complete, ETA 00:39:32
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1960.837 ±(99.9%) 253.789 ms/op
# Warmup Iteration   2: 1925.885 ±(99.9%) 67.838 ms/op
# Warmup Iteration   3: 1896.524 ±(99.9%) 73.231 ms/op
# Warmup Iteration   4: 1928.331 ±(99.9%) 66.299 ms/op
# Warmup Iteration   5: 1902.117 ±(99.9%) 59.973 ms/op
Iteration   1: 1889.883 ±(99.9%) 33.766 ms/op
                 executeQuery·p0.00:   1881.145 ms/op
                 executeQuery·p0.50:   1883.242 ms/op
                 executeQuery·p0.90:   1906.311 ms/op
                 executeQuery·p0.95:   1906.311 ms/op
                 executeQuery·p0.99:   1906.311 ms/op
                 executeQuery·p0.999:  1906.311 ms/op
                 executeQuery·p0.9999: 1906.311 ms/op
                 executeQuery·p1.00:   1906.311 ms/op

Iteration   2: 1900.719 ±(99.9%) 92.959 ms/op
                 executeQuery·p0.00:   1876.951 ms/op
                 executeQuery·p0.50:   1891.631 ms/op
                 executeQuery·p0.90:   1962.934 ms/op
                 executeQuery·p0.95:   1962.934 ms/op
                 executeQuery·p0.99:   1962.934 ms/op
                 executeQuery·p0.999:  1962.934 ms/op
                 executeQuery·p0.9999: 1962.934 ms/op
                 executeQuery·p1.00:   1962.934 ms/op

Iteration   3: 1909.457 ±(99.9%) 122.612 ms/op
                 executeQuery·p0.00:   1868.562 ms/op
                 executeQuery·p0.50:   1892.680 ms/op
                 executeQuery·p0.90:   1981.809 ms/op
                 executeQuery·p0.95:   1981.809 ms/op
                 executeQuery·p0.99:   1981.809 ms/op
                 executeQuery·p0.999:  1981.809 ms/op
                 executeQuery·p0.9999: 1981.809 ms/op
                 executeQuery·p1.00:   1981.809 ms/op

Iteration   4: 1913.651 ±(99.9%) 83.396 ms/op
                 executeQuery·p0.00:   1876.951 ms/op
                 executeQuery·p0.50:   1922.040 ms/op
                 executeQuery·p0.90:   1941.963 ms/op
                 executeQuery·p0.95:   1941.963 ms/op
                 executeQuery·p0.99:   1941.963 ms/op
                 executeQuery·p0.999:  1941.963 ms/op
                 executeQuery·p0.9999: 1941.963 ms/op
                 executeQuery·p1.00:   1941.963 ms/op

Iteration   5: 1917.846 ±(99.9%) 121.478 ms/op
                 executeQuery·p0.00:   1872.757 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1971.323 ms/op
                 executeQuery·p0.95:   1971.323 ms/op
                 executeQuery·p0.99:   1971.323 ms/op
                 executeQuery·p0.999:  1971.323 ms/op
                 executeQuery·p0.9999: 1971.323 ms/op
                 executeQuery·p1.00:   1971.323 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 60
  mean =   1917.042 ±(99.9%) 13.371 ms/op

  Histogram, ms/op:
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 0 
    [1837.500, 1850.000) = 0 
    [1850.000, 1862.500) = 0 
    [1862.500, 1875.000) = 2 
    [1875.000, 1887.500) = 14 
    [1887.500, 1900.000) = 2 
    [1900.000, 1912.500) = 9 
    [1912.500, 1925.000) = 9 
    [1925.000, 1937.500) = 6 
    [1937.500, 1950.000) = 8 
    [1950.000, 1962.500) = 4 
    [1962.500, 1975.000) = 5 
    [1975.000, 1987.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1868.562 ms/op
     p(50.0000) =   1918.894 ms/op
     p(90.0000) =   1962.725 ms/op
     p(95.0000) =   1968.911 ms/op
     p(99.0000) =   1981.809 ms/op
     p(99.9000) =   1981.809 ms/op
     p(99.9900) =   1981.809 ms/op
     p(99.9990) =   1981.809 ms/op
     p(99.9999) =   1981.809 ms/op
    p(100.0000) =   1981.809 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 95.56% complete, ETA 00:35:01
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
209.869 ±(99.9%) 10.641 ms/op
# Warmup Iteration   2: 197.477 ±(99.9%) 1.898 ms/op
# Warmup Iteration   3: 198.307 ±(99.9%) 1.705 ms/op
# Warmup Iteration   4: 198.464 ±(99.9%) 1.603 ms/op
# Warmup Iteration   5: 198.349 ±(99.9%) 1.783 ms/op
Iteration   1: 197.400 ±(99.9%) 1.974 ms/op
                 executeQuery·p0.00:   189.268 ms/op
                 executeQuery·p0.50:   196.215 ms/op
                 executeQuery·p0.90:   202.899 ms/op
                 executeQuery·p0.95:   203.017 ms/op
                 executeQuery·p0.99:   204.734 ms/op
                 executeQuery·p0.999:  204.734 ms/op
                 executeQuery·p0.9999: 204.734 ms/op
                 executeQuery·p1.00:   204.734 ms/op

Iteration   2: 195.900 ±(99.9%) 1.099 ms/op
                 executeQuery·p0.00:   192.938 ms/op
                 executeQuery·p0.50:   196.346 ms/op
                 executeQuery·p0.90:   199.177 ms/op
                 executeQuery·p0.95:   200.724 ms/op
                 executeQuery·p0.99:   202.637 ms/op
                 executeQuery·p0.999:  202.637 ms/op
                 executeQuery·p0.9999: 202.637 ms/op
                 executeQuery·p1.00:   202.637 ms/op

Iteration   3: 196.779 ±(99.9%) 0.842 ms/op
                 executeQuery·p0.00:   193.724 ms/op
                 executeQuery·p0.50:   196.346 ms/op
                 executeQuery·p0.90:   199.492 ms/op
                 executeQuery·p0.95:   200.802 ms/op
                 executeQuery·p0.99:   201.851 ms/op
                 executeQuery·p0.999:  201.851 ms/op
                 executeQuery·p0.9999: 201.851 ms/op
                 executeQuery·p1.00:   201.851 ms/op

Iteration   4: 196.383 ±(99.9%) 0.429 ms/op
                 executeQuery·p0.00:   195.559 ms/op
                 executeQuery·p0.50:   196.084 ms/op
                 executeQuery·p0.90:   197.919 ms/op
                 executeQuery·p0.95:   198.299 ms/op
                 executeQuery·p0.99:   198.705 ms/op
                 executeQuery·p0.999:  198.705 ms/op
                 executeQuery·p0.9999: 198.705 ms/op
                 executeQuery·p1.00:   198.705 ms/op

Iteration   5: 201.338 ±(99.9%) 1.484 ms/op
                 executeQuery·p0.00:   195.297 ms/op
                 executeQuery·p0.50:   203.031 ms/op
                 executeQuery·p0.90:   203.162 ms/op
                 executeQuery·p0.95:   203.306 ms/op
                 executeQuery·p0.99:   205.521 ms/op
                 executeQuery·p0.999:  205.521 ms/op
                 executeQuery·p0.9999: 205.521 ms/op
                 executeQuery·p1.00:   205.521 ms/op


# Run progress: 96.11% complete, ETA 00:30:32
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
209.487 ±(99.9%) 10.173 ms/op
# Warmup Iteration   2: 198.078 ±(99.9%) 0.964 ms/op
# Warmup Iteration   3: 199.743 ±(99.9%) 0.783 ms/op
# Warmup Iteration   4: 200.876 ±(99.9%) 0.799 ms/op
# Warmup Iteration   5: 201.033 ±(99.9%) 0.604 ms/op
Iteration   1: 200.173 ±(99.9%) 1.056 ms/op
                 executeQuery·p0.00:   195.559 ms/op
                 executeQuery·p0.50:   200.671 ms/op
                 executeQuery·p0.90:   202.113 ms/op
                 executeQuery·p0.95:   203.686 ms/op
                 executeQuery·p0.99:   206.832 ms/op
                 executeQuery·p0.999:  206.832 ms/op
                 executeQuery·p0.9999: 206.832 ms/op
                 executeQuery·p1.00:   206.832 ms/op

Iteration   2: 202.310 ±(99.9%) 0.550 ms/op
                 executeQuery·p0.00:   198.967 ms/op
                 executeQuery·p0.50:   202.506 ms/op
                 executeQuery·p0.90:   202.926 ms/op
                 executeQuery·p0.95:   203.974 ms/op
                 executeQuery·p0.99:   204.472 ms/op
                 executeQuery·p0.999:  204.472 ms/op
                 executeQuery·p0.9999: 204.472 ms/op
                 executeQuery·p1.00:   204.472 ms/op

Iteration   3: 201.490 ±(99.9%) 1.267 ms/op
                 executeQuery·p0.00:   195.822 ms/op
                 executeQuery·p0.50:   202.637 ms/op
                 executeQuery·p0.90:   202.664 ms/op
                 executeQuery·p0.95:   204.381 ms/op
                 executeQuery·p0.99:   204.997 ms/op
                 executeQuery·p0.999:  204.997 ms/op
                 executeQuery·p0.9999: 204.997 ms/op
                 executeQuery·p1.00:   204.997 ms/op

Iteration   4: 201.026 ±(99.9%) 1.185 ms/op
                 executeQuery·p0.00:   195.822 ms/op
                 executeQuery·p0.50:   201.589 ms/op
                 executeQuery·p0.90:   203.424 ms/op
                 executeQuery·p0.95:   203.830 ms/op
                 executeQuery·p0.99:   204.210 ms/op
                 executeQuery·p0.999:  204.210 ms/op
                 executeQuery·p0.9999: 204.210 ms/op
                 executeQuery·p1.00:   204.210 ms/op

Iteration   5: 202.293 ±(99.9%) 0.436 ms/op
                 executeQuery·p0.00:   201.589 ms/op
                 executeQuery·p0.50:   202.113 ms/op
                 executeQuery·p0.90:   203.974 ms/op
                 executeQuery·p0.95:   204.499 ms/op
                 executeQuery·p0.99:   204.997 ms/op
                 executeQuery·p0.999:  204.997 ms/op
                 executeQuery·p0.9999: 204.997 ms/op
                 executeQuery·p1.00:   204.997 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 489
  mean =    199.470 ±(99.9%) 0.499 ms/op

  Histogram, ms/op:
    [180.000, 182.500) = 0 
    [182.500, 185.000) = 0 
    [185.000, 187.500) = 0 
    [187.500, 190.000) = 1 
    [190.000, 192.500) = 2 
    [192.500, 195.000) = 34 
    [195.000, 197.500) = 143 
    [197.500, 200.000) = 55 
    [200.000, 202.500) = 142 
    [202.500, 205.000) = 110 
    [205.000, 207.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    189.268 ms/op
     p(50.0000) =    200.802 ms/op
     p(90.0000) =    203.162 ms/op
     p(95.0000) =    203.424 ms/op
     p(99.0000) =    204.761 ms/op
     p(99.9000) =    206.832 ms/op
     p(99.9900) =    206.832 ms/op
     p(99.9990) =    206.832 ms/op
     p(99.9999) =    206.832 ms/op
    p(100.0000) =    206.832 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 96.67% complete, ETA 00:26:05
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2035.915 ±(99.9%) 527.360 ms/op
# Warmup Iteration   2: 1922.739 ±(99.9%) 65.106 ms/op
# Warmup Iteration   3: 1902.117 ±(99.9%) 48.208 ms/op
# Warmup Iteration   4: 1887.437 ±(99.9%) 58.690 ms/op
# Warmup Iteration   5: 1903.165 ±(99.9%) 73.145 ms/op
Iteration   1: 1906.661 ±(99.9%) 91.892 ms/op
                 executeQuery·p0.00:   1864.368 ms/op
                 executeQuery·p0.50:   1927.283 ms/op
                 executeQuery·p0.90:   1929.380 ms/op
                 executeQuery·p0.95:   1929.380 ms/op
                 executeQuery·p0.99:   1929.380 ms/op
                 executeQuery·p0.999:  1929.380 ms/op
                 executeQuery·p0.9999: 1929.380 ms/op
                 executeQuery·p1.00:   1929.380 ms/op

Iteration   2: 1899.670 ±(99.9%) 100.313 ms/op
                 executeQuery·p0.00:   1866.465 ms/op
                 executeQuery·p0.50:   1897.923 ms/op
                 executeQuery·p0.90:   1937.768 ms/op
                 executeQuery·p0.95:   1937.768 ms/op
                 executeQuery·p0.99:   1937.768 ms/op
                 executeQuery·p0.999:  1937.768 ms/op
                 executeQuery·p0.9999: 1937.768 ms/op
                 executeQuery·p1.00:   1937.768 ms/op

Iteration   3: 1907.709 ±(99.9%) 111.931 ms/op
                 executeQuery·p0.00:   1866.465 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1965.031 ms/op
                 executeQuery·p0.95:   1965.031 ms/op
                 executeQuery·p0.99:   1965.031 ms/op
                 executeQuery·p0.999:  1965.031 ms/op
                 executeQuery·p0.9999: 1965.031 ms/op
                 executeQuery·p1.00:   1965.031 ms/op

Iteration   4: 1894.078 ±(99.9%) 95.654 ms/op
                 executeQuery·p0.00:   1862.271 ms/op
                 executeQuery·p0.50:   1893.728 ms/op
                 executeQuery·p0.90:   1927.283 ms/op
                 executeQuery·p0.95:   1927.283 ms/op
                 executeQuery·p0.99:   1927.283 ms/op
                 executeQuery·p0.999:  1927.283 ms/op
                 executeQuery·p0.9999: 1927.283 ms/op
                 executeQuery·p1.00:   1927.283 ms/op

Iteration   5: 1916.797 ±(99.9%) 111.146 ms/op
                 executeQuery·p0.00:   1862.271 ms/op
                 executeQuery·p0.50:   1924.137 ms/op
                 executeQuery·p0.90:   1958.740 ms/op
                 executeQuery·p0.95:   1958.740 ms/op
                 executeQuery·p0.99:   1958.740 ms/op
                 executeQuery·p0.999:  1958.740 ms/op
                 executeQuery·p0.9999: 1958.740 ms/op
                 executeQuery·p1.00:   1958.740 ms/op


# Run progress: 97.22% complete, ETA 00:21:40
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1971.672 ±(99.9%) 275.594 ms/op
# Warmup Iteration   2: 1944.060 ±(99.9%) 227.246 ms/op
# Warmup Iteration   3: 1887.087 ±(99.9%) 22.445 ms/op
# Warmup Iteration   4: 1882.543 ±(99.9%) 65.662 ms/op
# Warmup Iteration   5: 1876.252 ±(99.9%) 42.353 ms/op
Iteration   1: 1888.835 ±(99.9%) 44.580 ms/op
                 executeQuery·p0.00:   1870.660 ms/op
                 executeQuery·p0.50:   1884.291 ms/op
                 executeQuery·p0.90:   1916.797 ms/op
                 executeQuery·p0.95:   1916.797 ms/op
                 executeQuery·p0.99:   1916.797 ms/op
                 executeQuery·p0.999:  1916.797 ms/op
                 executeQuery·p0.9999: 1916.797 ms/op
                 executeQuery·p1.00:   1916.797 ms/op

Iteration   2: 1874.155 ±(99.9%) 40.516 ms/op
                 executeQuery·p0.00:   1853.882 ms/op
                 executeQuery·p0.50:   1880.097 ms/op
                 executeQuery·p0.90:   1887.437 ms/op
                 executeQuery·p0.95:   1887.437 ms/op
                 executeQuery·p0.99:   1887.437 ms/op
                 executeQuery·p0.999:  1887.437 ms/op
                 executeQuery·p0.9999: 1887.437 ms/op
                 executeQuery·p1.00:   1887.437 ms/op

Iteration   3: 1874.504 ±(99.9%) 90.604 ms/op
                 executeQuery·p0.00:   1826.619 ms/op
                 executeQuery·p0.50:   1880.097 ms/op
                 executeQuery·p0.90:   1923.088 ms/op
                 executeQuery·p0.95:   1923.088 ms/op
                 executeQuery·p0.99:   1923.088 ms/op
                 executeQuery·p0.999:  1923.088 ms/op
                 executeQuery·p0.9999: 1923.088 ms/op
                 executeQuery·p1.00:   1923.088 ms/op

Iteration   4: 1871.359 ±(99.9%) 34.625 ms/op
                 executeQuery·p0.00:   1858.077 ms/op
                 executeQuery·p0.50:   1871.708 ms/op
                 executeQuery·p0.90:   1883.242 ms/op
                 executeQuery·p0.95:   1883.242 ms/op
                 executeQuery·p0.99:   1883.242 ms/op
                 executeQuery·p0.999:  1883.242 ms/op
                 executeQuery·p0.9999: 1883.242 ms/op
                 executeQuery·p1.00:   1883.242 ms/op

Iteration   5: 1898.971 ±(99.9%) 54.123 ms/op
                 executeQuery·p0.00:   1868.562 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1914.700 ms/op
                 executeQuery·p0.95:   1914.700 ms/op
                 executeQuery·p0.99:   1914.700 ms/op
                 executeQuery·p0.999:  1914.700 ms/op
                 executeQuery·p0.9999: 1914.700 ms/op
                 executeQuery·p1.00:   1914.700 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 60
  mean =   1893.274 ±(99.9%) 13.891 ms/op

  Histogram, ms/op:
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 1 
    [1837.500, 1850.000) = 0 
    [1850.000, 1862.500) = 9 
    [1862.500, 1875.000) = 10 
    [1875.000, 1887.500) = 15 
    [1887.500, 1900.000) = 2 
    [1900.000, 1912.500) = 2 
    [1912.500, 1925.000) = 6 
    [1925.000, 1937.500) = 11 
    [1937.500, 1950.000) = 1 
    [1950.000, 1962.500) = 2 
    [1962.500, 1975.000) = 1 
    [1975.000, 1987.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1826.619 ms/op
     p(50.0000) =   1883.242 ms/op
     p(90.0000) =   1931.267 ms/op
     p(95.0000) =   1953.707 ms/op
     p(99.0000) =   1965.031 ms/op
     p(99.9000) =   1965.031 ms/op
     p(99.9900) =   1965.031 ms/op
     p(99.9990) =   1965.031 ms/op
     p(99.9999) =   1965.031 ms/op
    p(100.0000) =   1965.031 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 97.78% complete, ETA 00:17:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
213.519 ±(99.9%) 11.317 ms/op
# Warmup Iteration   2: 200.357 ±(99.9%) 1.824 ms/op
# Warmup Iteration   3: 199.497 ±(99.9%) 1.646 ms/op
# Warmup Iteration   4: 198.039 ±(99.9%) 1.487 ms/op
# Warmup Iteration   5: 199.172 ±(99.9%) 1.759 ms/op
Iteration   1: 198.674 ±(99.9%) 1.652 ms/op
                 executeQuery·p0.00:   191.627 ms/op
                 executeQuery·p0.50:   197.919 ms/op
                 executeQuery·p0.90:   203.660 ms/op
                 executeQuery·p0.95:   204.066 ms/op
                 executeQuery·p0.99:   204.472 ms/op
                 executeQuery·p0.999:  204.472 ms/op
                 executeQuery·p0.9999: 204.472 ms/op
                 executeQuery·p1.00:   204.472 ms/op

Iteration   2: 198.604 ±(99.9%) 0.882 ms/op
                 executeQuery·p0.00:   196.608 ms/op
                 executeQuery·p0.50:   197.657 ms/op
                 executeQuery·p0.90:   201.327 ms/op
                 executeQuery·p0.95:   202.899 ms/op
                 executeQuery·p0.99:   203.948 ms/op
                 executeQuery·p0.999:  203.948 ms/op
                 executeQuery·p0.9999: 203.948 ms/op
                 executeQuery·p1.00:   203.948 ms/op

Iteration   3: 198.101 ±(99.9%) 0.529 ms/op
                 executeQuery·p0.00:   197.132 ms/op
                 executeQuery·p0.50:   197.657 ms/op
                 executeQuery·p0.90:   199.754 ms/op
                 executeQuery·p0.95:   200.933 ms/op
                 executeQuery·p0.99:   202.113 ms/op
                 executeQuery·p0.999:  202.113 ms/op
                 executeQuery·p0.9999: 202.113 ms/op
                 executeQuery·p1.00:   202.113 ms/op

Iteration   4: 199.497 ±(99.9%) 1.269 ms/op
                 executeQuery·p0.00:   197.394 ms/op
                 executeQuery·p0.50:   198.181 ms/op
                 executeQuery·p0.90:   204.210 ms/op
                 executeQuery·p0.95:   205.259 ms/op
                 executeQuery·p0.99:   206.832 ms/op
                 executeQuery·p0.999:  206.832 ms/op
                 executeQuery·p0.9999: 206.832 ms/op
                 executeQuery·p1.00:   206.832 ms/op

Iteration   5: 203.566 ±(99.9%) 0.784 ms/op
                 executeQuery·p0.00:   197.132 ms/op
                 executeQuery·p0.50:   203.948 ms/op
                 executeQuery·p0.90:   204.997 ms/op
                 executeQuery·p0.95:   205.429 ms/op
                 executeQuery·p0.99:   205.783 ms/op
                 executeQuery·p0.999:  205.783 ms/op
                 executeQuery·p0.9999: 205.783 ms/op
                 executeQuery·p1.00:   205.783 ms/op


# Run progress: 98.33% complete, ETA 00:12:54
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
211.641 ±(99.9%) 10.126 ms/op
# Warmup Iteration   2: 201.211 ±(99.9%) 0.980 ms/op
# Warmup Iteration   3: 200.399 ±(99.9%) 1.186 ms/op
# Warmup Iteration   4: 200.645 ±(99.9%) 0.913 ms/op
# Warmup Iteration   5: 201.519 ±(99.9%) 1.008 ms/op
Iteration   1: 200.100 ±(99.9%) 1.290 ms/op
                 executeQuery·p0.00:   194.773 ms/op
                 executeQuery·p0.50:   199.492 ms/op
                 executeQuery·p0.90:   203.660 ms/op
                 executeQuery·p0.95:   204.210 ms/op
                 executeQuery·p0.99:   204.472 ms/op
                 executeQuery·p0.999:  204.472 ms/op
                 executeQuery·p0.9999: 204.472 ms/op
                 executeQuery·p1.00:   204.472 ms/op

Iteration   2: 200.990 ±(99.9%) 1.434 ms/op
                 executeQuery·p0.00:   192.938 ms/op
                 executeQuery·p0.50:   200.278 ms/op
                 executeQuery·p0.90:   204.734 ms/op
                 executeQuery·p0.95:   206.045 ms/op
                 executeQuery·p0.99:   206.832 ms/op
                 executeQuery·p0.999:  206.832 ms/op
                 executeQuery·p0.9999: 206.832 ms/op
                 executeQuery·p1.00:   206.832 ms/op

Iteration   3: 199.379 ±(99.9%) 1.574 ms/op
                 executeQuery·p0.00:   192.676 ms/op
                 executeQuery·p0.50:   198.181 ms/op
                 executeQuery·p0.90:   204.210 ms/op
                 executeQuery·p0.95:   206.045 ms/op
                 executeQuery·p0.99:   208.142 ms/op
                 executeQuery·p0.999:  208.142 ms/op
                 executeQuery·p0.9999: 208.142 ms/op
                 executeQuery·p1.00:   208.142 ms/op

Iteration   4: 196.603 ±(99.9%) 1.232 ms/op
                 executeQuery·p0.00:   191.627 ms/op
                 executeQuery·p0.50:   197.001 ms/op
                 executeQuery·p0.90:   200.278 ms/op
                 executeQuery·p0.95:   200.278 ms/op
                 executeQuery·p0.99:   202.899 ms/op
                 executeQuery·p0.999:  202.899 ms/op
                 executeQuery·p0.9999: 202.899 ms/op
                 executeQuery·p1.00:   202.899 ms/op

Iteration   5: 199.481 ±(99.9%) 1.817 ms/op
                 executeQuery·p0.00:   191.889 ms/op
                 executeQuery·p0.50:   201.851 ms/op
                 executeQuery·p0.90:   202.113 ms/op
                 executeQuery·p0.95:   203.555 ms/op
                 executeQuery·p0.99:   205.259 ms/op
                 executeQuery·p0.999:  205.259 ms/op
                 executeQuery·p0.9999: 205.259 ms/op
                 executeQuery·p1.00:   205.259 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 492
  mean =    199.485 ±(99.9%) 0.467 ms/op

  Histogram, ms/op:
    [190.000, 191.250) = 0 
    [191.250, 192.500) = 7 
    [192.500, 193.750) = 6 
    [193.750, 195.000) = 25 
    [195.000, 196.250) = 15 
    [196.250, 197.500) = 56 
    [197.500, 198.750) = 138 
    [198.750, 200.000) = 47 
    [200.000, 201.250) = 43 
    [201.250, 202.500) = 55 
    [202.500, 203.750) = 38 
    [203.750, 205.000) = 49 
    [205.000, 206.250) = 9 
    [206.250, 207.500) = 3 
    [207.500, 208.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =    191.627 ms/op
     p(50.0000) =    198.705 ms/op
     p(90.0000) =    203.948 ms/op
     p(95.0000) =    204.472 ms/op
     p(99.0000) =    206.064 ms/op
     p(99.9000) =    208.142 ms/op
     p(99.9900) =    208.142 ms/op
     p(99.9990) =    208.142 ms/op
     p(99.9999) =    208.142 ms/op
    p(100.0000) =    208.142 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 98.89% complete, ETA 00:08:34
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2006.974 ±(99.9%) 550.579 ms/op
# Warmup Iteration   2: 1912.603 ±(99.9%) 49.761 ms/op
# Warmup Iteration   3: 1900.020 ±(99.9%) 66.012 ms/op
# Warmup Iteration   4: 1904.564 ±(99.9%) 24.223 ms/op
# Warmup Iteration   5: 1897.923 ±(99.9%) 29.286 ms/op
Iteration   1: 1898.622 ±(99.9%) 19.207 ms/op
                 executeQuery·p0.00:   1889.534 ms/op
                 executeQuery·p0.50:   1900.020 ms/op
                 executeQuery·p0.90:   1906.311 ms/op
                 executeQuery·p0.95:   1906.311 ms/op
                 executeQuery·p0.99:   1906.311 ms/op
                 executeQuery·p0.999:  1906.311 ms/op
                 executeQuery·p0.9999: 1906.311 ms/op
                 executeQuery·p1.00:   1906.311 ms/op

Iteration   2: 1918.894 ±(99.9%) 94.386 ms/op
                 executeQuery·p0.00:   1893.728 ms/op
                 executeQuery·p0.50:   1904.214 ms/op
                 executeQuery·p0.90:   1977.614 ms/op
                 executeQuery·p0.95:   1977.614 ms/op
                 executeQuery·p0.99:   1977.614 ms/op
                 executeQuery·p0.999:  1977.614 ms/op
                 executeQuery·p0.9999: 1977.614 ms/op
                 executeQuery·p1.00:   1977.614 ms/op

Iteration   3: 1923.438 ±(99.9%) 83.451 ms/op
                 executeQuery·p0.00:   1893.728 ms/op
                 executeQuery·p0.50:   1910.505 ms/op
                 executeQuery·p0.90:   1971.323 ms/op
                 executeQuery·p0.95:   1971.323 ms/op
                 executeQuery·p0.99:   1971.323 ms/op
                 executeQuery·p0.999:  1971.323 ms/op
                 executeQuery·p0.9999: 1971.323 ms/op
                 executeQuery·p1.00:   1971.323 ms/op

Iteration   4: 1936.720 ±(99.9%) 10.354 ms/op
                 executeQuery·p0.00:   1931.477 ms/op
                 executeQuery·p0.50:   1935.671 ms/op
                 executeQuery·p0.90:   1941.963 ms/op
                 executeQuery·p0.95:   1941.963 ms/op
                 executeQuery·p0.99:   1941.963 ms/op
                 executeQuery·p0.999:  1941.963 ms/op
                 executeQuery·p0.9999: 1941.963 ms/op
                 executeQuery·p1.00:   1941.963 ms/op

Iteration   5: 1951.050 ±(99.9%) 53.339 ms/op
                 executeQuery·p0.00:   1927.283 ms/op
                 executeQuery·p0.50:   1953.497 ms/op
                 executeQuery·p0.90:   1969.226 ms/op
                 executeQuery·p0.95:   1969.226 ms/op
                 executeQuery·p0.99:   1969.226 ms/op
                 executeQuery·p0.999:  1969.226 ms/op
                 executeQuery·p0.9999: 1969.226 ms/op
                 executeQuery·p1.00:   1969.226 ms/op


# Run progress: 99.44% complete, ETA 00:04:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2001.941 ±(99.9%) 531.033 ms/op
# Warmup Iteration   2: 1901.068 ±(99.9%) 85.767 ms/op
# Warmup Iteration   3: 1884.641 ±(99.9%) 24.295 ms/op
# Warmup Iteration   4: 1894.777 ±(99.9%) 80.698 ms/op
# Warmup Iteration   5: 1877.301 ±(99.9%) 48.411 ms/op
Iteration   1: 1878.349 ±(99.9%) 4.802 ms/op
                 executeQuery·p0.00:   1876.951 ms/op
                 executeQuery·p0.50:   1878.000 ms/op
                 executeQuery·p0.90:   1881.145 ms/op
                 executeQuery·p0.95:   1881.145 ms/op
                 executeQuery·p0.99:   1881.145 ms/op
                 executeQuery·p0.999:  1881.145 ms/op
                 executeQuery·p0.9999: 1881.145 ms/op
                 executeQuery·p1.00:   1881.145 ms/op

Iteration   2: 1886.039 ±(99.9%) 8.035 ms/op
                 executeQuery·p0.00:   1883.242 ms/op
                 executeQuery·p0.50:   1885.340 ms/op
                 executeQuery·p0.90:   1889.534 ms/op
                 executeQuery·p0.95:   1889.534 ms/op
                 executeQuery·p0.99:   1889.534 ms/op
                 executeQuery·p0.999:  1889.534 ms/op
                 executeQuery·p0.9999: 1889.534 ms/op
                 executeQuery·p1.00:   1889.534 ms/op

Iteration   3: 1927.632 ±(99.9%) 162.737 ms/op
                 executeQuery·p0.00:   1881.145 ms/op
                 executeQuery·p0.50:   1910.505 ms/op
                 executeQuery·p0.90:   2040.529 ms/op
                 executeQuery·p0.95:   2040.529 ms/op
                 executeQuery·p0.99:   2040.529 ms/op
                 executeQuery·p0.999:  2040.529 ms/op
                 executeQuery·p0.9999: 2040.529 ms/op
                 executeQuery·p1.00:   2040.529 ms/op

Iteration   4: 1901.418 ±(99.9%) 19.914 ms/op
                 executeQuery·p0.00:   1891.631 ms/op
                 executeQuery·p0.50:   1904.214 ms/op
                 executeQuery·p0.90:   1908.408 ms/op
                 executeQuery·p0.95:   1908.408 ms/op
                 executeQuery·p0.99:   1908.408 ms/op
                 executeQuery·p0.999:  1908.408 ms/op
                 executeQuery·p0.9999: 1908.408 ms/op
                 executeQuery·p1.00:   1908.408 ms/op

Iteration   5: 1917.146 ±(99.9%) 55.219 ms/op
                 executeQuery·p0.00:   1891.631 ms/op
                 executeQuery·p0.50:   1915.748 ms/op
                 executeQuery·p0.90:   1937.768 ms/op
                 executeQuery·p0.95:   1937.768 ms/op
                 executeQuery·p0.99:   1937.768 ms/op
                 executeQuery·p0.999:  1937.768 ms/op
                 executeQuery·p0.9999: 1937.768 ms/op
                 executeQuery·p1.00:   1937.768 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 60
  mean =   1913.931 ±(99.9%) 14.158 ms/op

  Histogram, ms/op:
    [1800.000, 1825.000) = 0 
    [1825.000, 1850.000) = 0 
    [1850.000, 1875.000) = 0 
    [1875.000, 1900.000) = 24 
    [1900.000, 1925.000) = 15 
    [1925.000, 1950.000) = 15 
    [1950.000, 1975.000) = 4 
    [1975.000, 2000.000) = 1 
    [2000.000, 2025.000) = 0 
    [2025.000, 2050.000) = 1 
    [2050.000, 2075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1876.951 ms/op
     p(50.0000) =   1906.311 ms/op
     p(90.0000) =   1963.354 ms/op
     p(95.0000) =   1971.218 ms/op
     p(99.0000) =   2040.529 ms/op
     p(99.9000) =   2040.529 ms/op
     p(99.9900) =   2040.529 ms/op
     p(99.9990) =   2040.529 ms/op
     p(99.9999) =   2040.529 ms/op
    p(100.0000) =   2040.529 ms/op


# Run complete. Total time: 12:47:33

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                     (tpchInstance)    Mode   Cnt       Score      Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   274     370.888 ±    1.080  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           359.137             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           370.672             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           376.701             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           383.779             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           389.546             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           392.167             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           392.167             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           392.167             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample   189     542.125 ±    6.737  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           533.725             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           538.968             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           541.065             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           546.308             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           765.565             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           851.444             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           851.444             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           851.444             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample   140     741.029 ±    2.521  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           719.323             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           741.343             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           753.716             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           755.971             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           760.406             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           761.266             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           761.266             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           761.266             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample    10    2086.666 ±   39.741  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2046.820             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2088.763             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2119.382             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2120.221             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2120.221             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2120.221             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2120.221             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2120.221             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample    10    5011.354 ±  186.027  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          4865.393             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5016.388             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.155             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5158.994             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    30    3691.407 ±   40.243  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3661.627             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3670.016             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3803.814             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3885.813             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3888.120             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3888.120             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3888.120             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3888.120             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    25    5028.467 ±   83.857  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          4915.724             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          4949.279             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5174.093             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5201.776             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5209.326             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5209.326             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5209.326             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5209.326             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    20    7479.283 ±  106.150  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7197.426             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7495.221             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7541.359             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7828.249             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7843.348             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7843.348             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7843.348             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7843.348             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample    10   23437.771 ±  881.990  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         22414.361             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23437.771             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24330.319             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24360.518             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24360.518             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24360.518             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24360.518             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24360.518             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample    10   49741.090 ± 1761.742  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         48117.055             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         49526.342             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51633.560             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51673.825             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51673.825             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51673.825             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51673.825             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51673.825             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    20    7536.745 ±  313.064  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7163.871             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7595.885             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7930.590             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8302.625             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8321.499             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8321.499             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8321.499             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8321.499             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample    10   13017.442 ±   98.926  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12952.011             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13010.731             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13133.205             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13136.560             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13136.560             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13136.560             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13136.560             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13136.560             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample    10   14856.225 ±  334.638  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14680.064             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14772.339             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15379.674             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15418.262             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample    10   46640.660 ± 4167.649  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         41473.278             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         46338.671             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51083.267             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51338.281             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51338.281             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51338.281             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51338.281             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51338.281             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample    10   97254.166 ± 2746.191  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         93415.539             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         97710.506             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99589.554             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99723.772             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99723.772             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99723.772             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99723.772             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99723.772             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   250     407.510 ±    3.966  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           386.400             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           407.896             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           426.246             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           430.283             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           447.721             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           460.849             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           460.849             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           460.849             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample   194     525.555 ±    1.424  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           519.045             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           525.337             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           527.958             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           537.919             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           558.943             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           559.940             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           559.940             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           559.940             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample   140     748.189 ±    4.544  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           701.497             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           746.586             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           766.509             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           767.558             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           770.892             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           771.752             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           771.752             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           771.752             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample    10    2506.516 ±  122.275  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2394.948             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2480.931             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2657.511             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2667.577             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2667.577             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2667.577             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2667.577             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2667.577             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample    10    5183.321 ±  221.323  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5033.165             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5133.828             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5423.235             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5427.429             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5427.429             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5427.429             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5427.429             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5427.429             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    25    5073.766 ± 1174.868  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3825.205             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3841.982             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          6972.611             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          7975.888             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          8237.613             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          8237.613             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          8237.613             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          8237.613             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    20    5180.385 ±  161.772  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5100.274             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5125.439             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5480.278             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5853.990             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5872.026             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5872.026             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5872.026             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5872.026             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    20    7301.444 ±  273.488  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          6819.938             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7344.226             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7725.908             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7749.816             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7751.074             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7751.074             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7751.074             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7751.074             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample    10   25622.164 ±  659.787  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24863.834             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25685.918             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26367.073             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26407.338             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26407.338             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26407.338             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26407.338             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26407.338             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample    10   51506.053 ± 1568.336  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         49996.104             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         51640.271             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53096.533             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53150.220             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53150.220             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53150.220             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53150.220             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         53150.220             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    20    8113.042 ±  301.770  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7767.851             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8086.618             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8623.489             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8640.266             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8640.266             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8640.266             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8640.266             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8640.266             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample    10   12280.922 ±  153.125  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12213.813             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12238.979             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12505.737             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12515.803             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12515.803             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12515.803             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12515.803             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12515.803             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample    10   15057.551 ±  388.604  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14713.618             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15015.608             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15470.271             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15485.370             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15485.370             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15485.370             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15485.370             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15485.370             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample    10   50385.335 ± 3989.804  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         43419.435             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51204.063             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         52539.530             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         52546.241             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         52546.241             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         52546.241             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         52546.241             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         52546.241             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample    10  100542.500 ± 3918.940  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         96770.982             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        100394.861             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        104542.188             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        104689.828             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        104689.828             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        104689.828             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        104689.828             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        104689.828             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample  1303      76.033 ±    0.179  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            71.303             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            75.760             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            78.643             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            79.430             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            81.002             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            87.818             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            87.818             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            87.818             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample  1309      75.938 ±    0.170  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            73.007             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            75.760             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            78.643             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            79.299             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            80.478             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            87.028             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            87.556             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            87.556             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample  1284      77.237 ±    0.180  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            74.318             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            76.546             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            80.085             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            80.478             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            82.051             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            90.197             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            90.309             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            90.309             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample   140     741.718 ±    4.908  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           714.080             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           746.586             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           763.363             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           766.509             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           768.606             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           768.606             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           768.606             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           768.606             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample   140     751.717 ±    3.354  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           719.323             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           756.023             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           763.363             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           765.460             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           767.558             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample   132     766.001 ±    3.916  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           724.566             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           769.655             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           778.043             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           779.092             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           782.951             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           784.335             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           784.335             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           784.335             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    74    1434.339 ±   13.427  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1386.217             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1431.306             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1475.346             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1483.211             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1495.269             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1495.269             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1495.269             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1495.269             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    66    1563.395 ±  297.774  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1419.772             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1483.735             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1522.532             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1522.532             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          7172.260             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          7172.260             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          7172.260             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          7172.260             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    70    1520.106 ±    8.094  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1451.229             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1526.727             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1533.018             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1537.003             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1549.795             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1549.795             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1549.795             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1549.795             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample  1301      76.117 ±    0.164  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            71.041             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            75.891             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            78.643             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            79.430             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            80.478             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            87.652             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            88.998             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            88.998             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample  1299      76.260 ±    0.201  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            72.352             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            76.022             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            79.036             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            79.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            80.478             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            97.426             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           101.319             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           101.319             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   845     117.910 ±    0.108  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           116.130             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           117.965             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           119.013             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           119.236             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           119.669             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           127.926             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           127.926             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           127.926             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample   135     759.868 ±    4.684  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           708.837             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           766.509             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           773.849             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           775.946             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           778.714             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           779.092             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           779.092             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           779.092             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample   140     749.702 ±    5.155  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           700.449             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           756.023             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           765.460             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           766.509             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           780.329             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           781.189             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           781.189             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           781.189             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    90    1172.098 ±    1.559  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1163.919             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1172.308             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1176.502             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1178.599             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1184.891             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1184.891             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1184.891             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1184.891             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    71    1474.268 ±   11.894  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1394.606             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1480.589             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1503.658             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1506.594             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1509.949             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1509.949             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1509.949             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1509.949             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    72    1466.958 ±   13.690  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1396.703             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1478.492             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1500.932             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1507.852             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1507.852             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1507.852             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1507.852             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    50    2338.576 ±   17.195  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2319.450             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2332.033             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2344.616             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2405.433             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2529.165             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2529.165             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2529.165             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2529.165             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30    4364.872 ±   72.476  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4236.247             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4362.076             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4555.853             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4620.445             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4638.900             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4638.900             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4638.900             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4638.900             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10   48318.382 ±  443.541  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         47982.838             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48318.382             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48841.831             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48855.253             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48855.253             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48855.253             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48855.253             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48855.253             ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30    4484.829 ±   53.200  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4362.076             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4454.351             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4612.057             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4634.286             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4638.900             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4638.900             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4638.900             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4638.900             ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10   50673.903 ±  590.538  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         49928.995             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50600.083             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51244.329             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51271.172             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51271.172             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51271.172             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51271.172             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         51271.172             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    60    1814.246 ±    4.544  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1803.551             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1811.939             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1816.134             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1818.231             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1866.465             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1866.465             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1866.465             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1866.465             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10   23290.131 ±   16.042  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23286.776             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23286.776             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23316.975             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23320.330             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23320.330             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23320.330             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23320.330             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23320.330             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    80    1299.107 ±   22.472  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1237.320             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1297.089             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1361.052             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1361.052             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1367.343             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1367.343             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1367.343             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1367.343             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10   17310.731 ±   65.273  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17213.424             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17314.087             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17377.840             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17381.196             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17381.196             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17381.196             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17381.196             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17381.196             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    60    1958.146 ±    4.492  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1950.351             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1956.643             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1960.837             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1962.934             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2015.363             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2015.363             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2015.363             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2015.363             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10   25722.828 ±  126.993  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25602.032             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25769.804             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25803.358             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25803.358             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25803.358             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25803.358             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25803.358             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25803.358             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample   110     895.017 ±    0.545  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           891.290             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           894.435             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           897.476             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           897.581             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           900.727             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           900.727             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           900.727             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample           900.727             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample    10   12633.244 ±  177.754  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12515.803             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12624.855             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12765.784             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12767.461             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12767.461             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12767.461             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12767.461             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12767.461             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   161     409.241 ±   11.077  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           351.273             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           413.663             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           475.424             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           477.050             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           501.093             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           501.744             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           501.744             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           501.744             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    10    4386.403 ±  169.463  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4211.081             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4383.048             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4575.147             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4580.180             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4580.180             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4580.180             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4580.180             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4580.180             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   173     352.706 ±    3.795  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           318.243             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           358.613             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           369.204             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           370.829             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           378.043             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           390.070             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           390.070             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           390.070             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    10    4030.307 ±  479.136  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3695.182             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3865.051             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4473.645             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4479.517             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4479.517             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4479.517             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4479.517             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4479.517             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   165     370.916 ±    4.056  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           339.739             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           377.487             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           387.449             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           390.123             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           400.829             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           410.518             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           410.518             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           410.518             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    10    4199.757 ±   92.958  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4055.892             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4225.761             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4252.185             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4253.024             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4253.024             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4253.024             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4253.024             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4253.024             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   410     245.220 ±    1.326  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           237.765             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           242.876             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           250.872             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           251.658             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           283.005             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           330.301             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           330.301             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           330.301             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    49    2468.220 ±   47.590  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2407.530             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2445.279             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2524.971             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2585.788             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3066.036             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3066.036             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3066.036             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3066.036             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10  112971.062 ±  777.411  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        112206.021             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        112944.218             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113789.790             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113816.633             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113816.633             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113816.633             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113816.633             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113816.633             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   281     359.676 ±    4.749  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           347.603             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           352.322             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           370.672             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           384.146             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           431.793             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           685.769             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           685.769             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           685.769             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    3458.343 ±   45.148  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3409.969             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3441.426             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3510.632             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3647.996             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3774.874             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3774.874             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3774.874             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3774.874             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10  112581.830 ±  556.125  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        112206.021             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        112474.456             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113132.123             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113145.545             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113145.545             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113145.545             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113145.545             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113145.545             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   220     464.214 ±    2.198  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           445.645             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           468.189             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           473.956             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           475.529             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           476.882             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           479.724             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           479.724             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           479.724             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    25    4988.873 ±  404.324  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4370.465             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5217.714             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5581.780             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5617.851             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5620.367             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5620.367             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5620.367             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          5620.367             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10  116232.552 ± 3232.567  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        113548.198             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        116165.444             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        118970.594             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        119051.125             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        119051.125             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        119051.125             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        119051.125             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        119051.125             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   224     452.219 ±    6.712  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           427.819             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           440.402             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           519.832             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           522.453             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           531.104             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           534.249             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           534.249             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           534.249             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    4189.550 ±   82.736  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4022.338             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4194.304             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4404.019             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4436.735             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4445.962             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4445.962             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4445.962             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4445.962             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    10  114729.314 ±  745.875  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        114353.504             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        114554.831             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        115883.586             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        115964.117             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        115964.117             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        115964.117             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        115964.117             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        115964.117             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   341     269.512 ±    0.774  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           259.523             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           268.960             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           275.251             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           276.300             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.710             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           287.310             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           287.310             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           287.310             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20    2568.592 ±   36.391  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2537.554             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2545.943             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2649.542             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2690.856             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2692.743             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2692.743             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2692.743             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2692.743             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   342     263.414 ±    1.060  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           248.513             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           264.372             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           270.008             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           272.630             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           280.342             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.018             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.018             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.018             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    2630.947 ±   29.756  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2587.886             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2619.343             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2720.006             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2747.898             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2764.046             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2764.046             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2764.046             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2764.046             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   348     258.629 ±    1.117  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           245.891             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           259.785             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           266.338             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           267.793             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           273.967             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.018             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.018             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.018             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    2647.584 ±   34.718  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2587.886             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2659.189             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2730.492             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2776.210             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2780.824             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2780.824             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2780.824             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2780.824             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   500     201.155 ±    0.459  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           193.987             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           201.589             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           204.472             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           206.307             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           208.926             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           218.890             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           218.890             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           218.890             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    60    1917.042 ±   13.371  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1868.562             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1918.894             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1962.725             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1968.911             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1981.809             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1981.809             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1981.809             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1981.809             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   489     199.470 ±    0.499  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           189.268             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           200.802             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           203.162             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           203.424             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           204.761             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           206.832             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           206.832             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           206.832             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    60    1893.274 ±   13.891  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1826.619             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1883.242             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1931.267             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1953.707             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1965.031             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1965.031             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1965.031             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1965.031             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   492     199.485 ±    0.467  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           191.627             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           198.705             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           203.948             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           204.472             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           206.064             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           208.142             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           208.142             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           208.142             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    60    1913.931 ±   14.158  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1876.951             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1906.311             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1963.354             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1971.218             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2040.529             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2040.529             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2040.529             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2040.529             ms/op

Benchmark result is saved to jmh-result.csv

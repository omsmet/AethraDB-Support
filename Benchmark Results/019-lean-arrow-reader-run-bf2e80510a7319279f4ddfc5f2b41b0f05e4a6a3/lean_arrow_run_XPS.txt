# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 02:40:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_441606736 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_441606736() {
        this(4);
    }
    public KeyValueMap_441606736(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_441606736 aggregation_state_map = new KeyValueMap_441606736();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

317.260 ±(99.9%) 18.614 ms/op
# Warmup Iteration   2: 307.979 ±(99.9%) 3.129 ms/op
# Warmup Iteration   3: 308.011 ±(99.9%) 3.860 ms/op
# Warmup Iteration   4: 311.586 ±(99.9%) 7.410 ms/op
# Warmup Iteration   5: 310.013 ±(99.9%) 6.021 ms/op
Iteration   1: 308.806 ±(99.9%) 5.048 ms/op
                 executeQuery·p0.00:   305.660 ms/op
                 executeQuery·p0.50:   306.184 ms/op
                 executeQuery·p0.90:   316.670 ms/op
                 executeQuery·p0.95:   338.166 ms/op
                 executeQuery·p0.99:   338.166 ms/op
                 executeQuery·p0.999:  338.166 ms/op
                 executeQuery·p0.9999: 338.166 ms/op
                 executeQuery·p1.00:   338.166 ms/op

Iteration   2: 308.186 ±(99.9%) 5.316 ms/op
                 executeQuery·p0.00:   305.136 ms/op
                 executeQuery·p0.50:   306.184 ms/op
                 executeQuery·p0.90:   309.644 ms/op
                 executeQuery·p0.95:   323.958 ms/op
                 executeQuery·p0.99:   354.419 ms/op
                 executeQuery·p0.999:  354.419 ms/op
                 executeQuery·p0.9999: 354.419 ms/op
                 executeQuery·p1.00:   354.419 ms/op

Iteration   3: 306.804 ±(99.9%) 1.444 ms/op
                 executeQuery·p0.00:   305.136 ms/op
                 executeQuery·p0.50:   306.184 ms/op
                 executeQuery·p0.90:   309.854 ms/op
                 executeQuery·p0.95:   314.153 ms/op
                 executeQuery·p0.99:   315.621 ms/op
                 executeQuery·p0.999:  315.621 ms/op
                 executeQuery·p0.9999: 315.621 ms/op
                 executeQuery·p1.00:   315.621 ms/op

Iteration   4: 309.092 ±(99.9%) 4.252 ms/op
                 executeQuery·p0.00:   303.038 ms/op
                 executeQuery·p0.50:   306.184 ms/op
                 executeQuery·p0.90:   316.460 ms/op
                 executeQuery·p0.95:   323.958 ms/op
                 executeQuery·p0.99:   339.739 ms/op
                 executeQuery·p0.999:  339.739 ms/op
                 executeQuery·p0.9999: 339.739 ms/op
                 executeQuery·p1.00:   339.739 ms/op

Iteration   5: 306.963 ±(99.9%) 1.732 ms/op
                 executeQuery·p0.00:   305.136 ms/op
                 executeQuery·p0.50:   306.184 ms/op
                 executeQuery·p0.90:   311.427 ms/op
                 executeQuery·p0.95:   316.146 ms/op
                 executeQuery·p0.99:   316.146 ms/op
                 executeQuery·p0.999:  316.146 ms/op
                 executeQuery·p0.9999: 316.146 ms/op
                 executeQuery·p1.00:   316.146 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 165
  mean =    307.970 ±(99.9%) 1.621 ms/op

  Histogram, ms/op:
    [300.000, 305.000) = 1 
    [305.000, 310.000) = 144 
    [310.000, 315.000) = 7 
    [315.000, 320.000) = 9 
    [320.000, 325.000) = 0 
    [325.000, 330.000) = 0 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 3 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 0 
    [350.000, 355.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    303.038 ms/op
     p(50.0000) =    306.184 ms/op
     p(90.0000) =    313.524 ms/op
     p(95.0000) =    316.513 ms/op
     p(99.0000) =    344.730 ms/op
     p(99.9000) =    354.419 ms/op
     p(99.9900) =    354.419 ms/op
     p(99.9990) =    354.419 ms/op
     p(99.9999) =    354.419 ms/op
    p(100.0000) =    354.419 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 1.04% complete, ETA 02:44:20
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1999335834 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1999335834() {
        this(4);
    }
    public KeyValueMap_1999335834(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1999335834 aggregation_state_map = new KeyValueMap_1999335834();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

440.014 ±(99.9%) 13.066 ms/op
# Warmup Iteration   2: 430.724 ±(99.9%) 3.601 ms/op
# Warmup Iteration   3: 429.763 ±(99.9%) 2.679 ms/op
# Warmup Iteration   4: 428.278 ±(99.9%) 3.053 ms/op
# Warmup Iteration   5: 430.222 ±(99.9%) 3.731 ms/op
Iteration   1: 428.234 ±(99.9%) 2.284 ms/op
                 executeQuery·p0.00:   425.198 ms/op
                 executeQuery·p0.50:   426.770 ms/op
                 executeQuery·p0.90:   433.062 ms/op
                 executeQuery·p0.95:   435.945 ms/op
                 executeQuery·p0.99:   436.732 ms/op
                 executeQuery·p0.999:  436.732 ms/op
                 executeQuery·p0.9999: 436.732 ms/op
                 executeQuery·p1.00:   436.732 ms/op

Iteration   2: 435.068 ±(99.9%) 2.435 ms/op
                 executeQuery·p0.00:   426.246 ms/op
                 executeQuery·p0.50:   435.683 ms/op
                 executeQuery·p0.90:   437.361 ms/op
                 executeQuery·p0.95:   439.458 ms/op
                 executeQuery·p0.99:   439.878 ms/op
                 executeQuery·p0.999:  439.878 ms/op
                 executeQuery·p0.9999: 439.878 ms/op
                 executeQuery·p1.00:   439.878 ms/op

Iteration   3: 431.271 ±(99.9%) 3.626 ms/op
                 executeQuery·p0.00:   421.003 ms/op
                 executeQuery·p0.50:   432.013 ms/op
                 executeQuery·p0.90:   436.732 ms/op
                 executeQuery·p0.95:   437.125 ms/op
                 executeQuery·p0.99:   437.256 ms/op
                 executeQuery·p0.999:  437.256 ms/op
                 executeQuery·p0.9999: 437.256 ms/op
                 executeQuery·p1.00:   437.256 ms/op

Iteration   4: 428.562 ±(99.9%) 3.282 ms/op
                 executeQuery·p0.00:   423.625 ms/op
                 executeQuery·p0.50:   426.246 ms/op
                 executeQuery·p0.90:   435.683 ms/op
                 executeQuery·p0.95:   437.125 ms/op
                 executeQuery·p0.99:   437.256 ms/op
                 executeQuery·p0.999:  437.256 ms/op
                 executeQuery·p0.9999: 437.256 ms/op
                 executeQuery·p1.00:   437.256 ms/op

Iteration   5: 430.965 ±(99.9%) 3.709 ms/op
                 executeQuery·p0.00:   424.673 ms/op
                 executeQuery·p0.50:   431.751 ms/op
                 executeQuery·p0.90:   436.208 ms/op
                 executeQuery·p0.95:   436.601 ms/op
                 executeQuery·p0.99:   436.732 ms/op
                 executeQuery·p0.999:  436.732 ms/op
                 executeQuery·p0.9999: 436.732 ms/op
                 executeQuery·p1.00:   436.732 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 119
  mean =    430.784 ±(99.9%) 1.447 ms/op

  Histogram, ms/op:
    [420.000, 421.250) = 1 
    [421.250, 422.500) = 0 
    [422.500, 423.750) = 1 
    [423.750, 425.000) = 4 
    [425.000, 426.250) = 28 
    [426.250, 427.500) = 14 
    [427.500, 428.750) = 6 
    [428.750, 430.000) = 6 
    [430.000, 431.250) = 1 
    [431.250, 432.500) = 5 
    [432.500, 433.750) = 8 
    [433.750, 435.000) = 5 
    [435.000, 436.250) = 28 
    [436.250, 437.500) = 10 
    [437.500, 438.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =    421.003 ms/op
     p(50.0000) =    429.916 ms/op
     p(90.0000) =    436.732 ms/op
     p(95.0000) =    436.732 ms/op
     p(99.0000) =    439.458 ms/op
     p(99.9000) =    439.878 ms/op
     p(99.9900) =    439.878 ms/op
     p(99.9990) =    439.878 ms/op
     p(99.9999) =    439.878 ms/op
    p(100.0000) =    439.878 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 2.08% complete, ETA 02:43:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_441606736 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_441606736() {
        this(4);
    }
    public KeyValueMap_441606736(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_441606736 aggregation_state_map = new KeyValueMap_441606736();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

654.442 ±(99.9%) 23.784 ms/op
# Warmup Iteration   2: 646.906 ±(99.9%) 7.694 ms/op
# Warmup Iteration   3: 648.348 ±(99.9%) 6.670 ms/op
# Warmup Iteration   4: 644.153 ±(99.9%) 4.641 ms/op
# Warmup Iteration   5: 649.658 ±(99.9%) 6.830 ms/op
Iteration   1: 632.226 ±(99.9%) 12.399 ms/op
                 executeQuery·p0.00:   615.514 ms/op
                 executeQuery·p0.50:   631.243 ms/op
                 executeQuery·p0.90:   646.971 ms/op
                 executeQuery·p0.95:   646.971 ms/op
                 executeQuery·p0.99:   646.971 ms/op
                 executeQuery·p0.999:  646.971 ms/op
                 executeQuery·p0.9999: 646.971 ms/op
                 executeQuery·p1.00:   646.971 ms/op

Iteration   2: 651.887 ±(99.9%) 8.395 ms/op
                 executeQuery·p0.00:   641.729 ms/op
                 executeQuery·p0.50:   650.641 ms/op
                 executeQuery·p0.90:   662.176 ms/op
                 executeQuery·p0.95:   680.526 ms/op
                 executeQuery·p0.99:   680.526 ms/op
                 executeQuery·p0.999:  680.526 ms/op
                 executeQuery·p0.9999: 680.526 ms/op
                 executeQuery·p1.00:   680.526 ms/op

Iteration   3: 644.022 ±(99.9%) 8.596 ms/op
                 executeQuery·p0.00:   636.486 ms/op
                 executeQuery·p0.50:   642.253 ms/op
                 executeQuery·p0.90:   655.675 ms/op
                 executeQuery·p0.95:   671.089 ms/op
                 executeQuery·p0.99:   671.089 ms/op
                 executeQuery·p0.999:  671.089 ms/op
                 executeQuery·p0.9999: 671.089 ms/op
                 executeQuery·p1.00:   671.089 ms/op

Iteration   4: 625.410 ±(99.9%) 7.458 ms/op
                 executeQuery·p0.00:   618.660 ms/op
                 executeQuery·p0.50:   621.806 ms/op
                 executeQuery·p0.90:   636.066 ms/op
                 executeQuery·p0.95:   637.534 ms/op
                 executeQuery·p0.99:   637.534 ms/op
                 executeQuery·p0.999:  637.534 ms/op
                 executeQuery·p0.9999: 637.534 ms/op
                 executeQuery·p1.00:   637.534 ms/op

Iteration   5: 640.287 ±(99.9%) 6.463 ms/op
                 executeQuery·p0.00:   630.194 ms/op
                 executeQuery·p0.50:   642.253 ms/op
                 executeQuery·p0.90:   646.552 ms/op
                 executeQuery·p0.95:   648.020 ms/op
                 executeQuery·p0.99:   648.020 ms/op
                 executeQuery·p0.999:  648.020 ms/op
                 executeQuery·p0.9999: 648.020 ms/op
                 executeQuery·p1.00:   648.020 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 80
  mean =    638.766 ±(99.9%) 4.806 ms/op

  Histogram, ms/op:
    [610.000, 615.000) = 0 
    [615.000, 620.000) = 11 
    [620.000, 625.000) = 4 
    [625.000, 630.000) = 3 
    [630.000, 635.000) = 10 
    [635.000, 640.000) = 8 
    [640.000, 645.000) = 19 
    [645.000, 650.000) = 11 
    [650.000, 655.000) = 12 
    [655.000, 660.000) = 0 
    [660.000, 665.000) = 0 
    [665.000, 670.000) = 0 
    [670.000, 675.000) = 1 
    [675.000, 680.000) = 0 
    [680.000, 685.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    615.514 ms/op
     p(50.0000) =    641.729 ms/op
     p(90.0000) =    651.166 ms/op
     p(95.0000) =    652.214 ms/op
     p(99.0000) =    680.526 ms/op
     p(99.9000) =    680.526 ms/op
     p(99.9900) =    680.526 ms/op
     p(99.9990) =    680.526 ms/op
     p(99.9999) =    680.526 ms/op
    p(100.0000) =    680.526 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 3.13% complete, ETA 02:42:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_441606736 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_441606736() {
        this(4);
    }
    public KeyValueMap_441606736(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_441606736 aggregation_state_map = new KeyValueMap_441606736();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1211.105 ms/op
# Warmup Iteration   2: 956.301 ms/op
# Warmup Iteration   3: 957.874 ms/op
# Warmup Iteration   4: 959.447 ms/op
# Warmup Iteration   5: 963.641 ms/op
Iteration   1: 931.660 ms/op
                 executeQuery·p0.00:   894.435 ms/op
                 executeQuery·p0.50:   931.660 ms/op
                 executeQuery·p0.90:   968.884 ms/op
                 executeQuery·p0.95:   968.884 ms/op
                 executeQuery·p0.99:   968.884 ms/op
                 executeQuery·p0.999:  968.884 ms/op
                 executeQuery·p0.9999: 968.884 ms/op
                 executeQuery·p1.00:   968.884 ms/op

Iteration   2: 898.630 ms/op
                 executeQuery·p0.00:   887.095 ms/op
                 executeQuery·p0.50:   898.630 ms/op
                 executeQuery·p0.90:   910.164 ms/op
                 executeQuery·p0.95:   910.164 ms/op
                 executeQuery·p0.99:   910.164 ms/op
                 executeQuery·p0.999:  910.164 ms/op
                 executeQuery·p0.9999: 910.164 ms/op
                 executeQuery·p1.00:   910.164 ms/op

Iteration   3: 934.281 ms/op
                 executeQuery·p0.00:   915.407 ms/op
                 executeQuery·p0.50:   934.281 ms/op
                 executeQuery·p0.90:   953.156 ms/op
                 executeQuery·p0.95:   953.156 ms/op
                 executeQuery·p0.99:   953.156 ms/op
                 executeQuery·p0.999:  953.156 ms/op
                 executeQuery·p0.9999: 953.156 ms/op
                 executeQuery·p1.00:   953.156 ms/op

Iteration   4: 939.524 ms/op
                 executeQuery·p0.00:   929.038 ms/op
                 executeQuery·p0.50:   939.524 ms/op
                 executeQuery·p0.90:   950.010 ms/op
                 executeQuery·p0.95:   950.010 ms/op
                 executeQuery·p0.99:   950.010 ms/op
                 executeQuery·p0.999:  950.010 ms/op
                 executeQuery·p0.9999: 950.010 ms/op
                 executeQuery·p1.00:   950.010 ms/op

Iteration   5: 940.573 ms/op
                 executeQuery·p0.00:   923.795 ms/op
                 executeQuery·p0.50:   940.573 ms/op
                 executeQuery·p0.90:   957.350 ms/op
                 executeQuery·p0.95:   957.350 ms/op
                 executeQuery·p0.99:   957.350 ms/op
                 executeQuery·p0.999:  957.350 ms/op
                 executeQuery·p0.9999: 957.350 ms/op
                 executeQuery·p1.00:   957.350 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =    928.933 ±(99.9%) 41.973 ms/op

  Histogram, ms/op:
    [880.000, 885.000) = 0 
    [885.000, 890.000) = 1 
    [890.000, 895.000) = 1 
    [895.000, 900.000) = 0 
    [900.000, 905.000) = 0 
    [905.000, 910.000) = 0 
    [910.000, 915.000) = 1 
    [915.000, 920.000) = 1 
    [920.000, 925.000) = 1 
    [925.000, 930.000) = 1 
    [930.000, 935.000) = 0 
    [935.000, 940.000) = 0 
    [940.000, 945.000) = 0 
    [945.000, 950.000) = 0 
    [950.000, 955.000) = 2 
    [955.000, 960.000) = 1 
    [960.000, 965.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    887.095 ms/op
     p(50.0000) =    926.417 ms/op
     p(90.0000) =    967.731 ms/op
     p(95.0000) =    968.884 ms/op
     p(99.0000) =    968.884 ms/op
     p(99.9000) =    968.884 ms/op
     p(99.9900) =    968.884 ms/op
     p(99.9990) =    968.884 ms/op
     p(99.9999) =    968.884 ms/op
    p(100.0000) =    968.884 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 4.17% complete, ETA 03:06:45
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_441606736 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_441606736() {
        this(4);
    }
    public KeyValueMap_441606736(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_441606736 aggregation_state_map = new KeyValueMap_441606736();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2604.663 ms/op
# Warmup Iteration   2: 2604.663 ms/op
# Warmup Iteration   3: 2357.199 ms/op
# Warmup Iteration   4: 2394.948 ms/op
# Warmup Iteration   5: 2474.639 ms/op
Iteration   1: 2365.587 ms/op
                 executeQuery·p0.00:   2365.587 ms/op
                 executeQuery·p0.50:   2365.587 ms/op
                 executeQuery·p0.90:   2365.587 ms/op
                 executeQuery·p0.95:   2365.587 ms/op
                 executeQuery·p0.99:   2365.587 ms/op
                 executeQuery·p0.999:  2365.587 ms/op
                 executeQuery·p0.9999: 2365.587 ms/op
                 executeQuery·p1.00:   2365.587 ms/op

Iteration   2: 2424.308 ms/op
                 executeQuery·p0.00:   2424.308 ms/op
                 executeQuery·p0.50:   2424.308 ms/op
                 executeQuery·p0.90:   2424.308 ms/op
                 executeQuery·p0.95:   2424.308 ms/op
                 executeQuery·p0.99:   2424.308 ms/op
                 executeQuery·p0.999:  2424.308 ms/op
                 executeQuery·p0.9999: 2424.308 ms/op
                 executeQuery·p1.00:   2424.308 ms/op

Iteration   3: 2407.530 ms/op
                 executeQuery·p0.00:   2407.530 ms/op
                 executeQuery·p0.50:   2407.530 ms/op
                 executeQuery·p0.90:   2407.530 ms/op
                 executeQuery·p0.95:   2407.530 ms/op
                 executeQuery·p0.99:   2407.530 ms/op
                 executeQuery·p0.999:  2407.530 ms/op
                 executeQuery·p0.9999: 2407.530 ms/op
                 executeQuery·p1.00:   2407.530 ms/op

Iteration   4: 2537.554 ms/op
                 executeQuery·p0.00:   2537.554 ms/op
                 executeQuery·p0.50:   2537.554 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op

Iteration   5: 2579.497 ms/op
                 executeQuery·p0.00:   2579.497 ms/op
                 executeQuery·p0.50:   2579.497 ms/op
                 executeQuery·p0.90:   2579.497 ms/op
                 executeQuery·p0.95:   2579.497 ms/op
                 executeQuery·p0.99:   2579.497 ms/op
                 executeQuery·p0.999:  2579.497 ms/op
                 executeQuery·p0.9999: 2579.497 ms/op
                 executeQuery·p1.00:   2579.497 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   2462.895 ±(99.9%) 350.773 ms/op

  Histogram, ms/op:
    [2300.000, 2325.000) = 0 
    [2325.000, 2350.000) = 0 
    [2350.000, 2375.000) = 1 
    [2375.000, 2400.000) = 0 
    [2400.000, 2425.000) = 2 
    [2425.000, 2450.000) = 0 
    [2450.000, 2475.000) = 0 
    [2475.000, 2500.000) = 0 
    [2500.000, 2525.000) = 0 
    [2525.000, 2550.000) = 1 
    [2550.000, 2575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2365.587 ms/op
     p(50.0000) =   2424.308 ms/op
     p(90.0000) =   2579.497 ms/op
     p(95.0000) =   2579.497 ms/op
     p(99.0000) =   2579.497 ms/op
     p(99.9000) =   2579.497 ms/op
     p(99.9900) =   2579.497 ms/op
     p(99.9990) =   2579.497 ms/op
     p(99.9999) =   2579.497 ms/op
    p(100.0000) =   2579.497 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 5.21% complete, ETA 04:06:49
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1999335834 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1999335834() {
        this(4);
    }
    public KeyValueMap_1999335834(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1999335834 aggregation_state_map = new KeyValueMap_1999335834();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3488.263 ±(99.9%) 7481.083 ms/op
# Warmup Iteration   2: 3251.634 ±(99.9%) 583.566 ms/op
# Warmup Iteration   3: 3296.723 ±(99.9%) 308.235 ms/op
# Warmup Iteration   4: 3271.557 ±(99.9%) 22.130 ms/op
# Warmup Iteration   5: 3268.411 ±(99.9%) 25.950 ms/op
Iteration   1: 3261.071 ±(99.9%) 27.104 ms/op
                 executeQuery·p0.00:   3254.780 ms/op
                 executeQuery·p0.50:   3263.169 ms/op
                 executeQuery·p0.90:   3263.169 ms/op
                 executeQuery·p0.95:   3263.169 ms/op
                 executeQuery·p0.99:   3263.169 ms/op
                 executeQuery·p0.999:  3263.169 ms/op
                 executeQuery·p0.9999: 3263.169 ms/op
                 executeQuery·p1.00:   3263.169 ms/op

Iteration   2: 3266.314 ±(99.9%) 25.950 ms/op
                 executeQuery·p0.00:   3263.169 ms/op
                 executeQuery·p0.50:   3265.266 ms/op
                 executeQuery·p0.90:   3271.557 ms/op
                 executeQuery·p0.95:   3271.557 ms/op
                 executeQuery·p0.99:   3271.557 ms/op
                 executeQuery·p0.999:  3271.557 ms/op
                 executeQuery·p0.9999: 3271.557 ms/op
                 executeQuery·p1.00:   3271.557 ms/op

Iteration   3: 3271.557 ±(99.9%) 145.116 ms/op
                 executeQuery·p0.00:   3258.974 ms/op
                 executeQuery·p0.50:   3261.071 ms/op
                 executeQuery·p0.90:   3305.112 ms/op
                 executeQuery·p0.95:   3305.112 ms/op
                 executeQuery·p0.99:   3305.112 ms/op
                 executeQuery·p0.999:  3305.112 ms/op
                 executeQuery·p0.9999: 3305.112 ms/op
                 executeQuery·p1.00:   3305.112 ms/op

Iteration   4: 3260.023 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3258.974 ms/op
                 executeQuery·p0.50:   3258.974 ms/op
                 executeQuery·p0.90:   3263.169 ms/op
                 executeQuery·p0.95:   3263.169 ms/op
                 executeQuery·p0.99:   3263.169 ms/op
                 executeQuery·p0.999:  3263.169 ms/op
                 executeQuery·p0.9999: 3263.169 ms/op
                 executeQuery·p1.00:   3263.169 ms/op

Iteration   5: 3257.926 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3254.780 ms/op
                 executeQuery·p0.50:   3258.974 ms/op
                 executeQuery·p0.90:   3258.974 ms/op
                 executeQuery·p0.95:   3258.974 ms/op
                 executeQuery·p0.99:   3258.974 ms/op
                 executeQuery·p0.999:  3258.974 ms/op
                 executeQuery·p0.9999: 3258.974 ms/op
                 executeQuery·p1.00:   3258.974 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   3263.378 ±(99.9%) 9.189 ms/op

  Histogram, ms/op:
    [3250.000, 3255.000) = 2 
    [3255.000, 3260.000) = 8 
    [3260.000, 3265.000) = 7 
    [3265.000, 3270.000) = 1 
    [3270.000, 3275.000) = 1 
    [3275.000, 3280.000) = 0 
    [3280.000, 3285.000) = 0 
    [3285.000, 3290.000) = 0 
    [3290.000, 3295.000) = 0 
    [3295.000, 3300.000) = 0 
    [3300.000, 3305.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3254.780 ms/op
     p(50.0000) =   3261.071 ms/op
     p(90.0000) =   3271.138 ms/op
     p(95.0000) =   3303.434 ms/op
     p(99.0000) =   3305.112 ms/op
     p(99.9000) =   3305.112 ms/op
     p(99.9900) =   3305.112 ms/op
     p(99.9990) =   3305.112 ms/op
     p(99.9999) =   3305.112 ms/op
    p(100.0000) =   3305.112 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 6.25% complete, ETA 03:55:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_441606736 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_441606736() {
        this(4);
    }
    public KeyValueMap_441606736(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_441606736 aggregation_state_map = new KeyValueMap_441606736();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4197.100 ±(99.9%) 6769.004 ms/op
# Warmup Iteration   2: 4282.384 ±(99.9%) 4072.833 ms/op
# Warmup Iteration   3: 4236.247 ±(99.9%) 275.896 ms/op
# Warmup Iteration   4: 4204.091 ±(99.9%) 392.669 ms/op
# Warmup Iteration   5: 4206.887 ±(99.9%) 397.608 ms/op
Iteration   1: 4232.053 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   4227.858 ms/op
                 executeQuery·p0.50:   4232.053 ms/op
                 executeQuery·p0.90:   4236.247 ms/op
                 executeQuery·p0.95:   4236.247 ms/op
                 executeQuery·p0.99:   4236.247 ms/op
                 executeQuery·p0.999:  4236.247 ms/op
                 executeQuery·p0.9999: 4236.247 ms/op
                 executeQuery·p1.00:   4236.247 ms/op

Iteration   2: 4220.868 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   4219.470 ms/op
                 executeQuery·p0.50:   4219.470 ms/op
                 executeQuery·p0.90:   4223.664 ms/op
                 executeQuery·p0.95:   4223.664 ms/op
                 executeQuery·p0.99:   4223.664 ms/op
                 executeQuery·p0.999:  4223.664 ms/op
                 executeQuery·p0.9999: 4223.664 ms/op
                 executeQuery·p1.00:   4223.664 ms/op

Iteration   3: 4283.782 ±(99.9%) 1899.683 ms/op
                 executeQuery·p0.00:   4223.664 ms/op
                 executeQuery·p0.50:   4223.664 ms/op
                 executeQuery·p0.90:   4404.019 ms/op
                 executeQuery·p0.95:   4404.019 ms/op
                 executeQuery·p0.99:   4404.019 ms/op
                 executeQuery·p0.999:  4404.019 ms/op
                 executeQuery·p0.9999: 4404.019 ms/op
                 executeQuery·p1.00:   4404.019 ms/op

Iteration   4: 4223.664 ±(99.9%) 202.452 ms/op
                 executeQuery·p0.00:   4211.081 ms/op
                 executeQuery·p0.50:   4227.858 ms/op
                 executeQuery·p0.90:   4232.053 ms/op
                 executeQuery·p0.95:   4232.053 ms/op
                 executeQuery·p0.99:   4232.053 ms/op
                 executeQuery·p0.999:  4232.053 ms/op
                 executeQuery·p0.9999: 4232.053 ms/op
                 executeQuery·p1.00:   4232.053 ms/op

Iteration   5: 4276.792 ±(99.9%) 2019.212 ms/op
                 executeQuery·p0.00:   4202.693 ms/op
                 executeQuery·p0.50:   4223.664 ms/op
                 executeQuery·p0.90:   4404.019 ms/op
                 executeQuery·p0.95:   4404.019 ms/op
                 executeQuery·p0.99:   4404.019 ms/op
                 executeQuery·p0.999:  4404.019 ms/op
                 executeQuery·p0.9999: 4404.019 ms/op
                 executeQuery·p1.00:   4404.019 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4247.432 ±(99.9%) 68.543 ms/op

  Histogram, ms/op:
    [4200.000, 4225.000) = 8 
    [4225.000, 4250.000) = 5 
    [4250.000, 4275.000) = 0 
    [4275.000, 4300.000) = 0 
    [4300.000, 4325.000) = 0 
    [4325.000, 4350.000) = 0 
    [4350.000, 4375.000) = 0 
    [4375.000, 4400.000) = 0 
    [4400.000, 4425.000) = 2 
    [4425.000, 4450.000) = 0 
    [4450.000, 4475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4202.693 ms/op
     p(50.0000) =   4223.664 ms/op
     p(90.0000) =   4404.019 ms/op
     p(95.0000) =   4404.019 ms/op
     p(99.0000) =   4404.019 ms/op
     p(99.9000) =   4404.019 ms/op
     p(99.9900) =   4404.019 ms/op
     p(99.9990) =   4404.019 ms/op
     p(99.9999) =   4404.019 ms/op
    p(100.0000) =   4404.019 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 7.29% complete, ETA 03:47:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_830090468 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_830090468() {
        this(4);
    }
    public KeyValueMap_830090468(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_830090468 aggregation_state_map = new KeyValueMap_830090468();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6366.953 ms/op
# Warmup Iteration   2: 6144.655 ms/op
# Warmup Iteration   3: 6203.376 ms/op
# Warmup Iteration   4: 6345.982 ms/op
# Warmup Iteration   5: 6220.153 ms/op
Iteration   1: 6245.319 ms/op
                 executeQuery·p0.00:   6215.959 ms/op
                 executeQuery·p0.50:   6245.319 ms/op
                 executeQuery·p0.90:   6274.679 ms/op
                 executeQuery·p0.95:   6274.679 ms/op
                 executeQuery·p0.99:   6274.679 ms/op
                 executeQuery·p0.999:  6274.679 ms/op
                 executeQuery·p0.9999: 6274.679 ms/op
                 executeQuery·p1.00:   6274.679 ms/op

Iteration   2: 6274.679 ms/op
                 executeQuery·p0.00:   6249.513 ms/op
                 executeQuery·p0.50:   6274.679 ms/op
                 executeQuery·p0.90:   6299.845 ms/op
                 executeQuery·p0.95:   6299.845 ms/op
                 executeQuery·p0.99:   6299.845 ms/op
                 executeQuery·p0.999:  6299.845 ms/op
                 executeQuery·p0.9999: 6299.845 ms/op
                 executeQuery·p1.00:   6299.845 ms/op

Iteration   3: 6220.153 ms/op
                 executeQuery·p0.00:   6207.570 ms/op
                 executeQuery·p0.50:   6220.153 ms/op
                 executeQuery·p0.90:   6232.736 ms/op
                 executeQuery·p0.95:   6232.736 ms/op
                 executeQuery·p0.99:   6232.736 ms/op
                 executeQuery·p0.999:  6232.736 ms/op
                 executeQuery·p0.9999: 6232.736 ms/op
                 executeQuery·p1.00:   6232.736 ms/op

Iteration   4: 6232.736 ms/op
                 executeQuery·p0.00:   6215.959 ms/op
                 executeQuery·p0.50:   6232.736 ms/op
                 executeQuery·p0.90:   6249.513 ms/op
                 executeQuery·p0.95:   6249.513 ms/op
                 executeQuery·p0.99:   6249.513 ms/op
                 executeQuery·p0.999:  6249.513 ms/op
                 executeQuery·p0.9999: 6249.513 ms/op
                 executeQuery·p1.00:   6249.513 ms/op

Iteration   5: 6325.010 ms/op
                 executeQuery·p0.00:   6199.181 ms/op
                 executeQuery·p0.50:   6325.010 ms/op
                 executeQuery·p0.90:   6450.840 ms/op
                 executeQuery·p0.95:   6450.840 ms/op
                 executeQuery·p0.99:   6450.840 ms/op
                 executeQuery·p0.999:  6450.840 ms/op
                 executeQuery·p0.9999: 6450.840 ms/op
                 executeQuery·p1.00:   6450.840 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   6259.579 ±(99.9%) 112.135 ms/op

  Histogram, ms/op:
    [6100.000, 6125.000) = 0 
    [6125.000, 6150.000) = 0 
    [6150.000, 6175.000) = 0 
    [6175.000, 6200.000) = 1 
    [6200.000, 6225.000) = 3 
    [6225.000, 6250.000) = 3 
    [6250.000, 6275.000) = 1 
    [6275.000, 6300.000) = 1 
    [6300.000, 6325.000) = 0 
    [6325.000, 6350.000) = 0 
    [6350.000, 6375.000) = 0 
    [6375.000, 6400.000) = 0 
    [6400.000, 6425.000) = 0 
    [6425.000, 6450.000) = 0 
    [6450.000, 6475.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6199.181 ms/op
     p(50.0000) =   6241.124 ms/op
     p(90.0000) =   6435.740 ms/op
     p(95.0000) =   6450.840 ms/op
     p(99.0000) =   6450.840 ms/op
     p(99.9000) =   6450.840 ms/op
     p(99.9900) =   6450.840 ms/op
     p(99.9990) =   6450.840 ms/op
     p(99.9999) =   6450.840 ms/op
    p(100.0000) =   6450.840 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 8.33% complete, ETA 03:39:48
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1999335834 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1999335834() {
        this(4);
    }
    public KeyValueMap_1999335834(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1999335834 aggregation_state_map = new KeyValueMap_1999335834();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9428.795 ms/op
# Warmup Iteration   2: 9344.909 ms/op
# Warmup Iteration   3: 7230.980 ms/op
# Warmup Iteration   4: 8959.033 ms/op
# Warmup Iteration   5: 9009.365 ms/op
Iteration   1: 9646.899 ms/op
                 executeQuery·p0.00:   9646.899 ms/op
                 executeQuery·p0.50:   9646.899 ms/op
                 executeQuery·p0.90:   9646.899 ms/op
                 executeQuery·p0.95:   9646.899 ms/op
                 executeQuery·p0.99:   9646.899 ms/op
                 executeQuery·p0.999:  9646.899 ms/op
                 executeQuery·p0.9999: 9646.899 ms/op
                 executeQuery·p1.00:   9646.899 ms/op

Iteration   2: 9646.899 ms/op
                 executeQuery·p0.00:   9646.899 ms/op
                 executeQuery·p0.50:   9646.899 ms/op
                 executeQuery·p0.90:   9646.899 ms/op
                 executeQuery·p0.95:   9646.899 ms/op
                 executeQuery·p0.99:   9646.899 ms/op
                 executeQuery·p0.999:  9646.899 ms/op
                 executeQuery·p0.9999: 9646.899 ms/op
                 executeQuery·p1.00:   9646.899 ms/op

Iteration   3: 9697.231 ms/op
                 executeQuery·p0.00:   9697.231 ms/op
                 executeQuery·p0.50:   9697.231 ms/op
                 executeQuery·p0.90:   9697.231 ms/op
                 executeQuery·p0.95:   9697.231 ms/op
                 executeQuery·p0.99:   9697.231 ms/op
                 executeQuery·p0.999:  9697.231 ms/op
                 executeQuery·p0.9999: 9697.231 ms/op
                 executeQuery·p1.00:   9697.231 ms/op

Iteration   4: 9412.018 ms/op
                 executeQuery·p0.00:   9412.018 ms/op
                 executeQuery·p0.50:   9412.018 ms/op
                 executeQuery·p0.90:   9412.018 ms/op
                 executeQuery·p0.95:   9412.018 ms/op
                 executeQuery·p0.99:   9412.018 ms/op
                 executeQuery·p0.999:  9412.018 ms/op
                 executeQuery·p0.9999: 9412.018 ms/op
                 executeQuery·p1.00:   9412.018 ms/op

Iteration   5: 9126.806 ms/op
                 executeQuery·p0.00:   9126.806 ms/op
                 executeQuery·p0.50:   9126.806 ms/op
                 executeQuery·p0.90:   9126.806 ms/op
                 executeQuery·p0.95:   9126.806 ms/op
                 executeQuery·p0.99:   9126.806 ms/op
                 executeQuery·p0.999:  9126.806 ms/op
                 executeQuery·p0.9999: 9126.806 ms/op
                 executeQuery·p1.00:   9126.806 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   9505.971 ±(99.9%) 921.132 ms/op

  Histogram, ms/op:
    [9100.000, 9150.000) = 1 
    [9150.000, 9200.000) = 0 
    [9200.000, 9250.000) = 0 
    [9250.000, 9300.000) = 0 
    [9300.000, 9350.000) = 0 
    [9350.000, 9400.000) = 0 
    [9400.000, 9450.000) = 1 
    [9450.000, 9500.000) = 0 
    [9500.000, 9550.000) = 0 
    [9550.000, 9600.000) = 0 
    [9600.000, 9650.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   9126.806 ms/op
     p(50.0000) =   9646.899 ms/op
     p(90.0000) =   9697.231 ms/op
     p(95.0000) =   9697.231 ms/op
     p(99.0000) =   9697.231 ms/op
     p(99.9000) =   9697.231 ms/op
     p(99.9900) =   9697.231 ms/op
     p(99.9990) =   9697.231 ms/op
     p(99.9999) =   9697.231 ms/op
    p(100.0000) =   9697.231 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 9.38% complete, ETA 03:39:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_441606736 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_441606736() {
        this(4);
    }
    public KeyValueMap_441606736(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_441606736 aggregation_state_map = new KeyValueMap_441606736();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

24863.834 ms/op
# Warmup Iteration   2: 24763.171 ms/op
# Warmup Iteration   3: 25199.378 ms/op
# Warmup Iteration   4: 24326.963 ms/op
# Warmup Iteration   5: 24830.280 ms/op
Iteration   1: 25501.368 ms/op
                 executeQuery·p0.00:   25501.368 ms/op
                 executeQuery·p0.50:   25501.368 ms/op
                 executeQuery·p0.90:   25501.368 ms/op
                 executeQuery·p0.95:   25501.368 ms/op
                 executeQuery·p0.99:   25501.368 ms/op
                 executeQuery·p0.999:  25501.368 ms/op
                 executeQuery·p0.9999: 25501.368 ms/op
                 executeQuery·p1.00:   25501.368 ms/op

Iteration   2: 25300.042 ms/op
                 executeQuery·p0.00:   25300.042 ms/op
                 executeQuery·p0.50:   25300.042 ms/op
                 executeQuery·p0.90:   25300.042 ms/op
                 executeQuery·p0.95:   25300.042 ms/op
                 executeQuery·p0.99:   25300.042 ms/op
                 executeQuery·p0.999:  25300.042 ms/op
                 executeQuery·p0.9999: 25300.042 ms/op
                 executeQuery·p1.00:   25300.042 ms/op

Iteration   3: 25635.586 ms/op
                 executeQuery·p0.00:   25635.586 ms/op
                 executeQuery·p0.50:   25635.586 ms/op
                 executeQuery·p0.90:   25635.586 ms/op
                 executeQuery·p0.95:   25635.586 ms/op
                 executeQuery·p0.99:   25635.586 ms/op
                 executeQuery·p0.999:  25635.586 ms/op
                 executeQuery·p0.9999: 25635.586 ms/op
                 executeQuery·p1.00:   25635.586 ms/op

Iteration   4: 24326.963 ms/op
                 executeQuery·p0.00:   24326.963 ms/op
                 executeQuery·p0.50:   24326.963 ms/op
                 executeQuery·p0.90:   24326.963 ms/op
                 executeQuery·p0.95:   24326.963 ms/op
                 executeQuery·p0.99:   24326.963 ms/op
                 executeQuery·p0.999:  24326.963 ms/op
                 executeQuery·p0.9999: 24326.963 ms/op
                 executeQuery·p1.00:   24326.963 ms/op

Iteration   5: 23320.330 ms/op
                 executeQuery·p0.00:   23320.330 ms/op
                 executeQuery·p0.50:   23320.330 ms/op
                 executeQuery·p0.90:   23320.330 ms/op
                 executeQuery·p0.95:   23320.330 ms/op
                 executeQuery·p0.99:   23320.330 ms/op
                 executeQuery·p0.999:  23320.330 ms/op
                 executeQuery·p0.9999: 23320.330 ms/op
                 executeQuery·p1.00:   23320.330 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  24816.858 ±(99.9%) 3778.701 ms/op

  Histogram, ms/op:
    [23000.000, 23250.000) = 0 
    [23250.000, 23500.000) = 1 
    [23500.000, 23750.000) = 0 
    [23750.000, 24000.000) = 0 
    [24000.000, 24250.000) = 0 
    [24250.000, 24500.000) = 1 
    [24500.000, 24750.000) = 0 
    [24750.000, 25000.000) = 0 
    [25000.000, 25250.000) = 0 
    [25250.000, 25500.000) = 1 
    [25500.000, 25750.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  23320.330 ms/op
     p(50.0000) =  25300.042 ms/op
     p(90.0000) =  25635.586 ms/op
     p(95.0000) =  25635.586 ms/op
     p(99.0000) =  25635.586 ms/op
     p(99.9000) =  25635.586 ms/op
     p(99.9900) =  25635.586 ms/op
     p(99.9990) =  25635.586 ms/op
     p(99.9999) =  25635.586 ms/op
    p(100.0000) =  25635.586 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 10.42% complete, ETA 04:35:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_830090468 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_830090468() {
        this(4);
    }
    public KeyValueMap_830090468(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_830090468 aggregation_state_map = new KeyValueMap_830090468();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6777.995 ms/op
# Warmup Iteration   2: 6295.650 ms/op
# Warmup Iteration   3: 6299.845 ms/op
# Warmup Iteration   4: 6153.044 ms/op
# Warmup Iteration   5: 6132.072 ms/op
Iteration   1: 6190.793 ms/op
                 executeQuery·p0.00:   6157.238 ms/op
                 executeQuery·p0.50:   6190.793 ms/op
                 executeQuery·p0.90:   6224.347 ms/op
                 executeQuery·p0.95:   6224.347 ms/op
                 executeQuery·p0.99:   6224.347 ms/op
                 executeQuery·p0.999:  6224.347 ms/op
                 executeQuery·p0.9999: 6224.347 ms/op
                 executeQuery·p1.00:   6224.347 ms/op

Iteration   2: 6161.433 ms/op
                 executeQuery·p0.00:   6157.238 ms/op
                 executeQuery·p0.50:   6161.433 ms/op
                 executeQuery·p0.90:   6165.627 ms/op
                 executeQuery·p0.95:   6165.627 ms/op
                 executeQuery·p0.99:   6165.627 ms/op
                 executeQuery·p0.999:  6165.627 ms/op
                 executeQuery·p0.9999: 6165.627 ms/op
                 executeQuery·p1.00:   6165.627 ms/op

Iteration   3: 6127.878 ms/op
                 executeQuery·p0.00:   6123.684 ms/op
                 executeQuery·p0.50:   6127.878 ms/op
                 executeQuery·p0.90:   6132.072 ms/op
                 executeQuery·p0.95:   6132.072 ms/op
                 executeQuery·p0.99:   6132.072 ms/op
                 executeQuery·p0.999:  6132.072 ms/op
                 executeQuery·p0.9999: 6132.072 ms/op
                 executeQuery·p1.00:   6132.072 ms/op

Iteration   4: 6174.015 ms/op
                 executeQuery·p0.00:   6123.684 ms/op
                 executeQuery·p0.50:   6174.015 ms/op
                 executeQuery·p0.90:   6224.347 ms/op
                 executeQuery·p0.95:   6224.347 ms/op
                 executeQuery·p0.99:   6224.347 ms/op
                 executeQuery·p0.999:  6224.347 ms/op
                 executeQuery·p0.9999: 6224.347 ms/op
                 executeQuery·p1.00:   6224.347 ms/op

Iteration   5: 6119.490 ms/op
                 executeQuery·p0.00:   6115.295 ms/op
                 executeQuery·p0.50:   6119.490 ms/op
                 executeQuery·p0.90:   6123.684 ms/op
                 executeQuery·p0.95:   6123.684 ms/op
                 executeQuery·p0.99:   6123.684 ms/op
                 executeQuery·p0.999:  6123.684 ms/op
                 executeQuery·p0.9999: 6123.684 ms/op
                 executeQuery·p1.00:   6123.684 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   6154.722 ±(99.9%) 61.276 ms/op

  Histogram, ms/op:
    [6100.000, 6112.500) = 0 
    [6112.500, 6125.000) = 4 
    [6125.000, 6137.500) = 1 
    [6137.500, 6150.000) = 0 
    [6150.000, 6162.500) = 2 
    [6162.500, 6175.000) = 1 
    [6175.000, 6187.500) = 0 
    [6187.500, 6200.000) = 0 
    [6200.000, 6212.500) = 0 
    [6212.500, 6225.000) = 2 
    [6225.000, 6237.500) = 0 
    [6237.500, 6250.000) = 0 
    [6250.000, 6262.500) = 0 
    [6262.500, 6275.000) = 0 
    [6275.000, 6287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   6115.295 ms/op
     p(50.0000) =   6144.655 ms/op
     p(90.0000) =   6224.347 ms/op
     p(95.0000) =   6224.347 ms/op
     p(99.0000) =   6224.347 ms/op
     p(99.9000) =   6224.347 ms/op
     p(99.9900) =   6224.347 ms/op
     p(99.9990) =   6224.347 ms/op
     p(99.9999) =   6224.347 ms/op
    p(100.0000) =   6224.347 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 11.46% complete, ETA 04:23:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1999335834 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1999335834() {
        this(4);
    }
    public KeyValueMap_1999335834(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1999335834 aggregation_state_map = new KeyValueMap_1999335834();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10200.547 ms/op
# Warmup Iteration   2: 10519.314 ms/op
# Warmup Iteration   3: 10670.309 ms/op
# Warmup Iteration   4: 10351.542 ms/op
# Warmup Iteration   5: 10284.433 ms/op
Iteration   1: 10250.879 ms/op
                 executeQuery·p0.00:   10250.879 ms/op
                 executeQuery·p0.50:   10250.879 ms/op
                 executeQuery·p0.90:   10250.879 ms/op
                 executeQuery·p0.95:   10250.879 ms/op
                 executeQuery·p0.99:   10250.879 ms/op
                 executeQuery·p0.999:  10250.879 ms/op
                 executeQuery·p0.9999: 10250.879 ms/op
                 executeQuery·p1.00:   10250.879 ms/op

Iteration   2: 10401.874 ms/op
                 executeQuery·p0.00:   10401.874 ms/op
                 executeQuery·p0.50:   10401.874 ms/op
                 executeQuery·p0.90:   10401.874 ms/op
                 executeQuery·p0.95:   10401.874 ms/op
                 executeQuery·p0.99:   10401.874 ms/op
                 executeQuery·p0.999:  10401.874 ms/op
                 executeQuery·p0.9999: 10401.874 ms/op
                 executeQuery·p1.00:   10401.874 ms/op

Iteration   3: 10418.651 ms/op
                 executeQuery·p0.00:   10418.651 ms/op
                 executeQuery·p0.50:   10418.651 ms/op
                 executeQuery·p0.90:   10418.651 ms/op
                 executeQuery·p0.95:   10418.651 ms/op
                 executeQuery·p0.99:   10418.651 ms/op
                 executeQuery·p0.999:  10418.651 ms/op
                 executeQuery·p0.9999: 10418.651 ms/op
                 executeQuery·p1.00:   10418.651 ms/op

Iteration   4: 10385.097 ms/op
                 executeQuery·p0.00:   10385.097 ms/op
                 executeQuery·p0.50:   10385.097 ms/op
                 executeQuery·p0.90:   10385.097 ms/op
                 executeQuery·p0.95:   10385.097 ms/op
                 executeQuery·p0.99:   10385.097 ms/op
                 executeQuery·p0.999:  10385.097 ms/op
                 executeQuery·p0.9999: 10385.097 ms/op
                 executeQuery·p1.00:   10385.097 ms/op

Iteration   5: 10250.879 ms/op
                 executeQuery·p0.00:   10250.879 ms/op
                 executeQuery·p0.50:   10250.879 ms/op
                 executeQuery·p0.90:   10250.879 ms/op
                 executeQuery·p0.95:   10250.879 ms/op
                 executeQuery·p0.99:   10250.879 ms/op
                 executeQuery·p0.999:  10250.879 ms/op
                 executeQuery·p0.9999: 10250.879 ms/op
                 executeQuery·p1.00:   10250.879 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  10341.476 ±(99.9%) 321.721 ms/op

  Histogram, ms/op:
    [10200.000, 10225.000) = 0 
    [10225.000, 10250.000) = 0 
    [10250.000, 10275.000) = 2 
    [10275.000, 10300.000) = 0 
    [10300.000, 10325.000) = 0 
    [10325.000, 10350.000) = 0 
    [10350.000, 10375.000) = 0 
    [10375.000, 10400.000) = 1 
    [10400.000, 10425.000) = 2 
    [10425.000, 10450.000) = 0 
    [10450.000, 10475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  10250.879 ms/op
     p(50.0000) =  10385.097 ms/op
     p(90.0000) =  10418.651 ms/op
     p(95.0000) =  10418.651 ms/op
     p(99.0000) =  10418.651 ms/op
     p(99.9000) =  10418.651 ms/op
     p(99.9900) =  10418.651 ms/op
     p(99.9990) =  10418.651 ms/op
     p(99.9999) =  10418.651 ms/op
    p(100.0000) =  10418.651 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 12.50% complete, ETA 04:12:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1999335834 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1999335834() {
        this(4);
    }
    public KeyValueMap_1999335834(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1999335834 aggregation_state_map = new KeyValueMap_1999335834();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

12683.575 ms/op
# Warmup Iteration   2: 12364.808 ms/op
# Warmup Iteration   3: 12197.036 ms/op
# Warmup Iteration   4: 12532.580 ms/op
# Warmup Iteration   5: 13103.006 ms/op
Iteration   1: 12717.130 ms/op
                 executeQuery·p0.00:   12717.130 ms/op
                 executeQuery·p0.50:   12717.130 ms/op
                 executeQuery·p0.90:   12717.130 ms/op
                 executeQuery·p0.95:   12717.130 ms/op
                 executeQuery·p0.99:   12717.130 ms/op
                 executeQuery·p0.999:  12717.130 ms/op
                 executeQuery·p0.9999: 12717.130 ms/op
                 executeQuery·p1.00:   12717.130 ms/op

Iteration   2: 13103.006 ms/op
                 executeQuery·p0.00:   13103.006 ms/op
                 executeQuery·p0.50:   13103.006 ms/op
                 executeQuery·p0.90:   13103.006 ms/op
                 executeQuery·p0.95:   13103.006 ms/op
                 executeQuery·p0.99:   13103.006 ms/op
                 executeQuery·p0.999:  13103.006 ms/op
                 executeQuery·p0.9999: 13103.006 ms/op
                 executeQuery·p1.00:   13103.006 ms/op

Iteration   3: 12515.803 ms/op
                 executeQuery·p0.00:   12515.803 ms/op
                 executeQuery·p0.50:   12515.803 ms/op
                 executeQuery·p0.90:   12515.803 ms/op
                 executeQuery·p0.95:   12515.803 ms/op
                 executeQuery·p0.99:   12515.803 ms/op
                 executeQuery·p0.999:  12515.803 ms/op
                 executeQuery·p0.9999: 12515.803 ms/op
                 executeQuery·p1.00:   12515.803 ms/op

Iteration   4: 12599.689 ms/op
                 executeQuery·p0.00:   12599.689 ms/op
                 executeQuery·p0.50:   12599.689 ms/op
                 executeQuery·p0.90:   12599.689 ms/op
                 executeQuery·p0.95:   12599.689 ms/op
                 executeQuery·p0.99:   12599.689 ms/op
                 executeQuery·p0.999:  12599.689 ms/op
                 executeQuery·p0.9999: 12599.689 ms/op
                 executeQuery·p1.00:   12599.689 ms/op

Iteration   5: 12817.793 ms/op
                 executeQuery·p0.00:   12817.793 ms/op
                 executeQuery·p0.50:   12817.793 ms/op
                 executeQuery·p0.90:   12817.793 ms/op
                 executeQuery·p0.95:   12817.793 ms/op
                 executeQuery·p0.99:   12817.793 ms/op
                 executeQuery·p0.999:  12817.793 ms/op
                 executeQuery·p0.9999: 12817.793 ms/op
                 executeQuery·p1.00:   12817.793 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  12750.684 ±(99.9%) 877.509 ms/op

  Histogram, ms/op:
    [12500.000, 12550.000) = 1 
    [12550.000, 12600.000) = 1 
    [12600.000, 12650.000) = 0 
    [12650.000, 12700.000) = 0 
    [12700.000, 12750.000) = 1 
    [12750.000, 12800.000) = 0 
    [12800.000, 12850.000) = 1 
    [12850.000, 12900.000) = 0 
    [12900.000, 12950.000) = 0 
    [12950.000, 13000.000) = 0 
    [13000.000, 13050.000) = 0 
    [13050.000, 13100.000) = 0 
    [13100.000, 13150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  12515.803 ms/op
     p(50.0000) =  12717.130 ms/op
     p(90.0000) =  13103.006 ms/op
     p(95.0000) =  13103.006 ms/op
     p(99.0000) =  13103.006 ms/op
     p(99.9000) =  13103.006 ms/op
     p(99.9900) =  13103.006 ms/op
     p(99.9990) =  13103.006 ms/op
     p(99.9999) =  13103.006 ms/op
    p(100.0000) =  13103.006 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 13.54% complete, ETA 04:04:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_441606736 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_441606736() {
        this(4);
    }
    public KeyValueMap_441606736(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_441606736 aggregation_state_map = new KeyValueMap_441606736();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

19360.907 ms/op
# Warmup Iteration   2: 18488.492 ms/op
# Warmup Iteration   3: 17951.621 ms/op
# Warmup Iteration   4: 18253.611 ms/op
# Warmup Iteration   5: 18689.819 ms/op
Iteration   1: 18555.601 ms/op
                 executeQuery·p0.00:   18555.601 ms/op
                 executeQuery·p0.50:   18555.601 ms/op
                 executeQuery·p0.90:   18555.601 ms/op
                 executeQuery·p0.95:   18555.601 ms/op
                 executeQuery·p0.99:   18555.601 ms/op
                 executeQuery·p0.999:  18555.601 ms/op
                 executeQuery·p0.9999: 18555.601 ms/op
                 executeQuery·p1.00:   18555.601 ms/op

Iteration   2: 18085.839 ms/op
                 executeQuery·p0.00:   18085.839 ms/op
                 executeQuery·p0.50:   18085.839 ms/op
                 executeQuery·p0.90:   18085.839 ms/op
                 executeQuery·p0.95:   18085.839 ms/op
                 executeQuery·p0.99:   18085.839 ms/op
                 executeQuery·p0.999:  18085.839 ms/op
                 executeQuery·p0.9999: 18085.839 ms/op
                 executeQuery·p1.00:   18085.839 ms/op

Iteration   3: 18253.611 ms/op
                 executeQuery·p0.00:   18253.611 ms/op
                 executeQuery·p0.50:   18253.611 ms/op
                 executeQuery·p0.90:   18253.611 ms/op
                 executeQuery·p0.95:   18253.611 ms/op
                 executeQuery·p0.99:   18253.611 ms/op
                 executeQuery·p0.999:  18253.611 ms/op
                 executeQuery·p0.9999: 18253.611 ms/op
                 executeQuery·p1.00:   18253.611 ms/op

Iteration   4: 17716.740 ms/op
                 executeQuery·p0.00:   17716.740 ms/op
                 executeQuery·p0.50:   17716.740 ms/op
                 executeQuery·p0.90:   17716.740 ms/op
                 executeQuery·p0.95:   17716.740 ms/op
                 executeQuery·p0.99:   17716.740 ms/op
                 executeQuery·p0.999:  17716.740 ms/op
                 executeQuery·p0.9999: 17716.740 ms/op
                 executeQuery·p1.00:   17716.740 ms/op

Iteration   5: 17448.305 ms/op
                 executeQuery·p0.00:   17448.305 ms/op
                 executeQuery·p0.50:   17448.305 ms/op
                 executeQuery·p0.90:   17448.305 ms/op
                 executeQuery·p0.95:   17448.305 ms/op
                 executeQuery·p0.99:   17448.305 ms/op
                 executeQuery·p0.999:  17448.305 ms/op
                 executeQuery·p0.9999: 17448.305 ms/op
                 executeQuery·p1.00:   17448.305 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  18012.019 ±(99.9%) 1683.155 ms/op

  Histogram, ms/op:
    [17000.000, 17125.000) = 0 
    [17125.000, 17250.000) = 0 
    [17250.000, 17375.000) = 0 
    [17375.000, 17500.000) = 1 
    [17500.000, 17625.000) = 0 
    [17625.000, 17750.000) = 1 
    [17750.000, 17875.000) = 0 
    [17875.000, 18000.000) = 0 
    [18000.000, 18125.000) = 1 
    [18125.000, 18250.000) = 0 
    [18250.000, 18375.000) = 1 
    [18375.000, 18500.000) = 0 
    [18500.000, 18625.000) = 1 
    [18625.000, 18750.000) = 0 
    [18750.000, 18875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  17448.305 ms/op
     p(50.0000) =  18085.839 ms/op
     p(90.0000) =  18555.601 ms/op
     p(95.0000) =  18555.601 ms/op
     p(99.0000) =  18555.601 ms/op
     p(99.9000) =  18555.601 ms/op
     p(99.9900) =  18555.601 ms/op
     p(99.9990) =  18555.601 ms/op
     p(99.9999) =  18555.601 ms/op
    p(100.0000) =  18555.601 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 14.58% complete, ETA 04:09:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_441606736 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_441606736() {
        this(4);
    }
    public KeyValueMap_441606736(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_441606736 aggregation_state_map = new KeyValueMap_441606736();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

51204.063 ms/op
# Warmup Iteration   2: 50264.539 ms/op
# Warmup Iteration   3: 51875.152 ms/op
# Warmup Iteration   4: 49660.559 ms/op
# Warmup Iteration   5: 49727.668 ms/op
Iteration   1: 46640.660 ms/op
                 executeQuery·p0.00:   46640.660 ms/op
                 executeQuery·p0.50:   46640.660 ms/op
                 executeQuery·p0.90:   46640.660 ms/op
                 executeQuery·p0.95:   46640.660 ms/op
                 executeQuery·p0.99:   46640.660 ms/op
                 executeQuery·p0.999:  46640.660 ms/op
                 executeQuery·p0.9999: 46640.660 ms/op
                 executeQuery·p1.00:   46640.660 ms/op

Iteration   2: 46103.790 ms/op
                 executeQuery·p0.00:   46103.790 ms/op
                 executeQuery·p0.50:   46103.790 ms/op
                 executeQuery·p0.90:   46103.790 ms/op
                 executeQuery·p0.95:   46103.790 ms/op
                 executeQuery·p0.99:   46103.790 ms/op
                 executeQuery·p0.999:  46103.790 ms/op
                 executeQuery·p0.9999: 46103.790 ms/op
                 executeQuery·p1.00:   46103.790 ms/op

Iteration   3: 48519.709 ms/op
                 executeQuery·p0.00:   48519.709 ms/op
                 executeQuery·p0.50:   48519.709 ms/op
                 executeQuery·p0.90:   48519.709 ms/op
                 executeQuery·p0.95:   48519.709 ms/op
                 executeQuery·p0.99:   48519.709 ms/op
                 executeQuery·p0.999:  48519.709 ms/op
                 executeQuery·p0.9999: 48519.709 ms/op
                 executeQuery·p1.00:   48519.709 ms/op

Iteration   4: 49190.797 ms/op
                 executeQuery·p0.00:   49190.797 ms/op
                 executeQuery·p0.50:   49190.797 ms/op
                 executeQuery·p0.90:   49190.797 ms/op
                 executeQuery·p0.95:   49190.797 ms/op
                 executeQuery·p0.99:   49190.797 ms/op
                 executeQuery·p0.999:  49190.797 ms/op
                 executeQuery·p0.9999: 49190.797 ms/op
                 executeQuery·p1.00:   49190.797 ms/op

Iteration   5: 46640.660 ms/op
                 executeQuery·p0.00:   46640.660 ms/op
                 executeQuery·p0.50:   46640.660 ms/op
                 executeQuery·p0.90:   46640.660 ms/op
                 executeQuery·p0.95:   46640.660 ms/op
                 executeQuery·p0.99:   46640.660 ms/op
                 executeQuery·p0.999:  46640.660 ms/op
                 executeQuery·p0.9999: 46640.660 ms/op
                 executeQuery·p1.00:   46640.660 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  47419.123 ±(99.9%) 5199.164 ms/op

  Histogram, ms/op:
    [46000.000, 46250.000) = 1 
    [46250.000, 46500.000) = 0 
    [46500.000, 46750.000) = 2 
    [46750.000, 47000.000) = 0 
    [47000.000, 47250.000) = 0 
    [47250.000, 47500.000) = 0 
    [47500.000, 47750.000) = 0 
    [47750.000, 48000.000) = 0 
    [48000.000, 48250.000) = 0 
    [48250.000, 48500.000) = 0 
    [48500.000, 48750.000) = 1 
    [48750.000, 49000.000) = 0 
    [49000.000, 49250.000) = 1 
    [49250.000, 49500.000) = 0 
    [49500.000, 49750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  46103.790 ms/op
     p(50.0000) =  46640.660 ms/op
     p(90.0000) =  49190.797 ms/op
     p(95.0000) =  49190.797 ms/op
     p(99.0000) =  49190.797 ms/op
     p(99.9000) =  49190.797 ms/op
     p(99.9900) =  49190.797 ms/op
     p(99.9990) =  49190.797 ms/op
     p(99.9999) =  49190.797 ms/op
    p(100.0000) =  49190.797 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 15.63% complete, ETA 05:01:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_741063961 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_741063961() {
        this(4);
    }
    public KeyValueMap_741063961(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_741063961 aggregation_state_map = new KeyValueMap_741063961();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

345.433 ±(99.9%) 27.415 ms/op
# Warmup Iteration   2: 326.259 ±(99.9%) 2.161 ms/op
# Warmup Iteration   3: 325.211 ±(99.9%) 1.312 ms/op
# Warmup Iteration   4: 325.448 ±(99.9%) 1.300 ms/op
# Warmup Iteration   5: 326.259 ±(99.9%) 1.613 ms/op
Iteration   1: 326.107 ±(99.9%) 3.292 ms/op
                 executeQuery·p0.00:   322.961 ms/op
                 executeQuery·p0.50:   325.059 ms/op
                 executeQuery·p0.90:   328.414 ms/op
                 executeQuery·p0.95:   338.480 ms/op
                 executeQuery·p0.99:   352.322 ms/op
                 executeQuery·p0.999:  352.322 ms/op
                 executeQuery·p0.9999: 352.322 ms/op
                 executeQuery·p1.00:   352.322 ms/op

Iteration   2: 325.363 ±(99.9%) 0.691 ms/op
                 executeQuery·p0.00:   324.010 ms/op
                 executeQuery·p0.50:   325.059 ms/op
                 executeQuery·p0.90:   326.527 ms/op
                 executeQuery·p0.95:   328.099 ms/op
                 executeQuery·p0.99:   328.729 ms/op
                 executeQuery·p0.999:  328.729 ms/op
                 executeQuery·p0.9999: 328.729 ms/op
                 executeQuery·p1.00:   328.729 ms/op

Iteration   3: 326.107 ±(99.9%) 2.248 ms/op
                 executeQuery·p0.00:   324.010 ms/op
                 executeQuery·p0.50:   325.583 ms/op
                 executeQuery·p0.90:   327.051 ms/op
                 executeQuery·p0.95:   334.496 ms/op
                 executeQuery·p0.99:   343.933 ms/op
                 executeQuery·p0.999:  343.933 ms/op
                 executeQuery·p0.9999: 343.933 ms/op
                 executeQuery·p1.00:   343.933 ms/op

Iteration   4: 325.617 ±(99.9%) 0.938 ms/op
                 executeQuery·p0.00:   322.961 ms/op
                 executeQuery·p0.50:   325.059 ms/op
                 executeQuery·p0.90:   327.575 ms/op
                 executeQuery·p0.95:   329.777 ms/op
                 executeQuery·p0.99:   329.777 ms/op
                 executeQuery·p0.999:  329.777 ms/op
                 executeQuery·p0.9999: 329.777 ms/op
                 executeQuery·p1.00:   329.777 ms/op

Iteration   5: 324.923 ±(99.9%) 1.509 ms/op
                 executeQuery·p0.00:   322.961 ms/op
                 executeQuery·p0.50:   324.534 ms/op
                 executeQuery·p0.90:   326.107 ms/op
                 executeQuery·p0.95:   330.406 ms/op
                 executeQuery·p0.99:   336.069 ms/op
                 executeQuery·p0.999:  336.069 ms/op
                 executeQuery·p0.9999: 336.069 ms/op
                 executeQuery·p1.00:   336.069 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 155
  mean =    325.623 ±(99.9%) 0.812 ms/op

  Histogram, ms/op:
    [320.000, 322.500) = 0 
    [322.500, 325.000) = 50 
    [325.000, 327.500) = 94 
    [327.500, 330.000) = 8 
    [330.000, 332.500) = 0 
    [332.500, 335.000) = 0 
    [335.000, 337.500) = 1 
    [337.500, 340.000) = 0 
    [340.000, 342.500) = 0 
    [342.500, 345.000) = 1 
    [345.000, 347.500) = 0 
    [347.500, 350.000) = 0 
    [350.000, 352.500) = 1 
    [352.500, 355.000) = 0 
    [355.000, 357.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    322.961 ms/op
     p(50.0000) =    325.059 ms/op
     p(90.0000) =    326.631 ms/op
     p(95.0000) =    328.729 ms/op
     p(99.0000) =    347.624 ms/op
     p(99.9000) =    352.322 ms/op
     p(99.9900) =    352.322 ms/op
     p(99.9990) =    352.322 ms/op
     p(99.9999) =    352.322 ms/op
    p(100.0000) =    352.322 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 16.67% complete, ETA 04:47:23
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_2125604252 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_2125604252() {
        this(4);
    }
    public KeyValueMap_2125604252(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_2125604252 aggregation_state_map = new KeyValueMap_2125604252();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

460.801 ±(99.9%) 30.450 ms/op
# Warmup Iteration   2: 444.528 ±(99.9%) 5.056 ms/op
# Warmup Iteration   3: 439.422 ±(99.9%) 1.738 ms/op
# Warmup Iteration   4: 440.448 ±(99.9%) 3.766 ms/op
# Warmup Iteration   5: 440.334 ±(99.9%) 2.611 ms/op
Iteration   1: 444.893 ±(99.9%) 10.615 ms/op
                 executeQuery·p0.00:   435.683 ms/op
                 executeQuery·p0.50:   442.499 ms/op
                 executeQuery·p0.90:   445.645 ms/op
                 executeQuery·p0.95:   493.040 ms/op
                 executeQuery·p0.99:   504.889 ms/op
                 executeQuery·p0.999:  504.889 ms/op
                 executeQuery·p0.9999: 504.889 ms/op
                 executeQuery·p1.00:   504.889 ms/op

Iteration   2: 438.989 ±(99.9%) 2.970 ms/op
                 executeQuery·p0.00:   435.683 ms/op
                 executeQuery·p0.50:   437.256 ms/op
                 executeQuery·p0.90:   446.693 ms/op
                 executeQuery·p0.95:   447.952 ms/op
                 executeQuery·p0.99:   448.266 ms/op
                 executeQuery·p0.999:  448.266 ms/op
                 executeQuery·p0.9999: 448.266 ms/op
                 executeQuery·p1.00:   448.266 ms/op

Iteration   3: 441.701 ±(99.9%) 2.225 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   440.926 ms/op
                 executeQuery·p0.90:   445.645 ms/op
                 executeQuery·p0.95:   446.484 ms/op
                 executeQuery·p0.99:   446.693 ms/op
                 executeQuery·p0.999:  446.693 ms/op
                 executeQuery·p0.9999: 446.693 ms/op
                 executeQuery·p1.00:   446.693 ms/op

Iteration   4: 443.046 ±(99.9%) 1.688 ms/op
                 executeQuery·p0.00:   438.305 ms/op
                 executeQuery·p0.50:   443.548 ms/op
                 executeQuery·p0.90:   445.645 ms/op
                 executeQuery·p0.95:   446.064 ms/op
                 executeQuery·p0.99:   446.169 ms/op
                 executeQuery·p0.999:  446.169 ms/op
                 executeQuery·p0.9999: 446.169 ms/op
                 executeQuery·p1.00:   446.169 ms/op

Iteration   5: 440.334 ±(99.9%) 2.431 ms/op
                 executeQuery·p0.00:   435.683 ms/op
                 executeQuery·p0.50:   439.878 ms/op
                 executeQuery·p0.90:   444.911 ms/op
                 executeQuery·p0.95:   447.637 ms/op
                 executeQuery·p0.99:   448.266 ms/op
                 executeQuery·p0.999:  448.266 ms/op
                 executeQuery·p0.9999: 448.266 ms/op
                 executeQuery·p1.00:   448.266 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 115
  mean =    441.792 ±(99.9%) 2.137 ms/op

  Histogram, ms/op:
    [430.000, 435.000) = 0 
    [435.000, 440.000) = 46 
    [440.000, 445.000) = 47 
    [445.000, 450.000) = 21 
    [450.000, 455.000) = 0 
    [455.000, 460.000) = 0 
    [460.000, 465.000) = 0 
    [465.000, 470.000) = 0 
    [470.000, 475.000) = 0 
    [475.000, 480.000) = 0 
    [480.000, 485.000) = 0 
    [485.000, 490.000) = 0 
    [490.000, 495.000) = 0 
    [495.000, 500.000) = 0 
    [500.000, 505.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    435.683 ms/op
     p(50.0000) =    441.450 ms/op
     p(90.0000) =    445.645 ms/op
     p(95.0000) =    446.693 ms/op
     p(99.0000) =    495.830 ms/op
     p(99.9000) =    504.889 ms/op
     p(99.9900) =    504.889 ms/op
     p(99.9990) =    504.889 ms/op
     p(99.9999) =    504.889 ms/op
    p(100.0000) =    504.889 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 17.71% complete, ETA 04:35:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1571377908 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1571377908() {
        this(4);
    }
    public KeyValueMap_1571377908(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1571377908 aggregation_state_map = new KeyValueMap_1571377908();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

672.766 ±(99.9%) 49.866 ms/op
# Warmup Iteration   2: 654.246 ±(99.9%) 7.257 ms/op
# Warmup Iteration   3: 652.870 ±(99.9%) 8.777 ms/op
# Warmup Iteration   4: 657.064 ±(99.9%) 6.285 ms/op
# Warmup Iteration   5: 656.081 ±(99.9%) 6.222 ms/op
Iteration   1: 624.034 ±(99.9%) 48.144 ms/op
                 executeQuery·p0.00:   555.745 ms/op
                 executeQuery·p0.50:   654.311 ms/op
                 executeQuery·p0.90:   656.409 ms/op
                 executeQuery·p0.95:   656.409 ms/op
                 executeQuery·p0.99:   656.409 ms/op
                 executeQuery·p0.999:  656.409 ms/op
                 executeQuery·p0.9999: 656.409 ms/op
                 executeQuery·p1.00:   656.409 ms/op

Iteration   2: 564.949 ±(99.9%) 7.944 ms/op
                 executeQuery·p0.00:   560.988 ms/op
                 executeQuery·p0.50:   563.085 ms/op
                 executeQuery·p0.90:   568.538 ms/op
                 executeQuery·p0.95:   598.737 ms/op
                 executeQuery·p0.99:   598.737 ms/op
                 executeQuery·p0.999:  598.737 ms/op
                 executeQuery·p0.9999: 598.737 ms/op
                 executeQuery·p1.00:   598.737 ms/op

Iteration   3: 546.639 ±(99.9%) 5.120 ms/op
                 executeQuery·p0.00:   542.114 ms/op
                 executeQuery·p0.50:   544.211 ms/op
                 executeQuery·p0.90:   558.891 ms/op
                 executeQuery·p0.95:   565.182 ms/op
                 executeQuery·p0.99:   565.182 ms/op
                 executeQuery·p0.999:  565.182 ms/op
                 executeQuery·p0.9999: 565.182 ms/op
                 executeQuery·p1.00:   565.182 ms/op

Iteration   4: 544.542 ±(99.9%) 1.914 ms/op
                 executeQuery·p0.00:   542.114 ms/op
                 executeQuery·p0.50:   544.211 ms/op
                 executeQuery·p0.90:   547.357 ms/op
                 executeQuery·p0.95:   548.405 ms/op
                 executeQuery·p0.99:   548.405 ms/op
                 executeQuery·p0.999:  548.405 ms/op
                 executeQuery·p0.9999: 548.405 ms/op
                 executeQuery·p1.00:   548.405 ms/op

Iteration   5: 543.218 ±(99.9%) 1.276 ms/op
                 executeQuery·p0.00:   541.065 ms/op
                 executeQuery·p0.50:   543.162 ms/op
                 executeQuery·p0.90:   545.260 ms/op
                 executeQuery·p0.95:   546.308 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 91
  mean =    562.717 ±(99.9%) 12.699 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 0 
    [537.500, 550.000) = 55 
    [550.000, 562.500) = 13 
    [562.500, 575.000) = 11 
    [575.000, 587.500) = 0 
    [587.500, 600.000) = 1 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 11 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    541.065 ms/op
     p(50.0000) =    546.308 ms/op
     p(90.0000) =    654.311 ms/op
     p(95.0000) =    655.779 ms/op
     p(99.0000) =    656.409 ms/op
     p(99.9000) =    656.409 ms/op
     p(99.9900) =    656.409 ms/op
     p(99.9990) =    656.409 ms/op
     p(99.9999) =    656.409 ms/op
    p(100.0000) =    656.409 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 18.75% complete, ETA 04:24:12
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1571377908 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1571377908() {
        this(4);
    }
    public KeyValueMap_1571377908(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1571377908 aggregation_state_map = new KeyValueMap_1571377908();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1296.040 ms/op
# Warmup Iteration   2: 976.749 ms/op
# Warmup Iteration   3: 918.028 ms/op
# Warmup Iteration   4: 913.834 ms/op
# Warmup Iteration   5: 914.883 ms/op
Iteration   1: 929.563 ms/op
                 executeQuery·p0.00:   919.601 ms/op
                 executeQuery·p0.50:   929.563 ms/op
                 executeQuery·p0.90:   939.524 ms/op
                 executeQuery·p0.95:   939.524 ms/op
                 executeQuery·p0.99:   939.524 ms/op
                 executeQuery·p0.999:  939.524 ms/op
                 executeQuery·p0.9999: 939.524 ms/op
                 executeQuery·p1.00:   939.524 ms/op

Iteration   2: 920.650 ms/op
                 executeQuery·p0.00:   914.358 ms/op
                 executeQuery·p0.50:   920.650 ms/op
                 executeQuery·p0.90:   926.941 ms/op
                 executeQuery·p0.95:   926.941 ms/op
                 executeQuery·p0.99:   926.941 ms/op
                 executeQuery·p0.999:  926.941 ms/op
                 executeQuery·p0.9999: 926.941 ms/op
                 executeQuery·p1.00:   926.941 ms/op

Iteration   3: 904.921 ms/op
                 executeQuery·p0.00:   902.824 ms/op
                 executeQuery·p0.50:   904.921 ms/op
                 executeQuery·p0.90:   907.018 ms/op
                 executeQuery·p0.95:   907.018 ms/op
                 executeQuery·p0.99:   907.018 ms/op
                 executeQuery·p0.999:  907.018 ms/op
                 executeQuery·p0.9999: 907.018 ms/op
                 executeQuery·p1.00:   907.018 ms/op

Iteration   4: 912.785 ms/op
                 executeQuery·p0.00:   901.775 ms/op
                 executeQuery·p0.50:   912.785 ms/op
                 executeQuery·p0.90:   923.795 ms/op
                 executeQuery·p0.95:   923.795 ms/op
                 executeQuery·p0.99:   923.795 ms/op
                 executeQuery·p0.999:  923.795 ms/op
                 executeQuery·p0.9999: 923.795 ms/op
                 executeQuery·p1.00:   923.795 ms/op

Iteration   5: 900.727 ms/op
                 executeQuery·p0.00:   895.484 ms/op
                 executeQuery·p0.50:   900.727 ms/op
                 executeQuery·p0.90:   905.970 ms/op
                 executeQuery·p0.95:   905.970 ms/op
                 executeQuery·p0.99:   905.970 ms/op
                 executeQuery·p0.999:  905.970 ms/op
                 executeQuery·p0.9999: 905.970 ms/op
                 executeQuery·p1.00:   905.970 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =    913.729 ±(99.9%) 20.632 ms/op

  Histogram, ms/op:
    [890.000, 895.000) = 0 
    [895.000, 900.000) = 1 
    [900.000, 905.000) = 2 
    [905.000, 910.000) = 2 
    [910.000, 915.000) = 1 
    [915.000, 920.000) = 1 
    [920.000, 925.000) = 1 
    [925.000, 930.000) = 1 
    [930.000, 935.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    895.484 ms/op
     p(50.0000) =    910.688 ms/op
     p(90.0000) =    938.266 ms/op
     p(95.0000) =    939.524 ms/op
     p(99.0000) =    939.524 ms/op
     p(99.9000) =    939.524 ms/op
     p(99.9900) =    939.524 ms/op
     p(99.9990) =    939.524 ms/op
     p(99.9999) =    939.524 ms/op
    p(100.0000) =    939.524 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 19.79% complete, ETA 04:18:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_741063961 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_741063961() {
        this(4);
    }
    public KeyValueMap_741063961(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_741063961 aggregation_state_map = new KeyValueMap_741063961();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2789.212 ms/op
# Warmup Iteration   2: 2654.994 ms/op
# Warmup Iteration   3: 2600.468 ms/op
# Warmup Iteration   4: 2810.184 ms/op
# Warmup Iteration   5: 2600.468 ms/op
Iteration   1: 2424.308 ms/op
                 executeQuery·p0.00:   2424.308 ms/op
                 executeQuery·p0.50:   2424.308 ms/op
                 executeQuery·p0.90:   2424.308 ms/op
                 executeQuery·p0.95:   2424.308 ms/op
                 executeQuery·p0.99:   2424.308 ms/op
                 executeQuery·p0.999:  2424.308 ms/op
                 executeQuery·p0.9999: 2424.308 ms/op
                 executeQuery·p1.00:   2424.308 ms/op

Iteration   2: 2592.080 ms/op
                 executeQuery·p0.00:   2592.080 ms/op
                 executeQuery·p0.50:   2592.080 ms/op
                 executeQuery·p0.90:   2592.080 ms/op
                 executeQuery·p0.95:   2592.080 ms/op
                 executeQuery·p0.99:   2592.080 ms/op
                 executeQuery·p0.999:  2592.080 ms/op
                 executeQuery·p0.9999: 2592.080 ms/op
                 executeQuery·p1.00:   2592.080 ms/op

Iteration   3: 2466.251 ms/op
                 executeQuery·p0.00:   2466.251 ms/op
                 executeQuery·p0.50:   2466.251 ms/op
                 executeQuery·p0.90:   2466.251 ms/op
                 executeQuery·p0.95:   2466.251 ms/op
                 executeQuery·p0.99:   2466.251 ms/op
                 executeQuery·p0.999:  2466.251 ms/op
                 executeQuery·p0.9999: 2466.251 ms/op
                 executeQuery·p1.00:   2466.251 ms/op

Iteration   4: 2445.279 ms/op
                 executeQuery·p0.00:   2445.279 ms/op
                 executeQuery·p0.50:   2445.279 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   5: 2415.919 ms/op
                 executeQuery·p0.00:   2415.919 ms/op
                 executeQuery·p0.50:   2415.919 ms/op
                 executeQuery·p0.90:   2415.919 ms/op
                 executeQuery·p0.95:   2415.919 ms/op
                 executeQuery·p0.99:   2415.919 ms/op
                 executeQuery·p0.999:  2415.919 ms/op
                 executeQuery·p0.9999: 2415.919 ms/op
                 executeQuery·p1.00:   2415.919 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   2468.767 ±(99.9%) 275.890 ms/op

  Histogram, ms/op:
    [2400.000, 2412.500) = 0 
    [2412.500, 2425.000) = 2 
    [2425.000, 2437.500) = 0 
    [2437.500, 2450.000) = 1 
    [2450.000, 2462.500) = 0 
    [2462.500, 2475.000) = 1 
    [2475.000, 2487.500) = 0 
    [2487.500, 2500.000) = 0 
    [2500.000, 2512.500) = 0 
    [2512.500, 2525.000) = 0 
    [2525.000, 2537.500) = 0 
    [2537.500, 2550.000) = 0 
    [2550.000, 2562.500) = 0 
    [2562.500, 2575.000) = 0 
    [2575.000, 2587.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2415.919 ms/op
     p(50.0000) =   2445.279 ms/op
     p(90.0000) =   2592.080 ms/op
     p(95.0000) =   2592.080 ms/op
     p(99.0000) =   2592.080 ms/op
     p(99.9000) =   2592.080 ms/op
     p(99.9900) =   2592.080 ms/op
     p(99.9990) =   2592.080 ms/op
     p(99.9999) =   2592.080 ms/op
    p(100.0000) =   2592.080 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 20.83% complete, ETA 04:22:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1571377908 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1571377908() {
        this(4);
    }
    public KeyValueMap_1571377908(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1571377908 aggregation_state_map = new KeyValueMap_1571377908();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3739.921 ±(99.9%) 7236.004 ms/op
# Warmup Iteration   2: 3409.969 ±(99.9%) 5169.472 ms/op
# Warmup Iteration   3: 3263.169 ±(99.9%) 257.127 ms/op
# Warmup Iteration   4: 3274.703 ±(99.9%) 366.567 ms/op
# Warmup Iteration   5: 3256.877 ±(99.9%) 92.576 ms/op
Iteration   1: 3275.751 ±(99.9%) 380.094 ms/op
                 executeQuery·p0.00:   3242.197 ms/op
                 executeQuery·p0.50:   3248.488 ms/op
                 executeQuery·p0.90:   3363.832 ms/op
                 executeQuery·p0.95:   3363.832 ms/op
                 executeQuery·p0.99:   3363.832 ms/op
                 executeQuery·p0.999:  3363.832 ms/op
                 executeQuery·p0.9999: 3363.832 ms/op
                 executeQuery·p1.00:   3363.832 ms/op

Iteration   2: 3271.557 ±(99.9%) 217.955 ms/op
                 executeQuery·p0.00:   3250.586 ms/op
                 executeQuery·p0.50:   3256.877 ms/op
                 executeQuery·p0.90:   3321.889 ms/op
                 executeQuery·p0.95:   3321.889 ms/op
                 executeQuery·p0.99:   3321.889 ms/op
                 executeQuery·p0.999:  3321.889 ms/op
                 executeQuery·p0.9999: 3321.889 ms/op
                 executeQuery·p1.00:   3321.889 ms/op

Iteration   3: 3236.954 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3238.003 ms/op
                 executeQuery·p0.90:   3238.003 ms/op
                 executeQuery·p0.95:   3238.003 ms/op
                 executeQuery·p0.99:   3238.003 ms/op
                 executeQuery·p0.999:  3238.003 ms/op
                 executeQuery·p0.9999: 3238.003 ms/op
                 executeQuery·p1.00:   3238.003 ms/op

Iteration   4: 3247.440 ±(99.9%) 60.098 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3250.586 ms/op
                 executeQuery·p0.90:   3254.780 ms/op
                 executeQuery·p0.95:   3254.780 ms/op
                 executeQuery·p0.99:   3254.780 ms/op
                 executeQuery·p0.999:  3254.780 ms/op
                 executeQuery·p0.9999: 3254.780 ms/op
                 executeQuery·p1.00:   3254.780 ms/op

Iteration   5: 3263.169 ±(99.9%) 231.044 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3252.683 ms/op
                 executeQuery·p0.90:   3313.500 ms/op
                 executeQuery·p0.95:   3313.500 ms/op
                 executeQuery·p0.99:   3313.500 ms/op
                 executeQuery·p0.999:  3313.500 ms/op
                 executeQuery·p0.9999: 3313.500 ms/op
                 executeQuery·p1.00:   3313.500 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   3258.974 ±(99.9%) 29.683 ms/op

  Histogram, ms/op:
    [3200.000, 3212.500) = 0 
    [3212.500, 3225.000) = 0 
    [3225.000, 3237.500) = 3 
    [3237.500, 3250.000) = 6 
    [3250.000, 3262.500) = 7 
    [3262.500, 3275.000) = 1 
    [3275.000, 3287.500) = 0 
    [3287.500, 3300.000) = 0 
    [3300.000, 3312.500) = 0 
    [3312.500, 3325.000) = 2 
    [3325.000, 3337.500) = 0 
    [3337.500, 3350.000) = 0 
    [3350.000, 3362.500) = 0 
    [3362.500, 3375.000) = 1 
    [3375.000, 3387.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3233.808 ms/op
     p(50.0000) =   3250.586 ms/op
     p(90.0000) =   3321.050 ms/op
     p(95.0000) =   3361.735 ms/op
     p(99.0000) =   3363.832 ms/op
     p(99.9000) =   3363.832 ms/op
     p(99.9900) =   3363.832 ms/op
     p(99.9990) =   3363.832 ms/op
     p(99.9999) =   3363.832 ms/op
    p(100.0000) =   3363.832 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 21.88% complete, ETA 04:14:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1571377908 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1571377908() {
        this(4);
    }
    public KeyValueMap_1571377908(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1571377908 aggregation_state_map = new KeyValueMap_1571377908();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4276.792 ±(99.9%) 4059.393 ms/op
# Warmup Iteration   2: 4518.664 ±(99.9%) 4830.651 ms/op
# Warmup Iteration   3: 4348.095 ±(99.9%) 385.141 ms/op
# Warmup Iteration   4: 4356.484 ±(99.9%) 922.478 ms/op
# Warmup Iteration   5: 4327.124 ±(99.9%) 839.395 ms/op
Iteration   1: 4479.517 ±(99.9%) 2519.347 ms/op
                 executeQuery·p0.00:   4395.631 ms/op
                 executeQuery·p0.50:   4404.019 ms/op
                 executeQuery·p0.90:   4638.900 ms/op
                 executeQuery·p0.95:   4638.900 ms/op
                 executeQuery·p0.99:   4638.900 ms/op
                 executeQuery·p0.999:  4638.900 ms/op
                 executeQuery·p0.9999: 4638.900 ms/op
                 executeQuery·p1.00:   4638.900 ms/op

Iteration   2: 4384.446 ±(99.9%) 353.429 ms/op
                 executeQuery·p0.00:   4362.076 ms/op
                 executeQuery·p0.50:   4395.631 ms/op
                 executeQuery·p0.90:   4395.631 ms/op
                 executeQuery·p0.95:   4395.631 ms/op
                 executeQuery·p0.99:   4395.631 ms/op
                 executeQuery·p0.999:  4395.631 ms/op
                 executeQuery·p0.9999: 4395.631 ms/op
                 executeQuery·p1.00:   4395.631 ms/op

Iteration   3: 4359.280 ±(99.9%) 842.876 ms/op
                 executeQuery·p0.00:   4311.745 ms/op
                 executeQuery·p0.50:   4362.076 ms/op
                 executeQuery·p0.90:   4404.019 ms/op
                 executeQuery·p0.95:   4404.019 ms/op
                 executeQuery·p0.99:   4404.019 ms/op
                 executeQuery·p0.999:  4404.019 ms/op
                 executeQuery·p0.9999: 4404.019 ms/op
                 executeQuery·p1.00:   4404.019 ms/op

Iteration   4: 4373.261 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   4370.465 ms/op
                 executeQuery·p0.50:   4370.465 ms/op
                 executeQuery·p0.90:   4378.853 ms/op
                 executeQuery·p0.95:   4378.853 ms/op
                 executeQuery·p0.99:   4378.853 ms/op
                 executeQuery·p0.999:  4378.853 ms/op
                 executeQuery·p0.9999: 4378.853 ms/op
                 executeQuery·p1.00:   4378.853 ms/op

Iteration   5: 4373.261 ±(99.9%) 385.141 ms/op
                 executeQuery·p0.00:   4353.688 ms/op
                 executeQuery·p0.50:   4370.465 ms/op
                 executeQuery·p0.90:   4395.631 ms/op
                 executeQuery·p0.95:   4395.631 ms/op
                 executeQuery·p0.99:   4395.631 ms/op
                 executeQuery·p0.999:  4395.631 ms/op
                 executeQuery·p0.9999: 4395.631 ms/op
                 executeQuery·p1.00:   4395.631 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4393.953 ±(99.9%) 76.936 ms/op

  Histogram, ms/op:
    [4300.000, 4325.000) = 1 
    [4325.000, 4350.000) = 0 
    [4350.000, 4375.000) = 6 
    [4375.000, 4400.000) = 5 
    [4400.000, 4425.000) = 2 
    [4425.000, 4450.000) = 0 
    [4450.000, 4475.000) = 0 
    [4475.000, 4500.000) = 0 
    [4500.000, 4525.000) = 0 
    [4525.000, 4550.000) = 0 
    [4550.000, 4575.000) = 0 
    [4575.000, 4600.000) = 0 
    [4600.000, 4625.000) = 0 
    [4625.000, 4650.000) = 1 
    [4650.000, 4675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4311.745 ms/op
     p(50.0000) =   4378.853 ms/op
     p(90.0000) =   4497.972 ms/op
     p(95.0000) =   4638.900 ms/op
     p(99.0000) =   4638.900 ms/op
     p(99.9000) =   4638.900 ms/op
     p(99.9900) =   4638.900 ms/op
     p(99.9990) =   4638.900 ms/op
     p(99.9999) =   4638.900 ms/op
    p(100.0000) =   4638.900 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 22.92% complete, ETA 04:07:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1571377908 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1571377908() {
        this(4);
    }
    public KeyValueMap_1571377908(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1571377908 aggregation_state_map = new KeyValueMap_1571377908();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6727.664 ms/op
# Warmup Iteration   2: 6438.257 ms/op
# Warmup Iteration   3: 6232.736 ms/op
# Warmup Iteration   4: 6245.319 ms/op
# Warmup Iteration   5: 6106.907 ms/op
Iteration   1: 6073.352 ms/op
                 executeQuery·p0.00:   6073.352 ms/op
                 executeQuery·p0.50:   6073.352 ms/op
                 executeQuery·p0.90:   6073.352 ms/op
                 executeQuery·p0.95:   6073.352 ms/op
                 executeQuery·p0.99:   6073.352 ms/op
                 executeQuery·p0.999:  6073.352 ms/op
                 executeQuery·p0.9999: 6073.352 ms/op
                 executeQuery·p1.00:   6073.352 ms/op

Iteration   2: 6304.039 ms/op
                 executeQuery·p0.00:   6266.290 ms/op
                 executeQuery·p0.50:   6304.039 ms/op
                 executeQuery·p0.90:   6341.788 ms/op
                 executeQuery·p0.95:   6341.788 ms/op
                 executeQuery·p0.99:   6341.788 ms/op
                 executeQuery·p0.999:  6341.788 ms/op
                 executeQuery·p0.9999: 6341.788 ms/op
                 executeQuery·p1.00:   6341.788 ms/op

Iteration   3: 6366.953 ms/op
                 executeQuery·p0.00:   6333.399 ms/op
                 executeQuery·p0.50:   6366.953 ms/op
                 executeQuery·p0.90:   6400.508 ms/op
                 executeQuery·p0.95:   6400.508 ms/op
                 executeQuery·p0.99:   6400.508 ms/op
                 executeQuery·p0.999:  6400.508 ms/op
                 executeQuery·p0.9999: 6400.508 ms/op
                 executeQuery·p1.00:   6400.508 ms/op

Iteration   4: 6354.371 ms/op
                 executeQuery·p0.00:   6333.399 ms/op
                 executeQuery·p0.50:   6354.371 ms/op
                 executeQuery·p0.90:   6375.342 ms/op
                 executeQuery·p0.95:   6375.342 ms/op
                 executeQuery·p0.99:   6375.342 ms/op
                 executeQuery·p0.999:  6375.342 ms/op
                 executeQuery·p0.9999: 6375.342 ms/op
                 executeQuery·p1.00:   6375.342 ms/op

Iteration   5: 6270.484 ms/op
                 executeQuery·p0.00:   6257.902 ms/op
                 executeQuery·p0.50:   6270.484 ms/op
                 executeQuery·p0.90:   6283.067 ms/op
                 executeQuery·p0.95:   6283.067 ms/op
                 executeQuery·p0.99:   6283.067 ms/op
                 executeQuery·p0.999:  6283.067 ms/op
                 executeQuery·p0.9999: 6283.067 ms/op
                 executeQuery·p1.00:   6283.067 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   6273.840 ±(99.9%) 173.733 ms/op

  Histogram, ms/op:
    [6000.000, 6050.000) = 0 
    [6050.000, 6100.000) = 2 
    [6100.000, 6150.000) = 0 
    [6150.000, 6200.000) = 0 
    [6200.000, 6250.000) = 0 
    [6250.000, 6300.000) = 3 
    [6300.000, 6350.000) = 3 
    [6350.000, 6400.000) = 1 
    [6400.000, 6450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6073.352 ms/op
     p(50.0000) =   6308.233 ms/op
     p(90.0000) =   6397.991 ms/op
     p(95.0000) =   6400.508 ms/op
     p(99.0000) =   6400.508 ms/op
     p(99.9000) =   6400.508 ms/op
     p(99.9900) =   6400.508 ms/op
     p(99.9990) =   6400.508 ms/op
     p(99.9999) =   6400.508 ms/op
    p(100.0000) =   6400.508 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 23.96% complete, ETA 04:00:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_2125604252 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_2125604252() {
        this(4);
    }
    public KeyValueMap_2125604252(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_2125604252 aggregation_state_map = new KeyValueMap_2125604252();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10787.750 ms/op
# Warmup Iteration   2: 9848.226 ms/op
# Warmup Iteration   3: 8673.821 ms/op
# Warmup Iteration   4: 9680.454 ms/op
# Warmup Iteration   5: 8623.489 ms/op
Iteration   1: 9009.365 ms/op
                 executeQuery·p0.00:   9009.365 ms/op
                 executeQuery·p0.50:   9009.365 ms/op
                 executeQuery·p0.90:   9009.365 ms/op
                 executeQuery·p0.95:   9009.365 ms/op
                 executeQuery·p0.99:   9009.365 ms/op
                 executeQuery·p0.999:  9009.365 ms/op
                 executeQuery·p0.9999: 9009.365 ms/op
                 executeQuery·p1.00:   9009.365 ms/op

Iteration   2: 9059.697 ms/op
                 executeQuery·p0.00:   9059.697 ms/op
                 executeQuery·p0.50:   9059.697 ms/op
                 executeQuery·p0.90:   9059.697 ms/op
                 executeQuery·p0.95:   9059.697 ms/op
                 executeQuery·p0.99:   9059.697 ms/op
                 executeQuery·p0.999:  9059.697 ms/op
                 executeQuery·p0.9999: 9059.697 ms/op
                 executeQuery·p1.00:   9059.697 ms/op

Iteration   3: 9210.692 ms/op
                 executeQuery·p0.00:   9210.692 ms/op
                 executeQuery·p0.50:   9210.692 ms/op
                 executeQuery·p0.90:   9210.692 ms/op
                 executeQuery·p0.95:   9210.692 ms/op
                 executeQuery·p0.99:   9210.692 ms/op
                 executeQuery·p0.999:  9210.692 ms/op
                 executeQuery·p0.9999: 9210.692 ms/op
                 executeQuery·p1.00:   9210.692 ms/op

Iteration   4: 9378.464 ms/op
                 executeQuery·p0.00:   9378.464 ms/op
                 executeQuery·p0.50:   9378.464 ms/op
                 executeQuery·p0.90:   9378.464 ms/op
                 executeQuery·p0.95:   9378.464 ms/op
                 executeQuery·p0.99:   9378.464 ms/op
                 executeQuery·p0.999:  9378.464 ms/op
                 executeQuery·p0.9999: 9378.464 ms/op
                 executeQuery·p1.00:   9378.464 ms/op

Iteration   5: 9160.360 ms/op
                 executeQuery·p0.00:   9160.360 ms/op
                 executeQuery·p0.50:   9160.360 ms/op
                 executeQuery·p0.90:   9160.360 ms/op
                 executeQuery·p0.95:   9160.360 ms/op
                 executeQuery·p0.99:   9160.360 ms/op
                 executeQuery·p0.999:  9160.360 ms/op
                 executeQuery·p0.9999: 9160.360 ms/op
                 executeQuery·p1.00:   9160.360 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   9163.715 ±(99.9%) 554.609 ms/op

  Histogram, ms/op:
    [9000.000, 9025.000) = 1 
    [9025.000, 9050.000) = 0 
    [9050.000, 9075.000) = 1 
    [9075.000, 9100.000) = 0 
    [9100.000, 9125.000) = 0 
    [9125.000, 9150.000) = 0 
    [9150.000, 9175.000) = 1 
    [9175.000, 9200.000) = 0 
    [9200.000, 9225.000) = 1 
    [9225.000, 9250.000) = 0 
    [9250.000, 9275.000) = 0 
    [9275.000, 9300.000) = 0 
    [9300.000, 9325.000) = 0 
    [9325.000, 9350.000) = 0 
    [9350.000, 9375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   9009.365 ms/op
     p(50.0000) =   9160.360 ms/op
     p(90.0000) =   9378.464 ms/op
     p(95.0000) =   9378.464 ms/op
     p(99.0000) =   9378.464 ms/op
     p(99.9000) =   9378.464 ms/op
     p(99.9900) =   9378.464 ms/op
     p(99.9990) =   9378.464 ms/op
     p(99.9999) =   9378.464 ms/op
    p(100.0000) =   9378.464 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 25.00% complete, ETA 03:55:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1571377908 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1571377908() {
        this(4);
    }
    public KeyValueMap_1571377908(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1571377908 aggregation_state_map = new KeyValueMap_1571377908();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

26944.209 ms/op
# Warmup Iteration   2: 28085.060 ms/op
# Warmup Iteration   3: 41137.734 ms/op
# Warmup Iteration   4: 25904.022 ms/op
# Warmup Iteration   5: 26440.892 ms/op
Iteration   1: 24796.725 ms/op
                 executeQuery·p0.00:   24796.725 ms/op
                 executeQuery·p0.50:   24796.725 ms/op
                 executeQuery·p0.90:   24796.725 ms/op
                 executeQuery·p0.95:   24796.725 ms/op
                 executeQuery·p0.99:   24796.725 ms/op
                 executeQuery·p0.999:  24796.725 ms/op
                 executeQuery·p0.9999: 24796.725 ms/op
                 executeQuery·p1.00:   24796.725 ms/op

Iteration   2: 24628.953 ms/op
                 executeQuery·p0.00:   24628.953 ms/op
                 executeQuery·p0.50:   24628.953 ms/op
                 executeQuery·p0.90:   24628.953 ms/op
                 executeQuery·p0.95:   24628.953 ms/op
                 executeQuery·p0.99:   24628.953 ms/op
                 executeQuery·p0.999:  24628.953 ms/op
                 executeQuery·p0.9999: 24628.953 ms/op
                 executeQuery·p1.00:   24628.953 ms/op

Iteration   3: 25367.151 ms/op
                 executeQuery·p0.00:   25367.151 ms/op
                 executeQuery·p0.50:   25367.151 ms/op
                 executeQuery·p0.90:   25367.151 ms/op
                 executeQuery·p0.95:   25367.151 ms/op
                 executeQuery·p0.99:   25367.151 ms/op
                 executeQuery·p0.999:  25367.151 ms/op
                 executeQuery·p0.9999: 25367.151 ms/op
                 executeQuery·p1.00:   25367.151 ms/op

Iteration   4: 25971.130 ms/op
                 executeQuery·p0.00:   25971.130 ms/op
                 executeQuery·p0.50:   25971.130 ms/op
                 executeQuery·p0.90:   25971.130 ms/op
                 executeQuery·p0.95:   25971.130 ms/op
                 executeQuery·p0.99:   25971.130 ms/op
                 executeQuery·p0.999:  25971.130 ms/op
                 executeQuery·p0.9999: 25971.130 ms/op
                 executeQuery·p1.00:   25971.130 ms/op

Iteration   5: 39728.447 ms/op
                 executeQuery·p0.00:   39728.447 ms/op
                 executeQuery·p0.50:   39728.447 ms/op
                 executeQuery·p0.90:   39728.447 ms/op
                 executeQuery·p0.95:   39728.447 ms/op
                 executeQuery·p0.99:   39728.447 ms/op
                 executeQuery·p0.999:  39728.447 ms/op
                 executeQuery·p0.9999: 39728.447 ms/op
                 executeQuery·p1.00:   39728.447 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  28098.481 ±(99.9%) 25116.496 ms/op

  Histogram, ms/op:
    [20000.000, 21250.000) = 0 
    [21250.000, 22500.000) = 0 
    [22500.000, 23750.000) = 0 
    [23750.000, 25000.000) = 2 
    [25000.000, 26250.000) = 2 
    [26250.000, 27500.000) = 0 
    [27500.000, 28750.000) = 0 
    [28750.000, 30000.000) = 0 
    [30000.000, 31250.000) = 0 
    [31250.000, 32500.000) = 0 
    [32500.000, 33750.000) = 0 
    [33750.000, 35000.000) = 0 
    [35000.000, 36250.000) = 0 
    [36250.000, 37500.000) = 0 
    [37500.000, 38750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  24628.953 ms/op
     p(50.0000) =  25367.151 ms/op
     p(90.0000) =  39728.447 ms/op
     p(95.0000) =  39728.447 ms/op
     p(99.0000) =  39728.447 ms/op
     p(99.9000) =  39728.447 ms/op
     p(99.9900) =  39728.447 ms/op
     p(99.9990) =  39728.447 ms/op
     p(99.9999) =  39728.447 ms/op
    p(100.0000) =  39728.447 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 26.04% complete, ETA 04:10:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_973779437 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_973779437() {
        this(4);
    }
    public KeyValueMap_973779437(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_973779437 aggregation_state_map = new KeyValueMap_973779437();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7428.112 ms/op
# Warmup Iteration   2: 7394.558 ms/op
# Warmup Iteration   3: 6685.721 ms/op
# Warmup Iteration   4: 6685.721 ms/op
# Warmup Iteration   5: 6811.550 ms/op
Iteration   1: 6916.407 ms/op
                 executeQuery·p0.00:   6710.886 ms/op
                 executeQuery·p0.50:   6916.407 ms/op
                 executeQuery·p0.90:   7121.928 ms/op
                 executeQuery·p0.95:   7121.928 ms/op
                 executeQuery·p0.99:   7121.928 ms/op
                 executeQuery·p0.999:  7121.928 ms/op
                 executeQuery·p0.9999: 7121.928 ms/op
                 executeQuery·p1.00:   7121.928 ms/op

Iteration   2: 6668.943 ms/op
                 executeQuery·p0.00:   6635.389 ms/op
                 executeQuery·p0.50:   6668.943 ms/op
                 executeQuery·p0.90:   6702.498 ms/op
                 executeQuery·p0.95:   6702.498 ms/op
                 executeQuery·p0.99:   6702.498 ms/op
                 executeQuery·p0.999:  6702.498 ms/op
                 executeQuery·p0.9999: 6702.498 ms/op
                 executeQuery·p1.00:   6702.498 ms/op

Iteration   3: 6681.526 ms/op
                 executeQuery·p0.00:   6643.778 ms/op
                 executeQuery·p0.50:   6681.526 ms/op
                 executeQuery·p0.90:   6719.275 ms/op
                 executeQuery·p0.95:   6719.275 ms/op
                 executeQuery·p0.99:   6719.275 ms/op
                 executeQuery·p0.999:  6719.275 ms/op
                 executeQuery·p0.9999: 6719.275 ms/op
                 executeQuery·p1.00:   6719.275 ms/op

Iteration   4: 6832.521 ms/op
                 executeQuery·p0.00:   6668.943 ms/op
                 executeQuery·p0.50:   6832.521 ms/op
                 executeQuery·p0.90:   6996.099 ms/op
                 executeQuery·p0.95:   6996.099 ms/op
                 executeQuery·p0.99:   6996.099 ms/op
                 executeQuery·p0.999:  6996.099 ms/op
                 executeQuery·p0.9999: 6996.099 ms/op
                 executeQuery·p1.00:   6996.099 ms/op

Iteration   5: 6673.138 ms/op
                 executeQuery·p0.00:   6668.943 ms/op
                 executeQuery·p0.50:   6673.138 ms/op
                 executeQuery·p0.90:   6677.332 ms/op
                 executeQuery·p0.95:   6677.332 ms/op
                 executeQuery·p0.99:   6677.332 ms/op
                 executeQuery·p0.999:  6677.332 ms/op
                 executeQuery·p0.9999: 6677.332 ms/op
                 executeQuery·p1.00:   6677.332 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   6754.507 ±(99.9%) 250.086 ms/op

  Histogram, ms/op:
    [6600.000, 6650.000) = 2 
    [6650.000, 6700.000) = 3 
    [6700.000, 6750.000) = 3 
    [6750.000, 6800.000) = 0 
    [6800.000, 6850.000) = 0 
    [6850.000, 6900.000) = 0 
    [6900.000, 6950.000) = 0 
    [6950.000, 7000.000) = 1 
    [7000.000, 7050.000) = 0 
    [7050.000, 7100.000) = 0 
    [7100.000, 7150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6635.389 ms/op
     p(50.0000) =   6689.915 ms/op
     p(90.0000) =   7109.345 ms/op
     p(95.0000) =   7121.928 ms/op
     p(99.0000) =   7121.928 ms/op
     p(99.9000) =   7121.928 ms/op
     p(99.9900) =   7121.928 ms/op
     p(99.9990) =   7121.928 ms/op
     p(99.9999) =   7121.928 ms/op
    p(100.0000) =   7121.928 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 27.08% complete, ETA 04:03:40
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1571377908 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1571377908() {
        this(4);
    }
    public KeyValueMap_1571377908(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1571377908 aggregation_state_map = new KeyValueMap_1571377908();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10015.998 ms/op
# Warmup Iteration   2: 10670.309 ms/op
# Warmup Iteration   3: 10569.646 ms/op
# Warmup Iteration   4: 10385.097 ms/op
# Warmup Iteration   5: 10217.325 ms/op
Iteration   1: 10284.433 ms/op
                 executeQuery·p0.00:   10284.433 ms/op
                 executeQuery·p0.50:   10284.433 ms/op
                 executeQuery·p0.90:   10284.433 ms/op
                 executeQuery·p0.95:   10284.433 ms/op
                 executeQuery·p0.99:   10284.433 ms/op
                 executeQuery·p0.999:  10284.433 ms/op
                 executeQuery·p0.9999: 10284.433 ms/op
                 executeQuery·p1.00:   10284.433 ms/op

Iteration   2: 10234.102 ms/op
                 executeQuery·p0.00:   10234.102 ms/op
                 executeQuery·p0.50:   10234.102 ms/op
                 executeQuery·p0.90:   10234.102 ms/op
                 executeQuery·p0.95:   10234.102 ms/op
                 executeQuery·p0.99:   10234.102 ms/op
                 executeQuery·p0.999:  10234.102 ms/op
                 executeQuery·p0.9999: 10234.102 ms/op
                 executeQuery·p1.00:   10234.102 ms/op

Iteration   3: 10468.983 ms/op
                 executeQuery·p0.00:   10468.983 ms/op
                 executeQuery·p0.50:   10468.983 ms/op
                 executeQuery·p0.90:   10468.983 ms/op
                 executeQuery·p0.95:   10468.983 ms/op
                 executeQuery·p0.99:   10468.983 ms/op
                 executeQuery·p0.999:  10468.983 ms/op
                 executeQuery·p0.9999: 10468.983 ms/op
                 executeQuery·p1.00:   10468.983 ms/op

Iteration   4: 10317.988 ms/op
                 executeQuery·p0.00:   10317.988 ms/op
                 executeQuery·p0.50:   10317.988 ms/op
                 executeQuery·p0.90:   10317.988 ms/op
                 executeQuery·p0.95:   10317.988 ms/op
                 executeQuery·p0.99:   10317.988 ms/op
                 executeQuery·p0.999:  10317.988 ms/op
                 executeQuery·p0.9999: 10317.988 ms/op
                 executeQuery·p1.00:   10317.988 ms/op

Iteration   5: 9101.640 ms/op
                 executeQuery·p0.00:   8740.930 ms/op
                 executeQuery·p0.50:   9101.640 ms/op
                 executeQuery·p0.90:   9462.350 ms/op
                 executeQuery·p0.95:   9462.350 ms/op
                 executeQuery·p0.99:   9462.350 ms/op
                 executeQuery·p0.999:  9462.350 ms/op
                 executeQuery·p0.9999: 9462.350 ms/op
                 executeQuery·p1.00:   9462.350 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 6
  mean =   9918.131 ±(99.9%) 1898.117 ms/op

  Histogram, ms/op:
    [ 8000.000,  8250.000) = 0 
    [ 8250.000,  8500.000) = 0 
    [ 8500.000,  8750.000) = 1 
    [ 8750.000,  9000.000) = 0 
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 1 
    [ 9500.000,  9750.000) = 0 
    [ 9750.000, 10000.000) = 0 
    [10000.000, 10250.000) = 1 
    [10250.000, 10500.000) = 3 
    [10500.000, 10750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8740.930 ms/op
     p(50.0000) =  10259.268 ms/op
     p(90.0000) =  10468.983 ms/op
     p(95.0000) =  10468.983 ms/op
     p(99.0000) =  10468.983 ms/op
     p(99.9000) =  10468.983 ms/op
     p(99.9900) =  10468.983 ms/op
     p(99.9990) =  10468.983 ms/op
     p(99.9999) =  10468.983 ms/op
    p(100.0000) =  10468.983 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 28.13% complete, ETA 03:56:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_2125604252 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_2125604252() {
        this(4);
    }
    public KeyValueMap_2125604252(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_2125604252 aggregation_state_map = new KeyValueMap_2125604252();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

14227.079 ms/op
# Warmup Iteration   2: 17246.978 ms/op
# Warmup Iteration   3: 11475.616 ms/op
# Warmup Iteration   4: 11559.502 ms/op
# Warmup Iteration   5: 12146.704 ms/op
Iteration   1: 13203.669 ms/op
                 executeQuery·p0.00:   13203.669 ms/op
                 executeQuery·p0.50:   13203.669 ms/op
                 executeQuery·p0.90:   13203.669 ms/op
                 executeQuery·p0.95:   13203.669 ms/op
                 executeQuery·p0.99:   13203.669 ms/op
                 executeQuery·p0.999:  13203.669 ms/op
                 executeQuery·p0.9999: 13203.669 ms/op
                 executeQuery·p1.00:   13203.669 ms/op

Iteration   2: 13421.773 ms/op
                 executeQuery·p0.00:   13421.773 ms/op
                 executeQuery·p0.50:   13421.773 ms/op
                 executeQuery·p0.90:   13421.773 ms/op
                 executeQuery·p0.95:   13421.773 ms/op
                 executeQuery·p0.99:   13421.773 ms/op
                 executeQuery·p0.999:  13421.773 ms/op
                 executeQuery·p0.9999: 13421.773 ms/op
                 executeQuery·p1.00:   13421.773 ms/op

Iteration   3: 12918.456 ms/op
                 executeQuery·p0.00:   12918.456 ms/op
                 executeQuery·p0.50:   12918.456 ms/op
                 executeQuery·p0.90:   12918.456 ms/op
                 executeQuery·p0.95:   12918.456 ms/op
                 executeQuery·p0.99:   12918.456 ms/op
                 executeQuery·p0.999:  12918.456 ms/op
                 executeQuery·p0.9999: 12918.456 ms/op
                 executeQuery·p1.00:   12918.456 ms/op

Iteration   4: 12901.679 ms/op
                 executeQuery·p0.00:   12901.679 ms/op
                 executeQuery·p0.50:   12901.679 ms/op
                 executeQuery·p0.90:   12901.679 ms/op
                 executeQuery·p0.95:   12901.679 ms/op
                 executeQuery·p0.99:   12901.679 ms/op
                 executeQuery·p0.999:  12901.679 ms/op
                 executeQuery·p0.9999: 12901.679 ms/op
                 executeQuery·p1.00:   12901.679 ms/op

Iteration   5: 13706.985 ms/op
                 executeQuery·p0.00:   13706.985 ms/op
                 executeQuery·p0.50:   13706.985 ms/op
                 executeQuery·p0.90:   13706.985 ms/op
                 executeQuery·p0.95:   13706.985 ms/op
                 executeQuery·p0.99:   13706.985 ms/op
                 executeQuery·p0.999:  13706.985 ms/op
                 executeQuery·p0.9999: 13706.985 ms/op
                 executeQuery·p1.00:   13706.985 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  13230.513 ±(99.9%) 1319.707 ms/op

  Histogram, ms/op:
    [12900.000, 12950.000) = 2 
    [12950.000, 13000.000) = 0 
    [13000.000, 13050.000) = 0 
    [13050.000, 13100.000) = 0 
    [13100.000, 13150.000) = 0 
    [13150.000, 13200.000) = 0 
    [13200.000, 13250.000) = 1 
    [13250.000, 13300.000) = 0 
    [13300.000, 13350.000) = 0 
    [13350.000, 13400.000) = 0 
    [13400.000, 13450.000) = 1 
    [13450.000, 13500.000) = 0 
    [13500.000, 13550.000) = 0 
    [13550.000, 13600.000) = 0 
    [13600.000, 13650.000) = 0 
    [13650.000, 13700.000) = 0 
    [13700.000, 13750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  12901.679 ms/op
     p(50.0000) =  13203.669 ms/op
     p(90.0000) =  13706.985 ms/op
     p(95.0000) =  13706.985 ms/op
     p(99.0000) =  13706.985 ms/op
     p(99.9000) =  13706.985 ms/op
     p(99.9900) =  13706.985 ms/op
     p(99.9990) =  13706.985 ms/op
     p(99.9999) =  13706.985 ms/op
    p(100.0000) =  13706.985 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 29.17% complete, ETA 03:50:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_741063961 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_741063961() {
        this(4);
    }
    public KeyValueMap_741063961(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_741063961 aggregation_state_map = new KeyValueMap_741063961();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

19998.441 ms/op
# Warmup Iteration   2: 19629.343 ms/op
# Warmup Iteration   3: 17381.196 ms/op
# Warmup Iteration   4: 19394.462 ms/op
# Warmup Iteration   5: 17884.512 ms/op
Iteration   1: 18790.482 ms/op
                 executeQuery·p0.00:   18790.482 ms/op
                 executeQuery·p0.50:   18790.482 ms/op
                 executeQuery·p0.90:   18790.482 ms/op
                 executeQuery·p0.95:   18790.482 ms/op
                 executeQuery·p0.99:   18790.482 ms/op
                 executeQuery·p0.999:  18790.482 ms/op
                 executeQuery·p0.9999: 18790.482 ms/op
                 executeQuery·p1.00:   18790.482 ms/op

Iteration   2: 18756.927 ms/op
                 executeQuery·p0.00:   18756.927 ms/op
                 executeQuery·p0.50:   18756.927 ms/op
                 executeQuery·p0.90:   18756.927 ms/op
                 executeQuery·p0.95:   18756.927 ms/op
                 executeQuery·p0.99:   18756.927 ms/op
                 executeQuery·p0.999:  18756.927 ms/op
                 executeQuery·p0.9999: 18756.927 ms/op
                 executeQuery·p1.00:   18756.927 ms/op

Iteration   3: 18018.730 ms/op
                 executeQuery·p0.00:   18018.730 ms/op
                 executeQuery·p0.50:   18018.730 ms/op
                 executeQuery·p0.90:   18018.730 ms/op
                 executeQuery·p0.95:   18018.730 ms/op
                 executeQuery·p0.99:   18018.730 ms/op
                 executeQuery·p0.999:  18018.730 ms/op
                 executeQuery·p0.9999: 18018.730 ms/op
                 executeQuery·p1.00:   18018.730 ms/op

Iteration   4: 17582.522 ms/op
                 executeQuery·p0.00:   17582.522 ms/op
                 executeQuery·p0.50:   17582.522 ms/op
                 executeQuery·p0.90:   17582.522 ms/op
                 executeQuery·p0.95:   17582.522 ms/op
                 executeQuery·p0.99:   17582.522 ms/op
                 executeQuery·p0.999:  17582.522 ms/op
                 executeQuery·p0.9999: 17582.522 ms/op
                 executeQuery·p1.00:   17582.522 ms/op

Iteration   5: 17884.512 ms/op
                 executeQuery·p0.00:   17884.512 ms/op
                 executeQuery·p0.50:   17884.512 ms/op
                 executeQuery·p0.90:   17884.512 ms/op
                 executeQuery·p0.95:   17884.512 ms/op
                 executeQuery·p0.99:   17884.512 ms/op
                 executeQuery·p0.999:  17884.512 ms/op
                 executeQuery·p0.9999: 17884.512 ms/op
                 executeQuery·p1.00:   17884.512 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  18206.635 ±(99.9%) 2084.588 ms/op

  Histogram, ms/op:
    [17000.000, 17125.000) = 0 
    [17125.000, 17250.000) = 0 
    [17250.000, 17375.000) = 0 
    [17375.000, 17500.000) = 0 
    [17500.000, 17625.000) = 1 
    [17625.000, 17750.000) = 0 
    [17750.000, 17875.000) = 0 
    [17875.000, 18000.000) = 1 
    [18000.000, 18125.000) = 1 
    [18125.000, 18250.000) = 0 
    [18250.000, 18375.000) = 0 
    [18375.000, 18500.000) = 0 
    [18500.000, 18625.000) = 0 
    [18625.000, 18750.000) = 0 
    [18750.000, 18875.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  17582.522 ms/op
     p(50.0000) =  18018.730 ms/op
     p(90.0000) =  18790.482 ms/op
     p(95.0000) =  18790.482 ms/op
     p(99.0000) =  18790.482 ms/op
     p(99.9000) =  18790.482 ms/op
     p(99.9900) =  18790.482 ms/op
     p(99.9990) =  18790.482 ms/op
     p(99.9999) =  18790.482 ms/op
    p(100.0000) =  18790.482 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 30.21% complete, ETA 03:49:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1571377908 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1571377908() {
        this(4);
    }
    public KeyValueMap_1571377908(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1571377908 aggregation_state_map = new KeyValueMap_1571377908();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

52747.567 ms/op
# Warmup Iteration   2: 53955.527 ms/op
# Warmup Iteration   3: 48922.362 ms/op
# Warmup Iteration   4: 51875.152 ms/op
# Warmup Iteration   5: 51808.043 ms/op
Iteration   1: 49794.777 ms/op
                 executeQuery·p0.00:   49794.777 ms/op
                 executeQuery·p0.50:   49794.777 ms/op
                 executeQuery·p0.90:   49794.777 ms/op
                 executeQuery·p0.95:   49794.777 ms/op
                 executeQuery·p0.99:   49794.777 ms/op
                 executeQuery·p0.999:  49794.777 ms/op
                 executeQuery·p0.9999: 49794.777 ms/op
                 executeQuery·p1.00:   49794.777 ms/op

Iteration   2: 52009.370 ms/op
                 executeQuery·p0.00:   52009.370 ms/op
                 executeQuery·p0.50:   52009.370 ms/op
                 executeQuery·p0.90:   52009.370 ms/op
                 executeQuery·p0.95:   52009.370 ms/op
                 executeQuery·p0.99:   52009.370 ms/op
                 executeQuery·p0.999:  52009.370 ms/op
                 executeQuery·p0.9999: 52009.370 ms/op
                 executeQuery·p1.00:   52009.370 ms/op

Iteration   3: 48922.362 ms/op
                 executeQuery·p0.00:   48922.362 ms/op
                 executeQuery·p0.50:   48922.362 ms/op
                 executeQuery·p0.90:   48922.362 ms/op
                 executeQuery·p0.95:   48922.362 ms/op
                 executeQuery·p0.99:   48922.362 ms/op
                 executeQuery·p0.999:  48922.362 ms/op
                 executeQuery·p0.9999: 48922.362 ms/op
                 executeQuery·p1.00:   48922.362 ms/op

Iteration   4: 49660.559 ms/op
                 executeQuery·p0.00:   49660.559 ms/op
                 executeQuery·p0.50:   49660.559 ms/op
                 executeQuery·p0.90:   49660.559 ms/op
                 executeQuery·p0.95:   49660.559 ms/op
                 executeQuery·p0.99:   49660.559 ms/op
                 executeQuery·p0.999:  49660.559 ms/op
                 executeQuery·p0.9999: 49660.559 ms/op
                 executeQuery·p1.00:   49660.559 ms/op

Iteration   5: 48653.926 ms/op
                 executeQuery·p0.00:   48653.926 ms/op
                 executeQuery·p0.50:   48653.926 ms/op
                 executeQuery·p0.90:   48653.926 ms/op
                 executeQuery·p0.95:   48653.926 ms/op
                 executeQuery·p0.99:   48653.926 ms/op
                 executeQuery·p0.999:  48653.926 ms/op
                 executeQuery·p0.9999: 48653.926 ms/op
                 executeQuery·p1.00:   48653.926 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  49808.199 ±(99.9%) 5088.165 ms/op

  Histogram, ms/op:
    [48000.000, 48500.000) = 0 
    [48500.000, 49000.000) = 2 
    [49000.000, 49500.000) = 0 
    [49500.000, 50000.000) = 2 
    [50000.000, 50500.000) = 0 
    [50500.000, 51000.000) = 0 
    [51000.000, 51500.000) = 0 
    [51500.000, 52000.000) = 0 
    [52000.000, 52500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  48653.926 ms/op
     p(50.0000) =  49660.559 ms/op
     p(90.0000) =  52009.370 ms/op
     p(95.0000) =  52009.370 ms/op
     p(99.0000) =  52009.370 ms/op
     p(99.9000) =  52009.370 ms/op
     p(99.9900) =  52009.370 ms/op
     p(99.9990) =  52009.370 ms/op
     p(99.9999) =  52009.370 ms/op
    p(100.0000) =  52009.370 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 31.25% complete, ETA 04:07:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

64.030 ±(99.9%) 7.399 ms/op
# Warmup Iteration   2: 60.331 ±(99.9%) 0.425 ms/op
# Warmup Iteration   3: 59.963 ±(99.9%) 0.310 ms/op
# Warmup Iteration   4: 59.932 ±(99.9%) 0.604 ms/op
# Warmup Iteration   5: 58.872 ±(99.9%) 0.201 ms/op
Iteration   1: 58.885 ±(99.9%) 0.318 ms/op
                 executeFilterQuery·p0.00:   57.082 ms/op
                 executeFilterQuery·p0.50:   58.720 ms/op
                 executeFilterQuery·p0.90:   59.965 ms/op
                 executeFilterQuery·p0.95:   60.359 ms/op
                 executeFilterQuery·p0.99:   64.048 ms/op
                 executeFilterQuery·p0.999:  71.434 ms/op
                 executeFilterQuery·p0.9999: 71.434 ms/op
                 executeFilterQuery·p1.00:   71.434 ms/op

Iteration   2: 59.035 ±(99.9%) 0.234 ms/op
                 executeFilterQuery·p0.00:   57.213 ms/op
                 executeFilterQuery·p0.50:   58.851 ms/op
                 executeFilterQuery·p0.90:   59.965 ms/op
                 executeFilterQuery·p0.95:   60.293 ms/op
                 executeFilterQuery·p0.99:   63.321 ms/op
                 executeFilterQuery·p0.999:  63.963 ms/op
                 executeFilterQuery·p0.9999: 63.963 ms/op
                 executeFilterQuery·p1.00:   63.963 ms/op

Iteration   3: 58.307 ±(99.9%) 0.193 ms/op
                 executeFilterQuery·p0.00:   57.016 ms/op
                 executeFilterQuery·p0.50:   58.262 ms/op
                 executeFilterQuery·p0.90:   59.349 ms/op
                 executeFilterQuery·p0.95:   59.533 ms/op
                 executeFilterQuery·p0.99:   59.937 ms/op
                 executeFilterQuery·p0.999:  60.031 ms/op
                 executeFilterQuery·p0.9999: 60.031 ms/op
                 executeFilterQuery·p1.00:   60.031 ms/op

Iteration   4: 58.210 ±(99.9%) 0.231 ms/op
                 executeFilterQuery·p0.00:   56.951 ms/op
                 executeFilterQuery·p0.50:   58.196 ms/op
                 executeFilterQuery·p0.90:   59.113 ms/op
                 executeFilterQuery·p0.95:   59.428 ms/op
                 executeFilterQuery·p0.99:   61.580 ms/op
                 executeFilterQuery·p0.999:  65.733 ms/op
                 executeFilterQuery·p0.9999: 65.733 ms/op
                 executeFilterQuery·p1.00:   65.733 ms/op

Iteration   5: 58.485 ±(99.9%) 0.196 ms/op
                 executeFilterQuery·p0.00:   56.885 ms/op
                 executeFilterQuery·p0.50:   58.393 ms/op
                 executeFilterQuery·p0.90:   59.507 ms/op
                 executeFilterQuery·p0.95:   59.703 ms/op
                 executeFilterQuery·p0.99:   60.717 ms/op
                 executeFilterQuery·p0.999:  62.718 ms/op
                 executeFilterQuery·p0.9999: 62.718 ms/op
                 executeFilterQuery·p1.00:   62.718 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 850
  mean =     58.583 ±(99.9%) 0.111 ms/op

  Histogram, ms/op:
    [50.000, 52.500) = 0 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 109 
    [57.500, 60.000) = 707 
    [60.000, 62.500) = 29 
    [62.500, 65.000) = 3 
    [65.000, 67.500) = 1 
    [67.500, 70.000) = 0 
    [70.000, 72.500) = 1 
    [72.500, 75.000) = 0 
    [75.000, 77.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     56.885 ms/op
     p(50.0000) =     58.458 ms/op
     p(90.0000) =     59.638 ms/op
     p(95.0000) =     59.900 ms/op
     p(99.0000) =     61.045 ms/op
     p(99.9000) =     71.434 ms/op
     p(99.9900) =     71.434 ms/op
     p(99.9990) =     71.434 ms/op
     p(99.9999) =     71.434 ms/op
    p(100.0000) =     71.434 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 32.29% complete, ETA 03:59:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

64.484 ±(99.9%) 6.595 ms/op
# Warmup Iteration   2: 61.830 ±(99.9%) 0.297 ms/op
# Warmup Iteration   3: 61.809 ±(99.9%) 0.296 ms/op
# Warmup Iteration   4: 61.617 ±(99.9%) 0.318 ms/op
# Warmup Iteration   5: 61.436 ±(99.9%) 0.332 ms/op
Iteration   1: 61.648 ±(99.9%) 0.310 ms/op
                 executeFilterQuery·p0.00:   58.720 ms/op
                 executeFilterQuery·p0.50:   61.604 ms/op
                 executeFilterQuery·p0.90:   63.242 ms/op
                 executeFilterQuery·p0.95:   63.495 ms/op
                 executeFilterQuery·p0.99:   65.419 ms/op
                 executeFilterQuery·p0.999:  66.781 ms/op
                 executeFilterQuery·p0.9999: 66.781 ms/op
                 executeFilterQuery·p1.00:   66.781 ms/op

Iteration   2: 61.322 ±(99.9%) 0.357 ms/op
                 executeFilterQuery·p0.00:   58.786 ms/op
                 executeFilterQuery·p0.50:   61.342 ms/op
                 executeFilterQuery·p0.90:   62.436 ms/op
                 executeFilterQuery·p0.95:   62.915 ms/op
                 executeFilterQuery·p0.99:   67.790 ms/op
                 executeFilterQuery·p0.999:  72.745 ms/op
                 executeFilterQuery·p0.9999: 72.745 ms/op
                 executeFilterQuery·p1.00:   72.745 ms/op

Iteration   3: 60.821 ±(99.9%) 0.288 ms/op
                 executeFilterQuery·p0.00:   58.524 ms/op
                 executeFilterQuery·p0.50:   60.883 ms/op
                 executeFilterQuery·p0.90:   62.194 ms/op
                 executeFilterQuery·p0.95:   62.685 ms/op
                 executeFilterQuery·p0.99:   63.862 ms/op
                 executeFilterQuery·p0.999:  64.160 ms/op
                 executeFilterQuery·p0.9999: 64.160 ms/op
                 executeFilterQuery·p1.00:   64.160 ms/op

Iteration   4: 60.923 ±(99.9%) 0.374 ms/op
                 executeFilterQuery·p0.00:   58.262 ms/op
                 executeFilterQuery·p0.50:   60.948 ms/op
                 executeFilterQuery·p0.90:   63.046 ms/op
                 executeFilterQuery·p0.95:   63.308 ms/op
                 executeFilterQuery·p0.99:   63.904 ms/op
                 executeFilterQuery·p0.999:  64.160 ms/op
                 executeFilterQuery·p0.9999: 64.160 ms/op
                 executeFilterQuery·p1.00:   64.160 ms/op

Iteration   5: 60.795 ±(99.9%) 0.369 ms/op
                 executeFilterQuery·p0.00:   58.196 ms/op
                 executeFilterQuery·p0.50:   60.948 ms/op
                 executeFilterQuery·p0.90:   62.521 ms/op
                 executeFilterQuery·p0.95:   63.160 ms/op
                 executeFilterQuery·p0.99:   63.921 ms/op
                 executeFilterQuery·p0.999:  63.963 ms/op
                 executeFilterQuery·p0.9999: 63.963 ms/op
                 executeFilterQuery·p1.00:   63.963 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 816
  mean =     61.100 ±(99.9%) 0.155 ms/op

  Histogram, ms/op:
    [50.000, 52.500) = 0 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 0 
    [57.500, 60.000) = 155 
    [60.000, 62.500) = 556 
    [62.500, 65.000) = 103 
    [65.000, 67.500) = 1 
    [67.500, 70.000) = 0 
    [70.000, 72.500) = 0 
    [72.500, 75.000) = 1 
    [75.000, 77.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     58.196 ms/op
     p(50.0000) =     61.080 ms/op
     p(90.0000) =     62.718 ms/op
     p(95.0000) =     63.242 ms/op
     p(99.0000) =     64.137 ms/op
     p(99.9000) =     72.745 ms/op
     p(99.9900) =     72.745 ms/op
     p(99.9990) =     72.745 ms/op
     p(99.9999) =     72.745 ms/op
    p(100.0000) =     72.745 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 33.33% complete, ETA 03:51:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

64.060 ±(99.9%) 7.797 ms/op
# Warmup Iteration   2: 59.969 ±(99.9%) 0.275 ms/op
# Warmup Iteration   3: 60.951 ±(99.9%) 0.299 ms/op
# Warmup Iteration   4: 60.231 ±(99.9%) 0.384 ms/op
# Warmup Iteration   5: 59.138 ±(99.9%) 0.188 ms/op
Iteration   1: 59.257 ±(99.9%) 0.177 ms/op
                 executeFilterQuery·p0.00:   57.475 ms/op
                 executeFilterQuery·p0.50:   59.245 ms/op
                 executeFilterQuery·p0.90:   60.228 ms/op
                 executeFilterQuery·p0.95:   60.424 ms/op
                 executeFilterQuery·p0.99:   60.919 ms/op
                 executeFilterQuery·p0.999:  61.145 ms/op
                 executeFilterQuery·p0.9999: 61.145 ms/op
                 executeFilterQuery·p1.00:   61.145 ms/op

Iteration   2: 58.950 ±(99.9%) 0.299 ms/op
                 executeFilterQuery·p0.00:   56.295 ms/op
                 executeFilterQuery·p0.50:   59.048 ms/op
                 executeFilterQuery·p0.90:   59.965 ms/op
                 executeFilterQuery·p0.95:   60.162 ms/op
                 executeFilterQuery·p0.99:   63.098 ms/op
                 executeFilterQuery·p0.999:  67.502 ms/op
                 executeFilterQuery·p0.9999: 67.502 ms/op
                 executeFilterQuery·p1.00:   67.502 ms/op

Iteration   3: 58.817 ±(99.9%) 0.241 ms/op
                 executeFilterQuery·p0.00:   56.361 ms/op
                 executeFilterQuery·p0.50:   58.917 ms/op
                 executeFilterQuery·p0.90:   59.834 ms/op
                 executeFilterQuery·p0.95:   60.424 ms/op
                 executeFilterQuery·p0.99:   60.706 ms/op
                 executeFilterQuery·p0.999:  60.752 ms/op
                 executeFilterQuery·p0.9999: 60.752 ms/op
                 executeFilterQuery·p1.00:   60.752 ms/op

Iteration   4: 59.078 ±(99.9%) 0.203 ms/op
                 executeFilterQuery·p0.00:   57.082 ms/op
                 executeFilterQuery·p0.50:   59.113 ms/op
                 executeFilterQuery·p0.90:   59.965 ms/op
                 executeFilterQuery·p0.95:   60.359 ms/op
                 executeFilterQuery·p0.99:   60.634 ms/op
                 executeFilterQuery·p0.999:  60.817 ms/op
                 executeFilterQuery·p0.9999: 60.817 ms/op
                 executeFilterQuery·p1.00:   60.817 ms/op

Iteration   5: 58.901 ±(99.9%) 0.274 ms/op
                 executeFilterQuery·p0.00:   56.361 ms/op
                 executeFilterQuery·p0.50:   58.982 ms/op
                 executeFilterQuery·p0.90:   60.031 ms/op
                 executeFilterQuery·p0.95:   60.555 ms/op
                 executeFilterQuery·p0.99:   61.748 ms/op
                 executeFilterQuery·p0.999:  62.849 ms/op
                 executeFilterQuery·p0.9999: 62.849 ms/op
                 executeFilterQuery·p1.00:   62.849 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 844
  mean =     59.000 ±(99.9%) 0.108 ms/op

  Histogram, ms/op:
    [50.000, 51.250) = 0 
    [51.250, 52.500) = 0 
    [52.500, 53.750) = 0 
    [53.750, 55.000) = 0 
    [55.000, 56.250) = 0 
    [56.250, 57.500) = 45 
    [57.500, 58.750) = 259 
    [58.750, 60.000) = 455 
    [60.000, 61.250) = 82 
    [61.250, 62.500) = 1 
    [62.500, 63.750) = 1 
    [63.750, 65.000) = 0 
    [65.000, 66.250) = 0 
    [66.250, 67.500) = 0 
    [67.500, 68.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =     56.295 ms/op
     p(50.0000) =     59.113 ms/op
     p(90.0000) =     60.031 ms/op
     p(95.0000) =     60.424 ms/op
     p(99.0000) =     60.883 ms/op
     p(99.9000) =     67.502 ms/op
     p(99.9900) =     67.502 ms/op
     p(99.9990) =     67.502 ms/op
     p(99.9999) =     67.502 ms/op
    p(100.0000) =     67.502 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 34.38% complete, ETA 03:44:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

753.402 ±(99.9%) 623.265 ms/op
# Warmup Iteration   2: 596.763 ±(99.9%) 8.373 ms/op
# Warmup Iteration   3: 601.698 ±(99.9%) 6.192 ms/op
# Warmup Iteration   4: 623.510 ±(99.9%) 20.775 ms/op
# Warmup Iteration   5: 614.651 ±(99.9%) 18.437 ms/op
Iteration   1: 586.329 ±(99.9%) 4.768 ms/op
                 executeFilterQuery·p0.00:   576.717 ms/op
                 executeFilterQuery·p0.50:   587.203 ms/op
                 executeFilterQuery·p0.90:   592.131 ms/op
                 executeFilterQuery·p0.95:   598.737 ms/op
                 executeFilterQuery·p0.99:   598.737 ms/op
                 executeFilterQuery·p0.999:  598.737 ms/op
                 executeFilterQuery·p0.9999: 598.737 ms/op
                 executeFilterQuery·p1.00:   598.737 ms/op

Iteration   2: 586.562 ±(99.9%) 4.720 ms/op
                 executeFilterQuery·p0.00:   576.717 ms/op
                 executeFilterQuery·p0.50:   586.678 ms/op
                 executeFilterQuery·p0.90:   592.131 ms/op
                 executeFilterQuery·p0.95:   598.737 ms/op
                 executeFilterQuery·p0.99:   598.737 ms/op
                 executeFilterQuery·p0.999:  598.737 ms/op
                 executeFilterQuery·p0.9999: 598.737 ms/op
                 executeFilterQuery·p1.00:   598.737 ms/op

Iteration   3: 585.455 ±(99.9%) 9.082 ms/op
                 executeFilterQuery·p0.00:   571.474 ms/op
                 executeFilterQuery·p0.50:   585.630 ms/op
                 executeFilterQuery·p0.90:   596.535 ms/op
                 executeFilterQuery·p0.95:   614.466 ms/op
                 executeFilterQuery·p0.99:   614.466 ms/op
                 executeFilterQuery·p0.999:  614.466 ms/op
                 executeFilterQuery·p0.9999: 614.466 ms/op
                 executeFilterQuery·p1.00:   614.466 ms/op

Iteration   4: 581.144 ±(99.9%) 9.270 ms/op
                 executeFilterQuery·p0.00:   567.280 ms/op
                 executeFilterQuery·p0.50:   581.435 ms/op
                 executeFilterQuery·p0.90:   592.341 ms/op
                 executeFilterQuery·p0.95:   610.271 ms/op
                 executeFilterQuery·p0.99:   610.271 ms/op
                 executeFilterQuery·p0.999:  610.271 ms/op
                 executeFilterQuery·p0.9999: 610.271 ms/op
                 executeFilterQuery·p1.00:   610.271 ms/op

Iteration   5: 574.561 ±(99.9%) 6.505 ms/op
                 executeFilterQuery·p0.00:   566.231 ms/op
                 executeFilterQuery·p0.50:   570.950 ms/op
                 executeFilterQuery·p0.90:   586.469 ms/op
                 executeFilterQuery·p0.95:   589.300 ms/op
                 executeFilterQuery·p0.99:   589.300 ms/op
                 executeFilterQuery·p0.999:  589.300 ms/op
                 executeFilterQuery·p0.9999: 589.300 ms/op
                 executeFilterQuery·p1.00:   589.300 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 90
  mean =    582.810 ±(99.9%) 3.148 ms/op

  Histogram, ms/op:
    [560.000, 565.000) = 0 
    [565.000, 570.000) = 7 
    [570.000, 575.000) = 13 
    [575.000, 580.000) = 9 
    [580.000, 585.000) = 21 
    [585.000, 590.000) = 27 
    [590.000, 595.000) = 9 
    [595.000, 600.000) = 2 
    [600.000, 605.000) = 0 
    [605.000, 610.000) = 0 
    [610.000, 615.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    566.231 ms/op
     p(50.0000) =    583.008 ms/op
     p(90.0000) =    591.292 ms/op
     p(95.0000) =    596.430 ms/op
     p(99.0000) =    614.466 ms/op
     p(99.9000) =    614.466 ms/op
     p(99.9900) =    614.466 ms/op
     p(99.9990) =    614.466 ms/op
     p(99.9999) =    614.466 ms/op
    p(100.0000) =    614.466 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 35.42% complete, ETA 03:37:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

870.668 ±(99.9%) 1149.745 ms/op
# Warmup Iteration   2: 588.004 ±(99.9%) 10.060 ms/op
# Warmup Iteration   3: 591.829 ±(99.9%) 6.588 ms/op
# Warmup Iteration   4: 597.565 ±(99.9%) 12.640 ms/op
# Warmup Iteration   5: 622.422 ±(99.9%) 21.373 ms/op
Iteration   1: 586.956 ±(99.9%) 19.613 ms/op
                 executeFilterQuery·p0.00:   566.231 ms/op
                 executeFilterQuery·p0.50:   586.154 ms/op
                 executeFilterQuery·p0.90:   606.496 ms/op
                 executeFilterQuery·p0.95:   658.506 ms/op
                 executeFilterQuery·p0.99:   658.506 ms/op
                 executeFilterQuery·p0.999:  658.506 ms/op
                 executeFilterQuery·p0.9999: 658.506 ms/op
                 executeFilterQuery·p1.00:   658.506 ms/op

Iteration   2: 580.329 ±(99.9%) 7.970 ms/op
                 executeFilterQuery·p0.00:   568.328 ms/op
                 executeFilterQuery·p0.50:   580.387 ms/op
                 executeFilterQuery·p0.90:   591.816 ms/op
                 executeFilterQuery·p0.95:   595.591 ms/op
                 executeFilterQuery·p0.99:   595.591 ms/op
                 executeFilterQuery·p0.999:  595.591 ms/op
                 executeFilterQuery·p0.9999: 595.591 ms/op
                 executeFilterQuery·p1.00:   595.591 ms/op

Iteration   3: 581.144 ±(99.9%) 7.490 ms/op
                 executeFilterQuery·p0.00:   569.377 ms/op
                 executeFilterQuery·p0.50:   583.533 ms/op
                 executeFilterQuery·p0.90:   589.719 ms/op
                 executeFilterQuery·p0.95:   593.494 ms/op
                 executeFilterQuery·p0.99:   593.494 ms/op
                 executeFilterQuery·p0.999:  593.494 ms/op
                 executeFilterQuery·p0.9999: 593.494 ms/op
                 executeFilterQuery·p1.00:   593.494 ms/op

Iteration   4: 581.668 ±(99.9%) 7.946 ms/op
                 executeFilterQuery·p0.00:   568.328 ms/op
                 executeFilterQuery·p0.50:   583.008 ms/op
                 executeFilterQuery·p0.90:   595.906 ms/op
                 executeFilterQuery·p0.95:   598.737 ms/op
                 executeFilterQuery·p0.99:   598.737 ms/op
                 executeFilterQuery·p0.999:  598.737 ms/op
                 executeFilterQuery·p0.9999: 598.737 ms/op
                 executeFilterQuery·p1.00:   598.737 ms/op

Iteration   5: 581.494 ±(99.9%) 6.052 ms/op
                 executeFilterQuery·p0.00:   570.425 ms/op
                 executeFilterQuery·p0.50:   580.911 ms/op
                 executeFilterQuery·p0.90:   593.599 ms/op
                 executeFilterQuery·p0.95:   594.543 ms/op
                 executeFilterQuery·p0.99:   594.543 ms/op
                 executeFilterQuery·p0.999:  594.543 ms/op
                 executeFilterQuery·p0.9999: 594.543 ms/op
                 executeFilterQuery·p1.00:   594.543 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 89
  mean =    582.266 ±(99.9%) 4.079 ms/op

  Histogram, ms/op:
    [560.000, 570.000) = 8 
    [570.000, 580.000) = 28 
    [580.000, 590.000) = 39 
    [590.000, 600.000) = 13 
    [600.000, 610.000) = 0 
    [610.000, 620.000) = 0 
    [620.000, 630.000) = 0 
    [630.000, 640.000) = 0 
    [640.000, 650.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    566.231 ms/op
     p(50.0000) =    581.960 ms/op
     p(90.0000) =    591.397 ms/op
     p(95.0000) =    595.067 ms/op
     p(99.0000) =    658.506 ms/op
     p(99.9000) =    658.506 ms/op
     p(99.9900) =    658.506 ms/op
     p(99.9990) =    658.506 ms/op
     p(99.9999) =    658.506 ms/op
    p(100.0000) =    658.506 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 36.46% complete, ETA 03:30:56
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

917.695 ±(99.9%) 1270.207 ms/op
# Warmup Iteration   2: 586.445 ±(99.9%) 6.533 ms/op
# Warmup Iteration   3: 587.079 ±(99.9%) 7.055 ms/op
# Warmup Iteration   4: 594.296 ±(99.9%) 6.778 ms/op
# Warmup Iteration   5: 596.331 ±(99.9%) 6.166 ms/op
Iteration   1: 588.128 ±(99.9%) 10.684 ms/op
                 executeFilterQuery·p0.00:   571.474 ms/op
                 executeFilterQuery·p0.50:   588.251 ms/op
                 executeFilterQuery·p0.90:   603.351 ms/op
                 executeFilterQuery·p0.95:   605.028 ms/op
                 executeFilterQuery·p0.99:   605.028 ms/op
                 executeFilterQuery·p0.999:  605.028 ms/op
                 executeFilterQuery·p0.9999: 605.028 ms/op
                 executeFilterQuery·p1.00:   605.028 ms/op

Iteration   2: 588.745 ±(99.9%) 8.605 ms/op
                 executeFilterQuery·p0.00:   575.668 ms/op
                 executeFilterQuery·p0.50:   590.348 ms/op
                 executeFilterQuery·p0.90:   603.141 ms/op
                 executeFilterQuery·p0.95:   603.980 ms/op
                 executeFilterQuery·p0.99:   603.980 ms/op
                 executeFilterQuery·p0.999:  603.980 ms/op
                 executeFilterQuery·p0.9999: 603.980 ms/op
                 executeFilterQuery·p1.00:   603.980 ms/op

Iteration   3: 582.251 ±(99.9%) 4.655 ms/op
                 executeFilterQuery·p0.00:   573.571 ms/op
                 executeFilterQuery·p0.50:   582.484 ms/op
                 executeFilterQuery·p0.90:   589.405 ms/op
                 executeFilterQuery·p0.95:   590.348 ms/op
                 executeFilterQuery·p0.99:   590.348 ms/op
                 executeFilterQuery·p0.999:  590.348 ms/op
                 executeFilterQuery·p0.9999: 590.348 ms/op
                 executeFilterQuery·p1.00:   590.348 ms/op

Iteration   4: 585.280 ±(99.9%) 9.015 ms/op
                 executeFilterQuery·p0.00:   571.474 ms/op
                 executeFilterQuery·p0.50:   583.008 ms/op
                 executeFilterQuery·p0.90:   599.995 ms/op
                 executeFilterQuery·p0.95:   611.320 ms/op
                 executeFilterQuery·p0.99:   611.320 ms/op
                 executeFilterQuery·p0.999:  611.320 ms/op
                 executeFilterQuery·p0.9999: 611.320 ms/op
                 executeFilterQuery·p1.00:   611.320 ms/op

Iteration   5: 579.746 ±(99.9%) 8.873 ms/op
                 executeFilterQuery·p0.00:   560.988 ms/op
                 executeFilterQuery·p0.50:   577.765 ms/op
                 executeFilterQuery·p0.90:   594.123 ms/op
                 executeFilterQuery·p0.95:   599.785 ms/op
                 executeFilterQuery·p0.99:   599.785 ms/op
                 executeFilterQuery·p0.999:  599.785 ms/op
                 executeFilterQuery·p0.9999: 599.785 ms/op
                 executeFilterQuery·p1.00:   599.785 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 88
  mean =    584.748 ±(99.9%) 3.426 ms/op

  Histogram, ms/op:
    [560.000, 565.000) = 1 
    [565.000, 570.000) = 1 
    [570.000, 575.000) = 10 
    [575.000, 580.000) = 23 
    [580.000, 585.000) = 12 
    [585.000, 590.000) = 15 
    [590.000, 595.000) = 12 
    [595.000, 600.000) = 8 
    [600.000, 605.000) = 4 
    [605.000, 610.000) = 1 
    [610.000, 615.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    560.988 ms/op
     p(50.0000) =    583.008 ms/op
     p(90.0000) =    598.737 ms/op
     p(95.0000) =    602.931 ms/op
     p(99.0000) =    611.320 ms/op
     p(99.9000) =    611.320 ms/op
     p(99.9900) =    611.320 ms/op
     p(99.9990) =    611.320 ms/op
     p(99.9999) =    611.320 ms/op
    p(100.0000) =    611.320 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 37.50% complete, ETA 03:24:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2110.993 ±(99.9%) 7360.187 ms/op
# Warmup Iteration   2: 1170.444 ±(99.9%) 24.760 ms/op
# Warmup Iteration   3: 1200.270 ±(99.9%) 39.558 ms/op
# Warmup Iteration   4: 1199.804 ±(99.9%) 45.829 ms/op
# Warmup Iteration   5: 1136.889 ±(99.9%) 23.866 ms/op
Iteration   1: 1130.831 ±(99.9%) 16.881 ms/op
                 executeFilterQuery·p0.00:   1121.976 ms/op
                 executeFilterQuery·p0.50:   1126.171 ms/op
                 executeFilterQuery·p0.90:   1149.239 ms/op
                 executeFilterQuery·p0.95:   1149.239 ms/op
                 executeFilterQuery·p0.99:   1149.239 ms/op
                 executeFilterQuery·p0.999:  1149.239 ms/op
                 executeFilterQuery·p0.9999: 1149.239 ms/op
                 executeFilterQuery·p1.00:   1149.239 ms/op

Iteration   2: 1153.667 ±(99.9%) 39.300 ms/op
                 executeFilterQuery·p0.00:   1126.171 ms/op
                 executeFilterQuery·p0.50:   1155.531 ms/op
                 executeFilterQuery·p0.90:   1205.862 ms/op
                 executeFilterQuery·p0.95:   1205.862 ms/op
                 executeFilterQuery·p0.99:   1205.862 ms/op
                 executeFilterQuery·p0.999:  1205.862 ms/op
                 executeFilterQuery·p0.9999: 1205.862 ms/op
                 executeFilterQuery·p1.00:   1205.862 ms/op

Iteration   3: 1182.095 ±(99.9%) 27.972 ms/op
                 executeFilterQuery·p0.00:   1163.919 ms/op
                 executeFilterQuery·p0.50:   1180.697 ms/op
                 executeFilterQuery·p0.90:   1220.542 ms/op
                 executeFilterQuery·p0.95:   1220.542 ms/op
                 executeFilterQuery·p0.99:   1220.542 ms/op
                 executeFilterQuery·p0.999:  1220.542 ms/op
                 executeFilterQuery·p0.9999: 1220.542 ms/op
                 executeFilterQuery·p1.00:   1220.542 ms/op

Iteration   4: 1149.006 ±(99.9%) 22.869 ms/op
                 executeFilterQuery·p0.00:   1128.268 ms/op
                 executeFilterQuery·p0.50:   1149.239 ms/op
                 executeFilterQuery·p0.90:   1168.114 ms/op
                 executeFilterQuery·p0.95:   1168.114 ms/op
                 executeFilterQuery·p0.99:   1168.114 ms/op
                 executeFilterQuery·p0.999:  1168.114 ms/op
                 executeFilterQuery·p0.9999: 1168.114 ms/op
                 executeFilterQuery·p1.00:   1168.114 ms/op

Iteration   5: 1151.569 ±(99.9%) 19.418 ms/op
                 executeFilterQuery·p0.00:   1138.754 ms/op
                 executeFilterQuery·p0.50:   1145.045 ms/op
                 executeFilterQuery·p0.90:   1170.211 ms/op
                 executeFilterQuery·p0.95:   1170.211 ms/op
                 executeFilterQuery·p0.99:   1170.211 ms/op
                 executeFilterQuery·p0.999:  1170.211 ms/op
                 executeFilterQuery·p0.9999: 1170.211 ms/op
                 executeFilterQuery·p1.00:   1170.211 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 45
  mean =   1153.434 ±(99.9%) 11.792 ms/op

  Histogram, ms/op:
    [1120.000, 1130.000) = 8 
    [1130.000, 1140.000) = 6 
    [1140.000, 1150.000) = 9 
    [1150.000, 1160.000) = 7 
    [1160.000, 1170.000) = 6 
    [1170.000, 1180.000) = 2 
    [1180.000, 1190.000) = 5 
    [1190.000, 1200.000) = 0 
    [1200.000, 1210.000) = 1 
    [1210.000, 1220.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1121.976 ms/op
     p(50.0000) =   1149.239 ms/op
     p(90.0000) =   1183.213 ms/op
     p(95.0000) =   1200.200 ms/op
     p(99.0000) =   1220.542 ms/op
     p(99.9000) =   1220.542 ms/op
     p(99.9900) =   1220.542 ms/op
     p(99.9990) =   1220.542 ms/op
     p(99.9999) =   1220.542 ms/op
    p(100.0000) =   1220.542 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 38.54% complete, ETA 03:18:36
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2742.551 ±(99.9%) 18300.630 ms/op
# Warmup Iteration   2: 1200.037 ±(99.9%) 31.755 ms/op
# Warmup Iteration   3: 1223.572 ±(99.9%) 32.015 ms/op
# Warmup Iteration   4: 1235.456 ±(99.9%) 18.180 ms/op
# Warmup Iteration   5: 1193.746 ±(99.9%) 53.845 ms/op
Iteration   1: 1170.677 ±(99.9%) 13.277 ms/op
                 executeFilterQuery·p0.00:   1157.628 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1182.794 ms/op
                 executeFilterQuery·p0.95:   1182.794 ms/op
                 executeFilterQuery·p0.99:   1182.794 ms/op
                 executeFilterQuery·p0.999:  1182.794 ms/op
                 executeFilterQuery·p0.9999: 1182.794 ms/op
                 executeFilterQuery·p1.00:   1182.794 ms/op

Iteration   2: 1191.648 ±(99.9%) 26.942 ms/op
                 executeFilterQuery·p0.00:   1168.114 ms/op
                 executeFilterQuery·p0.50:   1191.182 ms/op
                 executeFilterQuery·p0.90:   1207.960 ms/op
                 executeFilterQuery·p0.95:   1207.960 ms/op
                 executeFilterQuery·p0.99:   1207.960 ms/op
                 executeFilterQuery·p0.999:  1207.960 ms/op
                 executeFilterQuery·p0.9999: 1207.960 ms/op
                 executeFilterQuery·p1.00:   1207.960 ms/op

Iteration   3: 1232.659 ±(99.9%) 63.478 ms/op
                 executeFilterQuery·p0.00:   1168.114 ms/op
                 executeFilterQuery·p0.50:   1228.931 ms/op
                 executeFilterQuery·p0.90:   1281.360 ms/op
                 executeFilterQuery·p0.95:   1281.360 ms/op
                 executeFilterQuery·p0.99:   1281.360 ms/op
                 executeFilterQuery·p0.999:  1281.360 ms/op
                 executeFilterQuery·p0.9999: 1281.360 ms/op
                 executeFilterQuery·p1.00:   1281.360 ms/op

Iteration   4: 1189.085 ±(99.9%) 30.672 ms/op
                 executeFilterQuery·p0.00:   1170.211 ms/op
                 executeFilterQuery·p0.50:   1182.794 ms/op
                 executeFilterQuery·p0.90:   1231.028 ms/op
                 executeFilterQuery·p0.95:   1231.028 ms/op
                 executeFilterQuery·p0.99:   1231.028 ms/op
                 executeFilterQuery·p0.999:  1231.028 ms/op
                 executeFilterQuery·p0.9999: 1231.028 ms/op
                 executeFilterQuery·p1.00:   1231.028 ms/op

Iteration   5: 1177.201 ±(99.9%) 21.436 ms/op
                 executeFilterQuery·p0.00:   1151.336 ms/op
                 executeFilterQuery·p0.50:   1180.697 ms/op
                 executeFilterQuery·p0.90:   1191.182 ms/op
                 executeFilterQuery·p0.95:   1191.182 ms/op
                 executeFilterQuery·p0.99:   1191.182 ms/op
                 executeFilterQuery·p0.999:  1191.182 ms/op
                 executeFilterQuery·p0.9999: 1191.182 ms/op
                 executeFilterQuery·p1.00:   1191.182 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 45
  mean =   1192.254 ±(99.9%) 15.639 ms/op

  Histogram, ms/op:
    [1100.000, 1112.500) = 0 
    [1112.500, 1125.000) = 0 
    [1125.000, 1137.500) = 0 
    [1137.500, 1150.000) = 0 
    [1150.000, 1162.500) = 3 
    [1162.500, 1175.000) = 13 
    [1175.000, 1187.500) = 10 
    [1187.500, 1200.000) = 7 
    [1200.000, 1212.500) = 4 
    [1212.500, 1225.000) = 1 
    [1225.000, 1237.500) = 4 
    [1237.500, 1250.000) = 0 
    [1250.000, 1262.500) = 0 
    [1262.500, 1275.000) = 1 
    [1275.000, 1287.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1151.336 ms/op
     p(50.0000) =   1182.794 ms/op
     p(90.0000) =   1231.028 ms/op
     p(95.0000) =   1274.859 ms/op
     p(99.0000) =   1281.360 ms/op
     p(99.9000) =   1281.360 ms/op
     p(99.9900) =   1281.360 ms/op
     p(99.9990) =   1281.360 ms/op
     p(99.9999) =   1281.360 ms/op
    p(100.0000) =   1281.360 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 39.58% complete, ETA 03:12:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2231.370 ±(99.9%) 6936.046 ms/op
# Warmup Iteration   2: 1172.308 ±(99.9%) 12.706 ms/op
# Warmup Iteration   3: 1210.523 ±(99.9%) 35.843 ms/op
# Warmup Iteration   4: 1204.464 ±(99.9%) 29.747 ms/op
# Warmup Iteration   5: 1155.531 ±(99.9%) 29.221 ms/op
Iteration   1: 1176.269 ±(99.9%) 19.814 ms/op
                 executeFilterQuery·p0.00:   1151.336 ms/op
                 executeFilterQuery·p0.50:   1178.599 ms/op
                 executeFilterQuery·p0.90:   1189.085 ms/op
                 executeFilterQuery·p0.95:   1189.085 ms/op
                 executeFilterQuery·p0.99:   1189.085 ms/op
                 executeFilterQuery·p0.999:  1189.085 ms/op
                 executeFilterQuery·p0.9999: 1189.085 ms/op
                 executeFilterQuery·p1.00:   1189.085 ms/op

Iteration   2: 1186.522 ±(99.9%) 57.200 ms/op
                 executeFilterQuery·p0.00:   1138.754 ms/op
                 executeFilterQuery·p0.50:   1180.697 ms/op
                 executeFilterQuery·p0.90:   1247.805 ms/op
                 executeFilterQuery·p0.95:   1247.805 ms/op
                 executeFilterQuery·p0.99:   1247.805 ms/op
                 executeFilterQuery·p0.999:  1247.805 ms/op
                 executeFilterQuery·p0.9999: 1247.805 ms/op
                 executeFilterQuery·p1.00:   1247.805 ms/op

Iteration   3: 1229.630 ±(99.9%) 53.995 ms/op
                 executeFilterQuery·p0.00:   1149.239 ms/op
                 executeFilterQuery·p0.50:   1235.223 ms/op
                 executeFilterQuery·p0.90:   1258.291 ms/op
                 executeFilterQuery·p0.95:   1258.291 ms/op
                 executeFilterQuery·p0.99:   1258.291 ms/op
                 executeFilterQuery·p0.999:  1258.291 ms/op
                 executeFilterQuery·p0.9999: 1258.291 ms/op
                 executeFilterQuery·p1.00:   1258.291 ms/op

Iteration   4: 1167.415 ±(99.9%) 27.241 ms/op
                 executeFilterQuery·p0.00:   1147.142 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1191.182 ms/op
                 executeFilterQuery·p0.95:   1191.182 ms/op
                 executeFilterQuery·p0.99:   1191.182 ms/op
                 executeFilterQuery·p0.999:  1191.182 ms/op
                 executeFilterQuery·p0.9999: 1191.182 ms/op
                 executeFilterQuery·p1.00:   1191.182 ms/op

Iteration   5: 1161.589 ±(99.9%) 27.095 ms/op
                 executeFilterQuery·p0.00:   1128.268 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1180.697 ms/op
                 executeFilterQuery·p0.95:   1180.697 ms/op
                 executeFilterQuery·p0.99:   1180.697 ms/op
                 executeFilterQuery·p0.999:  1180.697 ms/op
                 executeFilterQuery·p0.9999: 1180.697 ms/op
                 executeFilterQuery·p1.00:   1180.697 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 45
  mean =   1184.285 ±(99.9%) 17.566 ms/op

  Histogram, ms/op:
    [1100.000, 1112.500) = 0 
    [1112.500, 1125.000) = 0 
    [1125.000, 1137.500) = 1 
    [1137.500, 1150.000) = 5 
    [1150.000, 1162.500) = 5 
    [1162.500, 1175.000) = 9 
    [1175.000, 1187.500) = 12 
    [1187.500, 1200.000) = 2 
    [1200.000, 1212.500) = 1 
    [1212.500, 1225.000) = 1 
    [1225.000, 1237.500) = 5 
    [1237.500, 1250.000) = 3 
    [1250.000, 1262.500) = 1 
    [1262.500, 1275.000) = 0 
    [1275.000, 1287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1128.268 ms/op
     p(50.0000) =   1176.502 ms/op
     p(90.0000) =   1241.514 ms/op
     p(95.0000) =   1249.903 ms/op
     p(99.0000) =   1258.291 ms/op
     p(99.9000) =   1258.291 ms/op
     p(99.9900) =   1258.291 ms/op
     p(99.9990) =   1258.291 ms/op
     p(99.9999) =   1258.291 ms/op
    p(100.0000) =   1258.291 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 40.63% complete, ETA 03:07:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

62.822 ±(99.9%) 3.269 ms/op
# Warmup Iteration   2: 60.522 ±(99.9%) 0.340 ms/op
# Warmup Iteration   3: 61.071 ±(99.9%) 0.366 ms/op
# Warmup Iteration   4: 60.554 ±(99.9%) 0.521 ms/op
# Warmup Iteration   5: 59.100 ±(99.9%) 0.218 ms/op
Iteration   1: 59.355 ±(99.9%) 0.221 ms/op
                 executeFilterQuery·p0.00:   57.082 ms/op
                 executeFilterQuery·p0.50:   59.245 ms/op
                 executeFilterQuery·p0.90:   60.365 ms/op
                 executeFilterQuery·p0.95:   60.788 ms/op
                 executeFilterQuery·p0.99:   62.544 ms/op
                 executeFilterQuery·p0.999:  63.177 ms/op
                 executeFilterQuery·p0.9999: 63.177 ms/op
                 executeFilterQuery·p1.00:   63.177 ms/op

Iteration   2: 59.334 ±(99.9%) 0.244 ms/op
                 executeFilterQuery·p0.00:   57.541 ms/op
                 executeFilterQuery·p0.50:   59.146 ms/op
                 executeFilterQuery·p0.90:   60.097 ms/op
                 executeFilterQuery·p0.95:   60.228 ms/op
                 executeFilterQuery·p0.99:   65.067 ms/op
                 executeFilterQuery·p0.999:  66.650 ms/op
                 executeFilterQuery·p0.9999: 66.650 ms/op
                 executeFilterQuery·p1.00:   66.650 ms/op

Iteration   3: 59.411 ±(99.9%) 0.191 ms/op
                 executeFilterQuery·p0.00:   57.410 ms/op
                 executeFilterQuery·p0.50:   59.376 ms/op
                 executeFilterQuery·p0.90:   60.293 ms/op
                 executeFilterQuery·p0.95:   60.555 ms/op
                 executeFilterQuery·p0.99:   61.197 ms/op
                 executeFilterQuery·p0.999:  61.604 ms/op
                 executeFilterQuery·p0.9999: 61.604 ms/op
                 executeFilterQuery·p1.00:   61.604 ms/op

Iteration   4: 59.360 ±(99.9%) 0.229 ms/op
                 executeFilterQuery·p0.00:   57.016 ms/op
                 executeFilterQuery·p0.50:   59.245 ms/op
                 executeFilterQuery·p0.90:   60.503 ms/op
                 executeFilterQuery·p0.95:   60.853 ms/op
                 executeFilterQuery·p0.99:   62.234 ms/op
                 executeFilterQuery·p0.999:  63.635 ms/op
                 executeFilterQuery·p0.9999: 63.635 ms/op
                 executeFilterQuery·p1.00:   63.635 ms/op

Iteration   5: 59.118 ±(99.9%) 0.250 ms/op
                 executeFilterQuery·p0.00:   56.885 ms/op
                 executeFilterQuery·p0.50:   59.113 ms/op
                 executeFilterQuery·p0.90:   60.038 ms/op
                 executeFilterQuery·p0.95:   60.817 ms/op
                 executeFilterQuery·p0.99:   63.031 ms/op
                 executeFilterQuery·p0.999:  64.750 ms/op
                 executeFilterQuery·p0.9999: 64.750 ms/op
                 executeFilterQuery·p1.00:   64.750 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 840
  mean =     59.316 ±(99.9%) 0.101 ms/op

  Histogram, ms/op:
    [56.000, 57.000) = 2 
    [57.000, 58.000) = 48 
    [58.000, 59.000) = 245 
    [59.000, 60.000) = 398 
    [60.000, 61.000) = 127 
    [61.000, 62.000) = 11 
    [62.000, 63.000) = 4 
    [63.000, 64.000) = 2 
    [64.000, 65.000) = 2 
    [65.000, 66.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     56.885 ms/op
     p(50.0000) =     59.245 ms/op
     p(90.0000) =     60.228 ms/op
     p(95.0000) =     60.686 ms/op
     p(99.0000) =     62.259 ms/op
     p(99.9000) =     66.650 ms/op
     p(99.9900) =     66.650 ms/op
     p(99.9990) =     66.650 ms/op
     p(99.9999) =     66.650 ms/op
    p(100.0000) =     66.650 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 41.67% complete, ETA 03:01:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

61.849 ±(99.9%) 3.237 ms/op
# Warmup Iteration   2: 59.793 ±(99.9%) 0.263 ms/op
# Warmup Iteration   3: 59.427 ±(99.9%) 0.205 ms/op
# Warmup Iteration   4: 58.811 ±(99.9%) 0.227 ms/op
# Warmup Iteration   5: 59.015 ±(99.9%) 0.195 ms/op
Iteration   1: 58.984 ±(99.9%) 0.254 ms/op
                 executeFilterQuery·p0.00:   56.820 ms/op
                 executeFilterQuery·p0.50:   59.048 ms/op
                 executeFilterQuery·p0.90:   59.965 ms/op
                 executeFilterQuery·p0.95:   60.588 ms/op
                 executeFilterQuery·p0.99:   61.951 ms/op
                 executeFilterQuery·p0.999:  61.997 ms/op
                 executeFilterQuery·p0.9999: 61.997 ms/op
                 executeFilterQuery·p1.00:   61.997 ms/op

Iteration   2: 58.847 ±(99.9%) 0.222 ms/op
                 executeFilterQuery·p0.00:   56.885 ms/op
                 executeFilterQuery·p0.50:   58.917 ms/op
                 executeFilterQuery·p0.90:   59.703 ms/op
                 executeFilterQuery·p0.95:   59.965 ms/op
                 executeFilterQuery·p0.99:   62.318 ms/op
                 executeFilterQuery·p0.999:  65.208 ms/op
                 executeFilterQuery·p0.9999: 65.208 ms/op
                 executeFilterQuery·p1.00:   65.208 ms/op

Iteration   3: 58.547 ±(99.9%) 0.267 ms/op
                 executeFilterQuery·p0.00:   56.361 ms/op
                 executeFilterQuery·p0.50:   58.327 ms/op
                 executeFilterQuery·p0.90:   59.828 ms/op
                 executeFilterQuery·p0.95:   60.257 ms/op
                 executeFilterQuery·p0.99:   61.821 ms/op
                 executeFilterQuery·p0.999:  62.194 ms/op
                 executeFilterQuery·p0.9999: 62.194 ms/op
                 executeFilterQuery·p1.00:   62.194 ms/op

Iteration   4: 58.927 ±(99.9%) 0.213 ms/op
                 executeFilterQuery·p0.00:   56.426 ms/op
                 executeFilterQuery·p0.50:   59.048 ms/op
                 executeFilterQuery·p0.90:   59.834 ms/op
                 executeFilterQuery·p0.95:   60.359 ms/op
                 executeFilterQuery·p0.99:   60.948 ms/op
                 executeFilterQuery·p0.999:  61.407 ms/op
                 executeFilterQuery·p0.9999: 61.407 ms/op
                 executeFilterQuery·p1.00:   61.407 ms/op

Iteration   5: 58.380 ±(99.9%) 0.237 ms/op
                 executeFilterQuery·p0.00:   56.492 ms/op
                 executeFilterQuery·p0.50:   58.196 ms/op
                 executeFilterQuery·p0.90:   59.376 ms/op
                 executeFilterQuery·p0.95:   59.638 ms/op
                 executeFilterQuery·p0.99:   62.202 ms/op
                 executeFilterQuery·p0.999:  63.570 ms/op
                 executeFilterQuery·p0.9999: 63.570 ms/op
                 executeFilterQuery·p1.00:   63.570 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 848
  mean =     58.736 ±(99.9%) 0.109 ms/op

  Histogram, ms/op:
    [56.000, 57.000) = 26 
    [57.000, 58.000) = 182 
    [58.000, 59.000) = 303 
    [59.000, 60.000) = 283 
    [60.000, 61.000) = 35 
    [61.000, 62.000) = 16 
    [62.000, 63.000) = 1 
    [63.000, 64.000) = 1 
    [64.000, 65.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     56.361 ms/op
     p(50.0000) =     58.786 ms/op
     p(90.0000) =     59.769 ms/op
     p(95.0000) =     60.133 ms/op
     p(99.0000) =     61.669 ms/op
     p(99.9000) =     65.208 ms/op
     p(99.9900) =     65.208 ms/op
     p(99.9990) =     65.208 ms/op
     p(99.9999) =     65.208 ms/op
    p(100.0000) =     65.208 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 42.71% complete, ETA 02:56:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

95.357 ±(99.9%) 5.988 ms/op
# Warmup Iteration   2: 99.887 ±(99.9%) 0.389 ms/op
# Warmup Iteration   3: 100.937 ±(99.9%) 0.905 ms/op
# Warmup Iteration   4: 101.164 ±(99.9%) 0.676 ms/op
# Warmup Iteration   5: 101.760 ±(99.9%) 0.769 ms/op
Iteration   1: 100.681 ±(99.9%) 0.622 ms/op
                 executeFilterQuery·p0.00:   99.090 ms/op
                 executeFilterQuery·p0.50:   99.746 ms/op
                 executeFilterQuery·p0.90:   104.202 ms/op
                 executeFilterQuery·p0.95:   104.464 ms/op
                 executeFilterQuery·p0.99:   104.595 ms/op
                 executeFilterQuery·p0.999:  104.595 ms/op
                 executeFilterQuery·p0.9999: 104.595 ms/op
                 executeFilterQuery·p1.00:   104.595 ms/op

Iteration   2: 100.637 ±(99.9%) 0.956 ms/op
                 executeFilterQuery·p0.00:   99.353 ms/op
                 executeFilterQuery·p0.50:   99.746 ms/op
                 executeFilterQuery·p0.90:   104.464 ms/op
                 executeFilterQuery·p0.95:   104.727 ms/op
                 executeFilterQuery·p0.99:   122.683 ms/op
                 executeFilterQuery·p0.999:  122.683 ms/op
                 executeFilterQuery·p0.9999: 122.683 ms/op
                 executeFilterQuery·p1.00:   122.683 ms/op

Iteration   3: 101.288 ±(99.9%) 0.743 ms/op
                 executeFilterQuery·p0.00:   99.222 ms/op
                 executeFilterQuery·p0.50:   99.877 ms/op
                 executeFilterQuery·p0.90:   104.595 ms/op
                 executeFilterQuery·p0.95:   104.727 ms/op
                 executeFilterQuery·p0.99:   104.989 ms/op
                 executeFilterQuery·p0.999:  104.989 ms/op
                 executeFilterQuery·p0.9999: 104.989 ms/op
                 executeFilterQuery·p1.00:   104.989 ms/op

Iteration   4: 99.671 ±(99.9%) 0.474 ms/op
                 executeFilterQuery·p0.00:   98.828 ms/op
                 executeFilterQuery·p0.50:   99.156 ms/op
                 executeFilterQuery·p0.90:   102.472 ms/op
                 executeFilterQuery·p0.95:   103.409 ms/op
                 executeFilterQuery·p0.99:   104.723 ms/op
                 executeFilterQuery·p0.999:  104.727 ms/op
                 executeFilterQuery·p0.9999: 104.727 ms/op
                 executeFilterQuery·p1.00:   104.727 ms/op

Iteration   5: 99.273 ±(99.9%) 0.171 ms/op
                 executeFilterQuery·p0.00:   98.828 ms/op
                 executeFilterQuery·p0.50:   99.222 ms/op
                 executeFilterQuery·p0.90:   99.484 ms/op
                 executeFilterQuery·p0.95:   99.733 ms/op
                 executeFilterQuery·p0.99:   102.352 ms/op
                 executeFilterQuery·p0.999:  102.367 ms/op
                 executeFilterQuery·p0.9999: 102.367 ms/op
                 executeFilterQuery·p1.00:   102.367 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 498
  mean =    100.305 ±(99.9%) 0.301 ms/op

  Histogram, ms/op:
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 
    [ 97.500, 100.000) = 386 
    [100.000, 102.500) = 38 
    [102.500, 105.000) = 72 
    [105.000, 107.500) = 1 
    [107.500, 110.000) = 0 
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 0 
    [117.500, 120.000) = 0 
    [120.000, 122.500) = 0 
    [122.500, 125.000) = 1 
    [125.000, 127.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     98.828 ms/op
     p(50.0000) =     99.615 ms/op
     p(90.0000) =    104.202 ms/op
     p(95.0000) =    104.464 ms/op
     p(99.0000) =    104.859 ms/op
     p(99.9000) =    122.683 ms/op
     p(99.9900) =    122.683 ms/op
     p(99.9990) =    122.683 ms/op
     p(99.9999) =    122.683 ms/op
    p(100.0000) =    122.683 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 43.75% complete, ETA 02:51:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

617.488 ±(99.9%) 86.829 ms/op
# Warmup Iteration   2: 595.591 ±(99.9%) 10.872 ms/op
# Warmup Iteration   3: 592.692 ±(99.9%) 13.079 ms/op
# Warmup Iteration   4: 585.921 ±(99.9%) 10.407 ms/op
# Warmup Iteration   5: 588.313 ±(99.9%) 9.548 ms/op
Iteration   1: 586.620 ±(99.9%) 7.820 ms/op
                 executeFilterQuery·p0.00:   574.620 ms/op
                 executeFilterQuery·p0.50:   584.057 ms/op
                 executeFilterQuery·p0.90:   600.415 ms/op
                 executeFilterQuery·p0.95:   606.077 ms/op
                 executeFilterQuery·p0.99:   606.077 ms/op
                 executeFilterQuery·p0.999:  606.077 ms/op
                 executeFilterQuery·p0.9999: 606.077 ms/op
                 executeFilterQuery·p1.00:   606.077 ms/op

Iteration   2: 587.696 ±(99.9%) 7.257 ms/op
                 executeFilterQuery·p0.00:   576.717 ms/op
                 executeFilterQuery·p0.50:   585.105 ms/op
                 executeFilterQuery·p0.90:   598.947 ms/op
                 executeFilterQuery·p0.95:   599.785 ms/op
                 executeFilterQuery·p0.99:   599.785 ms/op
                 executeFilterQuery·p0.999:  599.785 ms/op
                 executeFilterQuery·p0.9999: 599.785 ms/op
                 executeFilterQuery·p1.00:   599.785 ms/op

Iteration   3: 583.125 ±(99.9%) 2.749 ms/op
                 executeFilterQuery·p0.00:   576.717 ms/op
                 executeFilterQuery·p0.50:   583.533 ms/op
                 executeFilterQuery·p0.90:   586.259 ms/op
                 executeFilterQuery·p0.95:   587.203 ms/op
                 executeFilterQuery·p0.99:   587.203 ms/op
                 executeFilterQuery·p0.999:  587.203 ms/op
                 executeFilterQuery·p0.9999: 587.203 ms/op
                 executeFilterQuery·p1.00:   587.203 ms/op

Iteration   4: 581.377 ±(99.9%) 5.067 ms/op
                 executeFilterQuery·p0.00:   571.474 ms/op
                 executeFilterQuery·p0.50:   579.863 ms/op
                 executeFilterQuery·p0.90:   591.711 ms/op
                 executeFilterQuery·p0.95:   594.543 ms/op
                 executeFilterQuery·p0.99:   594.543 ms/op
                 executeFilterQuery·p0.999:  594.543 ms/op
                 executeFilterQuery·p0.9999: 594.543 ms/op
                 executeFilterQuery·p1.00:   594.543 ms/op

Iteration   5: 585.338 ±(99.9%) 7.159 ms/op
                 executeFilterQuery·p0.00:   573.571 ms/op
                 executeFilterQuery·p0.50:   584.057 ms/op
                 executeFilterQuery·p0.90:   595.591 ms/op
                 executeFilterQuery·p0.95:   605.028 ms/op
                 executeFilterQuery·p0.99:   605.028 ms/op
                 executeFilterQuery·p0.999:  605.028 ms/op
                 executeFilterQuery·p0.9999: 605.028 ms/op
                 executeFilterQuery·p1.00:   605.028 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 89
  mean =    584.799 ±(99.9%) 2.491 ms/op

  Histogram, ms/op:
    [570.000, 572.500) = 1 
    [572.500, 575.000) = 2 
    [575.000, 577.500) = 4 
    [577.500, 580.000) = 17 
    [580.000, 582.500) = 14 
    [582.500, 585.000) = 16 
    [585.000, 587.500) = 14 
    [587.500, 590.000) = 2 
    [590.000, 592.500) = 6 
    [592.500, 595.000) = 5 
    [595.000, 597.500) = 2 
    [597.500, 600.000) = 4 
    [600.000, 602.500) = 0 
    [602.500, 605.000) = 0 
    [605.000, 607.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    571.474 ms/op
     p(50.0000) =    584.057 ms/op
     p(90.0000) =    594.543 ms/op
     p(95.0000) =    599.261 ms/op
     p(99.0000) =    606.077 ms/op
     p(99.9000) =    606.077 ms/op
     p(99.9900) =    606.077 ms/op
     p(99.9990) =    606.077 ms/op
     p(99.9999) =    606.077 ms/op
    p(100.0000) =    606.077 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 44.79% complete, ETA 02:46:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

596.763 ±(99.9%) 90.748 ms/op
# Warmup Iteration   2: 574.445 ±(99.9%) 14.451 ms/op
# Warmup Iteration   3: 575.959 ±(99.9%) 7.810 ms/op
# Warmup Iteration   4: 576.892 ±(99.9%) 7.266 ms/op
# Warmup Iteration   5: 570.891 ±(99.9%) 14.006 ms/op
Iteration   1: 556.852 ±(99.9%) 2.364 ms/op
                 executeFilterQuery·p0.00:   552.600 ms/op
                 executeFilterQuery·p0.50:   557.842 ms/op
                 executeFilterQuery·p0.90:   560.044 ms/op
                 executeFilterQuery·p0.95:   560.988 ms/op
                 executeFilterQuery·p0.99:   560.988 ms/op
                 executeFilterQuery·p0.999:  560.988 ms/op
                 executeFilterQuery·p0.9999: 560.988 ms/op
                 executeFilterQuery·p1.00:   560.988 ms/op

Iteration   2: 559.066 ±(99.9%) 4.827 ms/op
                 executeFilterQuery·p0.00:   552.600 ms/op
                 executeFilterQuery·p0.50:   557.318 ms/op
                 executeFilterQuery·p0.90:   569.691 ms/op
                 executeFilterQuery·p0.95:   572.522 ms/op
                 executeFilterQuery·p0.99:   572.522 ms/op
                 executeFilterQuery·p0.999:  572.522 ms/op
                 executeFilterQuery·p0.9999: 572.522 ms/op
                 executeFilterQuery·p1.00:   572.522 ms/op

Iteration   3: 559.765 ±(99.9%) 3.211 ms/op
                 executeFilterQuery·p0.00:   552.600 ms/op
                 executeFilterQuery·p0.50:   558.891 ms/op
                 executeFilterQuery·p0.90:   564.553 ms/op
                 executeFilterQuery·p0.95:   568.328 ms/op
                 executeFilterQuery·p0.99:   568.328 ms/op
                 executeFilterQuery·p0.999:  568.328 ms/op
                 executeFilterQuery·p0.9999: 568.328 ms/op
                 executeFilterQuery·p1.00:   568.328 ms/op

Iteration   4: 556.561 ±(99.9%) 4.233 ms/op
                 executeFilterQuery·p0.00:   545.260 ms/op
                 executeFilterQuery·p0.50:   557.318 ms/op
                 executeFilterQuery·p0.90:   562.351 ms/op
                 executeFilterQuery·p0.95:   565.182 ms/op
                 executeFilterQuery·p0.99:   565.182 ms/op
                 executeFilterQuery·p0.999:  565.182 ms/op
                 executeFilterQuery·p0.9999: 565.182 ms/op
                 executeFilterQuery·p1.00:   565.182 ms/op

Iteration   5: 558.541 ±(99.9%) 5.451 ms/op
                 executeFilterQuery·p0.00:   546.308 ms/op
                 executeFilterQuery·p0.50:   557.842 ms/op
                 executeFilterQuery·p0.90:   564.973 ms/op
                 executeFilterQuery·p0.95:   572.522 ms/op
                 executeFilterQuery·p0.99:   572.522 ms/op
                 executeFilterQuery·p0.999:  572.522 ms/op
                 executeFilterQuery·p0.9999: 572.522 ms/op
                 executeFilterQuery·p1.00:   572.522 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 90
  mean =    558.157 ±(99.9%) 1.627 ms/op

  Histogram, ms/op:
    [540.000, 542.500) = 0 
    [542.500, 545.000) = 0 
    [545.000, 547.500) = 2 
    [547.500, 550.000) = 0 
    [550.000, 552.500) = 0 
    [552.500, 555.000) = 20 
    [555.000, 557.500) = 14 
    [557.500, 560.000) = 35 
    [560.000, 562.500) = 7 
    [562.500, 565.000) = 7 
    [565.000, 567.500) = 1 
    [567.500, 570.000) = 2 
    [570.000, 572.500) = 0 
    [572.500, 575.000) = 2 
    [575.000, 577.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    545.260 ms/op
     p(50.0000) =    557.842 ms/op
     p(90.0000) =    564.029 ms/op
     p(95.0000) =    566.598 ms/op
     p(99.0000) =    572.522 ms/op
     p(99.9000) =    572.522 ms/op
     p(99.9900) =    572.522 ms/op
     p(99.9990) =    572.522 ms/op
     p(99.9999) =    572.522 ms/op
    p(100.0000) =    572.522 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 45.83% complete, ETA 02:41:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

929.324 ±(99.9%) 128.451 ms/op
# Warmup Iteration   2: 968.026 ±(99.9%) 8.959 ms/op
# Warmup Iteration   3: 976.606 ±(99.9%) 24.510 ms/op
# Warmup Iteration   4: 964.690 ±(99.9%) 6.187 ms/op
# Warmup Iteration   5: 987.282 ±(99.9%) 91.904 ms/op
Iteration   1: 972.316 ±(99.9%) 7.425 ms/op
                 executeFilterQuery·p0.00:   965.738 ms/op
                 executeFilterQuery·p0.50:   973.079 ms/op
                 executeFilterQuery·p0.90:   979.999 ms/op
                 executeFilterQuery·p0.95:   980.419 ms/op
                 executeFilterQuery·p0.99:   980.419 ms/op
                 executeFilterQuery·p0.999:  980.419 ms/op
                 executeFilterQuery·p0.9999: 980.419 ms/op
                 executeFilterQuery·p1.00:   980.419 ms/op

Iteration   2: 976.606 ±(99.9%) 27.685 ms/op
                 executeFilterQuery·p0.00:   962.593 ms/op
                 executeFilterQuery·p0.50:   969.933 ms/op
                 executeFilterQuery·p0.90:   1018.167 ms/op
                 executeFilterQuery·p0.95:   1019.216 ms/op
                 executeFilterQuery·p0.99:   1019.216 ms/op
                 executeFilterQuery·p0.999:  1019.216 ms/op
                 executeFilterQuery·p0.9999: 1019.216 ms/op
                 executeFilterQuery·p1.00:   1019.216 ms/op

Iteration   3: 981.181 ±(99.9%) 41.238 ms/op
                 executeFilterQuery·p0.00:   959.447 ms/op
                 executeFilterQuery·p0.50:   967.836 ms/op
                 executeFilterQuery·p0.90:   1051.302 ms/op
                 executeFilterQuery·p0.95:   1064.305 ms/op
                 executeFilterQuery·p0.99:   1064.305 ms/op
                 executeFilterQuery·p0.999:  1064.305 ms/op
                 executeFilterQuery·p0.9999: 1064.305 ms/op
                 executeFilterQuery·p1.00:   1064.305 ms/op

Iteration   4: 966.978 ±(99.9%) 20.476 ms/op
                 executeFilterQuery·p0.00:   959.447 ms/op
                 executeFilterQuery·p0.50:   960.496 ms/op
                 executeFilterQuery·p0.90:   1002.229 ms/op
                 executeFilterQuery·p0.95:   1009.779 ms/op
                 executeFilterQuery·p0.99:   1009.779 ms/op
                 executeFilterQuery·p0.999:  1009.779 ms/op
                 executeFilterQuery·p0.9999: 1009.779 ms/op
                 executeFilterQuery·p1.00:   1009.779 ms/op

Iteration   5: 977.273 ±(99.9%) 57.336 ms/op
                 executeFilterQuery·p0.00:   959.447 ms/op
                 executeFilterQuery·p0.50:   963.641 ms/op
                 executeFilterQuery·p0.90:   1076.258 ms/op
                 executeFilterQuery·p0.95:   1101.005 ms/op
                 executeFilterQuery·p0.99:   1101.005 ms/op
                 executeFilterQuery·p0.999:  1101.005 ms/op
                 executeFilterQuery·p0.9999: 1101.005 ms/op
                 executeFilterQuery·p1.00:   1101.005 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 55
  mean =    974.871 ±(99.9%) 11.750 ms/op

  Histogram, ms/op:
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 42 
    [ 975.000, 1000.000) = 8 
    [1000.000, 1025.000) = 3 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 1 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    959.447 ms/op
     p(50.0000) =    966.787 ms/op
     p(90.0000) =   1003.487 ms/op
     p(95.0000) =   1028.234 ms/op
     p(99.0000) =   1101.005 ms/op
     p(99.9000) =   1101.005 ms/op
     p(99.9900) =   1101.005 ms/op
     p(99.9990) =   1101.005 ms/op
     p(99.9999) =   1101.005 ms/op
    p(100.0000) =   1101.005 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 46.88% complete, ETA 02:37:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1205.163 ±(99.9%) 175.739 ms/op
# Warmup Iteration   2: 1173.939 ±(99.9%) 27.171 ms/op
# Warmup Iteration   3: 1188.153 ±(99.9%) 28.033 ms/op
# Warmup Iteration   4: 1174.172 ±(99.9%) 19.096 ms/op
# Warmup Iteration   5: 1160.890 ±(99.9%) 34.309 ms/op
Iteration   1: 1152.035 ±(99.9%) 17.354 ms/op
                 executeFilterQuery·p0.00:   1136.656 ms/op
                 executeFilterQuery·p0.50:   1151.336 ms/op
                 executeFilterQuery·p0.90:   1172.308 ms/op
                 executeFilterQuery·p0.95:   1172.308 ms/op
                 executeFilterQuery·p0.99:   1172.308 ms/op
                 executeFilterQuery·p0.999:  1172.308 ms/op
                 executeFilterQuery·p0.9999: 1172.308 ms/op
                 executeFilterQuery·p1.00:   1172.308 ms/op

Iteration   2: 1189.551 ±(99.9%) 41.764 ms/op
                 executeFilterQuery·p0.00:   1151.336 ms/op
                 executeFilterQuery·p0.50:   1182.794 ms/op
                 executeFilterQuery·p0.90:   1231.028 ms/op
                 executeFilterQuery·p0.95:   1231.028 ms/op
                 executeFilterQuery·p0.99:   1231.028 ms/op
                 executeFilterQuery·p0.999:  1231.028 ms/op
                 executeFilterQuery·p0.9999: 1231.028 ms/op
                 executeFilterQuery·p1.00:   1231.028 ms/op

Iteration   3: 1183.027 ±(99.9%) 51.867 ms/op
                 executeFilterQuery·p0.00:   1140.851 ms/op
                 executeFilterQuery·p0.50:   1170.211 ms/op
                 executeFilterQuery·p0.90:   1226.834 ms/op
                 executeFilterQuery·p0.95:   1226.834 ms/op
                 executeFilterQuery·p0.99:   1226.834 ms/op
                 executeFilterQuery·p0.999:  1226.834 ms/op
                 executeFilterQuery·p0.9999: 1226.834 ms/op
                 executeFilterQuery·p1.00:   1226.834 ms/op

Iteration   4: 1154.599 ±(99.9%) 13.775 ms/op
                 executeFilterQuery·p0.00:   1145.045 ms/op
                 executeFilterQuery·p0.50:   1151.336 ms/op
                 executeFilterQuery·p0.90:   1172.308 ms/op
                 executeFilterQuery·p0.95:   1172.308 ms/op
                 executeFilterQuery·p0.99:   1172.308 ms/op
                 executeFilterQuery·p0.999:  1172.308 ms/op
                 executeFilterQuery·p0.9999: 1172.308 ms/op
                 executeFilterQuery·p1.00:   1172.308 ms/op

Iteration   5: 1157.395 ±(99.9%) 30.644 ms/op
                 executeFilterQuery·p0.00:   1130.365 ms/op
                 executeFilterQuery·p0.50:   1155.531 ms/op
                 executeFilterQuery·p0.90:   1193.279 ms/op
                 executeFilterQuery·p0.95:   1193.279 ms/op
                 executeFilterQuery·p0.99:   1193.279 ms/op
                 executeFilterQuery·p0.999:  1193.279 ms/op
                 executeFilterQuery·p0.9999: 1193.279 ms/op
                 executeFilterQuery·p1.00:   1193.279 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 45
  mean =   1167.321 ±(99.9%) 13.194 ms/op

  Histogram, ms/op:
    [1100.000, 1112.500) = 0 
    [1112.500, 1125.000) = 0 
    [1125.000, 1137.500) = 2 
    [1137.500, 1150.000) = 9 
    [1150.000, 1162.500) = 15 
    [1162.500, 1175.000) = 7 
    [1175.000, 1187.500) = 3 
    [1187.500, 1200.000) = 2 
    [1200.000, 1212.500) = 4 
    [1212.500, 1225.000) = 1 
    [1225.000, 1237.500) = 2 
    [1237.500, 1250.000) = 0 
    [1250.000, 1262.500) = 0 
    [1262.500, 1275.000) = 0 
    [1275.000, 1287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1130.365 ms/op
     p(50.0000) =   1157.628 ms/op
     p(90.0000) =   1210.896 ms/op
     p(95.0000) =   1223.059 ms/op
     p(99.0000) =   1231.028 ms/op
     p(99.9000) =   1231.028 ms/op
     p(99.9900) =   1231.028 ms/op
     p(99.9990) =   1231.028 ms/op
     p(99.9999) =   1231.028 ms/op
    p(100.0000) =   1231.028 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 47.92% complete, ETA 02:32:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1218.445 ±(99.9%) 186.263 ms/op
# Warmup Iteration   2: 1164.152 ±(99.9%) 8.348 ms/op
# Warmup Iteration   3: 1172.541 ±(99.9%) 14.363 ms/op
# Warmup Iteration   4: 1185.124 ±(99.9%) 17.747 ms/op
# Warmup Iteration   5: 1181.629 ±(99.9%) 10.291 ms/op
Iteration   1: 1176.735 ±(99.9%) 12.761 ms/op
                 executeFilterQuery·p0.00:   1170.211 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1195.377 ms/op
                 executeFilterQuery·p0.95:   1195.377 ms/op
                 executeFilterQuery·p0.99:   1195.377 ms/op
                 executeFilterQuery·p0.999:  1195.377 ms/op
                 executeFilterQuery·p0.9999: 1195.377 ms/op
                 executeFilterQuery·p1.00:   1195.377 ms/op

Iteration   2: 1185.357 ±(99.9%) 33.189 ms/op
                 executeFilterQuery·p0.00:   1174.405 ms/op
                 executeFilterQuery·p0.50:   1178.599 ms/op
                 executeFilterQuery·p0.90:   1237.320 ms/op
                 executeFilterQuery·p0.95:   1237.320 ms/op
                 executeFilterQuery·p0.99:   1237.320 ms/op
                 executeFilterQuery·p0.999:  1237.320 ms/op
                 executeFilterQuery·p0.9999: 1237.320 ms/op
                 executeFilterQuery·p1.00:   1237.320 ms/op

Iteration   3: 1177.900 ±(99.9%) 12.460 ms/op
                 executeFilterQuery·p0.00:   1168.114 ms/op
                 executeFilterQuery·p0.50:   1178.599 ms/op
                 executeFilterQuery·p0.90:   1193.279 ms/op
                 executeFilterQuery·p0.95:   1193.279 ms/op
                 executeFilterQuery·p0.99:   1193.279 ms/op
                 executeFilterQuery·p0.999:  1193.279 ms/op
                 executeFilterQuery·p0.9999: 1193.279 ms/op
                 executeFilterQuery·p1.00:   1193.279 ms/op

Iteration   4: 1178.599 ±(99.9%) 9.968 ms/op
                 executeFilterQuery·p0.00:   1172.308 ms/op
                 executeFilterQuery·p0.50:   1176.502 ms/op
                 executeFilterQuery·p0.90:   1191.182 ms/op
                 executeFilterQuery·p0.95:   1191.182 ms/op
                 executeFilterQuery·p0.99:   1191.182 ms/op
                 executeFilterQuery·p0.999:  1191.182 ms/op
                 executeFilterQuery·p0.9999: 1191.182 ms/op
                 executeFilterQuery·p1.00:   1191.182 ms/op

Iteration   5: 1176.502 ±(99.9%) 5.572 ms/op
                 executeFilterQuery·p0.00:   1172.308 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1182.794 ms/op
                 executeFilterQuery·p0.95:   1182.794 ms/op
                 executeFilterQuery·p0.99:   1182.794 ms/op
                 executeFilterQuery·p0.999:  1182.794 ms/op
                 executeFilterQuery·p0.9999: 1182.794 ms/op
                 executeFilterQuery·p1.00:   1182.794 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 45
  mean =   1179.019 ±(99.9%) 5.529 ms/op

  Histogram, ms/op:
    [1160.000, 1165.000) = 0 
    [1165.000, 1170.000) = 1 
    [1170.000, 1175.000) = 19 
    [1175.000, 1180.000) = 12 
    [1180.000, 1185.000) = 9 
    [1185.000, 1190.000) = 0 
    [1190.000, 1195.000) = 2 
    [1195.000, 1200.000) = 1 
    [1200.000, 1205.000) = 0 
    [1205.000, 1210.000) = 0 
    [1210.000, 1215.000) = 0 
    [1215.000, 1220.000) = 0 
    [1220.000, 1225.000) = 0 
    [1225.000, 1230.000) = 0 
    [1230.000, 1235.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1168.114 ms/op
     p(50.0000) =   1178.599 ms/op
     p(90.0000) =   1187.407 ms/op
     p(95.0000) =   1194.747 ms/op
     p(99.0000) =   1237.320 ms/op
     p(99.9000) =   1237.320 ms/op
     p(99.9900) =   1237.320 ms/op
     p(99.9990) =   1237.320 ms/op
     p(99.9999) =   1237.320 ms/op
    p(100.0000) =   1237.320 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 48.96% complete, ETA 02:28:12
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1893.728 ±(99.9%) 416.833 ms/op
# Warmup Iteration   2: 1920.642 ±(99.9%) 47.108 ms/op
# Warmup Iteration   3: 1926.933 ±(99.9%) 31.869 ms/op
# Warmup Iteration   4: 1919.943 ±(99.9%) 23.743 ms/op
# Warmup Iteration   5: 1933.574 ±(99.9%) 33.680 ms/op
Iteration   1: 1922.389 ±(99.9%) 18.472 ms/op
                 executeFilterQuery·p0.00:   1918.894 ms/op
                 executeFilterQuery·p0.50:   1919.943 ms/op
                 executeFilterQuery·p0.90:   1935.671 ms/op
                 executeFilterQuery·p0.95:   1935.671 ms/op
                 executeFilterQuery·p0.99:   1935.671 ms/op
                 executeFilterQuery·p0.999:  1935.671 ms/op
                 executeFilterQuery·p0.9999: 1935.671 ms/op
                 executeFilterQuery·p1.00:   1935.671 ms/op

Iteration   2: 1921.690 ±(99.9%) 16.494 ms/op
                 executeFilterQuery·p0.00:   1918.894 ms/op
                 executeFilterQuery·p0.50:   1918.894 ms/op
                 executeFilterQuery·p0.90:   1933.574 ms/op
                 executeFilterQuery·p0.95:   1933.574 ms/op
                 executeFilterQuery·p0.99:   1933.574 ms/op
                 executeFilterQuery·p0.999:  1933.574 ms/op
                 executeFilterQuery·p0.9999: 1933.574 ms/op
                 executeFilterQuery·p1.00:   1933.574 ms/op

Iteration   3: 1917.146 ±(99.9%) 4.427 ms/op
                 executeFilterQuery·p0.00:   1914.700 ms/op
                 executeFilterQuery·p0.50:   1916.797 ms/op
                 executeFilterQuery·p0.90:   1918.894 ms/op
                 executeFilterQuery·p0.95:   1918.894 ms/op
                 executeFilterQuery·p0.99:   1918.894 ms/op
                 executeFilterQuery·p0.999:  1918.894 ms/op
                 executeFilterQuery·p0.9999: 1918.894 ms/op
                 executeFilterQuery·p1.00:   1918.894 ms/op

Iteration   4: 1919.244 ±(99.9%) 5.782 ms/op
                 executeFilterQuery·p0.00:   1916.797 ms/op
                 executeFilterQuery·p0.50:   1918.894 ms/op
                 executeFilterQuery·p0.90:   1923.088 ms/op
                 executeFilterQuery·p0.95:   1923.088 ms/op
                 executeFilterQuery·p0.99:   1923.088 ms/op
                 executeFilterQuery·p0.999:  1923.088 ms/op
                 executeFilterQuery·p0.9999: 1923.088 ms/op
                 executeFilterQuery·p1.00:   1923.088 ms/op

Iteration   5: 1927.632 ±(99.9%) 19.827 ms/op
                 executeFilterQuery·p0.00:   1918.894 ms/op
                 executeFilterQuery·p0.50:   1927.283 ms/op
                 executeFilterQuery·p0.90:   1937.768 ms/op
                 executeFilterQuery·p0.95:   1937.768 ms/op
                 executeFilterQuery·p0.99:   1937.768 ms/op
                 executeFilterQuery·p0.999:  1937.768 ms/op
                 executeFilterQuery·p0.9999: 1937.768 ms/op
                 executeFilterQuery·p1.00:   1937.768 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 30
  mean =   1921.620 ±(99.9%) 4.016 ms/op

  Histogram, ms/op:
    [1910.000, 1912.500) = 0 
    [1912.500, 1915.000) = 1 
    [1915.000, 1917.500) = 4 
    [1917.500, 1920.000) = 14 
    [1920.000, 1922.500) = 3 
    [1922.500, 1925.000) = 3 
    [1925.000, 1927.500) = 0 
    [1927.500, 1930.000) = 0 
    [1930.000, 1932.500) = 2 
    [1932.500, 1935.000) = 1 
    [1935.000, 1937.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1914.700 ms/op
     p(50.0000) =   1918.894 ms/op
     p(90.0000) =   1933.364 ms/op
     p(95.0000) =   1936.615 ms/op
     p(99.0000) =   1937.768 ms/op
     p(99.9000) =   1937.768 ms/op
     p(99.9900) =   1937.768 ms/op
     p(99.9990) =   1937.768 ms/op
     p(99.9999) =   1937.768 ms/op
    p(100.0000) =   1937.768 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 50.00% complete, ETA 02:24:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_81603905 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_81603905() {
        this(4);
    }
    public KeyMultiRecordMap_81603905(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_81603905 join_map = new KeyMultiRecordMap_81603905();
private final class KeyMultiRecordMap_222630959 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_222630959() {
        this(4);
    }
    public KeyMultiRecordMap_222630959(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_222630959 join_map_0 = new KeyMultiRecordMap_222630959();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

3372.220 ±(99.9%) 776.590 ms/op
# Warmup Iteration   2: 3342.860 ±(99.9%) 1861.805 ms/op
# Warmup Iteration   3: 3256.877 ±(99.9%) 1054.951 ms/op
# Warmup Iteration   4: 3200.254 ±(99.9%) 616.866 ms/op
# Warmup Iteration   5: 3181.380 ±(99.9%) 714.527 ms/op
Iteration   1: 3533.002 ±(99.9%) 3367.157 ms/op
                 executeQuery·p0.00:   3334.472 ms/op
                 executeQuery·p0.50:   3565.158 ms/op
                 executeQuery·p0.90:   3699.376 ms/op
                 executeQuery·p0.95:   3699.376 ms/op
                 executeQuery·p0.99:   3699.376 ms/op
                 executeQuery·p0.999:  3699.376 ms/op
                 executeQuery·p0.9999: 3699.376 ms/op
                 executeQuery·p1.00:   3699.376 ms/op

Iteration   2: 3241.148 ±(99.9%) 1138.645 ms/op
                 executeQuery·p0.00:   3112.174 ms/op
                 executeQuery·p0.50:   3183.477 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op

Iteration   3: 3646.248 ±(99.9%) 7989.748 ms/op
                 executeQuery·p0.00:   3141.534 ms/op
                 executeQuery·p0.50:   3871.343 ms/op
                 executeQuery·p0.90:   3925.869 ms/op
                 executeQuery·p0.95:   3925.869 ms/op
                 executeQuery·p0.99:   3925.869 ms/op
                 executeQuery·p0.999:  3925.869 ms/op
                 executeQuery·p0.9999: 3925.869 ms/op
                 executeQuery·p1.00:   3925.869 ms/op

Iteration   4: 3155.165 ±(99.9%) 691.140 ms/op
                 executeQuery·p0.00:   3082.813 ms/op
                 executeQuery·p0.50:   3112.174 ms/op
                 executeQuery·p0.90:   3313.500 ms/op
                 executeQuery·p0.95:   3313.500 ms/op
                 executeQuery·p0.99:   3313.500 ms/op
                 executeQuery·p0.999:  3313.500 ms/op
                 executeQuery·p0.9999: 3313.500 ms/op
                 executeQuery·p1.00:   3313.500 ms/op

Iteration   5: 3250.586 ±(99.9%) 693.131 ms/op
                 executeQuery·p0.00:   3141.534 ms/op
                 executeQuery·p0.50:   3240.100 ms/op
                 executeQuery·p0.90:   3380.609 ms/op
                 executeQuery·p0.95:   3380.609 ms/op
                 executeQuery·p0.99:   3380.609 ms/op
                 executeQuery·p0.999:  3380.609 ms/op
                 executeQuery·p0.9999: 3380.609 ms/op
                 executeQuery·p1.00:   3380.609 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 18
  mean =   3340.297 ±(99.9%) 249.805 ms/op

  Histogram, ms/op:
    [3000.000, 3100.000) = 2 
    [3100.000, 3200.000) = 6 
    [3200.000, 3300.000) = 2 
    [3300.000, 3400.000) = 3 
    [3400.000, 3500.000) = 1 
    [3500.000, 3600.000) = 1 
    [3600.000, 3700.000) = 1 
    [3700.000, 3800.000) = 0 
    [3800.000, 3900.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3082.813 ms/op
     p(50.0000) =   3273.654 ms/op
     p(90.0000) =   3876.795 ms/op
     p(95.0000) =   3925.869 ms/op
     p(99.0000) =   3925.869 ms/op
     p(99.9000) =   3925.869 ms/op
     p(99.9900) =   3925.869 ms/op
     p(99.9990) =   3925.869 ms/op
     p(99.9999) =   3925.869 ms/op
    p(100.0000) =   3925.869 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 51.04% complete, ETA 02:20:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1179437913 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1179437913() {
        this(4);
    }
    public KeyMultiRecordMap_1179437913(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1179437913 join_map = new KeyMultiRecordMap_1179437913();
private final class KeyMultiRecordMap_1841051914 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1841051914() {
        this(4);
    }
    public KeyMultiRecordMap_1841051914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1841051914 join_map_0 = new KeyMultiRecordMap_1841051914();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

36507.222 ms/op
# Warmup Iteration   2: 37312.528 ms/op
# Warmup Iteration   3: 37044.093 ms/op
# Warmup Iteration   4: 41204.842 ms/op
# Warmup Iteration   5: 40063.992 ms/op
Iteration   1: 37580.964 ms/op
                 executeQuery·p0.00:   37580.964 ms/op
                 executeQuery·p0.50:   37580.964 ms/op
                 executeQuery·p0.90:   37580.964 ms/op
                 executeQuery·p0.95:   37580.964 ms/op
                 executeQuery·p0.99:   37580.964 ms/op
                 executeQuery·p0.999:  37580.964 ms/op
                 executeQuery·p0.9999: 37580.964 ms/op
                 executeQuery·p1.00:   37580.964 ms/op

Iteration   2: 39460.012 ms/op
                 executeQuery·p0.00:   39460.012 ms/op
                 executeQuery·p0.50:   39460.012 ms/op
                 executeQuery·p0.90:   39460.012 ms/op
                 executeQuery·p0.95:   39460.012 ms/op
                 executeQuery·p0.99:   39460.012 ms/op
                 executeQuery·p0.999:  39460.012 ms/op
                 executeQuery·p0.9999: 39460.012 ms/op
                 executeQuery·p1.00:   39460.012 ms/op

Iteration   3: 38319.161 ms/op
                 executeQuery·p0.00:   38319.161 ms/op
                 executeQuery·p0.50:   38319.161 ms/op
                 executeQuery·p0.90:   38319.161 ms/op
                 executeQuery·p0.95:   38319.161 ms/op
                 executeQuery·p0.99:   38319.161 ms/op
                 executeQuery·p0.999:  38319.161 ms/op
                 executeQuery·p0.9999: 38319.161 ms/op
                 executeQuery·p1.00:   38319.161 ms/op

Iteration   4: 37513.855 ms/op
                 executeQuery·p0.00:   37513.855 ms/op
                 executeQuery·p0.50:   37513.855 ms/op
                 executeQuery·p0.90:   37513.855 ms/op
                 executeQuery·p0.95:   37513.855 ms/op
                 executeQuery·p0.99:   37513.855 ms/op
                 executeQuery·p0.999:  37513.855 ms/op
                 executeQuery·p0.9999: 37513.855 ms/op
                 executeQuery·p1.00:   37513.855 ms/op

Iteration   5: 37782.290 ms/op
                 executeQuery·p0.00:   37782.290 ms/op
                 executeQuery·p0.50:   37782.290 ms/op
                 executeQuery·p0.90:   37782.290 ms/op
                 executeQuery·p0.95:   37782.290 ms/op
                 executeQuery·p0.99:   37782.290 ms/op
                 executeQuery·p0.999:  37782.290 ms/op
                 executeQuery·p0.9999: 37782.290 ms/op
                 executeQuery·p1.00:   37782.290 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  38131.257 ±(99.9%) 3108.476 ms/op

  Histogram, ms/op:
    [37000.000, 37250.000) = 0 
    [37250.000, 37500.000) = 0 
    [37500.000, 37750.000) = 2 
    [37750.000, 38000.000) = 1 
    [38000.000, 38250.000) = 0 
    [38250.000, 38500.000) = 1 
    [38500.000, 38750.000) = 0 
    [38750.000, 39000.000) = 0 
    [39000.000, 39250.000) = 0 
    [39250.000, 39500.000) = 1 
    [39500.000, 39750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  37513.855 ms/op
     p(50.0000) =  37782.290 ms/op
     p(90.0000) =  39460.012 ms/op
     p(95.0000) =  39460.012 ms/op
     p(99.0000) =  39460.012 ms/op
     p(99.9000) =  39460.012 ms/op
     p(99.9900) =  39460.012 ms/op
     p(99.9990) =  39460.012 ms/op
     p(99.9999) =  39460.012 ms/op
    p(100.0000) =  39460.012 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 52.08% complete, ETA 02:20:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_634528506 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_634528506() {
        this(4);
    }
    public KeyMultiRecordMap_634528506(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_634528506 join_map = new KeyMultiRecordMap_634528506();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_228795475 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_228795475() {
        this(4);
    }
    public KeyMultiRecordMap_228795475(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_228795475 join_map_0 = new KeyMultiRecordMap_228795475();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

3387.600 ±(99.9%) 1337.089 ms/op
# Warmup Iteration   2: 3546.983 ±(99.9%) 983.906 ms/op
# Warmup Iteration   3: 3586.130 ±(99.9%) 426.044 ms/op
# Warmup Iteration   4: 3400.182 ±(99.9%) 2336.463 ms/op
# Warmup Iteration   5: 3542.789 ±(99.9%) 1648.877 ms/op
Iteration   1: 3530.206 ±(99.9%) 3674.009 ms/op
                 executeQuery·p0.00:   3401.581 ms/op
                 executeQuery·p0.50:   3426.746 ms/op
                 executeQuery·p0.90:   3762.291 ms/op
                 executeQuery·p0.95:   3762.291 ms/op
                 executeQuery·p0.99:   3762.291 ms/op
                 executeQuery·p0.999:  3762.291 ms/op
                 executeQuery·p0.9999: 3762.291 ms/op
                 executeQuery·p1.00:   3762.291 ms/op

Iteration   2: 3538.594 ±(99.9%) 1168.858 ms/op
                 executeQuery·p0.00:   3468.689 ms/op
                 executeQuery·p0.50:   3552.575 ms/op
                 executeQuery·p0.90:   3594.519 ms/op
                 executeQuery·p0.95:   3594.519 ms/op
                 executeQuery·p0.99:   3594.519 ms/op
                 executeQuery·p0.999:  3594.519 ms/op
                 executeQuery·p0.9999: 3594.519 ms/op
                 executeQuery·p1.00:   3594.519 ms/op

Iteration   3: 3567.955 ±(99.9%) 1500.125 ms/op
                 executeQuery·p0.00:   3481.272 ms/op
                 executeQuery·p0.50:   3577.741 ms/op
                 executeQuery·p0.90:   3644.850 ms/op
                 executeQuery·p0.95:   3644.850 ms/op
                 executeQuery·p0.99:   3644.850 ms/op
                 executeQuery·p0.999:  3644.850 ms/op
                 executeQuery·p0.9999: 3644.850 ms/op
                 executeQuery·p1.00:   3644.850 ms/op

Iteration   4: 3537.196 ±(99.9%) 3719.152 ms/op
                 executeQuery·p0.00:   3376.415 ms/op
                 executeQuery·p0.50:   3468.689 ms/op
                 executeQuery·p0.90:   3766.485 ms/op
                 executeQuery·p0.95:   3766.485 ms/op
                 executeQuery·p0.99:   3766.485 ms/op
                 executeQuery·p0.999:  3766.485 ms/op
                 executeQuery·p0.9999: 3766.485 ms/op
                 executeQuery·p1.00:   3766.485 ms/op

Iteration   5: 3549.779 ±(99.9%) 1967.812 ms/op
                 executeQuery·p0.00:   3426.746 ms/op
                 executeQuery·p0.50:   3594.519 ms/op
                 executeQuery·p0.90:   3628.073 ms/op
                 executeQuery·p0.95:   3628.073 ms/op
                 executeQuery·p0.99:   3628.073 ms/op
                 executeQuery·p0.999:  3628.073 ms/op
                 executeQuery·p0.9999: 3628.073 ms/op
                 executeQuery·p1.00:   3628.073 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   3544.746 ±(99.9%) 131.505 ms/op

  Histogram, ms/op:
    [3300.000, 3350.000) = 0 
    [3350.000, 3400.000) = 1 
    [3400.000, 3450.000) = 3 
    [3450.000, 3500.000) = 3 
    [3500.000, 3550.000) = 0 
    [3550.000, 3600.000) = 4 
    [3600.000, 3650.000) = 2 
    [3650.000, 3700.000) = 0 
    [3700.000, 3750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3376.415 ms/op
     p(50.0000) =   3552.575 ms/op
     p(90.0000) =   3763.968 ms/op
     p(95.0000) =   3766.485 ms/op
     p(99.0000) =   3766.485 ms/op
     p(99.9000) =   3766.485 ms/op
     p(99.9900) =   3766.485 ms/op
     p(99.9990) =   3766.485 ms/op
     p(99.9999) =   3766.485 ms/op
    p(100.0000) =   3766.485 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 53.13% complete, ETA 02:16:09
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1873965205 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1873965205() {
        this(4);
    }
    public KeyMultiRecordMap_1873965205(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1873965205 join_map = new KeyMultiRecordMap_1873965205();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1487321924 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1487321924() {
        this(4);
    }
    public KeyMultiRecordMap_1487321924(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1487321924 join_map_0 = new KeyMultiRecordMap_1487321924();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

37580.964 ms/op
# Warmup Iteration   2: 37782.290 ms/op
# Warmup Iteration   3: 36775.657 ms/op
# Warmup Iteration   4: 37178.311 ms/op
# Warmup Iteration   5: 38923.141 ms/op
Iteration   1: 39527.121 ms/op
                 executeQuery·p0.00:   39527.121 ms/op
                 executeQuery·p0.50:   39527.121 ms/op
                 executeQuery·p0.90:   39527.121 ms/op
                 executeQuery·p0.95:   39527.121 ms/op
                 executeQuery·p0.99:   39527.121 ms/op
                 executeQuery·p0.999:  39527.121 ms/op
                 executeQuery·p0.9999: 39527.121 ms/op
                 executeQuery·p1.00:   39527.121 ms/op

Iteration   2: 38252.052 ms/op
                 executeQuery·p0.00:   38252.052 ms/op
                 executeQuery·p0.50:   38252.052 ms/op
                 executeQuery·p0.90:   38252.052 ms/op
                 executeQuery·p0.95:   38252.052 ms/op
                 executeQuery·p0.99:   38252.052 ms/op
                 executeQuery·p0.999:  38252.052 ms/op
                 executeQuery·p0.9999: 38252.052 ms/op
                 executeQuery·p1.00:   38252.052 ms/op

Iteration   3: 37916.508 ms/op
                 executeQuery·p0.00:   37916.508 ms/op
                 executeQuery·p0.50:   37916.508 ms/op
                 executeQuery·p0.90:   37916.508 ms/op
                 executeQuery·p0.95:   37916.508 ms/op
                 executeQuery·p0.99:   37916.508 ms/op
                 executeQuery·p0.999:  37916.508 ms/op
                 executeQuery·p0.9999: 37916.508 ms/op
                 executeQuery·p1.00:   37916.508 ms/op

Iteration   4: 38721.815 ms/op
                 executeQuery·p0.00:   38721.815 ms/op
                 executeQuery·p0.50:   38721.815 ms/op
                 executeQuery·p0.90:   38721.815 ms/op
                 executeQuery·p0.95:   38721.815 ms/op
                 executeQuery·p0.99:   38721.815 ms/op
                 executeQuery·p0.999:  38721.815 ms/op
                 executeQuery·p0.9999: 38721.815 ms/op
                 executeQuery·p1.00:   38721.815 ms/op

Iteration   5: 38050.726 ms/op
                 executeQuery·p0.00:   38050.726 ms/op
                 executeQuery·p0.50:   38050.726 ms/op
                 executeQuery·p0.90:   38050.726 ms/op
                 executeQuery·p0.95:   38050.726 ms/op
                 executeQuery·p0.99:   38050.726 ms/op
                 executeQuery·p0.999:  38050.726 ms/op
                 executeQuery·p0.9999: 38050.726 ms/op
                 executeQuery·p1.00:   38050.726 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  38493.644 ±(99.9%) 2516.039 ms/op

  Histogram, ms/op:
    [37000.000, 37250.000) = 0 
    [37250.000, 37500.000) = 0 
    [37500.000, 37750.000) = 0 
    [37750.000, 38000.000) = 1 
    [38000.000, 38250.000) = 1 
    [38250.000, 38500.000) = 1 
    [38500.000, 38750.000) = 1 
    [38750.000, 39000.000) = 0 
    [39000.000, 39250.000) = 0 
    [39250.000, 39500.000) = 0 
    [39500.000, 39750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  37916.508 ms/op
     p(50.0000) =  38252.052 ms/op
     p(90.0000) =  39527.121 ms/op
     p(95.0000) =  39527.121 ms/op
     p(99.0000) =  39527.121 ms/op
     p(99.9000) =  39527.121 ms/op
     p(99.9900) =  39527.121 ms/op
     p(99.9990) =  39527.121 ms/op
     p(99.9999) =  39527.121 ms/op
    p(100.0000) =  39527.121 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 54.17% complete, ETA 02:15:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1534.516 ±(99.9%) 329.453 ms/op
# Warmup Iteration   2: 1480.589 ±(99.9%) 29.997 ms/op
# Warmup Iteration   3: 1488.379 ±(99.9%) 7.574 ms/op
# Warmup Iteration   4: 1487.780 ±(99.9%) 8.116 ms/op
# Warmup Iteration   5: 1484.484 ±(99.9%) 6.354 ms/op
Iteration   1: 1495.569 ±(99.9%) 16.231 ms/op
                 executeQuery·p0.00:   1486.881 ms/op
                 executeQuery·p0.50:   1493.172 ms/op
                 executeQuery·p0.90:   1503.658 ms/op
                 executeQuery·p0.95:   1503.658 ms/op
                 executeQuery·p0.99:   1503.658 ms/op
                 executeQuery·p0.999:  1503.658 ms/op
                 executeQuery·p0.9999: 1503.658 ms/op
                 executeQuery·p1.00:   1503.658 ms/op

Iteration   2: 1501.561 ±(99.9%) 8.623 ms/op
                 executeQuery·p0.00:   1493.172 ms/op
                 executeQuery·p0.50:   1503.658 ms/op
                 executeQuery·p0.90:   1503.658 ms/op
                 executeQuery·p0.95:   1503.658 ms/op
                 executeQuery·p0.99:   1503.658 ms/op
                 executeQuery·p0.999:  1503.658 ms/op
                 executeQuery·p0.9999: 1503.658 ms/op
                 executeQuery·p1.00:   1503.658 ms/op

Iteration   3: 1495.869 ±(99.9%) 22.769 ms/op
                 executeQuery·p0.00:   1482.686 ms/op
                 executeQuery·p0.50:   1495.269 ms/op
                 executeQuery·p0.90:   1505.755 ms/op
                 executeQuery·p0.95:   1505.755 ms/op
                 executeQuery·p0.99:   1505.755 ms/op
                 executeQuery·p0.999:  1505.755 ms/op
                 executeQuery·p0.9999: 1505.755 ms/op
                 executeQuery·p1.00:   1505.755 ms/op

Iteration   4: 1500.063 ±(99.9%) 28.302 ms/op
                 executeQuery·p0.00:   1486.881 ms/op
                 executeQuery·p0.50:   1497.367 ms/op
                 executeQuery·p0.90:   1522.532 ms/op
                 executeQuery·p0.95:   1522.532 ms/op
                 executeQuery·p0.99:   1522.532 ms/op
                 executeQuery·p0.999:  1522.532 ms/op
                 executeQuery·p0.9999: 1522.532 ms/op
                 executeQuery·p1.00:   1522.532 ms/op

Iteration   5: 1500.063 ±(99.9%) 14.095 ms/op
                 executeQuery·p0.00:   1486.881 ms/op
                 executeQuery·p0.50:   1503.658 ms/op
                 executeQuery·p0.90:   1503.658 ms/op
                 executeQuery·p0.95:   1503.658 ms/op
                 executeQuery·p0.99:   1503.658 ms/op
                 executeQuery·p0.999:  1503.658 ms/op
                 executeQuery·p0.9999: 1503.658 ms/op
                 executeQuery·p1.00:   1503.658 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 35
  mean =   1498.625 ±(99.9%) 5.117 ms/op

  Histogram, ms/op:
    [1480.000, 1485.000) = 2 
    [1485.000, 1490.000) = 5 
    [1490.000, 1495.000) = 4 
    [1495.000, 1500.000) = 4 
    [1500.000, 1505.000) = 14 
    [1505.000, 1510.000) = 5 
    [1510.000, 1515.000) = 0 
    [1515.000, 1520.000) = 0 
    [1520.000, 1525.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1482.686 ms/op
     p(50.0000) =   1501.561 ms/op
     p(90.0000) =   1505.755 ms/op
     p(95.0000) =   1509.111 ms/op
     p(99.0000) =   1522.532 ms/op
     p(99.9000) =   1522.532 ms/op
     p(99.9900) =   1522.532 ms/op
     p(99.9990) =   1522.532 ms/op
     p(99.9999) =   1522.532 ms/op
    p(100.0000) =   1522.532 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 55.21% complete, ETA 02:11:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
23051.895 ms/op
# Warmup Iteration   2: 23152.558 ms/op
# Warmup Iteration   3: 22783.459 ms/op
# Warmup Iteration   4: 18220.057 ms/op
# Warmup Iteration   5: 23286.776 ms/op
Iteration   1: 18052.284 ms/op
                 executeQuery·p0.00:   18052.284 ms/op
                 executeQuery·p0.50:   18052.284 ms/op
                 executeQuery·p0.90:   18052.284 ms/op
                 executeQuery·p0.95:   18052.284 ms/op
                 executeQuery·p0.99:   18052.284 ms/op
                 executeQuery·p0.999:  18052.284 ms/op
                 executeQuery·p0.9999: 18052.284 ms/op
                 executeQuery·p1.00:   18052.284 ms/op

Iteration   2: 18085.839 ms/op
                 executeQuery·p0.00:   18085.839 ms/op
                 executeQuery·p0.50:   18085.839 ms/op
                 executeQuery·p0.90:   18085.839 ms/op
                 executeQuery·p0.95:   18085.839 ms/op
                 executeQuery·p0.99:   18085.839 ms/op
                 executeQuery·p0.999:  18085.839 ms/op
                 executeQuery·p0.9999: 18085.839 ms/op
                 executeQuery·p1.00:   18085.839 ms/op

Iteration   3: 18052.284 ms/op
                 executeQuery·p0.00:   18052.284 ms/op
                 executeQuery·p0.50:   18052.284 ms/op
                 executeQuery·p0.90:   18052.284 ms/op
                 executeQuery·p0.95:   18052.284 ms/op
                 executeQuery·p0.99:   18052.284 ms/op
                 executeQuery·p0.999:  18052.284 ms/op
                 executeQuery·p0.9999: 18052.284 ms/op
                 executeQuery·p1.00:   18052.284 ms/op

Iteration   4: 18085.839 ms/op
                 executeQuery·p0.00:   18085.839 ms/op
                 executeQuery·p0.50:   18085.839 ms/op
                 executeQuery·p0.90:   18085.839 ms/op
                 executeQuery·p0.95:   18085.839 ms/op
                 executeQuery·p0.99:   18085.839 ms/op
                 executeQuery·p0.999:  18085.839 ms/op
                 executeQuery·p0.9999: 18085.839 ms/op
                 executeQuery·p1.00:   18085.839 ms/op

Iteration   5: 18052.284 ms/op
                 executeQuery·p0.00:   18052.284 ms/op
                 executeQuery·p0.50:   18052.284 ms/op
                 executeQuery·p0.90:   18052.284 ms/op
                 executeQuery·p0.95:   18052.284 ms/op
                 executeQuery·p0.99:   18052.284 ms/op
                 executeQuery·p0.999:  18052.284 ms/op
                 executeQuery·p0.9999: 18052.284 ms/op
                 executeQuery·p1.00:   18052.284 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  18065.706 ±(99.9%) 70.769 ms/op

  Histogram, ms/op:
    [18050.000, 18052.500) = 3 
    [18052.500, 18055.000) = 0 
    [18055.000, 18057.500) = 0 
    [18057.500, 18060.000) = 0 
    [18060.000, 18062.500) = 0 
    [18062.500, 18065.000) = 0 
    [18065.000, 18067.500) = 0 
    [18067.500, 18070.000) = 0 
    [18070.000, 18072.500) = 0 
    [18072.500, 18075.000) = 0 
    [18075.000, 18077.500) = 0 
    [18077.500, 18080.000) = 0 
    [18080.000, 18082.500) = 0 
    [18082.500, 18085.000) = 0 
    [18085.000, 18087.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =  18052.284 ms/op
     p(50.0000) =  18052.284 ms/op
     p(90.0000) =  18085.839 ms/op
     p(95.0000) =  18085.839 ms/op
     p(99.0000) =  18085.839 ms/op
     p(99.9000) =  18085.839 ms/op
     p(99.9900) =  18085.839 ms/op
     p(99.9990) =  18085.839 ms/op
     p(99.9999) =  18085.839 ms/op
    p(100.0000) =  18085.839 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 56.25% complete, ETA 02:09:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1172.657 ±(99.9%) 131.022 ms/op
# Warmup Iteration   2: 1190.017 ±(99.9%) 89.919 ms/op
# Warmup Iteration   3: 1157.861 ±(99.9%) 28.600 ms/op
# Warmup Iteration   4: 1159.725 ±(99.9%) 12.334 ms/op
# Warmup Iteration   5: 1169.978 ±(99.9%) 12.264 ms/op
Iteration   1: 1169.279 ±(99.9%) 11.703 ms/op
                 executeQuery·p0.00:   1151.336 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1174.405 ms/op
                 executeQuery·p0.95:   1174.405 ms/op
                 executeQuery·p0.99:   1174.405 ms/op
                 executeQuery·p0.999:  1174.405 ms/op
                 executeQuery·p0.9999: 1174.405 ms/op
                 executeQuery·p1.00:   1174.405 ms/op

Iteration   2: 1171.609 ±(99.9%) 5.286 ms/op
                 executeQuery·p0.00:   1168.114 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1176.502 ms/op
                 executeQuery·p0.95:   1176.502 ms/op
                 executeQuery·p0.99:   1176.502 ms/op
                 executeQuery·p0.999:  1176.502 ms/op
                 executeQuery·p0.9999: 1176.502 ms/op
                 executeQuery·p1.00:   1176.502 ms/op

Iteration   3: 1170.910 ±(99.9%) 3.052 ms/op
                 executeQuery·p0.00:   1168.114 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1172.308 ms/op
                 executeQuery·p0.95:   1172.308 ms/op
                 executeQuery·p0.99:   1172.308 ms/op
                 executeQuery·p0.999:  1172.308 ms/op
                 executeQuery·p0.9999: 1172.308 ms/op
                 executeQuery·p1.00:   1172.308 ms/op

Iteration   4: 1171.842 ±(99.9%) 4.235 ms/op
                 executeQuery·p0.00:   1168.114 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1174.405 ms/op
                 executeQuery·p0.95:   1174.405 ms/op
                 executeQuery·p0.99:   1174.405 ms/op
                 executeQuery·p0.999:  1174.405 ms/op
                 executeQuery·p0.9999: 1174.405 ms/op
                 executeQuery·p1.00:   1174.405 ms/op

Iteration   5: 1197.940 ±(99.9%) 41.052 ms/op
                 executeQuery·p0.00:   1157.628 ms/op
                 executeQuery·p0.50:   1207.960 ms/op
                 executeQuery·p0.90:   1220.542 ms/op
                 executeQuery·p0.95:   1220.542 ms/op
                 executeQuery·p0.99:   1220.542 ms/op
                 executeQuery·p0.999:  1220.542 ms/op
                 executeQuery·p0.9999: 1220.542 ms/op
                 executeQuery·p1.00:   1220.542 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 45
  mean =   1176.316 ±(99.9%) 8.164 ms/op

  Histogram, ms/op:
    [1150.000, 1155.000) = 1 
    [1155.000, 1160.000) = 1 
    [1160.000, 1165.000) = 0 
    [1165.000, 1170.000) = 8 
    [1170.000, 1175.000) = 28 
    [1175.000, 1180.000) = 1 
    [1180.000, 1185.000) = 0 
    [1185.000, 1190.000) = 0 
    [1190.000, 1195.000) = 0 
    [1195.000, 1200.000) = 0 
    [1200.000, 1205.000) = 1 
    [1205.000, 1210.000) = 1 
    [1210.000, 1215.000) = 0 
    [1215.000, 1220.000) = 3 
    [1220.000, 1225.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1151.336 ms/op
     p(50.0000) =   1172.308 ms/op
     p(90.0000) =   1211.315 ms/op
     p(95.0000) =   1217.816 ms/op
     p(99.0000) =   1220.542 ms/op
     p(99.9000) =   1220.542 ms/op
     p(99.9900) =   1220.542 ms/op
     p(99.9990) =   1220.542 ms/op
     p(99.9999) =   1220.542 ms/op
    p(100.0000) =   1220.542 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 57.29% complete, ETA 02:05:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
15099.494 ms/op
# Warmup Iteration   2: 14730.396 ms/op
# Warmup Iteration   3: 12113.150 ms/op
# Warmup Iteration   4: 15049.163 ms/op
# Warmup Iteration   5: 12180.259 ms/op
Iteration   1: 11844.714 ms/op
                 executeQuery·p0.00:   11844.714 ms/op
                 executeQuery·p0.50:   11844.714 ms/op
                 executeQuery·p0.90:   11844.714 ms/op
                 executeQuery·p0.95:   11844.714 ms/op
                 executeQuery·p0.99:   11844.714 ms/op
                 executeQuery·p0.999:  11844.714 ms/op
                 executeQuery·p0.9999: 11844.714 ms/op
                 executeQuery·p1.00:   11844.714 ms/op

Iteration   2: 12012.487 ms/op
                 executeQuery·p0.00:   12012.487 ms/op
                 executeQuery·p0.50:   12012.487 ms/op
                 executeQuery·p0.90:   12012.487 ms/op
                 executeQuery·p0.95:   12012.487 ms/op
                 executeQuery·p0.99:   12012.487 ms/op
                 executeQuery·p0.999:  12012.487 ms/op
                 executeQuery·p0.9999: 12012.487 ms/op
                 executeQuery·p1.00:   12012.487 ms/op

Iteration   3: 11895.046 ms/op
                 executeQuery·p0.00:   11895.046 ms/op
                 executeQuery·p0.50:   11895.046 ms/op
                 executeQuery·p0.90:   11895.046 ms/op
                 executeQuery·p0.95:   11895.046 ms/op
                 executeQuery·p0.99:   11895.046 ms/op
                 executeQuery·p0.999:  11895.046 ms/op
                 executeQuery·p0.9999: 11895.046 ms/op
                 executeQuery·p1.00:   11895.046 ms/op

Iteration   4: 11962.155 ms/op
                 executeQuery·p0.00:   11962.155 ms/op
                 executeQuery·p0.50:   11962.155 ms/op
                 executeQuery·p0.90:   11962.155 ms/op
                 executeQuery·p0.95:   11962.155 ms/op
                 executeQuery·p0.99:   11962.155 ms/op
                 executeQuery·p0.999:  11962.155 ms/op
                 executeQuery·p0.9999: 11962.155 ms/op
                 executeQuery·p1.00:   11962.155 ms/op

Iteration   5: 11978.932 ms/op
                 executeQuery·p0.00:   11978.932 ms/op
                 executeQuery·p0.50:   11978.932 ms/op
                 executeQuery·p0.90:   11978.932 ms/op
                 executeQuery·p0.95:   11978.932 ms/op
                 executeQuery·p0.99:   11978.932 ms/op
                 executeQuery·p0.999:  11978.932 ms/op
                 executeQuery·p0.9999: 11978.932 ms/op
                 executeQuery·p1.00:   11978.932 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  11938.667 ±(99.9%) 260.824 ms/op

  Histogram, ms/op:
    [11800.000, 11825.000) = 0 
    [11825.000, 11850.000) = 1 
    [11850.000, 11875.000) = 0 
    [11875.000, 11900.000) = 1 
    [11900.000, 11925.000) = 0 
    [11925.000, 11950.000) = 0 
    [11950.000, 11975.000) = 1 
    [11975.000, 12000.000) = 1 
    [12000.000, 12025.000) = 1 
    [12025.000, 12050.000) = 0 
    [12050.000, 12075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  11844.714 ms/op
     p(50.0000) =  11962.155 ms/op
     p(90.0000) =  12012.487 ms/op
     p(95.0000) =  12012.487 ms/op
     p(99.0000) =  12012.487 ms/op
     p(99.9000) =  12012.487 ms/op
     p(99.9900) =  12012.487 ms/op
     p(99.9990) =  12012.487 ms/op
     p(99.9999) =  12012.487 ms/op
    p(100.0000) =  12012.487 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 58.33% complete, ETA 02:01:30
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1632.783 ±(99.9%) 128.800 ms/op
# Warmup Iteration   2: 1664.440 ±(99.9%) 66.499 ms/op
# Warmup Iteration   3: 1676.323 ±(99.9%) 16.908 ms/op
# Warmup Iteration   4: 1656.750 ±(99.9%) 105.002 ms/op
# Warmup Iteration   5: 1678.071 ±(99.9%) 16.389 ms/op
Iteration   1: 1680.867 ±(99.9%) 12.195 ms/op
                 executeQuery·p0.00:   1673.527 ms/op
                 executeQuery·p0.50:   1682.964 ms/op
                 executeQuery·p0.90:   1684.013 ms/op
                 executeQuery·p0.95:   1684.013 ms/op
                 executeQuery·p0.99:   1684.013 ms/op
                 executeQuery·p0.999:  1684.013 ms/op
                 executeQuery·p0.9999: 1684.013 ms/op
                 executeQuery·p1.00:   1684.013 ms/op

Iteration   2: 1682.964 ±(99.9%) 13.281 ms/op
                 executeQuery·p0.00:   1675.624 ms/op
                 executeQuery·p0.50:   1681.916 ms/op
                 executeQuery·p0.90:   1688.207 ms/op
                 executeQuery·p0.95:   1688.207 ms/op
                 executeQuery·p0.99:   1688.207 ms/op
                 executeQuery·p0.999:  1688.207 ms/op
                 executeQuery·p0.9999: 1688.207 ms/op
                 executeQuery·p1.00:   1688.207 ms/op

Iteration   3: 1697.295 ±(99.9%) 11.564 ms/op
                 executeQuery·p0.00:   1690.305 ms/op
                 executeQuery·p0.50:   1697.645 ms/op
                 executeQuery·p0.90:   1702.887 ms/op
                 executeQuery·p0.95:   1702.887 ms/op
                 executeQuery·p0.99:   1702.887 ms/op
                 executeQuery·p0.999:  1702.887 ms/op
                 executeQuery·p0.9999: 1702.887 ms/op
                 executeQuery·p1.00:   1702.887 ms/op

Iteration   4: 1693.800 ±(99.9%) 8.854 ms/op
                 executeQuery·p0.00:   1688.207 ms/op
                 executeQuery·p0.50:   1694.499 ms/op
                 executeQuery·p0.90:   1696.596 ms/op
                 executeQuery·p0.95:   1696.596 ms/op
                 executeQuery·p0.99:   1696.596 ms/op
                 executeQuery·p0.999:  1696.596 ms/op
                 executeQuery·p0.9999: 1696.596 ms/op
                 executeQuery·p1.00:   1696.596 ms/op

Iteration   5: 1701.140 ±(99.9%) 29.148 ms/op
                 executeQuery·p0.00:   1688.207 ms/op
                 executeQuery·p0.50:   1699.742 ms/op
                 executeQuery·p0.90:   1719.665 ms/op
                 executeQuery·p0.95:   1719.665 ms/op
                 executeQuery·p0.99:   1719.665 ms/op
                 executeQuery·p0.999:  1719.665 ms/op
                 executeQuery·p0.9999: 1719.665 ms/op
                 executeQuery·p1.00:   1719.665 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   1691.213 ±(99.9%) 6.548 ms/op

  Histogram, ms/op:
    [1670.000, 1675.000) = 1 
    [1675.000, 1680.000) = 2 
    [1680.000, 1685.000) = 7 
    [1685.000, 1690.000) = 4 
    [1690.000, 1695.000) = 4 
    [1695.000, 1700.000) = 8 
    [1700.000, 1705.000) = 3 
    [1705.000, 1710.000) = 0 
    [1710.000, 1715.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1673.527 ms/op
     p(50.0000) =   1691.353 ms/op
     p(90.0000) =   1702.678 ms/op
     p(95.0000) =   1710.437 ms/op
     p(99.0000) =   1719.665 ms/op
     p(99.9000) =   1719.665 ms/op
     p(99.9900) =   1719.665 ms/op
     p(99.9990) =   1719.665 ms/op
     p(99.9999) =   1719.665 ms/op
    p(100.0000) =   1719.665 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 59.38% complete, ETA 01:57:36
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
18454.938 ms/op
# Warmup Iteration   2: 19830.669 ms/op
# Warmup Iteration   3: 18421.383 ms/op
# Warmup Iteration   4: 18387.829 ms/op
# Warmup Iteration   5: 18320.720 ms/op
Iteration   1: 18421.383 ms/op
                 executeQuery·p0.00:   18421.383 ms/op
                 executeQuery·p0.50:   18421.383 ms/op
                 executeQuery·p0.90:   18421.383 ms/op
                 executeQuery·p0.95:   18421.383 ms/op
                 executeQuery·p0.99:   18421.383 ms/op
                 executeQuery·p0.999:  18421.383 ms/op
                 executeQuery·p0.9999: 18421.383 ms/op
                 executeQuery·p1.00:   18421.383 ms/op

Iteration   2: 18421.383 ms/op
                 executeQuery·p0.00:   18421.383 ms/op
                 executeQuery·p0.50:   18421.383 ms/op
                 executeQuery·p0.90:   18421.383 ms/op
                 executeQuery·p0.95:   18421.383 ms/op
                 executeQuery·p0.99:   18421.383 ms/op
                 executeQuery·p0.999:  18421.383 ms/op
                 executeQuery·p0.9999: 18421.383 ms/op
                 executeQuery·p1.00:   18421.383 ms/op

Iteration   3: 18421.383 ms/op
                 executeQuery·p0.00:   18421.383 ms/op
                 executeQuery·p0.50:   18421.383 ms/op
                 executeQuery·p0.90:   18421.383 ms/op
                 executeQuery·p0.95:   18421.383 ms/op
                 executeQuery·p0.99:   18421.383 ms/op
                 executeQuery·p0.999:  18421.383 ms/op
                 executeQuery·p0.9999: 18421.383 ms/op
                 executeQuery·p1.00:   18421.383 ms/op

Iteration   4: 18454.938 ms/op
                 executeQuery·p0.00:   18454.938 ms/op
                 executeQuery·p0.50:   18454.938 ms/op
                 executeQuery·p0.90:   18454.938 ms/op
                 executeQuery·p0.95:   18454.938 ms/op
                 executeQuery·p0.99:   18454.938 ms/op
                 executeQuery·p0.999:  18454.938 ms/op
                 executeQuery·p0.9999: 18454.938 ms/op
                 executeQuery·p1.00:   18454.938 ms/op

Iteration   5: 18387.829 ms/op
                 executeQuery·p0.00:   18387.829 ms/op
                 executeQuery·p0.50:   18387.829 ms/op
                 executeQuery·p0.90:   18387.829 ms/op
                 executeQuery·p0.95:   18387.829 ms/op
                 executeQuery·p0.99:   18387.829 ms/op
                 executeQuery·p0.999:  18387.829 ms/op
                 executeQuery·p0.9999: 18387.829 ms/op
                 executeQuery·p1.00:   18387.829 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  18421.383 ±(99.9%) 91.363 ms/op

  Histogram, ms/op:
    [18380.000, 18385.000) = 0 
    [18385.000, 18390.000) = 1 
    [18390.000, 18395.000) = 0 
    [18395.000, 18400.000) = 0 
    [18400.000, 18405.000) = 0 
    [18405.000, 18410.000) = 0 
    [18410.000, 18415.000) = 0 
    [18415.000, 18420.000) = 0 
    [18420.000, 18425.000) = 3 
    [18425.000, 18430.000) = 0 
    [18430.000, 18435.000) = 0 
    [18435.000, 18440.000) = 0 
    [18440.000, 18445.000) = 0 
    [18445.000, 18450.000) = 0 
    [18450.000, 18455.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  18387.829 ms/op
     p(50.0000) =  18421.383 ms/op
     p(90.0000) =  18454.938 ms/op
     p(95.0000) =  18454.938 ms/op
     p(99.0000) =  18454.938 ms/op
     p(99.9000) =  18454.938 ms/op
     p(99.9900) =  18454.938 ms/op
     p(99.9990) =  18454.938 ms/op
     p(99.9999) =  18454.938 ms/op
    p(100.0000) =  18454.938 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 60.42% complete, ETA 01:54:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
765.460 ±(99.9%) 84.304 ms/op
# Warmup Iteration   2: 733.779 ±(99.9%) 3.415 ms/op
# Warmup Iteration   3: 758.766 ±(99.9%) 16.280 ms/op
# Warmup Iteration   4: 766.509 ±(99.9%) 2.808 ms/op
# Warmup Iteration   5: 733.404 ±(99.9%) 7.153 ms/op
Iteration   1: 762.637 ±(99.9%) 8.176 ms/op
                 executeQuery·p0.00:   741.343 ms/op
                 executeQuery·p0.50:   764.412 ms/op
                 executeQuery·p0.90:   768.187 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   2: 745.088 ±(99.9%) 23.837 ms/op
                 executeQuery·p0.00:   722.469 ms/op
                 executeQuery·p0.50:   746.062 ms/op
                 executeQuery·p0.90:   768.606 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   3: 723.517 ±(99.9%) 3.909 ms/op
                 executeQuery·p0.00:   719.323 ms/op
                 executeQuery·p0.50:   722.993 ms/op
                 executeQuery·p0.90:   729.809 ms/op
                 executeQuery·p0.95:   729.809 ms/op
                 executeQuery·p0.99:   729.809 ms/op
                 executeQuery·p0.999:  729.809 ms/op
                 executeQuery·p0.9999: 729.809 ms/op
                 executeQuery·p1.00:   729.809 ms/op

Iteration   4: 723.293 ±(99.9%) 3.569 ms/op
                 executeQuery·p0.00:   719.323 ms/op
                 executeQuery·p0.50:   721.945 ms/op
                 executeQuery·p0.90:   728.760 ms/op
                 executeQuery·p0.95:   729.809 ms/op
                 executeQuery·p0.99:   729.809 ms/op
                 executeQuery·p0.999:  729.809 ms/op
                 executeQuery·p0.9999: 729.809 ms/op
                 executeQuery·p1.00:   729.809 ms/op

Iteration   5: 723.143 ±(99.9%) 3.612 ms/op
                 executeQuery·p0.00:   717.226 ms/op
                 executeQuery·p0.50:   722.469 ms/op
                 executeQuery·p0.90:   727.712 ms/op
                 executeQuery·p0.95:   728.760 ms/op
                 executeQuery·p0.99:   728.760 ms/op
                 executeQuery·p0.999:  728.760 ms/op
                 executeQuery·p0.9999: 728.760 ms/op
                 executeQuery·p1.00:   728.760 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 69
  mean =    735.143 ±(99.9%) 7.758 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 4 
    [720.000, 725.000) = 30 
    [725.000, 730.000) = 15 
    [730.000, 735.000) = 0 
    [735.000, 740.000) = 0 
    [740.000, 745.000) = 1 
    [745.000, 750.000) = 0 
    [750.000, 755.000) = 0 
    [755.000, 760.000) = 0 
    [760.000, 765.000) = 12 

  Percentiles, ms/op:
      p(0.0000) =    717.226 ms/op
     p(50.0000) =    725.615 ms/op
     p(90.0000) =    765.460 ms/op
     p(95.0000) =    768.082 ms/op
     p(99.0000) =    768.606 ms/op
     p(99.9000) =    768.606 ms/op
     p(99.9900) =    768.606 ms/op
     p(99.9990) =    768.606 ms/op
     p(99.9999) =    768.606 ms/op
    p(100.0000) =    768.606 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 61.46% complete, ETA 01:50:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
10838.082 ms/op
# Warmup Iteration   2: 10821.304 ms/op
# Warmup Iteration   3: 11727.274 ms/op
# Warmup Iteration   4: 11693.720 ms/op
# Warmup Iteration   5: 11693.720 ms/op
Iteration   1: 11744.051 ms/op
                 executeQuery·p0.00:   11744.051 ms/op
                 executeQuery·p0.50:   11744.051 ms/op
                 executeQuery·p0.90:   11744.051 ms/op
                 executeQuery·p0.95:   11744.051 ms/op
                 executeQuery·p0.99:   11744.051 ms/op
                 executeQuery·p0.999:  11744.051 ms/op
                 executeQuery·p0.9999: 11744.051 ms/op
                 executeQuery·p1.00:   11744.051 ms/op

Iteration   2: 12415.140 ms/op
                 executeQuery·p0.00:   12415.140 ms/op
                 executeQuery·p0.50:   12415.140 ms/op
                 executeQuery·p0.90:   12415.140 ms/op
                 executeQuery·p0.95:   12415.140 ms/op
                 executeQuery·p0.99:   12415.140 ms/op
                 executeQuery·p0.999:  12415.140 ms/op
                 executeQuery·p0.9999: 12415.140 ms/op
                 executeQuery·p1.00:   12415.140 ms/op

Iteration   3: 12398.363 ms/op
                 executeQuery·p0.00:   12398.363 ms/op
                 executeQuery·p0.50:   12398.363 ms/op
                 executeQuery·p0.90:   12398.363 ms/op
                 executeQuery·p0.95:   12398.363 ms/op
                 executeQuery·p0.99:   12398.363 ms/op
                 executeQuery·p0.999:  12398.363 ms/op
                 executeQuery·p0.9999: 12398.363 ms/op
                 executeQuery·p1.00:   12398.363 ms/op

Iteration   4: 11693.720 ms/op
                 executeQuery·p0.00:   11693.720 ms/op
                 executeQuery·p0.50:   11693.720 ms/op
                 executeQuery·p0.90:   11693.720 ms/op
                 executeQuery·p0.95:   11693.720 ms/op
                 executeQuery·p0.99:   11693.720 ms/op
                 executeQuery·p0.999:  11693.720 ms/op
                 executeQuery·p0.9999: 11693.720 ms/op
                 executeQuery·p1.00:   11693.720 ms/op

Iteration   5: 11744.051 ms/op
                 executeQuery·p0.00:   11744.051 ms/op
                 executeQuery·p0.50:   11744.051 ms/op
                 executeQuery·p0.90:   11744.051 ms/op
                 executeQuery·p0.95:   11744.051 ms/op
                 executeQuery·p0.99:   11744.051 ms/op
                 executeQuery·p0.999:  11744.051 ms/op
                 executeQuery·p0.9999: 11744.051 ms/op
                 executeQuery·p1.00:   11744.051 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  11999.065 ±(99.9%) 1435.439 ms/op

  Histogram, ms/op:
    [11600.000, 11650.000) = 0 
    [11650.000, 11700.000) = 1 
    [11700.000, 11750.000) = 2 
    [11750.000, 11800.000) = 0 
    [11800.000, 11850.000) = 0 
    [11850.000, 11900.000) = 0 
    [11900.000, 11950.000) = 0 
    [11950.000, 12000.000) = 0 
    [12000.000, 12050.000) = 0 
    [12050.000, 12100.000) = 0 
    [12100.000, 12150.000) = 0 
    [12150.000, 12200.000) = 0 
    [12200.000, 12250.000) = 0 
    [12250.000, 12300.000) = 0 
    [12300.000, 12350.000) = 0 
    [12350.000, 12400.000) = 1 
    [12400.000, 12450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  11693.720 ms/op
     p(50.0000) =  11744.051 ms/op
     p(90.0000) =  12415.140 ms/op
     p(95.0000) =  12415.140 ms/op
     p(99.0000) =  12415.140 ms/op
     p(99.9000) =  12415.140 ms/op
     p(99.9900) =  12415.140 ms/op
     p(99.9990) =  12415.140 ms/op
     p(99.9999) =  12415.140 ms/op
    p(100.0000) =  12415.140 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 62.50% complete, ETA 01:47:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
262.054 ±(99.9%) 57.013 ms/op
# Warmup Iteration   2: 251.783 ±(99.9%) 8.755 ms/op
# Warmup Iteration   3: 254.817 ±(99.9%) 9.156 ms/op
# Warmup Iteration   4: 236.887 ±(99.9%) 2.489 ms/op
# Warmup Iteration   5: 235.966 ±(99.9%) 1.876 ms/op
Iteration   1: 234.808 ±(99.9%) 2.066 ms/op
                 executeQuery·p0.00:   231.997 ms/op
                 executeQuery·p0.50:   234.095 ms/op
                 executeQuery·p0.90:   236.611 ms/op
                 executeQuery·p0.95:   237.398 ms/op
                 executeQuery·p0.99:   257.688 ms/op
                 executeQuery·p0.999:  257.688 ms/op
                 executeQuery·p0.9999: 257.688 ms/op
                 executeQuery·p1.00:   257.688 ms/op

Iteration   2: 235.991 ±(99.9%) 1.760 ms/op
                 executeQuery·p0.00:   231.473 ms/op
                 executeQuery·p0.50:   235.667 ms/op
                 executeQuery·p0.90:   237.398 ms/op
                 executeQuery·p0.95:   237.765 ms/op
                 executeQuery·p0.99:   254.542 ms/op
                 executeQuery·p0.999:  254.542 ms/op
                 executeQuery·p0.9999: 254.542 ms/op
                 executeQuery·p1.00:   254.542 ms/op

Iteration   3: 236.222 ±(99.9%) 2.161 ms/op
                 executeQuery·p0.00:   231.735 ms/op
                 executeQuery·p0.50:   235.930 ms/op
                 executeQuery·p0.90:   237.502 ms/op
                 executeQuery·p0.95:   238.184 ms/op
                 executeQuery·p0.99:   259.785 ms/op
                 executeQuery·p0.999:  259.785 ms/op
                 executeQuery·p0.9999: 259.785 ms/op
                 executeQuery·p1.00:   259.785 ms/op

Iteration   4: 235.125 ±(99.9%) 1.943 ms/op
                 executeQuery·p0.00:   230.687 ms/op
                 executeQuery·p0.50:   234.357 ms/op
                 executeQuery·p0.90:   237.922 ms/op
                 executeQuery·p0.95:   240.229 ms/op
                 executeQuery·p0.99:   252.969 ms/op
                 executeQuery·p0.999:  252.969 ms/op
                 executeQuery·p0.9999: 252.969 ms/op
                 executeQuery·p1.00:   252.969 ms/op

Iteration   5: 233.906 ±(99.9%) 2.053 ms/op
                 executeQuery·p0.00:   231.473 ms/op
                 executeQuery·p0.50:   233.308 ms/op
                 executeQuery·p0.90:   234.514 ms/op
                 executeQuery·p0.95:   235.091 ms/op
                 executeQuery·p0.99:   257.688 ms/op
                 executeQuery·p0.999:  257.688 ms/op
                 executeQuery·p0.9999: 257.688 ms/op
                 executeQuery·p1.00:   257.688 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 215
  mean =    235.210 ±(99.9%) 0.858 ms/op

  Histogram, ms/op:
    [230.000, 232.500) = 22 
    [232.500, 235.000) = 96 
    [235.000, 237.500) = 78 
    [237.500, 240.000) = 13 
    [240.000, 242.500) = 1 
    [242.500, 245.000) = 0 
    [245.000, 247.500) = 0 
    [247.500, 250.000) = 0 
    [250.000, 252.500) = 0 
    [252.500, 255.000) = 2 
    [255.000, 257.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    230.687 ms/op
     p(50.0000) =    234.619 ms/op
     p(90.0000) =    237.240 ms/op
     p(95.0000) =    237.765 ms/op
     p(99.0000) =    257.688 ms/op
     p(99.9000) =    259.785 ms/op
     p(99.9900) =    259.785 ms/op
     p(99.9990) =    259.785 ms/op
     p(99.9999) =    259.785 ms/op
    p(100.0000) =    259.785 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 63.54% complete, ETA 01:43:40
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5905.580 ms/op
# Warmup Iteration   2: 3181.380 ±(99.9%) 1014.725 ms/op
# Warmup Iteration   3: 3102.736 ±(99.9%) 984.814 ms/op
# Warmup Iteration   4: 3305.112 ±(99.9%) 833.039 ms/op
# Warmup Iteration   5: 3185.574 ±(99.9%) 558.316 ms/op
Iteration   1: 3167.748 ±(99.9%) 173.371 ms/op
                 executeQuery·p0.00:   3133.145 ms/op
                 executeQuery·p0.50:   3170.894 ms/op
                 executeQuery·p0.90:   3196.060 ms/op
                 executeQuery·p0.95:   3196.060 ms/op
                 executeQuery·p0.99:   3196.060 ms/op
                 executeQuery·p0.999:  3196.060 ms/op
                 executeQuery·p0.9999: 3196.060 ms/op
                 executeQuery·p1.00:   3196.060 ms/op

Iteration   2: 3154.117 ±(99.9%) 488.366 ms/op
                 executeQuery·p0.00:   3066.036 ms/op
                 executeQuery·p0.50:   3149.922 ms/op
                 executeQuery·p0.90:   3250.586 ms/op
                 executeQuery·p0.95:   3250.586 ms/op
                 executeQuery·p0.99:   3250.586 ms/op
                 executeQuery·p0.999:  3250.586 ms/op
                 executeQuery·p0.9999: 3250.586 ms/op
                 executeQuery·p1.00:   3250.586 ms/op

Iteration   3: 3200.254 ±(99.9%) 819.406 ms/op
                 executeQuery·p0.00:   3049.259 ms/op
                 executeQuery·p0.50:   3202.351 ms/op
                 executeQuery·p0.90:   3347.055 ms/op
                 executeQuery·p0.95:   3347.055 ms/op
                 executeQuery·p0.99:   3347.055 ms/op
                 executeQuery·p0.999:  3347.055 ms/op
                 executeQuery·p0.9999: 3347.055 ms/op
                 executeQuery·p1.00:   3347.055 ms/op

Iteration   4: 3162.505 ±(99.9%) 533.878 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3191.865 ms/op
                 executeQuery·p0.90:   3225.420 ms/op
                 executeQuery·p0.95:   3225.420 ms/op
                 executeQuery·p0.99:   3225.420 ms/op
                 executeQuery·p0.999:  3225.420 ms/op
                 executeQuery·p0.9999: 3225.420 ms/op
                 executeQuery·p1.00:   3225.420 ms/op

Iteration   5: 3128.951 ±(99.9%) 454.069 ms/op
                 executeQuery·p0.00:   3049.259 ms/op
                 executeQuery·p0.50:   3135.242 ms/op
                 executeQuery·p0.90:   3196.060 ms/op
                 executeQuery·p0.95:   3196.060 ms/op
                 executeQuery·p0.99:   3196.060 ms/op
                 executeQuery·p0.999:  3196.060 ms/op
                 executeQuery·p0.9999: 3196.060 ms/op
                 executeQuery·p1.00:   3196.060 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   3162.715 ±(99.9%) 67.090 ms/op

  Histogram, ms/op:
    [3000.000, 3025.000) = 0 
    [3025.000, 3050.000) = 3 
    [3050.000, 3075.000) = 1 
    [3075.000, 3100.000) = 1 
    [3100.000, 3125.000) = 0 
    [3125.000, 3150.000) = 2 
    [3150.000, 3175.000) = 3 
    [3175.000, 3200.000) = 6 
    [3200.000, 3225.000) = 0 
    [3225.000, 3250.000) = 2 
    [3250.000, 3275.000) = 1 
    [3275.000, 3300.000) = 0 
    [3300.000, 3325.000) = 0 
    [3325.000, 3350.000) = 1 
    [3350.000, 3375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3040.870 ms/op
     p(50.0000) =   3170.894 ms/op
     p(90.0000) =   3250.166 ms/op
     p(95.0000) =   3342.231 ms/op
     p(99.0000) =   3347.055 ms/op
     p(99.9000) =   3347.055 ms/op
     p(99.9900) =   3347.055 ms/op
     p(99.9990) =   3347.055 ms/op
     p(99.9999) =   3347.055 ms/op
    p(100.0000) =   3347.055 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 64.58% complete, ETA 01:40:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
234.706 ±(99.9%) 34.940 ms/op
# Warmup Iteration   2: 214.406 ±(99.9%) 5.225 ms/op
# Warmup Iteration   3: 215.123 ±(99.9%) 4.145 ms/op
# Warmup Iteration   4: 217.409 ±(99.9%) 3.048 ms/op
# Warmup Iteration   5: 208.617 ±(99.9%) 0.946 ms/op
Iteration   1: 207.613 ±(99.9%) 2.254 ms/op
                 executeQuery·p0.00:   202.899 ms/op
                 executeQuery·p0.50:   206.963 ms/op
                 executeQuery·p0.90:   210.502 ms/op
                 executeQuery·p0.95:   211.957 ms/op
                 executeQuery·p0.99:   233.832 ms/op
                 executeQuery·p0.999:  233.832 ms/op
                 executeQuery·p0.9999: 233.832 ms/op
                 executeQuery·p1.00:   233.832 ms/op

Iteration   2: 209.196 ±(99.9%) 2.407 ms/op
                 executeQuery·p0.00:   203.162 ms/op
                 executeQuery·p0.50:   209.191 ms/op
                 executeQuery·p0.90:   211.314 ms/op
                 executeQuery·p0.95:   212.625 ms/op
                 executeQuery·p0.99:   236.716 ms/op
                 executeQuery·p0.999:  236.716 ms/op
                 executeQuery·p0.9999: 236.716 ms/op
                 executeQuery·p1.00:   236.716 ms/op

Iteration   3: 209.513 ±(99.9%) 1.169 ms/op
                 executeQuery·p0.00:   205.783 ms/op
                 executeQuery·p0.50:   209.715 ms/op
                 executeQuery·p0.90:   212.389 ms/op
                 executeQuery·p0.95:   213.411 ms/op
                 executeQuery·p0.99:   214.172 ms/op
                 executeQuery·p0.999:  214.172 ms/op
                 executeQuery·p0.9999: 214.172 ms/op
                 executeQuery·p1.00:   214.172 ms/op

Iteration   4: 209.349 ±(99.9%) 1.952 ms/op
                 executeQuery·p0.00:   204.997 ms/op
                 executeQuery·p0.50:   208.929 ms/op
                 executeQuery·p0.90:   212.101 ms/op
                 executeQuery·p0.95:   212.625 ms/op
                 executeQuery·p0.99:   231.211 ms/op
                 executeQuery·p0.999:  231.211 ms/op
                 executeQuery·p0.9999: 231.211 ms/op
                 executeQuery·p1.00:   231.211 ms/op

Iteration   5: 209.584 ±(99.9%) 2.026 ms/op
                 executeQuery·p0.00:   203.948 ms/op
                 executeQuery·p0.50:   209.191 ms/op
                 executeQuery·p0.90:   212.127 ms/op
                 executeQuery·p0.95:   213.582 ms/op
                 executeQuery·p0.99:   232.522 ms/op
                 executeQuery·p0.999:  232.522 ms/op
                 executeQuery·p0.9999: 232.522 ms/op
                 executeQuery·p1.00:   232.522 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 240
  mean =    209.051 ±(99.9%) 0.860 ms/op

  Histogram, ms/op:
    [200.000, 202.500) = 0 
    [202.500, 205.000) = 17 
    [205.000, 207.500) = 60 
    [207.500, 210.000) = 89 
    [210.000, 212.500) = 61 
    [212.500, 215.000) = 9 
    [215.000, 217.500) = 0 
    [217.500, 220.000) = 0 
    [220.000, 222.500) = 0 
    [222.500, 225.000) = 0 
    [225.000, 227.500) = 0 
    [227.500, 230.000) = 0 
    [230.000, 232.500) = 1 
    [232.500, 235.000) = 2 
    [235.000, 237.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    202.899 ms/op
     p(50.0000) =    208.929 ms/op
     p(90.0000) =    211.812 ms/op
     p(95.0000) =    212.848 ms/op
     p(99.0000) =    233.295 ms/op
     p(99.9000) =    236.716 ms/op
     p(99.9900) =    236.716 ms/op
     p(99.9990) =    236.716 ms/op
     p(99.9999) =    236.716 ms/op
    p(100.0000) =    236.716 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 65.63% complete, ETA 01:36:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3538.594 ±(99.9%) 23759.629 ms/op
# Warmup Iteration   2: 2775.581 ±(99.9%) 1012.037 ms/op
# Warmup Iteration   3: 2720.006 ±(99.9%) 553.470 ms/op
# Warmup Iteration   4: 2668.626 ±(99.9%) 379.046 ms/op
# Warmup Iteration   5: 2758.803 ±(99.9%) 1044.190 ms/op
Iteration   1: 2640.314 ±(99.9%) 288.963 ms/op
                 executeQuery·p0.00:   2604.663 ms/op
                 executeQuery·p0.50:   2627.731 ms/op
                 executeQuery·p0.90:   2701.132 ms/op
                 executeQuery·p0.95:   2701.132 ms/op
                 executeQuery·p0.99:   2701.132 ms/op
                 executeQuery·p0.999:  2701.132 ms/op
                 executeQuery·p0.9999: 2701.132 ms/op
                 executeQuery·p1.00:   2701.132 ms/op

Iteration   2: 2726.298 ±(99.9%) 653.115 ms/op
                 executeQuery·p0.00:   2667.577 ms/op
                 executeQuery·p0.50:   2680.160 ms/op
                 executeQuery·p0.90:   2877.293 ms/op
                 executeQuery·p0.95:   2877.293 ms/op
                 executeQuery·p0.99:   2877.293 ms/op
                 executeQuery·p0.999:  2877.293 ms/op
                 executeQuery·p0.9999: 2877.293 ms/op
                 executeQuery·p1.00:   2877.293 ms/op

Iteration   3: 2756.706 ±(99.9%) 590.656 ms/op
                 executeQuery·p0.00:   2654.994 ms/op
                 executeQuery·p0.50:   2749.366 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   4: 2753.561 ±(99.9%) 232.628 ms/op
                 executeQuery·p0.00:   2709.520 ms/op
                 executeQuery·p0.50:   2753.561 ms/op
                 executeQuery·p0.90:   2797.601 ms/op
                 executeQuery·p0.95:   2797.601 ms/op
                 executeQuery·p0.99:   2797.601 ms/op
                 executeQuery·p0.999:  2797.601 ms/op
                 executeQuery·p0.9999: 2797.601 ms/op
                 executeQuery·p1.00:   2797.601 ms/op

Iteration   5: 2723.152 ±(99.9%) 913.615 ms/op
                 executeQuery·p0.00:   2629.829 ms/op
                 executeQuery·p0.50:   2665.480 ms/op
                 executeQuery·p0.90:   2931.818 ms/op
                 executeQuery·p0.95:   2931.818 ms/op
                 executeQuery·p0.99:   2931.818 ms/op
                 executeQuery·p0.999:  2931.818 ms/op
                 executeQuery·p0.9999: 2931.818 ms/op
                 executeQuery·p1.00:   2931.818 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   2720.006 ±(99.9%) 79.948 ms/op

  Histogram, ms/op:
    [2600.000, 2625.000) = 2 
    [2625.000, 2650.000) = 3 
    [2650.000, 2675.000) = 3 
    [2675.000, 2700.000) = 2 
    [2700.000, 2725.000) = 2 
    [2725.000, 2750.000) = 1 
    [2750.000, 2775.000) = 3 
    [2775.000, 2800.000) = 1 
    [2800.000, 2825.000) = 0 
    [2825.000, 2850.000) = 0 
    [2850.000, 2875.000) = 1 
    [2875.000, 2900.000) = 1 
    [2900.000, 2925.000) = 0 
    [2925.000, 2950.000) = 1 
    [2950.000, 2975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2604.663 ms/op
     p(50.0000) =   2694.840 ms/op
     p(90.0000) =   2876.873 ms/op
     p(95.0000) =   2929.092 ms/op
     p(99.0000) =   2931.818 ms/op
     p(99.9000) =   2931.818 ms/op
     p(99.9900) =   2931.818 ms/op
     p(99.9990) =   2931.818 ms/op
     p(99.9999) =   2931.818 ms/op
    p(100.0000) =   2931.818 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 66.67% complete, ETA 01:33:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
243.142 ±(99.9%) 46.584 ms/op
# Warmup Iteration   2: 222.630 ±(99.9%) 4.634 ms/op
# Warmup Iteration   3: 228.059 ±(99.9%) 1.200 ms/op
# Warmup Iteration   4: 222.001 ±(99.9%) 4.120 ms/op
# Warmup Iteration   5: 217.916 ±(99.9%) 1.145 ms/op
Iteration   1: 218.440 ±(99.9%) 0.913 ms/op
                 executeQuery·p0.00:   213.385 ms/op
                 executeQuery·p0.50:   219.021 ms/op
                 executeQuery·p0.90:   220.201 ms/op
                 executeQuery·p0.95:   220.542 ms/op
                 executeQuery·p0.99:   220.725 ms/op
                 executeQuery·p0.999:  220.725 ms/op
                 executeQuery·p0.9999: 220.725 ms/op
                 executeQuery·p1.00:   220.725 ms/op

Iteration   2: 218.223 ±(99.9%) 2.413 ms/op
                 executeQuery·p0.00:   212.337 ms/op
                 executeQuery·p0.50:   218.628 ms/op
                 executeQuery·p0.90:   220.201 ms/op
                 executeQuery·p0.95:   220.371 ms/op
                 executeQuery·p0.99:   245.105 ms/op
                 executeQuery·p0.999:  245.105 ms/op
                 executeQuery·p0.9999: 245.105 ms/op
                 executeQuery·p1.00:   245.105 ms/op

Iteration   3: 217.648 ±(99.9%) 1.981 ms/op
                 executeQuery·p0.00:   212.074 ms/op
                 executeQuery·p0.50:   218.235 ms/op
                 executeQuery·p0.90:   219.415 ms/op
                 executeQuery·p0.95:   220.109 ms/op
                 executeQuery·p0.99:   238.813 ms/op
                 executeQuery·p0.999:  238.813 ms/op
                 executeQuery·p0.9999: 238.813 ms/op
                 executeQuery·p1.00:   238.813 ms/op

Iteration   4: 216.861 ±(99.9%) 1.237 ms/op
                 executeQuery·p0.00:   211.812 ms/op
                 executeQuery·p0.50:   217.842 ms/op
                 executeQuery·p0.90:   219.152 ms/op
                 executeQuery·p0.95:   219.585 ms/op
                 executeQuery·p0.99:   220.201 ms/op
                 executeQuery·p0.999:  220.201 ms/op
                 executeQuery·p0.9999: 220.201 ms/op
                 executeQuery·p1.00:   220.201 ms/op

Iteration   5: 217.933 ±(99.9%) 2.073 ms/op
                 executeQuery·p0.00:   212.599 ms/op
                 executeQuery·p0.50:   217.711 ms/op
                 executeQuery·p0.90:   220.987 ms/op
                 executeQuery·p0.95:   221.158 ms/op
                 executeQuery·p0.99:   239.600 ms/op
                 executeQuery·p0.999:  239.600 ms/op
                 executeQuery·p0.9999: 239.600 ms/op
                 executeQuery·p1.00:   239.600 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 230
  mean =    217.821 ±(99.9%) 0.770 ms/op

  Histogram, ms/op:
    [210.000, 212.500) = 6 
    [212.500, 215.000) = 36 
    [215.000, 217.500) = 38 
    [217.500, 220.000) = 129 
    [220.000, 222.500) = 18 
    [222.500, 225.000) = 0 
    [225.000, 227.500) = 0 
    [227.500, 230.000) = 0 
    [230.000, 232.500) = 0 
    [232.500, 235.000) = 0 
    [235.000, 237.500) = 0 
    [237.500, 240.000) = 2 
    [240.000, 242.500) = 0 
    [242.500, 245.000) = 0 
    [245.000, 247.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    211.812 ms/op
     p(50.0000) =    218.235 ms/op
     p(90.0000) =    219.939 ms/op
     p(95.0000) =    220.463 ms/op
     p(99.0000) =    239.356 ms/op
     p(99.9000) =    245.105 ms/op
     p(99.9900) =    245.105 ms/op
     p(99.9990) =    245.105 ms/op
     p(99.9999) =    245.105 ms/op
    p(100.0000) =    245.105 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 67.71% complete, ETA 01:29:41
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3683.997 ±(99.9%) 23217.189 ms/op
# Warmup Iteration   2: 2928.673 ±(99.9%) 1016.865 ms/op
# Warmup Iteration   3: 2815.427 ±(99.9%) 663.668 ms/op
# Warmup Iteration   4: 2776.629 ±(99.9%) 245.433 ms/op
# Warmup Iteration   5: 2880.438 ±(99.9%) 732.757 ms/op
Iteration   1: 2805.989 ±(99.9%) 707.120 ms/op
                 executeQuery·p0.00:   2743.075 ms/op
                 executeQuery·p0.50:   2755.658 ms/op
                 executeQuery·p0.90:   2969.567 ms/op
                 executeQuery·p0.95:   2969.567 ms/op
                 executeQuery·p0.99:   2969.567 ms/op
                 executeQuery·p0.999:  2969.567 ms/op
                 executeQuery·p0.9999: 2969.567 ms/op
                 executeQuery·p1.00:   2969.567 ms/op

Iteration   2: 2818.572 ±(99.9%) 268.311 ms/op
                 executeQuery·p0.00:   2780.824 ms/op
                 executeQuery·p0.50:   2808.087 ms/op
                 executeQuery·p0.90:   2877.293 ms/op
                 executeQuery·p0.95:   2877.293 ms/op
                 executeQuery·p0.99:   2877.293 ms/op
                 executeQuery·p0.999:  2877.293 ms/op
                 executeQuery·p0.9999: 2877.293 ms/op
                 executeQuery·p1.00:   2877.293 ms/op

Iteration   3: 2821.718 ±(99.9%) 795.256 ms/op
                 executeQuery·p0.00:   2730.492 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   3003.122 ms/op
                 executeQuery·p0.95:   3003.122 ms/op
                 executeQuery·p0.99:   3003.122 ms/op
                 executeQuery·p0.999:  3003.122 ms/op
                 executeQuery·p0.9999: 3003.122 ms/op
                 executeQuery·p1.00:   3003.122 ms/op

Iteration   4: 2794.455 ±(99.9%) 149.070 ms/op
                 executeQuery·p0.00:   2764.046 ms/op
                 executeQuery·p0.50:   2799.698 ms/op
                 executeQuery·p0.90:   2814.378 ms/op
                 executeQuery·p0.95:   2814.378 ms/op
                 executeQuery·p0.99:   2814.378 ms/op
                 executeQuery·p0.999:  2814.378 ms/op
                 executeQuery·p0.9999: 2814.378 ms/op
                 executeQuery·p1.00:   2814.378 ms/op

Iteration   5: 2748.318 ±(99.9%) 327.026 ms/op
                 executeQuery·p0.00:   2709.520 ms/op
                 executeQuery·p0.50:   2730.492 ms/op
                 executeQuery·p0.90:   2822.767 ms/op
                 executeQuery·p0.95:   2822.767 ms/op
                 executeQuery·p0.99:   2822.767 ms/op
                 executeQuery·p0.999:  2822.767 ms/op
                 executeQuery·p0.9999: 2822.767 ms/op
                 executeQuery·p1.00:   2822.767 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 20
  mean =   2797.810 ±(99.9%) 66.052 ms/op

  Histogram, ms/op:
    [2700.000, 2725.000) = 1 
    [2725.000, 2750.000) = 5 
    [2750.000, 2775.000) = 3 
    [2775.000, 2800.000) = 3 
    [2800.000, 2825.000) = 5 
    [2825.000, 2850.000) = 0 
    [2850.000, 2875.000) = 0 
    [2875.000, 2900.000) = 1 
    [2900.000, 2925.000) = 0 
    [2925.000, 2950.000) = 0 
    [2950.000, 2975.000) = 1 
    [2975.000, 3000.000) = 0 
    [3000.000, 3025.000) = 1 
    [3025.000, 3050.000) = 0 
    [3050.000, 3075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2709.520 ms/op
     p(50.0000) =   2782.921 ms/op
     p(90.0000) =   2960.340 ms/op
     p(95.0000) =   3001.444 ms/op
     p(99.0000) =   3003.122 ms/op
     p(99.9000) =   3003.122 ms/op
     p(99.9900) =   3003.122 ms/op
     p(99.9990) =   3003.122 ms/op
     p(99.9999) =   3003.122 ms/op
    p(100.0000) =   3003.122 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 68.75% complete, ETA 01:26:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
203.525 ±(99.9%) 8.158 ms/op
# Warmup Iteration   2: 203.905 ±(99.9%) 0.740 ms/op
# Warmup Iteration   3: 204.617 ±(99.9%) 0.435 ms/op
# Warmup Iteration   4: 203.277 ±(99.9%) 1.037 ms/op
# Warmup Iteration   5: 202.249 ±(99.9%) 0.280 ms/op
Iteration   1: 202.286 ±(99.9%) 0.408 ms/op
                 executeQuery·p0.00:   201.064 ms/op
                 executeQuery·p0.50:   202.113 ms/op
                 executeQuery·p0.90:   203.135 ms/op
                 executeQuery·p0.95:   204.420 ms/op
                 executeQuery·p0.99:   205.521 ms/op
                 executeQuery·p0.999:  205.521 ms/op
                 executeQuery·p0.9999: 205.521 ms/op
                 executeQuery·p1.00:   205.521 ms/op

Iteration   2: 202.045 ±(99.9%) 0.172 ms/op
                 executeQuery·p0.00:   201.589 ms/op
                 executeQuery·p0.50:   202.113 ms/op
                 executeQuery·p0.90:   202.637 ms/op
                 executeQuery·p0.95:   202.637 ms/op
                 executeQuery·p0.99:   202.899 ms/op
                 executeQuery·p0.999:  202.899 ms/op
                 executeQuery·p0.9999: 202.899 ms/op
                 executeQuery·p1.00:   202.899 ms/op

Iteration   3: 202.527 ±(99.9%) 0.669 ms/op
                 executeQuery·p0.00:   201.589 ms/op
                 executeQuery·p0.50:   202.113 ms/op
                 executeQuery·p0.90:   204.813 ms/op
                 executeQuery·p0.95:   206.281 ms/op
                 executeQuery·p0.99:   207.880 ms/op
                 executeQuery·p0.999:  207.880 ms/op
                 executeQuery·p0.9999: 207.880 ms/op
                 executeQuery·p1.00:   207.880 ms/op

Iteration   4: 201.982 ±(99.9%) 0.320 ms/op
                 executeQuery·p0.00:   201.064 ms/op
                 executeQuery·p0.50:   201.851 ms/op
                 executeQuery·p0.90:   202.611 ms/op
                 executeQuery·p0.95:   202.755 ms/op
                 executeQuery·p0.99:   205.521 ms/op
                 executeQuery·p0.999:  205.521 ms/op
                 executeQuery·p0.9999: 205.521 ms/op
                 executeQuery·p1.00:   205.521 ms/op

Iteration   5: 201.982 ±(99.9%) 0.210 ms/op
                 executeQuery·p0.00:   201.064 ms/op
                 executeQuery·p0.50:   201.851 ms/op
                 executeQuery·p0.90:   202.611 ms/op
                 executeQuery·p0.95:   202.899 ms/op
                 executeQuery·p0.99:   202.899 ms/op
                 executeQuery·p0.999:  202.899 ms/op
                 executeQuery·p0.9999: 202.899 ms/op
                 executeQuery·p1.00:   202.899 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 250
  mean =    202.164 ±(99.9%) 0.174 ms/op

  Histogram, ms/op:
    [201.000, 201.500) = 12 
    [201.500, 202.000) = 108 
    [202.000, 202.500) = 92 
    [202.500, 203.000) = 25 
    [203.000, 203.500) = 3 
    [203.500, 204.000) = 2 
    [204.000, 204.500) = 0 
    [204.500, 205.000) = 2 
    [205.000, 205.500) = 0 
    [205.500, 206.000) = 3 
    [206.000, 206.500) = 1 
    [206.500, 207.000) = 1 
    [207.000, 207.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    201.064 ms/op
     p(50.0000) =    202.113 ms/op
     p(90.0000) =    202.637 ms/op
     p(95.0000) =    203.162 ms/op
     p(99.0000) =    206.302 ms/op
     p(99.9000) =    207.880 ms/op
     p(99.9900) =    207.880 ms/op
     p(99.9990) =    207.880 ms/op
     p(99.9999) =    207.880 ms/op
    p(100.0000) =    207.880 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 69.79% complete, ETA 01:22:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1837.105 ±(99.9%) 438.631 ms/op
# Warmup Iteration   2: 1884.641 ±(99.9%) 428.350 ms/op
# Warmup Iteration   3: 2018.719 ±(99.9%) 29.450 ms/op
# Warmup Iteration   4: 2020.396 ±(99.9%) 12.247 ms/op
# Warmup Iteration   5: 2015.783 ±(99.9%) 28.778 ms/op
Iteration   1: 2014.524 ±(99.9%) 25.280 ms/op
                 executeQuery·p0.00:   2009.072 ms/op
                 executeQuery·p0.50:   2013.266 ms/op
                 executeQuery·p0.90:   2025.849 ms/op
                 executeQuery·p0.95:   2025.849 ms/op
                 executeQuery·p0.99:   2025.849 ms/op
                 executeQuery·p0.999:  2025.849 ms/op
                 executeQuery·p0.9999: 2025.849 ms/op
                 executeQuery·p1.00:   2025.849 ms/op

Iteration   2: 2012.008 ±(99.9%) 12.247 ms/op
                 executeQuery·p0.00:   2009.072 ms/op
                 executeQuery·p0.50:   2011.169 ms/op
                 executeQuery·p0.90:   2017.460 ms/op
                 executeQuery·p0.95:   2017.460 ms/op
                 executeQuery·p0.99:   2017.460 ms/op
                 executeQuery·p0.999:  2017.460 ms/op
                 executeQuery·p0.9999: 2017.460 ms/op
                 executeQuery·p1.00:   2017.460 ms/op

Iteration   3: 2010.749 ±(99.9%) 25.791 ms/op
                 executeQuery·p0.00:   2000.683 ms/op
                 executeQuery·p0.50:   2011.169 ms/op
                 executeQuery·p0.90:   2019.557 ms/op
                 executeQuery·p0.95:   2019.557 ms/op
                 executeQuery·p0.99:   2019.557 ms/op
                 executeQuery·p0.999:  2019.557 ms/op
                 executeQuery·p0.9999: 2019.557 ms/op
                 executeQuery·p1.00:   2019.557 ms/op

Iteration   4: 2010.330 ±(99.9%) 17.692 ms/op
                 executeQuery·p0.00:   2004.877 ms/op
                 executeQuery·p0.50:   2009.072 ms/op
                 executeQuery·p0.90:   2017.460 ms/op
                 executeQuery·p0.95:   2017.460 ms/op
                 executeQuery·p0.99:   2017.460 ms/op
                 executeQuery·p0.999:  2017.460 ms/op
                 executeQuery·p0.9999: 2017.460 ms/op
                 executeQuery·p1.00:   2017.460 ms/op

Iteration   5: 2015.363 ±(99.9%) 54.471 ms/op
                 executeQuery·p0.00:   1994.392 ms/op
                 executeQuery·p0.50:   2013.266 ms/op
                 executeQuery·p0.90:   2032.140 ms/op
                 executeQuery·p0.95:   2032.140 ms/op
                 executeQuery·p0.99:   2032.140 ms/op
                 executeQuery·p0.999:  2032.140 ms/op
                 executeQuery·p0.9999: 2032.140 ms/op
                 executeQuery·p1.00:   2032.140 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 25
  mean =   2012.595 ±(99.9%) 5.677 ms/op

  Histogram, ms/op:
    [1990.000, 1995.000) = 1 
    [1995.000, 2000.000) = 0 
    [2000.000, 2005.000) = 2 
    [2005.000, 2010.000) = 4 
    [2010.000, 2015.000) = 12 
    [2015.000, 2020.000) = 3 
    [2020.000, 2025.000) = 1 
    [2025.000, 2030.000) = 1 
    [2030.000, 2035.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1994.392 ms/op
     p(50.0000) =   2011.169 ms/op
     p(90.0000) =   2024.591 ms/op
     p(95.0000) =   2030.253 ms/op
     p(99.0000) =   2032.140 ms/op
     p(99.9000) =   2032.140 ms/op
     p(99.9900) =   2032.140 ms/op
     p(99.9990) =   2032.140 ms/op
     p(99.9999) =   2032.140 ms/op
    p(100.0000) =   2032.140 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 70.83% complete, ETA 01:19:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
41808.822 ms/op
# Warmup Iteration   2: 17280.532 ms/op
# Warmup Iteration   3: 20233.322 ms/op
# Warmup Iteration   4: 17381.196 ms/op
# Warmup Iteration   5: 17314.087 ms/op
Iteration   1: 17280.532 ms/op
                 executeQuery·p0.00:   17280.532 ms/op
                 executeQuery·p0.50:   17280.532 ms/op
                 executeQuery·p0.90:   17280.532 ms/op
                 executeQuery·p0.95:   17280.532 ms/op
                 executeQuery·p0.99:   17280.532 ms/op
                 executeQuery·p0.999:  17280.532 ms/op
                 executeQuery·p0.9999: 17280.532 ms/op
                 executeQuery·p1.00:   17280.532 ms/op

Iteration   2: 17347.641 ms/op
                 executeQuery·p0.00:   17347.641 ms/op
                 executeQuery·p0.50:   17347.641 ms/op
                 executeQuery·p0.90:   17347.641 ms/op
                 executeQuery·p0.95:   17347.641 ms/op
                 executeQuery·p0.99:   17347.641 ms/op
                 executeQuery·p0.999:  17347.641 ms/op
                 executeQuery·p0.9999: 17347.641 ms/op
                 executeQuery·p1.00:   17347.641 ms/op

Iteration   3: 17683.186 ms/op
                 executeQuery·p0.00:   17683.186 ms/op
                 executeQuery·p0.50:   17683.186 ms/op
                 executeQuery·p0.90:   17683.186 ms/op
                 executeQuery·p0.95:   17683.186 ms/op
                 executeQuery·p0.99:   17683.186 ms/op
                 executeQuery·p0.999:  17683.186 ms/op
                 executeQuery·p0.9999: 17683.186 ms/op
                 executeQuery·p1.00:   17683.186 ms/op

Iteration   4: 17381.196 ms/op
                 executeQuery·p0.00:   17381.196 ms/op
                 executeQuery·p0.50:   17381.196 ms/op
                 executeQuery·p0.90:   17381.196 ms/op
                 executeQuery·p0.95:   17381.196 ms/op
                 executeQuery·p0.99:   17381.196 ms/op
                 executeQuery·p0.999:  17381.196 ms/op
                 executeQuery·p0.9999: 17381.196 ms/op
                 executeQuery·p1.00:   17381.196 ms/op

Iteration   5: 20166.214 ms/op
                 executeQuery·p0.00:   20166.214 ms/op
                 executeQuery·p0.50:   20166.214 ms/op
                 executeQuery·p0.90:   20166.214 ms/op
                 executeQuery·p0.95:   20166.214 ms/op
                 executeQuery·p0.99:   20166.214 ms/op
                 executeQuery·p0.999:  20166.214 ms/op
                 executeQuery·p0.9999: 20166.214 ms/op
                 executeQuery·p1.00:   20166.214 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  17971.754 ±(99.9%) 4761.033 ms/op

  Histogram, ms/op:
    [17000.000, 17250.000) = 0 
    [17250.000, 17500.000) = 3 
    [17500.000, 17750.000) = 1 
    [17750.000, 18000.000) = 0 
    [18000.000, 18250.000) = 0 
    [18250.000, 18500.000) = 0 
    [18500.000, 18750.000) = 0 
    [18750.000, 19000.000) = 0 
    [19000.000, 19250.000) = 0 
    [19250.000, 19500.000) = 0 
    [19500.000, 19750.000) = 0 
    [19750.000, 20000.000) = 0 
    [20000.000, 20250.000) = 1 
    [20250.000, 20500.000) = 0 
    [20500.000, 20750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  17280.532 ms/op
     p(50.0000) =  17381.196 ms/op
     p(90.0000) =  20166.214 ms/op
     p(95.0000) =  20166.214 ms/op
     p(99.0000) =  20166.214 ms/op
     p(99.9000) =  20166.214 ms/op
     p(99.9900) =  20166.214 ms/op
     p(99.9990) =  20166.214 ms/op
     p(99.9999) =  20166.214 ms/op
    p(100.0000) =  20166.214 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 71.88% complete, ETA 01:17:01
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
286.875 ±(99.9%) 6.573 ms/op
# Warmup Iteration   2: 282.067 ±(99.9%) 1.120 ms/op
# Warmup Iteration   3: 282.766 ±(99.9%) 2.566 ms/op
# Warmup Iteration   4: 282.082 ±(99.9%) 2.059 ms/op
# Warmup Iteration   5: 282.329 ±(99.9%) 3.008 ms/op
Iteration   1: 290.036 ±(99.9%) 27.157 ms/op
                 executeQuery·p0.00:   281.018 ms/op
                 executeQuery·p0.50:   282.067 ms/op
                 executeQuery·p0.90:   285.422 ms/op
                 executeQuery·p0.95:   340.787 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op

Iteration   2: 282.970 ±(99.9%) 1.592 ms/op
                 executeQuery·p0.00:   277.873 ms/op
                 executeQuery·p0.50:   282.067 ms/op
                 executeQuery·p0.90:   286.890 ms/op
                 executeQuery·p0.95:   289.066 ms/op
                 executeQuery·p0.99:   293.077 ms/op
                 executeQuery·p0.999:  293.077 ms/op
                 executeQuery·p0.9999: 293.077 ms/op
                 executeQuery·p1.00:   293.077 ms/op

Iteration   3: 284.193 ±(99.9%) 4.068 ms/op
                 executeQuery·p0.00:   278.921 ms/op
                 executeQuery·p0.50:   281.805 ms/op
                 executeQuery·p0.90:   299.473 ms/op
                 executeQuery·p0.95:   303.956 ms/op
                 executeQuery·p0.99:   306.184 ms/op
                 executeQuery·p0.999:  306.184 ms/op
                 executeQuery·p0.9999: 306.184 ms/op
                 executeQuery·p1.00:   306.184 ms/op

Iteration   4: 282.591 ±(99.9%) 1.470 ms/op
                 executeQuery·p0.00:   278.921 ms/op
                 executeQuery·p0.50:   282.067 ms/op
                 executeQuery·p0.90:   286.261 ms/op
                 executeQuery·p0.95:   289.355 ms/op
                 executeQuery·p0.99:   292.028 ms/op
                 executeQuery·p0.999:  292.028 ms/op
                 executeQuery·p0.9999: 292.028 ms/op
                 executeQuery·p1.00:   292.028 ms/op

Iteration   5: 283.552 ±(99.9%) 3.075 ms/op
                 executeQuery·p0.00:   279.446 ms/op
                 executeQuery·p0.50:   282.067 ms/op
                 executeQuery·p0.90:   287.991 ms/op
                 executeQuery·p0.95:   299.500 ms/op
                 executeQuery·p0.99:   306.184 ms/op
                 executeQuery·p0.999:  306.184 ms/op
                 executeQuery·p0.9999: 306.184 ms/op
                 executeQuery·p1.00:   306.184 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 179
  mean =    284.639 ±(99.9%) 5.030 ms/op

  Histogram, ms/op:
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 174 
    [300.000, 325.000) = 4 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 
    [375.000, 400.000) = 0 
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 0 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    277.873 ms/op
     p(50.0000) =    282.067 ms/op
     p(90.0000) =    286.786 ms/op
     p(95.0000) =    292.028 ms/op
     p(99.0000) =    354.209 ms/op
     p(99.9000) =    546.308 ms/op
     p(99.9900) =    546.308 ms/op
     p(99.9990) =    546.308 ms/op
     p(99.9999) =    546.308 ms/op
    p(100.0000) =    546.308 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 72.92% complete, ETA 01:13:45
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2946.499 ±(99.9%) 1086.285 ms/op
# Warmup Iteration   2: 2844.787 ±(99.9%) 178.931 ms/op
# Warmup Iteration   3: 2866.807 ±(99.9%) 529.965 ms/op
# Warmup Iteration   4: 2675.966 ±(99.9%) 54.207 ms/op
# Warmup Iteration   5: 2694.840 ±(99.9%) 104.972 ms/op
Iteration   1: 2714.763 ±(99.9%) 307.738 ms/op
                 executeQuery·p0.00:   2680.160 ms/op
                 executeQuery·p0.50:   2696.937 ms/op
                 executeQuery·p0.90:   2785.018 ms/op
                 executeQuery·p0.95:   2785.018 ms/op
                 executeQuery·p0.99:   2785.018 ms/op
                 executeQuery·p0.999:  2785.018 ms/op
                 executeQuery·p0.9999: 2785.018 ms/op
                 executeQuery·p1.00:   2785.018 ms/op

Iteration   2: 2706.375 ±(99.9%) 123.957 ms/op
                 executeQuery·p0.00:   2684.355 ms/op
                 executeQuery·p0.50:   2707.423 ms/op
                 executeQuery·p0.90:   2726.298 ms/op
                 executeQuery·p0.95:   2726.298 ms/op
                 executeQuery·p0.99:   2726.298 ms/op
                 executeQuery·p0.999:  2726.298 ms/op
                 executeQuery·p0.9999: 2726.298 ms/op
                 executeQuery·p1.00:   2726.298 ms/op

Iteration   3: 2752.512 ±(99.9%) 170.523 ms/op
                 executeQuery·p0.00:   2726.298 ms/op
                 executeQuery·p0.50:   2747.269 ms/op
                 executeQuery·p0.90:   2789.212 ms/op
                 executeQuery·p0.95:   2789.212 ms/op
                 executeQuery·p0.99:   2789.212 ms/op
                 executeQuery·p0.999:  2789.212 ms/op
                 executeQuery·p0.9999: 2789.212 ms/op
                 executeQuery·p1.00:   2789.212 ms/op

Iteration   4: 2748.318 ±(99.9%) 113.652 ms/op
                 executeQuery·p0.00:   2730.492 ms/op
                 executeQuery·p0.50:   2745.172 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op

Iteration   5: 2743.075 ±(99.9%) 73.397 ms/op
                 executeQuery·p0.00:   2726.298 ms/op
                 executeQuery·p0.50:   2747.269 ms/op
                 executeQuery·p0.90:   2751.463 ms/op
                 executeQuery·p0.95:   2751.463 ms/op
                 executeQuery·p0.99:   2751.463 ms/op
                 executeQuery·p0.999:  2751.463 ms/op
                 executeQuery·p0.9999: 2751.463 ms/op
                 executeQuery·p1.00:   2751.463 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 20
  mean =   2733.008 ±(99.9%) 26.982 ms/op

  Histogram, ms/op:
    [2600.000, 2612.500) = 0 
    [2612.500, 2625.000) = 0 
    [2625.000, 2637.500) = 0 
    [2637.500, 2650.000) = 0 
    [2650.000, 2662.500) = 0 
    [2662.500, 2675.000) = 0 
    [2675.000, 2687.500) = 2 
    [2687.500, 2700.000) = 2 
    [2700.000, 2712.500) = 1 
    [2712.500, 2725.000) = 1 
    [2725.000, 2737.500) = 4 
    [2737.500, 2750.000) = 6 
    [2750.000, 2762.500) = 1 
    [2762.500, 2775.000) = 1 
    [2775.000, 2787.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2680.160 ms/op
     p(50.0000) =   2736.783 ms/op
     p(90.0000) =   2783.760 ms/op
     p(95.0000) =   2789.002 ms/op
     p(99.0000) =   2789.212 ms/op
     p(99.9000) =   2789.212 ms/op
     p(99.9900) =   2789.212 ms/op
     p(99.9990) =   2789.212 ms/op
     p(99.9999) =   2789.212 ms/op
    p(100.0000) =   2789.212 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 73.96% complete, ETA 01:10:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
28521.267 ms/op
# Warmup Iteration   2: 27783.070 ms/op
# Warmup Iteration   3: 27447.525 ms/op
# Warmup Iteration   4: 27346.862 ms/op
# Warmup Iteration   5: 27145.535 ms/op
Iteration   1: 27380.417 ms/op
                 executeQuery·p0.00:   27380.417 ms/op
                 executeQuery·p0.50:   27380.417 ms/op
                 executeQuery·p0.90:   27380.417 ms/op
                 executeQuery·p0.95:   27380.417 ms/op
                 executeQuery·p0.99:   27380.417 ms/op
                 executeQuery·p0.999:  27380.417 ms/op
                 executeQuery·p0.9999: 27380.417 ms/op
                 executeQuery·p1.00:   27380.417 ms/op

Iteration   2: 27413.971 ms/op
                 executeQuery·p0.00:   27413.971 ms/op
                 executeQuery·p0.50:   27413.971 ms/op
                 executeQuery·p0.90:   27413.971 ms/op
                 executeQuery·p0.95:   27413.971 ms/op
                 executeQuery·p0.99:   27413.971 ms/op
                 executeQuery·p0.999:  27413.971 ms/op
                 executeQuery·p0.9999: 27413.971 ms/op
                 executeQuery·p1.00:   27413.971 ms/op

Iteration   3: 27078.427 ms/op
                 executeQuery·p0.00:   27078.427 ms/op
                 executeQuery·p0.50:   27078.427 ms/op
                 executeQuery·p0.90:   27078.427 ms/op
                 executeQuery·p0.95:   27078.427 ms/op
                 executeQuery·p0.99:   27078.427 ms/op
                 executeQuery·p0.999:  27078.427 ms/op
                 executeQuery·p0.9999: 27078.427 ms/op
                 executeQuery·p1.00:   27078.427 ms/op

Iteration   4: 26910.654 ms/op
                 executeQuery·p0.00:   26910.654 ms/op
                 executeQuery·p0.50:   26910.654 ms/op
                 executeQuery·p0.90:   26910.654 ms/op
                 executeQuery·p0.95:   26910.654 ms/op
                 executeQuery·p0.99:   26910.654 ms/op
                 executeQuery·p0.999:  26910.654 ms/op
                 executeQuery·p0.9999: 26910.654 ms/op
                 executeQuery·p1.00:   26910.654 ms/op

Iteration   5: 26776.437 ms/op
                 executeQuery·p0.00:   26776.437 ms/op
                 executeQuery·p0.50:   26776.437 ms/op
                 executeQuery·p0.90:   26776.437 ms/op
                 executeQuery·p0.95:   26776.437 ms/op
                 executeQuery·p0.99:   26776.437 ms/op
                 executeQuery·p0.999:  26776.437 ms/op
                 executeQuery·p0.9999: 26776.437 ms/op
                 executeQuery·p1.00:   26776.437 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 5
  mean =  27111.981 ±(99.9%) 1084.870 ms/op

  Histogram, ms/op:
    [26700.000, 26750.000) = 0 
    [26750.000, 26800.000) = 1 
    [26800.000, 26850.000) = 0 
    [26850.000, 26900.000) = 0 
    [26900.000, 26950.000) = 1 
    [26950.000, 27000.000) = 0 
    [27000.000, 27050.000) = 0 
    [27050.000, 27100.000) = 1 
    [27100.000, 27150.000) = 0 
    [27150.000, 27200.000) = 0 
    [27200.000, 27250.000) = 0 
    [27250.000, 27300.000) = 0 
    [27300.000, 27350.000) = 0 
    [27350.000, 27400.000) = 1 
    [27400.000, 27450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  26776.437 ms/op
     p(50.0000) =  27078.427 ms/op
     p(90.0000) =  27413.971 ms/op
     p(95.0000) =  27413.971 ms/op
     p(99.0000) =  27413.971 ms/op
     p(99.9000) =  27413.971 ms/op
     p(99.9900) =  27413.971 ms/op
     p(99.9990) =  27413.971 ms/op
     p(99.9999) =  27413.971 ms/op
    p(100.0000) =  27413.971 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 75.00% complete, ETA 01:08:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
363.369 ±(99.9%) 15.451 ms/op
# Warmup Iteration   2: 378.050 ±(99.9%) 23.145 ms/op
# Warmup Iteration   3: 339.616 ±(99.9%) 1.247 ms/op
# Warmup Iteration   4: 339.354 ±(99.9%) 1.049 ms/op
# Warmup Iteration   5: 341.923 ±(99.9%) 2.086 ms/op
Iteration   1: 341.399 ±(99.9%) 2.291 ms/op
                 executeQuery·p0.00:   337.641 ms/op
                 executeQuery·p0.50:   339.476 ms/op
                 executeQuery·p0.90:   347.026 ms/op
                 executeQuery·p0.95:   347.079 ms/op
                 executeQuery·p0.99:   347.079 ms/op
                 executeQuery·p0.999:  347.079 ms/op
                 executeQuery·p0.9999: 347.079 ms/op
                 executeQuery·p1.00:   347.079 ms/op

Iteration   2: 338.865 ±(99.9%) 0.612 ms/op
                 executeQuery·p0.00:   337.641 ms/op
                 executeQuery·p0.50:   338.690 ms/op
                 executeQuery·p0.90:   340.263 ms/op
                 executeQuery·p0.95:   340.971 ms/op
                 executeQuery·p0.99:   341.836 ms/op
                 executeQuery·p0.999:  341.836 ms/op
                 executeQuery·p0.9999: 341.836 ms/op
                 executeQuery·p1.00:   341.836 ms/op

Iteration   3: 341.993 ±(99.9%) 1.464 ms/op
                 executeQuery·p0.00:   338.166 ms/op
                 executeQuery·p0.50:   342.884 ms/op
                 executeQuery·p0.90:   343.880 ms/op
                 executeQuery·p0.95:   345.873 ms/op
                 executeQuery·p0.99:   347.603 ms/op
                 executeQuery·p0.999:  347.603 ms/op
                 executeQuery·p0.9999: 347.603 ms/op
                 executeQuery·p1.00:   347.603 ms/op

Iteration   4: 344.493 ±(99.9%) 1.914 ms/op
                 executeQuery·p0.00:   339.739 ms/op
                 executeQuery·p0.50:   344.457 ms/op
                 executeQuery·p0.90:   350.224 ms/op
                 executeQuery·p0.95:   351.011 ms/op
                 executeQuery·p0.99:   351.273 ms/op
                 executeQuery·p0.999:  351.273 ms/op
                 executeQuery·p0.9999: 351.273 ms/op
                 executeQuery·p1.00:   351.273 ms/op

Iteration   5: 342.080 ±(99.9%) 1.173 ms/op
                 executeQuery·p0.00:   338.690 ms/op
                 executeQuery·p0.50:   341.836 ms/op
                 executeQuery·p0.90:   344.405 ms/op
                 executeQuery·p0.95:   345.165 ms/op
                 executeQuery·p0.99:   346.030 ms/op
                 executeQuery·p0.999:  346.030 ms/op
                 executeQuery·p0.9999: 346.030 ms/op
                 executeQuery·p1.00:   346.030 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 149
  mean =    341.748 ±(99.9%) 0.812 ms/op

  Histogram, ms/op:
    [330.000, 332.500) = 0 
    [332.500, 335.000) = 0 
    [335.000, 337.500) = 0 
    [337.500, 340.000) = 54 
    [340.000, 342.500) = 35 
    [342.500, 345.000) = 44 
    [345.000, 347.500) = 10 
    [347.500, 350.000) = 3 
    [350.000, 352.500) = 3 
    [352.500, 355.000) = 0 
    [355.000, 357.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    337.641 ms/op
     p(50.0000) =    341.836 ms/op
     p(90.0000) =    346.030 ms/op
     p(95.0000) =    347.079 ms/op
     p(99.0000) =    351.011 ms/op
     p(99.9000) =    351.273 ms/op
     p(99.9900) =    351.273 ms/op
     p(99.9990) =    351.273 ms/op
     p(99.9999) =    351.273 ms/op
    p(100.0000) =    351.273 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 76.04% complete, ETA 01:05:09
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3521.817 ±(99.9%) 3076.372 ms/op
# Warmup Iteration   2: 3601.509 ±(99.9%) 4092.434 ms/op
# Warmup Iteration   3: 3361.036 ±(99.9%) 116.886 ms/op
# Warmup Iteration   4: 3370.822 ±(99.9%) 509.493 ms/op
# Warmup Iteration   5: 3394.590 ±(99.9%) 44.179 ms/op
Iteration   1: 3354.045 ±(99.9%) 318.577 ms/op
                 executeQuery·p0.00:   3334.472 ms/op
                 executeQuery·p0.50:   3359.638 ms/op
                 executeQuery·p0.90:   3368.026 ms/op
                 executeQuery·p0.95:   3368.026 ms/op
                 executeQuery·p0.99:   3368.026 ms/op
                 executeQuery·p0.999:  3368.026 ms/op
                 executeQuery·p0.9999: 3368.026 ms/op
                 executeQuery·p1.00:   3368.026 ms/op

Iteration   2: 3397.386 ±(99.9%) 229.559 ms/op
                 executeQuery·p0.00:   3384.803 ms/op
                 executeQuery·p0.50:   3397.386 ms/op
                 executeQuery·p0.90:   3409.969 ms/op
                 executeQuery·p0.95:   3409.969 ms/op
                 executeQuery·p0.99:   3409.969 ms/op
                 executeQuery·p0.999:  3409.969 ms/op
                 executeQuery·p0.9999: 3409.969 ms/op
                 executeQuery·p1.00:   3409.969 ms/op

Iteration   3: 3375.017 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   3372.220 ms/op
                 executeQuery·p0.50:   3372.220 ms/op
                 executeQuery·p0.90:   3380.609 ms/op
                 executeQuery·p0.95:   3380.609 ms/op
                 executeQuery·p0.99:   3380.609 ms/op
                 executeQuery·p0.999:  3380.609 ms/op
                 executeQuery·p0.9999: 3380.609 ms/op
                 executeQuery·p1.00:   3380.609 ms/op

Iteration   4: 3383.405 ±(99.9%) 441.787 ms/op
                 executeQuery·p0.00:   3355.443 ms/op
                 executeQuery·p0.50:   3397.386 ms/op
                 executeQuery·p0.90:   3397.386 ms/op
                 executeQuery·p0.95:   3397.386 ms/op
                 executeQuery·p0.99:   3397.386 ms/op
                 executeQuery·p0.999:  3397.386 ms/op
                 executeQuery·p0.9999: 3397.386 ms/op
                 executeQuery·p1.00:   3397.386 ms/op

Iteration   5: 3393.192 ±(99.9%) 275.896 ms/op
                 executeQuery·p0.00:   3380.609 ms/op
                 executeQuery·p0.50:   3388.998 ms/op
                 executeQuery·p0.90:   3409.969 ms/op
                 executeQuery·p0.95:   3409.969 ms/op
                 executeQuery·p0.99:   3409.969 ms/op
                 executeQuery·p0.999:  3409.969 ms/op
                 executeQuery·p0.9999: 3409.969 ms/op
                 executeQuery·p1.00:   3409.969 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   3380.609 ±(99.9%) 22.420 ms/op

  Histogram, ms/op:
    [3330.000, 3335.000) = 1 
    [3335.000, 3340.000) = 0 
    [3340.000, 3345.000) = 0 
    [3345.000, 3350.000) = 0 
    [3350.000, 3355.000) = 0 
    [3355.000, 3360.000) = 2 
    [3360.000, 3365.000) = 0 
    [3365.000, 3370.000) = 1 
    [3370.000, 3375.000) = 2 
    [3375.000, 3380.000) = 0 
    [3380.000, 3385.000) = 3 
    [3385.000, 3390.000) = 1 
    [3390.000, 3395.000) = 0 
    [3395.000, 3400.000) = 3 
    [3400.000, 3405.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3334.472 ms/op
     p(50.0000) =   3380.609 ms/op
     p(90.0000) =   3409.969 ms/op
     p(95.0000) =   3409.969 ms/op
     p(99.0000) =   3409.969 ms/op
     p(99.9000) =   3409.969 ms/op
     p(99.9900) =   3409.969 ms/op
     p(99.9990) =   3409.969 ms/op
     p(99.9999) =   3409.969 ms/op
    p(100.0000) =   3409.969 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 77.08% complete, ETA 01:01:59
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
32984.007 ms/op
# Warmup Iteration   2: 33621.541 ms/op
# Warmup Iteration   3: 34091.303 ms/op
# Warmup Iteration   4: 33688.650 ms/op
# Warmup Iteration   5: 33386.660 ms/op
Iteration   1: 33688.650 ms/op
                 executeQuery·p0.00:   33688.650 ms/op
                 executeQuery·p0.50:   33688.650 ms/op
                 executeQuery·p0.90:   33688.650 ms/op
                 executeQuery·p0.95:   33688.650 ms/op
                 executeQuery·p0.99:   33688.650 ms/op
                 executeQuery·p0.999:  33688.650 ms/op
                 executeQuery·p0.9999: 33688.650 ms/op
                 executeQuery·p1.00:   33688.650 ms/op

Iteration   2: 33621.541 ms/op
                 executeQuery·p0.00:   33621.541 ms/op
                 executeQuery·p0.50:   33621.541 ms/op
                 executeQuery·p0.90:   33621.541 ms/op
                 executeQuery·p0.95:   33621.541 ms/op
                 executeQuery·p0.99:   33621.541 ms/op
                 executeQuery·p0.999:  33621.541 ms/op
                 executeQuery·p0.9999: 33621.541 ms/op
                 executeQuery·p1.00:   33621.541 ms/op

Iteration   3: 33185.333 ms/op
                 executeQuery·p0.00:   33185.333 ms/op
                 executeQuery·p0.50:   33185.333 ms/op
                 executeQuery·p0.90:   33185.333 ms/op
                 executeQuery·p0.95:   33185.333 ms/op
                 executeQuery·p0.99:   33185.333 ms/op
                 executeQuery·p0.999:  33185.333 ms/op
                 executeQuery·p0.9999: 33185.333 ms/op
                 executeQuery·p1.00:   33185.333 ms/op

Iteration   4: 32547.799 ms/op
                 executeQuery·p0.00:   32547.799 ms/op
                 executeQuery·p0.50:   32547.799 ms/op
                 executeQuery·p0.90:   32547.799 ms/op
                 executeQuery·p0.95:   32547.799 ms/op
                 executeQuery·p0.99:   32547.799 ms/op
                 executeQuery·p0.999:  32547.799 ms/op
                 executeQuery·p0.9999: 32547.799 ms/op
                 executeQuery·p1.00:   32547.799 ms/op

Iteration   5: 33520.878 ms/op
                 executeQuery·p0.00:   33520.878 ms/op
                 executeQuery·p0.50:   33520.878 ms/op
                 executeQuery·p0.90:   33520.878 ms/op
                 executeQuery·p0.95:   33520.878 ms/op
                 executeQuery·p0.99:   33520.878 ms/op
                 executeQuery·p0.999:  33520.878 ms/op
                 executeQuery·p0.9999: 33520.878 ms/op
                 executeQuery·p1.00:   33520.878 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  33312.840 ±(99.9%) 1807.501 ms/op

  Histogram, ms/op:
    [32000.000, 32125.000) = 0 
    [32125.000, 32250.000) = 0 
    [32250.000, 32375.000) = 0 
    [32375.000, 32500.000) = 0 
    [32500.000, 32625.000) = 1 
    [32625.000, 32750.000) = 0 
    [32750.000, 32875.000) = 0 
    [32875.000, 33000.000) = 0 
    [33000.000, 33125.000) = 0 
    [33125.000, 33250.000) = 1 
    [33250.000, 33375.000) = 0 
    [33375.000, 33500.000) = 0 
    [33500.000, 33625.000) = 2 
    [33625.000, 33750.000) = 1 
    [33750.000, 33875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  32547.799 ms/op
     p(50.0000) =  33520.878 ms/op
     p(90.0000) =  33688.650 ms/op
     p(95.0000) =  33688.650 ms/op
     p(99.0000) =  33688.650 ms/op
     p(99.9000) =  33688.650 ms/op
     p(99.9900) =  33688.650 ms/op
     p(99.9990) =  33688.650 ms/op
     p(99.9999) =  33688.650 ms/op
    p(100.0000) =  33688.650 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 78.13% complete, ETA 00:59:57
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
331.773 ±(99.9%) 13.173 ms/op
# Warmup Iteration   2: 321.077 ±(99.9%) 8.222 ms/op
# Warmup Iteration   3: 308.170 ±(99.9%) 0.660 ms/op
# Warmup Iteration   4: 308.107 ±(99.9%) 0.546 ms/op
# Warmup Iteration   5: 307.471 ±(99.9%) 0.677 ms/op
Iteration   1: 307.360 ±(99.9%) 0.810 ms/op
                 executeQuery·p0.00:   305.660 ms/op
                 executeQuery·p0.50:   307.233 ms/op
                 executeQuery·p0.90:   308.806 ms/op
                 executeQuery·p0.95:   310.536 ms/op
                 executeQuery·p0.99:   310.903 ms/op
                 executeQuery·p0.999:  310.903 ms/op
                 executeQuery·p0.9999: 310.903 ms/op
                 executeQuery·p1.00:   310.903 ms/op

Iteration   2: 307.821 ±(99.9%) 0.710 ms/op
                 executeQuery·p0.00:   306.708 ms/op
                 executeQuery·p0.50:   307.757 ms/op
                 executeQuery·p0.90:   309.435 ms/op
                 executeQuery·p0.95:   310.850 ms/op
                 executeQuery·p0.99:   311.951 ms/op
                 executeQuery·p0.999:  311.951 ms/op
                 executeQuery·p0.9999: 311.951 ms/op
                 executeQuery·p1.00:   311.951 ms/op

Iteration   3: 307.376 ±(99.9%) 0.828 ms/op
                 executeQuery·p0.00:   305.660 ms/op
                 executeQuery·p0.50:   307.233 ms/op
                 executeQuery·p0.90:   308.806 ms/op
                 executeQuery·p0.95:   310.064 ms/op
                 executeQuery·p0.99:   313.000 ms/op
                 executeQuery·p0.999:  313.000 ms/op
                 executeQuery·p0.9999: 313.000 ms/op
                 executeQuery·p1.00:   313.000 ms/op

Iteration   4: 307.535 ±(99.9%) 1.133 ms/op
                 executeQuery·p0.00:   305.136 ms/op
                 executeQuery·p0.50:   306.708 ms/op
                 executeQuery·p0.90:   309.854 ms/op
                 executeQuery·p0.95:   311.060 ms/op
                 executeQuery·p0.99:   311.427 ms/op
                 executeQuery·p0.999:  311.427 ms/op
                 executeQuery·p0.9999: 311.427 ms/op
                 executeQuery·p1.00:   311.427 ms/op

Iteration   5: 308.901 ±(99.9%) 1.047 ms/op
                 executeQuery·p0.00:   305.660 ms/op
                 executeQuery·p0.50:   308.806 ms/op
                 executeQuery·p0.90:   311.008 ms/op
                 executeQuery·p0.95:   312.738 ms/op
                 executeQuery·p0.99:   314.573 ms/op
                 executeQuery·p0.999:  314.573 ms/op
                 executeQuery·p0.9999: 314.573 ms/op
                 executeQuery·p1.00:   314.573 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 165
  mean =    307.798 ±(99.9%) 0.405 ms/op

  Histogram, ms/op:
    [305.000, 306.000) = 12 
    [306.000, 307.000) = 40 
    [307.000, 308.000) = 52 
    [308.000, 309.000) = 35 
    [309.000, 310.000) = 14 
    [310.000, 311.000) = 6 
    [311.000, 312.000) = 4 
    [312.000, 313.000) = 1 
    [313.000, 314.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    305.136 ms/op
     p(50.0000) =    307.757 ms/op
     p(90.0000) =    309.854 ms/op
     p(95.0000) =    310.745 ms/op
     p(99.0000) =    313.535 ms/op
     p(99.9000) =    314.573 ms/op
     p(99.9900) =    314.573 ms/op
     p(99.9990) =    314.573 ms/op
     p(99.9999) =    314.573 ms/op
    p(100.0000) =    314.573 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 79.17% complete, ETA 00:56:47
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3261.071 ±(99.9%) 826.399 ms/op
# Warmup Iteration   2: 3189.768 ±(99.9%) 498.047 ms/op
# Warmup Iteration   3: 3134.194 ±(99.9%) 364.557 ms/op
# Warmup Iteration   4: 3088.056 ±(99.9%) 111.477 ms/op
# Warmup Iteration   5: 3040.870 ±(99.9%) 44.260 ms/op
Iteration   1: 3060.793 ±(99.9%) 77.849 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3061.842 ms/op
                 executeQuery·p0.90:   3074.425 ms/op
                 executeQuery·p0.95:   3074.425 ms/op
                 executeQuery·p0.99:   3074.425 ms/op
                 executeQuery·p0.999:  3074.425 ms/op
                 executeQuery·p0.9999: 3074.425 ms/op
                 executeQuery·p1.00:   3074.425 ms/op

Iteration   2: 3052.405 ±(99.9%) 83.904 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3049.259 ms/op
                 executeQuery·p0.90:   3070.231 ms/op
                 executeQuery·p0.95:   3070.231 ms/op
                 executeQuery·p0.99:   3070.231 ms/op
                 executeQuery·p0.999:  3070.231 ms/op
                 executeQuery·p0.9999: 3070.231 ms/op
                 executeQuery·p1.00:   3070.231 ms/op

Iteration   3: 3050.308 ±(99.9%) 60.098 ms/op
                 executeQuery·p0.00:   3040.870 ms/op
                 executeQuery·p0.50:   3049.259 ms/op
                 executeQuery·p0.90:   3061.842 ms/op
                 executeQuery·p0.95:   3061.842 ms/op
                 executeQuery·p0.99:   3061.842 ms/op
                 executeQuery·p0.999:  3061.842 ms/op
                 executeQuery·p0.9999: 3061.842 ms/op
                 executeQuery·p1.00:   3061.842 ms/op

Iteration   4: 3047.162 ±(99.9%) 64.519 ms/op
                 executeQuery·p0.00:   3032.482 ms/op
                 executeQuery·p0.50:   3051.356 ms/op
                 executeQuery·p0.90:   3053.453 ms/op
                 executeQuery·p0.95:   3053.453 ms/op
                 executeQuery·p0.99:   3053.453 ms/op
                 executeQuery·p0.999:  3053.453 ms/op
                 executeQuery·p0.9999: 3053.453 ms/op
                 executeQuery·p1.00:   3053.453 ms/op

Iteration   5: 3084.911 ±(99.9%) 104.972 ms/op
                 executeQuery·p0.00:   3061.842 ms/op
                 executeQuery·p0.50:   3089.105 ms/op
                 executeQuery·p0.90:   3099.591 ms/op
                 executeQuery·p0.95:   3099.591 ms/op
                 executeQuery·p0.99:   3099.591 ms/op
                 executeQuery·p0.999:  3099.591 ms/op
                 executeQuery·p0.9999: 3099.591 ms/op
                 executeQuery·p1.00:   3099.591 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 20
  mean =   3059.116 ±(99.9%) 15.465 ms/op

  Histogram, ms/op:
    [3030.000, 3035.000) = 1 
    [3035.000, 3040.000) = 0 
    [3040.000, 3045.000) = 2 
    [3045.000, 3050.000) = 4 
    [3050.000, 3055.000) = 4 
    [3055.000, 3060.000) = 0 
    [3060.000, 3065.000) = 4 
    [3065.000, 3070.000) = 0 
    [3070.000, 3075.000) = 2 
    [3075.000, 3080.000) = 0 
    [3080.000, 3085.000) = 0 
    [3085.000, 3090.000) = 1 
    [3090.000, 3095.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3032.482 ms/op
     p(50.0000) =   3053.453 ms/op
     p(90.0000) =   3090.783 ms/op
     p(95.0000) =   3099.171 ms/op
     p(99.0000) =   3099.591 ms/op
     p(99.9000) =   3099.591 ms/op
     p(99.9900) =   3099.591 ms/op
     p(99.9990) =   3099.591 ms/op
     p(99.9999) =   3099.591 ms/op
    p(100.0000) =   3099.591 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 80.21% complete, ETA 00:53:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
30266.098 ms/op
# Warmup Iteration   2: 30870.077 ms/op
# Warmup Iteration   3: 30769.414 ms/op
# Warmup Iteration   4: 31037.850 ms/op
# Warmup Iteration   5: 31104.958 ms/op
Iteration   1: 31104.958 ms/op
                 executeQuery·p0.00:   31104.958 ms/op
                 executeQuery·p0.50:   31104.958 ms/op
                 executeQuery·p0.90:   31104.958 ms/op
                 executeQuery·p0.95:   31104.958 ms/op
                 executeQuery·p0.99:   31104.958 ms/op
                 executeQuery·p0.999:  31104.958 ms/op
                 executeQuery·p0.9999: 31104.958 ms/op
                 executeQuery·p1.00:   31104.958 ms/op

Iteration   2: 31037.850 ms/op
                 executeQuery·p0.00:   31037.850 ms/op
                 executeQuery·p0.50:   31037.850 ms/op
                 executeQuery·p0.90:   31037.850 ms/op
                 executeQuery·p0.95:   31037.850 ms/op
                 executeQuery·p0.99:   31037.850 ms/op
                 executeQuery·p0.999:  31037.850 ms/op
                 executeQuery·p0.9999: 31037.850 ms/op
                 executeQuery·p1.00:   31037.850 ms/op

Iteration   3: 31071.404 ms/op
                 executeQuery·p0.00:   31071.404 ms/op
                 executeQuery·p0.50:   31071.404 ms/op
                 executeQuery·p0.90:   31071.404 ms/op
                 executeQuery·p0.95:   31071.404 ms/op
                 executeQuery·p0.99:   31071.404 ms/op
                 executeQuery·p0.999:  31071.404 ms/op
                 executeQuery·p0.9999: 31071.404 ms/op
                 executeQuery·p1.00:   31071.404 ms/op

Iteration   4: 31172.067 ms/op
                 executeQuery·p0.00:   31172.067 ms/op
                 executeQuery·p0.50:   31172.067 ms/op
                 executeQuery·p0.90:   31172.067 ms/op
                 executeQuery·p0.95:   31172.067 ms/op
                 executeQuery·p0.99:   31172.067 ms/op
                 executeQuery·p0.999:  31172.067 ms/op
                 executeQuery·p0.9999: 31172.067 ms/op
                 executeQuery·p1.00:   31172.067 ms/op

Iteration   5: 31104.958 ms/op
                 executeQuery·p0.00:   31104.958 ms/op
                 executeQuery·p0.50:   31104.958 ms/op
                 executeQuery·p0.90:   31104.958 ms/op
                 executeQuery·p0.95:   31104.958 ms/op
                 executeQuery·p0.99:   31104.958 ms/op
                 executeQuery·p0.999:  31104.958 ms/op
                 executeQuery·p0.9999: 31104.958 ms/op
                 executeQuery·p1.00:   31104.958 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  31098.248 ±(99.9%) 191.644 ms/op

  Histogram, ms/op:
    [31000.000, 31012.500) = 0 
    [31012.500, 31025.000) = 0 
    [31025.000, 31037.500) = 0 
    [31037.500, 31050.000) = 1 
    [31050.000, 31062.500) = 0 
    [31062.500, 31075.000) = 1 
    [31075.000, 31087.500) = 0 
    [31087.500, 31100.000) = 0 
    [31100.000, 31112.500) = 2 
    [31112.500, 31125.000) = 0 
    [31125.000, 31137.500) = 0 
    [31137.500, 31150.000) = 0 
    [31150.000, 31162.500) = 0 
    [31162.500, 31175.000) = 1 
    [31175.000, 31187.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =  31037.850 ms/op
     p(50.0000) =  31104.958 ms/op
     p(90.0000) =  31172.067 ms/op
     p(95.0000) =  31172.067 ms/op
     p(99.0000) =  31172.067 ms/op
     p(99.9000) =  31172.067 ms/op
     p(99.9900) =  31172.067 ms/op
     p(99.9990) =  31172.067 ms/op
     p(99.9999) =  31172.067 ms/op
    p(100.0000) =  31172.067 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 81.25% complete, ETA 00:51:28
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
98.795 ±(99.9%) 10.791 ms/op
# Warmup Iteration   2: 89.773 ±(99.9%) 0.683 ms/op
# Warmup Iteration   3: 88.303 ±(99.9%) 0.799 ms/op
# Warmup Iteration   4: 89.718 ±(99.9%) 0.514 ms/op
# Warmup Iteration   5: 90.124 ±(99.9%) 0.450 ms/op
Iteration   1: 90.106 ±(99.9%) 0.742 ms/op
                 executeQuery·p0.00:   85.590 ms/op
                 executeQuery·p0.50:   90.178 ms/op
                 executeQuery·p0.90:   92.720 ms/op
                 executeQuery·p0.95:   93.166 ms/op
                 executeQuery·p0.99:   101.324 ms/op
                 executeQuery·p0.999:  101.843 ms/op
                 executeQuery·p0.9999: 101.843 ms/op
                 executeQuery·p1.00:   101.843 ms/op

Iteration   2: 86.749 ±(99.9%) 0.359 ms/op
                 executeQuery·p0.00:   85.328 ms/op
                 executeQuery·p0.50:   86.508 ms/op
                 executeQuery·p0.90:   87.818 ms/op
                 executeQuery·p0.95:   88.605 ms/op
                 executeQuery·p0.99:   93.009 ms/op
                 executeQuery·p0.999:  93.323 ms/op
                 executeQuery·p0.9999: 93.323 ms/op
                 executeQuery·p1.00:   93.323 ms/op

Iteration   3: 89.358 ±(99.9%) 0.718 ms/op
                 executeQuery·p0.00:   84.673 ms/op
                 executeQuery·p0.50:   89.981 ms/op
                 executeQuery·p0.90:   91.619 ms/op
                 executeQuery·p0.95:   91.927 ms/op
                 executeQuery·p0.99:   93.728 ms/op
                 executeQuery·p0.999:  93.848 ms/op
                 executeQuery·p0.9999: 93.848 ms/op
                 executeQuery·p1.00:   93.848 ms/op

Iteration   4: 88.138 ±(99.9%) 0.796 ms/op
                 executeQuery·p0.00:   85.328 ms/op
                 executeQuery·p0.50:   86.770 ms/op
                 executeQuery·p0.90:   91.043 ms/op
                 executeQuery·p0.95:   91.750 ms/op
                 executeQuery·p0.99:   98.619 ms/op
                 executeQuery·p0.999:  99.353 ms/op
                 executeQuery·p0.9999: 99.353 ms/op
                 executeQuery·p1.00:   99.353 ms/op

Iteration   5: 89.845 ±(99.9%) 0.419 ms/op
                 executeQuery·p0.00:   84.804 ms/op
                 executeQuery·p0.50:   90.046 ms/op
                 executeQuery·p0.90:   91.095 ms/op
                 executeQuery·p0.95:   91.593 ms/op
                 executeQuery·p0.99:   92.621 ms/op
                 executeQuery·p0.999:  92.668 ms/op
                 executeQuery·p0.9999: 92.668 ms/op
                 executeQuery·p1.00:   92.668 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 562
  mean =     88.823 ±(99.9%) 0.326 ms/op

  Histogram, ms/op:
    [ 80.000,  82.500) = 0 
    [ 82.500,  85.000) = 2 
    [ 85.000,  87.500) = 206 
    [ 87.500,  90.000) = 140 
    [ 90.000,  92.500) = 196 
    [ 92.500,  95.000) = 15 
    [ 95.000,  97.500) = 0 
    [ 97.500, 100.000) = 2 
    [100.000, 102.500) = 1 
    [102.500, 105.000) = 0 
    [105.000, 107.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     84.673 ms/op
     p(50.0000) =     89.260 ms/op
     p(90.0000) =     91.488 ms/op
     p(95.0000) =     92.013 ms/op
     p(99.0000) =     93.600 ms/op
     p(99.9000) =    101.843 ms/op
     p(99.9900) =    101.843 ms/op
     p(99.9990) =    101.843 ms/op
     p(99.9999) =    101.843 ms/op
    p(100.0000) =    101.843 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 82.29% complete, ETA 00:48:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1895.476 ±(99.9%) 1358.043 ms/op
# Warmup Iteration   2: 1435.051 ±(99.9%) 482.147 ms/op
# Warmup Iteration   3: 1389.363 ±(99.9%) 62.376 ms/op
# Warmup Iteration   4: 1360.265 ±(99.9%) 50.987 ms/op
# Warmup Iteration   5: 1403.257 ±(99.9%) 63.379 ms/op
Iteration   1: 1367.081 ±(99.9%) 58.399 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1364.197 ms/op
                 executeQuery·p0.90:   1428.161 ms/op
                 executeQuery·p0.95:   1428.161 ms/op
                 executeQuery·p0.99:   1428.161 ms/op
                 executeQuery·p0.999:  1428.161 ms/op
                 executeQuery·p0.9999: 1428.161 ms/op
                 executeQuery·p1.00:   1428.161 ms/op

Iteration   2: 1378.353 ±(99.9%) 67.360 ms/op
                 executeQuery·p0.00:   1329.594 ms/op
                 executeQuery·p0.50:   1385.169 ms/op
                 executeQuery·p0.90:   1415.578 ms/op
                 executeQuery·p0.95:   1415.578 ms/op
                 executeQuery·p0.99:   1415.578 ms/op
                 executeQuery·p0.999:  1415.578 ms/op
                 executeQuery·p0.9999: 1415.578 ms/op
                 executeQuery·p1.00:   1415.578 ms/op

Iteration   3: 1362.362 ±(99.9%) 57.866 ms/op
                 executeQuery·p0.00:   1325.400 ms/op
                 executeQuery·p0.50:   1355.809 ms/op
                 executeQuery·p0.90:   1415.578 ms/op
                 executeQuery·p0.95:   1415.578 ms/op
                 executeQuery·p0.99:   1415.578 ms/op
                 executeQuery·p0.999:  1415.578 ms/op
                 executeQuery·p0.9999: 1415.578 ms/op
                 executeQuery·p1.00:   1415.578 ms/op

Iteration   4: 1361.838 ±(99.9%) 67.025 ms/op
                 executeQuery·p0.00:   1319.109 ms/op
                 executeQuery·p0.50:   1357.906 ms/op
                 executeQuery·p0.90:   1417.675 ms/op
                 executeQuery·p0.95:   1417.675 ms/op
                 executeQuery·p0.99:   1417.675 ms/op
                 executeQuery·p0.999:  1417.675 ms/op
                 executeQuery·p0.9999: 1417.675 ms/op
                 executeQuery·p1.00:   1417.675 ms/op

Iteration   5: 1389.101 ±(99.9%) 62.484 ms/op
                 executeQuery·p0.00:   1342.177 ms/op
                 executeQuery·p0.50:   1383.072 ms/op
                 executeQuery·p0.90:   1444.938 ms/op
                 executeQuery·p0.95:   1444.938 ms/op
                 executeQuery·p0.99:   1444.938 ms/op
                 executeQuery·p0.999:  1444.938 ms/op
                 executeQuery·p0.9999: 1444.938 ms/op
                 executeQuery·p1.00:   1444.938 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 40
  mean =   1371.747 ±(99.9%) 18.491 ms/op

  Histogram, ms/op:
    [1300.000, 1312.500) = 0 
    [1312.500, 1325.000) = 1 
    [1325.000, 1337.500) = 6 
    [1337.500, 1350.000) = 7 
    [1350.000, 1362.500) = 2 
    [1362.500, 1375.000) = 7 
    [1375.000, 1387.500) = 4 
    [1387.500, 1400.000) = 4 
    [1400.000, 1412.500) = 3 
    [1412.500, 1425.000) = 4 
    [1425.000, 1437.500) = 1 
    [1437.500, 1450.000) = 1 
    [1450.000, 1462.500) = 0 
    [1462.500, 1475.000) = 0 
    [1475.000, 1487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1319.109 ms/op
     p(50.0000) =   1366.295 ms/op
     p(90.0000) =   1417.465 ms/op
     p(95.0000) =   1427.846 ms/op
     p(99.0000) =   1444.938 ms/op
     p(99.9000) =   1444.938 ms/op
     p(99.9900) =   1444.938 ms/op
     p(99.9990) =   1444.938 ms/op
     p(99.9999) =   1444.938 ms/op
    p(100.0000) =   1444.938 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 83.33% complete, ETA 00:45:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
30266.098 ms/op
# Warmup Iteration   2: 26709.328 ms/op
# Warmup Iteration   3: 25400.705 ms/op
# Warmup Iteration   4: 20401.095 ms/op
# Warmup Iteration   5: 19159.581 ms/op
Iteration   1: 26709.328 ms/op
                 executeQuery·p0.00:   26709.328 ms/op
                 executeQuery·p0.50:   26709.328 ms/op
                 executeQuery·p0.90:   26709.328 ms/op
                 executeQuery·p0.95:   26709.328 ms/op
                 executeQuery·p0.99:   26709.328 ms/op
                 executeQuery·p0.999:  26709.328 ms/op
                 executeQuery·p0.9999: 26709.328 ms/op
                 executeQuery·p1.00:   26709.328 ms/op

Iteration   2: 18991.809 ms/op
                 executeQuery·p0.00:   18991.809 ms/op
                 executeQuery·p0.50:   18991.809 ms/op
                 executeQuery·p0.90:   18991.809 ms/op
                 executeQuery·p0.95:   18991.809 ms/op
                 executeQuery·p0.99:   18991.809 ms/op
                 executeQuery·p0.999:  18991.809 ms/op
                 executeQuery·p0.9999: 18991.809 ms/op
                 executeQuery·p1.00:   18991.809 ms/op

Iteration   3: 19058.917 ms/op
                 executeQuery·p0.00:   19058.917 ms/op
                 executeQuery·p0.50:   19058.917 ms/op
                 executeQuery·p0.90:   19058.917 ms/op
                 executeQuery·p0.95:   19058.917 ms/op
                 executeQuery·p0.99:   19058.917 ms/op
                 executeQuery·p0.999:  19058.917 ms/op
                 executeQuery·p0.9999: 19058.917 ms/op
                 executeQuery·p1.00:   19058.917 ms/op

Iteration   4: 18656.264 ms/op
                 executeQuery·p0.00:   18656.264 ms/op
                 executeQuery·p0.50:   18656.264 ms/op
                 executeQuery·p0.90:   18656.264 ms/op
                 executeQuery·p0.95:   18656.264 ms/op
                 executeQuery·p0.99:   18656.264 ms/op
                 executeQuery·p0.999:  18656.264 ms/op
                 executeQuery·p0.9999: 18656.264 ms/op
                 executeQuery·p1.00:   18656.264 ms/op

Iteration   5: 18589.155 ms/op
                 executeQuery·p0.00:   18589.155 ms/op
                 executeQuery·p0.50:   18589.155 ms/op
                 executeQuery·p0.90:   18589.155 ms/op
                 executeQuery·p0.95:   18589.155 ms/op
                 executeQuery·p0.99:   18589.155 ms/op
                 executeQuery·p0.999:  18589.155 ms/op
                 executeQuery·p0.9999: 18589.155 ms/op
                 executeQuery·p1.00:   18589.155 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  20401.095 ±(99.9%) 13601.673 ms/op

  Histogram, ms/op:
    [18000.000, 18500.000) = 0 
    [18500.000, 19000.000) = 3 
    [19000.000, 19500.000) = 1 
    [19500.000, 20000.000) = 0 
    [20000.000, 20500.000) = 0 
    [20500.000, 21000.000) = 0 
    [21000.000, 21500.000) = 0 
    [21500.000, 22000.000) = 0 
    [22000.000, 22500.000) = 0 
    [22500.000, 23000.000) = 0 
    [23000.000, 23500.000) = 0 
    [23500.000, 24000.000) = 0 
    [24000.000, 24500.000) = 0 
    [24500.000, 25000.000) = 0 
    [25000.000, 25500.000) = 0 
    [25500.000, 26000.000) = 0 
    [26000.000, 26500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  18589.155 ms/op
     p(50.0000) =  18991.809 ms/op
     p(90.0000) =  26709.328 ms/op
     p(95.0000) =  26709.328 ms/op
     p(99.0000) =  26709.328 ms/op
     p(99.9000) =  26709.328 ms/op
     p(99.9900) =  26709.328 ms/op
     p(99.9990) =  26709.328 ms/op
     p(99.9999) =  26709.328 ms/op
    p(100.0000) =  26709.328 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 84.38% complete, ETA 00:42:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
110.779 ±(99.9%) 14.952 ms/op
# Warmup Iteration   2: 96.443 ±(99.9%) 0.496 ms/op
# Warmup Iteration   3: 98.937 ±(99.9%) 0.453 ms/op
# Warmup Iteration   4: 89.280 ±(99.9%) 1.920 ms/op
# Warmup Iteration   5: 84.182 ±(99.9%) 0.709 ms/op
Iteration   1: 83.947 ±(99.9%) 0.621 ms/op
                 executeQuery·p0.00:   79.954 ms/op
                 executeQuery·p0.50:   84.148 ms/op
                 executeQuery·p0.90:   85.616 ms/op
                 executeQuery·p0.95:   85.996 ms/op
                 executeQuery·p0.99:   95.051 ms/op
                 executeQuery·p0.999:  96.207 ms/op
                 executeQuery·p0.9999: 96.207 ms/op
                 executeQuery·p1.00:   96.207 ms/op

Iteration   2: 83.588 ±(99.9%) 0.619 ms/op
                 executeQuery·p0.00:   79.692 ms/op
                 executeQuery·p0.50:   83.755 ms/op
                 executeQuery·p0.90:   85.459 ms/op
                 executeQuery·p0.95:   86.127 ms/op
                 executeQuery·p0.99:   91.951 ms/op
                 executeQuery·p0.999:  92.275 ms/op
                 executeQuery·p0.9999: 92.275 ms/op
                 executeQuery·p1.00:   92.275 ms/op

Iteration   3: 83.975 ±(99.9%) 0.458 ms/op
                 executeQuery·p0.00:   80.085 ms/op
                 executeQuery·p0.50:   84.345 ms/op
                 executeQuery·p0.90:   85.459 ms/op
                 executeQuery·p0.95:   85.728 ms/op
                 executeQuery·p0.99:   87.432 ms/op
                 executeQuery·p0.999:  87.556 ms/op
                 executeQuery·p0.9999: 87.556 ms/op
                 executeQuery·p1.00:   87.556 ms/op

Iteration   4: 83.886 ±(99.9%) 0.468 ms/op
                 executeQuery·p0.00:   79.823 ms/op
                 executeQuery·p0.50:   84.148 ms/op
                 executeQuery·p0.90:   85.459 ms/op
                 executeQuery·p0.95:   85.865 ms/op
                 executeQuery·p0.99:   88.311 ms/op
                 executeQuery·p0.999:  88.736 ms/op
                 executeQuery·p0.9999: 88.736 ms/op
                 executeQuery·p1.00:   88.736 ms/op

Iteration   5: 84.351 ±(99.9%) 0.499 ms/op
                 executeQuery·p0.00:   80.085 ms/op
                 executeQuery·p0.50:   84.804 ms/op
                 executeQuery·p0.90:   85.983 ms/op
                 executeQuery·p0.95:   86.114 ms/op
                 executeQuery·p0.99:   88.883 ms/op
                 executeQuery·p0.999:  89.260 ms/op
                 executeQuery·p0.9999: 89.260 ms/op
                 executeQuery·p1.00:   89.260 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 585
  mean =     83.947 ±(99.9%) 0.237 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 0 
    [ 75.000,  77.500) = 0 
    [ 77.500,  80.000) = 3 
    [ 80.000,  82.500) = 108 
    [ 82.500,  85.000) = 337 
    [ 85.000,  87.500) = 129 
    [ 87.500,  90.000) = 5 
    [ 90.000,  92.500) = 2 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     79.692 ms/op
     p(50.0000) =     84.279 ms/op
     p(90.0000) =     85.590 ms/op
     p(95.0000) =     85.983 ms/op
     p(99.0000) =     88.809 ms/op
     p(99.9000) =     96.207 ms/op
     p(99.9900) =     96.207 ms/op
     p(99.9990) =     96.207 ms/op
     p(99.9999) =     96.207 ms/op
    p(100.0000) =     96.207 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 85.42% complete, ETA 00:39:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1500.063 ±(99.9%) 573.064 ms/op
# Warmup Iteration   2: 1344.274 ±(99.9%) 35.021 ms/op
# Warmup Iteration   3: 1350.566 ±(99.9%) 66.268 ms/op
# Warmup Iteration   4: 1337.459 ±(99.9%) 28.006 ms/op
# Warmup Iteration   5: 1352.139 ±(99.9%) 34.141 ms/op
Iteration   1: 1356.857 ±(99.9%) 82.759 ms/op
                 executeQuery·p0.00:   1327.497 ms/op
                 executeQuery·p0.50:   1336.934 ms/op
                 executeQuery·p0.90:   1428.161 ms/op
                 executeQuery·p0.95:   1428.161 ms/op
                 executeQuery·p0.99:   1428.161 ms/op
                 executeQuery·p0.999:  1428.161 ms/op
                 executeQuery·p0.9999: 1428.161 ms/op
                 executeQuery·p1.00:   1428.161 ms/op

Iteration   2: 1342.964 ±(99.9%) 55.928 ms/op
                 executeQuery·p0.00:   1325.400 ms/op
                 executeQuery·p0.50:   1329.594 ms/op
                 executeQuery·p0.90:   1411.383 ms/op
                 executeQuery·p0.95:   1411.383 ms/op
                 executeQuery·p0.99:   1411.383 ms/op
                 executeQuery·p0.999:  1411.383 ms/op
                 executeQuery·p0.9999: 1411.383 ms/op
                 executeQuery·p1.00:   1411.383 ms/op

Iteration   3: 1342.439 ±(99.9%) 23.028 ms/op
                 executeQuery·p0.00:   1325.400 ms/op
                 executeQuery·p0.50:   1340.080 ms/op
                 executeQuery·p0.90:   1358.954 ms/op
                 executeQuery·p0.95:   1358.954 ms/op
                 executeQuery·p0.99:   1358.954 ms/op
                 executeQuery·p0.999:  1358.954 ms/op
                 executeQuery·p0.9999: 1358.954 ms/op
                 executeQuery·p1.00:   1358.954 ms/op

Iteration   4: 1334.313 ±(99.9%) 10.876 ms/op
                 executeQuery·p0.00:   1323.303 ms/op
                 executeQuery·p0.50:   1336.934 ms/op
                 executeQuery·p0.90:   1340.080 ms/op
                 executeQuery·p0.95:   1340.080 ms/op
                 executeQuery·p0.99:   1340.080 ms/op
                 executeQuery·p0.999:  1340.080 ms/op
                 executeQuery·p0.9999: 1340.080 ms/op
                 executeQuery·p1.00:   1340.080 ms/op

Iteration   5: 1349.255 ±(99.9%) 24.431 ms/op
                 executeQuery·p0.00:   1333.789 ms/op
                 executeQuery·p0.50:   1345.323 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 40
  mean =   1345.166 ±(99.9%) 13.885 ms/op

  Histogram, ms/op:
    [1300.000, 1312.500) = 0 
    [1312.500, 1325.000) = 1 
    [1325.000, 1337.500) = 16 
    [1337.500, 1350.000) = 13 
    [1350.000, 1362.500) = 6 
    [1362.500, 1375.000) = 0 
    [1375.000, 1387.500) = 1 
    [1387.500, 1400.000) = 0 
    [1400.000, 1412.500) = 1 
    [1412.500, 1425.000) = 1 
    [1425.000, 1437.500) = 1 
    [1437.500, 1450.000) = 0 
    [1450.000, 1462.500) = 0 
    [1462.500, 1475.000) = 0 
    [1475.000, 1487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1323.303 ms/op
     p(50.0000) =   1337.983 ms/op
     p(90.0000) =   1374.054 ms/op
     p(95.0000) =   1423.337 ms/op
     p(99.0000) =   1428.161 ms/op
     p(99.9000) =   1428.161 ms/op
     p(99.9900) =   1428.161 ms/op
     p(99.9990) =   1428.161 ms/op
     p(99.9999) =   1428.161 ms/op
    p(100.0000) =   1428.161 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 86.46% complete, ETA 00:36:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
24394.072 ms/op
# Warmup Iteration   2: 19058.917 ms/op
# Warmup Iteration   3: 16609.444 ms/op
# Warmup Iteration   4: 17649.631 ms/op
# Warmup Iteration   5: 17985.176 ms/op
Iteration   1: 18454.938 ms/op
                 executeQuery·p0.00:   18454.938 ms/op
                 executeQuery·p0.50:   18454.938 ms/op
                 executeQuery·p0.90:   18454.938 ms/op
                 executeQuery·p0.95:   18454.938 ms/op
                 executeQuery·p0.99:   18454.938 ms/op
                 executeQuery·p0.999:  18454.938 ms/op
                 executeQuery·p0.9999: 18454.938 ms/op
                 executeQuery·p1.00:   18454.938 ms/op

Iteration   2: 17884.512 ms/op
                 executeQuery·p0.00:   17884.512 ms/op
                 executeQuery·p0.50:   17884.512 ms/op
                 executeQuery·p0.90:   17884.512 ms/op
                 executeQuery·p0.95:   17884.512 ms/op
                 executeQuery·p0.99:   17884.512 ms/op
                 executeQuery·p0.999:  17884.512 ms/op
                 executeQuery·p0.9999: 17884.512 ms/op
                 executeQuery·p1.00:   17884.512 ms/op

Iteration   3: 17951.621 ms/op
                 executeQuery·p0.00:   17951.621 ms/op
                 executeQuery·p0.50:   17951.621 ms/op
                 executeQuery·p0.90:   17951.621 ms/op
                 executeQuery·p0.95:   17951.621 ms/op
                 executeQuery·p0.99:   17951.621 ms/op
                 executeQuery·p0.999:  17951.621 ms/op
                 executeQuery·p0.9999: 17951.621 ms/op
                 executeQuery·p1.00:   17951.621 ms/op

Iteration   4: 18018.730 ms/op
                 executeQuery·p0.00:   18018.730 ms/op
                 executeQuery·p0.50:   18018.730 ms/op
                 executeQuery·p0.90:   18018.730 ms/op
                 executeQuery·p0.95:   18018.730 ms/op
                 executeQuery·p0.99:   18018.730 ms/op
                 executeQuery·p0.999:  18018.730 ms/op
                 executeQuery·p0.9999: 18018.730 ms/op
                 executeQuery·p1.00:   18018.730 ms/op

Iteration   5: 18018.730 ms/op
                 executeQuery·p0.00:   18018.730 ms/op
                 executeQuery·p0.50:   18018.730 ms/op
                 executeQuery·p0.90:   18018.730 ms/op
                 executeQuery·p0.95:   18018.730 ms/op
                 executeQuery·p0.99:   18018.730 ms/op
                 executeQuery·p0.999:  18018.730 ms/op
                 executeQuery·p0.9999: 18018.730 ms/op
                 executeQuery·p1.00:   18018.730 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  18065.706 ±(99.9%) 864.813 ms/op

  Histogram, ms/op:
    [17800.000, 17850.000) = 0 
    [17850.000, 17900.000) = 1 
    [17900.000, 17950.000) = 0 
    [17950.000, 18000.000) = 1 
    [18000.000, 18050.000) = 2 
    [18050.000, 18100.000) = 0 
    [18100.000, 18150.000) = 0 
    [18150.000, 18200.000) = 0 
    [18200.000, 18250.000) = 0 
    [18250.000, 18300.000) = 0 
    [18300.000, 18350.000) = 0 
    [18350.000, 18400.000) = 0 
    [18400.000, 18450.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  17884.512 ms/op
     p(50.0000) =  18018.730 ms/op
     p(90.0000) =  18454.938 ms/op
     p(95.0000) =  18454.938 ms/op
     p(99.0000) =  18454.938 ms/op
     p(99.9000) =  18454.938 ms/op
     p(99.9900) =  18454.938 ms/op
     p(99.9990) =  18454.938 ms/op
     p(99.9999) =  18454.938 ms/op
    p(100.0000) =  18454.938 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 87.50% complete, ETA 00:33:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
109.262 ±(99.9%) 12.081 ms/op
# Warmup Iteration   2: 99.657 ±(99.9%) 0.498 ms/op
# Warmup Iteration   3: 100.142 ±(99.9%) 0.346 ms/op
# Warmup Iteration   4: 100.358 ±(99.9%) 0.388 ms/op
# Warmup Iteration   5: 100.853 ±(99.9%) 0.438 ms/op
Iteration   1: 98.832 ±(99.9%) 0.355 ms/op
                 executeQuery·p0.00:   97.518 ms/op
                 executeQuery·p0.50:   98.697 ms/op
                 executeQuery·p0.90:   99.733 ms/op
                 executeQuery·p0.95:   101.712 ms/op
                 executeQuery·p0.99:   103.277 ms/op
                 executeQuery·p0.999:  103.285 ms/op
                 executeQuery·p0.9999: 103.285 ms/op
                 executeQuery·p1.00:   103.285 ms/op

Iteration   2: 98.865 ±(99.9%) 0.416 ms/op
                 executeQuery·p0.00:   97.124 ms/op
                 executeQuery·p0.50:   98.566 ms/op
                 executeQuery·p0.90:   100.375 ms/op
                 executeQuery·p0.95:   100.919 ms/op
                 executeQuery·p0.99:   107.288 ms/op
                 executeQuery·p0.999:  107.348 ms/op
                 executeQuery·p0.9999: 107.348 ms/op
                 executeQuery·p1.00:   107.348 ms/op

Iteration   3: 100.384 ±(99.9%) 1.196 ms/op
                 executeQuery·p0.00:   97.518 ms/op
                 executeQuery·p0.50:   99.746 ms/op
                 executeQuery·p0.90:   101.188 ms/op
                 executeQuery·p0.95:   101.450 ms/op
                 executeQuery·p0.99:   132.776 ms/op
                 executeQuery·p0.999:  132.776 ms/op
                 executeQuery·p0.9999: 132.776 ms/op
                 executeQuery·p1.00:   132.776 ms/op

Iteration   4: 100.655 ±(99.9%) 0.647 ms/op
                 executeQuery·p0.00:   98.304 ms/op
                 executeQuery·p0.50:   100.008 ms/op
                 executeQuery·p0.90:   102.236 ms/op
                 executeQuery·p0.95:   105.179 ms/op
                 executeQuery·p0.99:   109.183 ms/op
                 executeQuery·p0.999:  109.183 ms/op
                 executeQuery·p0.9999: 109.183 ms/op
                 executeQuery·p1.00:   109.183 ms/op

Iteration   5: 99.125 ±(99.9%) 0.591 ms/op
                 executeQuery·p0.00:   97.649 ms/op
                 executeQuery·p0.50:   98.435 ms/op
                 executeQuery·p0.90:   101.568 ms/op
                 executeQuery·p0.95:   103.009 ms/op
                 executeQuery·p0.99:   108.613 ms/op
                 executeQuery·p0.999:  108.659 ms/op
                 executeQuery·p0.9999: 108.659 ms/op
                 executeQuery·p1.00:   108.659 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 497
  mean =     99.566 ±(99.9%) 0.328 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 367 
    [100.000, 105.000) = 121 
    [105.000, 110.000) = 8 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     97.124 ms/op
     p(50.0000) =     99.090 ms/op
     p(90.0000) =    101.319 ms/op
     p(95.0000) =    102.236 ms/op
     p(99.0000) =    107.888 ms/op
     p(99.9000) =    132.776 ms/op
     p(99.9900) =    132.776 ms/op
     p(99.9990) =    132.776 ms/op
     p(99.9999) =    132.776 ms/op
    p(100.0000) =    132.776 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 88.54% complete, ETA 00:30:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1645.066 ±(99.9%) 324.691 ms/op
# Warmup Iteration   2: 1575.261 ±(99.9%) 79.102 ms/op
# Warmup Iteration   3: 1529.423 ±(99.9%) 22.274 ms/op
# Warmup Iteration   4: 1535.714 ±(99.9%) 29.207 ms/op
# Warmup Iteration   5: 1510.848 ±(99.9%) 54.461 ms/op
Iteration   1: 1486.581 ±(99.9%) 68.849 ms/op
                 executeQuery·p0.00:   1447.035 ms/op
                 executeQuery·p0.50:   1478.492 ms/op
                 executeQuery·p0.90:   1524.630 ms/op
                 executeQuery·p0.95:   1524.630 ms/op
                 executeQuery·p0.99:   1524.630 ms/op
                 executeQuery·p0.999:  1524.630 ms/op
                 executeQuery·p0.9999: 1524.630 ms/op
                 executeQuery·p1.00:   1524.630 ms/op

Iteration   2: 1487.180 ±(99.9%) 69.279 ms/op
                 executeQuery·p0.00:   1451.229 ms/op
                 executeQuery·p0.50:   1472.201 ms/op
                 executeQuery·p0.90:   1533.018 ms/op
                 executeQuery·p0.95:   1533.018 ms/op
                 executeQuery·p0.99:   1533.018 ms/op
                 executeQuery·p0.999:  1533.018 ms/op
                 executeQuery·p0.9999: 1533.018 ms/op
                 executeQuery·p1.00:   1533.018 ms/op

Iteration   3: 1480.889 ±(99.9%) 81.281 ms/op
                 executeQuery·p0.00:   1451.229 ms/op
                 executeQuery·p0.50:   1468.006 ms/op
                 executeQuery·p0.90:   1560.281 ms/op
                 executeQuery·p0.95:   1560.281 ms/op
                 executeQuery·p0.99:   1560.281 ms/op
                 executeQuery·p0.999:  1560.281 ms/op
                 executeQuery·p0.9999: 1560.281 ms/op
                 executeQuery·p1.00:   1560.281 ms/op

Iteration   4: 1485.083 ±(99.9%) 55.246 ms/op
                 executeQuery·p0.00:   1461.715 ms/op
                 executeQuery·p0.50:   1478.492 ms/op
                 executeQuery·p0.90:   1530.921 ms/op
                 executeQuery·p0.95:   1530.921 ms/op
                 executeQuery·p0.99:   1530.921 ms/op
                 executeQuery·p0.999:  1530.921 ms/op
                 executeQuery·p0.9999: 1530.921 ms/op
                 executeQuery·p1.00:   1530.921 ms/op

Iteration   5: 1476.095 ±(99.9%) 20.665 ms/op
                 executeQuery·p0.00:   1465.909 ms/op
                 executeQuery·p0.50:   1476.395 ms/op
                 executeQuery·p0.90:   1491.075 ms/op
                 executeQuery·p0.95:   1491.075 ms/op
                 executeQuery·p0.99:   1491.075 ms/op
                 executeQuery·p0.999:  1491.075 ms/op
                 executeQuery·p0.9999: 1491.075 ms/op
                 executeQuery·p1.00:   1491.075 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 35
  mean =   1483.166 ±(99.9%) 16.110 ms/op

  Histogram, ms/op:
    [1400.000, 1412.500) = 0 
    [1412.500, 1425.000) = 0 
    [1425.000, 1437.500) = 0 
    [1437.500, 1450.000) = 1 
    [1450.000, 1462.500) = 4 
    [1462.500, 1475.000) = 13 
    [1475.000, 1487.500) = 6 
    [1487.500, 1500.000) = 3 
    [1500.000, 1512.500) = 2 
    [1512.500, 1525.000) = 3 
    [1525.000, 1537.500) = 2 
    [1537.500, 1550.000) = 0 
    [1550.000, 1562.500) = 1 
    [1562.500, 1575.000) = 0 
    [1575.000, 1587.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1447.035 ms/op
     p(50.0000) =   1474.298 ms/op
     p(90.0000) =   1527.146 ms/op
     p(95.0000) =   1538.471 ms/op
     p(99.0000) =   1560.281 ms/op
     p(99.9000) =   1560.281 ms/op
     p(99.9900) =   1560.281 ms/op
     p(99.9990) =   1560.281 ms/op
     p(99.9999) =   1560.281 ms/op
    p(100.0000) =   1560.281 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 89.58% complete, ETA 00:27:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
25769.804 ms/op
# Warmup Iteration   2: 20065.550 ms/op
# Warmup Iteration   3: 17783.849 ms/op
# Warmup Iteration   4: 18287.165 ms/op
# Warmup Iteration   5: 18723.373 ms/op
Iteration   1: 18622.710 ms/op
                 executeQuery·p0.00:   18622.710 ms/op
                 executeQuery·p0.50:   18622.710 ms/op
                 executeQuery·p0.90:   18622.710 ms/op
                 executeQuery·p0.95:   18622.710 ms/op
                 executeQuery·p0.99:   18622.710 ms/op
                 executeQuery·p0.999:  18622.710 ms/op
                 executeQuery·p0.9999: 18622.710 ms/op
                 executeQuery·p1.00:   18622.710 ms/op

Iteration   2: 18790.482 ms/op
                 executeQuery·p0.00:   18790.482 ms/op
                 executeQuery·p0.50:   18790.482 ms/op
                 executeQuery·p0.90:   18790.482 ms/op
                 executeQuery·p0.95:   18790.482 ms/op
                 executeQuery·p0.99:   18790.482 ms/op
                 executeQuery·p0.999:  18790.482 ms/op
                 executeQuery·p0.9999: 18790.482 ms/op
                 executeQuery·p1.00:   18790.482 ms/op

Iteration   3: 18857.591 ms/op
                 executeQuery·p0.00:   18857.591 ms/op
                 executeQuery·p0.50:   18857.591 ms/op
                 executeQuery·p0.90:   18857.591 ms/op
                 executeQuery·p0.95:   18857.591 ms/op
                 executeQuery·p0.99:   18857.591 ms/op
                 executeQuery·p0.999:  18857.591 ms/op
                 executeQuery·p0.9999: 18857.591 ms/op
                 executeQuery·p1.00:   18857.591 ms/op

Iteration   4: 18622.710 ms/op
                 executeQuery·p0.00:   18622.710 ms/op
                 executeQuery·p0.50:   18622.710 ms/op
                 executeQuery·p0.90:   18622.710 ms/op
                 executeQuery·p0.95:   18622.710 ms/op
                 executeQuery·p0.99:   18622.710 ms/op
                 executeQuery·p0.999:  18622.710 ms/op
                 executeQuery·p0.9999: 18622.710 ms/op
                 executeQuery·p1.00:   18622.710 ms/op

Iteration   5: 18555.601 ms/op
                 executeQuery·p0.00:   18555.601 ms/op
                 executeQuery·p0.50:   18555.601 ms/op
                 executeQuery·p0.90:   18555.601 ms/op
                 executeQuery·p0.95:   18555.601 ms/op
                 executeQuery·p0.99:   18555.601 ms/op
                 executeQuery·p0.999:  18555.601 ms/op
                 executeQuery·p0.9999: 18555.601 ms/op
                 executeQuery·p1.00:   18555.601 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  18689.819 ±(99.9%) 492.002 ms/op

  Histogram, ms/op:
    [18500.000, 18525.000) = 0 
    [18525.000, 18550.000) = 0 
    [18550.000, 18575.000) = 1 
    [18575.000, 18600.000) = 0 
    [18600.000, 18625.000) = 2 
    [18625.000, 18650.000) = 0 
    [18650.000, 18675.000) = 0 
    [18675.000, 18700.000) = 0 
    [18700.000, 18725.000) = 0 
    [18725.000, 18750.000) = 0 
    [18750.000, 18775.000) = 0 
    [18775.000, 18800.000) = 1 
    [18800.000, 18825.000) = 0 
    [18825.000, 18850.000) = 0 
    [18850.000, 18875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  18555.601 ms/op
     p(50.0000) =  18622.710 ms/op
     p(90.0000) =  18857.591 ms/op
     p(95.0000) =  18857.591 ms/op
     p(99.0000) =  18857.591 ms/op
     p(99.9000) =  18857.591 ms/op
     p(99.9900) =  18857.591 ms/op
     p(99.9990) =  18857.591 ms/op
     p(99.9999) =  18857.591 ms/op
    p(100.0000) =  18857.591 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 90.63% complete, ETA 00:25:13
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
29.871 ±(99.9%) 1.286 ms/op
# Warmup Iteration   2: 28.162 ±(99.9%) 0.080 ms/op
# Warmup Iteration   3: 28.502 ±(99.9%) 0.100 ms/op
# Warmup Iteration   4: 28.536 ±(99.9%) 0.073 ms/op
# Warmup Iteration   5: 28.535 ±(99.9%) 0.076 ms/op
Iteration   1: 28.575 ±(99.9%) 0.091 ms/op
                 executeQuery·p0.00:   27.623 ms/op
                 executeQuery·p0.50:   28.606 ms/op
                 executeQuery·p0.90:   28.901 ms/op
                 executeQuery·p0.95:   29.213 ms/op
                 executeQuery·p0.99:   29.606 ms/op
                 executeQuery·p0.999:  35.521 ms/op
                 executeQuery·p0.9999: 35.521 ms/op
                 executeQuery·p1.00:   35.521 ms/op

Iteration   2: 28.378 ±(99.9%) 0.073 ms/op
                 executeQuery·p0.00:   27.591 ms/op
                 executeQuery·p0.50:   28.443 ms/op
                 executeQuery·p0.90:   28.738 ms/op
                 executeQuery·p0.95:   29.098 ms/op
                 executeQuery·p0.99:   29.769 ms/op
                 executeQuery·p0.999:  30.507 ms/op
                 executeQuery·p0.9999: 30.507 ms/op
                 executeQuery·p1.00:   30.507 ms/op

Iteration   3: 28.393 ±(99.9%) 0.076 ms/op
                 executeQuery·p0.00:   27.460 ms/op
                 executeQuery·p0.50:   28.475 ms/op
                 executeQuery·p0.90:   28.934 ms/op
                 executeQuery·p0.95:   29.196 ms/op
                 executeQuery·p0.99:   29.569 ms/op
                 executeQuery·p0.999:  29.950 ms/op
                 executeQuery·p0.9999: 29.950 ms/op
                 executeQuery·p1.00:   29.950 ms/op

Iteration   4: 28.400 ±(99.9%) 0.082 ms/op
                 executeQuery·p0.00:   27.492 ms/op
                 executeQuery·p0.50:   28.475 ms/op
                 executeQuery·p0.90:   28.797 ms/op
                 executeQuery·p0.95:   29.196 ms/op
                 executeQuery·p0.99:   30.212 ms/op
                 executeQuery·p0.999:  30.671 ms/op
                 executeQuery·p0.9999: 30.671 ms/op
                 executeQuery·p1.00:   30.671 ms/op

Iteration   5: 28.426 ±(99.9%) 0.087 ms/op
                 executeQuery·p0.00:   27.558 ms/op
                 executeQuery·p0.50:   28.475 ms/op
                 executeQuery·p0.90:   28.764 ms/op
                 executeQuery·p0.95:   29.177 ms/op
                 executeQuery·p0.99:   29.669 ms/op
                 executeQuery·p0.999:  33.489 ms/op
                 executeQuery·p0.9999: 33.489 ms/op
                 executeQuery·p1.00:   33.489 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 1753
  mean =     28.434 ±(99.9%) 0.037 ms/op

  Histogram, ms/op:
    [27.000, 27.500) = 2 
    [27.500, 28.000) = 298 
    [28.000, 28.500) = 541 
    [28.500, 29.000) = 784 
    [29.000, 29.500) = 103 
    [29.500, 30.000) = 15 
    [30.000, 30.500) = 5 
    [30.500, 31.000) = 3 
    [31.000, 31.500) = 0 
    [31.500, 32.000) = 0 
    [32.000, 32.500) = 0 
    [32.500, 33.000) = 0 
    [33.000, 33.500) = 1 
    [33.500, 34.000) = 0 
    [34.000, 34.500) = 0 
    [34.500, 35.000) = 0 
    [35.000, 35.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     27.460 ms/op
     p(50.0000) =     28.508 ms/op
     p(90.0000) =     28.836 ms/op
     p(95.0000) =     29.164 ms/op
     p(99.0000) =     29.721 ms/op
     p(99.9000) =     33.989 ms/op
     p(99.9900) =     35.521 ms/op
     p(99.9990) =     35.521 ms/op
     p(99.9999) =     35.521 ms/op
    p(100.0000) =     35.521 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 91.67% complete, ETA 00:22:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
286.935 ±(99.9%) 28.663 ms/op
# Warmup Iteration   2: 267.725 ±(99.9%) 1.714 ms/op
# Warmup Iteration   3: 267.359 ±(99.9%) 1.118 ms/op
# Warmup Iteration   4: 270.497 ±(99.9%) 2.191 ms/op
# Warmup Iteration   5: 272.098 ±(99.9%) 1.738 ms/op
Iteration   1: 276.031 ±(99.9%) 1.712 ms/op
                 executeQuery·p0.00:   269.484 ms/op
                 executeQuery·p0.50:   276.824 ms/op
                 executeQuery·p0.90:   278.921 ms/op
                 executeQuery·p0.95:   279.131 ms/op
                 executeQuery·p0.99:   281.018 ms/op
                 executeQuery·p0.999:  281.018 ms/op
                 executeQuery·p0.9999: 281.018 ms/op
                 executeQuery·p1.00:   281.018 ms/op

Iteration   2: 273.367 ±(99.9%) 2.768 ms/op
                 executeQuery·p0.00:   265.814 ms/op
                 executeQuery·p0.50:   272.630 ms/op
                 executeQuery·p0.90:   279.026 ms/op
                 executeQuery·p0.95:   279.446 ms/op
                 executeQuery·p0.99:   279.446 ms/op
                 executeQuery·p0.999:  279.446 ms/op
                 executeQuery·p0.9999: 279.446 ms/op
                 executeQuery·p1.00:   279.446 ms/op

Iteration   3: 268.739 ±(99.9%) 2.204 ms/op
                 executeQuery·p0.00:   264.765 ms/op
                 executeQuery·p0.50:   267.387 ms/op
                 executeQuery·p0.90:   274.832 ms/op
                 executeQuery·p0.95:   277.008 ms/op
                 executeQuery·p0.99:   280.494 ms/op
                 executeQuery·p0.999:  280.494 ms/op
                 executeQuery·p0.9999: 280.494 ms/op
                 executeQuery·p1.00:   280.494 ms/op

Iteration   4: 271.992 ±(99.9%) 1.735 ms/op
                 executeQuery·p0.00:   265.552 ms/op
                 executeQuery·p0.50:   272.630 ms/op
                 executeQuery·p0.90:   274.832 ms/op
                 executeQuery·p0.95:   277.558 ms/op
                 executeQuery·p0.99:   279.446 ms/op
                 executeQuery·p0.999:  279.446 ms/op
                 executeQuery·p0.9999: 279.446 ms/op
                 executeQuery·p1.00:   279.446 ms/op

Iteration   5: 271.673 ±(99.9%) 1.517 ms/op
                 executeQuery·p0.00:   265.814 ms/op
                 executeQuery·p0.50:   272.630 ms/op
                 executeQuery·p0.90:   274.832 ms/op
                 executeQuery·p0.95:   275.828 ms/op
                 executeQuery·p0.99:   276.300 ms/op
                 executeQuery·p0.999:  276.300 ms/op
                 executeQuery·p0.9999: 276.300 ms/op
                 executeQuery·p1.00:   276.300 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 186
  mean =    272.341 ±(99.9%) 1.026 ms/op

  Histogram, ms/op:
    [260.000, 262.500) = 0 
    [262.500, 265.000) = 1 
    [265.000, 267.500) = 31 
    [267.500, 270.000) = 25 
    [270.000, 272.500) = 29 
    [272.500, 275.000) = 52 
    [275.000, 277.500) = 18 
    [277.500, 280.000) = 28 
    [280.000, 282.500) = 2 
    [282.500, 285.000) = 0 
    [285.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    264.765 ms/op
     p(50.0000) =    272.630 ms/op
     p(90.0000) =    278.397 ms/op
     p(95.0000) =    278.921 ms/op
     p(99.0000) =    280.562 ms/op
     p(99.9000) =    281.018 ms/op
     p(99.9900) =    281.018 ms/op
     p(99.9990) =    281.018 ms/op
     p(99.9999) =    281.018 ms/op
    p(100.0000) =    281.018 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 92.71% complete, ETA 00:19:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2986.344 ±(99.9%) 1551.782 ms/op
# Warmup Iteration   2: 2962.227 ±(99.9%) 86.774 ms/op
# Warmup Iteration   3: 2766.143 ±(99.9%) 1253.521 ms/op
# Warmup Iteration   4: 2605.711 ±(99.9%) 64.043 ms/op
# Warmup Iteration   5: 2601.517 ±(99.9%) 13.552 ms/op
Iteration   1: 2585.788 ±(99.9%) 15.648 ms/op
                 executeQuery·p0.00:   2583.691 ms/op
                 executeQuery·p0.50:   2585.788 ms/op
                 executeQuery·p0.90:   2587.886 ms/op
                 executeQuery·p0.95:   2587.886 ms/op
                 executeQuery·p0.99:   2587.886 ms/op
                 executeQuery·p0.999:  2587.886 ms/op
                 executeQuery·p0.9999: 2587.886 ms/op
                 executeQuery·p1.00:   2587.886 ms/op

Iteration   2: 2614.100 ±(99.9%) 188.267 ms/op
                 executeQuery·p0.00:   2579.497 ms/op
                 executeQuery·p0.50:   2613.051 ms/op
                 executeQuery·p0.90:   2650.800 ms/op
                 executeQuery·p0.95:   2650.800 ms/op
                 executeQuery·p0.99:   2650.800 ms/op
                 executeQuery·p0.999:  2650.800 ms/op
                 executeQuery·p0.9999: 2650.800 ms/op
                 executeQuery·p1.00:   2650.800 ms/op

Iteration   3: 2690.646 ±(99.9%) 113.921 ms/op
                 executeQuery·p0.00:   2671.772 ms/op
                 executeQuery·p0.50:   2690.646 ms/op
                 executeQuery·p0.90:   2709.520 ms/op
                 executeQuery·p0.95:   2709.520 ms/op
                 executeQuery·p0.99:   2709.520 ms/op
                 executeQuery·p0.999:  2709.520 ms/op
                 executeQuery·p0.9999: 2709.520 ms/op
                 executeQuery·p1.00:   2709.520 ms/op

Iteration   4: 2670.723 ±(99.9%) 40.655 ms/op
                 executeQuery·p0.00:   2667.577 ms/op
                 executeQuery·p0.50:   2667.577 ms/op
                 executeQuery·p0.90:   2680.160 ms/op
                 executeQuery·p0.95:   2680.160 ms/op
                 executeQuery·p0.99:   2680.160 ms/op
                 executeQuery·p0.999:  2680.160 ms/op
                 executeQuery·p0.9999: 2680.160 ms/op
                 executeQuery·p1.00:   2680.160 ms/op

Iteration   5: 2659.189 ±(99.9%) 164.120 ms/op
                 executeQuery·p0.00:   2621.440 ms/op
                 executeQuery·p0.50:   2669.674 ms/op
                 executeQuery·p0.90:   2675.966 ms/op
                 executeQuery·p0.95:   2675.966 ms/op
                 executeQuery·p0.99:   2675.966 ms/op
                 executeQuery·p0.999:  2675.966 ms/op
                 executeQuery·p0.9999: 2675.966 ms/op
                 executeQuery·p1.00:   2675.966 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   2644.089 ±(99.9%) 37.356 ms/op

  Histogram, ms/op:
    [2500.000, 2525.000) = 0 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 0 
    [2575.000, 2600.000) = 5 
    [2600.000, 2625.000) = 3 
    [2625.000, 2650.000) = 0 
    [2650.000, 2675.000) = 7 
    [2675.000, 2700.000) = 3 
    [2700.000, 2725.000) = 2 
    [2725.000, 2750.000) = 0 
    [2750.000, 2775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2579.497 ms/op
     p(50.0000) =   2667.577 ms/op
     p(90.0000) =   2699.035 ms/op
     p(95.0000) =   2709.101 ms/op
     p(99.0000) =   2709.520 ms/op
     p(99.9000) =   2709.520 ms/op
     p(99.9900) =   2709.520 ms/op
     p(99.9990) =   2709.520 ms/op
     p(99.9999) =   2709.520 ms/op
    p(100.0000) =   2709.520 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 93.75% complete, ETA 00:16:36
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
32.374 ±(99.9%) 1.123 ms/op
# Warmup Iteration   2: 34.421 ±(99.9%) 0.107 ms/op
# Warmup Iteration   3: 34.807 ±(99.9%) 0.126 ms/op
# Warmup Iteration   4: 34.207 ±(99.9%) 0.126 ms/op
# Warmup Iteration   5: 33.849 ±(99.9%) 0.098 ms/op
Iteration   1: 34.050 ±(99.9%) 0.135 ms/op
                 executeQuery·p0.00:   32.997 ms/op
                 executeQuery·p0.50:   33.817 ms/op
                 executeQuery·p0.90:   34.931 ms/op
                 executeQuery·p0.95:   35.258 ms/op
                 executeQuery·p0.99:   36.759 ms/op
                 executeQuery·p0.999:  39.125 ms/op
                 executeQuery·p0.9999: 39.125 ms/op
                 executeQuery·p1.00:   39.125 ms/op

Iteration   2: 33.736 ±(99.9%) 0.144 ms/op
                 executeQuery·p0.00:   32.539 ms/op
                 executeQuery·p0.50:   33.620 ms/op
                 executeQuery·p0.90:   34.780 ms/op
                 executeQuery·p0.95:   35.042 ms/op
                 executeQuery·p0.99:   35.867 ms/op
                 executeQuery·p0.999:  37.421 ms/op
                 executeQuery·p0.9999: 37.421 ms/op
                 executeQuery·p1.00:   37.421 ms/op

Iteration   3: 34.097 ±(99.9%) 0.144 ms/op
                 executeQuery·p0.00:   33.096 ms/op
                 executeQuery·p0.50:   33.751 ms/op
                 executeQuery·p0.90:   34.931 ms/op
                 executeQuery·p0.95:   35.586 ms/op
                 executeQuery·p0.99:   36.327 ms/op
                 executeQuery·p0.999:  39.649 ms/op
                 executeQuery·p0.9999: 39.649 ms/op
                 executeQuery·p1.00:   39.649 ms/op

Iteration   4: 33.966 ±(99.9%) 0.122 ms/op
                 executeQuery·p0.00:   32.735 ms/op
                 executeQuery·p0.50:   33.817 ms/op
                 executeQuery·p0.90:   34.800 ms/op
                 executeQuery·p0.95:   35.160 ms/op
                 executeQuery·p0.99:   35.920 ms/op
                 executeQuery·p0.999:  36.110 ms/op
                 executeQuery·p0.9999: 36.110 ms/op
                 executeQuery·p1.00:   36.110 ms/op

Iteration   5: 34.155 ±(99.9%) 0.219 ms/op
                 executeQuery·p0.00:   32.604 ms/op
                 executeQuery·p0.50:   33.817 ms/op
                 executeQuery·p0.90:   34.865 ms/op
                 executeQuery·p0.95:   35.468 ms/op
                 executeQuery·p0.99:   37.960 ms/op
                 executeQuery·p0.999:  48.038 ms/op
                 executeQuery·p0.9999: 48.038 ms/op
                 executeQuery·p1.00:   48.038 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 1447
  mean =     34.000 ±(99.9%) 0.070 ms/op

  Histogram, ms/op:
    [30.000, 31.250) = 0 
    [31.250, 32.500) = 0 
    [32.500, 33.750) = 626 
    [33.750, 35.000) = 728 
    [35.000, 36.250) = 81 
    [36.250, 37.500) = 6 
    [37.500, 38.750) = 3 
    [38.750, 40.000) = 2 
    [40.000, 41.250) = 0 
    [41.250, 42.500) = 0 
    [42.500, 43.750) = 0 
    [43.750, 45.000) = 0 
    [45.000, 46.250) = 0 
    [46.250, 47.500) = 0 
    [47.500, 48.750) = 1 

  Percentiles, ms/op:
      p(0.0000) =     32.539 ms/op
     p(50.0000) =     33.751 ms/op
     p(90.0000) =     34.865 ms/op
     p(95.0000) =     35.258 ms/op
     p(99.0000) =     36.144 ms/op
     p(99.9000) =     44.280 ms/op
     p(99.9900) =     48.038 ms/op
     p(99.9990) =     48.038 ms/op
     p(99.9999) =     48.038 ms/op
    p(100.0000) =     48.038 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 94.79% complete, ETA 00:13:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
297.981 ±(99.9%) 27.640 ms/op
# Warmup Iteration   2: 315.015 ±(99.9%) 0.957 ms/op
# Warmup Iteration   3: 315.376 ±(99.9%) 4.076 ms/op
# Warmup Iteration   4: 318.095 ±(99.9%) 8.282 ms/op
# Warmup Iteration   5: 317.686 ±(99.9%) 6.495 ms/op
Iteration   1: 317.440 ±(99.9%) 3.073 ms/op
                 executeQuery·p0.00:   311.951 ms/op
                 executeQuery·p0.50:   315.359 ms/op
                 executeQuery·p0.90:   324.534 ms/op
                 executeQuery·p0.95:   325.242 ms/op
                 executeQuery·p0.99:   325.583 ms/op
                 executeQuery·p0.999:  325.583 ms/op
                 executeQuery·p0.9999: 325.583 ms/op
                 executeQuery·p1.00:   325.583 ms/op

Iteration   2: 316.948 ±(99.9%) 3.006 ms/op
                 executeQuery·p0.00:   312.476 ms/op
                 executeQuery·p0.50:   314.835 ms/op
                 executeQuery·p0.90:   325.059 ms/op
                 executeQuery·p0.95:   325.609 ms/op
                 executeQuery·p0.99:   326.631 ms/op
                 executeQuery·p0.999:  326.631 ms/op
                 executeQuery·p0.9999: 326.631 ms/op
                 executeQuery·p1.00:   326.631 ms/op

Iteration   3: 318.685 ±(99.9%) 4.521 ms/op
                 executeQuery·p0.00:   312.476 ms/op
                 executeQuery·p0.50:   315.884 ms/op
                 executeQuery·p0.90:   329.567 ms/op
                 executeQuery·p0.95:   337.825 ms/op
                 executeQuery·p0.99:   338.166 ms/op
                 executeQuery·p0.999:  338.166 ms/op
                 executeQuery·p0.9999: 338.166 ms/op
                 executeQuery·p1.00:   338.166 ms/op

Iteration   4: 314.819 ±(99.9%) 0.736 ms/op
                 executeQuery·p0.00:   313.000 ms/op
                 executeQuery·p0.50:   314.573 ms/op
                 executeQuery·p0.90:   316.146 ms/op
                 executeQuery·p0.95:   317.194 ms/op
                 executeQuery·p0.99:   317.194 ms/op
                 executeQuery·p0.999:  317.194 ms/op
                 executeQuery·p0.9999: 317.194 ms/op
                 executeQuery·p1.00:   317.194 ms/op

Iteration   5: 313.623 ±(99.9%) 1.534 ms/op
                 executeQuery·p0.00:   311.427 ms/op
                 executeQuery·p0.50:   313.000 ms/op
                 executeQuery·p0.90:   315.674 ms/op
                 executeQuery·p0.95:   319.606 ms/op
                 executeQuery·p0.99:   325.059 ms/op
                 executeQuery·p0.999:  325.059 ms/op
                 executeQuery·p0.9999: 325.059 ms/op
                 executeQuery·p1.00:   325.059 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 160
  mean =    316.303 ±(99.9%) 1.275 ms/op

  Histogram, ms/op:
    [310.000, 312.500) = 15 
    [312.500, 315.000) = 75 
    [315.000, 317.500) = 34 
    [317.500, 320.000) = 7 
    [320.000, 322.500) = 5 
    [322.500, 325.000) = 10 
    [325.000, 327.500) = 11 
    [327.500, 330.000) = 0 
    [330.000, 332.500) = 1 
    [332.500, 335.000) = 0 
    [335.000, 337.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    311.427 ms/op
     p(50.0000) =    314.049 ms/op
     p(90.0000) =    324.534 ms/op
     p(95.0000) =    325.583 ms/op
     p(99.0000) =    337.846 ms/op
     p(99.9000) =    338.166 ms/op
     p(99.9900) =    338.166 ms/op
     p(99.9990) =    338.166 ms/op
     p(99.9999) =    338.166 ms/op
    p(100.0000) =    338.166 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 95.83% complete, ETA 00:10:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2951.741 ±(99.9%) 1129.576 ms/op
# Warmup Iteration   2: 3155.165 ±(99.9%) 46.288 ms/op
# Warmup Iteration   3: 3169.845 ±(99.9%) 92.245 ms/op
# Warmup Iteration   4: 3163.554 ±(99.9%) 51.306 ms/op
# Warmup Iteration   5: 3161.457 ±(99.9%) 46.288 ms/op
Iteration   1: 3185.574 ±(99.9%) 84.268 ms/op
                 executeQuery·p0.00:   3175.088 ms/op
                 executeQuery·p0.50:   3181.380 ms/op
                 executeQuery·p0.90:   3204.448 ms/op
                 executeQuery·p0.95:   3204.448 ms/op
                 executeQuery·p0.99:   3204.448 ms/op
                 executeQuery·p0.999:  3204.448 ms/op
                 executeQuery·p0.9999: 3204.448 ms/op
                 executeQuery·p1.00:   3204.448 ms/op

Iteration   2: 3160.408 ±(99.9%) 56.421 ms/op
                 executeQuery·p0.00:   3149.922 ms/op
                 executeQuery·p0.50:   3160.408 ms/op
                 executeQuery·p0.90:   3170.894 ms/op
                 executeQuery·p0.95:   3170.894 ms/op
                 executeQuery·p0.99:   3170.894 ms/op
                 executeQuery·p0.999:  3170.894 ms/op
                 executeQuery·p0.9999: 3170.894 ms/op
                 executeQuery·p1.00:   3170.894 ms/op

Iteration   3: 3219.128 ±(99.9%) 157.263 ms/op
                 executeQuery·p0.00:   3196.060 ms/op
                 executeQuery·p0.50:   3219.128 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op

Iteration   4: 3180.331 ±(99.9%) 218.376 ms/op
                 executeQuery·p0.00:   3158.311 ms/op
                 executeQuery·p0.50:   3166.700 ms/op
                 executeQuery·p0.90:   3229.614 ms/op
                 executeQuery·p0.95:   3229.614 ms/op
                 executeQuery·p0.99:   3229.614 ms/op
                 executeQuery·p0.999:  3229.614 ms/op
                 executeQuery·p0.9999: 3229.614 ms/op
                 executeQuery·p1.00:   3229.614 ms/op

Iteration   5: 3168.797 ±(99.9%) 15.648 ms/op
                 executeQuery·p0.00:   3166.700 ms/op
                 executeQuery·p0.50:   3168.797 ms/op
                 executeQuery·p0.90:   3170.894 ms/op
                 executeQuery·p0.95:   3170.894 ms/op
                 executeQuery·p0.99:   3170.894 ms/op
                 executeQuery·p0.999:  3170.894 ms/op
                 executeQuery·p0.9999: 3170.894 ms/op
                 executeQuery·p1.00:   3170.894 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   3182.848 ±(99.9%) 23.642 ms/op

  Histogram, ms/op:
    [3140.000, 3150.000) = 1 
    [3150.000, 3160.000) = 3 
    [3160.000, 3170.000) = 3 
    [3170.000, 3180.000) = 6 
    [3180.000, 3190.000) = 1 
    [3190.000, 3200.000) = 1 
    [3200.000, 3210.000) = 2 
    [3210.000, 3220.000) = 0 
    [3220.000, 3230.000) = 1 
    [3230.000, 3240.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3149.922 ms/op
     p(50.0000) =   3172.991 ms/op
     p(90.0000) =   3237.164 ms/op
     p(95.0000) =   3241.987 ms/op
     p(99.0000) =   3242.197 ms/op
     p(99.9000) =   3242.197 ms/op
     p(99.9900) =   3242.197 ms/op
     p(99.9990) =   3242.197 ms/op
     p(99.9999) =   3242.197 ms/op
    p(100.0000) =   3242.197 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 96.88% complete, ETA 00:08:12
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
35.677 ±(99.9%) 1.295 ms/op
# Warmup Iteration   2: 36.907 ±(99.9%) 0.202 ms/op
# Warmup Iteration   3: 36.906 ±(99.9%) 0.171 ms/op
# Warmup Iteration   4: 36.374 ±(99.9%) 0.137 ms/op
# Warmup Iteration   5: 36.130 ±(99.9%) 0.110 ms/op
Iteration   1: 36.014 ±(99.9%) 0.136 ms/op
                 executeQuery·p0.00:   34.865 ms/op
                 executeQuery·p0.50:   35.914 ms/op
                 executeQuery·p0.90:   36.674 ms/op
                 executeQuery·p0.95:   37.329 ms/op
                 executeQuery·p0.99:   37.897 ms/op
                 executeQuery·p0.999:  41.746 ms/op
                 executeQuery·p0.9999: 41.746 ms/op
                 executeQuery·p1.00:   41.746 ms/op

Iteration   2: 36.071 ±(99.9%) 0.125 ms/op
                 executeQuery·p0.00:   34.931 ms/op
                 executeQuery·p0.50:   35.979 ms/op
                 executeQuery·p0.90:   36.766 ms/op
                 executeQuery·p0.95:   37.224 ms/op
                 executeQuery·p0.99:   38.145 ms/op
                 executeQuery·p0.999:  39.191 ms/op
                 executeQuery·p0.9999: 39.191 ms/op
                 executeQuery·p1.00:   39.191 ms/op

Iteration   3: 36.152 ±(99.9%) 0.137 ms/op
                 executeQuery·p0.00:   34.865 ms/op
                 executeQuery·p0.50:   36.110 ms/op
                 executeQuery·p0.90:   36.897 ms/op
                 executeQuery·p0.95:   37.310 ms/op
                 executeQuery·p0.99:   38.390 ms/op
                 executeQuery·p0.999:  39.977 ms/op
                 executeQuery·p0.9999: 39.977 ms/op
                 executeQuery·p1.00:   39.977 ms/op

Iteration   4: 36.606 ±(99.9%) 0.182 ms/op
                 executeQuery·p0.00:   34.996 ms/op
                 executeQuery·p0.50:   36.635 ms/op
                 executeQuery·p0.90:   37.945 ms/op
                 executeQuery·p0.95:   38.142 ms/op
                 executeQuery·p0.99:   38.797 ms/op
                 executeQuery·p0.999:  39.256 ms/op
                 executeQuery·p0.9999: 39.256 ms/op
                 executeQuery·p1.00:   39.256 ms/op

Iteration   5: 36.336 ±(99.9%) 0.183 ms/op
                 executeQuery·p0.00:   34.865 ms/op
                 executeQuery·p0.50:   36.176 ms/op
                 executeQuery·p0.90:   37.670 ms/op
                 executeQuery·p0.95:   38.168 ms/op
                 executeQuery·p0.99:   38.928 ms/op
                 executeQuery·p0.999:  39.256 ms/op
                 executeQuery·p0.9999: 39.256 ms/op
                 executeQuery·p1.00:   39.256 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 1359
  mean =     36.235 ±(99.9%) 0.071 ms/op

  Histogram, ms/op:
    [34.000, 34.500) = 0 
    [34.500, 35.000) = 25 
    [35.000, 35.500) = 186 
    [35.500, 36.000) = 387 
    [36.000, 36.500) = 349 
    [36.500, 37.000) = 206 
    [37.000, 37.500) = 104 
    [37.500, 38.000) = 53 
    [38.000, 38.500) = 34 
    [38.500, 39.000) = 10 
    [39.000, 39.500) = 3 
    [39.500, 40.000) = 1 
    [40.000, 40.500) = 0 
    [40.500, 41.000) = 0 
    [41.000, 41.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     34.865 ms/op
     p(50.0000) =     36.110 ms/op
     p(90.0000) =     37.356 ms/op
     p(95.0000) =     37.749 ms/op
     p(99.0000) =     38.535 ms/op
     p(99.9000) =     41.109 ms/op
     p(99.9900) =     41.746 ms/op
     p(99.9990) =     41.746 ms/op
     p(99.9999) =     41.746 ms/op
    p(100.0000) =     41.746 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 97.92% complete, ETA 00:05:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
329.439 ±(99.9%) 18.116 ms/op
# Warmup Iteration   2: 351.436 ±(99.9%) 3.184 ms/op
# Warmup Iteration   3: 355.937 ±(99.9%) 5.282 ms/op
# Warmup Iteration   4: 358.332 ±(99.9%) 2.737 ms/op
# Warmup Iteration   5: 359.212 ±(99.9%) 4.367 ms/op
Iteration   1: 358.969 ±(99.9%) 2.935 ms/op
                 executeQuery·p0.00:   353.894 ms/op
                 executeQuery·p0.50:   358.613 ms/op
                 executeQuery·p0.90:   365.481 ms/op
                 executeQuery·p0.95:   366.241 ms/op
                 executeQuery·p0.99:   366.477 ms/op
                 executeQuery·p0.999:  366.477 ms/op
                 executeQuery·p0.9999: 366.477 ms/op
                 executeQuery·p1.00:   366.477 ms/op

Iteration   2: 358.239 ±(99.9%) 2.858 ms/op
                 executeQuery·p0.00:   352.322 ms/op
                 executeQuery·p0.50:   357.827 ms/op
                 executeQuery·p0.90:   364.433 ms/op
                 executeQuery·p0.95:   368.653 ms/op
                 executeQuery·p0.99:   371.720 ms/op
                 executeQuery·p0.999:  371.720 ms/op
                 executeQuery·p0.9999: 371.720 ms/op
                 executeQuery·p1.00:   371.720 ms/op

Iteration   3: 357.770 ±(99.9%) 2.707 ms/op
                 executeQuery·p0.00:   352.322 ms/op
                 executeQuery·p0.50:   356.516 ms/op
                 executeQuery·p0.90:   363.594 ms/op
                 executeQuery·p0.95:   367.106 ms/op
                 executeQuery·p0.99:   368.050 ms/op
                 executeQuery·p0.999:  368.050 ms/op
                 executeQuery·p0.9999: 368.050 ms/op
                 executeQuery·p1.00:   368.050 ms/op

Iteration   4: 357.939 ±(99.9%) 2.589 ms/op
                 executeQuery·p0.00:   352.322 ms/op
                 executeQuery·p0.50:   357.040 ms/op
                 executeQuery·p0.90:   363.961 ms/op
                 executeQuery·p0.95:   365.193 ms/op
                 executeQuery·p0.99:   365.429 ms/op
                 executeQuery·p0.999:  365.429 ms/op
                 executeQuery·p0.9999: 365.429 ms/op
                 executeQuery·p1.00:   365.429 ms/op

Iteration   5: 355.142 ±(99.9%) 2.241 ms/op
                 executeQuery·p0.00:   352.322 ms/op
                 executeQuery·p0.50:   354.419 ms/op
                 executeQuery·p0.90:   359.137 ms/op
                 executeQuery·p0.95:   364.380 ms/op
                 executeQuery·p0.99:   367.526 ms/op
                 executeQuery·p0.999:  367.526 ms/op
                 executeQuery·p0.9999: 367.526 ms/op
                 executeQuery·p1.00:   367.526 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 141
  mean =    357.594 ±(99.9%) 1.136 ms/op

  Histogram, ms/op:
    [350.000, 352.500) = 10 
    [352.500, 355.000) = 41 
    [355.000, 357.500) = 29 
    [357.500, 360.000) = 23 
    [360.000, 362.500) = 18 
    [362.500, 365.000) = 12 
    [365.000, 367.500) = 5 
    [367.500, 370.000) = 2 
    [370.000, 372.500) = 1 
    [372.500, 375.000) = 0 
    [375.000, 377.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    352.322 ms/op
     p(50.0000) =    356.516 ms/op
     p(90.0000) =    363.751 ms/op
     p(95.0000) =    365.429 ms/op
     p(99.0000) =    370.179 ms/op
     p(99.9000) =    371.720 ms/op
     p(99.9900) =    371.720 ms/op
     p(99.9990) =    371.720 ms/op
     p(99.9999) =    371.720 ms/op
    p(100.0000) =    371.720 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 98.96% complete, ETA 00:02:42
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3328.180 ±(99.9%) 661.867 ms/op
# Warmup Iteration   2: 3475.680 ±(99.9%) 467.543 ms/op
# Warmup Iteration   3: 3482.670 ±(99.9%) 542.877 ms/op
# Warmup Iteration   4: 3474.282 ±(99.9%) 497.868 ms/op
# Warmup Iteration   5: 3477.078 ±(99.9%) 275.896 ms/op
Iteration   1: 3538.594 ±(99.9%) 509.493 ms/op
                 executeQuery·p0.00:   3506.438 ms/op
                 executeQuery·p0.50:   3552.575 ms/op
                 executeQuery·p0.90:   3556.770 ms/op
                 executeQuery·p0.95:   3556.770 ms/op
                 executeQuery·p0.99:   3556.770 ms/op
                 executeQuery·p0.999:  3556.770 ms/op
                 executeQuery·p0.9999: 3556.770 ms/op
                 executeQuery·p1.00:   3556.770 ms/op

Iteration   2: 3549.779 ±(99.9%) 377.463 ms/op
                 executeQuery·p0.00:   3535.798 ms/op
                 executeQuery·p0.50:   3539.993 ms/op
                 executeQuery·p0.90:   3573.547 ms/op
                 executeQuery·p0.95:   3573.547 ms/op
                 executeQuery·p0.99:   3573.547 ms/op
                 executeQuery·p0.999:  3573.547 ms/op
                 executeQuery·p0.9999: 3573.547 ms/op
                 executeQuery·p1.00:   3573.547 ms/op

Iteration   3: 3520.419 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3519.021 ms/op
                 executeQuery·p0.50:   3519.021 ms/op
                 executeQuery·p0.90:   3523.215 ms/op
                 executeQuery·p0.95:   3523.215 ms/op
                 executeQuery·p0.99:   3523.215 ms/op
                 executeQuery·p0.999:  3523.215 ms/op
                 executeQuery·p0.9999: 3523.215 ms/op
                 executeQuery·p1.00:   3523.215 ms/op

Iteration   4: 3512.031 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   3489.661 ms/op
                 executeQuery·p0.50:   3510.632 ms/op
                 executeQuery·p0.90:   3535.798 ms/op
                 executeQuery·p0.95:   3535.798 ms/op
                 executeQuery·p0.99:   3535.798 ms/op
                 executeQuery·p0.999:  3535.798 ms/op
                 executeQuery·p0.9999: 3535.798 ms/op
                 executeQuery·p1.00:   3535.798 ms/op

Iteration   5: 3541.391 ±(99.9%) 723.236 ms/op
                 executeQuery·p0.00:   3510.632 ms/op
                 executeQuery·p0.50:   3527.410 ms/op
                 executeQuery·p0.90:   3586.130 ms/op
                 executeQuery·p0.95:   3586.130 ms/op
                 executeQuery·p0.99:   3586.130 ms/op
                 executeQuery·p0.999:  3586.130 ms/op
                 executeQuery·p0.9999: 3586.130 ms/op
                 executeQuery·p1.00:   3586.130 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   3532.443 ±(99.9%) 27.961 ms/op

  Histogram, ms/op:
    [3480.000, 3490.000) = 1 
    [3490.000, 3500.000) = 0 
    [3500.000, 3510.000) = 1 
    [3510.000, 3520.000) = 4 
    [3520.000, 3530.000) = 2 
    [3530.000, 3540.000) = 3 
    [3540.000, 3550.000) = 0 
    [3550.000, 3560.000) = 2 
    [3560.000, 3570.000) = 0 
    [3570.000, 3580.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3489.661 ms/op
     p(50.0000) =   3527.410 ms/op
     p(90.0000) =   3578.580 ms/op
     p(95.0000) =   3586.130 ms/op
     p(99.0000) =   3586.130 ms/op
     p(99.9000) =   3586.130 ms/op
     p(99.9900) =   3586.130 ms/op
     p(99.9990) =   3586.130 ms/op
     p(99.9999) =   3586.130 ms/op
    p(100.0000) =   3586.130 ms/op


# Run complete. Total time: 04:19:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                     (tpchInstance)    Mode   Cnt      Score       Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   165    307.970 ±     1.621  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          303.038              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          306.184              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          313.524              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          316.513              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          344.730              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          354.419              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          354.419              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          354.419              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample   119    430.784 ±     1.447  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          421.003              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          429.916              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          436.732              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          436.732              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          439.458              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          439.878              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          439.878              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          439.878              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    80    638.766 ±     4.806  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          615.514              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          641.729              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          651.166              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          652.214              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          680.526              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          680.526              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          680.526              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          680.526              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample    10    928.933 ±    41.973  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          887.095              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          926.417              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          967.731              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          968.884              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          968.884              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          968.884              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          968.884              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          968.884              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5   2462.895 ±   350.773  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2365.587              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2424.308              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2579.497              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2579.497              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2579.497              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2579.497              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2579.497              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2579.497              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    20   3263.378 ±     9.189  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3254.780              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3261.071              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3271.138              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3303.434              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3305.112              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3305.112              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3305.112              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3305.112              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    15   4247.432 ±    68.543  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4202.693              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4223.664              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4404.019              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4404.019              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4404.019              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4404.019              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4404.019              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4404.019              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10   6259.579 ±   112.135  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6199.181              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6241.124              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6435.740              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6450.840              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6450.840              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6450.840              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6450.840              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6450.840              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   9505.971 ±   921.132  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9126.806              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9646.899              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9697.231              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9697.231              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9697.231              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9697.231              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9697.231              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9697.231              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5  24816.858 ±  3778.701  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        23320.330              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25300.042              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25635.586              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25635.586              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25635.586              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25635.586              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25635.586              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25635.586              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10   6154.722 ±    61.276  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6115.295              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6144.655              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6224.347              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6224.347              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6224.347              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6224.347              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6224.347              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6224.347              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     5  10341.476 ±   321.721  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10250.879              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10385.097              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10418.651              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10418.651              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10418.651              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10418.651              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10418.651              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10418.651              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5  12750.684 ±   877.509  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12515.803              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12717.130              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13103.006              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5  18012.019 ±  1683.155  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        17448.305              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18085.839              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18555.601              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18555.601              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18555.601              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18555.601              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18555.601              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18555.601              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5  47419.123 ±  5199.164  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        46103.790              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        46640.660              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49190.797              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49190.797              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49190.797              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49190.797              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49190.797              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49190.797              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   155    325.623 ±     0.812  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          322.961              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          325.059              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          326.631              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          328.729              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          347.624              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          352.322              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          352.322              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample          352.322              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample   115    441.792 ±     2.137  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          435.683              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          441.450              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          445.645              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          446.693              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          495.830              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          504.889              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          504.889              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample          504.889              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    91    562.717 ±    12.699  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          541.065              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          546.308              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          654.311              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          655.779              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          656.409              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          656.409              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          656.409              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample          656.409              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample    10    913.729 ±    20.632  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          895.484              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          910.688              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          938.266              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          939.524              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          939.524              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          939.524              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          939.524              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          939.524              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5   2468.767 ±   275.890  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2415.919              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2445.279              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2592.080              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2592.080              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2592.080              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2592.080              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2592.080              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample         2592.080              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    20   3258.974 ±    29.683  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3233.808              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3250.586              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3321.050              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3361.735              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3363.832              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3363.832              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3363.832              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample         3363.832              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    15   4393.953 ±    76.936  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4311.745              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4378.853              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4497.972              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample         4638.900              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10   6273.840 ±   173.733  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6073.352              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6308.233              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6397.991              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6400.508              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6400.508              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6400.508              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6400.508              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample         6400.508              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   9163.715 ±   554.609  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9009.365              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9160.360              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9378.464              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9378.464              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9378.464              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9378.464              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9378.464              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         9378.464              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5  28098.481 ± 25116.496  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        24628.953              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        25367.151              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        39728.447              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        39728.447              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        39728.447              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        39728.447              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        39728.447              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample        39728.447              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10   6754.507 ±   250.086  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6635.389              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         6689.915              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7109.345              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7121.928              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7121.928              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7121.928              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7121.928              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample         7121.928              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     6   9918.131 ±  1898.117  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         8740.930              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10259.268              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10468.983              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10468.983              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10468.983              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10468.983              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10468.983              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample        10468.983              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5  13230.513 ±  1319.707  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        12901.679              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13203.669              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13706.985              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13706.985              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13706.985              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13706.985              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13706.985              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample        13706.985              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5  18206.635 ±  2084.588  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        17582.522              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18018.730              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18790.482              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18790.482              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18790.482              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18790.482              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18790.482              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample        18790.482              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5  49808.199 ±  5088.165  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        48653.926              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        49660.559              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        52009.370              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        52009.370              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        52009.370              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        52009.370              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        52009.370              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        52009.370              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample   850     58.583 ±     0.111  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           56.885              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           58.458              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           59.638              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           59.900              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           61.045              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           71.434              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           71.434              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           71.434              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   816     61.100 ±     0.155  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           58.196              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           61.080              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           62.718              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           63.242              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           64.137              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           72.745              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           72.745              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           72.745              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   844     59.000 ±     0.108  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           56.295              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           59.113              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           60.031              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           60.424              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           60.883              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           67.502              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           67.502              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           67.502              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample    90    582.810 ±     3.148  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          566.231              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          583.008              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          591.292              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          596.430              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          614.466              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          614.466              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          614.466              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          614.466              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    89    582.266 ±     4.079  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          566.231              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          581.960              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          591.397              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          595.067              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          658.506              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          658.506              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          658.506              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          658.506              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    88    584.748 ±     3.426  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          560.988              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          583.008              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          598.737              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          602.931              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          611.320              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          611.320              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          611.320              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          611.320              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    45   1153.434 ±    11.792  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1121.976              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1149.239              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1183.213              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1200.200              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1220.542              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1220.542              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1220.542              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1220.542              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    45   1192.254 ±    15.639  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1151.336              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1182.794              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1231.028              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1274.859              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1281.360              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1281.360              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1281.360              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1281.360              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    45   1184.285 ±    17.566  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1128.268              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1176.502              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1241.514              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1249.903              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1258.291              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1258.291              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1258.291              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1258.291              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample   840     59.316 ±     0.101  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           56.885              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           59.245              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           60.228              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           60.686              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           62.259              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           66.650              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           66.650              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           66.650              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   848     58.736 ±     0.109  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           56.361              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           58.786              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           59.769              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           60.133              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           61.669              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           65.208              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           65.208              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           65.208              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   498    100.305 ±     0.301  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           98.828              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           99.615              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          104.202              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          104.464              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          104.859              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          122.683              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          122.683              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample          122.683              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample    89    584.799 ±     2.491  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          571.474              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          584.057              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          594.543              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          599.261              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          606.077              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          606.077              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          606.077              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          606.077              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    90    558.157 ±     1.627  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          545.260              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          557.842              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          564.029              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          566.598              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          572.522              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          572.522              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          572.522              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample          572.522              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    55    974.871 ±    11.750  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          959.447              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          966.787              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1003.487              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1028.234              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1101.005              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1101.005              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1101.005              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1101.005              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    45   1167.321 ±    13.194  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1130.365              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1157.628              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1210.896              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1223.059              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1231.028              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1231.028              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1231.028              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample         1231.028              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    45   1179.019 ±     5.529  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1168.114              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1178.599              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1187.407              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1194.747              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1237.320              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1237.320              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1237.320              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         1237.320              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    30   1921.620 ±     4.016  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1914.700              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1918.894              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1933.364              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1936.615              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1937.768              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1937.768              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1937.768              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample         1937.768              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    18   3340.297 ±   249.805  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3082.813              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3273.654              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3876.795              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3925.869              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3925.869              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3925.869              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3925.869              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3925.869              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  38131.257 ±  3108.476  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        37513.855              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        37782.290              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39460.012              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39460.012              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39460.012              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39460.012              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39460.012              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39460.012              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    15   3544.746 ±   131.505  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3376.415              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3552.575              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3763.968              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3766.485              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3766.485              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3766.485              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3766.485              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         3766.485              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  38493.644 ±  2516.039  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        37916.508              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        38252.052              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39527.121              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39527.121              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39527.121              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39527.121              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39527.121              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        39527.121              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    35   1498.625 ±     5.117  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1482.686              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1501.561              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1505.755              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1509.111              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1522.532              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1522.532              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1522.532              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1522.532              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  18065.706 ±    70.769  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18052.284              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18052.284              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18085.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18085.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18085.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18085.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18085.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18085.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    45   1176.316 ±     8.164  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1151.336              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1172.308              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1211.315              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1217.816              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1220.542              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1220.542              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1220.542              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1220.542              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  11938.667 ±   260.824  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        11844.714              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        11962.155              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12012.487              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12012.487              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12012.487              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12012.487              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12012.487              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12012.487              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    30   1691.213 ±     6.548  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1673.527              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1691.353              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1702.678              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1710.437              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1719.665              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1719.665              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1719.665              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample         1719.665              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  18421.383 ±    91.363  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18387.829              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18421.383              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18454.938              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18454.938              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18454.938              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18454.938              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18454.938              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        18454.938              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    69    735.143 ±     7.758  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          717.226              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          725.615              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          765.460              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          768.082              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          768.606              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          768.606              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          768.606              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          768.606              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5  11999.065 ±  1435.439  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        11693.720              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        11744.051              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12415.140              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12415.140              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12415.140              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12415.140              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12415.140              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample        12415.140              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   215    235.210 ±     0.858  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          230.687              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          234.619              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          237.240              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          237.765              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          257.688              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          259.785              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          259.785              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          259.785              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   3162.715 ±    67.090  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3040.870              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3170.894              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3250.166              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3342.231              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3347.055              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3347.055              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3347.055              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3347.055              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   240    209.051 ±     0.860  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          202.899              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          208.929              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          211.812              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          212.848              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          233.295              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          236.716              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          236.716              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          236.716              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   2720.006 ±    79.948  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2604.663              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2694.840              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2876.873              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2929.092              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2931.818              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2931.818              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2931.818              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2931.818              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   230    217.821 ±     0.770  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          211.812              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          218.235              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          219.939              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          220.463              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          239.356              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          245.105              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          245.105              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          245.105              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   2797.810 ±    66.052  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2709.520              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2782.921              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2960.340              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3001.444              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3003.122              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3003.122              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3003.122              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3003.122              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   250    202.164 ±     0.174  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          201.064              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          202.113              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          202.637              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          203.162              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          206.302              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          207.880              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          207.880              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          207.880              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    25   2012.595 ±     5.677  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1994.392              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2011.169              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2024.591              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2030.253              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2032.140              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2032.140              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2032.140              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2032.140              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  17971.754 ±  4761.033  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        17280.532              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        17381.196              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20166.214              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20166.214              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20166.214              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20166.214              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20166.214              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        20166.214              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   179    284.639 ±     5.030  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          277.873              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          282.067              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          286.786              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          292.028              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          354.209              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          546.308              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          546.308              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          546.308              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   2733.008 ±    26.982  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2680.160              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2736.783              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2783.760              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2789.002              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2789.212              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2789.212              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2789.212              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         2789.212              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  27111.981 ±  1084.870  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        26776.437              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27078.427              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        27413.971              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   149    341.748 ±     0.812  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          337.641              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          341.836              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          346.030              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          347.079              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          351.011              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          351.273              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          351.273              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          351.273              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15   3380.609 ±    22.420  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3334.472              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3380.609              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3409.969              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3409.969              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3409.969              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3409.969              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3409.969              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3409.969              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  33312.840 ±  1807.501  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        32547.799              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        33520.878              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        33688.650              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        33688.650              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        33688.650              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        33688.650              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        33688.650              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        33688.650              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   165    307.798 ±     0.405  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          305.136              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          307.757              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          309.854              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          310.745              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          313.535              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          314.573              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          314.573              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          314.573              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    20   3059.116 ±    15.465  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3032.482              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3053.453              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3090.783              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3099.171              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3099.591              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3099.591              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3099.591              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         3099.591              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  31098.248 ±   191.644  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        31037.850              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        31104.958              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        31172.067              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        31172.067              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        31172.067              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        31172.067              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        31172.067              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        31172.067              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   562     88.823 ±     0.326  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           84.673              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           89.260              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           91.488              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           92.013              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           93.600              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.843              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.843              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.843              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    40   1371.747 ±    18.491  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1319.109              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1366.295              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1417.465              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1427.846              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1444.938              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1444.938              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1444.938              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1444.938              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  20401.095 ± 13601.673  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18589.155              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18991.809              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        26709.328              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        26709.328              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        26709.328              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        26709.328              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        26709.328              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        26709.328              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   585     83.947 ±     0.237  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           79.692              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           84.279              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           85.590              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           85.983              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           88.809              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           96.207              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           96.207              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           96.207              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    40   1345.166 ±    13.885  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1323.303              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1337.983              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1374.054              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1423.337              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1428.161              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1428.161              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1428.161              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1428.161              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  18065.706 ±   864.813  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        17884.512              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18018.730              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18454.938              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18454.938              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18454.938              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18454.938              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18454.938              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18454.938              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   497     99.566 ±     0.328  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           97.124              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           99.090              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          101.319              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          102.236              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          107.888              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          132.776              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          132.776              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample          132.776              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    35   1483.166 ±    16.110  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1447.035              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1474.298              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1527.146              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1538.471              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1560.281              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1560.281              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1560.281              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample         1560.281              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5  18689.819 ±   492.002  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18555.601              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18622.710              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18857.591              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18857.591              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18857.591              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18857.591              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18857.591              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample        18857.591              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1753     28.434 ±     0.037  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           27.460              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           28.508              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           28.836              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           29.164              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           29.721              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           33.989              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           35.521              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           35.521              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   186    272.341 ±     1.026  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          264.765              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          272.630              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          278.397              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          278.921              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          280.562              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          281.018              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          281.018              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          281.018              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    20   2644.089 ±    37.356  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2579.497              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2667.577              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2699.035              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2709.101              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2709.520              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2709.520              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2709.520              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         2709.520              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1447     34.000 ±     0.070  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           32.539              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           33.751              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           34.865              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           35.258              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           36.144              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           44.280              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           48.038              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           48.038              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   160    316.303 ±     1.275  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          311.427              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          314.049              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          324.534              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          325.583              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          337.846              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          338.166              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          338.166              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          338.166              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    20   3182.848 ±    23.642  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3149.922              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3172.991              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3237.164              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3241.987              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3242.197              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3242.197              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3242.197              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3242.197              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1359     36.235 ±     0.071  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           34.865              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           36.110              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           37.356              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           37.749              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           38.535              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           41.109              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           41.746              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           41.746              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   141    357.594 ±     1.136  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          352.322              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          356.516              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          363.751              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          365.429              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          370.179              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          371.720              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          371.720              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          371.720              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15   3532.443 ±    27.961  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3489.661              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3527.410              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3578.580              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3586.130              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3586.130              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3586.130              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3586.130              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         3586.130              ms/op

Benchmark result is saved to jmh-result.csv

# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 02:40:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1987308190 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1987308190() {
        this(4);
    }
    public KeyValueMap_1987308190(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1987308190 aggregation_state_map = new KeyValueMap_1987308190();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

436.436 ±(99.9%) 85.377 ms/op
# Warmup Iteration   2: 403.807 ±(99.9%) 6.905 ms/op
# Warmup Iteration   3: 400.514 ±(99.9%) 2.065 ms/op
# Warmup Iteration   4: 399.864 ±(99.9%) 2.135 ms/op
# Warmup Iteration   5: 399.214 ±(99.9%) 1.015 ms/op
Iteration   1: 399.256 ±(99.9%) 0.908 ms/op
                 executeQuery·p0.00:   397.410 ms/op
                 executeQuery·p0.50:   398.983 ms/op
                 executeQuery·p0.90:   400.766 ms/op
                 executeQuery·p0.95:   402.548 ms/op
                 executeQuery·p0.99:   403.177 ms/op
                 executeQuery·p0.999:  403.177 ms/op
                 executeQuery·p0.9999: 403.177 ms/op
                 executeQuery·p1.00:   403.177 ms/op

Iteration   2: 399.235 ±(99.9%) 0.842 ms/op
                 executeQuery·p0.00:   397.410 ms/op
                 executeQuery·p0.50:   398.983 ms/op
                 executeQuery·p0.90:   400.975 ms/op
                 executeQuery·p0.95:   401.972 ms/op
                 executeQuery·p0.99:   402.129 ms/op
                 executeQuery·p0.999:  402.129 ms/op
                 executeQuery·p0.9999: 402.129 ms/op
                 executeQuery·p1.00:   402.129 ms/op

Iteration   3: 397.430 ±(99.9%) 0.954 ms/op
                 executeQuery·p0.00:   395.313 ms/op
                 executeQuery·p0.50:   397.672 ms/op
                 executeQuery·p0.90:   399.140 ms/op
                 executeQuery·p0.95:   399.507 ms/op
                 executeQuery·p0.99:   399.507 ms/op
                 executeQuery·p0.999:  399.507 ms/op
                 executeQuery·p0.9999: 399.507 ms/op
                 executeQuery·p1.00:   399.507 ms/op

Iteration   4: 397.410 ±(99.9%) 1.056 ms/op
                 executeQuery·p0.00:   395.837 ms/op
                 executeQuery·p0.50:   396.886 ms/op
                 executeQuery·p0.90:   399.298 ms/op
                 executeQuery·p0.95:   400.373 ms/op
                 executeQuery·p0.99:   400.556 ms/op
                 executeQuery·p0.999:  400.556 ms/op
                 executeQuery·p0.9999: 400.556 ms/op
                 executeQuery·p1.00:   400.556 ms/op

Iteration   5: 399.298 ±(99.9%) 0.810 ms/op
                 executeQuery·p0.00:   397.410 ms/op
                 executeQuery·p0.50:   398.983 ms/op
                 executeQuery·p0.90:   400.556 ms/op
                 executeQuery·p0.95:   402.024 ms/op
                 executeQuery·p0.99:   402.653 ms/op
                 executeQuery·p0.999:  402.653 ms/op
                 executeQuery·p0.9999: 402.653 ms/op
                 executeQuery·p1.00:   402.653 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 127
  mean =    398.508 ±(99.9%) 0.456 ms/op

  Histogram, ms/op:
    [395.000, 395.500) = 3 
    [395.500, 396.000) = 10 
    [396.000, 396.500) = 5 
    [396.500, 397.000) = 5 
    [397.000, 397.500) = 8 
    [397.500, 398.000) = 14 
    [398.000, 398.500) = 22 
    [398.500, 399.000) = 23 
    [399.000, 399.500) = 0 
    [399.500, 400.000) = 17 
    [400.000, 400.500) = 7 
    [400.500, 401.000) = 8 
    [401.000, 401.500) = 1 
    [401.500, 402.000) = 1 
    [402.000, 402.500) = 1 
    [402.500, 403.000) = 1 
    [403.000, 403.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    395.313 ms/op
     p(50.0000) =    398.459 ms/op
     p(90.0000) =    400.556 ms/op
     p(95.0000) =    400.556 ms/op
     p(99.0000) =    403.031 ms/op
     p(99.9000) =    403.177 ms/op
     p(99.9900) =    403.177 ms/op
     p(99.9990) =    403.177 ms/op
     p(99.9999) =    403.177 ms/op
    p(100.0000) =    403.177 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 1.04% complete, ETA 02:43:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

572.930 ±(99.9%) 68.225 ms/op
# Warmup Iteration   2: 549.895 ±(99.9%) 3.957 ms/op
# Warmup Iteration   3: 546.143 ±(99.9%) 1.612 ms/op
# Warmup Iteration   4: 566.814 ±(99.9%) 80.349 ms/op
# Warmup Iteration   5: 546.915 ±(99.9%) 2.922 ms/op
Iteration   1: 546.087 ±(99.9%) 2.365 ms/op
                 executeQuery·p0.00:   542.114 ms/op
                 executeQuery·p0.50:   546.308 ms/op
                 executeQuery·p0.90:   551.551 ms/op
                 executeQuery·p0.95:   552.600 ms/op
                 executeQuery·p0.99:   552.600 ms/op
                 executeQuery·p0.999:  552.600 ms/op
                 executeQuery·p0.9999: 552.600 ms/op
                 executeQuery·p1.00:   552.600 ms/op

Iteration   2: 545.591 ±(99.9%) 2.333 ms/op
                 executeQuery·p0.00:   543.162 ms/op
                 executeQuery·p0.50:   544.211 ms/op
                 executeQuery·p0.90:   549.454 ms/op
                 executeQuery·p0.95:   553.648 ms/op
                 executeQuery·p0.99:   553.648 ms/op
                 executeQuery·p0.999:  553.648 ms/op
                 executeQuery·p0.9999: 553.648 ms/op
                 executeQuery·p1.00:   553.648 ms/op

Iteration   3: 546.087 ±(99.9%) 2.468 ms/op
                 executeQuery·p0.00:   543.162 ms/op
                 executeQuery·p0.50:   545.260 ms/op
                 executeQuery·p0.90:   551.551 ms/op
                 executeQuery·p0.95:   551.551 ms/op
                 executeQuery·p0.99:   551.551 ms/op
                 executeQuery·p0.999:  551.551 ms/op
                 executeQuery·p0.9999: 551.551 ms/op
                 executeQuery·p1.00:   551.551 ms/op

Iteration   4: 543.825 ±(99.9%) 1.728 ms/op
                 executeQuery·p0.00:   541.065 ms/op
                 executeQuery·p0.50:   544.211 ms/op
                 executeQuery·p0.90:   546.308 ms/op
                 executeQuery·p0.95:   547.357 ms/op
                 executeQuery·p0.99:   547.357 ms/op
                 executeQuery·p0.999:  547.357 ms/op
                 executeQuery·p0.9999: 547.357 ms/op
                 executeQuery·p1.00:   547.357 ms/op

Iteration   5: 543.769 ±(99.9%) 2.296 ms/op
                 executeQuery·p0.00:   541.065 ms/op
                 executeQuery·p0.50:   543.162 ms/op
                 executeQuery·p0.90:   549.454 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 95
  mean =    545.072 ±(99.9%) 0.931 ms/op

  Histogram, ms/op:
    [540.000, 541.250) = 5 
    [541.250, 542.500) = 10 
    [542.500, 543.750) = 14 
    [543.750, 545.000) = 22 
    [545.000, 546.250) = 13 
    [546.250, 547.500) = 21 
    [547.500, 548.750) = 1 
    [548.750, 550.000) = 2 
    [550.000, 551.250) = 1 
    [551.250, 552.500) = 4 
    [552.500, 553.750) = 2 
    [553.750, 555.000) = 0 
    [555.000, 556.250) = 0 
    [556.250, 557.500) = 0 
    [557.500, 558.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    541.065 ms/op
     p(50.0000) =    544.211 ms/op
     p(90.0000) =    548.825 ms/op
     p(95.0000) =    551.551 ms/op
     p(99.0000) =    553.648 ms/op
     p(99.9000) =    553.648 ms/op
     p(99.9900) =    553.648 ms/op
     p(99.9990) =    553.648 ms/op
     p(99.9999) =    553.648 ms/op
    p(100.0000) =    553.648 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 2.08% complete, ETA 02:44:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

754.600 ±(99.9%) 39.288 ms/op
# Warmup Iteration   2: 741.643 ±(99.9%) 7.502 ms/op
# Warmup Iteration   3: 737.449 ±(99.9%) 5.134 ms/op
# Warmup Iteration   4: 735.351 ±(99.9%) 4.485 ms/op
# Warmup Iteration   5: 736.700 ±(99.9%) 8.112 ms/op
Iteration   1: 740.594 ±(99.9%) 7.879 ms/op
                 executeQuery·p0.00:   729.809 ms/op
                 executeQuery·p0.50:   740.295 ms/op
                 executeQuery·p0.90:   753.926 ms/op
                 executeQuery·p0.95:   753.926 ms/op
                 executeQuery·p0.99:   753.926 ms/op
                 executeQuery·p0.999:  753.926 ms/op
                 executeQuery·p0.9999: 753.926 ms/op
                 executeQuery·p1.00:   753.926 ms/op

Iteration   2: 742.167 ±(99.9%) 7.498 ms/op
                 executeQuery·p0.00:   730.857 ms/op
                 executeQuery·p0.50:   740.295 ms/op
                 executeQuery·p0.90:   751.829 ms/op
                 executeQuery·p0.95:   751.829 ms/op
                 executeQuery·p0.99:   751.829 ms/op
                 executeQuery·p0.999:  751.829 ms/op
                 executeQuery·p0.9999: 751.829 ms/op
                 executeQuery·p1.00:   751.829 ms/op

Iteration   3: 740.969 ±(99.9%) 9.903 ms/op
                 executeQuery·p0.00:   728.760 ms/op
                 executeQuery·p0.50:   739.246 ms/op
                 executeQuery·p0.90:   753.926 ms/op
                 executeQuery·p0.95:   753.926 ms/op
                 executeQuery·p0.99:   753.926 ms/op
                 executeQuery·p0.999:  753.926 ms/op
                 executeQuery·p0.9999: 753.926 ms/op
                 executeQuery·p1.00:   753.926 ms/op

Iteration   4: 742.017 ±(99.9%) 8.537 ms/op
                 executeQuery·p0.00:   731.906 ms/op
                 executeQuery·p0.50:   739.770 ms/op
                 executeQuery·p0.90:   753.402 ms/op
                 executeQuery·p0.95:   753.926 ms/op
                 executeQuery·p0.99:   753.926 ms/op
                 executeQuery·p0.999:  753.926 ms/op
                 executeQuery·p0.9999: 753.926 ms/op
                 executeQuery·p1.00:   753.926 ms/op

Iteration   5: 742.242 ±(99.9%) 7.493 ms/op
                 executeQuery·p0.00:   730.857 ms/op
                 executeQuery·p0.50:   741.343 ms/op
                 executeQuery·p0.90:   753.402 ms/op
                 executeQuery·p0.95:   753.926 ms/op
                 executeQuery·p0.99:   753.926 ms/op
                 executeQuery·p0.999:  753.926 ms/op
                 executeQuery·p0.9999: 753.926 ms/op
                 executeQuery·p1.00:   753.926 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 70
  mean =    741.598 ±(99.9%) 2.951 ms/op

  Histogram, ms/op:
    [720.000, 722.500) = 0 
    [722.500, 725.000) = 0 
    [725.000, 727.500) = 0 
    [727.500, 730.000) = 2 
    [730.000, 732.500) = 6 
    [732.500, 735.000) = 2 
    [735.000, 737.500) = 9 
    [737.500, 740.000) = 12 
    [740.000, 742.500) = 19 
    [742.500, 745.000) = 2 
    [745.000, 747.500) = 1 
    [747.500, 750.000) = 0 
    [750.000, 752.500) = 8 
    [752.500, 755.000) = 9 
    [755.000, 757.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    728.760 ms/op
     p(50.0000) =    740.295 ms/op
     p(90.0000) =    752.878 ms/op
     p(95.0000) =    753.926 ms/op
     p(99.0000) =    753.926 ms/op
     p(99.9000) =    753.926 ms/op
     p(99.9900) =    753.926 ms/op
     p(99.9990) =    753.926 ms/op
     p(99.9999) =    753.926 ms/op
    p(100.0000) =    753.926 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 3.13% complete, ETA 02:43:45
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3254.780 ms/op
# Warmup Iteration   2: 2814.378 ms/op
# Warmup Iteration   3: 2294.284 ms/op
# Warmup Iteration   4: 2478.834 ms/op
# Warmup Iteration   5: 2449.474 ms/op
Iteration   1: 2503.999 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2503.999 ms/op
                 executeQuery·p0.90:   2503.999 ms/op
                 executeQuery·p0.95:   2503.999 ms/op
                 executeQuery·p0.99:   2503.999 ms/op
                 executeQuery·p0.999:  2503.999 ms/op
                 executeQuery·p0.9999: 2503.999 ms/op
                 executeQuery·p1.00:   2503.999 ms/op

Iteration   2: 2512.388 ms/op
                 executeQuery·p0.00:   2512.388 ms/op
                 executeQuery·p0.50:   2512.388 ms/op
                 executeQuery·p0.90:   2512.388 ms/op
                 executeQuery·p0.95:   2512.388 ms/op
                 executeQuery·p0.99:   2512.388 ms/op
                 executeQuery·p0.999:  2512.388 ms/op
                 executeQuery·p0.9999: 2512.388 ms/op
                 executeQuery·p1.00:   2512.388 ms/op

Iteration   3: 2478.834 ms/op
                 executeQuery·p0.00:   2478.834 ms/op
                 executeQuery·p0.50:   2478.834 ms/op
                 executeQuery·p0.90:   2478.834 ms/op
                 executeQuery·p0.95:   2478.834 ms/op
                 executeQuery·p0.99:   2478.834 ms/op
                 executeQuery·p0.999:  2478.834 ms/op
                 executeQuery·p0.9999: 2478.834 ms/op
                 executeQuery·p1.00:   2478.834 ms/op

Iteration   4: 2449.474 ms/op
                 executeQuery·p0.00:   2449.474 ms/op
                 executeQuery·p0.50:   2449.474 ms/op
                 executeQuery·p0.90:   2449.474 ms/op
                 executeQuery·p0.95:   2449.474 ms/op
                 executeQuery·p0.99:   2449.474 ms/op
                 executeQuery·p0.999:  2449.474 ms/op
                 executeQuery·p0.9999: 2449.474 ms/op
                 executeQuery·p1.00:   2449.474 ms/op

Iteration   5: 2701.132 ms/op
                 executeQuery·p0.00:   2701.132 ms/op
                 executeQuery·p0.50:   2701.132 ms/op
                 executeQuery·p0.90:   2701.132 ms/op
                 executeQuery·p0.95:   2701.132 ms/op
                 executeQuery·p0.99:   2701.132 ms/op
                 executeQuery·p0.999:  2701.132 ms/op
                 executeQuery·p0.9999: 2701.132 ms/op
                 executeQuery·p1.00:   2701.132 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   2529.165 ±(99.9%) 382.026 ms/op

  Histogram, ms/op:
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 1 
    [2450.000, 2475.000) = 0 
    [2475.000, 2500.000) = 1 
    [2500.000, 2525.000) = 2 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 0 
    [2575.000, 2600.000) = 0 
    [2600.000, 2625.000) = 0 
    [2625.000, 2650.000) = 0 
    [2650.000, 2675.000) = 0 
    [2675.000, 2700.000) = 0 
    [2700.000, 2725.000) = 1 
    [2725.000, 2750.000) = 0 
    [2750.000, 2775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2449.474 ms/op
     p(50.0000) =   2503.999 ms/op
     p(90.0000) =   2701.132 ms/op
     p(95.0000) =   2701.132 ms/op
     p(99.0000) =   2701.132 ms/op
     p(99.9000) =   2701.132 ms/op
     p(99.9900) =   2701.132 ms/op
     p(99.9990) =   2701.132 ms/op
     p(99.9999) =   2701.132 ms/op
    p(100.0000) =   2701.132 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 4.17% complete, ETA 02:51:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_1987308190 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1987308190() {
        this(4);
    }
    public KeyValueMap_1987308190(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1987308190 aggregation_state_map = new KeyValueMap_1987308190();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5393.875 ms/op
# Warmup Iteration   2: 5318.377 ms/op
# Warmup Iteration   3: 5142.217 ms/op
# Warmup Iteration   4: 5209.326 ms/op
# Warmup Iteration   5: 5192.548 ms/op
Iteration   1: 5217.714 ms/op
                 executeQuery·p0.00:   5217.714 ms/op
                 executeQuery·p0.50:   5217.714 ms/op
                 executeQuery·p0.90:   5217.714 ms/op
                 executeQuery·p0.95:   5217.714 ms/op
                 executeQuery·p0.99:   5217.714 ms/op
                 executeQuery·p0.999:  5217.714 ms/op
                 executeQuery·p0.9999: 5217.714 ms/op
                 executeQuery·p1.00:   5217.714 ms/op

Iteration   2: 5242.880 ms/op
                 executeQuery·p0.00:   5242.880 ms/op
                 executeQuery·p0.50:   5242.880 ms/op
                 executeQuery·p0.90:   5242.880 ms/op
                 executeQuery·p0.95:   5242.880 ms/op
                 executeQuery·p0.99:   5242.880 ms/op
                 executeQuery·p0.999:  5242.880 ms/op
                 executeQuery·p0.9999: 5242.880 ms/op
                 executeQuery·p1.00:   5242.880 ms/op

Iteration   3: 5217.714 ms/op
                 executeQuery·p0.00:   5217.714 ms/op
                 executeQuery·p0.50:   5217.714 ms/op
                 executeQuery·p0.90:   5217.714 ms/op
                 executeQuery·p0.95:   5217.714 ms/op
                 executeQuery·p0.99:   5217.714 ms/op
                 executeQuery·p0.999:  5217.714 ms/op
                 executeQuery·p0.9999: 5217.714 ms/op
                 executeQuery·p1.00:   5217.714 ms/op

Iteration   4: 4823.450 ms/op
                 executeQuery·p0.00:   4823.450 ms/op
                 executeQuery·p0.50:   4823.450 ms/op
                 executeQuery·p0.90:   4823.450 ms/op
                 executeQuery·p0.95:   4823.450 ms/op
                 executeQuery·p0.99:   4823.450 ms/op
                 executeQuery·p0.999:  4823.450 ms/op
                 executeQuery·p0.9999: 4823.450 ms/op
                 executeQuery·p1.00:   4823.450 ms/op

Iteration   5: 4848.615 ms/op
                 executeQuery·p0.00:   4848.615 ms/op
                 executeQuery·p0.50:   4848.615 ms/op
                 executeQuery·p0.90:   4848.615 ms/op
                 executeQuery·p0.95:   4848.615 ms/op
                 executeQuery·p0.99:   4848.615 ms/op
                 executeQuery·p0.999:  4848.615 ms/op
                 executeQuery·p0.9999: 4848.615 ms/op
                 executeQuery·p1.00:   4848.615 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =   5070.075 ±(99.9%) 824.354 ms/op

  Histogram, ms/op:
    [4800.000, 4850.000) = 2 
    [4850.000, 4900.000) = 0 
    [4900.000, 4950.000) = 0 
    [4950.000, 5000.000) = 0 
    [5000.000, 5050.000) = 0 
    [5050.000, 5100.000) = 0 
    [5100.000, 5150.000) = 0 
    [5150.000, 5200.000) = 0 
    [5200.000, 5250.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   4823.450 ms/op
     p(50.0000) =   5217.714 ms/op
     p(90.0000) =   5242.880 ms/op
     p(95.0000) =   5242.880 ms/op
     p(99.0000) =   5242.880 ms/op
     p(99.9000) =   5242.880 ms/op
     p(99.9900) =   5242.880 ms/op
     p(99.9990) =   5242.880 ms/op
     p(99.9999) =   5242.880 ms/op
    p(100.0000) =   5242.880 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 5.21% complete, ETA 04:40:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1987308190 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1987308190() {
        this(4);
    }
    public KeyValueMap_1987308190(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1987308190 aggregation_state_map = new KeyValueMap_1987308190();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6142.558 ms/op
# Warmup Iteration   2: 3916.082 ±(99.9%) 2140.274 ms/op
# Warmup Iteration   3: 4023.736 ±(99.9%) 192.570 ms/op
# Warmup Iteration   4: 4977.241 ±(99.9%) 29383.705 ms/op
# Warmup Iteration   5: 4002.764 ±(99.9%) 289.699 ms/op
Iteration   1: 4120.205 ±(99.9%) 1088.446 ms/op
                 executeQuery·p0.00:   4051.698 ms/op
                 executeQuery·p0.50:   4148.167 ms/op
                 executeQuery·p0.90:   4160.750 ms/op
                 executeQuery·p0.95:   4160.750 ms/op
                 executeQuery·p0.99:   4160.750 ms/op
                 executeQuery·p0.999:  4160.750 ms/op
                 executeQuery·p0.9999: 4160.750 ms/op
                 executeQuery·p1.00:   4160.750 ms/op

Iteration   2: 4013.949 ±(99.9%) 1334.167 ms/op
                 executeQuery·p0.00:   3963.617 ms/op
                 executeQuery·p0.50:   3980.394 ms/op
                 executeQuery·p0.90:   4097.835 ms/op
                 executeQuery·p0.95:   4097.835 ms/op
                 executeQuery·p0.99:   4097.835 ms/op
                 executeQuery·p0.999:  4097.835 ms/op
                 executeQuery·p0.9999: 4097.835 ms/op
                 executeQuery·p1.00:   4097.835 ms/op

Iteration   3: 3999.968 ±(99.9%) 842.876 ms/op
                 executeQuery·p0.00:   3955.229 ms/op
                 executeQuery·p0.50:   3997.172 ms/op
                 executeQuery·p0.90:   4047.503 ms/op
                 executeQuery·p0.95:   4047.503 ms/op
                 executeQuery·p0.99:   4047.503 ms/op
                 executeQuery·p0.999:  4047.503 ms/op
                 executeQuery·p0.9999: 4047.503 ms/op
                 executeQuery·p1.00:   4047.503 ms/op

Iteration   4: 3969.210 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   3959.423 ms/op
                 executeQuery·p0.50:   3959.423 ms/op
                 executeQuery·p0.90:   3988.783 ms/op
                 executeQuery·p0.95:   3988.783 ms/op
                 executeQuery·p0.99:   3988.783 ms/op
                 executeQuery·p0.999:  3988.783 ms/op
                 executeQuery·p0.9999: 3988.783 ms/op
                 executeQuery·p1.00:   3988.783 ms/op

Iteration   5: 3981.793 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   3976.200 ms/op
                 executeQuery·p0.50:   3980.394 ms/op
                 executeQuery·p0.90:   3988.783 ms/op
                 executeQuery·p0.95:   3988.783 ms/op
                 executeQuery·p0.99:   3988.783 ms/op
                 executeQuery·p0.999:  3988.783 ms/op
                 executeQuery·p0.9999: 3988.783 ms/op
                 executeQuery·p1.00:   3988.783 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4017.025 ±(99.9%) 73.493 ms/op

  Histogram, ms/op:
    [3900.000, 3925.000) = 0 
    [3925.000, 3950.000) = 0 
    [3950.000, 3975.000) = 4 
    [3975.000, 4000.000) = 6 
    [4000.000, 4025.000) = 0 
    [4025.000, 4050.000) = 1 
    [4050.000, 4075.000) = 1 
    [4075.000, 4100.000) = 1 
    [4100.000, 4125.000) = 0 
    [4125.000, 4150.000) = 1 
    [4150.000, 4175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3955.229 ms/op
     p(50.0000) =   3988.783 ms/op
     p(90.0000) =   4153.200 ms/op
     p(95.0000) =   4160.750 ms/op
     p(99.0000) =   4160.750 ms/op
     p(99.9000) =   4160.750 ms/op
     p(99.9900) =   4160.750 ms/op
     p(99.9990) =   4160.750 ms/op
     p(99.9999) =   4160.750 ms/op
    p(100.0000) =   4160.750 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 6.25% complete, ETA 04:22:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6777.995 ms/op
# Warmup Iteration   2: 7201.620 ms/op
# Warmup Iteration   3: 5242.880 ms/op
# Warmup Iteration   4: 5226.103 ms/op
# Warmup Iteration   5: 5230.297 ms/op
Iteration   1: 5226.103 ms/op
                 executeQuery·p0.00:   5217.714 ms/op
                 executeQuery·p0.50:   5226.103 ms/op
                 executeQuery·p0.90:   5234.491 ms/op
                 executeQuery·p0.95:   5234.491 ms/op
                 executeQuery·p0.99:   5234.491 ms/op
                 executeQuery·p0.999:  5234.491 ms/op
                 executeQuery·p0.9999: 5234.491 ms/op
                 executeQuery·p1.00:   5234.491 ms/op

Iteration   2: 5230.297 ms/op
                 executeQuery·p0.00:   5226.103 ms/op
                 executeQuery·p0.50:   5230.297 ms/op
                 executeQuery·p0.90:   5234.491 ms/op
                 executeQuery·p0.95:   5234.491 ms/op
                 executeQuery·p0.99:   5234.491 ms/op
                 executeQuery·p0.999:  5234.491 ms/op
                 executeQuery·p0.9999: 5234.491 ms/op
                 executeQuery·p1.00:   5234.491 ms/op

Iteration   3: 5230.297 ms/op
                 executeQuery·p0.00:   5226.103 ms/op
                 executeQuery·p0.50:   5230.297 ms/op
                 executeQuery·p0.90:   5234.491 ms/op
                 executeQuery·p0.95:   5234.491 ms/op
                 executeQuery·p0.99:   5234.491 ms/op
                 executeQuery·p0.999:  5234.491 ms/op
                 executeQuery·p0.9999: 5234.491 ms/op
                 executeQuery·p1.00:   5234.491 ms/op

Iteration   4: 5217.714 ms/op
                 executeQuery·p0.00:   5217.714 ms/op
                 executeQuery·p0.50:   5217.714 ms/op
                 executeQuery·p0.90:   5217.714 ms/op
                 executeQuery·p0.95:   5217.714 ms/op
                 executeQuery·p0.99:   5217.714 ms/op
                 executeQuery·p0.999:  5217.714 ms/op
                 executeQuery·p0.9999: 5217.714 ms/op
                 executeQuery·p1.00:   5217.714 ms/op

Iteration   5: 5221.908 ms/op
                 executeQuery·p0.00:   5209.326 ms/op
                 executeQuery·p0.50:   5221.908 ms/op
                 executeQuery·p0.90:   5234.491 ms/op
                 executeQuery·p0.95:   5234.491 ms/op
                 executeQuery·p0.99:   5234.491 ms/op
                 executeQuery·p0.999:  5234.491 ms/op
                 executeQuery·p0.9999: 5234.491 ms/op
                 executeQuery·p1.00:   5234.491 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   5225.264 ±(99.9%) 13.957 ms/op

  Histogram, ms/op:
    [5200.000, 5202.500) = 0 
    [5202.500, 5205.000) = 0 
    [5205.000, 5207.500) = 0 
    [5207.500, 5210.000) = 1 
    [5210.000, 5212.500) = 0 
    [5212.500, 5215.000) = 0 
    [5215.000, 5217.500) = 0 
    [5217.500, 5220.000) = 3 
    [5220.000, 5222.500) = 0 
    [5222.500, 5225.000) = 0 
    [5225.000, 5227.500) = 2 
    [5227.500, 5230.000) = 0 
    [5230.000, 5232.500) = 0 
    [5232.500, 5235.000) = 4 
    [5235.000, 5237.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5209.326 ms/op
     p(50.0000) =   5226.103 ms/op
     p(90.0000) =   5234.491 ms/op
     p(95.0000) =   5234.491 ms/op
     p(99.0000) =   5234.491 ms/op
     p(99.9000) =   5234.491 ms/op
     p(99.9900) =   5234.491 ms/op
     p(99.9990) =   5234.491 ms/op
     p(99.9999) =   5234.491 ms/op
    p(100.0000) =   5234.491 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 7.29% complete, ETA 04:06:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7759.462 ms/op
# Warmup Iteration   2: 7285.506 ms/op
# Warmup Iteration   3: 7381.975 ms/op
# Warmup Iteration   4: 7461.667 ms/op
# Warmup Iteration   5: 7415.529 ms/op
Iteration   1: 7394.558 ms/op
                 executeQuery·p0.00:   7323.255 ms/op
                 executeQuery·p0.50:   7394.558 ms/op
                 executeQuery·p0.90:   7465.861 ms/op
                 executeQuery·p0.95:   7465.861 ms/op
                 executeQuery·p0.99:   7465.861 ms/op
                 executeQuery·p0.999:  7465.861 ms/op
                 executeQuery·p0.9999: 7465.861 ms/op
                 executeQuery·p1.00:   7465.861 ms/op

Iteration   2: 7457.473 ms/op
                 executeQuery·p0.00:   7457.473 ms/op
                 executeQuery·p0.50:   7457.473 ms/op
                 executeQuery·p0.90:   7457.473 ms/op
                 executeQuery·p0.95:   7457.473 ms/op
                 executeQuery·p0.99:   7457.473 ms/op
                 executeQuery·p0.999:  7457.473 ms/op
                 executeQuery·p0.9999: 7457.473 ms/op
                 executeQuery·p1.00:   7457.473 ms/op

Iteration   3: 7444.890 ms/op
                 executeQuery·p0.00:   7440.695 ms/op
                 executeQuery·p0.50:   7444.890 ms/op
                 executeQuery·p0.90:   7449.084 ms/op
                 executeQuery·p0.95:   7449.084 ms/op
                 executeQuery·p0.99:   7449.084 ms/op
                 executeQuery·p0.999:  7449.084 ms/op
                 executeQuery·p0.9999: 7449.084 ms/op
                 executeQuery·p1.00:   7449.084 ms/op

Iteration   4: 7453.278 ms/op
                 executeQuery·p0.00:   7449.084 ms/op
                 executeQuery·p0.50:   7453.278 ms/op
                 executeQuery·p0.90:   7457.473 ms/op
                 executeQuery·p0.95:   7457.473 ms/op
                 executeQuery·p0.99:   7457.473 ms/op
                 executeQuery·p0.999:  7457.473 ms/op
                 executeQuery·p0.9999: 7457.473 ms/op
                 executeQuery·p1.00:   7457.473 ms/op

Iteration   5: 7449.084 ms/op
                 executeQuery·p0.00:   7449.084 ms/op
                 executeQuery·p0.50:   7449.084 ms/op
                 executeQuery·p0.90:   7449.084 ms/op
                 executeQuery·p0.95:   7449.084 ms/op
                 executeQuery·p0.99:   7449.084 ms/op
                 executeQuery·p0.999:  7449.084 ms/op
                 executeQuery·p0.9999: 7449.084 ms/op
                 executeQuery·p1.00:   7449.084 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   7439.856 ±(99.9%) 62.831 ms/op

  Histogram, ms/op:
    [7300.000, 7312.500) = 0 
    [7312.500, 7325.000) = 1 
    [7325.000, 7337.500) = 0 
    [7337.500, 7350.000) = 0 
    [7350.000, 7362.500) = 0 
    [7362.500, 7375.000) = 0 
    [7375.000, 7387.500) = 0 
    [7387.500, 7400.000) = 0 
    [7400.000, 7412.500) = 0 
    [7412.500, 7425.000) = 0 
    [7425.000, 7437.500) = 0 
    [7437.500, 7450.000) = 5 
    [7450.000, 7462.500) = 3 
    [7462.500, 7475.000) = 1 
    [7475.000, 7487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7323.255 ms/op
     p(50.0000) =   7449.084 ms/op
     p(90.0000) =   7465.022 ms/op
     p(95.0000) =   7465.861 ms/op
     p(99.0000) =   7465.861 ms/op
     p(99.9000) =   7465.861 ms/op
     p(99.9900) =   7465.861 ms/op
     p(99.9990) =   7465.861 ms/op
     p(99.9999) =   7465.861 ms/op
    p(100.0000) =   7465.861 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 8.33% complete, ETA 04:00:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

27682.406 ms/op
# Warmup Iteration   2: 25232.933 ms/op
# Warmup Iteration   3: 24394.072 ms/op
# Warmup Iteration   4: 23890.756 ms/op
# Warmup Iteration   5: 24226.300 ms/op
Iteration   1: 23219.667 ms/op
                 executeQuery·p0.00:   23219.667 ms/op
                 executeQuery·p0.50:   23219.667 ms/op
                 executeQuery·p0.90:   23219.667 ms/op
                 executeQuery·p0.95:   23219.667 ms/op
                 executeQuery·p0.99:   23219.667 ms/op
                 executeQuery·p0.999:  23219.667 ms/op
                 executeQuery·p0.9999: 23219.667 ms/op
                 executeQuery·p1.00:   23219.667 ms/op

Iteration   2: 24930.943 ms/op
                 executeQuery·p0.00:   24930.943 ms/op
                 executeQuery·p0.50:   24930.943 ms/op
                 executeQuery·p0.90:   24930.943 ms/op
                 executeQuery·p0.95:   24930.943 ms/op
                 executeQuery·p0.99:   24930.943 ms/op
                 executeQuery·p0.999:  24930.943 ms/op
                 executeQuery·p0.9999: 24930.943 ms/op
                 executeQuery·p1.00:   24930.943 ms/op

Iteration   3: 23957.864 ms/op
                 executeQuery·p0.00:   23957.864 ms/op
                 executeQuery·p0.50:   23957.864 ms/op
                 executeQuery·p0.90:   23957.864 ms/op
                 executeQuery·p0.95:   23957.864 ms/op
                 executeQuery·p0.99:   23957.864 ms/op
                 executeQuery·p0.999:  23957.864 ms/op
                 executeQuery·p0.9999: 23957.864 ms/op
                 executeQuery·p1.00:   23957.864 ms/op

Iteration   4: 22951.231 ms/op
                 executeQuery·p0.00:   22951.231 ms/op
                 executeQuery·p0.50:   22951.231 ms/op
                 executeQuery·p0.90:   22951.231 ms/op
                 executeQuery·p0.95:   22951.231 ms/op
                 executeQuery·p0.99:   22951.231 ms/op
                 executeQuery·p0.999:  22951.231 ms/op
                 executeQuery·p0.9999: 22951.231 ms/op
                 executeQuery·p1.00:   22951.231 ms/op

Iteration   5: 23622.320 ms/op
                 executeQuery·p0.00:   23622.320 ms/op
                 executeQuery·p0.50:   23622.320 ms/op
                 executeQuery·p0.90:   23622.320 ms/op
                 executeQuery·p0.95:   23622.320 ms/op
                 executeQuery·p0.99:   23622.320 ms/op
                 executeQuery·p0.999:  23622.320 ms/op
                 executeQuery·p0.9999: 23622.320 ms/op
                 executeQuery·p1.00:   23622.320 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  23736.405 ±(99.9%) 2965.556 ms/op

  Histogram, ms/op:
    [22000.000, 22250.000) = 0 
    [22250.000, 22500.000) = 0 
    [22500.000, 22750.000) = 0 
    [22750.000, 23000.000) = 1 
    [23000.000, 23250.000) = 1 
    [23250.000, 23500.000) = 0 
    [23500.000, 23750.000) = 1 
    [23750.000, 24000.000) = 1 
    [24000.000, 24250.000) = 0 
    [24250.000, 24500.000) = 0 
    [24500.000, 24750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  22951.231 ms/op
     p(50.0000) =  23622.320 ms/op
     p(90.0000) =  24930.943 ms/op
     p(95.0000) =  24930.943 ms/op
     p(99.0000) =  24930.943 ms/op
     p(99.9000) =  24930.943 ms/op
     p(99.9900) =  24930.943 ms/op
     p(99.9990) =  24930.943 ms/op
     p(99.9999) =  24930.943 ms/op
    p(100.0000) =  24930.943 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 9.38% complete, ETA 04:28:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_1866254795 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1866254795() {
        this(4);
    }
    public KeyValueMap_1866254795(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1866254795 aggregation_state_map = new KeyValueMap_1866254795();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

52546.241 ms/op
# Warmup Iteration   2: 51673.825 ms/op
# Warmup Iteration   3: 48385.491 ms/op
# Warmup Iteration   4: 49056.580 ms/op
# Warmup Iteration   5: 48989.471 ms/op
Iteration   1: 47445.967 ms/op
                 executeQuery·p0.00:   47445.967 ms/op
                 executeQuery·p0.50:   47445.967 ms/op
                 executeQuery·p0.90:   47445.967 ms/op
                 executeQuery·p0.95:   47445.967 ms/op
                 executeQuery·p0.99:   47445.967 ms/op
                 executeQuery·p0.999:  47445.967 ms/op
                 executeQuery·p0.9999: 47445.967 ms/op
                 executeQuery·p1.00:   47445.967 ms/op

Iteration   2: 47513.076 ms/op
                 executeQuery·p0.00:   47513.076 ms/op
                 executeQuery·p0.50:   47513.076 ms/op
                 executeQuery·p0.90:   47513.076 ms/op
                 executeQuery·p0.95:   47513.076 ms/op
                 executeQuery·p0.99:   47513.076 ms/op
                 executeQuery·p0.999:  47513.076 ms/op
                 executeQuery·p0.9999: 47513.076 ms/op
                 executeQuery·p1.00:   47513.076 ms/op

Iteration   3: 48653.926 ms/op
                 executeQuery·p0.00:   48653.926 ms/op
                 executeQuery·p0.50:   48653.926 ms/op
                 executeQuery·p0.90:   48653.926 ms/op
                 executeQuery·p0.95:   48653.926 ms/op
                 executeQuery·p0.99:   48653.926 ms/op
                 executeQuery·p0.999:  48653.926 ms/op
                 executeQuery·p0.9999: 48653.926 ms/op
                 executeQuery·p1.00:   48653.926 ms/op

Iteration   4: 47714.402 ms/op
                 executeQuery·p0.00:   47714.402 ms/op
                 executeQuery·p0.50:   47714.402 ms/op
                 executeQuery·p0.90:   47714.402 ms/op
                 executeQuery·p0.95:   47714.402 ms/op
                 executeQuery·p0.99:   47714.402 ms/op
                 executeQuery·p0.999:  47714.402 ms/op
                 executeQuery·p0.9999: 47714.402 ms/op
                 executeQuery·p1.00:   47714.402 ms/op

Iteration   5: 47647.293 ms/op
                 executeQuery·p0.00:   47647.293 ms/op
                 executeQuery·p0.50:   47647.293 ms/op
                 executeQuery·p0.90:   47647.293 ms/op
                 executeQuery·p0.95:   47647.293 ms/op
                 executeQuery·p0.99:   47647.293 ms/op
                 executeQuery·p0.999:  47647.293 ms/op
                 executeQuery·p0.9999: 47647.293 ms/op
                 executeQuery·p1.00:   47647.293 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  47794.933 ±(99.9%) 1893.653 ms/op

  Histogram, ms/op:
    [47000.000, 47125.000) = 0 
    [47125.000, 47250.000) = 0 
    [47250.000, 47375.000) = 0 
    [47375.000, 47500.000) = 1 
    [47500.000, 47625.000) = 1 
    [47625.000, 47750.000) = 2 
    [47750.000, 47875.000) = 0 
    [47875.000, 48000.000) = 0 
    [48000.000, 48125.000) = 0 
    [48125.000, 48250.000) = 0 
    [48250.000, 48375.000) = 0 
    [48375.000, 48500.000) = 0 
    [48500.000, 48625.000) = 0 
    [48625.000, 48750.000) = 1 
    [48750.000, 48875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  47445.967 ms/op
     p(50.0000) =  47647.293 ms/op
     p(90.0000) =  48653.926 ms/op
     p(95.0000) =  48653.926 ms/op
     p(99.0000) =  48653.926 ms/op
     p(99.9000) =  48653.926 ms/op
     p(99.9900) =  48653.926 ms/op
     p(99.9990) =  48653.926 ms/op
     p(99.9999) =  48653.926 ms/op
    p(100.0000) =  48653.926 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 10.42% complete, ETA 06:08:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16290.677 ms/op
# Warmup Iteration   2: 7939.817 ms/op
# Warmup Iteration   3: 7948.206 ms/op
# Warmup Iteration   4: 7969.178 ms/op
# Warmup Iteration   5: 8468.300 ms/op
Iteration   1: 8157.921 ms/op
                 executeQuery·p0.00:   7969.178 ms/op
                 executeQuery·p0.50:   8157.921 ms/op
                 executeQuery·p0.90:   8346.665 ms/op
                 executeQuery·p0.95:   8346.665 ms/op
                 executeQuery·p0.99:   8346.665 ms/op
                 executeQuery·p0.999:  8346.665 ms/op
                 executeQuery·p0.9999: 8346.665 ms/op
                 executeQuery·p1.00:   8346.665 ms/op

Iteration   2: 7981.761 ms/op
                 executeQuery·p0.00:   7969.178 ms/op
                 executeQuery·p0.50:   7981.761 ms/op
                 executeQuery·p0.90:   7994.343 ms/op
                 executeQuery·p0.95:   7994.343 ms/op
                 executeQuery·p0.99:   7994.343 ms/op
                 executeQuery·p0.999:  7994.343 ms/op
                 executeQuery·p0.9999: 7994.343 ms/op
                 executeQuery·p1.00:   7994.343 ms/op

Iteration   3: 7985.955 ms/op
                 executeQuery·p0.00:   7977.566 ms/op
                 executeQuery·p0.50:   7985.955 ms/op
                 executeQuery·p0.90:   7994.343 ms/op
                 executeQuery·p0.95:   7994.343 ms/op
                 executeQuery·p0.99:   7994.343 ms/op
                 executeQuery·p0.999:  7994.343 ms/op
                 executeQuery·p0.9999: 7994.343 ms/op
                 executeQuery·p1.00:   7994.343 ms/op

Iteration   4: 8292.139 ms/op
                 executeQuery·p0.00:   7994.343 ms/op
                 executeQuery·p0.50:   8292.139 ms/op
                 executeQuery·p0.90:   8589.935 ms/op
                 executeQuery·p0.95:   8589.935 ms/op
                 executeQuery·p0.99:   8589.935 ms/op
                 executeQuery·p0.999:  8589.935 ms/op
                 executeQuery·p0.9999: 8589.935 ms/op
                 executeQuery·p1.00:   8589.935 ms/op

Iteration   5: 7960.789 ms/op
                 executeQuery·p0.00:   7960.789 ms/op
                 executeQuery·p0.50:   7960.789 ms/op
                 executeQuery·p0.90:   7960.789 ms/op
                 executeQuery·p0.95:   7960.789 ms/op
                 executeQuery·p0.99:   7960.789 ms/op
                 executeQuery·p0.999:  7960.789 ms/op
                 executeQuery·p0.9999: 7960.789 ms/op
                 executeQuery·p1.00:   7960.789 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   8075.713 ±(99.9%) 325.215 ms/op

  Histogram, ms/op:
    [7900.000, 7950.000) = 0 
    [7950.000, 8000.000) = 8 
    [8000.000, 8050.000) = 0 
    [8050.000, 8100.000) = 0 
    [8100.000, 8150.000) = 0 
    [8150.000, 8200.000) = 0 
    [8200.000, 8250.000) = 0 
    [8250.000, 8300.000) = 0 
    [8300.000, 8350.000) = 1 
    [8350.000, 8400.000) = 0 
    [8400.000, 8450.000) = 0 
    [8450.000, 8500.000) = 0 
    [8500.000, 8550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7960.789 ms/op
     p(50.0000) =   7985.955 ms/op
     p(90.0000) =   8565.608 ms/op
     p(95.0000) =   8589.935 ms/op
     p(99.0000) =   8589.935 ms/op
     p(99.9000) =   8589.935 ms/op
     p(99.9900) =   8589.935 ms/op
     p(99.9990) =   8589.935 ms/op
     p(99.9999) =   8589.935 ms/op
    p(100.0000) =   8589.935 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 11.46% complete, ETA 05:52:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1866254795 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1866254795() {
        this(4);
    }
    public KeyValueMap_1866254795(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1866254795 aggregation_state_map = new KeyValueMap_1866254795();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16106.127 ms/op
# Warmup Iteration   2: 13807.649 ms/op
# Warmup Iteration   3: 12599.689 ms/op
# Warmup Iteration   4: 13388.218 ms/op
# Warmup Iteration   5: 13052.674 ms/op
Iteration   1: 13153.337 ms/op
                 executeQuery·p0.00:   13153.337 ms/op
                 executeQuery·p0.50:   13153.337 ms/op
                 executeQuery·p0.90:   13153.337 ms/op
                 executeQuery·p0.95:   13153.337 ms/op
                 executeQuery·p0.99:   13153.337 ms/op
                 executeQuery·p0.999:  13153.337 ms/op
                 executeQuery·p0.9999: 13153.337 ms/op
                 executeQuery·p1.00:   13153.337 ms/op

Iteration   2: 13136.560 ms/op
                 executeQuery·p0.00:   13136.560 ms/op
                 executeQuery·p0.50:   13136.560 ms/op
                 executeQuery·p0.90:   13136.560 ms/op
                 executeQuery·p0.95:   13136.560 ms/op
                 executeQuery·p0.99:   13136.560 ms/op
                 executeQuery·p0.999:  13136.560 ms/op
                 executeQuery·p0.9999: 13136.560 ms/op
                 executeQuery·p1.00:   13136.560 ms/op

Iteration   3: 13002.342 ms/op
                 executeQuery·p0.00:   13002.342 ms/op
                 executeQuery·p0.50:   13002.342 ms/op
                 executeQuery·p0.90:   13002.342 ms/op
                 executeQuery·p0.95:   13002.342 ms/op
                 executeQuery·p0.99:   13002.342 ms/op
                 executeQuery·p0.999:  13002.342 ms/op
                 executeQuery·p0.9999: 13002.342 ms/op
                 executeQuery·p1.00:   13002.342 ms/op

Iteration   4: 12985.565 ms/op
                 executeQuery·p0.00:   12985.565 ms/op
                 executeQuery·p0.50:   12985.565 ms/op
                 executeQuery·p0.90:   12985.565 ms/op
                 executeQuery·p0.95:   12985.565 ms/op
                 executeQuery·p0.99:   12985.565 ms/op
                 executeQuery·p0.999:  12985.565 ms/op
                 executeQuery·p0.9999: 12985.565 ms/op
                 executeQuery·p1.00:   12985.565 ms/op

Iteration   5: 13220.446 ms/op
                 executeQuery·p0.00:   13220.446 ms/op
                 executeQuery·p0.50:   13220.446 ms/op
                 executeQuery·p0.90:   13220.446 ms/op
                 executeQuery·p0.95:   13220.446 ms/op
                 executeQuery·p0.99:   13220.446 ms/op
                 executeQuery·p0.999:  13220.446 ms/op
                 executeQuery·p0.9999: 13220.446 ms/op
                 executeQuery·p1.00:   13220.446 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  13099.650 ±(99.9%) 391.369 ms/op

  Histogram, ms/op:
    [12900.000, 12925.000) = 0 
    [12925.000, 12950.000) = 0 
    [12950.000, 12975.000) = 0 
    [12975.000, 13000.000) = 1 
    [13000.000, 13025.000) = 1 
    [13025.000, 13050.000) = 0 
    [13050.000, 13075.000) = 0 
    [13075.000, 13100.000) = 0 
    [13100.000, 13125.000) = 0 
    [13125.000, 13150.000) = 1 
    [13150.000, 13175.000) = 1 
    [13175.000, 13200.000) = 0 
    [13200.000, 13225.000) = 1 
    [13225.000, 13250.000) = 0 
    [13250.000, 13275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12985.565 ms/op
     p(50.0000) =  13136.560 ms/op
     p(90.0000) =  13220.446 ms/op
     p(95.0000) =  13220.446 ms/op
     p(99.0000) =  13220.446 ms/op
     p(99.9000) =  13220.446 ms/op
     p(99.9900) =  13220.446 ms/op
     p(99.9990) =  13220.446 ms/op
     p(99.9999) =  13220.446 ms/op
    p(100.0000) =  13220.446 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 12.50% complete, ETA 05:34:49
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

15938.355 ms/op
# Warmup Iteration   2: 16995.320 ms/op
# Warmup Iteration   3: 13774.094 ms/op
# Warmup Iteration   4: 14495.515 ms/op
# Warmup Iteration   5: 14730.396 ms/op
Iteration   1: 14629.732 ms/op
                 executeQuery·p0.00:   14629.732 ms/op
                 executeQuery·p0.50:   14629.732 ms/op
                 executeQuery·p0.90:   14629.732 ms/op
                 executeQuery·p0.95:   14629.732 ms/op
                 executeQuery·p0.99:   14629.732 ms/op
                 executeQuery·p0.999:  14629.732 ms/op
                 executeQuery·p0.9999: 14629.732 ms/op
                 executeQuery·p1.00:   14629.732 ms/op

Iteration   2: 14696.841 ms/op
                 executeQuery·p0.00:   14696.841 ms/op
                 executeQuery·p0.50:   14696.841 ms/op
                 executeQuery·p0.90:   14696.841 ms/op
                 executeQuery·p0.95:   14696.841 ms/op
                 executeQuery·p0.99:   14696.841 ms/op
                 executeQuery·p0.999:  14696.841 ms/op
                 executeQuery·p0.9999: 14696.841 ms/op
                 executeQuery·p1.00:   14696.841 ms/op

Iteration   3: 15200.158 ms/op
                 executeQuery·p0.00:   15200.158 ms/op
                 executeQuery·p0.50:   15200.158 ms/op
                 executeQuery·p0.90:   15200.158 ms/op
                 executeQuery·p0.95:   15200.158 ms/op
                 executeQuery·p0.99:   15200.158 ms/op
                 executeQuery·p0.999:  15200.158 ms/op
                 executeQuery·p0.9999: 15200.158 ms/op
                 executeQuery·p1.00:   15200.158 ms/op

Iteration   4: 14629.732 ms/op
                 executeQuery·p0.00:   14629.732 ms/op
                 executeQuery·p0.50:   14629.732 ms/op
                 executeQuery·p0.90:   14629.732 ms/op
                 executeQuery·p0.95:   14629.732 ms/op
                 executeQuery·p0.99:   14629.732 ms/op
                 executeQuery·p0.999:  14629.732 ms/op
                 executeQuery·p0.9999: 14629.732 ms/op
                 executeQuery·p1.00:   14629.732 ms/op

Iteration   5: 14713.618 ms/op
                 executeQuery·p0.00:   14713.618 ms/op
                 executeQuery·p0.50:   14713.618 ms/op
                 executeQuery·p0.90:   14713.618 ms/op
                 executeQuery·p0.95:   14713.618 ms/op
                 executeQuery·p0.99:   14713.618 ms/op
                 executeQuery·p0.999:  14713.618 ms/op
                 executeQuery·p0.9999: 14713.618 ms/op
                 executeQuery·p1.00:   14713.618 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  14774.016 ±(99.9%) 929.027 ms/op

  Histogram, ms/op:
    [14600.000, 14650.000) = 2 
    [14650.000, 14700.000) = 1 
    [14700.000, 14750.000) = 1 
    [14750.000, 14800.000) = 0 
    [14800.000, 14850.000) = 0 
    [14850.000, 14900.000) = 0 
    [14900.000, 14950.000) = 0 
    [14950.000, 15000.000) = 0 
    [15000.000, 15050.000) = 0 
    [15050.000, 15100.000) = 0 
    [15100.000, 15150.000) = 0 
    [15150.000, 15200.000) = 0 
    [15200.000, 15250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  14629.732 ms/op
     p(50.0000) =  14696.841 ms/op
     p(90.0000) =  15200.158 ms/op
     p(95.0000) =  15200.158 ms/op
     p(99.0000) =  15200.158 ms/op
     p(99.9000) =  15200.158 ms/op
     p(99.9900) =  15200.158 ms/op
     p(99.9990) =  15200.158 ms/op
     p(99.9999) =  15200.158 ms/op
    p(100.0000) =  15200.158 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 13.54% complete, ETA 05:21:34
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1534690940 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1534690940() {
        this(4);
    }
    public KeyValueMap_1534690940(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1534690940 aggregation_state_map = new KeyValueMap_1534690940();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

56908.317 ms/op
# Warmup Iteration   2: 57646.514 ms/op
# Warmup Iteration   3: 48653.926 ms/op
# Warmup Iteration   4: 51338.281 ms/op
# Warmup Iteration   5: 49861.886 ms/op
Iteration   1: 49325.015 ms/op
                 executeQuery·p0.00:   49325.015 ms/op
                 executeQuery·p0.50:   49325.015 ms/op
                 executeQuery·p0.90:   49325.015 ms/op
                 executeQuery·p0.95:   49325.015 ms/op
                 executeQuery·p0.99:   49325.015 ms/op
                 executeQuery·p0.999:  49325.015 ms/op
                 executeQuery·p0.9999: 49325.015 ms/op
                 executeQuery·p1.00:   49325.015 ms/op

Iteration   2: 49459.233 ms/op
                 executeQuery·p0.00:   49459.233 ms/op
                 executeQuery·p0.50:   49459.233 ms/op
                 executeQuery·p0.90:   49459.233 ms/op
                 executeQuery·p0.95:   49459.233 ms/op
                 executeQuery·p0.99:   49459.233 ms/op
                 executeQuery·p0.999:  49459.233 ms/op
                 executeQuery·p0.9999: 49459.233 ms/op
                 executeQuery·p1.00:   49459.233 ms/op

Iteration   3: 49526.342 ms/op
                 executeQuery·p0.00:   49526.342 ms/op
                 executeQuery·p0.50:   49526.342 ms/op
                 executeQuery·p0.90:   49526.342 ms/op
                 executeQuery·p0.95:   49526.342 ms/op
                 executeQuery·p0.99:   49526.342 ms/op
                 executeQuery·p0.999:  49526.342 ms/op
                 executeQuery·p0.9999: 49526.342 ms/op
                 executeQuery·p1.00:   49526.342 ms/op

Iteration   4: 48922.362 ms/op
                 executeQuery·p0.00:   48922.362 ms/op
                 executeQuery·p0.50:   48922.362 ms/op
                 executeQuery·p0.90:   48922.362 ms/op
                 executeQuery·p0.95:   48922.362 ms/op
                 executeQuery·p0.99:   48922.362 ms/op
                 executeQuery·p0.999:  48922.362 ms/op
                 executeQuery·p0.9999: 48922.362 ms/op
                 executeQuery·p1.00:   48922.362 ms/op

Iteration   5: 48452.600 ms/op
                 executeQuery·p0.00:   48452.600 ms/op
                 executeQuery·p0.50:   48452.600 ms/op
                 executeQuery·p0.90:   48452.600 ms/op
                 executeQuery·p0.95:   48452.600 ms/op
                 executeQuery·p0.99:   48452.600 ms/op
                 executeQuery·p0.999:  48452.600 ms/op
                 executeQuery·p0.9999: 48452.600 ms/op
                 executeQuery·p1.00:   48452.600 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  49137.110 ±(99.9%) 1727.695 ms/op

  Histogram, ms/op:
    [48000.000, 48125.000) = 0 
    [48125.000, 48250.000) = 0 
    [48250.000, 48375.000) = 0 
    [48375.000, 48500.000) = 1 
    [48500.000, 48625.000) = 0 
    [48625.000, 48750.000) = 0 
    [48750.000, 48875.000) = 0 
    [48875.000, 49000.000) = 1 
    [49000.000, 49125.000) = 0 
    [49125.000, 49250.000) = 0 
    [49250.000, 49375.000) = 1 
    [49375.000, 49500.000) = 1 
    [49500.000, 49625.000) = 1 
    [49625.000, 49750.000) = 0 
    [49750.000, 49875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  48452.600 ms/op
     p(50.0000) =  49325.015 ms/op
     p(90.0000) =  49526.342 ms/op
     p(95.0000) =  49526.342 ms/op
     p(99.0000) =  49526.342 ms/op
     p(99.9000) =  49526.342 ms/op
     p(99.9900) =  49526.342 ms/op
     p(99.9990) =  49526.342 ms/op
     p(99.9999) =  49526.342 ms/op
    p(100.0000) =  49526.342 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 14.58% complete, ETA 05:55:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_1866254795 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1866254795() {
        this(4);
    }
    public KeyValueMap_1866254795(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1866254795 aggregation_state_map = new KeyValueMap_1866254795();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

102139.691 ms/op
# Warmup Iteration   2: 96905.200 ms/op
# Warmup Iteration   3: 98247.377 ms/op
# Warmup Iteration   4: 95965.676 ms/op
# Warmup Iteration   5: 97442.071 ms/op
Iteration   1: 94623.498 ms/op
                 executeQuery·p0.00:   94623.498 ms/op
                 executeQuery·p0.50:   94623.498 ms/op
                 executeQuery·p0.90:   94623.498 ms/op
                 executeQuery·p0.95:   94623.498 ms/op
                 executeQuery·p0.99:   94623.498 ms/op
                 executeQuery·p0.999:  94623.498 ms/op
                 executeQuery·p0.9999: 94623.498 ms/op
                 executeQuery·p1.00:   94623.498 ms/op

Iteration   2: 95428.805 ms/op
                 executeQuery·p0.00:   95428.805 ms/op
                 executeQuery·p0.50:   95428.805 ms/op
                 executeQuery·p0.90:   95428.805 ms/op
                 executeQuery·p0.95:   95428.805 ms/op
                 executeQuery·p0.99:   95428.805 ms/op
                 executeQuery·p0.999:  95428.805 ms/op
                 executeQuery·p0.9999: 95428.805 ms/op
                 executeQuery·p1.00:   95428.805 ms/op

Iteration   3: 93818.192 ms/op
                 executeQuery·p0.00:   93818.192 ms/op
                 executeQuery·p0.50:   93818.192 ms/op
                 executeQuery·p0.90:   93818.192 ms/op
                 executeQuery·p0.95:   93818.192 ms/op
                 executeQuery·p0.99:   93818.192 ms/op
                 executeQuery·p0.999:  93818.192 ms/op
                 executeQuery·p0.9999: 93818.192 ms/op
                 executeQuery·p1.00:   93818.192 ms/op

Iteration   4: 97978.941 ms/op
                 executeQuery·p0.00:   97978.941 ms/op
                 executeQuery·p0.50:   97978.941 ms/op
                 executeQuery·p0.90:   97978.941 ms/op
                 executeQuery·p0.95:   97978.941 ms/op
                 executeQuery·p0.99:   97978.941 ms/op
                 executeQuery·p0.999:  97978.941 ms/op
                 executeQuery·p0.9999: 97978.941 ms/op
                 executeQuery·p1.00:   97978.941 ms/op

Iteration   5: 95563.022 ms/op
                 executeQuery·p0.00:   95563.022 ms/op
                 executeQuery·p0.50:   95563.022 ms/op
                 executeQuery·p0.90:   95563.022 ms/op
                 executeQuery·p0.95:   95563.022 ms/op
                 executeQuery·p0.99:   95563.022 ms/op
                 executeQuery·p0.999:  95563.022 ms/op
                 executeQuery·p0.9999: 95563.022 ms/op
                 executeQuery·p1.00:   95563.022 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  95482.492 ±(99.9%) 6011.629 ms/op

  Histogram, ms/op:
    [93000.000, 93500.000) = 0 
    [93500.000, 94000.000) = 1 
    [94000.000, 94500.000) = 0 
    [94500.000, 95000.000) = 1 
    [95000.000, 95500.000) = 1 
    [95500.000, 96000.000) = 1 
    [96000.000, 96500.000) = 0 
    [96500.000, 97000.000) = 0 
    [97000.000, 97500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  93818.192 ms/op
     p(50.0000) =  95428.805 ms/op
     p(90.0000) =  97978.941 ms/op
     p(95.0000) =  97978.941 ms/op
     p(99.0000) =  97978.941 ms/op
     p(99.9000) =  97978.941 ms/op
     p(99.9900) =  97978.941 ms/op
     p(99.9990) =  97978.941 ms/op
     p(99.9999) =  97978.941 ms/op
    p(100.0000) =  97978.941 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 15.63% complete, ETA 07:32:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

453.509 ±(99.9%) 81.373 ms/op
# Warmup Iteration   2: 420.654 ±(99.9%) 2.493 ms/op
# Warmup Iteration   3: 421.790 ±(99.9%) 8.144 ms/op
# Warmup Iteration   4: 421.637 ±(99.9%) 6.319 ms/op
# Warmup Iteration   5: 418.513 ±(99.9%) 0.764 ms/op
Iteration   1: 417.639 ±(99.9%) 0.692 ms/op
                 executeQuery·p0.00:   415.236 ms/op
                 executeQuery·p0.50:   417.333 ms/op
                 executeQuery·p0.90:   418.906 ms/op
                 executeQuery·p0.95:   419.299 ms/op
                 executeQuery·p0.99:   419.430 ms/op
                 executeQuery·p0.999:  419.430 ms/op
                 executeQuery·p0.9999: 419.430 ms/op
                 executeQuery·p1.00:   419.430 ms/op

Iteration   2: 417.901 ±(99.9%) 0.569 ms/op
                 executeQuery·p0.00:   416.809 ms/op
                 executeQuery·p0.50:   417.858 ms/op
                 executeQuery·p0.90:   418.906 ms/op
                 executeQuery·p0.95:   419.693 ms/op
                 executeQuery·p0.99:   419.955 ms/op
                 executeQuery·p0.999:  419.955 ms/op
                 executeQuery·p0.9999: 419.955 ms/op
                 executeQuery·p1.00:   419.955 ms/op

Iteration   3: 418.010 ±(99.9%) 0.698 ms/op
                 executeQuery·p0.00:   416.285 ms/op
                 executeQuery·p0.50:   417.858 ms/op
                 executeQuery·p0.90:   419.168 ms/op
                 executeQuery·p0.95:   419.824 ms/op
                 executeQuery·p0.99:   419.955 ms/op
                 executeQuery·p0.999:  419.955 ms/op
                 executeQuery·p0.9999: 419.955 ms/op
                 executeQuery·p1.00:   419.955 ms/op

Iteration   4: 417.858 ±(99.9%) 0.798 ms/op
                 executeQuery·p0.00:   415.760 ms/op
                 executeQuery·p0.50:   417.858 ms/op
                 executeQuery·p0.90:   419.430 ms/op
                 executeQuery·p0.95:   419.430 ms/op
                 executeQuery·p0.99:   419.430 ms/op
                 executeQuery·p0.999:  419.430 ms/op
                 executeQuery·p0.9999: 419.430 ms/op
                 executeQuery·p1.00:   419.430 ms/op

Iteration   5: 417.377 ±(99.9%) 0.503 ms/op
                 executeQuery·p0.00:   416.285 ms/op
                 executeQuery·p0.50:   417.333 ms/op
                 executeQuery·p0.90:   418.382 ms/op
                 executeQuery·p0.95:   418.382 ms/op
                 executeQuery·p0.99:   418.382 ms/op
                 executeQuery·p0.999:  418.382 ms/op
                 executeQuery·p0.9999: 418.382 ms/op
                 executeQuery·p1.00:   418.382 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 120
  mean =    417.757 ±(99.9%) 0.269 ms/op

  Histogram, ms/op:
    [415.000, 415.500) = 1 
    [415.500, 416.000) = 1 
    [416.000, 416.500) = 6 
    [416.500, 417.000) = 17 
    [417.000, 417.500) = 27 
    [417.500, 418.000) = 32 
    [418.000, 418.500) = 16 
    [418.500, 419.000) = 13 
    [419.000, 419.500) = 5 

  Percentiles, ms/op:
      p(0.0000) =    415.236 ms/op
     p(50.0000) =    417.858 ms/op
     p(90.0000) =    418.906 ms/op
     p(95.0000) =    419.430 ms/op
     p(99.0000) =    419.955 ms/op
     p(99.9000) =    419.955 ms/op
     p(99.9900) =    419.955 ms/op
     p(99.9990) =    419.955 ms/op
     p(99.9999) =    419.955 ms/op
    p(100.0000) =    419.955 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 16.67% complete, ETA 07:07:26
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1141991509 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1141991509() {
        this(4);
    }
    public KeyValueMap_1141991509(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1141991509 aggregation_state_map = new KeyValueMap_1141991509();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

572.756 ±(99.9%) 77.986 ms/op
# Warmup Iteration   2: 541.176 ±(99.9%) 2.514 ms/op
# Warmup Iteration   3: 542.831 ±(99.9%) 7.587 ms/op
# Warmup Iteration   4: 541.562 ±(99.9%) 6.044 ms/op
# Warmup Iteration   5: 539.686 ±(99.9%) 3.695 ms/op
Iteration   1: 539.492 ±(99.9%) 4.121 ms/op
                 executeQuery·p0.00:   535.822 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   551.551 ms/op
                 executeQuery·p0.95:   552.600 ms/op
                 executeQuery·p0.99:   552.600 ms/op
                 executeQuery·p0.999:  552.600 ms/op
                 executeQuery·p0.9999: 552.600 ms/op
                 executeQuery·p1.00:   552.600 ms/op

Iteration   2: 540.734 ±(99.9%) 3.460 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   540.017 ms/op
                 executeQuery·p0.90:   543.162 ms/op
                 executeQuery·p0.95:   555.745 ms/op
                 executeQuery·p0.99:   555.745 ms/op
                 executeQuery·p0.999:  555.745 ms/op
                 executeQuery·p0.9999: 555.745 ms/op
                 executeQuery·p1.00:   555.745 ms/op

Iteration   3: 539.492 ±(99.9%) 3.664 ms/op
                 executeQuery·p0.00:   535.822 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   543.162 ms/op
                 executeQuery·p0.95:   554.697 ms/op
                 executeQuery·p0.99:   554.697 ms/op
                 executeQuery·p0.999:  554.697 ms/op
                 executeQuery·p0.9999: 554.697 ms/op
                 executeQuery·p1.00:   554.697 ms/op

Iteration   4: 541.452 ±(99.9%) 8.195 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   548.405 ms/op
                 executeQuery·p0.95:   577.765 ms/op
                 executeQuery·p0.99:   577.765 ms/op
                 executeQuery·p0.999:  577.765 ms/op
                 executeQuery·p0.9999: 577.765 ms/op
                 executeQuery·p1.00:   577.765 ms/op

Iteration   5: 539.686 ±(99.9%) 3.654 ms/op
                 executeQuery·p0.00:   535.822 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   548.405 ms/op
                 executeQuery·p0.95:   552.600 ms/op
                 executeQuery·p0.99:   552.600 ms/op
                 executeQuery·p0.999:  552.600 ms/op
                 executeQuery·p0.9999: 552.600 ms/op
                 executeQuery·p1.00:   552.600 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 95
  mean =    540.171 ±(99.9%) 1.900 ms/op

  Histogram, ms/op:
    [530.000, 535.000) = 0 
    [535.000, 540.000) = 66 
    [540.000, 545.000) = 21 
    [545.000, 550.000) = 2 
    [550.000, 555.000) = 4 
    [555.000, 560.000) = 1 
    [560.000, 565.000) = 0 
    [565.000, 570.000) = 0 
    [570.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    535.822 ms/op
     p(50.0000) =    538.968 ms/op
     p(90.0000) =    543.162 ms/op
     p(95.0000) =    552.600 ms/op
     p(99.0000) =    577.765 ms/op
     p(99.9000) =    577.765 ms/op
     p(99.9900) =    577.765 ms/op
     p(99.9990) =    577.765 ms/op
     p(99.9999) =    577.765 ms/op
    p(100.0000) =    577.765 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 17.71% complete, ETA 06:45:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

808.452 ±(99.9%) 97.684 ms/op
# Warmup Iteration   2: 780.141 ±(99.9%) 14.698 ms/op
# Warmup Iteration   3: 772.801 ±(99.9%) 17.994 ms/op
# Warmup Iteration   4: 776.027 ±(99.9%) 24.200 ms/op
# Warmup Iteration   5: 763.525 ±(99.9%) 18.167 ms/op
Iteration   1: 776.430 ±(99.9%) 20.010 ms/op
                 executeQuery·p0.00:   751.829 ms/op
                 executeQuery·p0.50:   781.189 ms/op
                 executeQuery·p0.90:   798.386 ms/op
                 executeQuery·p0.95:   800.063 ms/op
                 executeQuery·p0.99:   800.063 ms/op
                 executeQuery·p0.999:  800.063 ms/op
                 executeQuery·p0.9999: 800.063 ms/op
                 executeQuery·p1.00:   800.063 ms/op

Iteration   2: 780.141 ±(99.9%) 18.703 ms/op
                 executeQuery·p0.00:   757.072 ms/op
                 executeQuery·p0.50:   779.092 ms/op
                 executeQuery·p0.90:   802.370 ms/op
                 executeQuery·p0.95:   803.209 ms/op
                 executeQuery·p0.99:   803.209 ms/op
                 executeQuery·p0.999:  803.209 ms/op
                 executeQuery·p0.9999: 803.209 ms/op
                 executeQuery·p1.00:   803.209 ms/op

Iteration   3: 780.383 ±(99.9%) 17.633 ms/op
                 executeQuery·p0.00:   754.975 ms/op
                 executeQuery·p0.50:   780.141 ms/op
                 executeQuery·p0.90:   797.966 ms/op
                 executeQuery·p0.95:   800.063 ms/op
                 executeQuery·p0.99:   800.063 ms/op
                 executeQuery·p0.999:  800.063 ms/op
                 executeQuery·p0.9999: 800.063 ms/op
                 executeQuery·p1.00:   800.063 ms/op

Iteration   4: 779.737 ±(99.9%) 16.216 ms/op
                 executeQuery·p0.00:   753.926 ms/op
                 executeQuery·p0.50:   781.189 ms/op
                 executeQuery·p0.90:   798.805 ms/op
                 executeQuery·p0.95:   802.161 ms/op
                 executeQuery·p0.99:   802.161 ms/op
                 executeQuery·p0.999:  802.161 ms/op
                 executeQuery·p0.9999: 802.161 ms/op
                 executeQuery·p1.00:   802.161 ms/op

Iteration   5: 778.366 ±(99.9%) 18.614 ms/op
                 executeQuery·p0.00:   754.975 ms/op
                 executeQuery·p0.50:   779.092 ms/op
                 executeQuery·p0.90:   802.580 ms/op
                 executeQuery·p0.95:   804.258 ms/op
                 executeQuery·p0.99:   804.258 ms/op
                 executeQuery·p0.999:  804.258 ms/op
                 executeQuery·p0.9999: 804.258 ms/op
                 executeQuery·p1.00:   804.258 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 65
  mean =    779.011 ±(99.9%) 6.354 ms/op

  Histogram, ms/op:
    [750.000, 755.000) = 5 
    [755.000, 760.000) = 8 
    [760.000, 765.000) = 3 
    [765.000, 770.000) = 0 
    [770.000, 775.000) = 0 
    [775.000, 780.000) = 17 
    [780.000, 785.000) = 12 
    [785.000, 790.000) = 2 
    [790.000, 795.000) = 10 
    [795.000, 800.000) = 1 
    [800.000, 805.000) = 7 

  Percentiles, ms/op:
      p(0.0000) =    751.829 ms/op
     p(50.0000) =    779.092 ms/op
     p(90.0000) =    800.063 ms/op
     p(95.0000) =    801.846 ms/op
     p(99.0000) =    804.258 ms/op
     p(99.9000) =    804.258 ms/op
     p(99.9900) =    804.258 ms/op
     p(99.9990) =    804.258 ms/op
     p(99.9999) =    804.258 ms/op
    p(100.0000) =    804.258 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 18.75% complete, ETA 06:25:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3422.552 ms/op
# Warmup Iteration   2: 2873.098 ms/op
# Warmup Iteration   3: 2688.549 ms/op
# Warmup Iteration   4: 2772.435 ms/op
# Warmup Iteration   5: 2478.834 ms/op
Iteration   1: 2474.639 ms/op
                 executeQuery·p0.00:   2474.639 ms/op
                 executeQuery·p0.50:   2474.639 ms/op
                 executeQuery·p0.90:   2474.639 ms/op
                 executeQuery·p0.95:   2474.639 ms/op
                 executeQuery·p0.99:   2474.639 ms/op
                 executeQuery·p0.999:  2474.639 ms/op
                 executeQuery·p0.9999: 2474.639 ms/op
                 executeQuery·p1.00:   2474.639 ms/op

Iteration   2: 2357.199 ms/op
                 executeQuery·p0.00:   2357.199 ms/op
                 executeQuery·p0.50:   2357.199 ms/op
                 executeQuery·p0.90:   2357.199 ms/op
                 executeQuery·p0.95:   2357.199 ms/op
                 executeQuery·p0.99:   2357.199 ms/op
                 executeQuery·p0.999:  2357.199 ms/op
                 executeQuery·p0.9999: 2357.199 ms/op
                 executeQuery·p1.00:   2357.199 ms/op

Iteration   3: 2445.279 ms/op
                 executeQuery·p0.00:   2445.279 ms/op
                 executeQuery·p0.50:   2445.279 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   4: 2319.450 ms/op
                 executeQuery·p0.00:   2319.450 ms/op
                 executeQuery·p0.50:   2319.450 ms/op
                 executeQuery·p0.90:   2319.450 ms/op
                 executeQuery·p0.95:   2319.450 ms/op
                 executeQuery·p0.99:   2319.450 ms/op
                 executeQuery·p0.999:  2319.450 ms/op
                 executeQuery·p0.9999: 2319.450 ms/op
                 executeQuery·p1.00:   2319.450 ms/op

Iteration   5: 2608.857 ms/op
                 executeQuery·p0.00:   2608.857 ms/op
                 executeQuery·p0.50:   2608.857 ms/op
                 executeQuery·p0.90:   2608.857 ms/op
                 executeQuery·p0.95:   2608.857 ms/op
                 executeQuery·p0.99:   2608.857 ms/op
                 executeQuery·p0.999:  2608.857 ms/op
                 executeQuery·p0.9999: 2608.857 ms/op
                 executeQuery·p1.00:   2608.857 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   2441.085 ±(99.9%) 435.322 ms/op

  Histogram, ms/op:
    [2300.000, 2325.000) = 1 
    [2325.000, 2350.000) = 0 
    [2350.000, 2375.000) = 1 
    [2375.000, 2400.000) = 0 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 1 
    [2450.000, 2475.000) = 1 
    [2475.000, 2500.000) = 0 
    [2500.000, 2525.000) = 0 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 0 
    [2575.000, 2600.000) = 0 
    [2600.000, 2625.000) = 1 
    [2625.000, 2650.000) = 0 
    [2650.000, 2675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2319.450 ms/op
     p(50.0000) =   2445.279 ms/op
     p(90.0000) =   2608.857 ms/op
     p(95.0000) =   2608.857 ms/op
     p(99.0000) =   2608.857 ms/op
     p(99.9000) =   2608.857 ms/op
     p(99.9900) =   2608.857 ms/op
     p(99.9990) =   2608.857 ms/op
     p(99.9999) =   2608.857 ms/op
    p(100.0000) =   2608.857 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 19.79% complete, ETA 06:09:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_1096733432 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1096733432() {
        this(4);
    }
    public KeyValueMap_1096733432(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1096733432 aggregation_state_map = new KeyValueMap_1096733432();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5653.922 ms/op
# Warmup Iteration   2: 5502.927 ms/op
# Warmup Iteration   3: 5234.491 ms/op
# Warmup Iteration   4: 5444.207 ms/op
# Warmup Iteration   5: 5293.212 ms/op
Iteration   1: 5276.434 ms/op
                 executeQuery·p0.00:   5276.434 ms/op
                 executeQuery·p0.50:   5276.434 ms/op
                 executeQuery·p0.90:   5276.434 ms/op
                 executeQuery·p0.95:   5276.434 ms/op
                 executeQuery·p0.99:   5276.434 ms/op
                 executeQuery·p0.999:  5276.434 ms/op
                 executeQuery·p0.9999: 5276.434 ms/op
                 executeQuery·p1.00:   5276.434 ms/op

Iteration   2: 5293.212 ms/op
                 executeQuery·p0.00:   5293.212 ms/op
                 executeQuery·p0.50:   5293.212 ms/op
                 executeQuery·p0.90:   5293.212 ms/op
                 executeQuery·p0.95:   5293.212 ms/op
                 executeQuery·p0.99:   5293.212 ms/op
                 executeQuery·p0.999:  5293.212 ms/op
                 executeQuery·p0.9999: 5293.212 ms/op
                 executeQuery·p1.00:   5293.212 ms/op

Iteration   3: 5301.600 ms/op
                 executeQuery·p0.00:   5301.600 ms/op
                 executeQuery·p0.50:   5301.600 ms/op
                 executeQuery·p0.90:   5301.600 ms/op
                 executeQuery·p0.95:   5301.600 ms/op
                 executeQuery·p0.99:   5301.600 ms/op
                 executeQuery·p0.999:  5301.600 ms/op
                 executeQuery·p0.9999: 5301.600 ms/op
                 executeQuery·p1.00:   5301.600 ms/op

Iteration   4: 5066.719 ms/op
                 executeQuery·p0.00:   5066.719 ms/op
                 executeQuery·p0.50:   5066.719 ms/op
                 executeQuery·p0.90:   5066.719 ms/op
                 executeQuery·p0.95:   5066.719 ms/op
                 executeQuery·p0.99:   5066.719 ms/op
                 executeQuery·p0.999:  5066.719 ms/op
                 executeQuery·p0.9999: 5066.719 ms/op
                 executeQuery·p1.00:   5066.719 ms/op

Iteration   5: 5100.274 ms/op
                 executeQuery·p0.00:   5100.274 ms/op
                 executeQuery·p0.50:   5100.274 ms/op
                 executeQuery·p0.90:   5100.274 ms/op
                 executeQuery·p0.95:   5100.274 ms/op
                 executeQuery·p0.99:   5100.274 ms/op
                 executeQuery·p0.999:  5100.274 ms/op
                 executeQuery·p0.9999: 5100.274 ms/op
                 executeQuery·p1.00:   5100.274 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =   5207.648 ±(99.9%) 440.179 ms/op

  Histogram, ms/op:
    [5000.000, 5025.000) = 0 
    [5025.000, 5050.000) = 0 
    [5050.000, 5075.000) = 1 
    [5075.000, 5100.000) = 0 
    [5100.000, 5125.000) = 1 
    [5125.000, 5150.000) = 0 
    [5150.000, 5175.000) = 0 
    [5175.000, 5200.000) = 0 
    [5200.000, 5225.000) = 0 
    [5225.000, 5250.000) = 0 
    [5250.000, 5275.000) = 0 
    [5275.000, 5300.000) = 2 
    [5300.000, 5325.000) = 1 
    [5325.000, 5350.000) = 0 
    [5350.000, 5375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5066.719 ms/op
     p(50.0000) =   5276.434 ms/op
     p(90.0000) =   5301.600 ms/op
     p(95.0000) =   5301.600 ms/op
     p(99.0000) =   5301.600 ms/op
     p(99.9000) =   5301.600 ms/op
     p(99.9900) =   5301.600 ms/op
     p(99.9990) =   5301.600 ms/op
     p(99.9999) =   5301.600 ms/op
    p(100.0000) =   5301.600 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 20.83% complete, ETA 06:17:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6643.778 ms/op
# Warmup Iteration   2: 4383.048 ±(99.9%) 3918.975 ms/op
# Warmup Iteration   3: 4191.508 ±(99.9%) 377.463 ms/op
# Warmup Iteration   4: 4257.219 ±(99.9%) 1433.596 ms/op
# Warmup Iteration   5: 4292.171 ±(99.9%) 2831.574 ms/op
Iteration   1: 4229.257 ±(99.9%) 1038.904 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4198.498 ms/op
                 executeQuery·p0.90:   4294.967 ms/op
                 executeQuery·p0.95:   4294.967 ms/op
                 executeQuery·p0.99:   4294.967 ms/op
                 executeQuery·p0.999:  4294.967 ms/op
                 executeQuery·p0.9999: 4294.967 ms/op
                 executeQuery·p1.00:   4294.967 ms/op

Iteration   2: 4183.119 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   4177.527 ms/op
                 executeQuery·p0.50:   4181.721 ms/op
                 executeQuery·p0.90:   4190.110 ms/op
                 executeQuery·p0.95:   4190.110 ms/op
                 executeQuery·p0.99:   4190.110 ms/op
                 executeQuery·p0.999:  4190.110 ms/op
                 executeQuery·p0.9999: 4190.110 ms/op
                 executeQuery·p1.00:   4190.110 ms/op

Iteration   3: 4181.721 ±(99.9%) 202.452 ms/op
                 executeQuery·p0.00:   4173.332 ms/op
                 executeQuery·p0.50:   4177.527 ms/op
                 executeQuery·p0.90:   4194.304 ms/op
                 executeQuery·p0.95:   4194.304 ms/op
                 executeQuery·p0.99:   4194.304 ms/op
                 executeQuery·p0.999:  4194.304 ms/op
                 executeQuery·p0.9999: 4194.304 ms/op
                 executeQuery·p1.00:   4194.304 ms/op

Iteration   4: 5096.079 ms/op
                 executeQuery·p0.00:   4169.138 ms/op
                 executeQuery·p0.50:   5096.079 ms/op
                 executeQuery·p0.90:   6023.021 ms/op
                 executeQuery·p0.95:   6023.021 ms/op
                 executeQuery·p0.99:   6023.021 ms/op
                 executeQuery·p0.999:  6023.021 ms/op
                 executeQuery·p0.9999: 6023.021 ms/op
                 executeQuery·p1.00:   6023.021 ms/op

Iteration   5: 4185.915 ±(99.9%) 350.657 ms/op
                 executeQuery·p0.00:   4169.138 ms/op
                 executeQuery·p0.50:   4181.721 ms/op
                 executeQuery·p0.90:   4206.887 ms/op
                 executeQuery·p0.95:   4206.887 ms/op
                 executeQuery·p0.99:   4206.887 ms/op
                 executeQuery·p0.999:  4206.887 ms/op
                 executeQuery·p0.9999: 4206.887 ms/op
                 executeQuery·p1.00:   4206.887 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 14
  mean =   4323.728 ±(99.9%) 552.868 ms/op

  Histogram, ms/op:
    [4000.000, 4250.000) = 12 
    [4250.000, 4500.000) = 1 
    [4500.000, 4750.000) = 0 
    [4750.000, 5000.000) = 0 
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 0 
    [5750.000, 6000.000) = 0 
    [6000.000, 6250.000) = 1 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4169.138 ms/op
     p(50.0000) =   4185.915 ms/op
     p(90.0000) =   5158.994 ms/op
     p(95.0000) =   6023.021 ms/op
     p(99.0000) =   6023.021 ms/op
     p(99.9000) =   6023.021 ms/op
     p(99.9900) =   6023.021 ms/op
     p(99.9990) =   6023.021 ms/op
     p(99.9999) =   6023.021 ms/op
    p(100.0000) =   6023.021 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 21.88% complete, ETA 06:01:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7071.597 ms/op
# Warmup Iteration   2: 5821.694 ms/op
# Warmup Iteration   3: 5347.738 ms/op
# Warmup Iteration   4: 5414.846 ms/op
# Warmup Iteration   5: 5368.709 ms/op
Iteration   1: 5335.155 ms/op
                 executeQuery·p0.00:   5326.766 ms/op
                 executeQuery·p0.50:   5335.155 ms/op
                 executeQuery·p0.90:   5343.543 ms/op
                 executeQuery·p0.95:   5343.543 ms/op
                 executeQuery·p0.99:   5343.543 ms/op
                 executeQuery·p0.999:  5343.543 ms/op
                 executeQuery·p0.9999: 5343.543 ms/op
                 executeQuery·p1.00:   5343.543 ms/op

Iteration   2: 5398.069 ms/op
                 executeQuery·p0.00:   5326.766 ms/op
                 executeQuery·p0.50:   5398.069 ms/op
                 executeQuery·p0.90:   5469.372 ms/op
                 executeQuery·p0.95:   5469.372 ms/op
                 executeQuery·p0.99:   5469.372 ms/op
                 executeQuery·p0.999:  5469.372 ms/op
                 executeQuery·p0.9999: 5469.372 ms/op
                 executeQuery·p1.00:   5469.372 ms/op

Iteration   3: 5335.155 ms/op
                 executeQuery·p0.00:   5318.377 ms/op
                 executeQuery·p0.50:   5335.155 ms/op
                 executeQuery·p0.90:   5351.932 ms/op
                 executeQuery·p0.95:   5351.932 ms/op
                 executeQuery·p0.99:   5351.932 ms/op
                 executeQuery·p0.999:  5351.932 ms/op
                 executeQuery·p0.9999: 5351.932 ms/op
                 executeQuery·p1.00:   5351.932 ms/op

Iteration   4: 5398.069 ms/op
                 executeQuery·p0.00:   5335.155 ms/op
                 executeQuery·p0.50:   5398.069 ms/op
                 executeQuery·p0.90:   5460.984 ms/op
                 executeQuery·p0.95:   5460.984 ms/op
                 executeQuery·p0.99:   5460.984 ms/op
                 executeQuery·p0.999:  5460.984 ms/op
                 executeQuery·p0.9999: 5460.984 ms/op
                 executeQuery·p1.00:   5460.984 ms/op

Iteration   5: 5314.183 ms/op
                 executeQuery·p0.00:   5309.989 ms/op
                 executeQuery·p0.50:   5314.183 ms/op
                 executeQuery·p0.90:   5318.377 ms/op
                 executeQuery·p0.95:   5318.377 ms/op
                 executeQuery·p0.99:   5318.377 ms/op
                 executeQuery·p0.999:  5318.377 ms/op
                 executeQuery·p0.9999: 5318.377 ms/op
                 executeQuery·p1.00:   5318.377 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   5356.126 ±(99.9%) 88.928 ms/op

  Histogram, ms/op:
    [5300.000, 5312.500) = 1 
    [5312.500, 5325.000) = 2 
    [5325.000, 5337.500) = 3 
    [5337.500, 5350.000) = 1 
    [5350.000, 5362.500) = 1 
    [5362.500, 5375.000) = 0 
    [5375.000, 5387.500) = 0 
    [5387.500, 5400.000) = 0 
    [5400.000, 5412.500) = 0 
    [5412.500, 5425.000) = 0 
    [5425.000, 5437.500) = 0 
    [5437.500, 5450.000) = 0 
    [5450.000, 5462.500) = 1 
    [5462.500, 5475.000) = 1 
    [5475.000, 5487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5309.989 ms/op
     p(50.0000) =   5330.960 ms/op
     p(90.0000) =   5468.534 ms/op
     p(95.0000) =   5469.372 ms/op
     p(99.0000) =   5469.372 ms/op
     p(99.9000) =   5469.372 ms/op
     p(99.9900) =   5469.372 ms/op
     p(99.9990) =   5469.372 ms/op
     p(99.9999) =   5469.372 ms/op
    p(100.0000) =   5469.372 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 22.92% complete, ETA 05:47:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

8237.613 ms/op
# Warmup Iteration   2: 7621.050 ms/op
# Warmup Iteration   3: 7067.402 ms/op
# Warmup Iteration   4: 7029.654 ms/op
# Warmup Iteration   5: 7071.597 ms/op
Iteration   1: 7151.288 ms/op
                 executeQuery·p0.00:   7021.265 ms/op
                 executeQuery·p0.50:   7151.288 ms/op
                 executeQuery·p0.90:   7281.312 ms/op
                 executeQuery·p0.95:   7281.312 ms/op
                 executeQuery·p0.99:   7281.312 ms/op
                 executeQuery·p0.999:  7281.312 ms/op
                 executeQuery·p0.9999: 7281.312 ms/op
                 executeQuery·p1.00:   7281.312 ms/op

Iteration   2: 7134.511 ms/op
                 executeQuery·p0.00:   6987.710 ms/op
                 executeQuery·p0.50:   7134.511 ms/op
                 executeQuery·p0.90:   7281.312 ms/op
                 executeQuery·p0.95:   7281.312 ms/op
                 executeQuery·p0.99:   7281.312 ms/op
                 executeQuery·p0.999:  7281.312 ms/op
                 executeQuery·p0.9999: 7281.312 ms/op
                 executeQuery·p1.00:   7281.312 ms/op

Iteration   3: 7683.965 ms/op
                 executeQuery·p0.00:   7314.866 ms/op
                 executeQuery·p0.50:   7683.965 ms/op
                 executeQuery·p0.90:   8053.064 ms/op
                 executeQuery·p0.95:   8053.064 ms/op
                 executeQuery·p0.99:   8053.064 ms/op
                 executeQuery·p0.999:  8053.064 ms/op
                 executeQuery·p0.9999: 8053.064 ms/op
                 executeQuery·p1.00:   8053.064 ms/op

Iteration   4: 7201.620 ms/op
                 executeQuery·p0.00:   7079.985 ms/op
                 executeQuery·p0.50:   7201.620 ms/op
                 executeQuery·p0.90:   7323.255 ms/op
                 executeQuery·p0.95:   7323.255 ms/op
                 executeQuery·p0.99:   7323.255 ms/op
                 executeQuery·p0.999:  7323.255 ms/op
                 executeQuery·p0.9999: 7323.255 ms/op
                 executeQuery·p1.00:   7323.255 ms/op

Iteration   5: 7121.928 ms/op
                 executeQuery·p0.00:   7012.876 ms/op
                 executeQuery·p0.50:   7121.928 ms/op
                 executeQuery·p0.90:   7230.980 ms/op
                 executeQuery·p0.95:   7230.980 ms/op
                 executeQuery·p0.99:   7230.980 ms/op
                 executeQuery·p0.999:  7230.980 ms/op
                 executeQuery·p0.9999: 7230.980 ms/op
                 executeQuery·p1.00:   7230.980 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   7258.663 ±(99.9%) 467.972 ms/op

  Histogram, ms/op:
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 0 
    [6750.000, 7000.000) = 1 
    [7000.000, 7250.000) = 4 
    [7250.000, 7500.000) = 4 
    [7500.000, 7750.000) = 0 
    [7750.000, 8000.000) = 0 
    [8000.000, 8250.000) = 1 
    [8250.000, 8500.000) = 0 
    [8500.000, 8750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   6987.710 ms/op
     p(50.0000) =   7256.146 ms/op
     p(90.0000) =   7980.083 ms/op
     p(95.0000) =   8053.064 ms/op
     p(99.0000) =   8053.064 ms/op
     p(99.9000) =   8053.064 ms/op
     p(99.9900) =   8053.064 ms/op
     p(99.9990) =   8053.064 ms/op
     p(99.9999) =   8053.064 ms/op
    p(100.0000) =   8053.064 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 23.96% complete, ETA 05:35:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

31104.958 ms/op
# Warmup Iteration   2: 26608.665 ms/op
# Warmup Iteration   3: 25904.022 ms/op
# Warmup Iteration   4: 27078.427 ms/op
# Warmup Iteration   5: 26306.675 ms/op
Iteration   1: 25568.477 ms/op
                 executeQuery·p0.00:   25568.477 ms/op
                 executeQuery·p0.50:   25568.477 ms/op
                 executeQuery·p0.90:   25568.477 ms/op
                 executeQuery·p0.95:   25568.477 ms/op
                 executeQuery·p0.99:   25568.477 ms/op
                 executeQuery·p0.999:  25568.477 ms/op
                 executeQuery·p0.9999: 25568.477 ms/op
                 executeQuery·p1.00:   25568.477 ms/op

Iteration   2: 26273.120 ms/op
                 executeQuery·p0.00:   26273.120 ms/op
                 executeQuery·p0.50:   26273.120 ms/op
                 executeQuery·p0.90:   26273.120 ms/op
                 executeQuery·p0.95:   26273.120 ms/op
                 executeQuery·p0.99:   26273.120 ms/op
                 executeQuery·p0.999:  26273.120 ms/op
                 executeQuery·p0.9999: 26273.120 ms/op
                 executeQuery·p1.00:   26273.120 ms/op

Iteration   3: 26038.239 ms/op
                 executeQuery·p0.00:   26038.239 ms/op
                 executeQuery·p0.50:   26038.239 ms/op
                 executeQuery·p0.90:   26038.239 ms/op
                 executeQuery·p0.95:   26038.239 ms/op
                 executeQuery·p0.99:   26038.239 ms/op
                 executeQuery·p0.999:  26038.239 ms/op
                 executeQuery·p0.9999: 26038.239 ms/op
                 executeQuery·p1.00:   26038.239 ms/op

Iteration   4: 26608.665 ms/op
                 executeQuery·p0.00:   26608.665 ms/op
                 executeQuery·p0.50:   26608.665 ms/op
                 executeQuery·p0.90:   26608.665 ms/op
                 executeQuery·p0.95:   26608.665 ms/op
                 executeQuery·p0.99:   26608.665 ms/op
                 executeQuery·p0.999:  26608.665 ms/op
                 executeQuery·p0.9999: 26608.665 ms/op
                 executeQuery·p1.00:   26608.665 ms/op

Iteration   5: 26206.011 ms/op
                 executeQuery·p0.00:   26206.011 ms/op
                 executeQuery·p0.50:   26206.011 ms/op
                 executeQuery·p0.90:   26206.011 ms/op
                 executeQuery·p0.95:   26206.011 ms/op
                 executeQuery·p0.99:   26206.011 ms/op
                 executeQuery·p0.999:  26206.011 ms/op
                 executeQuery·p0.9999: 26206.011 ms/op
                 executeQuery·p1.00:   26206.011 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  26138.903 ±(99.9%) 1464.653 ms/op

  Histogram, ms/op:
    [25000.000, 25125.000) = 0 
    [25125.000, 25250.000) = 0 
    [25250.000, 25375.000) = 0 
    [25375.000, 25500.000) = 0 
    [25500.000, 25625.000) = 1 
    [25625.000, 25750.000) = 0 
    [25750.000, 25875.000) = 0 
    [25875.000, 26000.000) = 0 
    [26000.000, 26125.000) = 1 
    [26125.000, 26250.000) = 1 
    [26250.000, 26375.000) = 1 
    [26375.000, 26500.000) = 0 
    [26500.000, 26625.000) = 1 
    [26625.000, 26750.000) = 0 
    [26750.000, 26875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  25568.477 ms/op
     p(50.0000) =  26206.011 ms/op
     p(90.0000) =  26608.665 ms/op
     p(95.0000) =  26608.665 ms/op
     p(99.0000) =  26608.665 ms/op
     p(99.9000) =  26608.665 ms/op
     p(99.9900) =  26608.665 ms/op
     p(99.9990) =  26608.665 ms/op
     p(99.9999) =  26608.665 ms/op
    p(100.0000) =  26608.665 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 25.00% complete, ETA 05:35:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

53150.220 ms/op
# Warmup Iteration   2: 52412.023 ms/op
# Warmup Iteration   3: 48721.035 ms/op
# Warmup Iteration   4: 49593.450 ms/op
# Warmup Iteration   5: 50734.301 ms/op
Iteration   1: 50734.301 ms/op
                 executeQuery·p0.00:   50734.301 ms/op
                 executeQuery·p0.50:   50734.301 ms/op
                 executeQuery·p0.90:   50734.301 ms/op
                 executeQuery·p0.95:   50734.301 ms/op
                 executeQuery·p0.99:   50734.301 ms/op
                 executeQuery·p0.999:  50734.301 ms/op
                 executeQuery·p0.9999: 50734.301 ms/op
                 executeQuery·p1.00:   50734.301 ms/op

Iteration   2: 50398.757 ms/op
                 executeQuery·p0.00:   50398.757 ms/op
                 executeQuery·p0.50:   50398.757 ms/op
                 executeQuery·p0.90:   50398.757 ms/op
                 executeQuery·p0.95:   50398.757 ms/op
                 executeQuery·p0.99:   50398.757 ms/op
                 executeQuery·p0.999:  50398.757 ms/op
                 executeQuery·p0.9999: 50398.757 ms/op
                 executeQuery·p1.00:   50398.757 ms/op

Iteration   3: 50398.757 ms/op
                 executeQuery·p0.00:   50398.757 ms/op
                 executeQuery·p0.50:   50398.757 ms/op
                 executeQuery·p0.90:   50398.757 ms/op
                 executeQuery·p0.95:   50398.757 ms/op
                 executeQuery·p0.99:   50398.757 ms/op
                 executeQuery·p0.999:  50398.757 ms/op
                 executeQuery·p0.9999: 50398.757 ms/op
                 executeQuery·p1.00:   50398.757 ms/op

Iteration   4: 49727.668 ms/op
                 executeQuery·p0.00:   49727.668 ms/op
                 executeQuery·p0.50:   49727.668 ms/op
                 executeQuery·p0.90:   49727.668 ms/op
                 executeQuery·p0.95:   49727.668 ms/op
                 executeQuery·p0.99:   49727.668 ms/op
                 executeQuery·p0.999:  49727.668 ms/op
                 executeQuery·p0.9999: 49727.668 ms/op
                 executeQuery·p1.00:   49727.668 ms/op

Iteration   5: 50130.321 ms/op
                 executeQuery·p0.00:   50130.321 ms/op
                 executeQuery·p0.50:   50130.321 ms/op
                 executeQuery·p0.90:   50130.321 ms/op
                 executeQuery·p0.95:   50130.321 ms/op
                 executeQuery·p0.99:   50130.321 ms/op
                 executeQuery·p0.999:  50130.321 ms/op
                 executeQuery·p0.9999: 50130.321 ms/op
                 executeQuery·p1.00:   50130.321 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  50277.961 ±(99.9%) 1443.413 ms/op

  Histogram, ms/op:
    [49000.000, 49125.000) = 0 
    [49125.000, 49250.000) = 0 
    [49250.000, 49375.000) = 0 
    [49375.000, 49500.000) = 0 
    [49500.000, 49625.000) = 0 
    [49625.000, 49750.000) = 1 
    [49750.000, 49875.000) = 0 
    [49875.000, 50000.000) = 0 
    [50000.000, 50125.000) = 0 
    [50125.000, 50250.000) = 1 
    [50250.000, 50375.000) = 0 
    [50375.000, 50500.000) = 2 
    [50500.000, 50625.000) = 0 
    [50625.000, 50750.000) = 1 
    [50750.000, 50875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  49727.668 ms/op
     p(50.0000) =  50398.757 ms/op
     p(90.0000) =  50734.301 ms/op
     p(95.0000) =  50734.301 ms/op
     p(99.0000) =  50734.301 ms/op
     p(99.9000) =  50734.301 ms/op
     p(99.9900) =  50734.301 ms/op
     p(99.9990) =  50734.301 ms/op
     p(99.9999) =  50734.301 ms/op
    p(100.0000) =  50734.301 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 26.04% complete, ETA 06:01:39
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16710.107 ms/op
# Warmup Iteration   2: 8896.119 ms/op
# Warmup Iteration   3: 8447.328 ms/op
# Warmup Iteration   4: 7885.292 ms/op
# Warmup Iteration   5: 7910.457 ms/op
Iteration   1: 7868.514 ms/op
                 executeQuery·p0.00:   7851.737 ms/op
                 executeQuery·p0.50:   7868.514 ms/op
                 executeQuery·p0.90:   7885.292 ms/op
                 executeQuery·p0.95:   7885.292 ms/op
                 executeQuery·p0.99:   7885.292 ms/op
                 executeQuery·p0.999:  7885.292 ms/op
                 executeQuery·p0.9999: 7885.292 ms/op
                 executeQuery·p1.00:   7885.292 ms/op

Iteration   2: 7872.709 ms/op
                 executeQuery·p0.00:   7860.126 ms/op
                 executeQuery·p0.50:   7872.709 ms/op
                 executeQuery·p0.90:   7885.292 ms/op
                 executeQuery·p0.95:   7885.292 ms/op
                 executeQuery·p0.99:   7885.292 ms/op
                 executeQuery·p0.999:  7885.292 ms/op
                 executeQuery·p0.9999: 7885.292 ms/op
                 executeQuery·p1.00:   7885.292 ms/op

Iteration   3: 7872.709 ms/op
                 executeQuery·p0.00:   7860.126 ms/op
                 executeQuery·p0.50:   7872.709 ms/op
                 executeQuery·p0.90:   7885.292 ms/op
                 executeQuery·p0.95:   7885.292 ms/op
                 executeQuery·p0.99:   7885.292 ms/op
                 executeQuery·p0.999:  7885.292 ms/op
                 executeQuery·p0.9999: 7885.292 ms/op
                 executeQuery·p1.00:   7885.292 ms/op

Iteration   4: 8095.007 ms/op
                 executeQuery·p0.00:   7843.348 ms/op
                 executeQuery·p0.50:   8095.007 ms/op
                 executeQuery·p0.90:   8346.665 ms/op
                 executeQuery·p0.95:   8346.665 ms/op
                 executeQuery·p0.99:   8346.665 ms/op
                 executeQuery·p0.999:  8346.665 ms/op
                 executeQuery·p0.9999: 8346.665 ms/op
                 executeQuery·p1.00:   8346.665 ms/op

Iteration   5: 8212.447 ms/op
                 executeQuery·p0.00:   7910.457 ms/op
                 executeQuery·p0.50:   8212.447 ms/op
                 executeQuery·p0.90:   8514.437 ms/op
                 executeQuery·p0.95:   8514.437 ms/op
                 executeQuery·p0.99:   8514.437 ms/op
                 executeQuery·p0.999:  8514.437 ms/op
                 executeQuery·p0.9999: 8514.437 ms/op
                 executeQuery·p1.00:   8514.437 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   7984.277 ±(99.9%) 361.827 ms/op

  Histogram, ms/op:
    [7800.000, 7850.000) = 1 
    [7850.000, 7900.000) = 6 
    [7900.000, 7950.000) = 1 
    [7950.000, 8000.000) = 0 
    [8000.000, 8050.000) = 0 
    [8050.000, 8100.000) = 0 
    [8100.000, 8150.000) = 0 
    [8150.000, 8200.000) = 0 
    [8200.000, 8250.000) = 0 
    [8250.000, 8300.000) = 0 
    [8300.000, 8350.000) = 1 
    [8350.000, 8400.000) = 0 
    [8400.000, 8450.000) = 0 
    [8450.000, 8500.000) = 0 
    [8500.000, 8550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   7843.348 ms/op
     p(50.0000) =   7885.292 ms/op
     p(90.0000) =   8497.660 ms/op
     p(95.0000) =   8514.437 ms/op
     p(99.0000) =   8514.437 ms/op
     p(99.9000) =   8514.437 ms/op
     p(99.9900) =   8514.437 ms/op
     p(99.9990) =   8514.437 ms/op
     p(99.9999) =   8514.437 ms/op
    p(100.0000) =   8514.437 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 27.08% complete, ETA 05:50:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16659.775 ms/op
# Warmup Iteration   2: 13119.783 ms/op
# Warmup Iteration   3: 13153.337 ms/op
# Warmup Iteration   4: 13941.866 ms/op
# Warmup Iteration   5: 12868.125 ms/op
Iteration   1: 12499.026 ms/op
                 executeQuery·p0.00:   12499.026 ms/op
                 executeQuery·p0.50:   12499.026 ms/op
                 executeQuery·p0.90:   12499.026 ms/op
                 executeQuery·p0.95:   12499.026 ms/op
                 executeQuery·p0.99:   12499.026 ms/op
                 executeQuery·p0.999:  12499.026 ms/op
                 executeQuery·p0.9999: 12499.026 ms/op
                 executeQuery·p1.00:   12499.026 ms/op

Iteration   2: 12499.026 ms/op
                 executeQuery·p0.00:   12499.026 ms/op
                 executeQuery·p0.50:   12499.026 ms/op
                 executeQuery·p0.90:   12499.026 ms/op
                 executeQuery·p0.95:   12499.026 ms/op
                 executeQuery·p0.99:   12499.026 ms/op
                 executeQuery·p0.999:  12499.026 ms/op
                 executeQuery·p0.9999: 12499.026 ms/op
                 executeQuery·p1.00:   12499.026 ms/op

Iteration   3: 12398.363 ms/op
                 executeQuery·p0.00:   12398.363 ms/op
                 executeQuery·p0.50:   12398.363 ms/op
                 executeQuery·p0.90:   12398.363 ms/op
                 executeQuery·p0.95:   12398.363 ms/op
                 executeQuery·p0.99:   12398.363 ms/op
                 executeQuery·p0.999:  12398.363 ms/op
                 executeQuery·p0.9999: 12398.363 ms/op
                 executeQuery·p1.00:   12398.363 ms/op

Iteration   4: 12666.798 ms/op
                 executeQuery·p0.00:   12666.798 ms/op
                 executeQuery·p0.50:   12666.798 ms/op
                 executeQuery·p0.90:   12666.798 ms/op
                 executeQuery·p0.95:   12666.798 ms/op
                 executeQuery·p0.99:   12666.798 ms/op
                 executeQuery·p0.999:  12666.798 ms/op
                 executeQuery·p0.9999: 12666.798 ms/op
                 executeQuery·p1.00:   12666.798 ms/op

Iteration   5: 12348.031 ms/op
                 executeQuery·p0.00:   12348.031 ms/op
                 executeQuery·p0.50:   12348.031 ms/op
                 executeQuery·p0.90:   12348.031 ms/op
                 executeQuery·p0.95:   12348.031 ms/op
                 executeQuery·p0.99:   12348.031 ms/op
                 executeQuery·p0.999:  12348.031 ms/op
                 executeQuery·p0.9999: 12348.031 ms/op
                 executeQuery·p1.00:   12348.031 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  12482.249 ±(99.9%) 470.318 ms/op

  Histogram, ms/op:
    [12300.000, 12325.000) = 0 
    [12325.000, 12350.000) = 1 
    [12350.000, 12375.000) = 0 
    [12375.000, 12400.000) = 1 
    [12400.000, 12425.000) = 0 
    [12425.000, 12450.000) = 0 
    [12450.000, 12475.000) = 0 
    [12475.000, 12500.000) = 2 
    [12500.000, 12525.000) = 0 
    [12525.000, 12550.000) = 0 
    [12550.000, 12575.000) = 0 
    [12575.000, 12600.000) = 0 
    [12600.000, 12625.000) = 0 
    [12625.000, 12650.000) = 0 
    [12650.000, 12675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  12348.031 ms/op
     p(50.0000) =  12499.026 ms/op
     p(90.0000) =  12666.798 ms/op
     p(95.0000) =  12666.798 ms/op
     p(99.0000) =  12666.798 ms/op
     p(99.9000) =  12666.798 ms/op
     p(99.9900) =  12666.798 ms/op
     p(99.9990) =  12666.798 ms/op
     p(99.9999) =  12666.798 ms/op
    p(100.0000) =  12666.798 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 28.13% complete, ETA 05:38:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16894.657 ms/op
# Warmup Iteration   2: 24360.518 ms/op
# Warmup Iteration   3: 14076.084 ms/op
# Warmup Iteration   4: 15451.816 ms/op
# Warmup Iteration   5: 15267.267 ms/op
Iteration   1: 14931.722 ms/op
                 executeQuery·p0.00:   14931.722 ms/op
                 executeQuery·p0.50:   14931.722 ms/op
                 executeQuery·p0.90:   14931.722 ms/op
                 executeQuery·p0.95:   14931.722 ms/op
                 executeQuery·p0.99:   14931.722 ms/op
                 executeQuery·p0.999:  14931.722 ms/op
                 executeQuery·p0.9999: 14931.722 ms/op
                 executeQuery·p1.00:   14931.722 ms/op

Iteration   2: 15653.143 ms/op
                 executeQuery·p0.00:   15653.143 ms/op
                 executeQuery·p0.50:   15653.143 ms/op
                 executeQuery·p0.90:   15653.143 ms/op
                 executeQuery·p0.95:   15653.143 ms/op
                 executeQuery·p0.99:   15653.143 ms/op
                 executeQuery·p0.999:  15653.143 ms/op
                 executeQuery·p0.9999: 15653.143 ms/op
                 executeQuery·p1.00:   15653.143 ms/op

Iteration   3: 17012.097 ms/op
                 executeQuery·p0.00:   17012.097 ms/op
                 executeQuery·p0.50:   17012.097 ms/op
                 executeQuery·p0.90:   17012.097 ms/op
                 executeQuery·p0.95:   17012.097 ms/op
                 executeQuery·p0.99:   17012.097 ms/op
                 executeQuery·p0.999:  17012.097 ms/op
                 executeQuery·p0.9999: 17012.097 ms/op
                 executeQuery·p1.00:   17012.097 ms/op

Iteration   4: 15669.920 ms/op
                 executeQuery·p0.00:   15669.920 ms/op
                 executeQuery·p0.50:   15669.920 ms/op
                 executeQuery·p0.90:   15669.920 ms/op
                 executeQuery·p0.95:   15669.920 ms/op
                 executeQuery·p0.99:   15669.920 ms/op
                 executeQuery·p0.999:  15669.920 ms/op
                 executeQuery·p0.9999: 15669.920 ms/op
                 executeQuery·p1.00:   15669.920 ms/op

Iteration   5: 14982.054 ms/op
                 executeQuery·p0.00:   14982.054 ms/op
                 executeQuery·p0.50:   14982.054 ms/op
                 executeQuery·p0.90:   14982.054 ms/op
                 executeQuery·p0.95:   14982.054 ms/op
                 executeQuery·p0.99:   14982.054 ms/op
                 executeQuery·p0.999:  14982.054 ms/op
                 executeQuery·p0.9999: 14982.054 ms/op
                 executeQuery·p1.00:   14982.054 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  15649.787 ±(99.9%) 3231.898 ms/op

  Histogram, ms/op:
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 0 
    [14500.000, 14750.000) = 0 
    [14750.000, 15000.000) = 2 
    [15000.000, 15250.000) = 0 
    [15250.000, 15500.000) = 0 
    [15500.000, 15750.000) = 2 
    [15750.000, 16000.000) = 0 
    [16000.000, 16250.000) = 0 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 0 
    [16750.000, 17000.000) = 0 
    [17000.000, 17250.000) = 1 
    [17250.000, 17500.000) = 0 
    [17500.000, 17750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  14931.722 ms/op
     p(50.0000) =  15653.143 ms/op
     p(90.0000) =  17012.097 ms/op
     p(95.0000) =  17012.097 ms/op
     p(99.0000) =  17012.097 ms/op
     p(99.9000) =  17012.097 ms/op
     p(99.9900) =  17012.097 ms/op
     p(99.9990) =  17012.097 ms/op
     p(99.9999) =  17012.097 ms/op
    p(100.0000) =  17012.097 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 29.17% complete, ETA 05:28:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

59391.345 ms/op
# Warmup Iteration   2: 53083.111 ms/op
# Warmup Iteration   3: 50264.539 ms/op
# Warmup Iteration   4: 51338.281 ms/op
# Warmup Iteration   5: 50264.539 ms/op
Iteration   1: 49123.688 ms/op
                 executeQuery·p0.00:   49123.688 ms/op
                 executeQuery·p0.50:   49123.688 ms/op
                 executeQuery·p0.90:   49123.688 ms/op
                 executeQuery·p0.95:   49123.688 ms/op
                 executeQuery·p0.99:   49123.688 ms/op
                 executeQuery·p0.999:  49123.688 ms/op
                 executeQuery·p0.9999: 49123.688 ms/op
                 executeQuery·p1.00:   49123.688 ms/op

Iteration   2: 51472.499 ms/op
                 executeQuery·p0.00:   51472.499 ms/op
                 executeQuery·p0.50:   51472.499 ms/op
                 executeQuery·p0.90:   51472.499 ms/op
                 executeQuery·p0.95:   51472.499 ms/op
                 executeQuery·p0.99:   51472.499 ms/op
                 executeQuery·p0.999:  51472.499 ms/op
                 executeQuery·p0.9999: 51472.499 ms/op
                 executeQuery·p1.00:   51472.499 ms/op

Iteration   3: 51740.934 ms/op
                 executeQuery·p0.00:   51740.934 ms/op
                 executeQuery·p0.50:   51740.934 ms/op
                 executeQuery·p0.90:   51740.934 ms/op
                 executeQuery·p0.95:   51740.934 ms/op
                 executeQuery·p0.99:   51740.934 ms/op
                 executeQuery·p0.999:  51740.934 ms/op
                 executeQuery·p0.9999: 51740.934 ms/op
                 executeQuery·p1.00:   51740.934 ms/op

Iteration   4: 51271.172 ms/op
                 executeQuery·p0.00:   51271.172 ms/op
                 executeQuery·p0.50:   51271.172 ms/op
                 executeQuery·p0.90:   51271.172 ms/op
                 executeQuery·p0.95:   51271.172 ms/op
                 executeQuery·p0.99:   51271.172 ms/op
                 executeQuery·p0.999:  51271.172 ms/op
                 executeQuery·p0.9999: 51271.172 ms/op
                 executeQuery·p1.00:   51271.172 ms/op

Iteration   5: 50935.628 ms/op
                 executeQuery·p0.00:   50935.628 ms/op
                 executeQuery·p0.50:   50935.628 ms/op
                 executeQuery·p0.90:   50935.628 ms/op
                 executeQuery·p0.95:   50935.628 ms/op
                 executeQuery·p0.99:   50935.628 ms/op
                 executeQuery·p0.999:  50935.628 ms/op
                 executeQuery·p0.9999: 50935.628 ms/op
                 executeQuery·p1.00:   50935.628 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  50908.784 ±(99.9%) 4005.808 ms/op

  Histogram, ms/op:
    [49000.000, 49250.000) = 1 
    [49250.000, 49500.000) = 0 
    [49500.000, 49750.000) = 0 
    [49750.000, 50000.000) = 0 
    [50000.000, 50250.000) = 0 
    [50250.000, 50500.000) = 0 
    [50500.000, 50750.000) = 0 
    [50750.000, 51000.000) = 1 
    [51000.000, 51250.000) = 0 
    [51250.000, 51500.000) = 2 
    [51500.000, 51750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  49123.688 ms/op
     p(50.0000) =  51271.172 ms/op
     p(90.0000) =  51740.934 ms/op
     p(95.0000) =  51740.934 ms/op
     p(99.0000) =  51740.934 ms/op
     p(99.9000) =  51740.934 ms/op
     p(99.9900) =  51740.934 ms/op
     p(99.9990) =  51740.934 ms/op
     p(99.9999) =  51740.934 ms/op
    p(100.0000) =  51740.934 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 30.21% complete, ETA 05:36:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_676063747 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_676063747() {
        this(4);
    }
    public KeyValueMap_676063747(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_676063747 aggregation_state_map = new KeyValueMap_676063747();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

110058.537 ms/op
# Warmup Iteration   2: 100931.731 ms/op
# Warmup Iteration   3: 100260.643 ms/op
# Warmup Iteration   4: 98650.030 ms/op
# Warmup Iteration   5: 100529.078 ms/op
Iteration   1: 98113.159 ms/op
                 executeQuery·p0.00:   98113.159 ms/op
                 executeQuery·p0.50:   98113.159 ms/op
                 executeQuery·p0.90:   98113.159 ms/op
                 executeQuery·p0.95:   98113.159 ms/op
                 executeQuery·p0.99:   98113.159 ms/op
                 executeQuery·p0.999:  98113.159 ms/op
                 executeQuery·p0.9999: 98113.159 ms/op
                 executeQuery·p1.00:   98113.159 ms/op

Iteration   2: 99052.683 ms/op
                 executeQuery·p0.00:   99052.683 ms/op
                 executeQuery·p0.50:   99052.683 ms/op
                 executeQuery·p0.90:   99052.683 ms/op
                 executeQuery·p0.95:   99052.683 ms/op
                 executeQuery·p0.99:   99052.683 ms/op
                 executeQuery·p0.999:  99052.683 ms/op
                 executeQuery·p0.9999: 99052.683 ms/op
                 executeQuery·p1.00:   99052.683 ms/op

Iteration   3: 99455.336 ms/op
                 executeQuery·p0.00:   99455.336 ms/op
                 executeQuery·p0.50:   99455.336 ms/op
                 executeQuery·p0.90:   99455.336 ms/op
                 executeQuery·p0.95:   99455.336 ms/op
                 executeQuery·p0.99:   99455.336 ms/op
                 executeQuery·p0.999:  99455.336 ms/op
                 executeQuery·p0.9999: 99455.336 ms/op
                 executeQuery·p1.00:   99455.336 ms/op

Iteration   4: 98918.466 ms/op
                 executeQuery·p0.00:   98918.466 ms/op
                 executeQuery·p0.50:   98918.466 ms/op
                 executeQuery·p0.90:   98918.466 ms/op
                 executeQuery·p0.95:   98918.466 ms/op
                 executeQuery·p0.99:   98918.466 ms/op
                 executeQuery·p0.999:  98918.466 ms/op
                 executeQuery·p0.9999: 98918.466 ms/op
                 executeQuery·p1.00:   98918.466 ms/op

Iteration   5: 102005.473 ms/op
                 executeQuery·p0.00:   102005.473 ms/op
                 executeQuery·p0.50:   102005.473 ms/op
                 executeQuery·p0.90:   102005.473 ms/op
                 executeQuery·p0.95:   102005.473 ms/op
                 executeQuery·p0.99:   102005.473 ms/op
                 executeQuery·p0.999:  102005.473 ms/op
                 executeQuery·p0.9999: 102005.473 ms/op
                 executeQuery·p1.00:   102005.473 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  99509.024 ±(99.9%) 5692.115 ms/op

  Histogram, ms/op:
    [ 98000.000,  98500.000) = 1 
    [ 98500.000,  99000.000) = 1 
    [ 99000.000,  99500.000) = 2 
    [ 99500.000, 100000.000) = 0 
    [100000.000, 100500.000) = 0 
    [100500.000, 101000.000) = 0 
    [101000.000, 101500.000) = 0 
    [101500.000, 102000.000) = 0 
    [102000.000, 102500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  98113.159 ms/op
     p(50.0000) =  99052.683 ms/op
     p(90.0000) = 102005.473 ms/op
     p(95.0000) = 102005.473 ms/op
     p(99.0000) = 102005.473 ms/op
     p(99.9000) = 102005.473 ms/op
     p(99.9900) = 102005.473 ms/op
     p(99.9990) = 102005.473 ms/op
     p(99.9999) = 102005.473 ms/op
    p(100.0000) = 102005.473 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 31.25% complete, ETA 06:13:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

108.032 ±(99.9%) 20.638 ms/op
# Warmup Iteration   2: 100.892 ±(99.9%) 0.927 ms/op
# Warmup Iteration   3: 103.354 ±(99.9%) 0.514 ms/op
# Warmup Iteration   4: 102.042 ±(99.9%) 0.711 ms/op
# Warmup Iteration   5: 102.685 ±(99.9%) 0.617 ms/op
Iteration   1: 102.505 ±(99.9%) 0.723 ms/op
                 executeFilterQuery·p0.00:   97.911 ms/op
                 executeFilterQuery·p0.50:   102.171 ms/op
                 executeFilterQuery·p0.90:   104.805 ms/op
                 executeFilterQuery·p0.95:   105.402 ms/op
                 executeFilterQuery·p0.99:   114.950 ms/op
                 executeFilterQuery·p0.999:  114.950 ms/op
                 executeFilterQuery·p0.9999: 114.950 ms/op
                 executeFilterQuery·p1.00:   114.950 ms/op

Iteration   2: 94.583 ±(99.9%) 0.565 ms/op
                 executeFilterQuery·p0.00:   91.357 ms/op
                 executeFilterQuery·p0.50:   94.634 ms/op
                 executeFilterQuery·p0.90:   96.600 ms/op
                 executeFilterQuery·p0.95:   97.216 ms/op
                 executeFilterQuery·p0.99:   100.776 ms/op
                 executeFilterQuery·p0.999:  100.925 ms/op
                 executeFilterQuery·p0.9999: 100.925 ms/op
                 executeFilterQuery·p1.00:   100.925 ms/op

Iteration   3: 95.859 ±(99.9%) 1.078 ms/op
                 executeFilterQuery·p0.00:   90.833 ms/op
                 executeFilterQuery·p0.50:   94.634 ms/op
                 executeFilterQuery·p0.90:   100.073 ms/op
                 executeFilterQuery·p0.95:   100.499 ms/op
                 executeFilterQuery·p0.99:   101.286 ms/op
                 executeFilterQuery·p0.999:  101.319 ms/op
                 executeFilterQuery·p0.9999: 101.319 ms/op
                 executeFilterQuery·p1.00:   101.319 ms/op

Iteration   4: 96.163 ±(99.9%) 0.873 ms/op
                 executeFilterQuery·p0.00:   90.964 ms/op
                 executeFilterQuery·p0.50:   96.141 ms/op
                 executeFilterQuery·p0.90:   99.484 ms/op
                 executeFilterQuery·p0.95:   99.877 ms/op
                 executeFilterQuery·p0.99:   102.387 ms/op
                 executeFilterQuery·p0.999:  102.498 ms/op
                 executeFilterQuery·p0.9999: 102.498 ms/op
                 executeFilterQuery·p1.00:   102.498 ms/op

Iteration   5: 99.308 ±(99.9%) 0.327 ms/op
                 executeFilterQuery·p0.00:   96.207 ms/op
                 executeFilterQuery·p0.50:   99.484 ms/op
                 executeFilterQuery·p0.90:   100.388 ms/op
                 executeFilterQuery·p0.95:   101.037 ms/op
                 executeFilterQuery·p0.99:   102.101 ms/op
                 executeFilterQuery·p0.999:  102.105 ms/op
                 executeFilterQuery·p0.9999: 102.105 ms/op
                 executeFilterQuery·p1.00:   102.105 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 509
  mean =     97.589 ±(99.9%) 0.533 ms/op

  Histogram, ms/op:
    [ 90.000,  92.500) = 34 
    [ 92.500,  95.000) = 116 
    [ 95.000,  97.500) = 79 
    [ 97.500, 100.000) = 149 
    [100.000, 102.500) = 93 
    [102.500, 105.000) = 30 
    [105.000, 107.500) = 7 
    [107.500, 110.000) = 0 
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 1 
    [115.000, 117.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     90.833 ms/op
     p(50.0000) =     98.173 ms/op
     p(90.0000) =    102.105 ms/op
     p(95.0000) =    103.678 ms/op
     p(99.0000) =    105.382 ms/op
     p(99.9000) =    114.950 ms/op
     p(99.9900) =    114.950 ms/op
     p(99.9990) =    114.950 ms/op
     p(99.9999) =    114.950 ms/op
    p(100.0000) =    114.950 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 32.29% complete, ETA 05:59:24
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

106.741 ±(99.9%) 20.484 ms/op
# Warmup Iteration   2: 99.919 ±(99.9%) 0.975 ms/op
# Warmup Iteration   3: 102.160 ±(99.9%) 0.496 ms/op
# Warmup Iteration   4: 102.628 ±(99.9%) 0.478 ms/op
# Warmup Iteration   5: 102.112 ±(99.9%) 0.638 ms/op
Iteration   1: 101.024 ±(99.9%) 0.746 ms/op
                 executeFilterQuery·p0.00:   94.896 ms/op
                 executeFilterQuery·p0.50:   100.794 ms/op
                 executeFilterQuery·p0.90:   103.416 ms/op
                 executeFilterQuery·p0.95:   103.947 ms/op
                 executeFilterQuery·p0.99:   111.673 ms/op
                 executeFilterQuery·p0.999:  111.673 ms/op
                 executeFilterQuery·p0.9999: 111.673 ms/op
                 executeFilterQuery·p1.00:   111.673 ms/op

Iteration   2: 97.498 ±(99.9%) 0.571 ms/op
                 executeFilterQuery·p0.00:   93.454 ms/op
                 executeFilterQuery·p0.50:   97.714 ms/op
                 executeFilterQuery·p0.90:   99.615 ms/op
                 executeFilterQuery·p0.95:   99.988 ms/op
                 executeFilterQuery·p0.99:   100.401 ms/op
                 executeFilterQuery·p0.999:  100.401 ms/op
                 executeFilterQuery·p0.9999: 100.401 ms/op
                 executeFilterQuery·p1.00:   100.401 ms/op

Iteration   3: 97.381 ±(99.9%) 0.565 ms/op
                 executeFilterQuery·p0.00:   94.110 ms/op
                 executeFilterQuery·p0.50:   97.386 ms/op
                 executeFilterQuery·p0.90:   99.877 ms/op
                 executeFilterQuery·p0.95:   100.139 ms/op
                 executeFilterQuery·p0.99:   100.659 ms/op
                 executeFilterQuery·p0.999:  100.663 ms/op
                 executeFilterQuery·p0.9999: 100.663 ms/op
                 executeFilterQuery·p1.00:   100.663 ms/op

Iteration   4: 97.509 ±(99.9%) 0.548 ms/op
                 executeFilterQuery·p0.00:   94.241 ms/op
                 executeFilterQuery·p0.50:   97.452 ms/op
                 executeFilterQuery·p0.90:   99.615 ms/op
                 executeFilterQuery·p0.95:   100.585 ms/op
                 executeFilterQuery·p0.99:   102.197 ms/op
                 executeFilterQuery·p0.999:  102.236 ms/op
                 executeFilterQuery·p0.9999: 102.236 ms/op
                 executeFilterQuery·p1.00:   102.236 ms/op

Iteration   5: 97.250 ±(99.9%) 0.640 ms/op
                 executeFilterQuery·p0.00:   92.537 ms/op
                 executeFilterQuery·p0.50:   97.255 ms/op
                 executeFilterQuery·p0.90:   99.615 ms/op
                 executeFilterQuery·p0.95:   100.113 ms/op
                 executeFilterQuery·p0.99:   101.691 ms/op
                 executeFilterQuery·p0.999:  101.712 ms/op
                 executeFilterQuery·p0.9999: 101.712 ms/op
                 executeFilterQuery·p1.00:   101.712 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 507
  mean =     98.108 ±(99.9%) 0.341 ms/op

  Histogram, ms/op:
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 44 
    [ 95.000,  97.500) = 167 
    [ 97.500, 100.000) = 193 
    [100.000, 102.500) = 82 
    [102.500, 105.000) = 19 
    [105.000, 107.500) = 1 
    [107.500, 110.000) = 0 
    [110.000, 112.500) = 1 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     92.537 ms/op
     p(50.0000) =     98.042 ms/op
     p(90.0000) =    100.821 ms/op
     p(95.0000) =    102.236 ms/op
     p(99.0000) =    103.930 ms/op
     p(99.9000) =    111.673 ms/op
     p(99.9900) =    111.673 ms/op
     p(99.9990) =    111.673 ms/op
     p(99.9999) =    111.673 ms/op
    p(100.0000) =    111.673 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 33.33% complete, ETA 05:46:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

106.036 ±(99.9%) 20.741 ms/op
# Warmup Iteration   2: 101.105 ±(99.9%) 0.675 ms/op
# Warmup Iteration   3: 101.852 ±(99.9%) 0.548 ms/op
# Warmup Iteration   4: 100.593 ±(99.9%) 1.051 ms/op
# Warmup Iteration   5: 99.400 ±(99.9%) 0.515 ms/op
Iteration   1: 98.874 ±(99.9%) 0.630 ms/op
                 executeFilterQuery·p0.00:   94.634 ms/op
                 executeFilterQuery·p0.50:   98.959 ms/op
                 executeFilterQuery·p0.90:   101.161 ms/op
                 executeFilterQuery·p0.95:   101.817 ms/op
                 executeFilterQuery·p0.99:   103.154 ms/op
                 executeFilterQuery·p0.999:  103.154 ms/op
                 executeFilterQuery·p0.9999: 103.154 ms/op
                 executeFilterQuery·p1.00:   103.154 ms/op

Iteration   2: 98.291 ±(99.9%) 0.822 ms/op
                 executeFilterQuery·p0.00:   94.634 ms/op
                 executeFilterQuery·p0.50:   97.911 ms/op
                 executeFilterQuery·p0.90:   100.925 ms/op
                 executeFilterQuery·p0.95:   103.599 ms/op
                 executeFilterQuery·p0.99:   104.464 ms/op
                 executeFilterQuery·p0.999:  104.464 ms/op
                 executeFilterQuery·p0.9999: 104.464 ms/op
                 executeFilterQuery·p1.00:   104.464 ms/op

Iteration   3: 100.976 ±(99.9%) 0.480 ms/op
                 executeFilterQuery·p0.00:   97.780 ms/op
                 executeFilterQuery·p0.50:   100.794 ms/op
                 executeFilterQuery·p0.90:   102.774 ms/op
                 executeFilterQuery·p0.95:   103.160 ms/op
                 executeFilterQuery·p0.99:   104.071 ms/op
                 executeFilterQuery·p0.999:  104.071 ms/op
                 executeFilterQuery·p0.9999: 104.071 ms/op
                 executeFilterQuery·p1.00:   104.071 ms/op

Iteration   4: 97.775 ±(99.9%) 0.929 ms/op
                 executeFilterQuery·p0.00:   93.192 ms/op
                 executeFilterQuery·p0.50:   96.666 ms/op
                 executeFilterQuery·p0.90:   101.804 ms/op
                 executeFilterQuery·p0.95:   102.348 ms/op
                 executeFilterQuery·p0.99:   103.920 ms/op
                 executeFilterQuery·p0.999:  103.940 ms/op
                 executeFilterQuery·p0.9999: 103.940 ms/op
                 executeFilterQuery·p1.00:   103.940 ms/op

Iteration   5: 96.223 ±(99.9%) 0.627 ms/op
                 executeFilterQuery·p0.00:   92.275 ms/op
                 executeFilterQuery·p0.50:   96.207 ms/op
                 executeFilterQuery·p0.90:   98.828 ms/op
                 executeFilterQuery·p0.95:   99.713 ms/op
                 executeFilterQuery·p0.99:   101.273 ms/op
                 executeFilterQuery·p0.999:  101.319 ms/op
                 executeFilterQuery·p0.9999: 101.319 ms/op
                 executeFilterQuery·p1.00:   101.319 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 506
  mean =     98.398 ±(99.9%) 0.386 ms/op

  Histogram, ms/op:
    [ 90.000,  91.250) = 0 
    [ 91.250,  92.500) = 1 
    [ 92.500,  93.750) = 12 
    [ 93.750,  95.000) = 33 
    [ 95.000,  96.250) = 82 
    [ 96.250,  97.500) = 79 
    [ 97.500,  98.750) = 64 
    [ 98.750, 100.000) = 72 
    [100.000, 101.250) = 91 
    [101.250, 102.500) = 45 
    [102.500, 103.750) = 20 
    [103.750, 105.000) = 7 
    [105.000, 106.250) = 0 
    [106.250, 107.500) = 0 
    [107.500, 108.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     92.275 ms/op
     p(50.0000) =     98.435 ms/op
     p(90.0000) =    101.974 ms/op
     p(95.0000) =    102.715 ms/op
     p(99.0000) =    104.062 ms/op
     p(99.9000) =    104.464 ms/op
     p(99.9900) =    104.464 ms/op
     p(99.9990) =    104.464 ms/op
     p(99.9999) =    104.464 ms/op
    p(100.0000) =    104.464 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 34.38% complete, ETA 05:33:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2095.474 ±(99.9%) 8896.961 ms/op
# Warmup Iteration   2: 923.509 ±(99.9%) 23.186 ms/op
# Warmup Iteration   3: 912.833 ±(99.9%) 30.990 ms/op
# Warmup Iteration   4: 926.655 ±(99.9%) 6.017 ms/op
# Warmup Iteration   5: 944.386 ±(99.9%) 13.040 ms/op
Iteration   1: 958.589 ±(99.9%) 25.622 ms/op
                 executeFilterQuery·p0.00:   926.941 ms/op
                 executeFilterQuery·p0.50:   953.156 ms/op
                 executeFilterQuery·p0.90:   980.838 ms/op
                 executeFilterQuery·p0.95:   981.467 ms/op
                 executeFilterQuery·p0.99:   981.467 ms/op
                 executeFilterQuery·p0.999:  981.467 ms/op
                 executeFilterQuery·p0.9999: 981.467 ms/op
                 executeFilterQuery·p1.00:   981.467 ms/op

Iteration   2: 962.593 ±(99.9%) 24.379 ms/op
                 executeFilterQuery·p0.00:   934.281 ms/op
                 executeFilterQuery·p0.50:   969.933 ms/op
                 executeFilterQuery·p0.90:   981.887 ms/op
                 executeFilterQuery·p0.95:   982.516 ms/op
                 executeFilterQuery·p0.99:   982.516 ms/op
                 executeFilterQuery·p0.999:  982.516 ms/op
                 executeFilterQuery·p0.9999: 982.516 ms/op
                 executeFilterQuery·p1.00:   982.516 ms/op

Iteration   3: 934.377 ±(99.9%) 3.969 ms/op
                 executeFilterQuery·p0.00:   927.990 ms/op
                 executeFilterQuery·p0.50:   934.281 ms/op
                 executeFilterQuery·p0.90:   938.266 ms/op
                 executeFilterQuery·p0.95:   938.476 ms/op
                 executeFilterQuery·p0.99:   938.476 ms/op
                 executeFilterQuery·p0.999:  938.476 ms/op
                 executeFilterQuery·p0.9999: 938.476 ms/op
                 executeFilterQuery·p1.00:   938.476 ms/op

Iteration   4: 903.261 ±(99.9%) 28.660 ms/op
                 executeFilterQuery·p0.00:   882.901 ms/op
                 executeFilterQuery·p0.50:   891.290 ms/op
                 executeFilterQuery·p0.90:   935.015 ms/op
                 executeFilterQuery·p0.95:   935.330 ms/op
                 executeFilterQuery·p0.99:   935.330 ms/op
                 executeFilterQuery·p0.999:  935.330 ms/op
                 executeFilterQuery·p0.9999: 935.330 ms/op
                 executeFilterQuery·p1.00:   935.330 ms/op

Iteration   5: 925.797 ±(99.9%) 22.112 ms/op
                 executeFilterQuery·p0.00:   887.095 ms/op
                 executeFilterQuery·p0.50:   931.135 ms/op
                 executeFilterQuery·p0.90:   942.670 ms/op
                 executeFilterQuery·p0.95:   943.718 ms/op
                 executeFilterQuery·p0.99:   943.718 ms/op
                 executeFilterQuery·p0.999:  943.718 ms/op
                 executeFilterQuery·p0.9999: 943.718 ms/op
                 executeFilterQuery·p1.00:   943.718 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 56
  mean =    936.322 ±(99.9%) 12.854 ms/op

  Histogram, ms/op:
    [880.000, 890.000) = 5 
    [890.000, 900.000) = 4 
    [900.000, 910.000) = 0 
    [910.000, 920.000) = 4 
    [920.000, 930.000) = 2 
    [930.000, 940.000) = 22 
    [940.000, 950.000) = 2 
    [950.000, 960.000) = 5 
    [960.000, 970.000) = 3 
    [970.000, 980.000) = 7 

  Percentiles, ms/op:
      p(0.0000) =    882.901 ms/op
     p(50.0000) =    935.330 ms/op
     p(90.0000) =    977.273 ms/op
     p(95.0000) =    979.685 ms/op
     p(99.0000) =    982.516 ms/op
     p(99.9000) =    982.516 ms/op
     p(99.9900) =    982.516 ms/op
     p(99.9990) =    982.516 ms/op
     p(99.9999) =    982.516 ms/op
    p(100.0000) =    982.516 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 35.42% complete, ETA 05:22:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2062.759 ±(99.9%) 8918.792 ms/op
# Warmup Iteration   2: 923.128 ±(99.9%) 19.373 ms/op
# Warmup Iteration   3: 953.632 ±(99.9%) 27.980 ms/op
# Warmup Iteration   4: 973.555 ±(99.9%) 38.670 ms/op
# Warmup Iteration   5: 965.262 ±(99.9%) 8.830 ms/op
Iteration   1: 954.871 ±(99.9%) 37.834 ms/op
                 executeFilterQuery·p0.00:   910.164 ms/op
                 executeFilterQuery·p0.50:   965.738 ms/op
                 executeFilterQuery·p0.90:   982.306 ms/op
                 executeFilterQuery·p0.95:   982.516 ms/op
                 executeFilterQuery·p0.99:   982.516 ms/op
                 executeFilterQuery·p0.999:  982.516 ms/op
                 executeFilterQuery·p0.9999: 982.516 ms/op
                 executeFilterQuery·p1.00:   982.516 ms/op

Iteration   2: 916.837 ±(99.9%) 11.331 ms/op
                 executeFilterQuery·p0.00:   907.018 ms/op
                 executeFilterQuery·p0.50:   918.553 ms/op
                 executeFilterQuery·p0.90:   927.361 ms/op
                 executeFilterQuery·p0.95:   927.990 ms/op
                 executeFilterQuery·p0.99:   927.990 ms/op
                 executeFilterQuery·p0.999:  927.990 ms/op
                 executeFilterQuery·p0.9999: 927.990 ms/op
                 executeFilterQuery·p1.00:   927.990 ms/op

Iteration   3: 919.601 ±(99.9%) 10.131 ms/op
                 executeFilterQuery·p0.00:   908.067 ms/op
                 executeFilterQuery·p0.50:   920.650 ms/op
                 executeFilterQuery·p0.90:   932.184 ms/op
                 executeFilterQuery·p0.95:   933.233 ms/op
                 executeFilterQuery·p0.99:   933.233 ms/op
                 executeFilterQuery·p0.999:  933.233 ms/op
                 executeFilterQuery·p0.9999: 933.233 ms/op
                 executeFilterQuery·p1.00:   933.233 ms/op

Iteration   4: 915.026 ±(99.9%) 9.560 ms/op
                 executeFilterQuery·p0.00:   907.018 ms/op
                 executeFilterQuery·p0.50:   915.407 ms/op
                 executeFilterQuery·p0.90:   924.425 ms/op
                 executeFilterQuery·p0.95:   924.844 ms/op
                 executeFilterQuery·p0.99:   924.844 ms/op
                 executeFilterQuery·p0.999:  924.844 ms/op
                 executeFilterQuery·p0.9999: 924.844 ms/op
                 executeFilterQuery·p1.00:   924.844 ms/op

Iteration   5: 925.797 ±(99.9%) 30.759 ms/op
                 executeFilterQuery·p0.00:   903.873 ms/op
                 executeFilterQuery·p0.50:   917.504 ms/op
                 executeFilterQuery·p0.90:   972.449 ms/op
                 executeFilterQuery·p0.95:   975.176 ms/op
                 executeFilterQuery·p0.99:   975.176 ms/op
                 executeFilterQuery·p0.999:  975.176 ms/op
                 executeFilterQuery·p0.9999: 975.176 ms/op
                 executeFilterQuery·p1.00:   975.176 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 55
  mean =    926.426 ±(99.9%) 10.291 ms/op

  Histogram, ms/op:
    [900.000, 905.000) = 1 
    [905.000, 910.000) = 9 
    [910.000, 915.000) = 10 
    [915.000, 920.000) = 8 
    [920.000, 925.000) = 12 
    [925.000, 930.000) = 3 
    [930.000, 935.000) = 2 
    [935.000, 940.000) = 0 
    [940.000, 945.000) = 1 
    [945.000, 950.000) = 0 
    [950.000, 955.000) = 0 
    [955.000, 960.000) = 0 
    [960.000, 965.000) = 2 
    [965.000, 970.000) = 3 
    [970.000, 975.000) = 0 
    [975.000, 980.000) = 1 
    [980.000, 985.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    903.873 ms/op
     p(50.0000) =    919.601 ms/op
     p(90.0000) =    969.933 ms/op
     p(95.0000) =    980.628 ms/op
     p(99.0000) =    982.516 ms/op
     p(99.9000) =    982.516 ms/op
     p(99.9900) =    982.516 ms/op
     p(99.9990) =    982.516 ms/op
     p(99.9999) =    982.516 ms/op
    p(100.0000) =    982.516 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 36.46% complete, ETA 05:10:52
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2083.101 ±(99.9%) 8677.671 ms/op
# Warmup Iteration   2: 941.431 ±(99.9%) 24.239 ms/op
# Warmup Iteration   3: 972.888 ±(99.9%) 30.049 ms/op
# Warmup Iteration   4: 984.041 ±(99.9%) 9.971 ms/op
# Warmup Iteration   5: 983.564 ±(99.9%) 6.049 ms/op
Iteration   1: 980.609 ±(99.9%) 6.640 ms/op
                 executeFilterQuery·p0.00:   973.079 ms/op
                 executeFilterQuery·p0.50:   979.370 ms/op
                 executeFilterQuery·p0.90:   989.017 ms/op
                 executeFilterQuery·p0.95:   989.856 ms/op
                 executeFilterQuery·p0.99:   989.856 ms/op
                 executeFilterQuery·p0.999:  989.856 ms/op
                 executeFilterQuery·p0.9999: 989.856 ms/op
                 executeFilterQuery·p1.00:   989.856 ms/op

Iteration   2: 956.015 ±(99.9%) 32.167 ms/op
                 executeFilterQuery·p0.00:   925.893 ms/op
                 executeFilterQuery·p0.50:   973.079 ms/op
                 executeFilterQuery·p0.90:   980.628 ms/op
                 executeFilterQuery·p0.95:   981.467 ms/op
                 executeFilterQuery·p0.99:   981.467 ms/op
                 executeFilterQuery·p0.999:  981.467 ms/op
                 executeFilterQuery·p0.9999: 981.467 ms/op
                 executeFilterQuery·p1.00:   981.467 ms/op

Iteration   3: 934.091 ±(99.9%) 15.777 ms/op
                 executeFilterQuery·p0.00:   907.018 ms/op
                 executeFilterQuery·p0.50:   935.330 ms/op
                 executeFilterQuery·p0.90:   948.752 ms/op
                 executeFilterQuery·p0.95:   950.010 ms/op
                 executeFilterQuery·p0.99:   950.010 ms/op
                 executeFilterQuery·p0.999:  950.010 ms/op
                 executeFilterQuery·p0.9999: 950.010 ms/op
                 executeFilterQuery·p1.00:   950.010 ms/op

Iteration   4: 930.754 ±(99.9%) 12.327 ms/op
                 executeFilterQuery·p0.00:   921.698 ms/op
                 executeFilterQuery·p0.50:   927.990 ms/op
                 executeFilterQuery·p0.90:   946.445 ms/op
                 executeFilterQuery·p0.95:   946.864 ms/op
                 executeFilterQuery·p0.99:   946.864 ms/op
                 executeFilterQuery·p0.999:  946.864 ms/op
                 executeFilterQuery·p0.9999: 946.864 ms/op
                 executeFilterQuery·p1.00:   946.864 ms/op

Iteration   5: 938.571 ±(99.9%) 8.664 ms/op
                 executeFilterQuery·p0.00:   927.990 ms/op
                 executeFilterQuery·p0.50:   939.524 ms/op
                 executeFilterQuery·p0.90:   946.654 ms/op
                 executeFilterQuery·p0.95:   946.864 ms/op
                 executeFilterQuery·p0.99:   946.864 ms/op
                 executeFilterQuery·p0.999:  946.864 ms/op
                 executeFilterQuery·p0.9999: 946.864 ms/op
                 executeFilterQuery·p1.00:   946.864 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 55
  mean =    948.008 ±(99.9%) 10.475 ms/op

  Histogram, ms/op:
    [900.000, 905.000) = 0 
    [905.000, 910.000) = 1 
    [910.000, 915.000) = 0 
    [915.000, 920.000) = 0 
    [920.000, 925.000) = 5 
    [925.000, 930.000) = 6 
    [930.000, 935.000) = 8 
    [935.000, 940.000) = 10 
    [940.000, 945.000) = 4 
    [945.000, 950.000) = 3 
    [950.000, 955.000) = 1 
    [955.000, 960.000) = 0 
    [960.000, 965.000) = 0 
    [965.000, 970.000) = 0 
    [970.000, 975.000) = 3 
    [975.000, 980.000) = 8 
    [980.000, 985.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    907.018 ms/op
     p(50.0000) =    939.524 ms/op
     p(90.0000) =    981.887 ms/op
     p(95.0000) =    983.984 ms/op
     p(99.0000) =    989.856 ms/op
     p(99.9000) =    989.856 ms/op
     p(99.9900) =    989.856 ms/op
     p(99.9990) =    989.856 ms/op
     p(99.9999) =    989.856 ms/op
    p(100.0000) =    989.856 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 37.50% complete, ETA 05:00:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12901.679 ms/op
# Warmup Iteration   2: 1893.728 ±(99.9%) 684.067 ms/op
# Warmup Iteration   3: 1810.891 ±(99.9%) 136.847 ms/op
# Warmup Iteration   4: 1854.232 ±(99.9%) 38.727 ms/op
# Warmup Iteration   5: 1860.523 ±(99.9%) 152.285 ms/op
Iteration   1: 1788.871 ±(99.9%) 87.464 ms/op
                 executeFilterQuery·p0.00:   1734.345 ms/op
                 executeFilterQuery·p0.50:   1793.065 ms/op
                 executeFilterQuery·p0.90:   1830.814 ms/op
                 executeFilterQuery·p0.95:   1830.814 ms/op
                 executeFilterQuery·p0.99:   1830.814 ms/op
                 executeFilterQuery·p0.999:  1830.814 ms/op
                 executeFilterQuery·p0.9999: 1830.814 ms/op
                 executeFilterQuery·p1.00:   1830.814 ms/op

Iteration   2: 1809.143 ±(99.9%) 61.077 ms/op
                 executeFilterQuery·p0.00:   1769.996 ms/op
                 executeFilterQuery·p0.50:   1817.182 ms/op
                 executeFilterQuery·p0.90:   1828.717 ms/op
                 executeFilterQuery·p0.95:   1828.717 ms/op
                 executeFilterQuery·p0.99:   1828.717 ms/op
                 executeFilterQuery·p0.999:  1828.717 ms/op
                 executeFilterQuery·p0.9999: 1828.717 ms/op
                 executeFilterQuery·p1.00:   1828.717 ms/op

Iteration   3: 1733.296 ±(99.9%) 113.714 ms/op
                 executeFilterQuery·p0.00:   1709.179 ms/op
                 executeFilterQuery·p0.50:   1715.470 ms/op
                 executeFilterQuery·p0.90:   1814.036 ms/op
                 executeFilterQuery·p0.95:   1814.036 ms/op
                 executeFilterQuery·p0.99:   1814.036 ms/op
                 executeFilterQuery·p0.999:  1814.036 ms/op
                 executeFilterQuery·p0.9999: 1814.036 ms/op
                 executeFilterQuery·p1.00:   1814.036 ms/op

Iteration   4: 1895.126 ±(99.9%) 108.543 ms/op
                 executeFilterQuery·p0.00:   1824.522 ms/op
                 executeFilterQuery·p0.50:   1898.971 ms/op
                 executeFilterQuery·p0.90:   1935.671 ms/op
                 executeFilterQuery·p0.95:   1935.671 ms/op
                 executeFilterQuery·p0.99:   1935.671 ms/op
                 executeFilterQuery·p0.999:  1935.671 ms/op
                 executeFilterQuery·p0.9999: 1935.671 ms/op
                 executeFilterQuery·p1.00:   1935.671 ms/op

Iteration   5: 1890.583 ±(99.9%) 62.320 ms/op
                 executeFilterQuery·p0.00:   1853.882 ms/op
                 executeFilterQuery·p0.50:   1893.728 ms/op
                 executeFilterQuery·p0.90:   1916.797 ms/op
                 executeFilterQuery·p0.95:   1916.797 ms/op
                 executeFilterQuery·p0.99:   1916.797 ms/op
                 executeFilterQuery·p0.999:  1916.797 ms/op
                 executeFilterQuery·p0.9999: 1916.797 ms/op
                 executeFilterQuery·p1.00:   1916.797 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 30
  mean =   1823.404 ±(99.9%) 46.496 ms/op

  Histogram, ms/op:
    [1700.000, 1725.000) = 4 
    [1725.000, 1750.000) = 2 
    [1750.000, 1775.000) = 1 
    [1775.000, 1800.000) = 5 
    [1800.000, 1825.000) = 5 
    [1825.000, 1850.000) = 2 
    [1850.000, 1875.000) = 1 
    [1875.000, 1900.000) = 5 
    [1900.000, 1925.000) = 4 
    [1925.000, 1950.000) = 1 
    [1950.000, 1975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1709.179 ms/op
     p(50.0000) =   1822.425 ms/op
     p(90.0000) =   1915.748 ms/op
     p(95.0000) =   1928.751 ms/op
     p(99.0000) =   1935.671 ms/op
     p(99.9000) =   1935.671 ms/op
     p(99.9900) =   1935.671 ms/op
     p(99.9990) =   1935.671 ms/op
     p(99.9999) =   1935.671 ms/op
    p(100.0000) =   1935.671 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 38.54% complete, ETA 04:50:20
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12398.363 ms/op
# Warmup Iteration   2: 1940.565 ±(99.9%) 655.584 ms/op
# Warmup Iteration   3: 1890.233 ±(99.9%) 108.224 ms/op
# Warmup Iteration   4: 1919.943 ±(99.9%) 68.959 ms/op
# Warmup Iteration   5: 1930.778 ±(99.9%) 33.197 ms/op
Iteration   1: 1832.911 ±(99.9%) 53.383 ms/op
                 executeFilterQuery·p0.00:   1805.648 ms/op
                 executeFilterQuery·p0.50:   1831.862 ms/op
                 executeFilterQuery·p0.90:   1864.368 ms/op
                 executeFilterQuery·p0.95:   1864.368 ms/op
                 executeFilterQuery·p0.99:   1864.368 ms/op
                 executeFilterQuery·p0.999:  1864.368 ms/op
                 executeFilterQuery·p0.9999: 1864.368 ms/op
                 executeFilterQuery·p1.00:   1864.368 ms/op

Iteration   2: 1822.775 ±(99.9%) 46.813 ms/op
                 executeFilterQuery·p0.00:   1807.745 ms/op
                 executeFilterQuery·p0.50:   1816.134 ms/op
                 executeFilterQuery·p0.90:   1853.882 ms/op
                 executeFilterQuery·p0.95:   1853.882 ms/op
                 executeFilterQuery·p0.99:   1853.882 ms/op
                 executeFilterQuery·p0.999:  1853.882 ms/op
                 executeFilterQuery·p0.9999: 1853.882 ms/op
                 executeFilterQuery·p1.00:   1853.882 ms/op

Iteration   3: 1828.717 ±(99.9%) 24.104 ms/op
                 executeFilterQuery·p0.00:   1818.231 ms/op
                 executeFilterQuery·p0.50:   1831.862 ms/op
                 executeFilterQuery·p0.90:   1839.202 ms/op
                 executeFilterQuery·p0.95:   1839.202 ms/op
                 executeFilterQuery·p0.99:   1839.202 ms/op
                 executeFilterQuery·p0.999:  1839.202 ms/op
                 executeFilterQuery·p0.9999: 1839.202 ms/op
                 executeFilterQuery·p1.00:   1839.202 ms/op

Iteration   4: 1886.388 ±(99.9%) 78.614 ms/op
                 executeFilterQuery·p0.00:   1837.105 ms/op
                 executeFilterQuery·p0.50:   1889.534 ms/op
                 executeFilterQuery·p0.90:   1914.700 ms/op
                 executeFilterQuery·p0.95:   1914.700 ms/op
                 executeFilterQuery·p0.99:   1914.700 ms/op
                 executeFilterQuery·p0.999:  1914.700 ms/op
                 executeFilterQuery·p0.9999: 1914.700 ms/op
                 executeFilterQuery·p1.00:   1914.700 ms/op

Iteration   5: 5392.826 ±(99.9%) 44996.543 ms/op
                 executeFilterQuery·p0.00:   1889.534 ms/op
                 executeFilterQuery·p0.50:   1922.040 ms/op
                 executeFilterQuery·p0.90:   15837.692 ms/op
                 executeFilterQuery·p0.95:   15837.692 ms/op
                 executeFilterQuery·p0.99:   15837.692 ms/op
                 executeFilterQuery·p0.999:  15837.692 ms/op
                 executeFilterQuery·p0.9999: 15837.692 ms/op
                 executeFilterQuery·p1.00:   15837.692 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 28
  mean =   2349.859 ±(99.9%) 1843.311 ms/op

  Histogram, ms/op:
    [    0.000,  1250.000) = 0 
    [ 1250.000,  2500.000) = 27 
    [ 2500.000,  3750.000) = 0 
    [ 3750.000,  5000.000) = 0 
    [ 5000.000,  6250.000) = 0 
    [ 6250.000,  7500.000) = 0 
    [ 7500.000,  8750.000) = 0 
    [ 8750.000, 10000.000) = 0 
    [10000.000, 11250.000) = 0 
    [11250.000, 12500.000) = 0 
    [12500.000, 13750.000) = 0 
    [13750.000, 15000.000) = 0 
    [15000.000, 16250.000) = 1 
    [16250.000, 17500.000) = 0 
    [17500.000, 18750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1805.648 ms/op
     p(50.0000) =   1836.057 ms/op
     p(90.0000) =   1916.377 ms/op
     p(95.0000) =   9579.895 ms/op
     p(99.0000) =  15837.692 ms/op
     p(99.9000) =  15837.692 ms/op
     p(99.9900) =  15837.692 ms/op
     p(99.9990) =  15837.692 ms/op
     p(99.9999) =  15837.692 ms/op
    p(100.0000) =  15837.692 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 39.58% complete, ETA 04:41:08
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12264.145 ms/op
# Warmup Iteration   2: 2025.010 ±(99.9%) 878.430 ms/op
# Warmup Iteration   3: 1890.583 ±(99.9%) 127.316 ms/op
# Warmup Iteration   4: 1953.497 ±(99.9%) 42.529 ms/op
# Warmup Iteration   5: 1954.196 ±(99.9%) 34.775 ms/op
Iteration   1: 1871.359 ±(99.9%) 120.272 ms/op
                 executeFilterQuery·p0.00:   1837.105 ms/op
                 executeFilterQuery·p0.50:   1859.125 ms/op
                 executeFilterQuery·p0.90:   1952.449 ms/op
                 executeFilterQuery·p0.95:   1952.449 ms/op
                 executeFilterQuery·p0.99:   1952.449 ms/op
                 executeFilterQuery·p0.999:  1952.449 ms/op
                 executeFilterQuery·p0.9999: 1952.449 ms/op
                 executeFilterQuery·p1.00:   1952.449 ms/op

Iteration   2: 1866.465 ±(99.9%) 54.916 ms/op
                 executeFilterQuery·p0.00:   1837.105 ms/op
                 executeFilterQuery·p0.50:   1871.708 ms/op
                 executeFilterQuery·p0.90:   1893.728 ms/op
                 executeFilterQuery·p0.95:   1893.728 ms/op
                 executeFilterQuery·p0.99:   1893.728 ms/op
                 executeFilterQuery·p0.999:  1893.728 ms/op
                 executeFilterQuery·p0.9999: 1893.728 ms/op
                 executeFilterQuery·p1.00:   1893.728 ms/op

Iteration   3: 1854.931 ±(99.9%) 21.285 ms/op
                 executeFilterQuery·p0.00:   1843.397 ms/op
                 executeFilterQuery·p0.50:   1853.882 ms/op
                 executeFilterQuery·p0.90:   1864.368 ms/op
                 executeFilterQuery·p0.95:   1864.368 ms/op
                 executeFilterQuery·p0.99:   1864.368 ms/op
                 executeFilterQuery·p0.999:  1864.368 ms/op
                 executeFilterQuery·p0.9999: 1864.368 ms/op
                 executeFilterQuery·p1.00:   1864.368 ms/op

Iteration   4: 1900.020 ±(99.9%) 111.332 ms/op
                 executeFilterQuery·p0.00:   1843.397 ms/op
                 executeFilterQuery·p0.50:   1905.263 ms/op
                 executeFilterQuery·p0.90:   1939.866 ms/op
                 executeFilterQuery·p0.95:   1939.866 ms/op
                 executeFilterQuery·p0.99:   1939.866 ms/op
                 executeFilterQuery·p0.999:  1939.866 ms/op
                 executeFilterQuery·p0.9999: 1939.866 ms/op
                 executeFilterQuery·p1.00:   1939.866 ms/op

Iteration   5: 1953.148 ±(99.9%) 49.993 ms/op
                 executeFilterQuery·p0.00:   1929.380 ms/op
                 executeFilterQuery·p0.50:   1961.886 ms/op
                 executeFilterQuery·p0.90:   1969.226 ms/op
                 executeFilterQuery·p0.95:   1969.226 ms/op
                 executeFilterQuery·p0.99:   1969.226 ms/op
                 executeFilterQuery·p0.999:  1969.226 ms/op
                 executeFilterQuery·p0.9999: 1969.226 ms/op
                 executeFilterQuery·p1.00:   1969.226 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 30
  mean =   1889.184 ±(99.9%) 29.922 ms/op

  Histogram, ms/op:
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 2 
    [1837.500, 1850.000) = 3 
    [1850.000, 1862.500) = 7 
    [1862.500, 1875.000) = 5 
    [1875.000, 1887.500) = 2 
    [1887.500, 1900.000) = 1 
    [1900.000, 1912.500) = 0 
    [1912.500, 1925.000) = 0 
    [1925.000, 1937.500) = 4 
    [1937.500, 1950.000) = 1 
    [1950.000, 1962.500) = 2 
    [1962.500, 1975.000) = 3 
    [1975.000, 1987.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1837.105 ms/op
     p(50.0000) =   1872.757 ms/op
     p(90.0000) =   1962.725 ms/op
     p(95.0000) =   1966.919 ms/op
     p(99.0000) =   1969.226 ms/op
     p(99.9000) =   1969.226 ms/op
     p(99.9900) =   1969.226 ms/op
     p(99.9990) =   1969.226 ms/op
     p(99.9999) =   1969.226 ms/op
    p(100.0000) =   1969.226 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 40.63% complete, ETA 04:32:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

109.167 ±(99.9%) 30.052 ms/op
# Warmup Iteration   2: 98.634 ±(99.9%) 1.083 ms/op
# Warmup Iteration   3: 101.177 ±(99.9%) 0.468 ms/op
# Warmup Iteration   4: 99.537 ±(99.9%) 0.610 ms/op
# Warmup Iteration   5: 100.711 ±(99.9%) 0.510 ms/op
Iteration   1: 102.504 ±(99.9%) 0.887 ms/op
                 executeFilterQuery·p0.00:   99.484 ms/op
                 executeFilterQuery·p0.50:   101.712 ms/op
                 executeFilterQuery·p0.90:   104.255 ms/op
                 executeFilterQuery·p0.95:   104.989 ms/op
                 executeFilterQuery·p0.99:   119.538 ms/op
                 executeFilterQuery·p0.999:  119.538 ms/op
                 executeFilterQuery·p0.9999: 119.538 ms/op
                 executeFilterQuery·p1.00:   119.538 ms/op

Iteration   2: 98.584 ±(99.9%) 1.133 ms/op
                 executeFilterQuery·p0.00:   91.226 ms/op
                 executeFilterQuery·p0.50:   99.746 ms/op
                 executeFilterQuery·p0.90:   101.948 ms/op
                 executeFilterQuery·p0.95:   102.223 ms/op
                 executeFilterQuery·p0.99:   109.180 ms/op
                 executeFilterQuery·p0.999:  109.314 ms/op
                 executeFilterQuery·p0.9999: 109.314 ms/op
                 executeFilterQuery·p1.00:   109.314 ms/op

Iteration   3: 94.276 ±(99.9%) 0.639 ms/op
                 executeFilterQuery·p0.00:   90.964 ms/op
                 executeFilterQuery·p0.50:   94.241 ms/op
                 executeFilterQuery·p0.90:   96.993 ms/op
                 executeFilterQuery·p0.95:   98.107 ms/op
                 executeFilterQuery·p0.99:   100.731 ms/op
                 executeFilterQuery·p0.999:  100.794 ms/op
                 executeFilterQuery·p0.9999: 100.794 ms/op
                 executeFilterQuery·p1.00:   100.794 ms/op

Iteration   4: 96.823 ±(99.9%) 0.984 ms/op
                 executeFilterQuery·p0.00:   91.881 ms/op
                 executeFilterQuery·p0.50:   95.814 ms/op
                 executeFilterQuery·p0.90:   101.555 ms/op
                 executeFilterQuery·p0.95:   102.603 ms/op
                 executeFilterQuery·p0.99:   103.652 ms/op
                 executeFilterQuery·p0.999:  103.678 ms/op
                 executeFilterQuery·p0.9999: 103.678 ms/op
                 executeFilterQuery·p1.00:   103.678 ms/op

Iteration   5: 95.858 ±(99.9%) 0.586 ms/op
                 executeFilterQuery·p0.00:   92.275 ms/op
                 executeFilterQuery·p0.50:   95.683 ms/op
                 executeFilterQuery·p0.90:   98.632 ms/op
                 executeFilterQuery·p0.95:   99.189 ms/op
                 executeFilterQuery·p0.99:   100.624 ms/op
                 executeFilterQuery·p0.999:  100.663 ms/op
                 executeFilterQuery·p0.9999: 100.663 ms/op
                 executeFilterQuery·p1.00:   100.663 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 508
  mean =     97.511 ±(99.9%) 0.555 ms/op

  Histogram, ms/op:
    [ 90.000,  92.500) = 31 
    [ 92.500,  95.000) = 119 
    [ 95.000,  97.500) = 136 
    [ 97.500, 100.000) = 62 
    [100.000, 102.500) = 120 
    [102.500, 105.000) = 36 
    [105.000, 107.500) = 1 
    [107.500, 110.000) = 1 
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     90.964 ms/op
     p(50.0000) =     96.469 ms/op
     p(90.0000) =    102.105 ms/op
     p(95.0000) =    103.226 ms/op
     p(99.0000) =    104.989 ms/op
     p(99.9000) =    119.538 ms/op
     p(99.9900) =    119.538 ms/op
     p(99.9990) =    119.538 ms/op
     p(99.9999) =    119.538 ms/op
    p(100.0000) =    119.538 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 41.67% complete, ETA 04:22:59
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

108.087 ±(99.9%) 28.966 ms/op
# Warmup Iteration   2: 94.944 ±(99.9%) 1.246 ms/op
# Warmup Iteration   3: 97.377 ±(99.9%) 0.483 ms/op
# Warmup Iteration   4: 97.431 ±(99.9%) 0.693 ms/op
# Warmup Iteration   5: 98.903 ±(99.9%) 0.919 ms/op
Iteration   1: 96.848 ±(99.9%) 0.919 ms/op
                 executeFilterQuery·p0.00:   91.881 ms/op
                 executeFilterQuery·p0.50:   95.879 ms/op
                 executeFilterQuery·p0.90:   101.201 ms/op
                 executeFilterQuery·p0.95:   101.692 ms/op
                 executeFilterQuery·p0.99:   102.498 ms/op
                 executeFilterQuery·p0.999:  102.498 ms/op
                 executeFilterQuery·p0.9999: 102.498 ms/op
                 executeFilterQuery·p1.00:   102.498 ms/op

Iteration   2: 93.128 ±(99.9%) 0.663 ms/op
                 executeFilterQuery·p0.00:   89.260 ms/op
                 executeFilterQuery·p0.50:   92.930 ms/op
                 executeFilterQuery·p0.90:   95.814 ms/op
                 executeFilterQuery·p0.95:   96.967 ms/op
                 executeFilterQuery·p0.99:   99.117 ms/op
                 executeFilterQuery·p0.999:  99.222 ms/op
                 executeFilterQuery·p0.9999: 99.222 ms/op
                 executeFilterQuery·p1.00:   99.222 ms/op

Iteration   3: 92.243 ±(99.9%) 0.690 ms/op
                 executeFilterQuery·p0.00:   89.260 ms/op
                 executeFilterQuery·p0.50:   91.619 ms/op
                 executeFilterQuery·p0.90:   95.302 ms/op
                 executeFilterQuery·p0.95:   95.945 ms/op
                 executeFilterQuery·p0.99:   96.445 ms/op
                 executeFilterQuery·p0.999:  96.469 ms/op
                 executeFilterQuery·p0.9999: 96.469 ms/op
                 executeFilterQuery·p1.00:   96.469 ms/op

Iteration   4: 92.237 ±(99.9%) 0.466 ms/op
                 executeFilterQuery·p0.00:   89.915 ms/op
                 executeFilterQuery·p0.50:   92.013 ms/op
                 executeFilterQuery·p0.90:   93.979 ms/op
                 executeFilterQuery·p0.95:   94.837 ms/op
                 executeFilterQuery·p0.99:   97.196 ms/op
                 executeFilterQuery·p0.999:  97.255 ms/op
                 executeFilterQuery·p0.9999: 97.255 ms/op
                 executeFilterQuery·p1.00:   97.255 ms/op

Iteration   5: 92.435 ±(99.9%) 0.593 ms/op
                 executeFilterQuery·p0.00:   89.129 ms/op
                 executeFilterQuery·p0.50:   92.013 ms/op
                 executeFilterQuery·p0.90:   95.171 ms/op
                 executeFilterQuery·p0.95:   95.781 ms/op
                 executeFilterQuery·p0.99:   96.839 ms/op
                 executeFilterQuery·p0.999:  96.862 ms/op
                 executeFilterQuery·p0.9999: 96.862 ms/op
                 executeFilterQuery·p1.00:   96.862 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 533
  mean =     93.340 ±(99.9%) 0.386 ms/op

  Histogram, ms/op:
    [ 80.000,  82.500) = 0 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 0 
    [ 87.500,  90.000) = 28 
    [ 90.000,  92.500) = 203 
    [ 92.500,  95.000) = 178 
    [ 95.000,  97.500) = 82 
    [ 97.500, 100.000) = 23 
    [100.000, 102.500) = 19 
    [102.500, 105.000) = 0 
    [105.000, 107.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     89.129 ms/op
     p(50.0000) =     92.930 ms/op
     p(90.0000) =     96.600 ms/op
     p(95.0000) =     98.868 ms/op
     p(99.0000) =    101.667 ms/op
     p(99.9000) =    102.498 ms/op
     p(99.9900) =    102.498 ms/op
     p(99.9990) =    102.498 ms/op
     p(99.9999) =    102.498 ms/op
    p(100.0000) =    102.498 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 42.71% complete, ETA 04:14:17
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

120.999 ±(99.9%) 32.597 ms/op
# Warmup Iteration   2: 121.031 ±(99.9%) 0.436 ms/op
# Warmup Iteration   3: 120.410 ±(99.9%) 0.197 ms/op
# Warmup Iteration   4: 120.372 ±(99.9%) 0.170 ms/op
# Warmup Iteration   5: 120.628 ±(99.9%) 0.179 ms/op
Iteration   1: 120.658 ±(99.9%) 0.514 ms/op
                 executeFilterQuery·p0.00:   119.931 ms/op
                 executeFilterQuery·p0.50:   120.455 ms/op
                 executeFilterQuery·p0.90:   121.071 ms/op
                 executeFilterQuery·p0.95:   121.464 ms/op
                 executeFilterQuery·p0.99:   132.383 ms/op
                 executeFilterQuery·p0.999:  132.383 ms/op
                 executeFilterQuery·p0.9999: 132.383 ms/op
                 executeFilterQuery·p1.00:   132.383 ms/op

Iteration   2: 120.705 ±(99.9%) 0.127 ms/op
                 executeFilterQuery·p0.00:   119.931 ms/op
                 executeFilterQuery·p0.50:   120.586 ms/op
                 executeFilterQuery·p0.90:   121.111 ms/op
                 executeFilterQuery·p0.95:   121.373 ms/op
                 executeFilterQuery·p0.99:   121.897 ms/op
                 executeFilterQuery·p0.999:  121.897 ms/op
                 executeFilterQuery·p0.9999: 121.897 ms/op
                 executeFilterQuery·p1.00:   121.897 ms/op

Iteration   3: 120.788 ±(99.9%) 0.115 ms/op
                 executeFilterQuery·p0.00:   120.193 ms/op
                 executeFilterQuery·p0.50:   120.717 ms/op
                 executeFilterQuery·p0.90:   121.242 ms/op
                 executeFilterQuery·p0.95:   121.373 ms/op
                 executeFilterQuery·p0.99:   121.635 ms/op
                 executeFilterQuery·p0.999:  121.635 ms/op
                 executeFilterQuery·p0.9999: 121.635 ms/op
                 executeFilterQuery·p1.00:   121.635 ms/op

Iteration   4: 120.899 ±(99.9%) 0.174 ms/op
                 executeFilterQuery·p0.00:   120.193 ms/op
                 executeFilterQuery·p0.50:   120.848 ms/op
                 executeFilterQuery·p0.90:   121.609 ms/op
                 executeFilterQuery·p0.95:   122.133 ms/op
                 executeFilterQuery·p0.99:   122.421 ms/op
                 executeFilterQuery·p0.999:  122.421 ms/op
                 executeFilterQuery·p0.9999: 122.421 ms/op
                 executeFilterQuery·p1.00:   122.421 ms/op

Iteration   5: 120.858 ±(99.9%) 0.143 ms/op
                 executeFilterQuery·p0.00:   120.193 ms/op
                 executeFilterQuery·p0.50:   120.848 ms/op
                 executeFilterQuery·p0.90:   121.242 ms/op
                 executeFilterQuery·p0.95:   121.766 ms/op
                 executeFilterQuery·p0.99:   122.290 ms/op
                 executeFilterQuery·p0.999:  122.290 ms/op
                 executeFilterQuery·p0.9999: 122.290 ms/op
                 executeFilterQuery·p1.00:   122.290 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 414
  mean =    120.782 ±(99.9%) 0.114 ms/op

  Histogram, ms/op:
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 0 
    [117.500, 120.000) = 3 
    [120.000, 122.500) = 410 
    [122.500, 125.000) = 0 
    [125.000, 127.500) = 0 
    [127.500, 130.000) = 0 
    [130.000, 132.500) = 1 
    [132.500, 135.000) = 0 
    [135.000, 137.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    119.931 ms/op
     p(50.0000) =    120.717 ms/op
     p(90.0000) =    121.242 ms/op
     p(95.0000) =    121.504 ms/op
     p(99.0000) =    122.271 ms/op
     p(99.9000) =    132.383 ms/op
     p(99.9900) =    132.383 ms/op
     p(99.9990) =    132.383 ms/op
     p(99.9999) =    132.383 ms/op
    p(100.0000) =    132.383 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 43.75% complete, ETA 04:05:55
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3379.211 ±(99.9%) 74780.648 ms/op
# Warmup Iteration   2: 949.247 ±(99.9%) 43.872 ms/op
# Warmup Iteration   3: 994.717 ±(99.9%) 31.057 ms/op
# Warmup Iteration   4: 978.226 ±(99.9%) 34.210 ms/op
# Warmup Iteration   5: 942.003 ±(99.9%) 21.784 ms/op
Iteration   1: 948.389 ±(99.9%) 47.615 ms/op
                 executeFilterQuery·p0.00:   893.387 ms/op
                 executeFilterQuery·p0.50:   958.398 ms/op
                 executeFilterQuery·p0.90:   991.324 ms/op
                 executeFilterQuery·p0.95:   993.001 ms/op
                 executeFilterQuery·p0.99:   993.001 ms/op
                 executeFilterQuery·p0.999:  993.001 ms/op
                 executeFilterQuery·p0.9999: 993.001 ms/op
                 executeFilterQuery·p1.00:   993.001 ms/op

Iteration   2: 993.192 ±(99.9%) 30.279 ms/op
                 executeFilterQuery·p0.00:   977.273 ms/op
                 executeFilterQuery·p0.50:   983.564 ms/op
                 executeFilterQuery·p0.90:   1032.638 ms/op
                 executeFilterQuery·p0.95:   1032.847 ms/op
                 executeFilterQuery·p0.99:   1032.847 ms/op
                 executeFilterQuery·p0.999:  1032.847 ms/op
                 executeFilterQuery·p0.9999: 1032.847 ms/op
                 executeFilterQuery·p1.00:   1032.847 ms/op

Iteration   3: 952.870 ±(99.9%) 43.977 ms/op
                 executeFilterQuery·p0.00:   914.358 ms/op
                 executeFilterQuery·p0.50:   951.058 ms/op
                 executeFilterQuery·p0.90:   1006.843 ms/op
                 executeFilterQuery·p0.95:   1012.924 ms/op
                 executeFilterQuery·p0.99:   1012.924 ms/op
                 executeFilterQuery·p0.999:  1012.924 ms/op
                 executeFilterQuery·p0.9999: 1012.924 ms/op
                 executeFilterQuery·p1.00:   1012.924 ms/op

Iteration   4: 953.251 ±(99.9%) 23.234 ms/op
                 executeFilterQuery·p0.00:   940.573 ms/op
                 executeFilterQuery·p0.50:   946.864 ms/op
                 executeFilterQuery·p0.90:   987.759 ms/op
                 executeFilterQuery·p0.95:   988.807 ms/op
                 executeFilterQuery·p0.99:   988.807 ms/op
                 executeFilterQuery·p0.999:  988.807 ms/op
                 executeFilterQuery·p0.9999: 988.807 ms/op
                 executeFilterQuery·p1.00:   988.807 ms/op

Iteration   5: 933.614 ±(99.9%) 34.746 ms/op
                 executeFilterQuery·p0.00:   888.144 ms/op
                 executeFilterQuery·p0.50:   946.864 ms/op
                 executeFilterQuery·p0.90:   960.286 ms/op
                 executeFilterQuery·p0.95:   962.593 ms/op
                 executeFilterQuery·p0.99:   962.593 ms/op
                 executeFilterQuery·p0.999:  962.593 ms/op
                 executeFilterQuery·p0.9999: 962.593 ms/op
                 executeFilterQuery·p1.00:   962.593 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 55
  mean =    956.263 ±(99.9%) 15.305 ms/op

  Histogram, ms/op:
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 3 
    [ 900.000,  925.000) = 6 
    [ 925.000,  950.000) = 16 
    [ 950.000,  975.000) = 10 
    [ 975.000, 1000.000) = 16 
    [1000.000, 1025.000) = 2 
    [1025.000, 1050.000) = 2 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    888.144 ms/op
     p(50.0000) =    951.058 ms/op
     p(90.0000) =    990.485 ms/op
     p(95.0000) =   1017.538 ms/op
     p(99.0000) =   1032.847 ms/op
     p(99.9000) =   1032.847 ms/op
     p(99.9900) =   1032.847 ms/op
     p(99.9990) =   1032.847 ms/op
     p(99.9999) =   1032.847 ms/op
    p(100.0000) =   1032.847 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 44.79% complete, ETA 03:57:58
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3392.143 ±(99.9%) 74446.753 ms/op
# Warmup Iteration   2: 898.630 ±(99.9%) 48.099 ms/op
# Warmup Iteration   3: 914.740 ±(99.9%) 35.405 ms/op
# Warmup Iteration   4: 924.749 ±(99.9%) 8.417 ms/op
# Warmup Iteration   5: 923.319 ±(99.9%) 7.261 ms/op
Iteration   1: 924.844 ±(99.9%) 7.701 ms/op
                 executeFilterQuery·p0.00:   916.455 ms/op
                 executeFilterQuery·p0.50:   924.844 ms/op
                 executeFilterQuery·p0.90:   934.701 ms/op
                 executeFilterQuery·p0.95:   935.330 ms/op
                 executeFilterQuery·p0.99:   935.330 ms/op
                 executeFilterQuery·p0.999:  935.330 ms/op
                 executeFilterQuery·p0.9999: 935.330 ms/op
                 executeFilterQuery·p1.00:   935.330 ms/op

Iteration   2: 927.037 ±(99.9%) 8.215 ms/op
                 executeFilterQuery·p0.00:   919.601 ms/op
                 executeFilterQuery·p0.50:   927.990 ms/op
                 executeFilterQuery·p0.90:   934.910 ms/op
                 executeFilterQuery·p0.95:   935.330 ms/op
                 executeFilterQuery·p0.99:   935.330 ms/op
                 executeFilterQuery·p0.999:  935.330 ms/op
                 executeFilterQuery·p0.9999: 935.330 ms/op
                 executeFilterQuery·p1.00:   935.330 ms/op

Iteration   3: 928.943 ±(99.9%) 6.565 ms/op
                 executeFilterQuery·p0.00:   918.553 ms/op
                 executeFilterQuery·p0.50:   930.087 ms/op
                 executeFilterQuery·p0.90:   934.910 ms/op
                 executeFilterQuery·p0.95:   935.330 ms/op
                 executeFilterQuery·p0.99:   935.330 ms/op
                 executeFilterQuery·p0.999:  935.330 ms/op
                 executeFilterQuery·p0.9999: 935.330 ms/op
                 executeFilterQuery·p1.00:   935.330 ms/op

Iteration   4: 877.658 ±(99.9%) 8.099 ms/op
                 executeFilterQuery·p0.00:   866.124 ms/op
                 executeFilterQuery·p0.50:   877.658 ms/op
                 executeFilterQuery·p0.90:   888.773 ms/op
                 executeFilterQuery·p0.95:   891.290 ms/op
                 executeFilterQuery·p0.99:   891.290 ms/op
                 executeFilterQuery·p0.999:  891.290 ms/op
                 executeFilterQuery·p0.9999: 891.290 ms/op
                 executeFilterQuery·p1.00:   891.290 ms/op

Iteration   5: 879.318 ±(99.9%) 5.881 ms/op
                 executeFilterQuery·p0.00:   871.367 ms/op
                 executeFilterQuery·p0.50:   879.755 ms/op
                 executeFilterQuery·p0.90:   886.152 ms/op
                 executeFilterQuery·p0.95:   887.095 ms/op
                 executeFilterQuery·p0.99:   887.095 ms/op
                 executeFilterQuery·p0.999:  887.095 ms/op
                 executeFilterQuery·p0.9999: 887.095 ms/op
                 executeFilterQuery·p1.00:   887.095 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 57
  mean =    906.540 ±(99.9%) 11.383 ms/op

  Histogram, ms/op:
    [860.000, 865.000) = 0 
    [865.000, 870.000) = 1 
    [870.000, 875.000) = 5 
    [875.000, 880.000) = 8 
    [880.000, 885.000) = 8 
    [885.000, 890.000) = 1 
    [890.000, 895.000) = 1 
    [895.000, 900.000) = 0 
    [900.000, 905.000) = 0 
    [905.000, 910.000) = 0 
    [910.000, 915.000) = 0 
    [915.000, 920.000) = 5 
    [920.000, 925.000) = 8 
    [925.000, 930.000) = 7 
    [930.000, 935.000) = 10 

  Percentiles, ms/op:
      p(0.0000) =    866.124 ms/op
     p(50.0000) =    919.601 ms/op
     p(90.0000) =    932.394 ms/op
     p(95.0000) =    935.330 ms/op
     p(99.0000) =    935.330 ms/op
     p(99.9000) =    935.330 ms/op
     p(99.9900) =    935.330 ms/op
     p(99.9990) =    935.330 ms/op
     p(99.9999) =    935.330 ms/op
    p(100.0000) =    935.330 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 45.83% complete, ETA 03:50:15
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3408.571 ±(99.9%) 73520.582 ms/op
# Warmup Iteration   2: 1126.870 ±(99.9%) 112.665 ms/op
# Warmup Iteration   3: 1165.317 ±(99.9%) 10.275 ms/op
# Warmup Iteration   4: 1163.686 ±(99.9%) 4.111 ms/op
# Warmup Iteration   5: 1167.415 ±(99.9%) 9.651 ms/op
Iteration   1: 1171.376 ±(99.9%) 3.984 ms/op
                 executeFilterQuery·p0.00:   1166.017 ms/op
                 executeFilterQuery·p0.50:   1172.308 ms/op
                 executeFilterQuery·p0.90:   1174.405 ms/op
                 executeFilterQuery·p0.95:   1174.405 ms/op
                 executeFilterQuery·p0.99:   1174.405 ms/op
                 executeFilterQuery·p0.999:  1174.405 ms/op
                 executeFilterQuery·p0.9999: 1174.405 ms/op
                 executeFilterQuery·p1.00:   1174.405 ms/op

Iteration   2: 1172.308 ±(99.9%) 4.984 ms/op
                 executeFilterQuery·p0.00:   1168.114 ms/op
                 executeFilterQuery·p0.50:   1172.308 ms/op
                 executeFilterQuery·p0.90:   1176.502 ms/op
                 executeFilterQuery·p0.95:   1176.502 ms/op
                 executeFilterQuery·p0.99:   1176.502 ms/op
                 executeFilterQuery·p0.999:  1176.502 ms/op
                 executeFilterQuery·p0.9999: 1176.502 ms/op
                 executeFilterQuery·p1.00:   1176.502 ms/op

Iteration   3: 1172.541 ±(99.9%) 4.111 ms/op
                 executeFilterQuery·p0.00:   1168.114 ms/op
                 executeFilterQuery·p0.50:   1172.308 ms/op
                 executeFilterQuery·p0.90:   1176.502 ms/op
                 executeFilterQuery·p0.95:   1176.502 ms/op
                 executeFilterQuery·p0.99:   1176.502 ms/op
                 executeFilterQuery·p0.999:  1176.502 ms/op
                 executeFilterQuery·p0.9999: 1176.502 ms/op
                 executeFilterQuery·p1.00:   1176.502 ms/op

Iteration   4: 1169.279 ±(99.9%) 10.734 ms/op
                 executeFilterQuery·p0.00:   1161.822 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1184.891 ms/op
                 executeFilterQuery·p0.95:   1184.891 ms/op
                 executeFilterQuery·p0.99:   1184.891 ms/op
                 executeFilterQuery·p0.999:  1184.891 ms/op
                 executeFilterQuery·p0.9999: 1184.891 ms/op
                 executeFilterQuery·p1.00:   1184.891 ms/op

Iteration   5: 1169.745 ±(99.9%) 7.636 ms/op
                 executeFilterQuery·p0.00:   1166.017 ms/op
                 executeFilterQuery·p0.50:   1168.114 ms/op
                 executeFilterQuery·p0.90:   1180.697 ms/op
                 executeFilterQuery·p0.95:   1180.697 ms/op
                 executeFilterQuery·p0.99:   1180.697 ms/op
                 executeFilterQuery·p0.999:  1180.697 ms/op
                 executeFilterQuery·p0.9999: 1180.697 ms/op
                 executeFilterQuery·p1.00:   1180.697 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 45
  mean =   1171.050 ±(99.9%) 2.146 ms/op

  Histogram, ms/op:
    [1160.000, 1162.500) = 1 
    [1162.500, 1165.000) = 0 
    [1165.000, 1167.500) = 5 
    [1167.500, 1170.000) = 10 
    [1170.000, 1172.500) = 19 
    [1172.500, 1175.000) = 6 
    [1175.000, 1177.500) = 2 
    [1177.500, 1180.000) = 0 
    [1180.000, 1182.500) = 1 
    [1182.500, 1185.000) = 1 
    [1185.000, 1187.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1161.822 ms/op
     p(50.0000) =   1170.211 ms/op
     p(90.0000) =   1175.244 ms/op
     p(95.0000) =   1179.438 ms/op
     p(99.0000) =   1184.891 ms/op
     p(99.9000) =   1184.891 ms/op
     p(99.9900) =   1184.891 ms/op
     p(99.9990) =   1184.891 ms/op
     p(99.9999) =   1184.891 ms/op
    p(100.0000) =   1184.891 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 46.88% complete, ETA 03:42:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

16055.796 ms/op
# Warmup Iteration   2: 1881.495 ±(99.9%) 214.062 ms/op
# Warmup Iteration   3: 1868.213 ±(99.9%) 155.921 ms/op
# Warmup Iteration   4: 1982.158 ±(99.9%) 111.978 ms/op
# Warmup Iteration   5: 1952.449 ±(99.9%) 74.758 ms/op
Iteration   1: 1957.342 ±(99.9%) 59.819 ms/op
                 executeFilterQuery·p0.00:   1923.088 ms/op
                 executeFilterQuery·p0.50:   1960.837 ms/op
                 executeFilterQuery·p0.90:   1977.614 ms/op
                 executeFilterQuery·p0.95:   1977.614 ms/op
                 executeFilterQuery·p0.99:   1977.614 ms/op
                 executeFilterQuery·p0.999:  1977.614 ms/op
                 executeFilterQuery·p0.9999: 1977.614 ms/op
                 executeFilterQuery·p1.00:   1977.614 ms/op

Iteration   2: 1901.418 ±(99.9%) 135.471 ms/op
                 executeFilterQuery·p0.00:   1851.785 ms/op
                 executeFilterQuery·p0.50:   1886.388 ms/op
                 executeFilterQuery·p0.90:   1981.809 ms/op
                 executeFilterQuery·p0.95:   1981.809 ms/op
                 executeFilterQuery·p0.99:   1981.809 ms/op
                 executeFilterQuery·p0.999:  1981.809 ms/op
                 executeFilterQuery·p0.9999: 1981.809 ms/op
                 executeFilterQuery·p1.00:   1981.809 ms/op

Iteration   3: 1853.533 ±(99.9%) 109.542 ms/op
                 executeFilterQuery·p0.00:   1774.191 ms/op
                 executeFilterQuery·p0.50:   1867.514 ms/op
                 executeFilterQuery·p0.90:   1874.854 ms/op
                 executeFilterQuery·p0.95:   1874.854 ms/op
                 executeFilterQuery·p0.99:   1874.854 ms/op
                 executeFilterQuery·p0.999:  1874.854 ms/op
                 executeFilterQuery·p0.9999: 1874.854 ms/op
                 executeFilterQuery·p1.00:   1874.854 ms/op

Iteration   4: 1794.813 ±(99.9%) 28.427 ms/op
                 executeFilterQuery·p0.00:   1778.385 ms/op
                 executeFilterQuery·p0.50:   1799.356 ms/op
                 executeFilterQuery·p0.90:   1805.648 ms/op
                 executeFilterQuery·p0.95:   1805.648 ms/op
                 executeFilterQuery·p0.99:   1805.648 ms/op
                 executeFilterQuery·p0.999:  1805.648 ms/op
                 executeFilterQuery·p0.9999: 1805.648 ms/op
                 executeFilterQuery·p1.00:   1805.648 ms/op

Iteration   5: 1843.746 ±(99.9%) 81.945 ms/op
                 executeFilterQuery·p0.00:   1807.745 ms/op
                 executeFilterQuery·p0.50:   1849.688 ms/op
                 executeFilterQuery·p0.90:   1876.951 ms/op
                 executeFilterQuery·p0.95:   1876.951 ms/op
                 executeFilterQuery·p0.99:   1876.951 ms/op
                 executeFilterQuery·p0.999:  1876.951 ms/op
                 executeFilterQuery·p0.9999: 1876.951 ms/op
                 executeFilterQuery·p1.00:   1876.951 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 30
  mean =   1870.170 ±(99.9%) 42.570 ms/op

  Histogram, ms/op:
    [1700.000, 1725.000) = 0 
    [1725.000, 1750.000) = 0 
    [1750.000, 1775.000) = 1 
    [1775.000, 1800.000) = 5 
    [1800.000, 1825.000) = 3 
    [1825.000, 1850.000) = 1 
    [1850.000, 1875.000) = 9 
    [1875.000, 1900.000) = 3 
    [1900.000, 1925.000) = 1 
    [1925.000, 1950.000) = 2 
    [1950.000, 1975.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1774.191 ms/op
     p(50.0000) =   1868.562 ms/op
     p(90.0000) =   1976.566 ms/op
     p(95.0000) =   1979.502 ms/op
     p(99.0000) =   1981.809 ms/op
     p(99.9000) =   1981.809 ms/op
     p(99.9900) =   1981.809 ms/op
     p(99.9990) =   1981.809 ms/op
     p(99.9999) =   1981.809 ms/op
    p(100.0000) =   1981.809 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 47.92% complete, ETA 03:35:54
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1901.767 ±(99.9%) 510.668 ms/op
# Warmup Iteration   2: 1871.708 ±(99.9%) 22.547 ms/op
# Warmup Iteration   3: 1773.142 ±(99.9%) 33.834 ms/op
# Warmup Iteration   4: 1808.095 ±(99.9%) 166.808 ms/op
# Warmup Iteration   5: 1881.495 ±(99.9%) 34.775 ms/op
Iteration   1: 1875.203 ±(99.9%) 27.437 ms/op
                 executeFilterQuery·p0.00:   1864.368 ms/op
                 executeFilterQuery·p0.50:   1874.854 ms/op
                 executeFilterQuery·p0.90:   1891.631 ms/op
                 executeFilterQuery·p0.95:   1891.631 ms/op
                 executeFilterQuery·p0.99:   1891.631 ms/op
                 executeFilterQuery·p0.999:  1891.631 ms/op
                 executeFilterQuery·p0.9999: 1891.631 ms/op
                 executeFilterQuery·p1.00:   1891.631 ms/op

Iteration   2: 1785.725 ±(99.9%) 136.341 ms/op
                 executeFilterQuery·p0.00:   1753.219 ms/op
                 executeFilterQuery·p0.50:   1765.802 ms/op
                 executeFilterQuery·p0.90:   1881.145 ms/op
                 executeFilterQuery·p0.95:   1881.145 ms/op
                 executeFilterQuery·p0.99:   1881.145 ms/op
                 executeFilterQuery·p0.999:  1881.145 ms/op
                 executeFilterQuery·p0.9999: 1881.145 ms/op
                 executeFilterQuery·p1.00:   1881.145 ms/op

Iteration   3: 1772.093 ±(99.9%) 31.560 ms/op
                 executeFilterQuery·p0.00:   1755.316 ms/op
                 executeFilterQuery·p0.50:   1772.093 ms/op
                 executeFilterQuery·p0.90:   1788.871 ms/op
                 executeFilterQuery·p0.95:   1788.871 ms/op
                 executeFilterQuery·p0.99:   1788.871 ms/op
                 executeFilterQuery·p0.999:  1788.871 ms/op
                 executeFilterQuery·p0.9999: 1788.871 ms/op
                 executeFilterQuery·p1.00:   1788.871 ms/op

Iteration   4: 1770.695 ±(99.9%) 28.244 ms/op
                 executeFilterQuery·p0.00:   1759.511 ms/op
                 executeFilterQuery·p0.50:   1771.045 ms/op
                 executeFilterQuery·p0.90:   1782.579 ms/op
                 executeFilterQuery·p0.95:   1782.579 ms/op
                 executeFilterQuery·p0.99:   1782.579 ms/op
                 executeFilterQuery·p0.999:  1782.579 ms/op
                 executeFilterQuery·p0.9999: 1782.579 ms/op
                 executeFilterQuery·p1.00:   1782.579 ms/op

Iteration   5: 1764.753 ±(99.9%) 23.743 ms/op
                 executeFilterQuery·p0.00:   1753.219 ms/op
                 executeFilterQuery·p0.50:   1764.753 ms/op
                 executeFilterQuery·p0.90:   1778.385 ms/op
                 executeFilterQuery·p0.95:   1778.385 ms/op
                 executeFilterQuery·p0.99:   1778.385 ms/op
                 executeFilterQuery·p0.999:  1778.385 ms/op
                 executeFilterQuery·p0.9999: 1778.385 ms/op
                 executeFilterQuery·p1.00:   1778.385 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 30
  mean =   1793.694 ±(99.9%) 31.640 ms/op

  Histogram, ms/op:
    [1700.000, 1712.500) = 0 
    [1712.500, 1725.000) = 0 
    [1725.000, 1737.500) = 0 
    [1737.500, 1750.000) = 0 
    [1750.000, 1762.500) = 8 
    [1762.500, 1775.000) = 8 
    [1775.000, 1787.500) = 5 
    [1787.500, 1800.000) = 2 
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 0 
    [1837.500, 1850.000) = 0 
    [1850.000, 1862.500) = 0 
    [1862.500, 1875.000) = 4 
    [1875.000, 1887.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1753.219 ms/op
     p(50.0000) =   1772.093 ms/op
     p(90.0000) =   1878.629 ms/op
     p(95.0000) =   1885.864 ms/op
     p(99.0000) =   1891.631 ms/op
     p(99.9000) =   1891.631 ms/op
     p(99.9900) =   1891.631 ms/op
     p(99.9990) =   1891.631 ms/op
     p(99.9999) =   1891.631 ms/op
    p(100.0000) =   1891.631 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 48.96% complete, ETA 03:29:01
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

13304.332 ms/op
# Warmup Iteration   2: 2314.836 ±(99.9%) 688.552 ms/op
# Warmup Iteration   3: 2449.474 ±(99.9%) 16.151 ms/op
# Warmup Iteration   4: 2438.568 ±(99.9%) 14.446 ms/op
# Warmup Iteration   5: 2440.246 ±(99.9%) 7.223 ms/op
Iteration   1: 2440.246 ±(99.9%) 21.058 ms/op
                 executeFilterQuery·p0.00:   2432.696 ms/op
                 executeFilterQuery·p0.50:   2441.085 ms/op
                 executeFilterQuery·p0.90:   2445.279 ms/op
                 executeFilterQuery·p0.95:   2445.279 ms/op
                 executeFilterQuery·p0.99:   2445.279 ms/op
                 executeFilterQuery·p0.999:  2445.279 ms/op
                 executeFilterQuery·p0.9999: 2445.279 ms/op
                 executeFilterQuery·p1.00:   2445.279 ms/op

Iteration   2: 2441.085 ±(99.9%) 30.215 ms/op
                 executeFilterQuery·p0.00:   2432.696 ms/op
                 executeFilterQuery·p0.50:   2441.085 ms/op
                 executeFilterQuery·p0.90:   2453.668 ms/op
                 executeFilterQuery·p0.95:   2453.668 ms/op
                 executeFilterQuery·p0.99:   2453.668 ms/op
                 executeFilterQuery·p0.999:  2453.668 ms/op
                 executeFilterQuery·p0.9999: 2453.668 ms/op
                 executeFilterQuery·p1.00:   2453.668 ms/op

Iteration   3: 2448.635 ±(99.9%) 23.955 ms/op
                 executeFilterQuery·p0.00:   2441.085 ms/op
                 executeFilterQuery·p0.50:   2449.474 ms/op
                 executeFilterQuery·p0.90:   2457.862 ms/op
                 executeFilterQuery·p0.95:   2457.862 ms/op
                 executeFilterQuery·p0.99:   2457.862 ms/op
                 executeFilterQuery·p0.999:  2457.862 ms/op
                 executeFilterQuery·p0.9999: 2457.862 ms/op
                 executeFilterQuery·p1.00:   2457.862 ms/op

Iteration   4: 2446.957 ±(99.9%) 18.415 ms/op
                 executeFilterQuery·p0.00:   2441.085 ms/op
                 executeFilterQuery·p0.50:   2445.279 ms/op
                 executeFilterQuery·p0.90:   2453.668 ms/op
                 executeFilterQuery·p0.95:   2453.668 ms/op
                 executeFilterQuery·p0.99:   2453.668 ms/op
                 executeFilterQuery·p0.999:  2453.668 ms/op
                 executeFilterQuery·p0.9999: 2453.668 ms/op
                 executeFilterQuery·p1.00:   2453.668 ms/op

Iteration   5: 2446.118 ±(99.9%) 7.223 ms/op
                 executeFilterQuery·p0.00:   2445.279 ms/op
                 executeFilterQuery·p0.50:   2445.279 ms/op
                 executeFilterQuery·p0.90:   2449.474 ms/op
                 executeFilterQuery·p0.95:   2449.474 ms/op
                 executeFilterQuery·p0.99:   2449.474 ms/op
                 executeFilterQuery·p0.999:  2449.474 ms/op
                 executeFilterQuery·p0.9999: 2449.474 ms/op
                 executeFilterQuery·p1.00:   2449.474 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 25
  mean =   2444.608 ±(99.9%) 4.596 ms/op

  Histogram, ms/op:
    [2430.000, 2432.500) = 0 
    [2432.500, 2435.000) = 2 
    [2435.000, 2437.500) = 2 
    [2437.500, 2440.000) = 0 
    [2440.000, 2442.500) = 5 
    [2442.500, 2445.000) = 0 
    [2445.000, 2447.500) = 9 
    [2447.500, 2450.000) = 4 
    [2450.000, 2452.500) = 0 
    [2452.500, 2455.000) = 2 
    [2455.000, 2457.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2432.696 ms/op
     p(50.0000) =   2445.279 ms/op
     p(90.0000) =   2453.668 ms/op
     p(95.0000) =   2456.604 ms/op
     p(99.0000) =   2457.862 ms/op
     p(99.9000) =   2457.862 ms/op
     p(99.9900) =   2457.862 ms/op
     p(99.9990) =   2457.862 ms/op
     p(99.9999) =   2457.862 ms/op
    p(100.0000) =   2457.862 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 50.00% complete, ETA 03:22:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_2126513010 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_2126513010() {
        this(4);
    }
    public KeyMultiRecordMap_2126513010(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_2126513010 join_map = new KeyMultiRecordMap_2126513010();
private final class KeyMultiRecordMap_1452830465 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1452830465() {
        this(4);
    }
    public KeyMultiRecordMap_1452830465(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1452830465 join_map_0 = new KeyMultiRecordMap_1452830465();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4722.786 ±(99.9%) 3271.610 ms/op
# Warmup Iteration   2: 4455.749 ±(99.9%) 2908.085 ms/op
# Warmup Iteration   3: 4367.669 ±(99.9%) 1380.186 ms/op
# Warmup Iteration   4: 4363.474 ±(99.9%) 1623.829 ms/op
# Warmup Iteration   5: 4283.782 ±(99.9%) 1301.585 ms/op
Iteration   1: 4377.455 ±(99.9%) 1745.477 ms/op
                 executeQuery·p0.00:   4273.996 ms/op
                 executeQuery·p0.50:   4395.631 ms/op
                 executeQuery·p0.90:   4462.739 ms/op
                 executeQuery·p0.95:   4462.739 ms/op
                 executeQuery·p0.99:   4462.739 ms/op
                 executeQuery·p0.999:  4462.739 ms/op
                 executeQuery·p0.9999: 4462.739 ms/op
                 executeQuery·p1.00:   4462.739 ms/op

Iteration   2: 4406.815 ±(99.9%) 1925.704 ms/op
                 executeQuery·p0.00:   4294.967 ms/op
                 executeQuery·p0.50:   4420.796 ms/op
                 executeQuery·p0.90:   4504.682 ms/op
                 executeQuery·p0.95:   4504.682 ms/op
                 executeQuery·p0.99:   4504.682 ms/op
                 executeQuery·p0.999:  4504.682 ms/op
                 executeQuery·p0.9999: 4504.682 ms/op
                 executeQuery·p1.00:   4504.682 ms/op

Iteration   3: 4287.977 ±(99.9%) 1308.316 ms/op
                 executeQuery·p0.00:   4240.441 ms/op
                 executeQuery·p0.50:   4253.024 ms/op
                 executeQuery·p0.90:   4370.465 ms/op
                 executeQuery·p0.95:   4370.465 ms/op
                 executeQuery·p0.99:   4370.465 ms/op
                 executeQuery·p0.999:  4370.465 ms/op
                 executeQuery·p0.9999: 4370.465 ms/op
                 executeQuery·p1.00:   4370.465 ms/op

Iteration   4: 4276.792 ±(99.9%) 2226.097 ms/op
                 executeQuery·p0.00:   4160.750 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4404.019 ms/op
                 executeQuery·p0.95:   4404.019 ms/op
                 executeQuery·p0.99:   4404.019 ms/op
                 executeQuery·p0.999:  4404.019 ms/op
                 executeQuery·p0.9999: 4404.019 ms/op
                 executeQuery·p1.00:   4404.019 ms/op

Iteration   5: 4292.171 ±(99.9%) 1808.090 ms/op
                 executeQuery·p0.00:   4215.276 ms/op
                 executeQuery·p0.50:   4257.219 ms/op
                 executeQuery·p0.90:   4404.019 ms/op
                 executeQuery·p0.95:   4404.019 ms/op
                 executeQuery·p0.99:   4404.019 ms/op
                 executeQuery·p0.999:  4404.019 ms/op
                 executeQuery·p0.9999: 4404.019 ms/op
                 executeQuery·p1.00:   4404.019 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4328.242 ±(99.9%) 107.968 ms/op

  Histogram, ms/op:
    [4100.000, 4150.000) = 0 
    [4150.000, 4200.000) = 1 
    [4200.000, 4250.000) = 2 
    [4250.000, 4300.000) = 5 
    [4300.000, 4350.000) = 0 
    [4350.000, 4400.000) = 2 
    [4400.000, 4450.000) = 3 
    [4450.000, 4500.000) = 1 
    [4500.000, 4550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4160.750 ms/op
     p(50.0000) =   4294.967 ms/op
     p(90.0000) =   4479.517 ms/op
     p(95.0000) =   4504.682 ms/op
     p(99.0000) =   4504.682 ms/op
     p(99.9000) =   4504.682 ms/op
     p(99.9900) =   4504.682 ms/op
     p(99.9990) =   4504.682 ms/op
     p(99.9999) =   4504.682 ms/op
    p(100.0000) =   4504.682 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 51.04% complete, ETA 03:16:27
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_2126513010 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_2126513010() {
        this(4);
    }
    public KeyMultiRecordMap_2126513010(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_2126513010 join_map = new KeyMultiRecordMap_2126513010();
private final class KeyMultiRecordMap_1452830465 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1452830465() {
        this(4);
    }
    public KeyMultiRecordMap_1452830465(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1452830465 join_map_0 = new KeyMultiRecordMap_1452830465();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_0);
            join_map.associate(left_join_ord_0, left_join_key_prehash, ordinal_value, left_join_ord_1, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51808.043 ms/op
# Warmup Iteration   2: 49459.233 ms/op
# Warmup Iteration   3: 50465.866 ms/op
# Warmup Iteration   4: 48519.709 ms/op
# Warmup Iteration   5: 49190.797 ms/op
Iteration   1: 48788.144 ms/op
                 executeQuery·p0.00:   48788.144 ms/op
                 executeQuery·p0.50:   48788.144 ms/op
                 executeQuery·p0.90:   48788.144 ms/op
                 executeQuery·p0.95:   48788.144 ms/op
                 executeQuery·p0.99:   48788.144 ms/op
                 executeQuery·p0.999:  48788.144 ms/op
                 executeQuery·p0.9999: 48788.144 ms/op
                 executeQuery·p1.00:   48788.144 ms/op

Iteration   2: 48721.035 ms/op
                 executeQuery·p0.00:   48721.035 ms/op
                 executeQuery·p0.50:   48721.035 ms/op
                 executeQuery·p0.90:   48721.035 ms/op
                 executeQuery·p0.95:   48721.035 ms/op
                 executeQuery·p0.99:   48721.035 ms/op
                 executeQuery·p0.999:  48721.035 ms/op
                 executeQuery·p0.9999: 48721.035 ms/op
                 executeQuery·p1.00:   48721.035 ms/op

Iteration   3: 48586.818 ms/op
                 executeQuery·p0.00:   48586.818 ms/op
                 executeQuery·p0.50:   48586.818 ms/op
                 executeQuery·p0.90:   48586.818 ms/op
                 executeQuery·p0.95:   48586.818 ms/op
                 executeQuery·p0.99:   48586.818 ms/op
                 executeQuery·p0.999:  48586.818 ms/op
                 executeQuery·p0.9999: 48586.818 ms/op
                 executeQuery·p1.00:   48586.818 ms/op

Iteration   4: 48318.382 ms/op
                 executeQuery·p0.00:   48318.382 ms/op
                 executeQuery·p0.50:   48318.382 ms/op
                 executeQuery·p0.90:   48318.382 ms/op
                 executeQuery·p0.95:   48318.382 ms/op
                 executeQuery·p0.99:   48318.382 ms/op
                 executeQuery·p0.999:  48318.382 ms/op
                 executeQuery·p0.9999: 48318.382 ms/op
                 executeQuery·p1.00:   48318.382 ms/op

Iteration   5: 48117.055 ms/op
                 executeQuery·p0.00:   48117.055 ms/op
                 executeQuery·p0.50:   48117.055 ms/op
                 executeQuery·p0.90:   48117.055 ms/op
                 executeQuery·p0.95:   48117.055 ms/op
                 executeQuery·p0.99:   48117.055 ms/op
                 executeQuery·p0.999:  48117.055 ms/op
                 executeQuery·p0.9999: 48117.055 ms/op
                 executeQuery·p1.00:   48117.055 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  48506.287 ±(99.9%) 1087.176 ms/op

  Histogram, ms/op:
    [48100.000, 48150.000) = 1 
    [48150.000, 48200.000) = 0 
    [48200.000, 48250.000) = 0 
    [48250.000, 48300.000) = 0 
    [48300.000, 48350.000) = 1 
    [48350.000, 48400.000) = 0 
    [48400.000, 48450.000) = 0 
    [48450.000, 48500.000) = 0 
    [48500.000, 48550.000) = 0 
    [48550.000, 48600.000) = 1 
    [48600.000, 48650.000) = 0 
    [48650.000, 48700.000) = 0 
    [48700.000, 48750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  48117.055 ms/op
     p(50.0000) =  48586.818 ms/op
     p(90.0000) =  48788.144 ms/op
     p(95.0000) =  48788.144 ms/op
     p(99.0000) =  48788.144 ms/op
     p(99.9000) =  48788.144 ms/op
     p(99.9900) =  48788.144 ms/op
     p(99.9990) =  48788.144 ms/op
     p(99.9999) =  48788.144 ms/op
    p(100.0000) =  48788.144 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 52.08% complete, ETA 03:16:01
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1407816638 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1407816638() {
        this(4);
    }
    public KeyMultiRecordMap_1407816638(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1407816638 join_map = new KeyMultiRecordMap_1407816638();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1944444368 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1944444368() {
        this(4);
    }
    public KeyMultiRecordMap_1944444368(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1944444368 join_map_0 = new KeyMultiRecordMap_1944444368();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4557.810 ±(99.9%) 3233.203 ms/op
# Warmup Iteration   2: 4588.569 ±(99.9%) 1764.937 ms/op
# Warmup Iteration   3: 4524.256 ±(99.9%) 1388.645 ms/op
# Warmup Iteration   4: 4507.479 ±(99.9%) 491.953 ms/op
# Warmup Iteration   5: 4476.720 ±(99.9%) 770.282 ms/op
Iteration   1: 4541.033 ±(99.9%) 2777.290 ms/op
                 executeQuery·p0.00:   4429.185 ms/op
                 executeQuery·p0.50:   4479.517 ms/op
                 executeQuery·p0.90:   4714.398 ms/op
                 executeQuery·p0.95:   4714.398 ms/op
                 executeQuery·p0.99:   4714.398 ms/op
                 executeQuery·p0.999:  4714.398 ms/op
                 executeQuery·p0.9999: 4714.398 ms/op
                 executeQuery·p1.00:   4714.398 ms/op

Iteration   2: 4546.626 ±(99.9%) 2142.552 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4596.957 ms/op
                 executeQuery·p0.90:   4630.512 ms/op
                 executeQuery·p0.95:   4630.512 ms/op
                 executeQuery·p0.99:   4630.512 ms/op
                 executeQuery·p0.999:  4630.512 ms/op
                 executeQuery·p0.9999: 4630.512 ms/op
                 executeQuery·p1.00:   4630.512 ms/op

Iteration   3: 4443.166 ±(99.9%) 1509.851 ms/op
                 executeQuery·p0.00:   4387.242 ms/op
                 executeQuery·p0.50:   4404.019 ms/op
                 executeQuery·p0.90:   4538.237 ms/op
                 executeQuery·p0.95:   4538.237 ms/op
                 executeQuery·p0.99:   4538.237 ms/op
                 executeQuery·p0.999:  4538.237 ms/op
                 executeQuery·p0.9999: 4538.237 ms/op
                 executeQuery·p1.00:   4538.237 ms/op

Iteration   4: 4465.536 ±(99.9%) 870.219 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4479.517 ms/op
                 executeQuery·p0.90:   4504.682 ms/op
                 executeQuery·p0.95:   4504.682 ms/op
                 executeQuery·p0.99:   4504.682 ms/op
                 executeQuery·p0.999:  4504.682 ms/op
                 executeQuery·p0.9999: 4504.682 ms/op
                 executeQuery·p1.00:   4504.682 ms/op

Iteration   5: 4415.204 ±(99.9%) 233.772 ms/op
                 executeQuery·p0.00:   4404.019 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4429.185 ms/op
                 executeQuery·p0.95:   4429.185 ms/op
                 executeQuery·p0.99:   4429.185 ms/op
                 executeQuery·p0.999:  4429.185 ms/op
                 executeQuery·p0.9999: 4429.185 ms/op
                 executeQuery·p1.00:   4429.185 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4482.313 ±(99.9%) 104.675 ms/op

  Histogram, ms/op:
    [4300.000, 4350.000) = 0 
    [4350.000, 4400.000) = 1 
    [4400.000, 4450.000) = 7 
    [4450.000, 4500.000) = 2 
    [4500.000, 4550.000) = 2 
    [4550.000, 4600.000) = 1 
    [4600.000, 4650.000) = 1 
    [4650.000, 4700.000) = 0 
    [4700.000, 4750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4387.242 ms/op
     p(50.0000) =   4429.185 ms/op
     p(90.0000) =   4664.066 ms/op
     p(95.0000) =   4714.398 ms/op
     p(99.0000) =   4714.398 ms/op
     p(99.9000) =   4714.398 ms/op
     p(99.9900) =   4714.398 ms/op
     p(99.9990) =   4714.398 ms/op
     p(99.9999) =   4714.398 ms/op
    p(100.0000) =   4714.398 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 53.13% complete, ETA 03:10:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1407816638 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1407816638() {
        this(4);
    }
    public KeyMultiRecordMap_1407816638(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1407816638 join_map = new KeyMultiRecordMap_1407816638();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1944444368 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1944444368() {
        this(4);
    }
    public KeyMultiRecordMap_1944444368(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1944444368 join_map_0 = new KeyMultiRecordMap_1944444368();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

51606.716 ms/op
# Warmup Iteration   2: 49257.906 ms/op
# Warmup Iteration   3: 48989.471 ms/op
# Warmup Iteration   4: 50935.628 ms/op
# Warmup Iteration   5: 50465.866 ms/op
Iteration   1: 49996.104 ms/op
                 executeQuery·p0.00:   49996.104 ms/op
                 executeQuery·p0.50:   49996.104 ms/op
                 executeQuery·p0.90:   49996.104 ms/op
                 executeQuery·p0.95:   49996.104 ms/op
                 executeQuery·p0.99:   49996.104 ms/op
                 executeQuery·p0.999:  49996.104 ms/op
                 executeQuery·p0.9999: 49996.104 ms/op
                 executeQuery·p1.00:   49996.104 ms/op

Iteration   2: 50465.866 ms/op
                 executeQuery·p0.00:   50465.866 ms/op
                 executeQuery·p0.50:   50465.866 ms/op
                 executeQuery·p0.90:   50465.866 ms/op
                 executeQuery·p0.95:   50465.866 ms/op
                 executeQuery·p0.99:   50465.866 ms/op
                 executeQuery·p0.999:  50465.866 ms/op
                 executeQuery·p0.9999: 50465.866 ms/op
                 executeQuery·p1.00:   50465.866 ms/op

Iteration   3: 50398.757 ms/op
                 executeQuery·p0.00:   50398.757 ms/op
                 executeQuery·p0.50:   50398.757 ms/op
                 executeQuery·p0.90:   50398.757 ms/op
                 executeQuery·p0.95:   50398.757 ms/op
                 executeQuery·p0.99:   50398.757 ms/op
                 executeQuery·p0.999:  50398.757 ms/op
                 executeQuery·p0.9999: 50398.757 ms/op
                 executeQuery·p1.00:   50398.757 ms/op

Iteration   4: 50868.519 ms/op
                 executeQuery·p0.00:   50868.519 ms/op
                 executeQuery·p0.50:   50868.519 ms/op
                 executeQuery·p0.90:   50868.519 ms/op
                 executeQuery·p0.95:   50868.519 ms/op
                 executeQuery·p0.99:   50868.519 ms/op
                 executeQuery·p0.999:  50868.519 ms/op
                 executeQuery·p0.9999: 50868.519 ms/op
                 executeQuery·p1.00:   50868.519 ms/op

Iteration   5: 50734.301 ms/op
                 executeQuery·p0.00:   50734.301 ms/op
                 executeQuery·p0.50:   50734.301 ms/op
                 executeQuery·p0.90:   50734.301 ms/op
                 executeQuery·p0.95:   50734.301 ms/op
                 executeQuery·p0.99:   50734.301 ms/op
                 executeQuery·p0.999:  50734.301 ms/op
                 executeQuery·p0.9999: 50734.301 ms/op
                 executeQuery·p1.00:   50734.301 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  50492.709 ±(99.9%) 1299.791 ms/op

  Histogram, ms/op:
    [49900.000, 50000.000) = 1 
    [50000.000, 50100.000) = 0 
    [50100.000, 50200.000) = 0 
    [50200.000, 50300.000) = 0 
    [50300.000, 50400.000) = 1 
    [50400.000, 50500.000) = 1 
    [50500.000, 50600.000) = 0 
    [50600.000, 50700.000) = 0 
    [50700.000, 50800.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  49996.104 ms/op
     p(50.0000) =  50465.866 ms/op
     p(90.0000) =  50868.519 ms/op
     p(95.0000) =  50868.519 ms/op
     p(99.0000) =  50868.519 ms/op
     p(99.9000) =  50868.519 ms/op
     p(99.9900) =  50868.519 ms/op
     p(99.9990) =  50868.519 ms/op
     p(99.9999) =  50868.519 ms/op
    p(100.0000) =  50868.519 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 54.17% complete, ETA 03:09:23
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2271.216 ±(99.9%) 399.793 ms/op
# Warmup Iteration   2: 2320.289 ±(99.9%) 7.223 ms/op
# Warmup Iteration   3: 2332.872 ±(99.9%) 21.058 ms/op
# Warmup Iteration   4: 2327.839 ±(99.9%) 0.001 ms/op
# Warmup Iteration   5: 2327.839 ±(99.9%) 0.001 ms/op
Iteration   1: 2327.839 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2327.839 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2327.839 ms/op
                 executeQuery·p0.95:   2327.839 ms/op
                 executeQuery·p0.99:   2327.839 ms/op
                 executeQuery·p0.999:  2327.839 ms/op
                 executeQuery·p0.9999: 2327.839 ms/op
                 executeQuery·p1.00:   2327.839 ms/op

Iteration   2: 2327.839 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2327.839 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2327.839 ms/op
                 executeQuery·p0.95:   2327.839 ms/op
                 executeQuery·p0.99:   2327.839 ms/op
                 executeQuery·p0.999:  2327.839 ms/op
                 executeQuery·p0.9999: 2327.839 ms/op
                 executeQuery·p1.00:   2327.839 ms/op

Iteration   3: 2327.839 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2327.839 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2327.839 ms/op
                 executeQuery·p0.95:   2327.839 ms/op
                 executeQuery·p0.99:   2327.839 ms/op
                 executeQuery·p0.999:  2327.839 ms/op
                 executeQuery·p0.9999: 2327.839 ms/op
                 executeQuery·p1.00:   2327.839 ms/op

Iteration   4: 2327.839 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2327.839 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2327.839 ms/op
                 executeQuery·p0.95:   2327.839 ms/op
                 executeQuery·p0.99:   2327.839 ms/op
                 executeQuery·p0.999:  2327.839 ms/op
                 executeQuery·p0.9999: 2327.839 ms/op
                 executeQuery·p1.00:   2327.839 ms/op

Iteration   5: 2328.678 ±(99.9%) 7.223 ms/op
                 executeQuery·p0.00:   2327.839 ms/op
                 executeQuery·p0.50:   2327.839 ms/op
                 executeQuery·p0.90:   2332.033 ms/op
                 executeQuery·p0.95:   2332.033 ms/op
                 executeQuery·p0.99:   2332.033 ms/op
                 executeQuery·p0.999:  2332.033 ms/op
                 executeQuery·p0.9999: 2332.033 ms/op
                 executeQuery·p1.00:   2332.033 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 25
  mean =   2328.006 ±(99.9%) 0.628 ms/op

  Histogram, ms/op:
    [2327.000, 2327.500) = 0 
    [2327.500, 2328.000) = 24 
    [2328.000, 2328.500) = 0 
    [2328.500, 2329.000) = 0 
    [2329.000, 2329.500) = 0 
    [2329.500, 2330.000) = 0 
    [2330.000, 2330.500) = 0 
    [2330.500, 2331.000) = 0 
    [2331.000, 2331.500) = 0 
    [2331.500, 2332.000) = 0 
    [2332.000, 2332.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2327.839 ms/op
     p(50.0000) =   2327.839 ms/op
     p(90.0000) =   2327.839 ms/op
     p(95.0000) =   2330.775 ms/op
     p(99.0000) =   2332.033 ms/op
     p(99.9000) =   2332.033 ms/op
     p(99.9900) =   2332.033 ms/op
     p(99.9990) =   2332.033 ms/op
     p(99.9999) =   2332.033 ms/op
    p(100.0000) =   2332.033 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 55.21% complete, ETA 03:03:13
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
29225.910 ms/op
# Warmup Iteration   2: 30165.434 ms/op
# Warmup Iteration   3: 28353.495 ms/op
# Warmup Iteration   4: 23924.310 ms/op
# Warmup Iteration   5: 23890.756 ms/op
Iteration   1: 23722.983 ms/op
                 executeQuery·p0.00:   23722.983 ms/op
                 executeQuery·p0.50:   23722.983 ms/op
                 executeQuery·p0.90:   23722.983 ms/op
                 executeQuery·p0.95:   23722.983 ms/op
                 executeQuery·p0.99:   23722.983 ms/op
                 executeQuery·p0.999:  23722.983 ms/op
                 executeQuery·p0.9999: 23722.983 ms/op
                 executeQuery·p1.00:   23722.983 ms/op

Iteration   2: 23689.429 ms/op
                 executeQuery·p0.00:   23689.429 ms/op
                 executeQuery·p0.50:   23689.429 ms/op
                 executeQuery·p0.90:   23689.429 ms/op
                 executeQuery·p0.95:   23689.429 ms/op
                 executeQuery·p0.99:   23689.429 ms/op
                 executeQuery·p0.999:  23689.429 ms/op
                 executeQuery·p0.9999: 23689.429 ms/op
                 executeQuery·p1.00:   23689.429 ms/op

Iteration   3: 23689.429 ms/op
                 executeQuery·p0.00:   23689.429 ms/op
                 executeQuery·p0.50:   23689.429 ms/op
                 executeQuery·p0.90:   23689.429 ms/op
                 executeQuery·p0.95:   23689.429 ms/op
                 executeQuery·p0.99:   23689.429 ms/op
                 executeQuery·p0.999:  23689.429 ms/op
                 executeQuery·p0.9999: 23689.429 ms/op
                 executeQuery·p1.00:   23689.429 ms/op

Iteration   4: 23689.429 ms/op
                 executeQuery·p0.00:   23689.429 ms/op
                 executeQuery·p0.50:   23689.429 ms/op
                 executeQuery·p0.90:   23689.429 ms/op
                 executeQuery·p0.95:   23689.429 ms/op
                 executeQuery·p0.99:   23689.429 ms/op
                 executeQuery·p0.999:  23689.429 ms/op
                 executeQuery·p0.9999: 23689.429 ms/op
                 executeQuery·p1.00:   23689.429 ms/op

Iteration   5: 23722.983 ms/op
                 executeQuery·p0.00:   23722.983 ms/op
                 executeQuery·p0.50:   23722.983 ms/op
                 executeQuery·p0.90:   23722.983 ms/op
                 executeQuery·p0.95:   23722.983 ms/op
                 executeQuery·p0.99:   23722.983 ms/op
                 executeQuery·p0.999:  23722.983 ms/op
                 executeQuery·p0.9999: 23722.983 ms/op
                 executeQuery·p1.00:   23722.983 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  23702.851 ±(99.9%) 70.769 ms/op

  Histogram, ms/op:
    [23680.000, 23685.000) = 0 
    [23685.000, 23690.000) = 3 
    [23690.000, 23695.000) = 0 
    [23695.000, 23700.000) = 0 
    [23700.000, 23705.000) = 0 
    [23705.000, 23710.000) = 0 
    [23710.000, 23715.000) = 0 
    [23715.000, 23720.000) = 0 
    [23720.000, 23725.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  23689.429 ms/op
     p(50.0000) =  23689.429 ms/op
     p(90.0000) =  23722.983 ms/op
     p(95.0000) =  23722.983 ms/op
     p(99.0000) =  23722.983 ms/op
     p(99.9000) =  23722.983 ms/op
     p(99.9900) =  23722.983 ms/op
     p(99.9990) =  23722.983 ms/op
     p(99.9999) =  23722.983 ms/op
    p(100.0000) =  23722.983 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 56.25% complete, ETA 02:59:12
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1409.286 ±(99.9%) 242.823 ms/op
# Warmup Iteration   2: 1344.012 ±(99.9%) 44.775 ms/op
# Warmup Iteration   3: 1339.294 ±(99.9%) 15.297 ms/op
# Warmup Iteration   4: 1332.740 ±(99.9%) 10.929 ms/op
# Warmup Iteration   5: 1331.167 ±(99.9%) 5.568 ms/op
Iteration   1: 1329.594 ±(99.9%) 8.301 ms/op
                 executeQuery·p0.00:   1325.400 ms/op
                 executeQuery·p0.50:   1328.546 ms/op
                 executeQuery·p0.90:   1337.983 ms/op
                 executeQuery·p0.95:   1337.983 ms/op
                 executeQuery·p0.99:   1337.983 ms/op
                 executeQuery·p0.999:  1337.983 ms/op
                 executeQuery·p0.9999: 1337.983 ms/op
                 executeQuery·p1.00:   1337.983 ms/op

Iteration   2: 1330.119 ±(99.9%) 7.947 ms/op
                 executeQuery·p0.00:   1325.400 ms/op
                 executeQuery·p0.50:   1328.546 ms/op
                 executeQuery·p0.90:   1337.983 ms/op
                 executeQuery·p0.95:   1337.983 ms/op
                 executeQuery·p0.99:   1337.983 ms/op
                 executeQuery·p0.999:  1337.983 ms/op
                 executeQuery·p0.9999: 1337.983 ms/op
                 executeQuery·p1.00:   1337.983 ms/op

Iteration   3: 1331.167 ±(99.9%) 9.996 ms/op
                 executeQuery·p0.00:   1325.400 ms/op
                 executeQuery·p0.50:   1329.594 ms/op
                 executeQuery·p0.90:   1340.080 ms/op
                 executeQuery·p0.95:   1340.080 ms/op
                 executeQuery·p0.99:   1340.080 ms/op
                 executeQuery·p0.999:  1340.080 ms/op
                 executeQuery·p0.9999: 1340.080 ms/op
                 executeQuery·p1.00:   1340.080 ms/op

Iteration   4: 1341.391 ±(99.9%) 8.556 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1341.129 ms/op
                 executeQuery·p0.90:   1348.469 ms/op
                 executeQuery·p0.95:   1348.469 ms/op
                 executeQuery·p0.99:   1348.469 ms/op
                 executeQuery·p0.999:  1348.469 ms/op
                 executeQuery·p0.9999: 1348.469 ms/op
                 executeQuery·p1.00:   1348.469 ms/op

Iteration   5: 1340.867 ±(99.9%) 9.570 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1337.983 ms/op
                 executeQuery·p0.90:   1348.469 ms/op
                 executeQuery·p0.95:   1348.469 ms/op
                 executeQuery·p0.99:   1348.469 ms/op
                 executeQuery·p0.999:  1348.469 ms/op
                 executeQuery·p0.9999: 1348.469 ms/op
                 executeQuery·p1.00:   1348.469 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 40
  mean =   1334.628 ±(99.9%) 3.925 ms/op

  Histogram, ms/op:
    [1320.000, 1322.500) = 0 
    [1322.500, 1325.000) = 0 
    [1325.000, 1327.500) = 11 
    [1327.500, 1330.000) = 5 
    [1330.000, 1332.500) = 2 
    [1332.500, 1335.000) = 2 
    [1335.000, 1337.500) = 2 
    [1337.500, 1340.000) = 10 
    [1340.000, 1342.500) = 2 
    [1342.500, 1345.000) = 3 
    [1345.000, 1347.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1325.400 ms/op
     p(50.0000) =   1334.837 ms/op
     p(90.0000) =   1344.274 ms/op
     p(95.0000) =   1348.469 ms/op
     p(99.0000) =   1348.469 ms/op
     p(99.9000) =   1348.469 ms/op
     p(99.9900) =   1348.469 ms/op
     p(99.9990) =   1348.469 ms/op
     p(99.9999) =   1348.469 ms/op
    p(100.0000) =   1348.469 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 57.29% complete, ETA 02:53:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
19293.798 ms/op
# Warmup Iteration   2: 18958.254 ms/op
# Warmup Iteration   3: 17414.750 ms/op
# Warmup Iteration   4: 17179.869 ms/op
# Warmup Iteration   5: 17095.983 ms/op
Iteration   1: 17095.983 ms/op
                 executeQuery·p0.00:   17095.983 ms/op
                 executeQuery·p0.50:   17095.983 ms/op
                 executeQuery·p0.90:   17095.983 ms/op
                 executeQuery·p0.95:   17095.983 ms/op
                 executeQuery·p0.99:   17095.983 ms/op
                 executeQuery·p0.999:  17095.983 ms/op
                 executeQuery·p0.9999: 17095.983 ms/op
                 executeQuery·p1.00:   17095.983 ms/op

Iteration   2: 17129.538 ms/op
                 executeQuery·p0.00:   17129.538 ms/op
                 executeQuery·p0.50:   17129.538 ms/op
                 executeQuery·p0.90:   17129.538 ms/op
                 executeQuery·p0.95:   17129.538 ms/op
                 executeQuery·p0.99:   17129.538 ms/op
                 executeQuery·p0.999:  17129.538 ms/op
                 executeQuery·p0.9999: 17129.538 ms/op
                 executeQuery·p1.00:   17129.538 ms/op

Iteration   3: 17045.651 ms/op
                 executeQuery·p0.00:   17045.651 ms/op
                 executeQuery·p0.50:   17045.651 ms/op
                 executeQuery·p0.90:   17045.651 ms/op
                 executeQuery·p0.95:   17045.651 ms/op
                 executeQuery·p0.99:   17045.651 ms/op
                 executeQuery·p0.999:  17045.651 ms/op
                 executeQuery·p0.9999: 17045.651 ms/op
                 executeQuery·p1.00:   17045.651 ms/op

Iteration   4: 17146.315 ms/op
                 executeQuery·p0.00:   17146.315 ms/op
                 executeQuery·p0.50:   17146.315 ms/op
                 executeQuery·p0.90:   17146.315 ms/op
                 executeQuery·p0.95:   17146.315 ms/op
                 executeQuery·p0.99:   17146.315 ms/op
                 executeQuery·p0.999:  17146.315 ms/op
                 executeQuery·p0.9999: 17146.315 ms/op
                 executeQuery·p1.00:   17146.315 ms/op

Iteration   5: 17095.983 ms/op
                 executeQuery·p0.00:   17095.983 ms/op
                 executeQuery·p0.50:   17095.983 ms/op
                 executeQuery·p0.90:   17095.983 ms/op
                 executeQuery·p0.95:   17095.983 ms/op
                 executeQuery·p0.99:   17095.983 ms/op
                 executeQuery·p0.999:  17095.983 ms/op
                 executeQuery·p0.9999: 17095.983 ms/op
                 executeQuery·p1.00:   17095.983 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  17102.694 ±(99.9%) 148.727 ms/op

  Histogram, ms/op:
    [17000.000, 17012.500) = 0 
    [17012.500, 17025.000) = 0 
    [17025.000, 17037.500) = 0 
    [17037.500, 17050.000) = 1 
    [17050.000, 17062.500) = 0 
    [17062.500, 17075.000) = 0 
    [17075.000, 17087.500) = 0 
    [17087.500, 17100.000) = 2 
    [17100.000, 17112.500) = 0 
    [17112.500, 17125.000) = 0 
    [17125.000, 17137.500) = 1 
    [17137.500, 17150.000) = 1 
    [17150.000, 17162.500) = 0 
    [17162.500, 17175.000) = 0 
    [17175.000, 17187.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =  17045.651 ms/op
     p(50.0000) =  17095.983 ms/op
     p(90.0000) =  17146.315 ms/op
     p(95.0000) =  17146.315 ms/op
     p(99.0000) =  17146.315 ms/op
     p(99.9000) =  17146.315 ms/op
     p(99.9900) =  17146.315 ms/op
     p(99.9990) =  17146.315 ms/op
     p(99.9999) =  17146.315 ms/op
    p(100.0000) =  17146.315 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 58.33% complete, ETA 02:48:03
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2019.138 ±(99.9%) 88.903 ms/op
# Warmup Iteration   2: 1996.908 ±(99.9%) 3.611 ms/op
# Warmup Iteration   3: 1990.617 ±(99.9%) 18.415 ms/op
# Warmup Iteration   4: 1987.261 ±(99.9%) 4.423 ms/op
# Warmup Iteration   5: 1987.681 ±(99.9%) 6.756 ms/op
Iteration   1: 1989.358 ±(99.9%) 14.670 ms/op
                 executeQuery·p0.00:   1986.003 ms/op
                 executeQuery·p0.50:   1988.100 ms/op
                 executeQuery·p0.90:   1994.392 ms/op
                 executeQuery·p0.95:   1994.392 ms/op
                 executeQuery·p0.99:   1994.392 ms/op
                 executeQuery·p0.999:  1994.392 ms/op
                 executeQuery·p0.9999: 1994.392 ms/op
                 executeQuery·p1.00:   1994.392 ms/op

Iteration   2: 2006.974 ±(99.9%) 99.560 ms/op
                 executeQuery·p0.00:   1994.392 ms/op
                 executeQuery·p0.50:   1994.392 ms/op
                 executeQuery·p0.90:   2053.112 ms/op
                 executeQuery·p0.95:   2053.112 ms/op
                 executeQuery·p0.99:   2053.112 ms/op
                 executeQuery·p0.999:  2053.112 ms/op
                 executeQuery·p0.9999: 2053.112 ms/op
                 executeQuery·p1.00:   2053.112 ms/op

Iteration   3: 1994.811 ±(99.9%) 3.611 ms/op
                 executeQuery·p0.00:   1994.392 ms/op
                 executeQuery·p0.50:   1994.392 ms/op
                 executeQuery·p0.90:   1996.489 ms/op
                 executeQuery·p0.95:   1996.489 ms/op
                 executeQuery·p0.99:   1996.489 ms/op
                 executeQuery·p0.999:  1996.489 ms/op
                 executeQuery·p0.9999: 1996.489 ms/op
                 executeQuery·p1.00:   1996.489 ms/op

Iteration   4: 1995.230 ±(99.9%) 4.423 ms/op
                 executeQuery·p0.00:   1994.392 ms/op
                 executeQuery·p0.50:   1994.392 ms/op
                 executeQuery·p0.90:   1996.489 ms/op
                 executeQuery·p0.95:   1996.489 ms/op
                 executeQuery·p0.99:   1996.489 ms/op
                 executeQuery·p0.999:  1996.489 ms/op
                 executeQuery·p0.9999: 1996.489 ms/op
                 executeQuery·p1.00:   1996.489 ms/op

Iteration   5: 1994.392 ±(99.9%) 5.710 ms/op
                 executeQuery·p0.00:   1992.294 ms/op
                 executeQuery·p0.50:   1994.392 ms/op
                 executeQuery·p0.90:   1996.489 ms/op
                 executeQuery·p0.95:   1996.489 ms/op
                 executeQuery·p0.99:   1996.489 ms/op
                 executeQuery·p0.999:  1996.489 ms/op
                 executeQuery·p0.9999: 1996.489 ms/op
                 executeQuery·p1.00:   1996.489 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 25
  mean =   1996.153 ±(99.9%) 9.168 ms/op

  Histogram, ms/op:
    [1980.000, 1985.000) = 0 
    [1985.000, 1990.000) = 3 
    [1990.000, 1995.000) = 16 
    [1995.000, 2000.000) = 5 
    [2000.000, 2005.000) = 0 
    [2005.000, 2010.000) = 0 
    [2010.000, 2015.000) = 0 
    [2015.000, 2020.000) = 0 
    [2020.000, 2025.000) = 0 
    [2025.000, 2030.000) = 0 
    [2030.000, 2035.000) = 0 
    [2035.000, 2040.000) = 0 
    [2040.000, 2045.000) = 0 
    [2045.000, 2050.000) = 0 
    [2050.000, 2055.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1986.003 ms/op
     p(50.0000) =   1994.392 ms/op
     p(90.0000) =   1997.328 ms/op
     p(95.0000) =   2036.754 ms/op
     p(99.0000) =   2053.112 ms/op
     p(99.9000) =   2053.112 ms/op
     p(99.9900) =   2053.112 ms/op
     p(99.9990) =   2053.112 ms/op
     p(99.9999) =   2053.112 ms/op
    p(100.0000) =   2053.112 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 59.38% complete, ETA 02:42:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
24259.854 ms/op
# Warmup Iteration   2: 26206.011 ms/op
# Warmup Iteration   3: 26138.903 ms/op
# Warmup Iteration   4: 25971.130 ms/op
# Warmup Iteration   5: 25971.130 ms/op
Iteration   1: 25971.130 ms/op
                 executeQuery·p0.00:   25971.130 ms/op
                 executeQuery·p0.50:   25971.130 ms/op
                 executeQuery·p0.90:   25971.130 ms/op
                 executeQuery·p0.95:   25971.130 ms/op
                 executeQuery·p0.99:   25971.130 ms/op
                 executeQuery·p0.999:  25971.130 ms/op
                 executeQuery·p0.9999: 25971.130 ms/op
                 executeQuery·p1.00:   25971.130 ms/op

Iteration   2: 25971.130 ms/op
                 executeQuery·p0.00:   25971.130 ms/op
                 executeQuery·p0.50:   25971.130 ms/op
                 executeQuery·p0.90:   25971.130 ms/op
                 executeQuery·p0.95:   25971.130 ms/op
                 executeQuery·p0.99:   25971.130 ms/op
                 executeQuery·p0.999:  25971.130 ms/op
                 executeQuery·p0.9999: 25971.130 ms/op
                 executeQuery·p1.00:   25971.130 ms/op

Iteration   3: 25971.130 ms/op
                 executeQuery·p0.00:   25971.130 ms/op
                 executeQuery·p0.50:   25971.130 ms/op
                 executeQuery·p0.90:   25971.130 ms/op
                 executeQuery·p0.95:   25971.130 ms/op
                 executeQuery·p0.99:   25971.130 ms/op
                 executeQuery·p0.999:  25971.130 ms/op
                 executeQuery·p0.9999: 25971.130 ms/op
                 executeQuery·p1.00:   25971.130 ms/op

Iteration   4: 25971.130 ms/op
                 executeQuery·p0.00:   25971.130 ms/op
                 executeQuery·p0.50:   25971.130 ms/op
                 executeQuery·p0.90:   25971.130 ms/op
                 executeQuery·p0.95:   25971.130 ms/op
                 executeQuery·p0.99:   25971.130 ms/op
                 executeQuery·p0.999:  25971.130 ms/op
                 executeQuery·p0.9999: 25971.130 ms/op
                 executeQuery·p1.00:   25971.130 ms/op

Iteration   5: 25971.130 ms/op
                 executeQuery·p0.00:   25971.130 ms/op
                 executeQuery·p0.50:   25971.130 ms/op
                 executeQuery·p0.90:   25971.130 ms/op
                 executeQuery·p0.95:   25971.130 ms/op
                 executeQuery·p0.99:   25971.130 ms/op
                 executeQuery·p0.999:  25971.130 ms/op
                 executeQuery·p0.9999: 25971.130 ms/op
                 executeQuery·p1.00:   25971.130 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  25971.130 ±(99.9%) 0.001 ms/op

  Histogram, ms/op:
    [25971.130, 25971.130) = 5 

  Percentiles, ms/op:
      p(0.0000) =  25971.130 ms/op
     p(50.0000) =  25971.130 ms/op
     p(90.0000) =  25971.130 ms/op
     p(95.0000) =  25971.130 ms/op
     p(99.0000) =  25971.130 ms/op
     p(99.9000) =  25971.130 ms/op
     p(99.9900) =  25971.130 ms/op
     p(99.9990) =  25971.130 ms/op
     p(99.9999) =  25971.130 ms/op
    p(100.0000) =  25971.130 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 60.42% complete, ETA 02:38:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
1113.588 ±(99.9%) 158.574 ms/op
# Warmup Iteration   2: 1113.588 ±(99.9%) 60.938 ms/op
# Warmup Iteration   3: 1098.209 ±(99.9%) 3.052 ms/op
# Warmup Iteration   4: 1097.976 ±(99.9%) 3.984 ms/op
# Warmup Iteration   5: 1096.810 ±(99.9%) 2.492 ms/op
Iteration   1: 1097.277 ±(99.9%) 3.425 ms/op
                 executeQuery·p0.00:   1094.713 ms/op
                 executeQuery·p0.50:   1096.810 ms/op
                 executeQuery·p0.90:   1101.005 ms/op
                 executeQuery·p0.95:   1101.005 ms/op
                 executeQuery·p0.99:   1101.005 ms/op
                 executeQuery·p0.999:  1101.005 ms/op
                 executeQuery·p0.9999: 1101.005 ms/op
                 executeQuery·p1.00:   1101.005 ms/op

Iteration   2: 1097.277 ±(99.9%) 2.937 ms/op
                 executeQuery·p0.00:   1094.713 ms/op
                 executeQuery·p0.50:   1096.810 ms/op
                 executeQuery·p0.90:   1098.908 ms/op
                 executeQuery·p0.95:   1098.908 ms/op
                 executeQuery·p0.99:   1098.908 ms/op
                 executeQuery·p0.999:  1098.908 ms/op
                 executeQuery·p0.9999: 1098.908 ms/op
                 executeQuery·p1.00:   1098.908 ms/op

Iteration   3: 1099.607 ±(99.9%) 7.048 ms/op
                 executeQuery·p0.00:   1094.713 ms/op
                 executeQuery·p0.50:   1098.908 ms/op
                 executeQuery·p0.90:   1109.393 ms/op
                 executeQuery·p0.95:   1109.393 ms/op
                 executeQuery·p0.99:   1109.393 ms/op
                 executeQuery·p0.999:  1109.393 ms/op
                 executeQuery·p0.9999: 1109.393 ms/op
                 executeQuery·p1.00:   1109.393 ms/op

Iteration   4: 1098.675 ±(99.9%) 2.755 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1098.908 ms/op
                 executeQuery·p0.90:   1101.005 ms/op
                 executeQuery·p0.95:   1101.005 ms/op
                 executeQuery·p0.99:   1101.005 ms/op
                 executeQuery·p0.999:  1101.005 ms/op
                 executeQuery·p0.9999: 1101.005 ms/op
                 executeQuery·p1.00:   1101.005 ms/op

Iteration   5: 1097.743 ±(99.9%) 1.857 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1096.810 ms/op
                 executeQuery·p0.90:   1098.908 ms/op
                 executeQuery·p0.95:   1098.908 ms/op
                 executeQuery·p0.99:   1098.908 ms/op
                 executeQuery·p0.999:  1098.908 ms/op
                 executeQuery·p0.9999: 1098.908 ms/op
                 executeQuery·p1.00:   1098.908 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 45
  mean =   1098.115 ±(99.9%) 1.293 ms/op

  Histogram, ms/op:
    [1090.000, 1091.250) = 0 
    [1091.250, 1092.500) = 0 
    [1092.500, 1093.750) = 0 
    [1093.750, 1095.000) = 5 
    [1095.000, 1096.250) = 0 
    [1096.250, 1097.500) = 17 
    [1097.500, 1098.750) = 0 
    [1098.750, 1100.000) = 17 
    [1100.000, 1101.250) = 5 
    [1101.250, 1102.500) = 0 
    [1102.500, 1103.750) = 0 
    [1103.750, 1105.000) = 0 
    [1105.000, 1106.250) = 0 
    [1106.250, 1107.500) = 0 
    [1107.500, 1108.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1094.713 ms/op
     p(50.0000) =   1098.908 ms/op
     p(90.0000) =   1101.005 ms/op
     p(95.0000) =   1101.005 ms/op
     p(99.0000) =   1109.393 ms/op
     p(99.9000) =   1109.393 ms/op
     p(99.9900) =   1109.393 ms/op
     p(99.9990) =   1109.393 ms/op
     p(99.9999) =   1109.393 ms/op
    p(100.0000) =   1109.393 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 61.46% complete, ETA 02:32:37
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
12851.347 ms/op
# Warmup Iteration   2: 12230.590 ms/op
# Warmup Iteration   3: 11425.284 ms/op
# Warmup Iteration   4: 13472.104 ms/op
# Warmup Iteration   5: 12465.471 ms/op
Iteration   1: 12264.145 ms/op
                 executeQuery·p0.00:   12264.145 ms/op
                 executeQuery·p0.50:   12264.145 ms/op
                 executeQuery·p0.90:   12264.145 ms/op
                 executeQuery·p0.95:   12264.145 ms/op
                 executeQuery·p0.99:   12264.145 ms/op
                 executeQuery·p0.999:  12264.145 ms/op
                 executeQuery·p0.9999: 12264.145 ms/op
                 executeQuery·p1.00:   12264.145 ms/op

Iteration   2: 11257.512 ms/op
                 executeQuery·p0.00:   11257.512 ms/op
                 executeQuery·p0.50:   11257.512 ms/op
                 executeQuery·p0.90:   11257.512 ms/op
                 executeQuery·p0.95:   11257.512 ms/op
                 executeQuery·p0.99:   11257.512 ms/op
                 executeQuery·p0.999:  11257.512 ms/op
                 executeQuery·p0.9999: 11257.512 ms/op
                 executeQuery·p1.00:   11257.512 ms/op

Iteration   3: 11223.958 ms/op
                 executeQuery·p0.00:   11223.958 ms/op
                 executeQuery·p0.50:   11223.958 ms/op
                 executeQuery·p0.90:   11223.958 ms/op
                 executeQuery·p0.95:   11223.958 ms/op
                 executeQuery·p0.99:   11223.958 ms/op
                 executeQuery·p0.999:  11223.958 ms/op
                 executeQuery·p0.9999: 11223.958 ms/op
                 executeQuery·p1.00:   11223.958 ms/op

Iteration   4: 11240.735 ms/op
                 executeQuery·p0.00:   11240.735 ms/op
                 executeQuery·p0.50:   11240.735 ms/op
                 executeQuery·p0.90:   11240.735 ms/op
                 executeQuery·p0.95:   11240.735 ms/op
                 executeQuery·p0.99:   11240.735 ms/op
                 executeQuery·p0.999:  11240.735 ms/op
                 executeQuery·p0.9999: 11240.735 ms/op
                 executeQuery·p1.00:   11240.735 ms/op

Iteration   5: 11324.621 ms/op
                 executeQuery·p0.00:   11324.621 ms/op
                 executeQuery·p0.50:   11324.621 ms/op
                 executeQuery·p0.90:   11324.621 ms/op
                 executeQuery·p0.95:   11324.621 ms/op
                 executeQuery·p0.99:   11324.621 ms/op
                 executeQuery·p0.999:  11324.621 ms/op
                 executeQuery·p0.9999: 11324.621 ms/op
                 executeQuery·p1.00:   11324.621 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 5
  mean =  11462.194 ±(99.9%) 1732.519 ms/op

  Histogram, ms/op:
    [11000.000, 11125.000) = 0 
    [11125.000, 11250.000) = 2 
    [11250.000, 11375.000) = 2 
    [11375.000, 11500.000) = 0 
    [11500.000, 11625.000) = 0 
    [11625.000, 11750.000) = 0 
    [11750.000, 11875.000) = 0 
    [11875.000, 12000.000) = 0 
    [12000.000, 12125.000) = 0 
    [12125.000, 12250.000) = 0 
    [12250.000, 12375.000) = 1 
    [12375.000, 12500.000) = 0 
    [12500.000, 12625.000) = 0 
    [12625.000, 12750.000) = 0 
    [12750.000, 12875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  11223.958 ms/op
     p(50.0000) =  11257.512 ms/op
     p(90.0000) =  12264.145 ms/op
     p(95.0000) =  12264.145 ms/op
     p(99.0000) =  12264.145 ms/op
     p(99.9000) =  12264.145 ms/op
     p(99.9900) =  12264.145 ms/op
     p(99.9990) =  12264.145 ms/op
     p(99.9999) =  12264.145 ms/op
    p(100.0000) =  12264.145 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 62.50% complete, ETA 02:27:18
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
419.605 ±(99.9%) 173.021 ms/op
# Warmup Iteration   2: 381.352 ±(99.9%) 22.791 ms/op
# Warmup Iteration   3: 400.262 ±(99.9%) 28.472 ms/op
# Warmup Iteration   4: 439.262 ±(99.9%) 2.439 ms/op
# Warmup Iteration   5: 364.642 ±(99.9%) 3.378 ms/op
Iteration   1: 363.406 ±(99.9%) 5.170 ms/op
                 executeQuery·p0.00:   353.894 ms/op
                 executeQuery·p0.50:   364.380 ms/op
                 executeQuery·p0.90:   372.349 ms/op
                 executeQuery·p0.95:   376.465 ms/op
                 executeQuery·p0.99:   379.060 ms/op
                 executeQuery·p0.999:  379.060 ms/op
                 executeQuery·p0.9999: 379.060 ms/op
                 executeQuery·p1.00:   379.060 ms/op

Iteration   2: 359.362 ±(99.9%) 1.291 ms/op
                 executeQuery·p0.00:   355.992 ms/op
                 executeQuery·p0.50:   359.399 ms/op
                 executeQuery·p0.90:   362.283 ms/op
                 executeQuery·p0.95:   362.571 ms/op
                 executeQuery·p0.99:   362.807 ms/op
                 executeQuery·p0.999:  362.807 ms/op
                 executeQuery·p0.9999: 362.807 ms/op
                 executeQuery·p1.00:   362.807 ms/op

Iteration   3: 358.969 ±(99.9%) 3.866 ms/op
                 executeQuery·p0.00:   355.467 ms/op
                 executeQuery·p0.50:   357.827 ms/op
                 executeQuery·p0.90:   360.815 ms/op
                 executeQuery·p0.95:   375.312 ms/op
                 executeQuery·p0.99:   386.400 ms/op
                 executeQuery·p0.999:  386.400 ms/op
                 executeQuery·p0.9999: 386.400 ms/op
                 executeQuery·p1.00:   386.400 ms/op

Iteration   4: 358.444 ±(99.9%) 3.972 ms/op
                 executeQuery·p0.00:   354.943 ms/op
                 executeQuery·p0.50:   357.040 ms/op
                 executeQuery·p0.90:   360.238 ms/op
                 executeQuery·p0.95:   374.840 ms/op
                 executeQuery·p0.99:   386.400 ms/op
                 executeQuery·p0.999:  386.400 ms/op
                 executeQuery·p0.9999: 386.400 ms/op
                 executeQuery·p1.00:   386.400 ms/op

Iteration   5: 357.602 ±(99.9%) 1.312 ms/op
                 executeQuery·p0.00:   353.370 ms/op
                 executeQuery·p0.50:   357.564 ms/op
                 executeQuery·p0.90:   360.186 ms/op
                 executeQuery·p0.95:   361.051 ms/op
                 executeQuery·p0.99:   361.759 ms/op
                 executeQuery·p0.999:  361.759 ms/op
                 executeQuery·p0.9999: 361.759 ms/op
                 executeQuery·p1.00:   361.759 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 140
  mean =    359.557 ±(99.9%) 1.514 ms/op

  Histogram, ms/op:
    [350.000, 352.500) = 0 
    [352.500, 355.000) = 12 
    [355.000, 357.500) = 37 
    [357.500, 360.000) = 53 
    [360.000, 362.500) = 20 
    [362.500, 365.000) = 3 
    [365.000, 367.500) = 1 
    [367.500, 370.000) = 7 
    [370.000, 372.500) = 3 
    [372.500, 375.000) = 1 
    [375.000, 377.500) = 0 
    [377.500, 380.000) = 1 
    [380.000, 382.500) = 0 
    [382.500, 385.000) = 0 
    [385.000, 387.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    353.370 ms/op
     p(50.0000) =    358.089 ms/op
     p(90.0000) =    367.316 ms/op
     p(95.0000) =    370.619 ms/op
     p(99.0000) =    386.400 ms/op
     p(99.9000) =    386.400 ms/op
     p(99.9900) =    386.400 ms/op
     p(99.9990) =    386.400 ms/op
     p(99.9999) =    386.400 ms/op
    p(100.0000) =    386.400 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 63.54% complete, ETA 02:21:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
13438.550 ms/op
# Warmup Iteration   2: 4294.967 ±(99.9%) 5022.982 ms/op
# Warmup Iteration   3: 4496.294 ±(99.9%) 3125.154 ms/op
# Warmup Iteration   4: 4378.853 ±(99.9%) 1071.276 ms/op
# Warmup Iteration   5: 4577.384 ±(99.9%) 2781.503 ms/op
Iteration   1: 4466.934 ±(99.9%) 4179.266 ms/op
                 executeQuery·p0.00:   4206.887 ms/op
                 executeQuery·p0.50:   4555.014 ms/op
                 executeQuery·p0.90:   4638.900 ms/op
                 executeQuery·p0.95:   4638.900 ms/op
                 executeQuery·p0.99:   4638.900 ms/op
                 executeQuery·p0.999:  4638.900 ms/op
                 executeQuery·p0.9999: 4638.900 ms/op
                 executeQuery·p1.00:   4638.900 ms/op

Iteration   2: 4761.933 ±(99.9%) 5921.921 ms/op
                 executeQuery·p0.00:   4387.242 ms/op
                 executeQuery·p0.50:   4940.890 ms/op
                 executeQuery·p0.90:   4957.667 ms/op
                 executeQuery·p0.95:   4957.667 ms/op
                 executeQuery·p0.99:   4957.667 ms/op
                 executeQuery·p0.999:  4957.667 ms/op
                 executeQuery·p0.9999: 4957.667 ms/op
                 executeQuery·p1.00:   4957.667 ms/op

Iteration   3: 4524.256 ±(99.9%) 5945.604 ms/op
                 executeQuery·p0.00:   4244.636 ms/op
                 executeQuery·p0.50:   4445.962 ms/op
                 executeQuery·p0.90:   4882.170 ms/op
                 executeQuery·p0.95:   4882.170 ms/op
                 executeQuery·p0.99:   4882.170 ms/op
                 executeQuery·p0.999:  4882.170 ms/op
                 executeQuery·p0.9999: 4882.170 ms/op
                 executeQuery·p1.00:   4882.170 ms/op

Iteration   4: 4360.678 ±(99.9%) 3194.030 ms/op
                 executeQuery·p0.00:   4215.276 ms/op
                 executeQuery·p0.50:   4311.745 ms/op
                 executeQuery·p0.90:   4555.014 ms/op
                 executeQuery·p0.95:   4555.014 ms/op
                 executeQuery·p0.99:   4555.014 ms/op
                 executeQuery·p0.999:  4555.014 ms/op
                 executeQuery·p0.9999: 4555.014 ms/op
                 executeQuery·p1.00:   4555.014 ms/op

Iteration   5: 4280.986 ±(99.9%) 754.926 ms/op
                 executeQuery·p0.00:   4253.024 ms/op
                 executeQuery·p0.50:   4261.413 ms/op
                 executeQuery·p0.90:   4328.522 ms/op
                 executeQuery·p0.95:   4328.522 ms/op
                 executeQuery·p0.99:   4328.522 ms/op
                 executeQuery·p0.999:  4328.522 ms/op
                 executeQuery·p0.9999: 4328.522 ms/op
                 executeQuery·p1.00:   4328.522 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   4478.957 ±(99.9%) 285.604 ms/op

  Histogram, ms/op:
    [4200.000, 4250.000) = 3 
    [4250.000, 4300.000) = 2 
    [4300.000, 4350.000) = 2 
    [4350.000, 4400.000) = 1 
    [4400.000, 4450.000) = 1 
    [4450.000, 4500.000) = 0 
    [4500.000, 4550.000) = 0 
    [4550.000, 4600.000) = 2 
    [4600.000, 4650.000) = 1 
    [4650.000, 4700.000) = 0 
    [4700.000, 4750.000) = 0 
    [4750.000, 4800.000) = 0 
    [4800.000, 4850.000) = 0 
    [4850.000, 4900.000) = 1 
    [4900.000, 4950.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4206.887 ms/op
     p(50.0000) =   4387.242 ms/op
     p(90.0000) =   4947.601 ms/op
     p(95.0000) =   4957.667 ms/op
     p(99.0000) =   4957.667 ms/op
     p(99.9000) =   4957.667 ms/op
     p(99.9900) =   4957.667 ms/op
     p(99.9990) =   4957.667 ms/op
     p(99.9999) =   4957.667 ms/op
    p(100.0000) =   4957.667 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 64.58% complete, ETA 02:16:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
317.803 ±(99.9%) 74.006 ms/op
# Warmup Iteration   2: 284.928 ±(99.9%) 7.381 ms/op
# Warmup Iteration   3: 301.783 ±(99.9%) 10.146 ms/op
# Warmup Iteration   4: 290.426 ±(99.9%) 9.310 ms/op
# Warmup Iteration   5: 311.181 ±(99.9%) 0.750 ms/op
Iteration   1: 285.857 ±(99.9%) 6.334 ms/op
                 executeQuery·p0.00:   276.824 ms/op
                 executeQuery·p0.50:   283.640 ms/op
                 executeQuery·p0.90:   297.481 ms/op
                 executeQuery·p0.95:   315.097 ms/op
                 executeQuery·p0.99:   327.680 ms/op
                 executeQuery·p0.999:  327.680 ms/op
                 executeQuery·p0.9999: 327.680 ms/op
                 executeQuery·p1.00:   327.680 ms/op

Iteration   2: 281.863 ±(99.9%) 1.046 ms/op
                 executeQuery·p0.00:   278.397 ms/op
                 executeQuery·p0.50:   281.543 ms/op
                 executeQuery·p0.90:   284.688 ms/op
                 executeQuery·p0.95:   284.846 ms/op
                 executeQuery·p0.99:   285.737 ms/op
                 executeQuery·p0.999:  285.737 ms/op
                 executeQuery·p0.9999: 285.737 ms/op
                 executeQuery·p1.00:   285.737 ms/op

Iteration   3: 282.023 ±(99.9%) 3.493 ms/op
                 executeQuery·p0.00:   276.824 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   286.261 ms/op
                 executeQuery·p0.95:   290.560 ms/op
                 executeQuery·p0.99:   311.951 ms/op
                 executeQuery·p0.999:  311.951 ms/op
                 executeQuery·p0.9999: 311.951 ms/op
                 executeQuery·p1.00:   311.951 ms/op

Iteration   4: 284.104 ±(99.9%) 1.301 ms/op
                 executeQuery·p0.00:   280.494 ms/op
                 executeQuery·p0.50:   283.640 ms/op
                 executeQuery·p0.90:   287.520 ms/op
                 executeQuery·p0.95:   287.939 ms/op
                 executeQuery·p0.99:   288.358 ms/op
                 executeQuery·p0.999:  288.358 ms/op
                 executeQuery·p0.9999: 288.358 ms/op
                 executeQuery·p1.00:   288.358 ms/op

Iteration   5: 280.101 ±(99.9%) 2.480 ms/op
                 executeQuery·p0.00:   276.824 ms/op
                 executeQuery·p0.50:   278.921 ms/op
                 executeQuery·p0.90:   282.382 ms/op
                 executeQuery·p0.95:   288.988 ms/op
                 executeQuery·p0.99:   301.466 ms/op
                 executeQuery·p0.999:  301.466 ms/op
                 executeQuery·p0.9999: 301.466 ms/op
                 executeQuery·p1.00:   301.466 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 178
  mean =    282.765 ±(99.9%) 1.513 ms/op

  Histogram, ms/op:
    [270.000, 275.000) = 0 
    [275.000, 280.000) = 53 
    [280.000, 285.000) = 90 
    [285.000, 290.000) = 30 
    [290.000, 295.000) = 0 
    [295.000, 300.000) = 0 
    [300.000, 305.000) = 1 
    [305.000, 310.000) = 0 
    [310.000, 315.000) = 3 
    [315.000, 320.000) = 0 
    [320.000, 325.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    276.824 ms/op
     p(50.0000) =    281.805 ms/op
     p(90.0000) =    286.786 ms/op
     p(95.0000) =    287.834 ms/op
     p(99.0000) =    315.254 ms/op
     p(99.9000) =    327.680 ms/op
     p(99.9900) =    327.680 ms/op
     p(99.9990) =    327.680 ms/op
     p(99.9999) =    327.680 ms/op
    p(100.0000) =    327.680 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 65.63% complete, ETA 02:11:36
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5192.548 ms/op
# Warmup Iteration   2: 3651.841 ±(99.9%) 1246.434 ms/op
# Warmup Iteration   3: 3584.732 ±(99.9%) 1444.447 ms/op
# Warmup Iteration   4: 3563.760 ±(99.9%) 1798.349 ms/op
# Warmup Iteration   5: 3574.945 ±(99.9%) 1244.083 ms/op
Iteration   1: 3635.063 ±(99.9%) 1817.780 ms/op
                 executeQuery·p0.00:   3569.353 ms/op
                 executeQuery·p0.50:   3586.130 ms/op
                 executeQuery·p0.90:   3749.708 ms/op
                 executeQuery·p0.95:   3749.708 ms/op
                 executeQuery·p0.99:   3749.708 ms/op
                 executeQuery·p0.999:  3749.708 ms/op
                 executeQuery·p0.9999: 3749.708 ms/op
                 executeQuery·p1.00:   3749.708 ms/op

Iteration   2: 3545.585 ±(99.9%) 1862.329 ms/op
                 executeQuery·p0.00:   3435.135 ms/op
                 executeQuery·p0.50:   3565.158 ms/op
                 executeQuery·p0.90:   3636.462 ms/op
                 executeQuery·p0.95:   3636.462 ms/op
                 executeQuery·p0.99:   3636.462 ms/op
                 executeQuery·p0.999:  3636.462 ms/op
                 executeQuery·p0.9999: 3636.462 ms/op
                 executeQuery·p1.00:   3636.462 ms/op

Iteration   3: 3605.703 ±(99.9%) 1215.516 ms/op
                 executeQuery·p0.00:   3565.158 ms/op
                 executeQuery·p0.50:   3569.353 ms/op
                 executeQuery·p0.90:   3682.599 ms/op
                 executeQuery·p0.95:   3682.599 ms/op
                 executeQuery·p0.99:   3682.599 ms/op
                 executeQuery·p0.999:  3682.599 ms/op
                 executeQuery·p0.9999: 3682.599 ms/op
                 executeQuery·p1.00:   3682.599 ms/op

Iteration   4: 3623.879 ±(99.9%) 1779.803 ms/op
                 executeQuery·p0.00:   3535.798 ms/op
                 executeQuery·p0.50:   3607.101 ms/op
                 executeQuery·p0.90:   3728.736 ms/op
                 executeQuery·p0.95:   3728.736 ms/op
                 executeQuery·p0.99:   3728.736 ms/op
                 executeQuery·p0.999:  3728.736 ms/op
                 executeQuery·p0.9999: 3728.736 ms/op
                 executeQuery·p1.00:   3728.736 ms/op

Iteration   5: 3464.495 ±(99.9%) 2916.797 ms/op
                 executeQuery·p0.00:   3279.946 ms/op
                 executeQuery·p0.50:   3552.575 ms/op
                 executeQuery·p0.90:   3560.964 ms/op
                 executeQuery·p0.95:   3560.964 ms/op
                 executeQuery·p0.99:   3560.964 ms/op
                 executeQuery·p0.999:  3560.964 ms/op
                 executeQuery·p0.9999: 3560.964 ms/op
                 executeQuery·p1.00:   3560.964 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   3574.945 ±(99.9%) 121.146 ms/op

  Histogram, ms/op:
    [3200.000, 3250.000) = 0 
    [3250.000, 3300.000) = 1 
    [3300.000, 3350.000) = 0 
    [3350.000, 3400.000) = 0 
    [3400.000, 3450.000) = 1 
    [3450.000, 3500.000) = 0 
    [3500.000, 3550.000) = 1 
    [3550.000, 3600.000) = 7 
    [3600.000, 3650.000) = 2 
    [3650.000, 3700.000) = 1 
    [3700.000, 3750.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   3279.946 ms/op
     p(50.0000) =   3569.353 ms/op
     p(90.0000) =   3737.125 ms/op
     p(95.0000) =   3749.708 ms/op
     p(99.0000) =   3749.708 ms/op
     p(99.9000) =   3749.708 ms/op
     p(99.9900) =   3749.708 ms/op
     p(99.9990) =   3749.708 ms/op
     p(99.9999) =   3749.708 ms/op
    p(100.0000) =   3749.708 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 66.67% complete, ETA 02:06:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
347.042 ±(99.9%) 77.195 ms/op
# Warmup Iteration   2: 315.163 ±(99.9%) 8.112 ms/op
# Warmup Iteration   3: 326.648 ±(99.9%) 11.371 ms/op
# Warmup Iteration   4: 322.572 ±(99.9%) 9.779 ms/op
# Warmup Iteration   5: 342.722 ±(99.9%) 1.562 ms/op
Iteration   1: 327.558 ±(99.9%) 11.386 ms/op
                 executeQuery·p0.00:   305.136 ms/op
                 executeQuery·p0.50:   340.001 ms/op
                 executeQuery·p0.90:   344.929 ms/op
                 executeQuery·p0.95:   345.978 ms/op
                 executeQuery·p0.99:   346.554 ms/op
                 executeQuery·p0.999:  346.554 ms/op
                 executeQuery·p0.9999: 346.554 ms/op
                 executeQuery·p1.00:   346.554 ms/op

Iteration   2: 312.476 ±(99.9%) 1.759 ms/op
                 executeQuery·p0.00:   305.660 ms/op
                 executeQuery·p0.50:   312.738 ms/op
                 executeQuery·p0.90:   316.146 ms/op
                 executeQuery·p0.95:   316.513 ms/op
                 executeQuery·p0.99:   317.194 ms/op
                 executeQuery·p0.999:  317.194 ms/op
                 executeQuery·p0.9999: 317.194 ms/op
                 executeQuery·p1.00:   317.194 ms/op

Iteration   3: 313.688 ±(99.9%) 2.486 ms/op
                 executeQuery·p0.00:   307.757 ms/op
                 executeQuery·p0.50:   314.049 ms/op
                 executeQuery·p0.90:   317.037 ms/op
                 executeQuery·p0.95:   321.756 ms/op
                 executeQuery·p0.99:   329.253 ms/op
                 executeQuery·p0.999:  329.253 ms/op
                 executeQuery·p0.9999: 329.253 ms/op
                 executeQuery·p1.00:   329.253 ms/op

Iteration   4: 310.116 ±(99.9%) 1.355 ms/op
                 executeQuery·p0.00:   305.136 ms/op
                 executeQuery·p0.50:   310.116 ms/op
                 executeQuery·p0.90:   313.367 ms/op
                 executeQuery·p0.95:   314.416 ms/op
                 executeQuery·p0.99:   315.097 ms/op
                 executeQuery·p0.999:  315.097 ms/op
                 executeQuery·p0.9999: 315.097 ms/op
                 executeQuery·p1.00:   315.097 ms/op

Iteration   5: 310.559 ±(99.9%) 1.338 ms/op
                 executeQuery·p0.00:   306.184 ms/op
                 executeQuery·p0.50:   310.378 ms/op
                 executeQuery·p0.90:   313.367 ms/op
                 executeQuery·p0.95:   315.281 ms/op
                 executeQuery·p0.99:   315.621 ms/op
                 executeQuery·p0.999:  315.621 ms/op
                 executeQuery·p0.9999: 315.621 ms/op
                 executeQuery·p1.00:   315.621 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 158
  mean =    314.719 ±(99.9%) 2.673 ms/op

  Histogram, ms/op:
    [300.000, 305.000) = 0 
    [305.000, 310.000) = 51 
    [310.000, 315.000) = 72 
    [315.000, 320.000) = 18 
    [320.000, 325.000) = 0 
    [325.000, 330.000) = 1 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 1 
    [340.000, 345.000) = 13 

  Percentiles, ms/op:
      p(0.0000) =    305.136 ms/op
     p(50.0000) =    311.427 ms/op
     p(90.0000) =    339.372 ms/op
     p(95.0000) =    343.409 ms/op
     p(99.0000) =    345.936 ms/op
     p(99.9000) =    346.554 ms/op
     p(99.9900) =    346.554 ms/op
     p(99.9990) =    346.554 ms/op
     p(99.9999) =    346.554 ms/op
    p(100.0000) =    346.554 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 67.71% complete, ETA 02:01:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
5597.299 ms/op
# Warmup Iteration   2: 3685.395 ±(99.9%) 3799.367 ms/op
# Warmup Iteration   3: 3745.513 ±(99.9%) 5614.170 ms/op
# Warmup Iteration   4: 3745.513 ±(99.9%) 229.559 ms/op
# Warmup Iteration   5: 3840.584 ±(99.9%) 2212.907 ms/op
Iteration   1: 3784.660 ±(99.9%) 1728.623 ms/op
                 executeQuery·p0.00:   3695.182 ms/op
                 executeQuery·p0.50:   3774.874 ms/op
                 executeQuery·p0.90:   3883.926 ms/op
                 executeQuery·p0.95:   3883.926 ms/op
                 executeQuery·p0.99:   3883.926 ms/op
                 executeQuery·p0.999:  3883.926 ms/op
                 executeQuery·p0.9999: 3883.926 ms/op
                 executeQuery·p1.00:   3883.926 ms/op

Iteration   2: 3730.134 ±(99.9%) 1728.623 ms/op
                 executeQuery·p0.00:   3640.656 ms/op
                 executeQuery·p0.50:   3720.348 ms/op
                 executeQuery·p0.90:   3829.400 ms/op
                 executeQuery·p0.95:   3829.400 ms/op
                 executeQuery·p0.99:   3829.400 ms/op
                 executeQuery·p0.999:  3829.400 ms/op
                 executeQuery·p0.9999: 3829.400 ms/op
                 executeQuery·p1.00:   3829.400 ms/op

Iteration   3: 3749.708 ±(99.9%) 841.717 ms/op
                 executeQuery·p0.00:   3703.570 ms/op
                 executeQuery·p0.50:   3749.708 ms/op
                 executeQuery·p0.90:   3795.845 ms/op
                 executeQuery·p0.95:   3795.845 ms/op
                 executeQuery·p0.99:   3795.845 ms/op
                 executeQuery·p0.999:  3795.845 ms/op
                 executeQuery·p0.9999: 3795.845 ms/op
                 executeQuery·p1.00:   3795.845 ms/op

Iteration   4: 3822.409 ±(99.9%) 1963.343 ms/op
                 executeQuery·p0.00:   3703.570 ms/op
                 executeQuery·p0.50:   3850.371 ms/op
                 executeQuery·p0.90:   3913.286 ms/op
                 executeQuery·p0.95:   3913.286 ms/op
                 executeQuery·p0.99:   3913.286 ms/op
                 executeQuery·p0.999:  3913.286 ms/op
                 executeQuery·p0.9999: 3913.286 ms/op
                 executeQuery·p1.00:   3913.286 ms/op

Iteration   5: 3724.542 ±(99.9%) 3116.711 ms/op
                 executeQuery·p0.00:   3527.410 ms/op
                 executeQuery·p0.50:   3816.817 ms/op
                 executeQuery·p0.90:   3829.400 ms/op
                 executeQuery·p0.95:   3829.400 ms/op
                 executeQuery·p0.99:   3829.400 ms/op
                 executeQuery·p0.999:  3829.400 ms/op
                 executeQuery·p0.9999: 3829.400 ms/op
                 executeQuery·p1.00:   3829.400 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   3762.291 ±(99.9%) 107.629 ms/op

  Histogram, ms/op:
    [3500.000, 3550.000) = 1 
    [3550.000, 3600.000) = 0 
    [3600.000, 3650.000) = 1 
    [3650.000, 3700.000) = 1 
    [3700.000, 3750.000) = 4 
    [3750.000, 3800.000) = 2 
    [3800.000, 3850.000) = 3 
    [3850.000, 3900.000) = 2 
    [3900.000, 3950.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3527.410 ms/op
     p(50.0000) =   3774.874 ms/op
     p(90.0000) =   3895.670 ms/op
     p(95.0000) =   3913.286 ms/op
     p(99.0000) =   3913.286 ms/op
     p(99.9000) =   3913.286 ms/op
     p(99.9900) =   3913.286 ms/op
     p(99.9990) =   3913.286 ms/op
     p(99.9999) =   3913.286 ms/op
    p(100.0000) =   3913.286 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 68.75% complete, ETA 01:56:43
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
258.622 ±(99.9%) 21.023 ms/op
# Warmup Iteration   2: 252.156 ±(99.9%) 2.807 ms/op
# Warmup Iteration   3: 252.432 ±(99.9%) 0.893 ms/op
# Warmup Iteration   4: 252.497 ±(99.9%) 0.752 ms/op
# Warmup Iteration   5: 251.927 ±(99.9%) 1.053 ms/op
Iteration   1: 253.251 ±(99.9%) 6.008 ms/op
                 executeQuery·p0.00:   249.561 ms/op
                 executeQuery·p0.50:   251.134 ms/op
                 executeQuery·p0.90:   253.126 ms/op
                 executeQuery·p0.95:   271.214 ms/op
                 executeQuery·p0.99:   315.621 ms/op
                 executeQuery·p0.999:  315.621 ms/op
                 executeQuery·p0.9999: 315.621 ms/op
                 executeQuery·p1.00:   315.621 ms/op

Iteration   2: 251.547 ±(99.9%) 0.553 ms/op
                 executeQuery·p0.00:   250.348 ms/op
                 executeQuery·p0.50:   251.134 ms/op
                 executeQuery·p0.90:   252.969 ms/op
                 executeQuery·p0.95:   253.978 ms/op
                 executeQuery·p0.99:   254.804 ms/op
                 executeQuery·p0.999:  254.804 ms/op
                 executeQuery·p0.9999: 254.804 ms/op
                 executeQuery·p1.00:   254.804 ms/op

Iteration   3: 252.989 ±(99.9%) 6.030 ms/op
                 executeQuery·p0.00:   249.299 ms/op
                 executeQuery·p0.50:   251.134 ms/op
                 executeQuery·p0.90:   252.681 ms/op
                 executeQuery·p0.95:   255.223 ms/op
                 executeQuery·p0.99:   318.767 ms/op
                 executeQuery·p0.999:  318.767 ms/op
                 executeQuery·p0.9999: 318.767 ms/op
                 executeQuery·p1.00:   318.767 ms/op

Iteration   4: 251.265 ±(99.9%) 1.138 ms/op
                 executeQuery·p0.00:   249.561 ms/op
                 executeQuery·p0.50:   250.872 ms/op
                 executeQuery·p0.90:   252.392 ms/op
                 executeQuery·p0.95:   255.512 ms/op
                 executeQuery·p0.99:   261.620 ms/op
                 executeQuery·p0.999:  261.620 ms/op
                 executeQuery·p0.9999: 261.620 ms/op
                 executeQuery·p1.00:   261.620 ms/op

Iteration   5: 251.173 ±(99.9%) 0.714 ms/op
                 executeQuery·p0.00:   249.823 ms/op
                 executeQuery·p0.50:   250.872 ms/op
                 executeQuery·p0.90:   252.156 ms/op
                 executeQuery·p0.95:   253.205 ms/op
                 executeQuery·p0.99:   257.425 ms/op
                 executeQuery·p0.999:  257.425 ms/op
                 executeQuery·p0.9999: 257.425 ms/op
                 executeQuery·p1.00:   257.425 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 200
  mean =    252.045 ±(99.9%) 1.619 ms/op

  Histogram, ms/op:
    [240.000, 245.000) = 0 
    [245.000, 250.000) = 13 
    [250.000, 255.000) = 180 
    [255.000, 260.000) = 3 
    [260.000, 265.000) = 1 
    [265.000, 270.000) = 0 
    [270.000, 275.000) = 1 
    [275.000, 280.000) = 0 
    [280.000, 285.000) = 0 
    [285.000, 290.000) = 0 
    [290.000, 295.000) = 0 
    [295.000, 300.000) = 0 
    [300.000, 305.000) = 0 
    [305.000, 310.000) = 0 
    [310.000, 315.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    249.299 ms/op
     p(50.0000) =    251.134 ms/op
     p(90.0000) =    252.707 ms/op
     p(95.0000) =    254.018 ms/op
     p(99.0000) =    315.186 ms/op
     p(99.9000) =    318.767 ms/op
     p(99.9900) =    318.767 ms/op
     p(99.9990) =    318.767 ms/op
     p(99.9999) =    318.767 ms/op
    p(100.0000) =    318.767 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 69.79% complete, ETA 01:51:53
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2521.825 ±(99.9%) 2823.835 ms/op
# Warmup Iteration   2: 2212.915 ±(99.9%) 18.415 ms/op
# Warmup Iteration   3: 2497.708 ±(99.9%) 15.648 ms/op
# Warmup Iteration   4: 2496.450 ±(99.9%) 13.513 ms/op
# Warmup Iteration   5: 2502.951 ±(99.9%) 25.950 ms/op
Iteration   1: 2499.805 ±(99.9%) 22.130 ms/op
                 executeQuery·p0.00:   2495.611 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2503.999 ms/op
                 executeQuery·p0.95:   2503.999 ms/op
                 executeQuery·p0.99:   2503.999 ms/op
                 executeQuery·p0.999:  2503.999 ms/op
                 executeQuery·p0.9999: 2503.999 ms/op
                 executeQuery·p1.00:   2503.999 ms/op

Iteration   2: 2508.194 ±(99.9%) 110.134 ms/op
                 executeQuery·p0.00:   2487.222 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2558.525 ms/op
                 executeQuery·p0.95:   2558.525 ms/op
                 executeQuery·p0.99:   2558.525 ms/op
                 executeQuery·p0.999:  2558.525 ms/op
                 executeQuery·p0.9999: 2558.525 ms/op
                 executeQuery·p1.00:   2558.525 ms/op

Iteration   3: 2495.611 ±(99.9%) 11.420 ms/op
                 executeQuery·p0.00:   2491.417 ms/op
                 executeQuery·p0.50:   2495.611 ms/op
                 executeQuery·p0.90:   2499.805 ms/op
                 executeQuery·p0.95:   2499.805 ms/op
                 executeQuery·p0.99:   2499.805 ms/op
                 executeQuery·p0.999:  2499.805 ms/op
                 executeQuery·p0.9999: 2499.805 ms/op
                 executeQuery·p1.00:   2499.805 ms/op

Iteration   4: 2526.020 ±(99.9%) 338.794 ms/op
                 executeQuery·p0.00:   2499.805 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2604.663 ms/op
                 executeQuery·p0.95:   2604.663 ms/op
                 executeQuery·p0.99:   2604.663 ms/op
                 executeQuery·p0.999:  2604.663 ms/op
                 executeQuery·p0.9999: 2604.663 ms/op
                 executeQuery·p1.00:   2604.663 ms/op

Iteration   5: 2498.757 ±(99.9%) 64.043 ms/op
                 executeQuery·p0.00:   2491.417 ms/op
                 executeQuery·p0.50:   2495.611 ms/op
                 executeQuery·p0.90:   2512.388 ms/op
                 executeQuery·p0.95:   2512.388 ms/op
                 executeQuery·p0.99:   2512.388 ms/op
                 executeQuery·p0.999:  2512.388 ms/op
                 executeQuery·p0.9999: 2512.388 ms/op
                 executeQuery·p1.00:   2512.388 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 22
  mean =   2505.334 ±(99.9%) 21.326 ms/op

  Histogram, ms/op:
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 0 
    [2450.000, 2475.000) = 0 
    [2475.000, 2500.000) = 18 
    [2500.000, 2525.000) = 2 
    [2525.000, 2550.000) = 0 
    [2550.000, 2575.000) = 1 
    [2575.000, 2600.000) = 0 
    [2600.000, 2625.000) = 1 
    [2625.000, 2650.000) = 0 
    [2650.000, 2675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2487.222 ms/op
     p(50.0000) =   2499.805 ms/op
     p(90.0000) =   2544.684 ms/op
     p(95.0000) =   2597.742 ms/op
     p(99.0000) =   2604.663 ms/op
     p(99.9000) =   2604.663 ms/op
     p(99.9900) =   2604.663 ms/op
     p(99.9990) =   2604.663 ms/op
     p(99.9999) =   2604.663 ms/op
    p(100.0000) =   2604.663 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 70.83% complete, ETA 01:47:11
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
69659.001 ms/op
# Warmup Iteration   2: 69793.219 ms/op
# Warmup Iteration   3: 25065.161 ms/op
# Warmup Iteration   4: 22951.231 ms/op
# Warmup Iteration   5: 22951.231 ms/op
Iteration   1: 22850.568 ms/op
                 executeQuery·p0.00:   22850.568 ms/op
                 executeQuery·p0.50:   22850.568 ms/op
                 executeQuery·p0.90:   22850.568 ms/op
                 executeQuery·p0.95:   22850.568 ms/op
                 executeQuery·p0.99:   22850.568 ms/op
                 executeQuery·p0.999:  22850.568 ms/op
                 executeQuery·p0.9999: 22850.568 ms/op
                 executeQuery·p1.00:   22850.568 ms/op

Iteration   2: 22817.014 ms/op
                 executeQuery·p0.00:   22817.014 ms/op
                 executeQuery·p0.50:   22817.014 ms/op
                 executeQuery·p0.90:   22817.014 ms/op
                 executeQuery·p0.95:   22817.014 ms/op
                 executeQuery·p0.99:   22817.014 ms/op
                 executeQuery·p0.999:  22817.014 ms/op
                 executeQuery·p0.9999: 22817.014 ms/op
                 executeQuery·p1.00:   22817.014 ms/op

Iteration   3: 24628.953 ms/op
                 executeQuery·p0.00:   24628.953 ms/op
                 executeQuery·p0.50:   24628.953 ms/op
                 executeQuery·p0.90:   24628.953 ms/op
                 executeQuery·p0.95:   24628.953 ms/op
                 executeQuery·p0.99:   24628.953 ms/op
                 executeQuery·p0.999:  24628.953 ms/op
                 executeQuery·p0.9999: 24628.953 ms/op
                 executeQuery·p1.00:   24628.953 ms/op

Iteration   4: 22716.350 ms/op
                 executeQuery·p0.00:   22716.350 ms/op
                 executeQuery·p0.50:   22716.350 ms/op
                 executeQuery·p0.90:   22716.350 ms/op
                 executeQuery·p0.95:   22716.350 ms/op
                 executeQuery·p0.99:   22716.350 ms/op
                 executeQuery·p0.999:  22716.350 ms/op
                 executeQuery·p0.9999: 22716.350 ms/op
                 executeQuery·p1.00:   22716.350 ms/op

Iteration   5: 25065.161 ms/op
                 executeQuery·p0.00:   25065.161 ms/op
                 executeQuery·p0.50:   25065.161 ms/op
                 executeQuery·p0.90:   25065.161 ms/op
                 executeQuery·p0.95:   25065.161 ms/op
                 executeQuery·p0.99:   25065.161 ms/op
                 executeQuery·p0.999:  25065.161 ms/op
                 executeQuery·p0.9999: 25065.161 ms/op
                 executeQuery·p1.00:   25065.161 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  23615.609 ±(99.9%) 4373.395 ms/op

  Histogram, ms/op:
    [22000.000, 22250.000) = 0 
    [22250.000, 22500.000) = 0 
    [22500.000, 22750.000) = 1 
    [22750.000, 23000.000) = 2 
    [23000.000, 23250.000) = 0 
    [23250.000, 23500.000) = 0 
    [23500.000, 23750.000) = 0 
    [23750.000, 24000.000) = 0 
    [24000.000, 24250.000) = 0 
    [24250.000, 24500.000) = 0 
    [24500.000, 24750.000) = 1 
    [24750.000, 25000.000) = 0 
    [25000.000, 25250.000) = 1 
    [25250.000, 25500.000) = 0 
    [25500.000, 25750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  22716.350 ms/op
     p(50.0000) =  22850.568 ms/op
     p(90.0000) =  25065.161 ms/op
     p(95.0000) =  25065.161 ms/op
     p(99.0000) =  25065.161 ms/op
     p(99.9000) =  25065.161 ms/op
     p(99.9900) =  25065.161 ms/op
     p(99.9990) =  25065.161 ms/op
     p(99.9999) =  25065.161 ms/op
    p(100.0000) =  25065.161 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 71.88% complete, ETA 01:44:01
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
362.152 ±(99.9%) 20.634 ms/op
# Warmup Iteration   2: 349.230 ±(99.9%) 3.113 ms/op
# Warmup Iteration   3: 349.266 ±(99.9%) 6.696 ms/op
# Warmup Iteration   4: 353.189 ±(99.9%) 10.280 ms/op
# Warmup Iteration   5: 351.635 ±(99.9%) 4.630 ms/op
Iteration   1: 350.875 ±(99.9%) 5.722 ms/op
                 executeQuery·p0.00:   346.030 ms/op
                 executeQuery·p0.50:   347.603 ms/op
                 executeQuery·p0.90:   355.992 ms/op
                 executeQuery·p0.95:   375.652 ms/op
                 executeQuery·p0.99:   390.070 ms/op
                 executeQuery·p0.999:  390.070 ms/op
                 executeQuery·p0.9999: 390.070 ms/op
                 executeQuery·p1.00:   390.070 ms/op

Iteration   2: 353.479 ±(99.9%) 10.423 ms/op
                 executeQuery·p0.00:   346.030 ms/op
                 executeQuery·p0.50:   348.127 ms/op
                 executeQuery·p0.90:   362.283 ms/op
                 executeQuery·p0.95:   406.323 ms/op
                 executeQuery·p0.99:   412.615 ms/op
                 executeQuery·p0.999:  412.615 ms/op
                 executeQuery·p0.9999: 412.615 ms/op
                 executeQuery·p1.00:   412.615 ms/op

Iteration   3: 349.375 ±(99.9%) 3.300 ms/op
                 executeQuery·p0.00:   344.457 ms/op
                 executeQuery·p0.50:   347.603 ms/op
                 executeQuery·p0.90:   357.040 ms/op
                 executeQuery·p0.95:   360.448 ms/op
                 executeQuery·p0.99:   361.759 ms/op
                 executeQuery·p0.999:  361.759 ms/op
                 executeQuery·p0.9999: 361.759 ms/op
                 executeQuery·p1.00:   361.759 ms/op

Iteration   4: 348.633 ±(99.9%) 7.917 ms/op
                 executeQuery·p0.00:   343.409 ms/op
                 executeQuery·p0.50:   346.554 ms/op
                 executeQuery·p0.90:   349.176 ms/op
                 executeQuery·p0.95:   379.060 ms/op
                 executeQuery·p0.99:   408.420 ms/op
                 executeQuery·p0.999:  408.420 ms/op
                 executeQuery·p0.9999: 408.420 ms/op
                 executeQuery·p1.00:   408.420 ms/op

Iteration   5: 347.639 ±(99.9%) 1.831 ms/op
                 executeQuery·p0.00:   344.457 ms/op
                 executeQuery·p0.50:   346.554 ms/op
                 executeQuery·p0.90:   351.797 ms/op
                 executeQuery·p0.95:   353.632 ms/op
                 executeQuery·p0.99:   353.894 ms/op
                 executeQuery·p0.999:  353.894 ms/op
                 executeQuery·p0.9999: 353.894 ms/op
                 executeQuery·p1.00:   353.894 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 145
  mean =    350.000 ±(99.9%) 2.724 ms/op

  Histogram, ms/op:
    [340.000, 345.000) = 14 
    [345.000, 350.000) = 95 
    [350.000, 355.000) = 22 
    [355.000, 360.000) = 7 
    [360.000, 365.000) = 3 
    [365.000, 370.000) = 0 
    [370.000, 375.000) = 0 
    [375.000, 380.000) = 0 
    [380.000, 385.000) = 0 
    [385.000, 390.000) = 0 
    [390.000, 395.000) = 1 
    [395.000, 400.000) = 0 
    [400.000, 405.000) = 1 
    [405.000, 410.000) = 1 
    [410.000, 415.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    343.409 ms/op
     p(50.0000) =    347.079 ms/op
     p(90.0000) =    355.153 ms/op
     p(95.0000) =    360.605 ms/op
     p(99.0000) =    410.685 ms/op
     p(99.9000) =    412.615 ms/op
     p(99.9900) =    412.615 ms/op
     p(99.9990) =    412.615 ms/op
     p(99.9999) =    412.615 ms/op
    p(100.0000) =    412.615 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 72.92% complete, ETA 01:39:23
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3535.798 ±(99.9%) 1704.175 ms/op
# Warmup Iteration   2: 3470.088 ±(99.9%) 44.179 ms/op
# Warmup Iteration   3: 3465.893 ±(99.9%) 44.179 ms/op
# Warmup Iteration   4: 3474.282 ±(99.9%) 192.570 ms/op
# Warmup Iteration   5: 3486.865 ±(99.9%) 574.323 ms/op
Iteration   1: 3478.476 ±(99.9%) 233.772 ms/op
                 executeQuery·p0.00:   3464.495 ms/op
                 executeQuery·p0.50:   3481.272 ms/op
                 executeQuery·p0.90:   3489.661 ms/op
                 executeQuery·p0.95:   3489.661 ms/op
                 executeQuery·p0.99:   3489.661 ms/op
                 executeQuery·p0.999:  3489.661 ms/op
                 executeQuery·p0.9999: 3489.661 ms/op
                 executeQuery·p1.00:   3489.661 ms/op

Iteration   2: 3482.670 ±(99.9%) 509.493 ms/op
                 executeQuery·p0.00:   3464.495 ms/op
                 executeQuery·p0.50:   3468.689 ms/op
                 executeQuery·p0.90:   3514.827 ms/op
                 executeQuery·p0.95:   3514.827 ms/op
                 executeQuery·p0.99:   3514.827 ms/op
                 executeQuery·p0.999:  3514.827 ms/op
                 executeQuery·p0.9999: 3514.827 ms/op
                 executeQuery·p1.00:   3514.827 ms/op

Iteration   3: 3510.632 ±(99.9%) 1724.667 ms/op
                 executeQuery·p0.00:   3451.912 ms/op
                 executeQuery·p0.50:   3460.301 ms/op
                 executeQuery·p0.90:   3619.684 ms/op
                 executeQuery·p0.95:   3619.684 ms/op
                 executeQuery·p0.99:   3619.684 ms/op
                 executeQuery·p0.999:  3619.684 ms/op
                 executeQuery·p0.9999: 3619.684 ms/op
                 executeQuery·p1.00:   3619.684 ms/op

Iteration   4: 3472.884 ±(99.9%) 275.896 ms/op
                 executeQuery·p0.00:   3456.106 ms/op
                 executeQuery·p0.50:   3477.078 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op

Iteration   5: 3457.505 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   3447.718 ms/op
                 executeQuery·p0.50:   3460.301 ms/op
                 executeQuery·p0.90:   3464.495 ms/op
                 executeQuery·p0.95:   3464.495 ms/op
                 executeQuery·p0.99:   3464.495 ms/op
                 executeQuery·p0.999:  3464.495 ms/op
                 executeQuery·p0.9999: 3464.495 ms/op
                 executeQuery·p1.00:   3464.495 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 15
  mean =   3480.433 ±(99.9%) 45.070 ms/op

  Histogram, ms/op:
    [3400.000, 3425.000) = 0 
    [3425.000, 3450.000) = 1 
    [3450.000, 3475.000) = 8 
    [3475.000, 3500.000) = 4 
    [3500.000, 3525.000) = 1 
    [3525.000, 3550.000) = 0 
    [3550.000, 3575.000) = 0 
    [3575.000, 3600.000) = 0 
    [3600.000, 3625.000) = 1 
    [3625.000, 3650.000) = 0 
    [3650.000, 3675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3447.718 ms/op
     p(50.0000) =   3464.495 ms/op
     p(90.0000) =   3556.770 ms/op
     p(95.0000) =   3619.684 ms/op
     p(99.0000) =   3619.684 ms/op
     p(99.9000) =   3619.684 ms/op
     p(99.9900) =   3619.684 ms/op
     p(99.9990) =   3619.684 ms/op
     p(99.9999) =   3619.684 ms/op
    p(100.0000) =   3619.684 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g --add-exports=java.base/sun.nio.ch=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 73.96% complete, ETA 01:34:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
34426.847 ms/op
# Warmup Iteration   2: 34493.956 ms/op
# Warmup Iteration   3: 34359.738 ms/op
# Warmup Iteration   4: 34628.174 ms/op
# Warmup Iteration   5: 38252.052 ms/op
Iteration   1: 35165.045 ms/op
                 executeQuery·p0.00:   35165.045 ms/op
                 executeQuery·p0.50:   35165.045 ms/op
                 executeQuery·p0.90:   35165.045 ms/op
                 executeQuery·p0.95:   35165.045 ms/op
                 executeQuery·p0.99:   35165.045 ms/op
                 executeQuery·p0.999:  35165.045 ms/op
                 executeQuery·p0.9999: 35165.045 ms/op
                 executeQuery·p1.00:   35165.045 ms/op

Iteration   2: 34426.847 ms/op
                 executeQuery·p0.00:   34426.847 ms/op
                 executeQuery·p0.50:   34426.847 ms/op
                 executeQuery·p0.90:   34426.847 ms/op
                 executeQuery·p0.95:   34426.847 ms/op
                 executeQuery·p0.99:   34426.847 ms/op
                 executeQuery·p0.999:  34426.847 ms/op
                 executeQuery·p0.9999: 34426.847 ms/op
                 executeQuery·p1.00:   34426.847 ms/op

Iteration   3: 34426.847 ms/op
                 executeQuery·p0.00:   34426.847 ms/op
                 executeQuery·p0.50:   34426.847 ms/op
                 executeQuery·p0.90:   34426.847 ms/op
                 executeQuery·p0.95:   34426.847 ms/op
                 executeQuery·p0.99:   34426.847 ms/op
                 executeQuery·p0.999:  34426.847 ms/op
                 executeQuery·p0.9999: 34426.847 ms/op
                 executeQuery·p1.00:   34426.847 ms/op

Iteration   4: 35097.936 ms/op
                 executeQuery·p0.00:   35097.936 ms/op
                 executeQuery·p0.50:   35097.936 ms/op
                 executeQuery·p0.90:   35097.936 ms/op
                 executeQuery·p0.95:   35097.936 ms/op
                 executeQuery·p0.99:   35097.936 ms/op
                 executeQuery·p0.999:  35097.936 ms/op
                 executeQuery·p0.9999: 35097.936 ms/op
                 executeQuery·p1.00:   35097.936 ms/op

Iteration   5: 34326.184 ms/op
                 executeQuery·p0.00:   34326.184 ms/op
                 executeQuery·p0.50:   34326.184 ms/op
                 executeQuery·p0.90:   34326.184 ms/op
                 executeQuery·p0.95:   34326.184 ms/op
                 executeQuery·p0.99:   34326.184 ms/op
                 executeQuery·p0.999:  34326.184 ms/op
                 executeQuery·p0.9999: 34326.184 ms/op
                 executeQuery·p1.00:   34326.184 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery":
  N = 5
  mean =  34688.572 ±(99.9%) 1567.607 ms/op

  Histogram, ms/op:
    [34300.000, 34350.000) = 1 
    [34350.000, 34400.000) = 0 
    [34400.000, 34450.000) = 2 
    [34450.000, 34500.000) = 0 
    [34500.000, 34550.000) = 0 
    [34550.000, 34600.000) = 0 
    [34600.000, 34650.000) = 0 
    [34650.000, 34700.000) = 0 
    [34700.000, 34750.000) = 0 
    [34750.000, 34800.000) = 0 
    [34800.000, 34850.000) = 0 
    [34850.000, 34900.000) = 0 
    [34900.000, 34950.000) = 0 
    [34950.000, 35000.000) = 0 
    [35000.000, 35050.000) = 0 
    [35050.000, 35100.000) = 1 
    [35100.000, 35150.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  34326.184 ms/op
     p(50.0000) =  34426.847 ms/op
     p(90.0000) =  35165.045 ms/op
     p(95.0000) =  35165.045 ms/op
     p(99.0000) =  35165.045 ms/op
     p(99.9000) =  35165.045 ms/op
     p(99.9900) =  35165.045 ms/op
     p(99.9990) =  35165.045 ms/op
     p(99.9999) =  35165.045 ms/op
    p(100.0000) =  35165.045 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 75.00% complete, ETA 01:31:45
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
499.047 ±(99.9%) 59.279 ms/op
# Warmup Iteration   2: 569.435 ±(99.9%) 0.855 ms/op
# Warmup Iteration   3: 498.074 ±(99.9%) 54.387 ms/op
# Warmup Iteration   4: 442.818 ±(99.9%) 1.704 ms/op
# Warmup Iteration   5: 447.491 ±(99.9%) 0.749 ms/op
Iteration   1: 447.788 ±(99.9%) 1.292 ms/op
                 executeQuery·p0.00:   445.645 ms/op
                 executeQuery·p0.50:   447.742 ms/op
                 executeQuery·p0.90:   449.105 ms/op
                 executeQuery·p0.95:   453.090 ms/op
                 executeQuery·p0.99:   454.033 ms/op
                 executeQuery·p0.999:  454.033 ms/op
                 executeQuery·p0.9999: 454.033 ms/op
                 executeQuery·p1.00:   454.033 ms/op

Iteration   2: 447.947 ±(99.9%) 0.634 ms/op
                 executeQuery·p0.00:   446.693 ms/op
                 executeQuery·p0.50:   447.742 ms/op
                 executeQuery·p0.90:   449.105 ms/op
                 executeQuery·p0.95:   449.734 ms/op
                 executeQuery·p0.99:   449.839 ms/op
                 executeQuery·p0.999:  449.839 ms/op
                 executeQuery·p0.9999: 449.839 ms/op
                 executeQuery·p1.00:   449.839 ms/op

Iteration   3: 442.112 ±(99.9%) 0.519 ms/op
                 executeQuery·p0.00:   440.926 ms/op
                 executeQuery·p0.50:   441.975 ms/op
                 executeQuery·p0.90:   442.814 ms/op
                 executeQuery·p0.95:   443.862 ms/op
                 executeQuery·p0.99:   444.072 ms/op
                 executeQuery·p0.999:  444.072 ms/op
                 executeQuery·p0.9999: 444.072 ms/op
                 executeQuery·p1.00:   444.072 ms/op

Iteration   4: 442.066 ±(99.9%) 0.826 ms/op
                 executeQuery·p0.00:   440.926 ms/op
                 executeQuery·p0.50:   441.975 ms/op
                 executeQuery·p0.90:   442.814 ms/op
                 executeQuery·p0.95:   445.540 ms/op
                 executeQuery·p0.99:   446.169 ms/op
                 executeQuery·p0.999:  446.169 ms/op
                 executeQuery·p0.9999: 446.169 ms/op
                 executeQuery·p1.00:   446.169 ms/op

Iteration   5: 442.567 ±(99.9%) 1.962 ms/op
                 executeQuery·p0.00:   439.878 ms/op
                 executeQuery·p0.50:   441.975 ms/op
                 executeQuery·p0.90:   445.225 ms/op
                 executeQuery·p0.95:   451.307 ms/op
                 executeQuery·p0.99:   452.461 ms/op
                 executeQuery·p0.999:  452.461 ms/op
                 executeQuery·p0.9999: 452.461 ms/op
                 executeQuery·p1.00:   452.461 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 115
  mean =    444.496 ±(99.9%) 0.986 ms/op

  Histogram, ms/op:
    [430.000, 432.500) = 0 
    [432.500, 435.000) = 0 
    [435.000, 437.500) = 0 
    [437.500, 440.000) = 1 
    [440.000, 442.500) = 58 
    [442.500, 445.000) = 7 
    [445.000, 447.500) = 21 
    [447.500, 450.000) = 26 
    [450.000, 452.500) = 1 
    [452.500, 455.000) = 1 
    [455.000, 457.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    439.878 ms/op
     p(50.0000) =    442.499 ms/op
     p(90.0000) =    448.791 ms/op
     p(95.0000) =    448.895 ms/op
     p(99.0000) =    453.782 ms/op
     p(99.9000) =    454.033 ms/op
     p(99.9900) =    454.033 ms/op
     p(99.9990) =    454.033 ms/op
     p(99.9999) =    454.033 ms/op
    p(100.0000) =    454.033 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 76.04% complete, ETA 01:27:16
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4999.610 ±(99.9%) 10212.445 ms/op
# Warmup Iteration   2: 5544.870 ms/op
# Warmup Iteration   3: 4398.427 ±(99.9%) 88.357 ms/op
# Warmup Iteration   4: 4339.707 ±(99.9%) 176.715 ms/op
# Warmup Iteration   5: 4412.408 ±(99.9%) 0.001 ms/op
Iteration   1: 4434.777 ±(99.9%) 318.577 ms/op
                 executeQuery·p0.00:   4420.796 ms/op
                 executeQuery·p0.50:   4429.185 ms/op
                 executeQuery·p0.90:   4454.351 ms/op
                 executeQuery·p0.95:   4454.351 ms/op
                 executeQuery·p0.99:   4454.351 ms/op
                 executeQuery·p0.999:  4454.351 ms/op
                 executeQuery·p0.9999: 4454.351 ms/op
                 executeQuery·p1.00:   4454.351 ms/op

Iteration   2: 4443.166 ±(99.9%) 491.953 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4454.351 ms/op
                 executeQuery·p0.90:   4462.739 ms/op
                 executeQuery·p0.95:   4462.739 ms/op
                 executeQuery·p0.99:   4462.739 ms/op
                 executeQuery·p0.999:  4462.739 ms/op
                 executeQuery·p0.9999: 4462.739 ms/op
                 executeQuery·p1.00:   4462.739 ms/op

Iteration   3: 4440.370 ±(99.9%) 318.577 ms/op
                 executeQuery·p0.00:   4420.796 ms/op
                 executeQuery·p0.50:   4445.962 ms/op
                 executeQuery·p0.90:   4454.351 ms/op
                 executeQuery·p0.95:   4454.351 ms/op
                 executeQuery·p0.99:   4454.351 ms/op
                 executeQuery·p0.999:  4454.351 ms/op
                 executeQuery·p0.9999: 4454.351 ms/op
                 executeQuery·p1.00:   4454.351 ms/op

Iteration   4: 4387.242 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   4378.853 ms/op
                 executeQuery·p0.50:   4387.242 ms/op
                 executeQuery·p0.90:   4395.631 ms/op
                 executeQuery·p0.95:   4395.631 ms/op
                 executeQuery·p0.99:   4395.631 ms/op
                 executeQuery·p0.999:  4395.631 ms/op
                 executeQuery·p0.9999: 4395.631 ms/op
                 executeQuery·p1.00:   4395.631 ms/op

Iteration   5: 4434.777 ±(99.9%) 385.141 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4437.574 ms/op
                 executeQuery·p0.90:   4454.351 ms/op
                 executeQuery·p0.95:   4454.351 ms/op
                 executeQuery·p0.99:   4454.351 ms/op
                 executeQuery·p0.999:  4454.351 ms/op
                 executeQuery·p0.9999: 4454.351 ms/op
                 executeQuery·p1.00:   4454.351 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4428.067 ±(99.9%) 28.735 ms/op

  Histogram, ms/op:
    [4370.000, 4380.000) = 1 
    [4380.000, 4390.000) = 1 
    [4390.000, 4400.000) = 1 
    [4400.000, 4410.000) = 0 
    [4410.000, 4420.000) = 2 
    [4420.000, 4430.000) = 3 
    [4430.000, 4440.000) = 1 
    [4440.000, 4450.000) = 1 
    [4450.000, 4460.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =   4378.853 ms/op
     p(50.0000) =   4429.185 ms/op
     p(90.0000) =   4457.706 ms/op
     p(95.0000) =   4462.739 ms/op
     p(99.0000) =   4462.739 ms/op
     p(99.9000) =   4462.739 ms/op
     p(99.9900) =   4462.739 ms/op
     p(99.9990) =   4462.739 ms/op
     p(99.9999) =   4462.739 ms/op
    p(100.0000) =   4462.739 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 77.08% complete, ETA 01:23:00
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
45499.810 ms/op
# Warmup Iteration   2: 43151.000 ms/op
# Warmup Iteration   3: 43754.979 ms/op
# Warmup Iteration   4: 43687.870 ms/op
# Warmup Iteration   5: 44157.633 ms/op
Iteration   1: 43285.217 ms/op
                 executeQuery·p0.00:   43285.217 ms/op
                 executeQuery·p0.50:   43285.217 ms/op
                 executeQuery·p0.90:   43285.217 ms/op
                 executeQuery·p0.95:   43285.217 ms/op
                 executeQuery·p0.99:   43285.217 ms/op
                 executeQuery·p0.999:  43285.217 ms/op
                 executeQuery·p0.9999: 43285.217 ms/op
                 executeQuery·p1.00:   43285.217 ms/op

Iteration   2: 43352.326 ms/op
                 executeQuery·p0.00:   43352.326 ms/op
                 executeQuery·p0.50:   43352.326 ms/op
                 executeQuery·p0.90:   43352.326 ms/op
                 executeQuery·p0.95:   43352.326 ms/op
                 executeQuery·p0.99:   43352.326 ms/op
                 executeQuery·p0.999:  43352.326 ms/op
                 executeQuery·p0.9999: 43352.326 ms/op
                 executeQuery·p1.00:   43352.326 ms/op

Iteration   3: 43352.326 ms/op
                 executeQuery·p0.00:   43352.326 ms/op
                 executeQuery·p0.50:   43352.326 ms/op
                 executeQuery·p0.90:   43352.326 ms/op
                 executeQuery·p0.95:   43352.326 ms/op
                 executeQuery·p0.99:   43352.326 ms/op
                 executeQuery·p0.999:  43352.326 ms/op
                 executeQuery·p0.9999: 43352.326 ms/op
                 executeQuery·p1.00:   43352.326 ms/op

Iteration   4: 43352.326 ms/op
                 executeQuery·p0.00:   43352.326 ms/op
                 executeQuery·p0.50:   43352.326 ms/op
                 executeQuery·p0.90:   43352.326 ms/op
                 executeQuery·p0.95:   43352.326 ms/op
                 executeQuery·p0.99:   43352.326 ms/op
                 executeQuery·p0.999:  43352.326 ms/op
                 executeQuery·p0.9999: 43352.326 ms/op
                 executeQuery·p1.00:   43352.326 ms/op

Iteration   5: 43352.326 ms/op
                 executeQuery·p0.00:   43352.326 ms/op
                 executeQuery·p0.50:   43352.326 ms/op
                 executeQuery·p0.90:   43352.326 ms/op
                 executeQuery·p0.95:   43352.326 ms/op
                 executeQuery·p0.99:   43352.326 ms/op
                 executeQuery·p0.999:  43352.326 ms/op
                 executeQuery·p0.9999: 43352.326 ms/op
                 executeQuery·p1.00:   43352.326 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  43338.904 ±(99.9%) 115.566 ms/op

  Histogram, ms/op:
    [43280.000, 43285.000) = 0 
    [43285.000, 43290.000) = 1 
    [43290.000, 43295.000) = 0 
    [43295.000, 43300.000) = 0 
    [43300.000, 43305.000) = 0 
    [43305.000, 43310.000) = 0 
    [43310.000, 43315.000) = 0 
    [43315.000, 43320.000) = 0 
    [43320.000, 43325.000) = 0 
    [43325.000, 43330.000) = 0 
    [43330.000, 43335.000) = 0 
    [43335.000, 43340.000) = 0 
    [43340.000, 43345.000) = 0 
    [43345.000, 43350.000) = 0 
    [43350.000, 43355.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =  43285.217 ms/op
     p(50.0000) =  43352.326 ms/op
     p(90.0000) =  43352.326 ms/op
     p(95.0000) =  43352.326 ms/op
     p(99.0000) =  43352.326 ms/op
     p(99.9000) =  43352.326 ms/op
     p(99.9900) =  43352.326 ms/op
     p(99.9990) =  43352.326 ms/op
     p(99.9999) =  43352.326 ms/op
    p(100.0000) =  43352.326 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 78.13% complete, ETA 01:20:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
476.482 ±(99.9%) 60.387 ms/op
# Warmup Iteration   2: 540.679 ±(99.9%) 5.473 ms/op
# Warmup Iteration   3: 449.041 ±(99.9%) 41.650 ms/op
# Warmup Iteration   4: 416.612 ±(99.9%) 4.154 ms/op
# Warmup Iteration   5: 423.952 ±(99.9%) 5.707 ms/op
Iteration   1: 415.498 ±(99.9%) 4.945 ms/op
                 executeQuery·p0.00:   407.372 ms/op
                 executeQuery·p0.50:   415.760 ms/op
                 executeQuery·p0.90:   424.411 ms/op
                 executeQuery·p0.95:   430.178 ms/op
                 executeQuery·p0.99:   432.013 ms/op
                 executeQuery·p0.999:  432.013 ms/op
                 executeQuery·p0.9999: 432.013 ms/op
                 executeQuery·p1.00:   432.013 ms/op

Iteration   2: 415.173 ±(99.9%) 4.594 ms/op
                 executeQuery·p0.00:   407.896 ms/op
                 executeQuery·p0.50:   413.139 ms/op
                 executeQuery·p0.90:   423.205 ms/op
                 executeQuery·p0.95:   431.856 ms/op
                 executeQuery·p0.99:   435.159 ms/op
                 executeQuery·p0.999:  435.159 ms/op
                 executeQuery·p0.9999: 435.159 ms/op
                 executeQuery·p1.00:   435.159 ms/op

Iteration   3: 418.557 ±(99.9%) 4.673 ms/op
                 executeQuery·p0.00:   410.518 ms/op
                 executeQuery·p0.50:   417.071 ms/op
                 executeQuery·p0.90:   427.557 ms/op
                 executeQuery·p0.95:   432.931 ms/op
                 executeQuery·p0.99:   434.110 ms/op
                 executeQuery·p0.999:  434.110 ms/op
                 executeQuery·p0.9999: 434.110 ms/op
                 executeQuery·p1.00:   434.110 ms/op

Iteration   4: 415.891 ±(99.9%) 5.121 ms/op
                 executeQuery·p0.00:   407.896 ms/op
                 executeQuery·p0.50:   414.712 ms/op
                 executeQuery·p0.90:   424.673 ms/op
                 executeQuery·p0.95:   434.504 ms/op
                 executeQuery·p0.99:   437.256 ms/op
                 executeQuery·p0.999:  437.256 ms/op
                 executeQuery·p0.9999: 437.256 ms/op
                 executeQuery·p1.00:   437.256 ms/op

Iteration   5: 415.433 ±(99.9%) 3.995 ms/op
                 executeQuery·p0.00:   408.945 ms/op
                 executeQuery·p0.50:   414.712 ms/op
                 executeQuery·p0.90:   423.100 ms/op
                 executeQuery·p0.95:   429.785 ms/op
                 executeQuery·p0.99:   431.489 ms/op
                 executeQuery·p0.999:  431.489 ms/op
                 executeQuery·p0.9999: 431.489 ms/op
                 executeQuery·p1.00:   431.489 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 121
  mean =    416.103 ±(99.9%) 1.884 ms/op

  Histogram, ms/op:
    [400.000, 402.500) = 0 
    [402.500, 405.000) = 0 
    [405.000, 407.500) = 4 
    [407.500, 410.000) = 13 
    [410.000, 412.500) = 23 
    [412.500, 415.000) = 17 
    [415.000, 417.500) = 28 
    [417.500, 420.000) = 9 
    [420.000, 422.500) = 7 
    [422.500, 425.000) = 12 
    [425.000, 427.500) = 2 
    [427.500, 430.000) = 1 
    [430.000, 432.500) = 2 
    [432.500, 435.000) = 1 
    [435.000, 437.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    407.372 ms/op
     p(50.0000) =    415.236 ms/op
     p(90.0000) =    424.149 ms/op
     p(95.0000) =    429.077 ms/op
     p(99.0000) =    436.795 ms/op
     p(99.9000) =    437.256 ms/op
     p(99.9900) =    437.256 ms/op
     p(99.9990) =    437.256 ms/op
     p(99.9999) =    437.256 ms/op
    p(100.0000) =    437.256 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 79.17% complete, ETA 01:15:51
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4745.156 ±(99.9%) 7996.707 ms/op
# Warmup Iteration   2: 5330.960 ms/op
# Warmup Iteration   3: 4102.029 ±(99.9%) 382.599 ms/op
# Warmup Iteration   4: 4067.077 ±(99.9%) 233.772 ms/op
# Warmup Iteration   5: 4109.020 ±(99.9%) 906.471 ms/op
Iteration   1: 4097.835 ±(99.9%) 809.809 ms/op
                 executeQuery·p0.00:   4064.281 ms/op
                 executeQuery·p0.50:   4081.058 ms/op
                 executeQuery·p0.90:   4148.167 ms/op
                 executeQuery·p0.95:   4148.167 ms/op
                 executeQuery·p0.99:   4148.167 ms/op
                 executeQuery·p0.999:  4148.167 ms/op
                 executeQuery·p0.9999: 4148.167 ms/op
                 executeQuery·p1.00:   4148.167 ms/op

Iteration   2: 4104.826 ±(99.9%) 886.881 ms/op
                 executeQuery·p0.00:   4060.086 ms/op
                 executeQuery·p0.50:   4097.835 ms/op
                 executeQuery·p0.90:   4156.555 ms/op
                 executeQuery·p0.95:   4156.555 ms/op
                 executeQuery·p0.99:   4156.555 ms/op
                 executeQuery·p0.999:  4156.555 ms/op
                 executeQuery·p0.9999: 4156.555 ms/op
                 executeQuery·p1.00:   4156.555 ms/op

Iteration   3: 4136.982 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   4131.389 ms/op
                 executeQuery·p0.50:   4135.584 ms/op
                 executeQuery·p0.90:   4143.972 ms/op
                 executeQuery·p0.95:   4143.972 ms/op
                 executeQuery·p0.99:   4143.972 ms/op
                 executeQuery·p0.999:  4143.972 ms/op
                 executeQuery·p0.9999: 4143.972 ms/op
                 executeQuery·p1.00:   4143.972 ms/op

Iteration   4: 4113.214 ±(99.9%) 520.859 ms/op
                 executeQuery·p0.00:   4081.058 ms/op
                 executeQuery·p0.50:   4123.001 ms/op
                 executeQuery·p0.90:   4135.584 ms/op
                 executeQuery·p0.95:   4135.584 ms/op
                 executeQuery·p0.99:   4135.584 ms/op
                 executeQuery·p0.999:  4135.584 ms/op
                 executeQuery·p0.9999: 4135.584 ms/op
                 executeQuery·p1.00:   4135.584 ms/op

Iteration   5: 4074.067 ±(99.9%) 710.989 ms/op
                 executeQuery·p0.00:   4047.503 ms/op
                 executeQuery·p0.50:   4055.892 ms/op
                 executeQuery·p0.90:   4118.807 ms/op
                 executeQuery·p0.95:   4118.807 ms/op
                 executeQuery·p0.99:   4118.807 ms/op
                 executeQuery·p0.999:  4118.807 ms/op
                 executeQuery·p0.9999: 4118.807 ms/op
                 executeQuery·p1.00:   4118.807 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   4105.385 ±(99.9%) 40.113 ms/op

  Histogram, ms/op:
    [4000.000, 4012.500) = 0 
    [4012.500, 4025.000) = 0 
    [4025.000, 4037.500) = 0 
    [4037.500, 4050.000) = 1 
    [4050.000, 4062.500) = 2 
    [4062.500, 4075.000) = 1 
    [4075.000, 4087.500) = 2 
    [4087.500, 4100.000) = 1 
    [4100.000, 4112.500) = 0 
    [4112.500, 4125.000) = 2 
    [4125.000, 4137.500) = 3 
    [4137.500, 4150.000) = 2 
    [4150.000, 4162.500) = 1 
    [4162.500, 4175.000) = 0 
    [4175.000, 4187.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4047.503 ms/op
     p(50.0000) =   4118.807 ms/op
     p(90.0000) =   4151.522 ms/op
     p(95.0000) =   4156.555 ms/op
     p(99.0000) =   4156.555 ms/op
     p(99.9000) =   4156.555 ms/op
     p(99.9900) =   4156.555 ms/op
     p(99.9990) =   4156.555 ms/op
     p(99.9999) =   4156.555 ms/op
    p(100.0000) =   4156.555 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 80.21% complete, ETA 01:11:38
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
44224.741 ms/op
# Warmup Iteration   2: 41204.842 ms/op
# Warmup Iteration   3: 40802.189 ms/op
# Warmup Iteration   4: 40533.754 ms/op
# Warmup Iteration   5: 41003.516 ms/op
Iteration   1: 42278.584 ms/op
                 executeQuery·p0.00:   42278.584 ms/op
                 executeQuery·p0.50:   42278.584 ms/op
                 executeQuery·p0.90:   42278.584 ms/op
                 executeQuery·p0.95:   42278.584 ms/op
                 executeQuery·p0.99:   42278.584 ms/op
                 executeQuery·p0.999:  42278.584 ms/op
                 executeQuery·p0.9999: 42278.584 ms/op
                 executeQuery·p1.00:   42278.584 ms/op

Iteration   2: 40466.645 ms/op
                 executeQuery·p0.00:   40466.645 ms/op
                 executeQuery·p0.50:   40466.645 ms/op
                 executeQuery·p0.90:   40466.645 ms/op
                 executeQuery·p0.95:   40466.645 ms/op
                 executeQuery·p0.99:   40466.645 ms/op
                 executeQuery·p0.999:  40466.645 ms/op
                 executeQuery·p0.9999: 40466.645 ms/op
                 executeQuery·p1.00:   40466.645 ms/op

Iteration   3: 40265.318 ms/op
                 executeQuery·p0.00:   40265.318 ms/op
                 executeQuery·p0.50:   40265.318 ms/op
                 executeQuery·p0.90:   40265.318 ms/op
                 executeQuery·p0.95:   40265.318 ms/op
                 executeQuery·p0.99:   40265.318 ms/op
                 executeQuery·p0.999:  40265.318 ms/op
                 executeQuery·p0.9999: 40265.318 ms/op
                 executeQuery·p1.00:   40265.318 ms/op

Iteration   4: 40466.645 ms/op
                 executeQuery·p0.00:   40466.645 ms/op
                 executeQuery·p0.50:   40466.645 ms/op
                 executeQuery·p0.90:   40466.645 ms/op
                 executeQuery·p0.95:   40466.645 ms/op
                 executeQuery·p0.99:   40466.645 ms/op
                 executeQuery·p0.999:  40466.645 ms/op
                 executeQuery·p0.9999: 40466.645 ms/op
                 executeQuery·p1.00:   40466.645 ms/op

Iteration   5: 40332.427 ms/op
                 executeQuery·p0.00:   40332.427 ms/op
                 executeQuery·p0.50:   40332.427 ms/op
                 executeQuery·p0.90:   40332.427 ms/op
                 executeQuery·p0.95:   40332.427 ms/op
                 executeQuery·p0.99:   40332.427 ms/op
                 executeQuery·p0.999:  40332.427 ms/op
                 executeQuery·p0.9999: 40332.427 ms/op
                 executeQuery·p1.00:   40332.427 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  40761.924 ±(99.9%) 3281.938 ms/op

  Histogram, ms/op:
    [40000.000, 40250.000) = 0 
    [40250.000, 40500.000) = 4 
    [40500.000, 40750.000) = 0 
    [40750.000, 41000.000) = 0 
    [41000.000, 41250.000) = 0 
    [41250.000, 41500.000) = 0 
    [41500.000, 41750.000) = 0 
    [41750.000, 42000.000) = 0 
    [42000.000, 42250.000) = 0 
    [42250.000, 42500.000) = 1 
    [42500.000, 42750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  40265.318 ms/op
     p(50.0000) =  40466.645 ms/op
     p(90.0000) =  42278.584 ms/op
     p(95.0000) =  42278.584 ms/op
     p(99.0000) =  42278.584 ms/op
     p(99.9000) =  42278.584 ms/op
     p(99.9900) =  42278.584 ms/op
     p(99.9990) =  42278.584 ms/op
     p(99.9999) =  42278.584 ms/op
    p(100.0000) =  42278.584 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 81.25% complete, ETA 01:08:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
150.455 ±(99.9%) 24.817 ms/op
# Warmup Iteration   2: 123.588 ±(99.9%) 0.920 ms/op
# Warmup Iteration   3: 122.020 ±(99.9%) 1.071 ms/op
# Warmup Iteration   4: 122.332 ±(99.9%) 1.124 ms/op
# Warmup Iteration   5: 123.936 ±(99.9%) 0.604 ms/op
Iteration   1: 124.374 ±(99.9%) 0.668 ms/op
                 executeQuery·p0.00:   120.848 ms/op
                 executeQuery·p0.50:   124.715 ms/op
                 executeQuery·p0.90:   125.829 ms/op
                 executeQuery·p0.95:   127.271 ms/op
                 executeQuery·p0.99:   129.106 ms/op
                 executeQuery·p0.999:  129.106 ms/op
                 executeQuery·p0.9999: 129.106 ms/op
                 executeQuery·p1.00:   129.106 ms/op

Iteration   2: 123.685 ±(99.9%) 0.625 ms/op
                 executeQuery·p0.00:   120.586 ms/op
                 executeQuery·p0.50:   124.256 ms/op
                 executeQuery·p0.90:   125.148 ms/op
                 executeQuery·p0.95:   125.554 ms/op
                 executeQuery·p0.99:   126.484 ms/op
                 executeQuery·p0.999:  126.484 ms/op
                 executeQuery·p0.9999: 126.484 ms/op
                 executeQuery·p1.00:   126.484 ms/op

Iteration   3: 123.308 ±(99.9%) 1.127 ms/op
                 executeQuery·p0.00:   118.227 ms/op
                 executeQuery·p0.50:   122.814 ms/op
                 executeQuery·p0.90:   125.698 ms/op
                 executeQuery·p0.95:   127.114 ms/op
                 executeQuery·p0.99:   139.461 ms/op
                 executeQuery·p0.999:  139.461 ms/op
                 executeQuery·p0.9999: 139.461 ms/op
                 executeQuery·p1.00:   139.461 ms/op

Iteration   4: 122.603 ±(99.9%) 0.706 ms/op
                 executeQuery·p0.00:   118.751 ms/op
                 executeQuery·p0.50:   123.077 ms/op
                 executeQuery·p0.90:   124.610 ms/op
                 executeQuery·p0.95:   125.154 ms/op
                 executeQuery·p0.99:   128.188 ms/op
                 executeQuery·p0.999:  128.188 ms/op
                 executeQuery·p0.9999: 128.188 ms/op
                 executeQuery·p1.00:   128.188 ms/op

Iteration   5: 123.104 ±(99.9%) 0.665 ms/op
                 executeQuery·p0.00:   119.144 ms/op
                 executeQuery·p0.50:   123.208 ms/op
                 executeQuery·p0.90:   124.781 ms/op
                 executeQuery·p0.95:   125.973 ms/op
                 executeQuery·p0.99:   129.237 ms/op
                 executeQuery·p0.999:  129.237 ms/op
                 executeQuery·p0.9999: 129.237 ms/op
                 executeQuery·p1.00:   129.237 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 405
  mean =    123.411 ±(99.9%) 0.351 ms/op

  Histogram, ms/op:
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 0 
    [117.500, 120.000) = 18 
    [120.000, 122.500) = 107 
    [122.500, 125.000) = 217 
    [125.000, 127.500) = 56 
    [127.500, 130.000) = 4 
    [130.000, 132.500) = 1 
    [132.500, 135.000) = 1 
    [135.000, 137.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    118.227 ms/op
     p(50.0000) =    123.732 ms/op
     p(90.0000) =    125.305 ms/op
     p(95.0000) =    125.829 ms/op
     p(99.0000) =    129.229 ms/op
     p(99.9000) =    139.461 ms/op
     p(99.9900) =    139.461 ms/op
     p(99.9990) =    139.461 ms/op
     p(99.9999) =    139.461 ms/op
    p(100.0000) =    139.461 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 82.29% complete, ETA 01:04:19
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2938.634 ±(99.9%) 5117.278 ms/op
# Warmup Iteration   2: 2117.285 ±(99.9%) 1657.055 ms/op
# Warmup Iteration   3: 1908.758 ±(99.9%) 44.542 ms/op
# Warmup Iteration   4: 1892.680 ±(99.9%) 45.666 ms/op
# Warmup Iteration   5: 1888.835 ±(99.9%) 44.425 ms/op
Iteration   1: 1907.360 ±(99.9%) 53.866 ms/op
                 executeQuery·p0.00:   1895.825 ms/op
                 executeQuery·p0.50:   1900.020 ms/op
                 executeQuery·p0.90:   1946.157 ms/op
                 executeQuery·p0.95:   1946.157 ms/op
                 executeQuery·p0.99:   1946.157 ms/op
                 executeQuery·p0.999:  1946.157 ms/op
                 executeQuery·p0.9999: 1946.157 ms/op
                 executeQuery·p1.00:   1946.157 ms/op

Iteration   2: 1896.874 ±(99.9%) 43.175 ms/op
                 executeQuery·p0.00:   1868.562 ms/op
                 executeQuery·p0.50:   1897.923 ms/op
                 executeQuery·p0.90:   1912.603 ms/op
                 executeQuery·p0.95:   1912.603 ms/op
                 executeQuery·p0.99:   1912.603 ms/op
                 executeQuery·p0.999:  1912.603 ms/op
                 executeQuery·p0.9999: 1912.603 ms/op
                 executeQuery·p1.00:   1912.603 ms/op

Iteration   3: 1906.661 ±(99.9%) 6.875 ms/op
                 executeQuery·p0.00:   1904.214 ms/op
                 executeQuery·p0.50:   1906.311 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   4: 1907.709 ±(99.9%) 16.494 ms/op
                 executeQuery·p0.00:   1900.020 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1914.700 ms/op
                 executeQuery·p0.95:   1914.700 ms/op
                 executeQuery·p0.99:   1914.700 ms/op
                 executeQuery·p0.999:  1914.700 ms/op
                 executeQuery·p0.9999: 1914.700 ms/op
                 executeQuery·p1.00:   1914.700 ms/op

Iteration   5: 1922.040 ±(99.9%) 34.642 ms/op
                 executeQuery·p0.00:   1906.311 ms/op
                 executeQuery·p0.50:   1924.137 ms/op
                 executeQuery·p0.90:   1935.671 ms/op
                 executeQuery·p0.95:   1935.671 ms/op
                 executeQuery·p0.99:   1935.671 ms/op
                 executeQuery·p0.999:  1935.671 ms/op
                 executeQuery·p0.9999: 1935.671 ms/op
                 executeQuery·p1.00:   1935.671 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   1908.129 ±(99.9%) 9.558 ms/op

  Histogram, ms/op:
    [1860.000, 1865.000) = 0 
    [1865.000, 1870.000) = 1 
    [1870.000, 1875.000) = 0 
    [1875.000, 1880.000) = 0 
    [1880.000, 1885.000) = 0 
    [1885.000, 1890.000) = 0 
    [1890.000, 1895.000) = 0 
    [1895.000, 1900.000) = 5 
    [1900.000, 1905.000) = 7 
    [1905.000, 1910.000) = 7 
    [1910.000, 1915.000) = 5 
    [1915.000, 1920.000) = 0 
    [1920.000, 1925.000) = 1 
    [1925.000, 1930.000) = 1 
    [1930.000, 1935.000) = 1 
    [1935.000, 1940.000) = 1 
    [1940.000, 1945.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1868.562 ms/op
     p(50.0000) =   1906.311 ms/op
     p(90.0000) =   1932.735 ms/op
     p(95.0000) =   1940.390 ms/op
     p(99.0000) =   1946.157 ms/op
     p(99.9000) =   1946.157 ms/op
     p(99.9900) =   1946.157 ms/op
     p(99.9990) =   1946.157 ms/op
     p(99.9999) =   1946.157 ms/op
    p(100.0000) =   1946.157 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 83.33% complete, ETA 01:00:10
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
49459.233 ms/op
# Warmup Iteration   2: 33453.769 ms/op
# Warmup Iteration   3: 27380.417 ms/op
# Warmup Iteration   4: 25434.259 ms/op
# Warmup Iteration   5: 33185.333 ms/op
Iteration   1: 33789.313 ms/op
                 executeQuery·p0.00:   33789.313 ms/op
                 executeQuery·p0.50:   33789.313 ms/op
                 executeQuery·p0.90:   33789.313 ms/op
                 executeQuery·p0.95:   33789.313 ms/op
                 executeQuery·p0.99:   33789.313 ms/op
                 executeQuery·p0.999:  33789.313 ms/op
                 executeQuery·p0.9999: 33789.313 ms/op
                 executeQuery·p1.00:   33789.313 ms/op

Iteration   2: 32950.452 ms/op
                 executeQuery·p0.00:   32950.452 ms/op
                 executeQuery·p0.50:   32950.452 ms/op
                 executeQuery·p0.90:   32950.452 ms/op
                 executeQuery·p0.95:   32950.452 ms/op
                 executeQuery·p0.99:   32950.452 ms/op
                 executeQuery·p0.999:  32950.452 ms/op
                 executeQuery·p0.9999: 32950.452 ms/op
                 executeQuery·p1.00:   32950.452 ms/op

Iteration   3: 33285.997 ms/op
                 executeQuery·p0.00:   33285.997 ms/op
                 executeQuery·p0.50:   33285.997 ms/op
                 executeQuery·p0.90:   33285.997 ms/op
                 executeQuery·p0.95:   33285.997 ms/op
                 executeQuery·p0.99:   33285.997 ms/op
                 executeQuery·p0.999:  33285.997 ms/op
                 executeQuery·p0.9999: 33285.997 ms/op
                 executeQuery·p1.00:   33285.997 ms/op

Iteration   4: 33453.769 ms/op
                 executeQuery·p0.00:   33453.769 ms/op
                 executeQuery·p0.50:   33453.769 ms/op
                 executeQuery·p0.90:   33453.769 ms/op
                 executeQuery·p0.95:   33453.769 ms/op
                 executeQuery·p0.99:   33453.769 ms/op
                 executeQuery·p0.999:  33453.769 ms/op
                 executeQuery·p0.9999: 33453.769 ms/op
                 executeQuery·p1.00:   33453.769 ms/op

Iteration   5: 23420.994 ms/op
                 executeQuery·p0.00:   23420.994 ms/op
                 executeQuery·p0.50:   23420.994 ms/op
                 executeQuery·p0.90:   23420.994 ms/op
                 executeQuery·p0.95:   23420.994 ms/op
                 executeQuery·p0.99:   23420.994 ms/op
                 executeQuery·p0.999:  23420.994 ms/op
                 executeQuery·p0.9999: 23420.994 ms/op
                 executeQuery·p1.00:   23420.994 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 5
  mean =  31380.105 ±(99.9%) 17172.127 ms/op

  Histogram, ms/op:
    [20000.000, 21250.000) = 0 
    [21250.000, 22500.000) = 0 
    [22500.000, 23750.000) = 1 
    [23750.000, 25000.000) = 0 
    [25000.000, 26250.000) = 0 
    [26250.000, 27500.000) = 0 
    [27500.000, 28750.000) = 0 
    [28750.000, 30000.000) = 0 
    [30000.000, 31250.000) = 0 
    [31250.000, 32500.000) = 0 
    [32500.000, 33750.000) = 3 
    [33750.000, 35000.000) = 1 
    [35000.000, 36250.000) = 0 
    [36250.000, 37500.000) = 0 
    [37500.000, 38750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  23420.994 ms/op
     p(50.0000) =  33285.997 ms/op
     p(90.0000) =  33789.313 ms/op
     p(95.0000) =  33789.313 ms/op
     p(99.0000) =  33789.313 ms/op
     p(99.9000) =  33789.313 ms/op
     p(99.9900) =  33789.313 ms/op
     p(99.9990) =  33789.313 ms/op
     p(99.9999) =  33789.313 ms/op
    p(100.0000) =  33789.313 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 84.38% complete, ETA 00:56:44
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
157.925 ±(99.9%) 27.366 ms/op
# Warmup Iteration   2: 138.427 ±(99.9%) 0.654 ms/op
# Warmup Iteration   3: 138.759 ±(99.9%) 0.739 ms/op
# Warmup Iteration   4: 138.214 ±(99.9%) 0.410 ms/op
# Warmup Iteration   5: 138.341 ±(99.9%) 0.382 ms/op
Iteration   1: 138.420 ±(99.9%) 0.406 ms/op
                 executeQuery·p0.00:   136.577 ms/op
                 executeQuery·p0.50:   138.412 ms/op
                 executeQuery·p0.90:   139.697 ms/op
                 executeQuery·p0.95:   139.985 ms/op
                 executeQuery·p0.99:   141.558 ms/op
                 executeQuery·p0.999:  141.558 ms/op
                 executeQuery·p0.9999: 141.558 ms/op
                 executeQuery·p1.00:   141.558 ms/op

Iteration   2: 138.024 ±(99.9%) 0.392 ms/op
                 executeQuery·p0.00:   136.053 ms/op
                 executeQuery·p0.50:   138.150 ms/op
                 executeQuery·p0.90:   139.198 ms/op
                 executeQuery·p0.95:   139.723 ms/op
                 executeQuery·p0.99:   140.771 ms/op
                 executeQuery·p0.999:  140.771 ms/op
                 executeQuery·p0.9999: 140.771 ms/op
                 executeQuery·p1.00:   140.771 ms/op

Iteration   3: 137.884 ±(99.9%) 0.358 ms/op
                 executeQuery·p0.00:   135.791 ms/op
                 executeQuery·p0.50:   137.888 ms/op
                 executeQuery·p0.90:   138.936 ms/op
                 executeQuery·p0.95:   139.303 ms/op
                 executeQuery·p0.99:   139.723 ms/op
                 executeQuery·p0.999:  139.723 ms/op
                 executeQuery·p0.9999: 139.723 ms/op
                 executeQuery·p1.00:   139.723 ms/op

Iteration   4: 138.065 ±(99.9%) 0.658 ms/op
                 executeQuery·p0.00:   135.528 ms/op
                 executeQuery·p0.50:   137.888 ms/op
                 executeQuery·p0.90:   139.723 ms/op
                 executeQuery·p0.95:   139.985 ms/op
                 executeQuery·p0.99:   146.801 ms/op
                 executeQuery·p0.999:  146.801 ms/op
                 executeQuery·p0.9999: 146.801 ms/op
                 executeQuery·p1.00:   146.801 ms/op

Iteration   5: 137.925 ±(99.9%) 0.444 ms/op
                 executeQuery·p0.00:   135.528 ms/op
                 executeQuery·p0.50:   137.888 ms/op
                 executeQuery·p0.90:   139.198 ms/op
                 executeQuery·p0.95:   139.670 ms/op
                 executeQuery·p0.99:   141.820 ms/op
                 executeQuery·p0.999:  141.820 ms/op
                 executeQuery·p0.9999: 141.820 ms/op
                 executeQuery·p1.00:   141.820 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 354
  mean =    138.063 ±(99.9%) 0.202 ms/op

  Histogram, ms/op:
    [130.000, 131.250) = 0 
    [131.250, 132.500) = 0 
    [132.500, 133.750) = 0 
    [133.750, 135.000) = 0 
    [135.000, 136.250) = 15 
    [136.250, 137.500) = 82 
    [137.500, 138.750) = 184 
    [138.750, 140.000) = 66 
    [140.000, 141.250) = 3 
    [141.250, 142.500) = 3 
    [142.500, 143.750) = 0 
    [143.750, 145.000) = 0 
    [145.000, 146.250) = 0 
    [146.250, 147.500) = 1 
    [147.500, 148.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    135.528 ms/op
     p(50.0000) =    138.150 ms/op
     p(90.0000) =    139.330 ms/op
     p(95.0000) =    139.723 ms/op
     p(99.0000) =    141.676 ms/op
     p(99.9000) =    146.801 ms/op
     p(99.9900) =    146.801 ms/op
     p(99.9990) =    146.801 ms/op
     p(99.9999) =    146.801 ms/op
    p(100.0000) =    146.801 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 85.42% complete, ETA 00:52:35
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2145.806 ±(99.9%) 1442.021 ms/op
# Warmup Iteration   2: 1964.332 ±(99.9%) 51.358 ms/op
# Warmup Iteration   3: 1954.196 ±(99.9%) 7.817 ms/op
# Warmup Iteration   4: 1947.905 ±(99.9%) 28.183 ms/op
# Warmup Iteration   5: 1948.953 ±(99.9%) 31.923 ms/op
Iteration   1: 1950.701 ±(99.9%) 17.212 ms/op
                 executeQuery·p0.00:   1939.866 ms/op
                 executeQuery·p0.50:   1952.449 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   2: 1947.555 ±(99.9%) 26.992 ms/op
                 executeQuery·p0.00:   1933.574 ms/op
                 executeQuery·p0.50:   1948.254 ms/op
                 executeQuery·p0.90:   1958.740 ms/op
                 executeQuery·p0.95:   1958.740 ms/op
                 executeQuery·p0.99:   1958.740 ms/op
                 executeQuery·p0.999:  1958.740 ms/op
                 executeQuery·p0.9999: 1958.740 ms/op
                 executeQuery·p1.00:   1958.740 ms/op

Iteration   3: 1951.749 ±(99.9%) 11.564 ms/op
                 executeQuery·p0.00:   1946.157 ms/op
                 executeQuery·p0.50:   1952.449 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   4: 1950.351 ±(99.9%) 23.227 ms/op
                 executeQuery·p0.00:   1937.768 ms/op
                 executeQuery·p0.50:   1954.546 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   5: 1950.351 ±(99.9%) 33.680 ms/op
                 executeQuery·p0.00:   1935.671 ms/op
                 executeQuery·p0.50:   1950.351 ms/op
                 executeQuery·p0.90:   1969.226 ms/op
                 executeQuery·p0.95:   1969.226 ms/op
                 executeQuery·p0.99:   1969.226 ms/op
                 executeQuery·p0.999:  1969.226 ms/op
                 executeQuery·p0.9999: 1969.226 ms/op
                 executeQuery·p1.00:   1969.226 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   1950.142 ±(99.9%) 5.349 ms/op

  Histogram, ms/op:
    [1930.000, 1932.500) = 0 
    [1932.500, 1935.000) = 1 
    [1935.000, 1937.500) = 1 
    [1937.500, 1940.000) = 4 
    [1940.000, 1942.500) = 1 
    [1942.500, 1945.000) = 0 
    [1945.000, 1947.500) = 1 
    [1947.500, 1950.000) = 4 
    [1950.000, 1952.500) = 4 
    [1952.500, 1955.000) = 6 
    [1955.000, 1957.500) = 6 
    [1957.500, 1960.000) = 1 
    [1960.000, 1962.500) = 0 
    [1962.500, 1965.000) = 0 
    [1965.000, 1967.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1933.574 ms/op
     p(50.0000) =   1950.351 ms/op
     p(90.0000) =   1956.643 ms/op
     p(95.0000) =   1963.459 ms/op
     p(99.0000) =   1969.226 ms/op
     p(99.9000) =   1969.226 ms/op
     p(99.9900) =   1969.226 ms/op
     p(99.9990) =   1969.226 ms/op
     p(99.9999) =   1969.226 ms/op
    p(100.0000) =   1969.226 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 86.46% complete, ETA 00:48:33
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
30098.326 ms/op
# Warmup Iteration   2: 23588.766 ms/op
# Warmup Iteration   3: 20703.085 ms/op
# Warmup Iteration   4: 19327.353 ms/op
# Warmup Iteration   5: 22112.371 ms/op
Iteration   1: 21776.826 ms/op
                 executeQuery·p0.00:   21776.826 ms/op
                 executeQuery·p0.50:   21776.826 ms/op
                 executeQuery·p0.90:   21776.826 ms/op
                 executeQuery·p0.95:   21776.826 ms/op
                 executeQuery·p0.99:   21776.826 ms/op
                 executeQuery·p0.999:  21776.826 ms/op
                 executeQuery·p0.9999: 21776.826 ms/op
                 executeQuery·p1.00:   21776.826 ms/op

Iteration   2: 21709.718 ms/op
                 executeQuery·p0.00:   21709.718 ms/op
                 executeQuery·p0.50:   21709.718 ms/op
                 executeQuery·p0.90:   21709.718 ms/op
                 executeQuery·p0.95:   21709.718 ms/op
                 executeQuery·p0.99:   21709.718 ms/op
                 executeQuery·p0.999:  21709.718 ms/op
                 executeQuery·p0.9999: 21709.718 ms/op
                 executeQuery·p1.00:   21709.718 ms/op

Iteration   3: 21743.272 ms/op
                 executeQuery·p0.00:   21743.272 ms/op
                 executeQuery·p0.50:   21743.272 ms/op
                 executeQuery·p0.90:   21743.272 ms/op
                 executeQuery·p0.95:   21743.272 ms/op
                 executeQuery·p0.99:   21743.272 ms/op
                 executeQuery·p0.999:  21743.272 ms/op
                 executeQuery·p0.9999: 21743.272 ms/op
                 executeQuery·p1.00:   21743.272 ms/op

Iteration   4: 21776.826 ms/op
                 executeQuery·p0.00:   21776.826 ms/op
                 executeQuery·p0.50:   21776.826 ms/op
                 executeQuery·p0.90:   21776.826 ms/op
                 executeQuery·p0.95:   21776.826 ms/op
                 executeQuery·p0.99:   21776.826 ms/op
                 executeQuery·p0.999:  21776.826 ms/op
                 executeQuery·p0.9999: 21776.826 ms/op
                 executeQuery·p1.00:   21776.826 ms/op

Iteration   5: 21709.718 ms/op
                 executeQuery·p0.00:   21709.718 ms/op
                 executeQuery·p0.50:   21709.718 ms/op
                 executeQuery·p0.90:   21709.718 ms/op
                 executeQuery·p0.95:   21709.718 ms/op
                 executeQuery·p0.99:   21709.718 ms/op
                 executeQuery·p0.999:  21709.718 ms/op
                 executeQuery·p0.9999: 21709.718 ms/op
                 executeQuery·p1.00:   21709.718 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 5
  mean =  21743.272 ±(99.9%) 129.206 ms/op

  Histogram, ms/op:
    [21700.000, 21705.000) = 0 
    [21705.000, 21710.000) = 2 
    [21710.000, 21715.000) = 0 
    [21715.000, 21720.000) = 0 
    [21720.000, 21725.000) = 0 
    [21725.000, 21730.000) = 0 
    [21730.000, 21735.000) = 0 
    [21735.000, 21740.000) = 0 
    [21740.000, 21745.000) = 1 
    [21745.000, 21750.000) = 0 
    [21750.000, 21755.000) = 0 
    [21755.000, 21760.000) = 0 
    [21760.000, 21765.000) = 0 
    [21765.000, 21770.000) = 0 
    [21770.000, 21775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  21709.718 ms/op
     p(50.0000) =  21743.272 ms/op
     p(90.0000) =  21776.826 ms/op
     p(95.0000) =  21776.826 ms/op
     p(99.0000) =  21776.826 ms/op
     p(99.9000) =  21776.826 ms/op
     p(99.9900) =  21776.826 ms/op
     p(99.9990) =  21776.826 ms/op
     p(99.9999) =  21776.826 ms/op
    p(100.0000) =  21776.826 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 87.50% complete, ETA 00:44:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
160.913 ±(99.9%) 19.919 ms/op
# Warmup Iteration   2: 146.053 ±(99.9%) 0.730 ms/op
# Warmup Iteration   3: 144.858 ±(99.9%) 0.627 ms/op
# Warmup Iteration   4: 144.915 ±(99.9%) 0.581 ms/op
# Warmup Iteration   5: 144.238 ±(99.9%) 0.458 ms/op
Iteration   1: 144.520 ±(99.9%) 0.416 ms/op
                 executeQuery·p0.00:   141.820 ms/op
                 executeQuery·p0.50:   144.703 ms/op
                 executeQuery·p0.90:   145.804 ms/op
                 executeQuery·p0.95:   146.276 ms/op
                 executeQuery·p0.99:   146.538 ms/op
                 executeQuery·p0.999:  146.538 ms/op
                 executeQuery·p0.9999: 146.538 ms/op
                 executeQuery·p1.00:   146.538 ms/op

Iteration   2: 143.852 ±(99.9%) 0.458 ms/op
                 executeQuery·p0.00:   142.344 ms/op
                 executeQuery·p0.50:   143.655 ms/op
                 executeQuery·p0.90:   144.966 ms/op
                 executeQuery·p0.95:   146.670 ms/op
                 executeQuery·p0.99:   148.374 ms/op
                 executeQuery·p0.999:  148.374 ms/op
                 executeQuery·p0.9999: 148.374 ms/op
                 executeQuery·p1.00:   148.374 ms/op

Iteration   3: 143.678 ±(99.9%) 0.280 ms/op
                 executeQuery·p0.00:   141.820 ms/op
                 executeQuery·p0.50:   143.393 ms/op
                 executeQuery·p0.90:   144.966 ms/op
                 executeQuery·p0.95:   144.966 ms/op
                 executeQuery·p0.99:   145.490 ms/op
                 executeQuery·p0.999:  145.490 ms/op
                 executeQuery·p0.9999: 145.490 ms/op
                 executeQuery·p1.00:   145.490 ms/op

Iteration   4: 144.096 ±(99.9%) 0.569 ms/op
                 executeQuery·p0.00:   141.296 ms/op
                 executeQuery·p0.50:   143.917 ms/op
                 executeQuery·p0.90:   145.752 ms/op
                 executeQuery·p0.95:   146.538 ms/op
                 executeQuery·p0.99:   150.995 ms/op
                 executeQuery·p0.999:  150.995 ms/op
                 executeQuery·p0.9999: 150.995 ms/op
                 executeQuery·p1.00:   150.995 ms/op

Iteration   5: 143.712 ±(99.9%) 0.376 ms/op
                 executeQuery·p0.00:   142.082 ms/op
                 executeQuery·p0.50:   143.655 ms/op
                 executeQuery·p0.90:   144.966 ms/op
                 executeQuery·p0.95:   145.228 ms/op
                 executeQuery·p0.99:   147.587 ms/op
                 executeQuery·p0.999:  147.587 ms/op
                 executeQuery·p0.9999: 147.587 ms/op
                 executeQuery·p1.00:   147.587 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 343
  mean =    143.968 ±(99.9%) 0.193 ms/op

  Histogram, ms/op:
    [141.000, 142.000) = 5 
    [142.000, 143.000) = 33 
    [143.000, 144.000) = 179 
    [144.000, 145.000) = 88 
    [145.000, 146.000) = 21 
    [146.000, 147.000) = 12 
    [147.000, 148.000) = 2 
    [148.000, 149.000) = 2 
    [149.000, 150.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    141.296 ms/op
     p(50.0000) =    143.655 ms/op
     p(90.0000) =    145.228 ms/op
     p(95.0000) =    145.962 ms/op
     p(99.0000) =    147.996 ms/op
     p(99.9000) =    150.995 ms/op
     p(99.9900) =    150.995 ms/op
     p(99.9990) =    150.995 ms/op
     p(99.9999) =    150.995 ms/op
    p(100.0000) =    150.995 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 88.54% complete, ETA 00:40:50
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
2151.678 ±(99.9%) 1336.507 ms/op
# Warmup Iteration   2: 1908.059 ±(99.9%) 49.819 ms/op
# Warmup Iteration   3: 1886.388 ±(99.9%) 39.142 ms/op
# Warmup Iteration   4: 1904.564 ±(99.9%) 23.936 ms/op
# Warmup Iteration   5: 1891.631 ±(99.9%) 33.885 ms/op
Iteration   1: 1903.864 ±(99.9%) 42.961 ms/op
                 executeQuery·p0.00:   1889.534 ms/op
                 executeQuery·p0.50:   1901.068 ms/op
                 executeQuery·p0.90:   1933.574 ms/op
                 executeQuery·p0.95:   1933.574 ms/op
                 executeQuery·p0.99:   1933.574 ms/op
                 executeQuery·p0.999:  1933.574 ms/op
                 executeQuery·p0.9999: 1933.574 ms/op
                 executeQuery·p1.00:   1933.574 ms/op

Iteration   2: 1895.476 ±(99.9%) 35.170 ms/op
                 executeQuery·p0.00:   1874.854 ms/op
                 executeQuery·p0.50:   1897.923 ms/op
                 executeQuery·p0.90:   1906.311 ms/op
                 executeQuery·p0.95:   1906.311 ms/op
                 executeQuery·p0.99:   1906.311 ms/op
                 executeQuery·p0.999:  1906.311 ms/op
                 executeQuery·p0.9999: 1906.311 ms/op
                 executeQuery·p1.00:   1906.311 ms/op

Iteration   3: 1891.981 ±(99.9%) 22.135 ms/op
                 executeQuery·p0.00:   1876.951 ms/op
                 executeQuery·p0.50:   1893.728 ms/op
                 executeQuery·p0.90:   1897.923 ms/op
                 executeQuery·p0.95:   1897.923 ms/op
                 executeQuery·p0.99:   1897.923 ms/op
                 executeQuery·p0.999:  1897.923 ms/op
                 executeQuery·p0.9999: 1897.923 ms/op
                 executeQuery·p1.00:   1897.923 ms/op

Iteration   4: 1895.126 ±(99.9%) 34.625 ms/op
                 executeQuery·p0.00:   1876.951 ms/op
                 executeQuery·p0.50:   1900.020 ms/op
                 executeQuery·p0.90:   1906.311 ms/op
                 executeQuery·p0.95:   1906.311 ms/op
                 executeQuery·p0.99:   1906.311 ms/op
                 executeQuery·p0.999:  1906.311 ms/op
                 executeQuery·p0.9999: 1906.311 ms/op
                 executeQuery·p1.00:   1906.311 ms/op

Iteration   5: 1903.864 ±(99.9%) 4.427 ms/op
                 executeQuery·p0.00:   1902.117 ms/op
                 executeQuery·p0.50:   1904.214 ms/op
                 executeQuery·p0.90:   1906.311 ms/op
                 executeQuery·p0.95:   1906.311 ms/op
                 executeQuery·p0.99:   1906.311 ms/op
                 executeQuery·p0.999:  1906.311 ms/op
                 executeQuery·p0.9999: 1906.311 ms/op
                 executeQuery·p1.00:   1906.311 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 30
  mean =   1898.062 ±(99.9%) 7.612 ms/op

  Histogram, ms/op:
    [1870.000, 1875.000) = 1 
    [1875.000, 1880.000) = 2 
    [1880.000, 1885.000) = 1 
    [1885.000, 1890.000) = 2 
    [1890.000, 1895.000) = 3 
    [1895.000, 1900.000) = 5 
    [1900.000, 1905.000) = 11 
    [1905.000, 1910.000) = 4 
    [1910.000, 1915.000) = 0 
    [1915.000, 1920.000) = 0 
    [1920.000, 1925.000) = 0 
    [1925.000, 1930.000) = 0 
    [1930.000, 1935.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1874.854 ms/op
     p(50.0000) =   1901.068 ms/op
     p(90.0000) =   1906.311 ms/op
     p(95.0000) =   1918.580 ms/op
     p(99.0000) =   1933.574 ms/op
     p(99.9000) =   1933.574 ms/op
     p(99.9900) =   1933.574 ms/op
     p(99.9990) =   1933.574 ms/op
     p(99.9999) =   1933.574 ms/op
    p(100.0000) =   1933.574 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 89.58% complete, ETA 00:36:55
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
30937.186 ms/op
# Warmup Iteration   2: 21273.510 ms/op
# Warmup Iteration   3: 21172.847 ms/op
# Warmup Iteration   4: 21239.955 ms/op
# Warmup Iteration   5: 21239.955 ms/op
Iteration   1: 22515.024 ms/op
                 executeQuery·p0.00:   22515.024 ms/op
                 executeQuery·p0.50:   22515.024 ms/op
                 executeQuery·p0.90:   22515.024 ms/op
                 executeQuery·p0.95:   22515.024 ms/op
                 executeQuery·p0.99:   22515.024 ms/op
                 executeQuery·p0.999:  22515.024 ms/op
                 executeQuery·p0.9999: 22515.024 ms/op
                 executeQuery·p1.00:   22515.024 ms/op

Iteration   2: 22481.469 ms/op
                 executeQuery·p0.00:   22481.469 ms/op
                 executeQuery·p0.50:   22481.469 ms/op
                 executeQuery·p0.90:   22481.469 ms/op
                 executeQuery·p0.95:   22481.469 ms/op
                 executeQuery·p0.99:   22481.469 ms/op
                 executeQuery·p0.999:  22481.469 ms/op
                 executeQuery·p0.9999: 22481.469 ms/op
                 executeQuery·p1.00:   22481.469 ms/op

Iteration   3: 22615.687 ms/op
                 executeQuery·p0.00:   22615.687 ms/op
                 executeQuery·p0.50:   22615.687 ms/op
                 executeQuery·p0.90:   22615.687 ms/op
                 executeQuery·p0.95:   22615.687 ms/op
                 executeQuery·p0.99:   22615.687 ms/op
                 executeQuery·p0.999:  22615.687 ms/op
                 executeQuery·p0.9999: 22615.687 ms/op
                 executeQuery·p1.00:   22615.687 ms/op

Iteration   4: 22548.578 ms/op
                 executeQuery·p0.00:   22548.578 ms/op
                 executeQuery·p0.50:   22548.578 ms/op
                 executeQuery·p0.90:   22548.578 ms/op
                 executeQuery·p0.95:   22548.578 ms/op
                 executeQuery·p0.99:   22548.578 ms/op
                 executeQuery·p0.999:  22548.578 ms/op
                 executeQuery·p0.9999: 22548.578 ms/op
                 executeQuery·p1.00:   22548.578 ms/op

Iteration   5: 22347.252 ms/op
                 executeQuery·p0.00:   22347.252 ms/op
                 executeQuery·p0.50:   22347.252 ms/op
                 executeQuery·p0.90:   22347.252 ms/op
                 executeQuery·p0.95:   22347.252 ms/op
                 executeQuery·p0.99:   22347.252 ms/op
                 executeQuery·p0.999:  22347.252 ms/op
                 executeQuery·p0.9999: 22347.252 ms/op
                 executeQuery·p1.00:   22347.252 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 5
  mean =  22501.602 ±(99.9%) 383.287 ms/op

  Histogram, ms/op:
    [22300.000, 22325.000) = 0 
    [22325.000, 22350.000) = 1 
    [22350.000, 22375.000) = 0 
    [22375.000, 22400.000) = 0 
    [22400.000, 22425.000) = 0 
    [22425.000, 22450.000) = 0 
    [22450.000, 22475.000) = 0 
    [22475.000, 22500.000) = 1 
    [22500.000, 22525.000) = 1 
    [22525.000, 22550.000) = 1 
    [22550.000, 22575.000) = 0 
    [22575.000, 22600.000) = 0 
    [22600.000, 22625.000) = 1 
    [22625.000, 22650.000) = 0 
    [22650.000, 22675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  22347.252 ms/op
     p(50.0000) =  22515.024 ms/op
     p(90.0000) =  22615.687 ms/op
     p(95.0000) =  22615.687 ms/op
     p(99.0000) =  22615.687 ms/op
     p(99.9000) =  22615.687 ms/op
     p(99.9900) =  22615.687 ms/op
     p(99.9990) =  22615.687 ms/op
     p(99.9999) =  22615.687 ms/op
    p(100.0000) =  22615.687 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 90.63% complete, ETA 00:33:14
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
43.205 ±(99.9%) 2.397 ms/op
# Warmup Iteration   2: 39.763 ±(99.9%) 0.313 ms/op
# Warmup Iteration   3: 40.481 ±(99.9%) 0.370 ms/op
# Warmup Iteration   4: 41.594 ±(99.9%) 0.206 ms/op
# Warmup Iteration   5: 41.892 ±(99.9%) 0.237 ms/op
Iteration   1: 41.843 ±(99.9%) 0.244 ms/op
                 executeQuery·p0.00:   40.042 ms/op
                 executeQuery·p0.50:   42.009 ms/op
                 executeQuery·p0.90:   43.129 ms/op
                 executeQuery·p0.95:   43.654 ms/op
                 executeQuery·p0.99:   44.764 ms/op
                 executeQuery·p0.999:  45.548 ms/op
                 executeQuery·p0.9999: 45.548 ms/op
                 executeQuery·p1.00:   45.548 ms/op

Iteration   2: 41.804 ±(99.9%) 0.275 ms/op
                 executeQuery·p0.00:   40.042 ms/op
                 executeQuery·p0.50:   41.878 ms/op
                 executeQuery·p0.90:   43.450 ms/op
                 executeQuery·p0.95:   44.106 ms/op
                 executeQuery·p0.99:   44.800 ms/op
                 executeQuery·p0.999:  45.416 ms/op
                 executeQuery·p0.9999: 45.416 ms/op
                 executeQuery·p1.00:   45.416 ms/op

Iteration   3: 40.335 ±(99.9%) 0.317 ms/op
                 executeQuery·p0.00:   38.666 ms/op
                 executeQuery·p0.50:   40.305 ms/op
                 executeQuery·p0.90:   42.533 ms/op
                 executeQuery·p0.95:   43.031 ms/op
                 executeQuery·p0.99:   43.859 ms/op
                 executeQuery·p0.999:  50.921 ms/op
                 executeQuery·p0.9999: 50.921 ms/op
                 executeQuery·p1.00:   50.921 ms/op

Iteration   4: 40.086 ±(99.9%) 0.212 ms/op
                 executeQuery·p0.00:   38.404 ms/op
                 executeQuery·p0.50:   40.239 ms/op
                 executeQuery·p0.90:   41.157 ms/op
                 executeQuery·p0.95:   41.746 ms/op
                 executeQuery·p0.99:   43.483 ms/op
                 executeQuery·p0.999:  44.237 ms/op
                 executeQuery·p0.9999: 44.237 ms/op
                 executeQuery·p1.00:   44.237 ms/op

Iteration   5: 40.214 ±(99.9%) 0.206 ms/op
                 executeQuery·p0.00:   38.732 ms/op
                 executeQuery·p0.50:   40.436 ms/op
                 executeQuery·p0.90:   41.222 ms/op
                 executeQuery·p0.95:   41.622 ms/op
                 executeQuery·p0.99:   43.163 ms/op
                 executeQuery·p0.999:  44.040 ms/op
                 executeQuery·p0.9999: 44.040 ms/op
                 executeQuery·p1.00:   44.040 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 1221
  mean =     40.841 ±(99.9%) 0.135 ms/op

  Histogram, ms/op:
    [30.000, 32.500) = 0 
    [32.500, 35.000) = 0 
    [35.000, 37.500) = 0 
    [37.500, 40.000) = 289 
    [40.000, 42.500) = 733 
    [42.500, 45.000) = 196 
    [45.000, 47.500) = 2 
    [47.500, 50.000) = 0 
    [50.000, 52.500) = 1 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     38.404 ms/op
     p(50.0000) =     40.632 ms/op
     p(90.0000) =     42.847 ms/op
     p(95.0000) =     43.247 ms/op
     p(99.0000) =     44.536 ms/op
     p(99.9000) =     49.728 ms/op
     p(99.9900) =     50.921 ms/op
     p(99.9990) =     50.921 ms/op
     p(99.9999) =     50.921 ms/op
    p(100.0000) =     50.921 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 91.67% complete, ETA 00:29:22
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
404.247 ±(99.9%) 45.839 ms/op
# Warmup Iteration   2: 378.652 ±(99.9%) 2.167 ms/op
# Warmup Iteration   3: 379.002 ±(99.9%) 4.320 ms/op
# Warmup Iteration   4: 387.106 ±(99.9%) 7.580 ms/op
# Warmup Iteration   5: 392.490 ±(99.9%) 2.396 ms/op
Iteration   1: 391.038 ±(99.9%) 2.353 ms/op
                 executeQuery·p0.00:   386.925 ms/op
                 executeQuery·p0.50:   391.643 ms/op
                 executeQuery·p0.90:   393.740 ms/op
                 executeQuery·p0.95:   397.830 ms/op
                 executeQuery·p0.99:   400.032 ms/op
                 executeQuery·p0.999:  400.032 ms/op
                 executeQuery·p0.9999: 400.032 ms/op
                 executeQuery·p1.00:   400.032 ms/op

Iteration   2: 391.038 ±(99.9%) 2.285 ms/op
                 executeQuery·p0.00:   386.400 ms/op
                 executeQuery·p0.50:   390.857 ms/op
                 executeQuery·p0.90:   394.789 ms/op
                 executeQuery·p0.95:   395.470 ms/op
                 executeQuery·p0.99:   395.837 ms/op
                 executeQuery·p0.999:  395.837 ms/op
                 executeQuery·p0.9999: 395.837 ms/op
                 executeQuery·p1.00:   395.837 ms/op

Iteration   3: 391.058 ±(99.9%) 1.630 ms/op
                 executeQuery·p0.00:   386.400 ms/op
                 executeQuery·p0.50:   390.857 ms/op
                 executeQuery·p0.90:   394.265 ms/op
                 executeQuery·p0.95:   394.265 ms/op
                 executeQuery·p0.99:   394.265 ms/op
                 executeQuery·p0.999:  394.265 ms/op
                 executeQuery·p0.9999: 394.265 ms/op
                 executeQuery·p1.00:   394.265 ms/op

Iteration   4: 391.200 ±(99.9%) 1.979 ms/op
                 executeQuery·p0.00:   386.400 ms/op
                 executeQuery·p0.50:   390.332 ms/op
                 executeQuery·p0.90:   396.152 ms/op
                 executeQuery·p0.95:   397.568 ms/op
                 executeQuery·p0.99:   397.935 ms/op
                 executeQuery·p0.999:  397.935 ms/op
                 executeQuery·p0.9999: 397.935 ms/op
                 executeQuery·p1.00:   397.935 ms/op

Iteration   5: 390.272 ±(99.9%) 1.636 ms/op
                 executeQuery·p0.00:   386.400 ms/op
                 executeQuery·p0.50:   390.070 ms/op
                 executeQuery·p0.90:   393.898 ms/op
                 executeQuery·p0.95:   394.265 ms/op
                 executeQuery·p0.99:   394.265 ms/op
                 executeQuery·p0.999:  394.265 ms/op
                 executeQuery·p0.9999: 394.265 ms/op
                 executeQuery·p1.00:   394.265 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 130
  mean =    390.921 ±(99.9%) 0.802 ms/op

  Histogram, ms/op:
    [380.000, 382.500) = 0 
    [382.500, 385.000) = 0 
    [385.000, 387.500) = 18 
    [387.500, 390.000) = 27 
    [390.000, 392.500) = 41 
    [392.500, 395.000) = 38 
    [395.000, 397.500) = 4 
    [397.500, 400.000) = 1 
    [400.000, 402.500) = 1 
    [402.500, 405.000) = 0 
    [405.000, 407.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    386.400 ms/op
     p(50.0000) =    390.595 ms/op
     p(90.0000) =    394.265 ms/op
     p(95.0000) =    395.025 ms/op
     p(99.0000) =    399.382 ms/op
     p(99.9000) =    400.032 ms/op
     p(99.9900) =    400.032 ms/op
     p(99.9990) =    400.032 ms/op
     p(99.9999) =    400.032 ms/op
    p(100.0000) =    400.032 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 92.71% complete, ETA 00:25:32
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3941.248 ±(99.9%) 5673.478 ms/op
# Warmup Iteration   2: 3787.457 ±(99.9%) 404.904 ms/op
# Warmup Iteration   3: 3791.651 ±(99.9%) 501.773 ms/op
# Warmup Iteration   4: 3825.205 ±(99.9%) 795.216 ms/op
# Warmup Iteration   5: 3828.001 ±(99.9%) 353.429 ms/op
Iteration   1: 3847.575 ±(99.9%) 176.715 ms/op
                 executeQuery·p0.00:   3841.982 ms/op
                 executeQuery·p0.50:   3841.982 ms/op
                 executeQuery·p0.90:   3858.760 ms/op
                 executeQuery·p0.95:   3858.760 ms/op
                 executeQuery·p0.99:   3858.760 ms/op
                 executeQuery·p0.999:  3858.760 ms/op
                 executeQuery·p0.9999: 3858.760 ms/op
                 executeQuery·p1.00:   3858.760 ms/op

Iteration   2: 3802.836 ±(99.9%) 353.429 ms/op
                 executeQuery·p0.00:   3791.651 ms/op
                 executeQuery·p0.50:   3791.651 ms/op
                 executeQuery·p0.90:   3825.205 ms/op
                 executeQuery·p0.95:   3825.205 ms/op
                 executeQuery·p0.99:   3825.205 ms/op
                 executeQuery·p0.999:  3825.205 ms/op
                 executeQuery·p0.9999: 3825.205 ms/op
                 executeQuery·p1.00:   3825.205 ms/op

Iteration   3: 3809.826 ±(99.9%) 641.732 ms/op
                 executeQuery·p0.00:   3787.457 ms/op
                 executeQuery·p0.50:   3791.651 ms/op
                 executeQuery·p0.90:   3850.371 ms/op
                 executeQuery·p0.95:   3850.371 ms/op
                 executeQuery·p0.99:   3850.371 ms/op
                 executeQuery·p0.999:  3850.371 ms/op
                 executeQuery·p0.9999: 3850.371 ms/op
                 executeQuery·p1.00:   3850.371 ms/op

Iteration   4: 3777.670 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   3774.874 ms/op
                 executeQuery·p0.50:   3774.874 ms/op
                 executeQuery·p0.90:   3783.262 ms/op
                 executeQuery·p0.95:   3783.262 ms/op
                 executeQuery·p0.99:   3783.262 ms/op
                 executeQuery·p0.999:  3783.262 ms/op
                 executeQuery·p0.9999: 3783.262 ms/op
                 executeQuery·p1.00:   3783.262 ms/op

Iteration   5: 3846.177 ±(99.9%) 426.044 ms/op
                 executeQuery·p0.00:   3825.205 ms/op
                 executeQuery·p0.50:   3841.982 ms/op
                 executeQuery·p0.90:   3871.343 ms/op
                 executeQuery·p0.95:   3871.343 ms/op
                 executeQuery·p0.99:   3871.343 ms/op
                 executeQuery·p0.999:  3871.343 ms/op
                 executeQuery·p0.9999: 3871.343 ms/op
                 executeQuery·p1.00:   3871.343 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 15
  mean =   3816.817 ±(99.9%) 35.347 ms/op

  Histogram, ms/op:
    [3770.000, 3780.000) = 2 
    [3780.000, 3790.000) = 2 
    [3790.000, 3800.000) = 3 
    [3800.000, 3810.000) = 0 
    [3810.000, 3820.000) = 0 
    [3820.000, 3830.000) = 2 
    [3830.000, 3840.000) = 0 
    [3840.000, 3850.000) = 3 
    [3850.000, 3860.000) = 2 
    [3860.000, 3870.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3774.874 ms/op
     p(50.0000) =   3825.205 ms/op
     p(90.0000) =   3863.793 ms/op
     p(95.0000) =   3871.343 ms/op
     p(99.0000) =   3871.343 ms/op
     p(99.9000) =   3871.343 ms/op
     p(99.9900) =   3871.343 ms/op
     p(99.9990) =   3871.343 ms/op
     p(99.9999) =   3871.343 ms/op
    p(100.0000) =   3871.343 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 93.75% complete, ETA 00:21:46
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
41.186 ±(99.9%) 1.939 ms/op
# Warmup Iteration   2: 41.257 ±(99.9%) 0.287 ms/op
# Warmup Iteration   3: 41.170 ±(99.9%) 0.256 ms/op
# Warmup Iteration   4: 40.911 ±(99.9%) 0.328 ms/op
# Warmup Iteration   5: 41.050 ±(99.9%) 0.165 ms/op
Iteration   1: 40.868 ±(99.9%) 0.144 ms/op
                 executeQuery·p0.00:   39.518 ms/op
                 executeQuery·p0.50:   40.698 ms/op
                 executeQuery·p0.90:   41.812 ms/op
                 executeQuery·p0.95:   42.074 ms/op
                 executeQuery·p0.99:   42.376 ms/op
                 executeQuery·p0.999:  42.861 ms/op
                 executeQuery·p0.9999: 42.861 ms/op
                 executeQuery·p1.00:   42.861 ms/op

Iteration   2: 40.558 ±(99.9%) 0.190 ms/op
                 executeQuery·p0.00:   39.387 ms/op
                 executeQuery·p0.50:   40.370 ms/op
                 executeQuery·p0.90:   41.419 ms/op
                 executeQuery·p0.95:   41.746 ms/op
                 executeQuery·p0.99:   43.642 ms/op
                 executeQuery·p0.999:  49.676 ms/op
                 executeQuery·p0.9999: 49.676 ms/op
                 executeQuery·p1.00:   49.676 ms/op

Iteration   3: 40.322 ±(99.9%) 0.181 ms/op
                 executeQuery·p0.00:   39.256 ms/op
                 executeQuery·p0.50:   40.174 ms/op
                 executeQuery·p0.90:   41.615 ms/op
                 executeQuery·p0.95:   42.002 ms/op
                 executeQuery·p0.99:   42.602 ms/op
                 executeQuery·p0.999:  43.188 ms/op
                 executeQuery·p0.9999: 43.188 ms/op
                 executeQuery·p1.00:   43.188 ms/op

Iteration   4: 40.154 ±(99.9%) 0.158 ms/op
                 executeQuery·p0.00:   39.256 ms/op
                 executeQuery·p0.50:   39.846 ms/op
                 executeQuery·p0.90:   41.288 ms/op
                 executeQuery·p0.95:   41.858 ms/op
                 executeQuery·p0.99:   42.205 ms/op
                 executeQuery·p0.999:  42.402 ms/op
                 executeQuery·p0.9999: 42.402 ms/op
                 executeQuery·p1.00:   42.402 ms/op

Iteration   5: 40.659 ±(99.9%) 0.179 ms/op
                 executeQuery·p0.00:   39.649 ms/op
                 executeQuery·p0.50:   40.305 ms/op
                 executeQuery·p0.90:   41.812 ms/op
                 executeQuery·p0.95:   42.074 ms/op
                 executeQuery·p0.99:   42.902 ms/op
                 executeQuery·p0.999:  47.120 ms/op
                 executeQuery·p0.9999: 47.120 ms/op
                 executeQuery·p1.00:   47.120 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 1203
  mean =     40.511 ±(99.9%) 0.079 ms/op

  Histogram, ms/op:
    [30.000, 31.250) = 0 
    [31.250, 32.500) = 0 
    [32.500, 33.750) = 0 
    [33.750, 35.000) = 0 
    [35.000, 36.250) = 0 
    [36.250, 37.500) = 0 
    [37.500, 38.750) = 0 
    [38.750, 40.000) = 341 
    [40.000, 41.250) = 627 
    [41.250, 42.500) = 225 
    [42.500, 43.750) = 7 
    [43.750, 45.000) = 1 
    [45.000, 46.250) = 0 
    [46.250, 47.500) = 1 
    [47.500, 48.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     39.256 ms/op
     p(50.0000) =     40.370 ms/op
     p(90.0000) =     41.615 ms/op
     p(95.0000) =     41.943 ms/op
     p(99.0000) =     42.402 ms/op
     p(99.9000) =     49.155 ms/op
     p(99.9900) =     49.676 ms/op
     p(99.9990) =     49.676 ms/op
     p(99.9999) =     49.676 ms/op
    p(100.0000) =     49.676 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 94.79% complete, ETA 00:18:02
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
388.941 ±(99.9%) 33.284 ms/op
# Warmup Iteration   2: 411.776 ±(99.9%) 13.668 ms/op
# Warmup Iteration   3: 418.404 ±(99.9%) 2.207 ms/op
# Warmup Iteration   4: 416.940 ±(99.9%) 1.640 ms/op
# Warmup Iteration   5: 414.799 ±(99.9%) 1.705 ms/op
Iteration   1: 416.678 ±(99.9%) 2.154 ms/op
                 executeQuery·p0.00:   411.566 ms/op
                 executeQuery·p0.50:   415.760 ms/op
                 executeQuery·p0.90:   420.217 ms/op
                 executeQuery·p0.95:   421.265 ms/op
                 executeQuery·p0.99:   421.528 ms/op
                 executeQuery·p0.999:  421.528 ms/op
                 executeQuery·p0.9999: 421.528 ms/op
                 executeQuery·p1.00:   421.528 ms/op

Iteration   2: 414.362 ±(99.9%) 1.912 ms/op
                 executeQuery·p0.00:   411.042 ms/op
                 executeQuery·p0.50:   413.401 ms/op
                 executeQuery·p0.90:   418.120 ms/op
                 executeQuery·p0.95:   419.168 ms/op
                 executeQuery·p0.99:   419.430 ms/op
                 executeQuery·p0.999:  419.430 ms/op
                 executeQuery·p0.9999: 419.430 ms/op
                 executeQuery·p1.00:   419.430 ms/op

Iteration   3: 414.624 ±(99.9%) 1.607 ms/op
                 executeQuery·p0.00:   411.566 ms/op
                 executeQuery·p0.50:   413.663 ms/op
                 executeQuery·p0.90:   417.858 ms/op
                 executeQuery·p0.95:   418.251 ms/op
                 executeQuery·p0.99:   418.382 ms/op
                 executeQuery·p0.999:  418.382 ms/op
                 executeQuery·p0.9999: 418.382 ms/op
                 executeQuery·p1.00:   418.382 ms/op

Iteration   4: 415.433 ±(99.9%) 1.795 ms/op
                 executeQuery·p0.00:   412.090 ms/op
                 executeQuery·p0.50:   414.712 ms/op
                 executeQuery·p0.90:   419.693 ms/op
                 executeQuery·p0.95:   420.872 ms/op
                 executeQuery·p0.99:   421.003 ms/op
                 executeQuery·p0.999:  421.003 ms/op
                 executeQuery·p0.9999: 421.003 ms/op
                 executeQuery·p1.00:   421.003 ms/op

Iteration   5: 414.472 ±(99.9%) 1.564 ms/op
                 executeQuery·p0.00:   411.566 ms/op
                 executeQuery·p0.50:   413.663 ms/op
                 executeQuery·p0.90:   417.333 ms/op
                 executeQuery·p0.95:   417.726 ms/op
                 executeQuery·p0.99:   417.858 ms/op
                 executeQuery·p0.999:  417.858 ms/op
                 executeQuery·p0.9999: 417.858 ms/op
                 executeQuery·p1.00:   417.858 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 120
  mean =    415.114 ±(99.9%) 0.765 ms/op

  Histogram, ms/op:
    [410.000, 411.250) = 1 
    [411.250, 412.500) = 13 
    [412.500, 413.750) = 34 
    [413.750, 415.000) = 19 
    [415.000, 416.250) = 12 
    [416.250, 417.500) = 19 
    [417.500, 418.750) = 9 
    [418.750, 420.000) = 9 
    [420.000, 421.250) = 3 
    [421.250, 422.500) = 1 
    [422.500, 423.750) = 0 
    [423.750, 425.000) = 0 
    [425.000, 426.250) = 0 
    [426.250, 427.500) = 0 
    [427.500, 428.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =    411.042 ms/op
     p(50.0000) =    414.712 ms/op
     p(90.0000) =    418.906 ms/op
     p(95.0000) =    419.430 ms/op
     p(99.0000) =    421.417 ms/op
     p(99.9000) =    421.528 ms/op
     p(99.9900) =    421.528 ms/op
     p(99.9990) =    421.528 ms/op
     p(99.9999) =    421.528 ms/op
    p(100.0000) =    421.528 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 95.83% complete, ETA 00:14:21
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
3848.973 ±(99.9%) 4312.572 ms/op
# Warmup Iteration   2: 4089.446 ±(99.9%) 862.333 ms/op
# Warmup Iteration   3: 4116.010 ±(99.9%) 159.288 ms/op
# Warmup Iteration   4: 4143.972 ±(99.9%) 501.773 ms/op
# Warmup Iteration   5: 4113.214 ±(99.9%) 553.557 ms/op
Iteration   1: 4113.214 ±(99.9%) 176.715 ms/op
                 executeQuery·p0.00:   4102.029 ms/op
                 executeQuery·p0.50:   4118.807 ms/op
                 executeQuery·p0.90:   4118.807 ms/op
                 executeQuery·p0.95:   4118.807 ms/op
                 executeQuery·p0.99:   4118.807 ms/op
                 executeQuery·p0.999:  4118.807 ms/op
                 executeQuery·p0.9999: 4118.807 ms/op
                 executeQuery·p1.00:   4118.807 ms/op

Iteration   2: 4128.593 ±(99.9%) 542.877 ms/op
                 executeQuery·p0.00:   4102.029 ms/op
                 executeQuery·p0.50:   4123.001 ms/op
                 executeQuery·p0.90:   4160.750 ms/op
                 executeQuery·p0.95:   4160.750 ms/op
                 executeQuery·p0.99:   4160.750 ms/op
                 executeQuery·p0.999:  4160.750 ms/op
                 executeQuery·p0.9999: 4160.750 ms/op
                 executeQuery·p1.00:   4160.750 ms/op

Iteration   3: 4118.807 ±(99.9%) 577.711 ms/op
                 executeQuery·p0.00:   4089.446 ms/op
                 executeQuery·p0.50:   4114.612 ms/op
                 executeQuery·p0.90:   4152.361 ms/op
                 executeQuery·p0.95:   4152.361 ms/op
                 executeQuery·p0.99:   4152.361 ms/op
                 executeQuery·p0.999:  4152.361 ms/op
                 executeQuery·p0.9999: 4152.361 ms/op
                 executeQuery·p1.00:   4152.361 ms/op

Iteration   4: 4107.622 ±(99.9%) 435.110 ms/op
                 executeQuery·p0.00:   4081.058 ms/op
                 executeQuery·p0.50:   4114.612 ms/op
                 executeQuery·p0.90:   4127.195 ms/op
                 executeQuery·p0.95:   4127.195 ms/op
                 executeQuery·p0.99:   4127.195 ms/op
                 executeQuery·p0.999:  4127.195 ms/op
                 executeQuery·p0.9999: 4127.195 ms/op
                 executeQuery·p1.00:   4127.195 ms/op

Iteration   5: 4075.465 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   4068.475 ms/op
                 executeQuery·p0.50:   4076.863 ms/op
                 executeQuery·p0.90:   4081.058 ms/op
                 executeQuery·p0.95:   4081.058 ms/op
                 executeQuery·p0.99:   4081.058 ms/op
                 executeQuery·p0.999:  4081.058 ms/op
                 executeQuery·p0.9999: 4081.058 ms/op
                 executeQuery·p1.00:   4081.058 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 15
  mean =   4108.740 ±(99.9%) 28.651 ms/op

  Histogram, ms/op:
    [4060.000, 4070.000) = 1 
    [4070.000, 4080.000) = 1 
    [4080.000, 4090.000) = 3 
    [4090.000, 4100.000) = 0 
    [4100.000, 4110.000) = 2 
    [4110.000, 4120.000) = 4 
    [4120.000, 4130.000) = 2 
    [4130.000, 4140.000) = 0 
    [4140.000, 4150.000) = 0 
    [4150.000, 4160.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4068.475 ms/op
     p(50.0000) =   4114.612 ms/op
     p(90.0000) =   4155.716 ms/op
     p(95.0000) =   4160.750 ms/op
     p(99.0000) =   4160.750 ms/op
     p(99.9000) =   4160.750 ms/op
     p(99.9900) =   4160.750 ms/op
     p(99.9990) =   4160.750 ms/op
     p(99.9999) =   4160.750 ms/op
    p(100.0000) =   4160.750 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 96.88% complete, ETA 00:10:42
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
43.012 ±(99.9%) 2.201 ms/op
# Warmup Iteration   2: 45.855 ±(99.9%) 0.369 ms/op
# Warmup Iteration   3: 45.886 ±(99.9%) 0.196 ms/op
# Warmup Iteration   4: 45.670 ±(99.9%) 0.126 ms/op
# Warmup Iteration   5: 45.863 ±(99.9%) 0.139 ms/op
Iteration   1: 45.940 ±(99.9%) 0.153 ms/op
                 executeQuery·p0.00:   45.023 ms/op
                 executeQuery·p0.50:   45.744 ms/op
                 executeQuery·p0.90:   46.727 ms/op
                 executeQuery·p0.95:   47.016 ms/op
                 executeQuery·p0.99:   49.275 ms/op
                 executeQuery·p0.999:  49.349 ms/op
                 executeQuery·p0.9999: 49.349 ms/op
                 executeQuery·p1.00:   49.349 ms/op

Iteration   2: 45.840 ±(99.9%) 0.156 ms/op
                 executeQuery·p0.00:   44.892 ms/op
                 executeQuery·p0.50:   45.646 ms/op
                 executeQuery·p0.90:   46.531 ms/op
                 executeQuery·p0.95:   47.012 ms/op
                 executeQuery·p0.99:   49.001 ms/op
                 executeQuery·p0.999:  50.725 ms/op
                 executeQuery·p0.9999: 50.725 ms/op
                 executeQuery·p1.00:   50.725 ms/op

Iteration   3: 45.909 ±(99.9%) 0.197 ms/op
                 executeQuery·p0.00:   44.958 ms/op
                 executeQuery·p0.50:   45.679 ms/op
                 executeQuery·p0.90:   46.766 ms/op
                 executeQuery·p0.95:   47.160 ms/op
                 executeQuery·p0.99:   49.792 ms/op
                 executeQuery·p0.999:  54.198 ms/op
                 executeQuery·p0.9999: 54.198 ms/op
                 executeQuery·p1.00:   54.198 ms/op

Iteration   4: 45.976 ±(99.9%) 0.157 ms/op
                 executeQuery·p0.00:   45.089 ms/op
                 executeQuery·p0.50:   45.810 ms/op
                 executeQuery·p0.90:   46.662 ms/op
                 executeQuery·p0.95:   47.075 ms/op
                 executeQuery·p0.99:   49.134 ms/op
                 executeQuery·p0.999:  49.676 ms/op
                 executeQuery·p0.9999: 49.676 ms/op
                 executeQuery·p1.00:   49.676 ms/op

Iteration   5: 45.844 ±(99.9%) 0.156 ms/op
                 executeQuery·p0.00:   44.958 ms/op
                 executeQuery·p0.50:   45.613 ms/op
                 executeQuery·p0.90:   46.635 ms/op
                 executeQuery·p0.95:   46.924 ms/op
                 executeQuery·p0.99:   49.059 ms/op
                 executeQuery·p0.999:  49.480 ms/op
                 executeQuery·p0.9999: 49.480 ms/op
                 executeQuery·p1.00:   49.480 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 1062
  mean =     45.902 ±(99.9%) 0.073 ms/op

  Histogram, ms/op:
    [44.000, 45.000) = 4 
    [45.000, 46.000) = 708 
    [46.000, 47.000) = 298 
    [47.000, 48.000) = 34 
    [48.000, 49.000) = 6 
    [49.000, 50.000) = 10 
    [50.000, 51.000) = 1 
    [51.000, 52.000) = 0 
    [52.000, 53.000) = 0 
    [53.000, 54.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     44.892 ms/op
     p(50.0000) =     45.679 ms/op
     p(90.0000) =     46.662 ms/op
     p(95.0000) =     46.989 ms/op
     p(99.0000) =     49.086 ms/op
     p(99.9000) =     53.979 ms/op
     p(99.9900) =     54.198 ms/op
     p(99.9990) =     54.198 ms/op
     p(99.9999) =     54.198 ms/op
    p(100.0000) =     54.198 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 97.92% complete, ETA 00:07:06
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
411.671 ±(99.9%) 35.426 ms/op
# Warmup Iteration   2: 432.428 ±(99.9%) 15.942 ms/op
# Warmup Iteration   3: 439.103 ±(99.9%) 1.899 ms/op
# Warmup Iteration   4: 440.539 ±(99.9%) 1.981 ms/op
# Warmup Iteration   5: 442.089 ±(99.9%) 2.509 ms/op
Iteration   1: 442.932 ±(99.9%) 3.468 ms/op
                 executeQuery·p0.00:   438.829 ms/op
                 executeQuery·p0.50:   440.926 ms/op
                 executeQuery·p0.90:   450.468 ms/op
                 executeQuery·p0.95:   454.663 ms/op
                 executeQuery·p0.99:   455.606 ms/op
                 executeQuery·p0.999:  455.606 ms/op
                 executeQuery·p0.9999: 455.606 ms/op
                 executeQuery·p1.00:   455.606 ms/op

Iteration   2: 441.564 ±(99.9%) 1.996 ms/op
                 executeQuery·p0.00:   438.829 ms/op
                 executeQuery·p0.50:   440.402 ms/op
                 executeQuery·p0.90:   446.484 ms/op
                 executeQuery·p0.95:   448.161 ms/op
                 executeQuery·p0.99:   448.266 ms/op
                 executeQuery·p0.999:  448.266 ms/op
                 executeQuery·p0.9999: 448.266 ms/op
                 executeQuery·p1.00:   448.266 ms/op

Iteration   3: 443.137 ±(99.9%) 2.931 ms/op
                 executeQuery·p0.00:   439.353 ms/op
                 executeQuery·p0.50:   442.499 ms/op
                 executeQuery·p0.90:   450.049 ms/op
                 executeQuery·p0.95:   453.404 ms/op
                 executeQuery·p0.99:   454.033 ms/op
                 executeQuery·p0.999:  454.033 ms/op
                 executeQuery·p0.9999: 454.033 ms/op
                 executeQuery·p1.00:   454.033 ms/op

Iteration   4: 443.137 ±(99.9%) 3.502 ms/op
                 executeQuery·p0.00:   438.305 ms/op
                 executeQuery·p0.50:   440.926 ms/op
                 executeQuery·p0.90:   449.944 ms/op
                 executeQuery·p0.95:   454.138 ms/op
                 executeQuery·p0.99:   455.082 ms/op
                 executeQuery·p0.999:  455.082 ms/op
                 executeQuery·p0.9999: 455.082 ms/op
                 executeQuery·p1.00:   455.082 ms/op

Iteration   5: 442.727 ±(99.9%) 3.273 ms/op
                 executeQuery·p0.00:   438.829 ms/op
                 executeQuery·p0.50:   440.402 ms/op
                 executeQuery·p0.90:   450.049 ms/op
                 executeQuery·p0.95:   451.727 ms/op
                 executeQuery·p0.99:   451.936 ms/op
                 executeQuery·p0.999:  451.936 ms/op
                 executeQuery·p0.9999: 451.936 ms/op
                 executeQuery·p1.00:   451.936 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 115
  mean =    442.700 ±(99.9%) 1.221 ms/op

  Histogram, ms/op:
    [430.000, 432.500) = 0 
    [432.500, 435.000) = 0 
    [435.000, 437.500) = 0 
    [437.500, 440.000) = 37 
    [440.000, 442.500) = 39 
    [442.500, 445.000) = 13 
    [445.000, 447.500) = 9 
    [447.500, 450.000) = 9 
    [450.000, 452.500) = 5 
    [452.500, 455.000) = 1 
    [455.000, 457.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    438.305 ms/op
     p(50.0000) =    440.926 ms/op
     p(90.0000) =    449.000 ms/op
     p(95.0000) =    450.888 ms/op
     p(99.0000) =    455.522 ms/op
     p(99.9000) =    455.606 ms/op
     p(99.9900) =    455.606 ms/op
     p(99.9990) =    455.606 ms/op
     p(99.9999) =    455.606 ms/op
    p(100.0000) =    455.606 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-100)

# Run progress: 98.96% complete, ETA 00:03:31
# Fork: 1 of 1
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
4088.048 ±(99.9%) 3272.802 ms/op
# Warmup Iteration   2: 4352.289 ±(99.9%) 974.938 ms/op
# Warmup Iteration   3: 4445.962 ±(99.9%) 306.079 ms/op
# Warmup Iteration   4: 4406.815 ±(99.9%) 385.141 ms/op
# Warmup Iteration   5: 4454.351 ±(99.9%) 1334.167 ms/op
Iteration   1: 4404.019 ±(99.9%) 265.072 ms/op
                 executeQuery·p0.00:   4387.242 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   2: 4398.427 ±(99.9%) 318.577 ms/op
                 executeQuery·p0.00:   4378.853 ms/op
                 executeQuery·p0.50:   4404.019 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   3: 4415.204 ±(99.9%) 467.543 ms/op
                 executeQuery·p0.00:   4387.242 ms/op
                 executeQuery·p0.50:   4420.796 ms/op
                 executeQuery·p0.90:   4437.574 ms/op
                 executeQuery·p0.95:   4437.574 ms/op
                 executeQuery·p0.99:   4437.574 ms/op
                 executeQuery·p0.999:  4437.574 ms/op
                 executeQuery·p0.9999: 4437.574 ms/op
                 executeQuery·p1.00:   4437.574 ms/op

Iteration   4: 4384.446 ±(99.9%) 233.772 ms/op
                 executeQuery·p0.00:   4370.465 ms/op
                 executeQuery·p0.50:   4387.242 ms/op
                 executeQuery·p0.90:   4395.631 ms/op
                 executeQuery·p0.95:   4395.631 ms/op
                 executeQuery·p0.99:   4395.631 ms/op
                 executeQuery·p0.999:  4395.631 ms/op
                 executeQuery·p0.9999: 4395.631 ms/op
                 executeQuery·p1.00:   4395.631 ms/op

Iteration   5: 4418.000 ±(99.9%) 983.906 ms/op
                 executeQuery·p0.00:   4378.853 ms/op
                 executeQuery·p0.50:   4395.631 ms/op
                 executeQuery·p0.90:   4479.517 ms/op
                 executeQuery·p0.95:   4479.517 ms/op
                 executeQuery·p0.99:   4479.517 ms/op
                 executeQuery·p0.999:  4479.517 ms/op
                 executeQuery·p0.9999: 4479.517 ms/op
                 executeQuery·p1.00:   4479.517 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 15
  mean =   4404.019 ±(99.9%) 29.549 ms/op

  Histogram, ms/op:
    [4300.000, 4312.500) = 0 
    [4312.500, 4325.000) = 0 
    [4325.000, 4337.500) = 0 
    [4337.500, 4350.000) = 0 
    [4350.000, 4362.500) = 0 
    [4362.500, 4375.000) = 1 
    [4375.000, 4387.500) = 5 
    [4387.500, 4400.000) = 2 
    [4400.000, 4412.500) = 4 
    [4412.500, 4425.000) = 1 
    [4425.000, 4437.500) = 0 
    [4437.500, 4450.000) = 1 
    [4450.000, 4462.500) = 0 
    [4462.500, 4475.000) = 0 
    [4475.000, 4487.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4370.465 ms/op
     p(50.0000) =   4395.631 ms/op
     p(90.0000) =   4454.351 ms/op
     p(95.0000) =   4479.517 ms/op
     p(99.0000) =   4479.517 ms/op
     p(99.9000) =   4479.517 ms/op
     p(99.9900) =   4479.517 ms/op
     p(99.9990) =   4479.517 ms/op
     p(99.9999) =   4479.517 ms/op
    p(100.0000) =   4479.517 ms/op


# Run complete. Total time: 05:37:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                     (tpchInstance)    Mode   Cnt       Score       Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   127     398.508 ±     0.456  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           395.313              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           398.459              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           400.556              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           400.556              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           403.031              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           403.177              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           403.177              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           403.177              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample    95     545.072 ±     0.931  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           541.065              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           544.211              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           548.825              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           551.551              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           553.648              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           553.648              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           553.648              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           553.648              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    70     741.598 ±     2.951  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           728.760              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           740.295              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           752.878              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           753.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           753.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           753.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           753.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           753.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample     5    2529.165 ±   382.026  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2449.474              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2503.999              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2701.132              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2701.132              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2701.132              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2701.132              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2701.132              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2701.132              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5    5070.075 ±   824.354  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          4823.450              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5217.714              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5242.880              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5242.880              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5242.880              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5242.880              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5242.880              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5242.880              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    15    4017.025 ±    73.493  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3955.229              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          3988.783              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4153.200              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4160.750              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4160.750              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4160.750              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4160.750              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4160.750              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    10    5225.264 ±    13.957  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5209.326              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5226.103              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5234.491              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5234.491              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5234.491              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5234.491              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5234.491              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5234.491              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10    7439.856 ±    62.831  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7323.255              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7449.084              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7465.022              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7465.861              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7465.861              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7465.861              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7465.861              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7465.861              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   23736.405 ±  2965.556  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         22951.231              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         23622.320              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24930.943              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24930.943              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24930.943              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24930.943              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24930.943              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         24930.943              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5   47794.933 ±  1893.653  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         47445.967              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         47647.293              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         48653.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         48653.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         48653.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         48653.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         48653.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         48653.926              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10    8075.713 ±   325.215  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7960.789              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7985.955              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8565.608              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8589.935              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8589.935              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8589.935              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8589.935              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8589.935              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     5   13099.650 ±   391.369  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12985.565              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13136.560              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13220.446              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13220.446              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13220.446              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13220.446              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13220.446              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         13220.446              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5   14774.016 ±   929.027  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14629.732              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14696.841              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15200.158              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15200.158              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15200.158              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15200.158              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15200.158              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15200.158              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5   49137.110 ±  1727.695  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         48452.600              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49325.015              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49526.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49526.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49526.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49526.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49526.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49526.342              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5   95482.492 ±  6011.629  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         93818.192              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         95428.805              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         97978.941              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         97978.941              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         97978.941              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         97978.941              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         97978.941              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         97978.941              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample   120     417.757 ±     0.269  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           415.236              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           417.858              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           418.906              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           419.430              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           419.955              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           419.955              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           419.955              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                                N/A  sample           419.955              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample    95     540.171 ±     1.900  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           535.822              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           538.968              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           543.162              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           552.600              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           577.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           577.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           577.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                                N/A  sample           577.765              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample    65     779.011 ±     6.354  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           751.829              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           779.092              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           800.063              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           801.846              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           804.258              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           804.258              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           804.258              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                                N/A  sample           804.258              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample     5    2441.085 ±   435.322  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2319.450              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2445.279              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2608.857              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2608.857              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2608.857              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2608.857              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2608.857              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                                N/A  sample          2608.857              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample     5    5207.648 ±   440.179  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5066.719              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5276.434              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5301.600              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5301.600              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5301.600              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5301.600              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5301.600              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                                N/A  sample          5301.600              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample    14    4323.728 ±   552.868  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4169.138              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          4185.915              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          5158.994              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          6023.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          6023.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          6023.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          6023.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                                N/A  sample          6023.021              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample    10    5356.126 ±    88.928  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5309.989              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5330.960              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5468.534              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5469.372              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5469.372              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5469.372              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5469.372              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                                N/A  sample          5469.372              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample    10    7258.663 ±   467.972  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          6987.710              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7256.146              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          7980.083              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          8053.064              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          8053.064              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          8053.064              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          8053.064              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                                N/A  sample          8053.064              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample     5   26138.903 ±  1464.653  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         25568.477              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26206.011              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26608.665              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26608.665              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26608.665              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26608.665              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26608.665              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                                N/A  sample         26608.665              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample     5   50277.961 ±  1443.413  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         49727.668              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         50398.757              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         50734.301              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         50734.301              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         50734.301              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         50734.301              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         50734.301              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                                N/A  sample         50734.301              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample    10    7984.277 ±   361.827  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7843.348              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          7885.292              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8497.660              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8514.437              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8514.437              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8514.437              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8514.437              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                                N/A  sample          8514.437              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample     5   12482.249 ±   470.318  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12348.031              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12499.026              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12666.798              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12666.798              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12666.798              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12666.798              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12666.798              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                                N/A  sample         12666.798              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample     5   15649.787 ±  3231.898  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         14931.722              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         15653.143              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         17012.097              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         17012.097              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         17012.097              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         17012.097              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         17012.097              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                                N/A  sample         17012.097              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample     5   50908.784 ±  4005.808  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         49123.688              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51271.172              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51740.934              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51740.934              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51740.934              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51740.934              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51740.934              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                                N/A  sample         51740.934              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample     5   99509.024 ±  5692.115  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         98113.159              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample         99052.683              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102005.473              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102005.473              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102005.473              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102005.473              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102005.473              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                                N/A  sample        102005.473              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample   509      97.589 ±     0.533  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            90.833              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            98.173              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           102.105              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           103.678              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           105.382              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           114.950              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           114.950              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           114.950              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   507      98.108 ±     0.341  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            92.537              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            98.042              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           100.821              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           102.236              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           103.930              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           111.673              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           111.673              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           111.673              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   506      98.398 ±     0.386  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            92.275              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample            98.435              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           101.974              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           102.715              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           104.062              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           104.464              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           104.464              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           104.464              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample    56     936.322 ±    12.854  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           882.901              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           935.330              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           977.273              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           979.685              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           982.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           982.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           982.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           982.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    55     926.426 ±    10.291  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           903.873              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           919.601              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           969.933              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           980.628              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           982.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           982.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           982.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           982.516              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    55     948.008 ±    10.475  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           907.018              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           939.524              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           981.887              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           983.984              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           989.856              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           989.856              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           989.856              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample           989.856              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    30    1823.404 ±    46.496  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1709.179              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1822.425              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1915.748              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1928.751              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1935.671              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1935.671              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1935.671              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1935.671              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    28    2349.859 ±  1843.311  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1805.648              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1836.057              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1916.377              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          9579.895              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         15837.692              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         15837.692              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         15837.692              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample         15837.692              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    30    1889.184 ±    29.922  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1837.105              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1872.757              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1962.725              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1966.919              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1969.226              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1969.226              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1969.226              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1969.226              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample   508      97.511 ±     0.555  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            90.964              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample            96.469              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           102.105              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           103.226              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           104.989              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           119.538              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           119.538              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                                N/A  sample           119.538              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample   533      93.340 ±     0.386  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            89.129              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            92.930              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            96.600              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample            98.868              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           101.667              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           102.498              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           102.498              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                                N/A  sample           102.498              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample   414     120.782 ±     0.114  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           119.931              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           120.717              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           121.242              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           121.504              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           122.271              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           132.383              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           132.383              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                                N/A  sample           132.383              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample    55     956.263 ±    15.305  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           888.144              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           951.058              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample           990.485              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1017.538              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1032.847              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1032.847              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1032.847              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1032.847              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample    57     906.540 ±    11.383  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           866.124              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           919.601              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           932.394              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           935.330              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           935.330              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           935.330              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           935.330              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                                N/A  sample           935.330              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample    45    1171.050 ±     2.146  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1161.822              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1170.211              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1175.244              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1179.438              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1184.891              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1184.891              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1184.891              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                                N/A  sample          1184.891              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample    30    1870.170 ±    42.570  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1774.191              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1868.562              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1976.566              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1979.502              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1981.809              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1981.809              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1981.809              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                                N/A  sample          1981.809              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample    30    1793.694 ±    31.640  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1753.219              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1772.093              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1878.629              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1885.864              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1891.631              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1891.631              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1891.631              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                                N/A  sample          1891.631              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample    25    2444.608 ±     4.596  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2432.696              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2445.279              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2453.668              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2456.604              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2457.862              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2457.862              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2457.862              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                                N/A  sample          2457.862              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    15    4328.242 ±   107.968  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4160.750              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4294.967              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4479.517              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4504.682              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4504.682              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4504.682              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4504.682              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4504.682              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   48506.287 ±  1087.176  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48117.055              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48586.818              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48788.144              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48788.144              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48788.144              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48788.144              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48788.144              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         48788.144              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    15    4482.313 ±   104.675  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4387.242              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4429.185              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4664.066              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4714.398              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4714.398              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4714.398              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4714.398              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          4714.398              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   50492.709 ±  1299.791  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         49996.104              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50465.866              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50868.519              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50868.519              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50868.519              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50868.519              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50868.519              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         50868.519              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    25    2328.006 ±     0.628  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2327.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2327.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2327.839              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2330.775              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2332.033              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2332.033              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2332.033              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2332.033              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   23702.851 ±    70.769  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23689.429              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23689.429              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23722.983              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23722.983              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23722.983              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23722.983              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23722.983              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         23722.983              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    40    1334.628 ±     3.925  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1325.400              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1334.837              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1344.274              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1348.469              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1348.469              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1348.469              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1348.469              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1348.469              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   17102.694 ±   148.727  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17045.651              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17095.983              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17146.315              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17146.315              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17146.315              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17146.315              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17146.315              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         17146.315              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    25    1996.153 ±     9.168  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1986.003              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1994.392              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1997.328              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2036.754              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2053.112              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2053.112              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2053.112              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          2053.112              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   25971.130 ±     0.001  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25971.130              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25971.130              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25971.130              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25971.130              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25971.130              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25971.130              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25971.130              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         25971.130              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample    45    1098.115 ±     1.293  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1094.713              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1098.908              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1101.005              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1101.005              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1109.393              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1109.393              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1109.393              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                                N/A  sample          1109.393              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample     5   11462.194 ±  1732.519  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11223.958              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         11257.512              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12264.145              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12264.145              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12264.145              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12264.145              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12264.145              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                                N/A  sample         12264.145              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   140     359.557 ±     1.514  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           353.370              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           358.089              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           367.316              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           370.619              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           386.400              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           386.400              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           386.400              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           386.400              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    4478.957 ±   285.604  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4206.887              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4387.242              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4947.601              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4957.667              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4957.667              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4957.667              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4957.667              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4957.667              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   178     282.765 ±     1.513  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           276.824              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           281.805              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           286.786              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           287.834              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           315.254              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           327.680              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           327.680              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           327.680              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    3574.945 ±   121.146  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3279.946              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3569.353              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3737.125              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3749.708              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3749.708              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3749.708              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3749.708              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3749.708              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   158     314.719 ±     2.673  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           305.136              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           311.427              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           339.372              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           343.409              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           345.936              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           346.554              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           346.554              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           346.554              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    3762.291 ±   107.629  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3527.410              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3774.874              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3895.670              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3913.286              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3913.286              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3913.286              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3913.286              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3913.286              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   200     252.045 ±     1.619  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           249.299              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           251.134              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           252.707              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           254.018              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           315.186              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           318.767              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           318.767              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           318.767              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    22    2505.334 ±    21.326  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2487.222              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2499.805              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2544.684              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2597.742              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2604.663              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2604.663              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2604.663              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          2604.663              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   23615.609 ±  4373.395  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22716.350              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22850.568              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25065.161              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25065.161              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25065.161              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25065.161              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25065.161              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         25065.161              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   145     350.000 ±     2.724  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           343.409              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           347.079              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           355.153              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           360.605              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           410.685              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           412.615              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           412.615              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           412.615              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    3480.433 ±    45.070  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3447.718              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3464.495              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3556.770              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3619.684              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3619.684              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3619.684              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3619.684              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          3619.684              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   34688.572 ±  1567.607  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34326.184              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.50                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         34426.847              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.90                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35165.045              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.95                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35165.045              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.99                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35165.045              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.999                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35165.045              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p0.9999                                                                                    N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35165.045              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimdSparkified.executeQuery:executeQuery·p1.00                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         35165.045              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   115     444.496 ±     0.986  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           439.878              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           442.499              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           448.791              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           448.895              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           453.782              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           454.033              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           454.033              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           454.033              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    4428.067 ±    28.735  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4378.853              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4429.185              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4457.706              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4462.739              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4462.739              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4462.739              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4462.739              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4462.739              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   43338.904 ±   115.566  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43285.217              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43352.326              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43352.326              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43352.326              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43352.326              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43352.326              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43352.326              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         43352.326              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   121     416.103 ±     1.884  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           407.372              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           415.236              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           424.149              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           429.077              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           436.795              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           437.256              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           437.256              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           437.256              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    15    4105.385 ±    40.113  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4047.503              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4118.807              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4151.522              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4156.555              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4156.555              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4156.555              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4156.555              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          4156.555              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   40761.924 ±  3281.938  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         40265.318              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         40466.645              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         42278.584              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         42278.584              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         42278.584              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         42278.584              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         42278.584              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         42278.584              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   405     123.411 ±     0.351  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           118.227              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           123.732              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           125.305              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           125.829              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           129.229              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           139.461              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           139.461              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           139.461              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    1908.129 ±     9.558  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1868.562              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1906.311              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1932.735              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1940.390              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1946.157              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1946.157              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1946.157              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1946.157              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   31380.105 ± 17172.127  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         23420.994              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33285.997              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33789.313              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33789.313              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33789.313              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33789.313              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33789.313              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         33789.313              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   354     138.063 ±     0.202  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           135.528              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           138.150              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           139.330              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           139.723              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           141.676              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           146.801              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           146.801              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           146.801              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    1950.142 ±     5.349  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1950.351              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1956.643              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1963.459              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1969.226              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1969.226              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1969.226              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1969.226              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   21743.272 ±   129.206  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21709.718              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21743.272              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21776.826              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21776.826              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21776.826              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21776.826              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21776.826              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         21776.826              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample   343     143.968 ±     0.193  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           141.296              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           143.655              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           145.228              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           145.962              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           147.996              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           150.995              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           150.995              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A    /nvtmp/AethraTestData/tpch/sf-1  sample           150.995              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample    30    1898.062 ±     7.612  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1874.854              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1901.068              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1906.311              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1918.580              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-10  sample          1933.574              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample     5   22501.602 ±   383.287  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22347.252              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22515.024              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22615.687              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22615.687              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22615.687              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22615.687              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22615.687              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-100  sample         22615.687              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1221      40.841 ±     0.135  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            38.404              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            40.632              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            42.847              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            43.247              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            44.536              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            49.728              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            50.921              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            50.921              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   130     390.921 ±     0.802  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           386.400              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           390.595              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           394.265              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           395.025              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           399.382              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           400.032              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           400.032              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           400.032              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    3816.817 ±    35.347  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3774.874              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3825.205              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3863.793              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3871.343              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3871.343              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3871.343              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3871.343              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          3871.343              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1203      40.511 ±     0.079  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            39.256              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            40.370              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            41.615              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            41.943              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            42.402              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            49.155              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            49.676              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            49.676              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   120     415.114 ±     0.765  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           411.042              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           414.712              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           418.906              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           419.430              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           421.417              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           421.528              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           421.528              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           421.528              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    4108.740 ±    28.651  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4068.475              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4114.612              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4155.716              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4160.750              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4160.750              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4160.750              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4160.750              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4160.750              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A    /nvtmp/AethraTestData/tpch/sf-1  sample  1062      45.902 ±     0.073  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            44.892              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            45.679              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            46.662              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            46.989              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            49.086              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            53.979              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            54.198              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A    /nvtmp/AethraTestData/tpch/sf-1  sample            54.198              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-10  sample   115     442.700 ±     1.221  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           438.305              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           440.926              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           449.000              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           450.888              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           455.522              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           455.606              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           455.606              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-10  sample           455.606              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-100  sample    15    4404.019 ±    29.549  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4370.465              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4395.631              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4454.351              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4479.517              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4479.517              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4479.517              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4479.517              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-100  sample          4479.517              ms/op

Benchmark result is saved to jmh-result.csv

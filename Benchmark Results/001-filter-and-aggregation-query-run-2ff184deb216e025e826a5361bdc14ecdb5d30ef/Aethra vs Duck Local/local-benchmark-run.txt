# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1)

# Run progress: 0.00% complete, ETA 04:20:00
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

438.969 ±(99.9%) 32.847 ms/op
# Warmup Iteration   2: 410.178 ±(99.9%) 7.688 ms/op
# Warmup Iteration   3: 403.003 ±(99.9%) 5.569 ms/op
# Warmup Iteration   4: 403.352 ±(99.9%) 4.161 ms/op
# Warmup Iteration   5: 406.527 ±(99.9%) 3.216 ms/op
Iteration   1: 403.410 ±(99.9%) 7.011 ms/op
                 executeQuery·p0.00:   394.789 ms/op
                 executeQuery·p0.50:   401.342 ms/op
                 executeQuery·p0.90:   409.679 ms/op
                 executeQuery·p0.95:   430.440 ms/op
                 executeQuery·p0.99:   430.440 ms/op
                 executeQuery·p0.999:  430.440 ms/op
                 executeQuery·p0.9999: 430.440 ms/op
                 executeQuery·p1.00:   430.440 ms/op

Iteration   2: 406.032 ±(99.9%) 3.852 ms/op
                 executeQuery·p0.00:   400.032 ms/op
                 executeQuery·p0.50:   406.585 ms/op
                 executeQuery·p0.90:   411.828 ms/op
                 executeQuery·p0.95:   414.188 ms/op
                 executeQuery·p0.99:   414.188 ms/op
                 executeQuery·p0.999:  414.188 ms/op
                 executeQuery·p0.9999: 414.188 ms/op
                 executeQuery·p1.00:   414.188 ms/op

Iteration   3: 403.964 ±(99.9%) 3.096 ms/op
                 executeQuery·p0.00:   398.983 ms/op
                 executeQuery·p0.50:   404.226 ms/op
                 executeQuery·p0.90:   408.473 ms/op
                 executeQuery·p0.95:   408.945 ms/op
                 executeQuery·p0.99:   408.945 ms/op
                 executeQuery·p0.999:  408.945 ms/op
                 executeQuery·p0.9999: 408.945 ms/op
                 executeQuery·p1.00:   408.945 ms/op

Iteration   4: 403.207 ±(99.9%) 6.460 ms/op
                 executeQuery·p0.00:   398.983 ms/op
                 executeQuery·p0.50:   400.556 ms/op
                 executeQuery·p0.90:   408.578 ms/op
                 executeQuery·p0.95:   428.868 ms/op
                 executeQuery·p0.99:   428.868 ms/op
                 executeQuery·p0.999:  428.868 ms/op
                 executeQuery·p0.9999: 428.868 ms/op
                 executeQuery·p1.00:   428.868 ms/op

Iteration   5: 409.848 ±(99.9%) 11.402 ms/op
                 executeQuery·p0.00:   399.507 ms/op
                 executeQuery·p0.50:   407.372 ms/op
                 executeQuery·p0.90:   419.797 ms/op
                 executeQuery·p0.95:   456.131 ms/op
                 executeQuery·p0.99:   456.131 ms/op
                 executeQuery·p0.999:  456.131 ms/op
                 executeQuery·p0.9999: 456.131 ms/op
                 executeQuery·p1.00:   456.131 ms/op


# Run progress: 0.64% complete, ETA 04:30:22
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

408.093 ±(99.9%) 34.607 ms/op
# Warmup Iteration   2: 400.789 ±(99.9%) 1.408 ms/op
# Warmup Iteration   3: 405.192 ±(99.9%) 7.881 ms/op
# Warmup Iteration   4: 401.053 ±(99.9%) 0.577 ms/op
# Warmup Iteration   5: 401.549 ±(99.9%) 1.482 ms/op
Iteration   1: 404.557 ±(99.9%) 5.239 ms/op
                 executeQuery·p0.00:   396.362 ms/op
                 executeQuery·p0.50:   401.080 ms/op
                 executeQuery·p0.90:   414.188 ms/op
                 executeQuery·p0.95:   417.858 ms/op
                 executeQuery·p0.99:   417.858 ms/op
                 executeQuery·p0.999:  417.858 ms/op
                 executeQuery·p0.9999: 417.858 ms/op
                 executeQuery·p1.00:   417.858 ms/op

Iteration   2: 401.577 ±(99.9%) 1.083 ms/op
                 executeQuery·p0.00:   400.556 ms/op
                 executeQuery·p0.50:   401.080 ms/op
                 executeQuery·p0.90:   403.177 ms/op
                 executeQuery·p0.95:   405.275 ms/op
                 executeQuery·p0.99:   405.275 ms/op
                 executeQuery·p0.999:  405.275 ms/op
                 executeQuery·p0.9999: 405.275 ms/op
                 executeQuery·p1.00:   405.275 ms/op

Iteration   3: 401.246 ±(99.9%) 1.407 ms/op
                 executeQuery·p0.00:   400.032 ms/op
                 executeQuery·p0.50:   400.556 ms/op
                 executeQuery·p0.90:   401.605 ms/op
                 executeQuery·p0.95:   407.372 ms/op
                 executeQuery·p0.99:   407.372 ms/op
                 executeQuery·p0.999:  407.372 ms/op
                 executeQuery·p0.9999: 407.372 ms/op
                 executeQuery·p1.00:   407.372 ms/op

Iteration   4: 402.184 ±(99.9%) 2.727 ms/op
                 executeQuery·p0.00:   400.032 ms/op
                 executeQuery·p0.50:   401.080 ms/op
                 executeQuery·p0.90:   407.372 ms/op
                 executeQuery·p0.95:   412.615 ms/op
                 executeQuery·p0.99:   412.615 ms/op
                 executeQuery·p0.999:  412.615 ms/op
                 executeQuery·p0.9999: 412.615 ms/op
                 executeQuery·p1.00:   412.615 ms/op

Iteration   5: 410.876 ±(99.9%) 38.419 ms/op
                 executeQuery·p0.00:   400.556 ms/op
                 executeQuery·p0.50:   401.080 ms/op
                 executeQuery·p0.90:   402.129 ms/op
                 executeQuery·p0.95:   587.203 ms/op
                 executeQuery·p0.99:   587.203 ms/op
                 executeQuery·p0.999:  587.203 ms/op
                 executeQuery·p0.9999: 587.203 ms/op
                 executeQuery·p1.00:   587.203 ms/op


# Run progress: 1.28% complete, ETA 04:27:11
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

407.306 ±(99.9%) 16.504 ms/op
# Warmup Iteration   2: 404.401 ±(99.9%) 2.694 ms/op
# Warmup Iteration   3: 404.779 ±(99.9%) 2.149 ms/op
# Warmup Iteration   4: 403.119 ±(99.9%) 2.394 ms/op
# Warmup Iteration   5: 408.158 ±(99.9%) 7.202 ms/op
Iteration   1: 427.356 ±(99.9%) 0.622 ms/op
                 executeQuery·p0.00:   426.770 ms/op
                 executeQuery·p0.50:   427.295 ms/op
                 executeQuery·p0.90:   428.134 ms/op
                 executeQuery·p0.95:   429.392 ms/op
                 executeQuery·p0.99:   429.392 ms/op
                 executeQuery·p0.999:  429.392 ms/op
                 executeQuery·p0.9999: 429.392 ms/op
                 executeQuery·p1.00:   429.392 ms/op

Iteration   2: 410.226 ±(99.9%) 5.516 ms/op
                 executeQuery·p0.00:   404.750 ms/op
                 executeQuery·p0.50:   407.634 ms/op
                 executeQuery·p0.90:   420.164 ms/op
                 executeQuery·p0.95:   426.770 ms/op
                 executeQuery·p0.99:   426.770 ms/op
                 executeQuery·p0.999:  426.770 ms/op
                 executeQuery·p0.9999: 426.770 ms/op
                 executeQuery·p1.00:   426.770 ms/op

Iteration   3: 405.653 ±(99.9%) 2.272 ms/op
                 executeQuery·p0.00:   400.556 ms/op
                 executeQuery·p0.50:   405.799 ms/op
                 executeQuery·p0.90:   408.263 ms/op
                 executeQuery·p0.95:   411.566 ms/op
                 executeQuery·p0.99:   411.566 ms/op
                 executeQuery·p0.999:  411.566 ms/op
                 executeQuery·p0.9999: 411.566 ms/op
                 executeQuery·p1.00:   411.566 ms/op

Iteration   4: 404.605 ±(99.9%) 2.050 ms/op
                 executeQuery·p0.00:   401.605 ms/op
                 executeQuery·p0.50:   404.750 ms/op
                 executeQuery·p0.90:   407.529 ms/op
                 executeQuery·p0.95:   408.945 ms/op
                 executeQuery·p0.99:   408.945 ms/op
                 executeQuery·p0.999:  408.945 ms/op
                 executeQuery·p0.9999: 408.945 ms/op
                 executeQuery·p1.00:   408.945 ms/op

Iteration   5: 404.430 ±(99.9%) 3.554 ms/op
                 executeQuery·p0.00:   400.556 ms/op
                 executeQuery·p0.50:   403.702 ms/op
                 executeQuery·p0.90:   408.263 ms/op
                 executeQuery·p0.95:   416.285 ms/op
                 executeQuery·p0.99:   416.285 ms/op
                 executeQuery·p0.999:  416.285 ms/op
                 executeQuery·p0.9999: 416.285 ms/op
                 executeQuery·p1.00:   416.285 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 274
  mean =    406.490 ±(99.9%) 2.712 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 
    [375.000, 400.000) = 13 
    [400.000, 425.000) = 239 
    [425.000, 450.000) = 20 
    [450.000, 475.000) = 1 
    [475.000, 500.000) = 0 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    394.789 ms/op
     p(50.0000) =    403.177 ms/op
     p(90.0000) =    416.023 ms/op
     p(95.0000) =    427.295 ms/op
     p(99.0000) =    436.863 ms/op
     p(99.9000) =    587.203 ms/op
     p(99.9900) =    587.203 ms/op
     p(99.9990) =    587.203 ms/op
     p(99.9999) =    587.203 ms/op
    p(100.0000) =    587.203 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4)

# Run progress: 1.92% complete, ETA 04:25:09
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

562.238 ±(99.9%) 37.715 ms/op
# Warmup Iteration   2: 554.847 ±(99.9%) 6.170 ms/op
# Warmup Iteration   3: 552.450 ±(99.9%) 2.778 ms/op
# Warmup Iteration   4: 553.199 ±(99.9%) 3.205 ms/op
# Warmup Iteration   5: 555.670 ±(99.9%) 2.341 ms/op
Iteration   1: 554.098 ±(99.9%) 1.202 ms/op
                 executeQuery·p0.00:   551.551 ms/op
                 executeQuery·p0.50:   554.697 ms/op
                 executeQuery·p0.90:   555.221 ms/op
                 executeQuery·p0.95:   555.745 ms/op
                 executeQuery·p0.99:   555.745 ms/op
                 executeQuery·p0.999:  555.745 ms/op
                 executeQuery·p0.9999: 555.745 ms/op
                 executeQuery·p1.00:   555.745 ms/op

Iteration   2: 549.379 ±(99.9%) 4.485 ms/op
                 executeQuery·p0.00:   545.260 ms/op
                 executeQuery·p0.50:   546.832 ms/op
                 executeQuery·p0.90:   555.745 ms/op
                 executeQuery·p0.95:   555.745 ms/op
                 executeQuery·p0.99:   555.745 ms/op
                 executeQuery·p0.999:  555.745 ms/op
                 executeQuery·p0.9999: 555.745 ms/op
                 executeQuery·p1.00:   555.745 ms/op

Iteration   3: 551.326 ±(99.9%) 3.969 ms/op
                 executeQuery·p0.00:   546.308 ms/op
                 executeQuery·p0.50:   551.551 ms/op
                 executeQuery·p0.90:   557.318 ms/op
                 executeQuery·p0.95:   559.940 ms/op
                 executeQuery·p0.99:   559.940 ms/op
                 executeQuery·p0.999:  559.940 ms/op
                 executeQuery·p0.9999: 559.940 ms/op
                 executeQuery·p1.00:   559.940 ms/op

Iteration   4: 548.780 ±(99.9%) 3.028 ms/op
                 executeQuery·p0.00:   546.308 ms/op
                 executeQuery·p0.50:   547.881 ms/op
                 executeQuery·p0.90:   553.648 ms/op
                 executeQuery·p0.95:   553.648 ms/op
                 executeQuery·p0.99:   553.648 ms/op
                 executeQuery·p0.999:  553.648 ms/op
                 executeQuery·p0.9999: 553.648 ms/op
                 executeQuery·p1.00:   553.648 ms/op

Iteration   5: 553.573 ±(99.9%) 2.047 ms/op
                 executeQuery·p0.00:   551.551 ms/op
                 executeQuery·p0.50:   553.124 ms/op
                 executeQuery·p0.90:   556.270 ms/op
                 executeQuery·p0.95:   556.794 ms/op
                 executeQuery·p0.99:   556.794 ms/op
                 executeQuery·p0.999:  556.794 ms/op
                 executeQuery·p0.9999: 556.794 ms/op
                 executeQuery·p1.00:   556.794 ms/op


# Run progress: 2.56% complete, ETA 04:23:39
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

552.974 ±(99.9%) 11.502 ms/op
# Warmup Iteration   2: 555.885 ±(99.9%) 1.935 ms/op
# Warmup Iteration   3: 556.934 ±(99.9%) 1.331 ms/op
# Warmup Iteration   4: 561.687 ±(99.9%) 20.902 ms/op
# Warmup Iteration   5: 557.283 ±(99.9%) 2.573 ms/op
Iteration   1: 560.149 ±(99.9%) 2.549 ms/op
                 executeQuery·p0.00:   555.745 ms/op
                 executeQuery·p0.50:   560.988 ms/op
                 executeQuery·p0.90:   564.134 ms/op
                 executeQuery·p0.95:   564.134 ms/op
                 executeQuery·p0.99:   564.134 ms/op
                 executeQuery·p0.999:  564.134 ms/op
                 executeQuery·p0.9999: 564.134 ms/op
                 executeQuery·p1.00:   564.134 ms/op

Iteration   2: 554.906 ±(99.9%) 3.342 ms/op
                 executeQuery·p0.00:   545.260 ms/op
                 executeQuery·p0.50:   555.745 ms/op
                 executeQuery·p0.90:   557.213 ms/op
                 executeQuery·p0.95:   557.842 ms/op
                 executeQuery·p0.99:   557.842 ms/op
                 executeQuery·p0.999:  557.842 ms/op
                 executeQuery·p0.9999: 557.842 ms/op
                 executeQuery·p1.00:   557.842 ms/op

Iteration   3: 556.305 ±(99.9%) 0.935 ms/op
                 executeQuery·p0.00:   555.745 ms/op
                 executeQuery·p0.50:   555.745 ms/op
                 executeQuery·p0.90:   557.633 ms/op
                 executeQuery·p0.95:   558.891 ms/op
                 executeQuery·p0.99:   558.891 ms/op
                 executeQuery·p0.999:  558.891 ms/op
                 executeQuery·p0.9999: 558.891 ms/op
                 executeQuery·p1.00:   558.891 ms/op

Iteration   4: 557.842 ±(99.9%) 1.585 ms/op
                 executeQuery·p0.00:   555.745 ms/op
                 executeQuery·p0.50:   557.842 ms/op
                 executeQuery·p0.90:   560.149 ms/op
                 executeQuery·p0.95:   562.037 ms/op
                 executeQuery·p0.99:   562.037 ms/op
                 executeQuery·p0.999:  562.037 ms/op
                 executeQuery·p0.9999: 562.037 ms/op
                 executeQuery·p1.00:   562.037 ms/op

Iteration   5: 557.842 ±(99.9%) 2.160 ms/op
                 executeQuery·p0.00:   551.551 ms/op
                 executeQuery·p0.50:   557.842 ms/op
                 executeQuery·p0.90:   559.940 ms/op
                 executeQuery·p0.95:   559.940 ms/op
                 executeQuery·p0.99:   559.940 ms/op
                 executeQuery·p0.999:  559.940 ms/op
                 executeQuery·p0.9999: 559.940 ms/op
                 executeQuery·p1.00:   559.940 ms/op


# Run progress: 3.21% complete, ETA 04:22:12
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

553.729 ±(99.9%) 12.457 ms/op
# Warmup Iteration   2: 557.618 ±(99.9%) 1.551 ms/op
# Warmup Iteration   3: 557.543 ±(99.9%) 1.636 ms/op
# Warmup Iteration   4: 557.168 ±(99.9%) 1.773 ms/op
# Warmup Iteration   5: 557.168 ±(99.9%) 0.996 ms/op
Iteration   1: 557.992 ±(99.9%) 3.468 ms/op
                 executeQuery·p0.00:   555.745 ms/op
                 executeQuery·p0.50:   556.794 ms/op
                 executeQuery·p0.90:   564.658 ms/op
                 executeQuery·p0.95:   567.280 ms/op
                 executeQuery·p0.99:   567.280 ms/op
                 executeQuery·p0.999:  567.280 ms/op
                 executeQuery·p0.9999: 567.280 ms/op
                 executeQuery·p1.00:   567.280 ms/op

Iteration   2: 557.693 ±(99.9%) 1.788 ms/op
                 executeQuery·p0.00:   555.745 ms/op
                 executeQuery·p0.50:   556.794 ms/op
                 executeQuery·p0.90:   560.988 ms/op
                 executeQuery·p0.95:   560.988 ms/op
                 executeQuery·p0.99:   560.988 ms/op
                 executeQuery·p0.999:  560.988 ms/op
                 executeQuery·p0.9999: 560.988 ms/op
                 executeQuery·p1.00:   560.988 ms/op

Iteration   3: 557.168 ±(99.9%) 3.333 ms/op
                 executeQuery·p0.00:   548.405 ms/op
                 executeQuery·p0.50:   557.842 ms/op
                 executeQuery·p0.90:   560.988 ms/op
                 executeQuery·p0.95:   562.037 ms/op
                 executeQuery·p0.99:   562.037 ms/op
                 executeQuery·p0.999:  562.037 ms/op
                 executeQuery·p0.9999: 562.037 ms/op
                 executeQuery·p1.00:   562.037 ms/op

Iteration   4: 557.468 ±(99.9%) 3.521 ms/op
                 executeQuery·p0.00:   548.405 ms/op
                 executeQuery·p0.50:   557.318 ms/op
                 executeQuery·p0.90:   561.512 ms/op
                 executeQuery·p0.95:   562.037 ms/op
                 executeQuery·p0.99:   562.037 ms/op
                 executeQuery·p0.999:  562.037 ms/op
                 executeQuery·p0.9999: 562.037 ms/op
                 executeQuery·p1.00:   562.037 ms/op

Iteration   5: 557.318 ±(99.9%) 4.143 ms/op
                 executeQuery·p0.00:   550.502 ms/op
                 executeQuery·p0.50:   556.794 ms/op
                 executeQuery·p0.90:   563.610 ms/op
                 executeQuery·p0.95:   568.328 ms/op
                 executeQuery·p0.99:   568.328 ms/op
                 executeQuery·p0.999:  568.328 ms/op
                 executeQuery·p0.9999: 568.328 ms/op
                 executeQuery·p1.00:   568.328 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 215
  mean =    555.501 ±(99.9%) 0.944 ms/op

  Histogram, ms/op:
    [540.000, 542.500) = 0 
    [542.500, 545.000) = 0 
    [545.000, 547.500) = 18 
    [547.500, 550.000) = 8 
    [550.000, 552.500) = 14 
    [552.500, 555.000) = 31 
    [555.000, 557.500) = 82 
    [557.500, 560.000) = 45 
    [560.000, 562.500) = 13 
    [562.500, 565.000) = 2 
    [565.000, 567.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    545.260 ms/op
     p(50.0000) =    556.794 ms/op
     p(90.0000) =    559.940 ms/op
     p(95.0000) =    560.988 ms/op
     p(99.0000) =    566.776 ms/op
     p(99.9000) =    568.328 ms/op
     p(99.9900) =    568.328 ms/op
     p(99.9990) =    568.328 ms/op
     p(99.9999) =    568.328 ms/op
    p(100.0000) =    568.328 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 3.85% complete, ETA 04:21:22
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

561.149 ±(99.9%) 26.868 ms/op
# Warmup Iteration   2: 555.970 ±(99.9%) 1.480 ms/op
# Warmup Iteration   3: 557.093 ±(99.9%) 3.781 ms/op
# Warmup Iteration   4: 557.917 ±(99.9%) 6.437 ms/op
# Warmup Iteration   5: 556.719 ±(99.9%) 3.094 ms/op
Iteration   1: 556.344 ±(99.9%) 5.543 ms/op
                 executeQuery·p0.00:   549.454 ms/op
                 executeQuery·p0.50:   555.745 ms/op
                 executeQuery·p0.90:   565.707 ms/op
                 executeQuery·p0.95:   571.474 ms/op
                 executeQuery·p0.99:   571.474 ms/op
                 executeQuery·p0.999:  571.474 ms/op
                 executeQuery·p0.9999: 571.474 ms/op
                 executeQuery·p1.00:   571.474 ms/op

Iteration   2: 556.719 ±(99.9%) 4.030 ms/op
                 executeQuery·p0.00:   553.648 ms/op
                 executeQuery·p0.50:   554.697 ms/op
                 executeQuery·p0.90:   563.610 ms/op
                 executeQuery·p0.95:   566.231 ms/op
                 executeQuery·p0.99:   566.231 ms/op
                 executeQuery·p0.999:  566.231 ms/op
                 executeQuery·p0.9999: 566.231 ms/op
                 executeQuery·p1.00:   566.231 ms/op

Iteration   3: 563.235 ±(99.9%) 30.203 ms/op
                 executeQuery·p0.00:   552.600 ms/op
                 executeQuery·p0.50:   555.745 ms/op
                 executeQuery·p0.90:   611.844 ms/op
                 executeQuery·p0.95:   655.360 ms/op
                 executeQuery·p0.99:   655.360 ms/op
                 executeQuery·p0.999:  655.360 ms/op
                 executeQuery·p0.9999: 655.360 ms/op
                 executeQuery·p1.00:   655.360 ms/op

Iteration   4: 555.595 ±(99.9%) 2.266 ms/op
                 executeQuery·p0.00:   552.600 ms/op
                 executeQuery·p0.50:   555.221 ms/op
                 executeQuery·p0.90:   558.891 ms/op
                 executeQuery·p0.95:   558.891 ms/op
                 executeQuery·p0.99:   558.891 ms/op
                 executeQuery·p0.999:  558.891 ms/op
                 executeQuery·p0.9999: 558.891 ms/op
                 executeQuery·p1.00:   558.891 ms/op

Iteration   5: 562.112 ±(99.9%) 8.267 ms/op
                 executeQuery·p0.00:   554.697 ms/op
                 executeQuery·p0.50:   562.037 ms/op
                 executeQuery·p0.90:   576.717 ms/op
                 executeQuery·p0.95:   576.717 ms/op
                 executeQuery·p0.99:   576.717 ms/op
                 executeQuery·p0.999:  576.717 ms/op
                 executeQuery·p0.9999: 576.717 ms/op
                 executeQuery·p1.00:   576.717 ms/op


# Run progress: 4.49% complete, ETA 04:18:52
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

547.478 ±(99.9%) 14.885 ms/op
# Warmup Iteration   2: 548.480 ±(99.9%) 1.350 ms/op
# Warmup Iteration   3: 548.475 ±(99.9%) 0.513 ms/op
# Warmup Iteration   4: 548.545 ±(99.9%) 0.935 ms/op
# Warmup Iteration   5: 548.545 ±(99.9%) 0.394 ms/op
Iteration   1: 557.912 ±(99.9%) 37.824 ms/op
                 executeQuery·p0.00:   548.405 ms/op
                 executeQuery·p0.50:   548.405 ms/op
                 executeQuery·p0.90:   605.238 ms/op
                 executeQuery·p0.95:   685.769 ms/op
                 executeQuery·p0.99:   685.769 ms/op
                 executeQuery·p0.999:  685.769 ms/op
                 executeQuery·p0.9999: 685.769 ms/op
                 executeQuery·p1.00:   685.769 ms/op

Iteration   2: 556.724 ±(99.9%) 34.778 ms/op
                 executeQuery·p0.00:   545.260 ms/op
                 executeQuery·p0.50:   548.405 ms/op
                 executeQuery·p0.90:   600.624 ms/op
                 executeQuery·p0.95:   674.234 ms/op
                 executeQuery·p0.99:   674.234 ms/op
                 executeQuery·p0.999:  674.234 ms/op
                 executeQuery·p0.9999: 674.234 ms/op
                 executeQuery·p1.00:   674.234 ms/op

Iteration   3: 549.244 ±(99.9%) 2.911 ms/op
                 executeQuery·p0.00:   547.357 ms/op
                 executeQuery·p0.50:   548.405 ms/op
                 executeQuery·p0.90:   555.536 ms/op
                 executeQuery·p0.95:   556.794 ms/op
                 executeQuery·p0.99:   556.794 ms/op
                 executeQuery·p0.999:  556.794 ms/op
                 executeQuery·p0.9999: 556.794 ms/op
                 executeQuery·p1.00:   556.794 ms/op

Iteration   4: 556.514 ±(99.9%) 35.523 ms/op
                 executeQuery·p0.00:   544.211 ms/op
                 executeQuery·p0.50:   548.405 ms/op
                 executeQuery·p0.90:   602.721 ms/op
                 executeQuery·p0.95:   676.332 ms/op
                 executeQuery·p0.99:   676.332 ms/op
                 executeQuery·p0.999:  676.332 ms/op
                 executeQuery·p0.9999: 676.332 ms/op
                 executeQuery·p1.00:   676.332 ms/op

Iteration   5: 548.895 ±(99.9%) 0.717 ms/op
                 executeQuery·p0.00:   548.405 ms/op
                 executeQuery·p0.50:   548.405 ms/op
                 executeQuery·p0.90:   549.873 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op


# Run progress: 5.13% complete, ETA 04:16:50
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

530.505 ±(99.9%) 12.408 ms/op
# Warmup Iteration   2: 532.013 ±(99.9%) 15.810 ms/op
# Warmup Iteration   3: 530.350 ±(99.9%) 7.534 ms/op
# Warmup Iteration   4: 529.334 ±(99.9%) 3.290 ms/op
# Warmup Iteration   5: 531.235 ±(99.9%) 5.546 ms/op
Iteration   1: 528.974 ±(99.9%) 0.903 ms/op
                 executeQuery·p0.00:   527.434 ms/op
                 executeQuery·p0.50:   529.007 ms/op
                 executeQuery·p0.90:   530.055 ms/op
                 executeQuery·p0.95:   530.055 ms/op
                 executeQuery·p0.99:   530.055 ms/op
                 executeQuery·p0.999:  530.055 ms/op
                 executeQuery·p0.9999: 530.055 ms/op
                 executeQuery·p1.00:   530.055 ms/op

Iteration   2: 529.433 ±(99.9%) 1.435 ms/op
                 executeQuery·p0.00:   527.958 ms/op
                 executeQuery·p0.50:   529.007 ms/op
                 executeQuery·p0.90:   531.733 ms/op
                 executeQuery·p0.95:   533.201 ms/op
                 executeQuery·p0.99:   533.201 ms/op
                 executeQuery·p0.999:  533.201 ms/op
                 executeQuery·p0.9999: 533.201 ms/op
                 executeQuery·p1.00:   533.201 ms/op

Iteration   3: 529.433 ±(99.9%) 1.281 ms/op
                 executeQuery·p0.00:   527.958 ms/op
                 executeQuery·p0.50:   529.007 ms/op
                 executeQuery·p0.90:   531.576 ms/op
                 executeQuery·p0.95:   532.677 ms/op
                 executeQuery·p0.99:   532.677 ms/op
                 executeQuery·p0.999:  532.677 ms/op
                 executeQuery·p0.9999: 532.677 ms/op
                 executeQuery·p1.00:   532.677 ms/op

Iteration   4: 530.481 ±(99.9%) 3.958 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   528.482 ms/op
                 executeQuery·p0.90:   536.871 ms/op
                 executeQuery·p0.95:   536.871 ms/op
                 executeQuery·p0.99:   536.871 ms/op
                 executeQuery·p0.999:  536.871 ms/op
                 executeQuery·p0.9999: 536.871 ms/op
                 executeQuery·p1.00:   536.871 ms/op

Iteration   5: 534.315 ±(99.9%) 4.171 ms/op
                 executeQuery·p0.00:   528.482 ms/op
                 executeQuery·p0.50:   535.298 ms/op
                 executeQuery·p0.90:   538.968 ms/op
                 executeQuery·p0.95:   538.968 ms/op
                 executeQuery·p0.99:   538.968 ms/op
                 executeQuery·p0.999:  538.968 ms/op
                 executeQuery·p0.9999: 538.968 ms/op
                 executeQuery·p1.00:   538.968 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 225
  mean =    547.100 ±(99.9%) 4.606 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 1 
    [525.000, 537.500) = 74 
    [537.500, 550.000) = 71 
    [550.000, 562.500) = 66 
    [562.500, 575.000) = 7 
    [575.000, 587.500) = 2 
    [587.500, 600.000) = 0 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 1 
    [662.500, 675.000) = 1 
    [675.000, 687.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    524.288 ms/op
     p(50.0000) =    548.405 ms/op
     p(90.0000) =    558.262 ms/op
     p(95.0000) =    564.134 ms/op
     p(99.0000) =    675.786 ms/op
     p(99.9000) =    685.769 ms/op
     p(99.9900) =    685.769 ms/op
     p(99.9990) =    685.769 ms/op
     p(99.9999) =    685.769 ms/op
    p(100.0000) =    685.769 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64)

# Run progress: 5.77% complete, ETA 04:15:45
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

515.150 ±(99.9%) 29.034 ms/op
# Warmup Iteration   2: 499.681 ±(99.9%) 0.910 ms/op
# Warmup Iteration   3: 499.941 ±(99.9%) 1.169 ms/op
# Warmup Iteration   4: 504.037 ±(99.9%) 14.465 ms/op
# Warmup Iteration   5: 504.005 ±(99.9%) 17.484 ms/op
Iteration   1: 499.450 ±(99.9%) 0.430 ms/op
                 executeQuery·p0.00:   499.122 ms/op
                 executeQuery·p0.50:   499.122 ms/op
                 executeQuery·p0.90:   500.171 ms/op
                 executeQuery·p0.95:   500.171 ms/op
                 executeQuery·p0.99:   500.171 ms/op
                 executeQuery·p0.999:  500.171 ms/op
                 executeQuery·p0.9999: 500.171 ms/op
                 executeQuery·p1.00:   500.171 ms/op

Iteration   2: 499.450 ±(99.9%) 1.496 ms/op
                 executeQuery·p0.00:   494.928 ms/op
                 executeQuery·p0.50:   499.646 ms/op
                 executeQuery·p0.90:   501.377 ms/op
                 executeQuery·p0.95:   501.744 ms/op
                 executeQuery·p0.99:   501.744 ms/op
                 executeQuery·p0.999:  501.744 ms/op
                 executeQuery·p0.9999: 501.744 ms/op
                 executeQuery·p1.00:   501.744 ms/op

Iteration   3: 504.103 ±(99.9%) 18.329 ms/op
                 executeQuery·p0.00:   498.598 ms/op
                 executeQuery·p0.50:   499.122 ms/op
                 executeQuery·p0.90:   523.764 ms/op
                 executeQuery·p0.95:   571.474 ms/op
                 executeQuery·p0.99:   571.474 ms/op
                 executeQuery·p0.999:  571.474 ms/op
                 executeQuery·p0.9999: 571.474 ms/op
                 executeQuery·p1.00:   571.474 ms/op

Iteration   4: 500.105 ±(99.9%) 1.641 ms/op
                 executeQuery·p0.00:   499.122 ms/op
                 executeQuery·p0.50:   499.646 ms/op
                 executeQuery·p0.90:   503.212 ms/op
                 executeQuery·p0.95:   505.414 ms/op
                 executeQuery·p0.99:   505.414 ms/op
                 executeQuery·p0.999:  505.414 ms/op
                 executeQuery·p0.9999: 505.414 ms/op
                 executeQuery·p1.00:   505.414 ms/op

Iteration   5: 500.269 ±(99.9%) 1.789 ms/op
                 executeQuery·p0.00:   499.122 ms/op
                 executeQuery·p0.50:   499.646 ms/op
                 executeQuery·p0.90:   503.002 ms/op
                 executeQuery·p0.95:   505.938 ms/op
                 executeQuery·p0.99:   505.938 ms/op
                 executeQuery·p0.999:  505.938 ms/op
                 executeQuery·p0.9999: 505.938 ms/op
                 executeQuery·p1.00:   505.938 ms/op


# Run progress: 6.41% complete, ETA 04:14:27
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

527.134 ±(99.9%) 30.006 ms/op
# Warmup Iteration   2: 513.942 ±(99.9%) 8.472 ms/op
# Warmup Iteration   3: 518.835 ±(99.9%) 4.750 ms/op
# Warmup Iteration   4: 519.744 ±(99.9%) 13.498 ms/op
# Warmup Iteration   5: 518.870 ±(99.9%) 7.012 ms/op
Iteration   1: 517.892 ±(99.9%) 3.049 ms/op
                 executeQuery·p0.00:   515.375 ms/op
                 executeQuery·p0.50:   516.948 ms/op
                 executeQuery·p0.90:   523.554 ms/op
                 executeQuery·p0.95:   524.812 ms/op
                 executeQuery·p0.99:   524.812 ms/op
                 executeQuery·p0.999:  524.812 ms/op
                 executeQuery·p0.9999: 524.812 ms/op
                 executeQuery·p1.00:   524.812 ms/op

Iteration   2: 517.018 ±(99.9%) 2.231 ms/op
                 executeQuery·p0.00:   512.754 ms/op
                 executeQuery·p0.50:   516.424 ms/op
                 executeQuery·p0.90:   520.303 ms/op
                 executeQuery·p0.95:   522.191 ms/op
                 executeQuery·p0.99:   522.191 ms/op
                 executeQuery·p0.999:  522.191 ms/op
                 executeQuery·p0.9999: 522.191 ms/op
                 executeQuery·p1.00:   522.191 ms/op

Iteration   3: 520.793 ±(99.9%) 15.199 ms/op
                 executeQuery·p0.00:   514.851 ms/op
                 executeQuery·p0.50:   516.424 ms/op
                 executeQuery·p0.90:   543.162 ms/op
                 executeQuery·p0.95:   571.474 ms/op
                 executeQuery·p0.99:   571.474 ms/op
                 executeQuery·p0.999:  571.474 ms/op
                 executeQuery·p0.9999: 571.474 ms/op
                 executeQuery·p1.00:   571.474 ms/op

Iteration   4: 517.717 ±(99.9%) 2.377 ms/op
                 executeQuery·p0.00:   515.899 ms/op
                 executeQuery·p0.50:   517.472 ms/op
                 executeQuery·p0.90:   521.771 ms/op
                 executeQuery·p0.95:   522.715 ms/op
                 executeQuery·p0.99:   522.715 ms/op
                 executeQuery·p0.999:  522.715 ms/op
                 executeQuery·p0.9999: 522.715 ms/op
                 executeQuery·p1.00:   522.715 ms/op

Iteration   5: 517.402 ±(99.9%) 2.593 ms/op
                 executeQuery·p0.00:   515.375 ms/op
                 executeQuery·p0.50:   516.424 ms/op
                 executeQuery·p0.90:   521.562 ms/op
                 executeQuery·p0.95:   525.337 ms/op
                 executeQuery·p0.99:   525.337 ms/op
                 executeQuery·p0.999:  525.337 ms/op
                 executeQuery·p0.9999: 525.337 ms/op
                 executeQuery·p1.00:   525.337 ms/op


# Run progress: 7.05% complete, ETA 04:13:03
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

523.165 ±(99.9%) 13.920 ms/op
# Warmup Iteration   2: 523.904 ±(99.9%) 23.540 ms/op
# Warmup Iteration   3: 517.123 ±(99.9%) 1.300 ms/op
# Warmup Iteration   4: 524.638 ±(99.9%) 25.394 ms/op
# Warmup Iteration   5: 521.806 ±(99.9%) 23.409 ms/op
Iteration   1: 516.459 ±(99.9%) 2.144 ms/op
                 executeQuery·p0.00:   514.851 ms/op
                 executeQuery·p0.50:   515.375 ms/op
                 executeQuery·p0.90:   520.303 ms/op
                 executeQuery·p0.95:   520.618 ms/op
                 executeQuery·p0.99:   520.618 ms/op
                 executeQuery·p0.999:  520.618 ms/op
                 executeQuery·p0.9999: 520.618 ms/op
                 executeQuery·p1.00:   520.618 ms/op

Iteration   2: 517.158 ±(99.9%) 3.656 ms/op
                 executeQuery·p0.00:   515.375 ms/op
                 executeQuery·p0.50:   515.899 ms/op
                 executeQuery·p0.90:   523.135 ms/op
                 executeQuery·p0.95:   528.482 ms/op
                 executeQuery·p0.99:   528.482 ms/op
                 executeQuery·p0.999:  528.482 ms/op
                 executeQuery·p0.9999: 528.482 ms/op
                 executeQuery·p1.00:   528.482 ms/op

Iteration   3: 516.843 ±(99.9%) 1.978 ms/op
                 executeQuery·p0.00:   515.375 ms/op
                 executeQuery·p0.50:   515.899 ms/op
                 executeQuery·p0.90:   520.723 ms/op
                 executeQuery·p0.95:   521.667 ms/op
                 executeQuery·p0.99:   521.667 ms/op
                 executeQuery·p0.999:  521.667 ms/op
                 executeQuery·p0.9999: 521.667 ms/op
                 executeQuery·p1.00:   521.667 ms/op

Iteration   4: 516.039 ±(99.9%) 1.364 ms/op
                 executeQuery·p0.00:   514.851 ms/op
                 executeQuery·p0.50:   515.899 ms/op
                 executeQuery·p0.90:   518.206 ms/op
                 executeQuery·p0.95:   520.094 ms/op
                 executeQuery·p0.99:   520.094 ms/op
                 executeQuery·p0.999:  520.094 ms/op
                 executeQuery·p0.9999: 520.094 ms/op
                 executeQuery·p1.00:   520.094 ms/op

Iteration   5: 516.913 ±(99.9%) 2.633 ms/op
                 executeQuery·p0.00:   514.327 ms/op
                 executeQuery·p0.50:   515.899 ms/op
                 executeQuery·p0.90:   521.247 ms/op
                 executeQuery·p0.95:   522.191 ms/op
                 executeQuery·p0.99:   522.191 ms/op
                 executeQuery·p0.999:  522.191 ms/op
                 executeQuery·p0.9999: 522.191 ms/op
                 executeQuery·p1.00:   522.191 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 230
  mean =    511.598 ±(99.9%) 2.232 ms/op

  Histogram, ms/op:
    [490.000, 495.000) = 1 
    [495.000, 500.000) = 60 
    [500.000, 505.000) = 16 
    [505.000, 510.000) = 2 
    [510.000, 515.000) = 10 
    [515.000, 520.000) = 120 
    [520.000, 525.000) = 17 
    [525.000, 530.000) = 2 
    [530.000, 535.000) = 0 
    [535.000, 540.000) = 0 
    [540.000, 545.000) = 0 
    [545.000, 550.000) = 0 
    [550.000, 555.000) = 0 
    [555.000, 560.000) = 0 
    [560.000, 565.000) = 0 
    [565.000, 570.000) = 0 
    [570.000, 575.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    494.928 ms/op
     p(50.0000) =    515.375 ms/op
     p(90.0000) =    519.517 ms/op
     p(95.0000) =    521.378 ms/op
     p(99.0000) =    558.147 ms/op
     p(99.9000) =    571.474 ms/op
     p(99.9900) =    571.474 ms/op
     p(99.9990) =    571.474 ms/op
     p(99.9999) =    571.474 ms/op
    p(100.0000) =    571.474 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256)

# Run progress: 7.69% complete, ETA 04:11:43
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

548.667 ±(99.9%) 29.432 ms/op
# Warmup Iteration   2: 541.964 ±(99.9%) 8.375 ms/op
# Warmup Iteration   3: 542.338 ±(99.9%) 9.396 ms/op
# Warmup Iteration   4: 540.691 ±(99.9%) 7.301 ms/op
# Warmup Iteration   5: 539.268 ±(99.9%) 5.931 ms/op
Iteration   1: 539.979 ±(99.9%) 7.646 ms/op
                 executeQuery·p0.00:   536.347 ms/op
                 executeQuery·p0.50:   537.395 ms/op
                 executeQuery·p0.90:   554.697 ms/op
                 executeQuery·p0.95:   560.988 ms/op
                 executeQuery·p0.99:   560.988 ms/op
                 executeQuery·p0.999:  560.988 ms/op
                 executeQuery·p0.9999: 560.988 ms/op
                 executeQuery·p1.00:   560.988 ms/op

Iteration   2: 538.219 ±(99.9%) 4.387 ms/op
                 executeQuery·p0.00:   536.871 ms/op
                 executeQuery·p0.50:   536.871 ms/op
                 executeQuery·p0.90:   545.260 ms/op
                 executeQuery·p0.95:   551.551 ms/op
                 executeQuery·p0.99:   551.551 ms/op
                 executeQuery·p0.999:  551.551 ms/op
                 executeQuery·p0.9999: 551.551 ms/op
                 executeQuery·p1.00:   551.551 ms/op

Iteration   3: 541.590 ±(99.9%) 8.906 ms/op
                 executeQuery·p0.00:   536.347 ms/op
                 executeQuery·p0.50:   537.395 ms/op
                 executeQuery·p0.90:   557.318 ms/op
                 executeQuery·p0.95:   558.891 ms/op
                 executeQuery·p0.99:   558.891 ms/op
                 executeQuery·p0.999:  558.891 ms/op
                 executeQuery·p0.9999: 558.891 ms/op
                 executeQuery·p1.00:   558.891 ms/op

Iteration   4: 540.166 ±(99.9%) 7.576 ms/op
                 executeQuery·p0.00:   536.347 ms/op
                 executeQuery·p0.50:   537.395 ms/op
                 executeQuery·p0.90:   555.745 ms/op
                 executeQuery·p0.95:   555.745 ms/op
                 executeQuery·p0.99:   555.745 ms/op
                 executeQuery·p0.999:  555.745 ms/op
                 executeQuery·p0.9999: 555.745 ms/op
                 executeQuery·p1.00:   555.745 ms/op

Iteration   5: 539.792 ±(99.9%) 5.976 ms/op
                 executeQuery·p0.00:   536.347 ms/op
                 executeQuery·p0.50:   537.395 ms/op
                 executeQuery·p0.90:   551.551 ms/op
                 executeQuery·p0.95:   553.648 ms/op
                 executeQuery·p0.99:   553.648 ms/op
                 executeQuery·p0.999:  553.648 ms/op
                 executeQuery·p0.9999: 553.648 ms/op
                 executeQuery·p1.00:   553.648 ms/op


# Run progress: 8.33% complete, ETA 04:09:38
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

547.518 ±(99.9%) 30.065 ms/op
# Warmup Iteration   2: 534.704 ±(99.9%) 5.262 ms/op
# Warmup Iteration   3: 535.069 ±(99.9%) 2.871 ms/op
# Warmup Iteration   4: 535.003 ±(99.9%) 1.497 ms/op
# Warmup Iteration   5: 535.626 ±(99.9%) 4.153 ms/op
Iteration   1: 536.576 ±(99.9%) 5.506 ms/op
                 executeQuery·p0.00:   532.677 ms/op
                 executeQuery·p0.50:   533.987 ms/op
                 executeQuery·p0.90:   547.147 ms/op
                 executeQuery·p0.95:   551.551 ms/op
                 executeQuery·p0.99:   551.551 ms/op
                 executeQuery·p0.999:  551.551 ms/op
                 executeQuery·p0.9999: 551.551 ms/op
                 executeQuery·p1.00:   551.551 ms/op

Iteration   2: 537.220 ±(99.9%) 7.044 ms/op
                 executeQuery·p0.00:   532.677 ms/op
                 executeQuery·p0.50:   534.249 ms/op
                 executeQuery·p0.90:   551.341 ms/op
                 executeQuery·p0.95:   552.600 ms/op
                 executeQuery·p0.99:   552.600 ms/op
                 executeQuery·p0.999:  552.600 ms/op
                 executeQuery·p0.9999: 552.600 ms/op
                 executeQuery·p1.00:   552.600 ms/op

Iteration   3: 535.921 ±(99.9%) 6.773 ms/op
                 executeQuery·p0.00:   532.152 ms/op
                 executeQuery·p0.50:   533.201 ms/op
                 executeQuery·p0.90:   551.761 ms/op
                 executeQuery·p0.95:   554.697 ms/op
                 executeQuery·p0.99:   554.697 ms/op
                 executeQuery·p0.999:  554.697 ms/op
                 executeQuery·p0.9999: 554.697 ms/op
                 executeQuery·p1.00:   554.697 ms/op

Iteration   4: 536.379 ±(99.9%) 5.214 ms/op
                 executeQuery·p0.00:   532.677 ms/op
                 executeQuery·p0.50:   534.249 ms/op
                 executeQuery·p0.90:   547.566 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op

Iteration   5: 535.429 ±(99.9%) 3.896 ms/op
                 executeQuery·p0.00:   532.677 ms/op
                 executeQuery·p0.50:   533.987 ms/op
                 executeQuery·p0.90:   542.953 ms/op
                 executeQuery·p0.95:   547.357 ms/op
                 executeQuery·p0.99:   547.357 ms/op
                 executeQuery·p0.999:  547.357 ms/op
                 executeQuery·p0.9999: 547.357 ms/op
                 executeQuery·p1.00:   547.357 ms/op


# Run progress: 8.97% complete, ETA 04:08:13
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

551.995 ±(99.9%) 26.810 ms/op
# Warmup Iteration   2: 541.290 ±(99.9%) 5.374 ms/op
# Warmup Iteration   3: 541.415 ±(99.9%) 2.668 ms/op
# Warmup Iteration   4: 543.162 ±(99.9%) 6.198 ms/op
# Warmup Iteration   5: 546.168 ±(99.9%) 8.876 ms/op
Iteration   1: 541.065 ±(99.9%) 4.544 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   540.017 ms/op
                 executeQuery·p0.90:   547.566 ms/op
                 executeQuery·p0.95:   555.745 ms/op
                 executeQuery·p0.99:   555.745 ms/op
                 executeQuery·p0.999:  555.745 ms/op
                 executeQuery·p0.9999: 555.745 ms/op
                 executeQuery·p1.00:   555.745 ms/op

Iteration   2: 540.226 ±(99.9%) 7.664 ms/op
                 executeQuery·p0.00:   526.385 ms/op
                 executeQuery·p0.50:   537.919 ms/op
                 executeQuery·p0.90:   555.745 ms/op
                 executeQuery·p0.95:   555.745 ms/op
                 executeQuery·p0.99:   555.745 ms/op
                 executeQuery·p0.999:  555.745 ms/op
                 executeQuery·p0.9999: 555.745 ms/op
                 executeQuery·p1.00:   555.745 ms/op

Iteration   3: 543.302 ±(99.9%) 7.554 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   556.165 ms/op
                 executeQuery·p0.95:   559.940 ms/op
                 executeQuery·p0.99:   559.940 ms/op
                 executeQuery·p0.999:  559.940 ms/op
                 executeQuery·p0.9999: 559.940 ms/op
                 executeQuery·p1.00:   559.940 ms/op

Iteration   4: 539.108 ±(99.9%) 1.331 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   541.485 ms/op
                 executeQuery·p0.95:   542.114 ms/op
                 executeQuery·p0.99:   542.114 ms/op
                 executeQuery·p0.999:  542.114 ms/op
                 executeQuery·p0.9999: 542.114 ms/op
                 executeQuery·p1.00:   542.114 ms/op

Iteration   5: 540.576 ±(99.9%) 6.211 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   537.919 ms/op
                 executeQuery·p0.90:   554.487 ms/op
                 executeQuery·p0.95:   555.745 ms/op
                 executeQuery·p0.99:   555.745 ms/op
                 executeQuery·p0.999:  555.745 ms/op
                 executeQuery·p0.9999: 555.745 ms/op
                 executeQuery·p1.00:   555.745 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 224
  mean =    538.963 ±(99.9%) 1.351 ms/op

  Histogram, ms/op:
    [520.000, 525.000) = 0 
    [525.000, 530.000) = 1 
    [530.000, 535.000) = 51 
    [535.000, 540.000) = 116 
    [540.000, 545.000) = 27 
    [545.000, 550.000) = 7 
    [550.000, 555.000) = 12 
    [555.000, 560.000) = 9 
    [560.000, 565.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    526.385 ms/op
     p(50.0000) =    537.919 ms/op
     p(90.0000) =    549.978 ms/op
     p(95.0000) =    554.435 ms/op
     p(99.0000) =    559.677 ms/op
     p(99.9000) =    560.988 ms/op
     p(99.9900) =    560.988 ms/op
     p(99.9990) =    560.988 ms/op
     p(99.9999) =    560.988 ms/op
    p(100.0000) =    560.988 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024)

# Run progress: 9.62% complete, ETA 04:06:05
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

612.368 ±(99.9%) 30.423 ms/op
# Warmup Iteration   2: 597.988 ±(99.9%) 2.340 ms/op
# Warmup Iteration   3: 600.385 ±(99.9%) 3.818 ms/op
# Warmup Iteration   4: 599.561 ±(99.9%) 3.996 ms/op
# Warmup Iteration   5: 599.785 ±(99.9%) 3.683 ms/op
Iteration   1: 601.958 ±(99.9%) 4.289 ms/op
                 executeQuery·p0.00:   595.591 ms/op
                 executeQuery·p0.50:   601.883 ms/op
                 executeQuery·p0.90:   608.174 ms/op
                 executeQuery·p0.95:   609.223 ms/op
                 executeQuery·p0.99:   609.223 ms/op
                 executeQuery·p0.999:  609.223 ms/op
                 executeQuery·p0.9999: 609.223 ms/op
                 executeQuery·p1.00:   609.223 ms/op

Iteration   2: 601.808 ±(99.9%) 3.811 ms/op
                 executeQuery·p0.00:   597.688 ms/op
                 executeQuery·p0.50:   602.931 ms/op
                 executeQuery·p0.90:   605.553 ms/op
                 executeQuery·p0.95:   606.077 ms/op
                 executeQuery·p0.99:   606.077 ms/op
                 executeQuery·p0.999:  606.077 ms/op
                 executeQuery·p0.9999: 606.077 ms/op
                 executeQuery·p1.00:   606.077 ms/op

Iteration   3: 599.186 ±(99.9%) 3.205 ms/op
                 executeQuery·p0.00:   596.640 ms/op
                 executeQuery·p0.50:   598.213 ms/op
                 executeQuery·p0.90:   603.980 ms/op
                 executeQuery·p0.95:   603.980 ms/op
                 executeQuery·p0.99:   603.980 ms/op
                 executeQuery·p0.999:  603.980 ms/op
                 executeQuery·p0.9999: 603.980 ms/op
                 executeQuery·p1.00:   603.980 ms/op

Iteration   4: 600.534 ±(99.9%) 3.921 ms/op
                 executeQuery·p0.00:   596.640 ms/op
                 executeQuery·p0.50:   599.261 ms/op
                 executeQuery·p0.90:   605.553 ms/op
                 executeQuery·p0.95:   606.077 ms/op
                 executeQuery·p0.99:   606.077 ms/op
                 executeQuery·p0.999:  606.077 ms/op
                 executeQuery·p0.9999: 606.077 ms/op
                 executeQuery·p1.00:   606.077 ms/op

Iteration   5: 599.935 ±(99.9%) 2.855 ms/op
                 executeQuery·p0.00:   596.640 ms/op
                 executeQuery·p0.50:   599.785 ms/op
                 executeQuery·p0.90:   604.504 ms/op
                 executeQuery·p0.95:   605.028 ms/op
                 executeQuery·p0.99:   605.028 ms/op
                 executeQuery·p0.999:  605.028 ms/op
                 executeQuery·p0.9999: 605.028 ms/op
                 executeQuery·p1.00:   605.028 ms/op


# Run progress: 10.26% complete, ETA 04:04:16
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

611.158 ±(99.9%) 28.477 ms/op
# Warmup Iteration   2: 604.222 ±(99.9%) 3.594 ms/op
# Warmup Iteration   3: 604.804 ±(99.9%) 4.936 ms/op
# Warmup Iteration   4: 604.729 ±(99.9%) 4.985 ms/op
# Warmup Iteration   5: 602.482 ±(99.9%) 3.956 ms/op
Iteration   1: 604.204 ±(99.9%) 3.153 ms/op
                 executeQuery·p0.00:   600.834 ms/op
                 executeQuery·p0.50:   603.980 ms/op
                 executeQuery·p0.90:   608.698 ms/op
                 executeQuery·p0.95:   609.223 ms/op
                 executeQuery·p0.99:   609.223 ms/op
                 executeQuery·p0.999:  609.223 ms/op
                 executeQuery·p0.9999: 609.223 ms/op
                 executeQuery·p1.00:   609.223 ms/op

Iteration   2: 602.182 ±(99.9%) 2.430 ms/op
                 executeQuery·p0.00:   598.737 ms/op
                 executeQuery·p0.50:   601.883 ms/op
                 executeQuery·p0.90:   606.077 ms/op
                 executeQuery·p0.95:   606.077 ms/op
                 executeQuery·p0.99:   606.077 ms/op
                 executeQuery·p0.999:  606.077 ms/op
                 executeQuery·p0.9999: 606.077 ms/op
                 executeQuery·p1.00:   606.077 ms/op

Iteration   3: 604.429 ±(99.9%) 3.369 ms/op
                 executeQuery·p0.00:   599.785 ms/op
                 executeQuery·p0.50:   604.504 ms/op
                 executeQuery·p0.90:   608.698 ms/op
                 executeQuery·p0.95:   609.223 ms/op
                 executeQuery·p0.99:   609.223 ms/op
                 executeQuery·p0.999:  609.223 ms/op
                 executeQuery·p0.9999: 609.223 ms/op
                 executeQuery·p1.00:   609.223 ms/op

Iteration   4: 603.755 ±(99.9%) 3.859 ms/op
                 executeQuery·p0.00:   598.737 ms/op
                 executeQuery·p0.50:   603.980 ms/op
                 executeQuery·p0.90:   609.747 ms/op
                 executeQuery·p0.95:   610.271 ms/op
                 executeQuery·p0.99:   610.271 ms/op
                 executeQuery·p0.999:  610.271 ms/op
                 executeQuery·p0.9999: 610.271 ms/op
                 executeQuery·p1.00:   610.271 ms/op

Iteration   5: 603.231 ±(99.9%) 4.109 ms/op
                 executeQuery·p0.00:   599.785 ms/op
                 executeQuery·p0.50:   601.883 ms/op
                 executeQuery·p0.90:   609.747 ms/op
                 executeQuery·p0.95:   613.417 ms/op
                 executeQuery·p0.99:   613.417 ms/op
                 executeQuery·p0.999:  613.417 ms/op
                 executeQuery·p0.9999: 613.417 ms/op
                 executeQuery·p1.00:   613.417 ms/op


# Run progress: 10.90% complete, ETA 04:02:32
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

608.497 ±(99.9%) 24.014 ms/op
# Warmup Iteration   2: 600.010 ±(99.9%) 3.508 ms/op
# Warmup Iteration   3: 601.134 ±(99.9%) 5.049 ms/op
# Warmup Iteration   4: 602.107 ±(99.9%) 7.794 ms/op
# Warmup Iteration   5: 599.711 ±(99.9%) 3.455 ms/op
Iteration   1: 600.684 ±(99.9%) 4.172 ms/op
                 executeQuery·p0.00:   596.640 ms/op
                 executeQuery·p0.50:   599.785 ms/op
                 executeQuery·p0.90:   606.077 ms/op
                 executeQuery·p0.95:   608.174 ms/op
                 executeQuery·p0.99:   608.174 ms/op
                 executeQuery·p0.999:  608.174 ms/op
                 executeQuery·p0.9999: 608.174 ms/op
                 executeQuery·p1.00:   608.174 ms/op

Iteration   2: 599.935 ±(99.9%) 2.892 ms/op
                 executeQuery·p0.00:   596.640 ms/op
                 executeQuery·p0.50:   599.261 ms/op
                 executeQuery·p0.90:   604.504 ms/op
                 executeQuery·p0.95:   605.028 ms/op
                 executeQuery·p0.99:   605.028 ms/op
                 executeQuery·p0.999:  605.028 ms/op
                 executeQuery·p0.9999: 605.028 ms/op
                 executeQuery·p1.00:   605.028 ms/op

Iteration   3: 599.111 ±(99.9%) 3.552 ms/op
                 executeQuery·p0.00:   594.543 ms/op
                 executeQuery·p0.50:   597.688 ms/op
                 executeQuery·p0.90:   603.980 ms/op
                 executeQuery·p0.95:   603.980 ms/op
                 executeQuery·p0.99:   603.980 ms/op
                 executeQuery·p0.999:  603.980 ms/op
                 executeQuery·p0.9999: 603.980 ms/op
                 executeQuery·p1.00:   603.980 ms/op

Iteration   4: 599.860 ±(99.9%) 3.059 ms/op
                 executeQuery·p0.00:   595.591 ms/op
                 executeQuery·p0.50:   599.261 ms/op
                 executeQuery·p0.90:   603.455 ms/op
                 executeQuery·p0.95:   603.980 ms/op
                 executeQuery·p0.99:   603.980 ms/op
                 executeQuery·p0.999:  603.980 ms/op
                 executeQuery·p0.9999: 603.980 ms/op
                 executeQuery·p1.00:   603.980 ms/op

Iteration   5: 600.684 ±(99.9%) 4.249 ms/op
                 executeQuery·p0.00:   596.640 ms/op
                 executeQuery·p0.50:   599.261 ms/op
                 executeQuery·p0.90:   607.650 ms/op
                 executeQuery·p0.95:   608.174 ms/op
                 executeQuery·p0.99:   608.174 ms/op
                 executeQuery·p0.999:  608.174 ms/op
                 executeQuery·p0.9999: 608.174 ms/op
                 executeQuery·p1.00:   608.174 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 210
  mean =    601.433 ±(99.9%) 0.811 ms/op

  Histogram, ms/op:
    [590.000, 592.500) = 0 
    [592.500, 595.000) = 1 
    [595.000, 597.500) = 19 
    [597.500, 600.000) = 67 
    [600.000, 602.500) = 39 
    [602.500, 605.000) = 44 
    [605.000, 607.500) = 30 
    [607.500, 610.000) = 8 
    [610.000, 612.500) = 1 
    [612.500, 615.000) = 1 
    [615.000, 617.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    594.543 ms/op
     p(50.0000) =    601.883 ms/op
     p(90.0000) =    606.077 ms/op
     p(95.0000) =    607.597 ms/op
     p(99.0000) =    610.156 ms/op
     p(99.9000) =    613.417 ms/op
     p(99.9900) =    613.417 ms/op
     p(99.9990) =    613.417 ms/op
     p(99.9999) =    613.417 ms/op
    p(100.0000) =    613.417 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096)

# Run progress: 11.54% complete, ETA 04:01:05
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

735.910 ±(99.9%) 63.397 ms/op
# Warmup Iteration   2: 721.682 ±(99.9%) 43.081 ms/op
# Warmup Iteration   3: 707.614 ±(99.9%) 14.418 ms/op
# Warmup Iteration   4: 708.051 ±(99.9%) 4.727 ms/op
# Warmup Iteration   5: 716.177 ±(99.9%) 37.361 ms/op
Iteration   1: 718.275 ±(99.9%) 31.783 ms/op
                 executeQuery·p0.00:   698.352 ms/op
                 executeQuery·p0.50:   704.119 ms/op
                 executeQuery·p0.90:   766.299 ms/op
                 executeQuery·p0.95:   773.849 ms/op
                 executeQuery·p0.99:   773.849 ms/op
                 executeQuery·p0.999:  773.849 ms/op
                 executeQuery·p0.9999: 773.849 ms/op
                 executeQuery·p1.00:   773.849 ms/op

Iteration   2: 707.789 ±(99.9%) 10.926 ms/op
                 executeQuery·p0.00:   698.352 ms/op
                 executeQuery·p0.50:   705.167 ms/op
                 executeQuery·p0.90:   726.558 ms/op
                 executeQuery·p0.95:   728.760 ms/op
                 executeQuery·p0.99:   728.760 ms/op
                 executeQuery·p0.999:  728.760 ms/op
                 executeQuery·p0.9999: 728.760 ms/op
                 executeQuery·p1.00:   728.760 ms/op

Iteration   3: 709.711 ±(99.9%) 9.088 ms/op
                 executeQuery·p0.00:   703.594 ms/op
                 executeQuery·p0.50:   707.265 ms/op
                 executeQuery·p0.90:   725.510 ms/op
                 executeQuery·p0.95:   727.712 ms/op
                 executeQuery·p0.99:   727.712 ms/op
                 executeQuery·p0.999:  727.712 ms/op
                 executeQuery·p0.9999: 727.712 ms/op
                 executeQuery·p1.00:   727.712 ms/op

Iteration   4: 713.206 ±(99.9%) 30.156 ms/op
                 executeQuery·p0.00:   703.594 ms/op
                 executeQuery·p0.50:   705.692 ms/op
                 executeQuery·p0.90:   765.146 ms/op
                 executeQuery·p0.95:   787.481 ms/op
                 executeQuery·p0.99:   787.481 ms/op
                 executeQuery·p0.999:  787.481 ms/op
                 executeQuery·p0.9999: 787.481 ms/op
                 executeQuery·p1.00:   787.481 ms/op

Iteration   5: 705.779 ±(99.9%) 6.100 ms/op
                 executeQuery·p0.00:   698.352 ms/op
                 executeQuery·p0.50:   705.692 ms/op
                 executeQuery·p0.90:   715.129 ms/op
                 executeQuery·p0.95:   718.275 ms/op
                 executeQuery·p0.99:   718.275 ms/op
                 executeQuery·p0.999:  718.275 ms/op
                 executeQuery·p0.9999: 718.275 ms/op
                 executeQuery·p1.00:   718.275 ms/op


# Run progress: 12.18% complete, ETA 03:59:48
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

743.440 ±(99.9%) 87.649 ms/op
# Warmup Iteration   2: 723.327 ±(99.9%) 35.182 ms/op
# Warmup Iteration   3: 730.095 ±(99.9%) 50.532 ms/op
# Warmup Iteration   4: 716.614 ±(99.9%) 40.200 ms/op
# Warmup Iteration   5: 707.614 ±(99.9%) 2.130 ms/op
Iteration   1: 708.925 ±(99.9%) 5.294 ms/op
                 executeQuery·p0.00:   703.594 ms/op
                 executeQuery·p0.50:   707.789 ms/op
                 executeQuery·p0.90:   717.016 ms/op
                 executeQuery·p0.95:   718.275 ms/op
                 executeQuery·p0.99:   718.275 ms/op
                 executeQuery·p0.999:  718.275 ms/op
                 executeQuery·p0.9999: 718.275 ms/op
                 executeQuery·p1.00:   718.275 ms/op

Iteration   2: 707.002 ±(99.9%) 2.438 ms/op
                 executeQuery·p0.00:   704.643 ms/op
                 executeQuery·p0.50:   706.740 ms/op
                 executeQuery·p0.90:   710.620 ms/op
                 executeQuery·p0.95:   710.935 ms/op
                 executeQuery·p0.99:   710.935 ms/op
                 executeQuery·p0.999:  710.935 ms/op
                 executeQuery·p0.9999: 710.935 ms/op
                 executeQuery·p1.00:   710.935 ms/op

Iteration   3: 706.740 ±(99.9%) 3.084 ms/op
                 executeQuery·p0.00:   703.594 ms/op
                 executeQuery·p0.50:   706.216 ms/op
                 executeQuery·p0.90:   711.039 ms/op
                 executeQuery·p0.95:   711.983 ms/op
                 executeQuery·p0.99:   711.983 ms/op
                 executeQuery·p0.999:  711.983 ms/op
                 executeQuery·p0.9999: 711.983 ms/op
                 executeQuery·p1.00:   711.983 ms/op

Iteration   4: 707.789 ±(99.9%) 5.523 ms/op
                 executeQuery·p0.00:   700.449 ms/op
                 executeQuery·p0.50:   707.265 ms/op
                 executeQuery·p0.90:   716.073 ms/op
                 executeQuery·p0.95:   718.275 ms/op
                 executeQuery·p0.99:   718.275 ms/op
                 executeQuery·p0.999:  718.275 ms/op
                 executeQuery·p0.9999: 718.275 ms/op
                 executeQuery·p1.00:   718.275 ms/op

Iteration   5: 756.881 ±(99.9%) 68.949 ms/op
                 executeQuery·p0.00:   705.692 ms/op
                 executeQuery·p0.50:   757.072 ms/op
                 executeQuery·p0.90:   818.309 ms/op
                 executeQuery·p0.95:   818.938 ms/op
                 executeQuery·p0.99:   818.938 ms/op
                 executeQuery·p0.999:  818.938 ms/op
                 executeQuery·p0.9999: 818.938 ms/op
                 executeQuery·p1.00:   818.938 ms/op


# Run progress: 12.82% complete, ETA 03:58:19
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

751.734 ±(99.9%) 61.216 ms/op
# Warmup Iteration   2: 722.469 ±(99.9%) 13.985 ms/op
# Warmup Iteration   3: 720.276 ±(99.9%) 15.692 ms/op
# Warmup Iteration   4: 727.140 ±(99.9%) 36.041 ms/op
# Warmup Iteration   5: 717.893 ±(99.9%) 4.166 ms/op
Iteration   1: 718.974 ±(99.9%) 5.850 ms/op
                 executeQuery·p0.00:   714.080 ms/op
                 executeQuery·p0.50:   717.226 ms/op
                 executeQuery·p0.90:   727.817 ms/op
                 executeQuery·p0.95:   728.760 ms/op
                 executeQuery·p0.99:   728.760 ms/op
                 executeQuery·p0.999:  728.760 ms/op
                 executeQuery·p0.9999: 728.760 ms/op
                 executeQuery·p1.00:   728.760 ms/op

Iteration   2: 716.964 ±(99.9%) 2.813 ms/op
                 executeQuery·p0.00:   714.080 ms/op
                 executeQuery·p0.50:   717.226 ms/op
                 executeQuery·p0.90:   720.372 ms/op
                 executeQuery·p0.95:   720.372 ms/op
                 executeQuery·p0.99:   720.372 ms/op
                 executeQuery·p0.999:  720.372 ms/op
                 executeQuery·p0.9999: 720.372 ms/op
                 executeQuery·p1.00:   720.372 ms/op

Iteration   3: 716.614 ±(99.9%) 4.187 ms/op
                 executeQuery·p0.00:   714.080 ms/op
                 executeQuery·p0.50:   715.653 ms/op
                 executeQuery·p0.90:   723.727 ms/op
                 executeQuery·p0.95:   725.615 ms/op
                 executeQuery·p0.99:   725.615 ms/op
                 executeQuery·p0.999:  725.615 ms/op
                 executeQuery·p0.9999: 725.615 ms/op
                 executeQuery·p1.00:   725.615 ms/op

Iteration   4: 715.129 ±(99.9%) 5.523 ms/op
                 executeQuery·p0.00:   703.594 ms/op
                 executeQuery·p0.50:   715.129 ms/op
                 executeQuery·p0.90:   720.057 ms/op
                 executeQuery·p0.95:   720.372 ms/op
                 executeQuery·p0.99:   720.372 ms/op
                 executeQuery·p0.999:  720.372 ms/op
                 executeQuery·p0.9999: 720.372 ms/op
                 executeQuery·p1.00:   720.372 ms/op

Iteration   5: 715.915 ±(99.9%) 4.174 ms/op
                 executeQuery·p0.00:   710.935 ms/op
                 executeQuery·p0.50:   716.177 ms/op
                 executeQuery·p0.90:   721.211 ms/op
                 executeQuery·p0.95:   722.469 ms/op
                 executeQuery·p0.99:   722.469 ms/op
                 executeQuery·p0.999:  722.469 ms/op
                 executeQuery·p0.9999: 722.469 ms/op
                 executeQuery·p1.00:   722.469 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 179
  mean =    714.813 ±(99.9%) 4.776 ms/op

  Histogram, ms/op:
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 3 
    [700.000, 725.000) = 160 
    [725.000, 750.000) = 8 
    [750.000, 775.000) = 3 
    [775.000, 800.000) = 1 
    [800.000, 825.000) = 4 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    698.352 ms/op
     p(50.0000) =    708.837 ms/op
     p(90.0000) =    722.469 ms/op
     p(95.0000) =    748.683 ms/op
     p(99.0000) =    816.421 ms/op
     p(99.9000) =    818.938 ms/op
     p(99.9900) =    818.938 ms/op
     p(99.9990) =    818.938 ms/op
     p(99.9999) =    818.938 ms/op
    p(100.0000) =    818.938 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384)

# Run progress: 13.46% complete, ETA 03:56:47
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1140.851 ±(99.9%) 102.609 ms/op
# Warmup Iteration   2: 1110.180 ±(99.9%) 9.807 ms/op
# Warmup Iteration   3: 1062.470 ±(99.9%) 55.184 ms/op
# Warmup Iteration   4: 1073.509 ±(99.9%) 47.631 ms/op
# Warmup Iteration   5: 1065.586 ±(99.9%) 32.164 ms/op
Iteration   1: 1076.888 ±(99.9%) 42.573 ms/op
                 executeQuery·p0.00:   1055.916 ms/op
                 executeQuery·p0.50:   1064.305 ms/op
                 executeQuery·p0.90:   1128.268 ms/op
                 executeQuery·p0.95:   1128.268 ms/op
                 executeQuery·p0.99:   1128.268 ms/op
                 executeQuery·p0.999:  1128.268 ms/op
                 executeQuery·p0.9999: 1128.268 ms/op
                 executeQuery·p1.00:   1128.268 ms/op

Iteration   2: 1061.974 ±(99.9%) 23.670 ms/op
                 executeQuery·p0.00:   1040.187 ms/op
                 executeQuery·p0.50:   1063.256 ms/op
                 executeQuery·p0.90:   1084.228 ms/op
                 executeQuery·p0.95:   1084.228 ms/op
                 executeQuery·p0.99:   1084.228 ms/op
                 executeQuery·p0.999:  1084.228 ms/op
                 executeQuery·p0.9999: 1084.228 ms/op
                 executeQuery·p1.00:   1084.228 ms/op

Iteration   3: 1076.072 ±(99.9%) 49.899 ms/op
                 executeQuery·p0.00:   1052.770 ms/op
                 executeQuery·p0.50:   1062.207 ms/op
                 executeQuery·p0.90:   1134.559 ms/op
                 executeQuery·p0.95:   1134.559 ms/op
                 executeQuery·p0.99:   1134.559 ms/op
                 executeQuery·p0.999:  1134.559 ms/op
                 executeQuery·p0.9999: 1134.559 ms/op
                 executeQuery·p1.00:   1134.559 ms/op

Iteration   4: 1063.023 ±(99.9%) 50.294 ms/op
                 executeQuery·p0.00:   1038.090 ms/op
                 executeQuery·p0.50:   1050.673 ms/op
                 executeQuery·p0.90:   1128.268 ms/op
                 executeQuery·p0.95:   1128.268 ms/op
                 executeQuery·p0.99:   1128.268 ms/op
                 executeQuery·p0.999:  1128.268 ms/op
                 executeQuery·p0.9999: 1128.268 ms/op
                 executeQuery·p1.00:   1128.268 ms/op

Iteration   5: 1079.451 ±(99.9%) 49.972 ms/op
                 executeQuery·p0.00:   1052.770 ms/op
                 executeQuery·p0.50:   1065.353 ms/op
                 executeQuery·p0.90:   1138.754 ms/op
                 executeQuery·p0.95:   1138.754 ms/op
                 executeQuery·p0.99:   1138.754 ms/op
                 executeQuery·p0.999:  1138.754 ms/op
                 executeQuery·p0.9999: 1138.754 ms/op
                 executeQuery·p1.00:   1138.754 ms/op


# Run progress: 14.10% complete, ETA 03:55:34
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1133.773 ±(99.9%) 111.181 ms/op
# Warmup Iteration   2: 1103.626 ±(99.9%) 14.497 ms/op
# Warmup Iteration   3: 1102.578 ±(99.9%) 4.671 ms/op
# Warmup Iteration   4: 1105.986 ±(99.9%) 20.439 ms/op
# Warmup Iteration   5: 1101.267 ±(99.9%) 4.998 ms/op
Iteration   1: 1114.112 ±(99.9%) 34.343 ms/op
                 executeQuery·p0.00:   1101.005 ms/op
                 executeQuery·p0.50:   1103.102 ms/op
                 executeQuery·p0.90:   1142.948 ms/op
                 executeQuery·p0.95:   1142.948 ms/op
                 executeQuery·p0.99:   1142.948 ms/op
                 executeQuery·p0.999:  1142.948 ms/op
                 executeQuery·p0.9999: 1142.948 ms/op
                 executeQuery·p1.00:   1142.948 ms/op

Iteration   2: 1101.529 ±(99.9%) 4.671 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1101.005 ms/op
                 executeQuery·p0.90:   1105.199 ms/op
                 executeQuery·p0.95:   1105.199 ms/op
                 executeQuery·p0.99:   1105.199 ms/op
                 executeQuery·p0.999:  1105.199 ms/op
                 executeQuery·p0.9999: 1105.199 ms/op
                 executeQuery·p1.00:   1105.199 ms/op

Iteration   3: 1109.918 ±(99.9%) 19.614 ms/op
                 executeQuery·p0.00:   1101.005 ms/op
                 executeQuery·p0.50:   1104.151 ms/op
                 executeQuery·p0.90:   1128.268 ms/op
                 executeQuery·p0.95:   1128.268 ms/op
                 executeQuery·p0.99:   1128.268 ms/op
                 executeQuery·p0.999:  1128.268 ms/op
                 executeQuery·p0.9999: 1128.268 ms/op
                 executeQuery·p1.00:   1128.268 ms/op

Iteration   4: 1111.753 ±(99.9%) 26.375 ms/op
                 executeQuery·p0.00:   1101.005 ms/op
                 executeQuery·p0.50:   1104.151 ms/op
                 executeQuery·p0.90:   1134.559 ms/op
                 executeQuery·p0.95:   1134.559 ms/op
                 executeQuery·p0.99:   1134.559 ms/op
                 executeQuery·p0.999:  1134.559 ms/op
                 executeQuery·p0.9999: 1134.559 ms/op
                 executeQuery·p1.00:   1134.559 ms/op

Iteration   5: 1103.888 ±(99.9%) 6.756 ms/op
                 executeQuery·p0.00:   1098.908 ms/op
                 executeQuery·p0.50:   1103.102 ms/op
                 executeQuery·p0.90:   1111.491 ms/op
                 executeQuery·p0.95:   1111.491 ms/op
                 executeQuery·p0.99:   1111.491 ms/op
                 executeQuery·p0.999:  1111.491 ms/op
                 executeQuery·p0.9999: 1111.491 ms/op
                 executeQuery·p1.00:   1111.491 ms/op


# Run progress: 14.74% complete, ETA 03:53:39
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1099.694 ±(99.9%) 160.541 ms/op
# Warmup Iteration   2: 1046.013 ±(99.9%) 18.525 ms/op
# Warmup Iteration   3: 1046.595 ±(99.9%) 28.879 ms/op
# Warmup Iteration   4: 1034.245 ±(99.9%) 3.940 ms/op
# Warmup Iteration   5: 1049.508 ±(99.9%) 28.227 ms/op
Iteration   1: 1065.819 ±(99.9%) 6.943 ms/op
                 executeQuery·p0.00:   1060.110 ms/op
                 executeQuery·p0.50:   1064.305 ms/op
                 executeQuery·p0.90:   1071.645 ms/op
                 executeQuery·p0.95:   1071.645 ms/op
                 executeQuery·p0.99:   1071.645 ms/op
                 executeQuery·p0.999:  1071.645 ms/op
                 executeQuery·p0.9999: 1071.645 ms/op
                 executeQuery·p1.00:   1071.645 ms/op

Iteration   2: 1065.353 ±(99.9%) 14.690 ms/op
                 executeQuery·p0.00:   1047.527 ms/op
                 executeQuery·p0.50:   1067.450 ms/op
                 executeQuery·p0.90:   1073.742 ms/op
                 executeQuery·p0.95:   1073.742 ms/op
                 executeQuery·p0.99:   1073.742 ms/op
                 executeQuery·p0.999:  1073.742 ms/op
                 executeQuery·p0.9999: 1073.742 ms/op
                 executeQuery·p1.00:   1073.742 ms/op

Iteration   3: 1039.139 ±(99.9%) 14.926 ms/op
                 executeQuery·p0.00:   1026.556 ms/op
                 executeQuery·p0.50:   1037.042 ms/op
                 executeQuery·p0.90:   1058.013 ms/op
                 executeQuery·p0.95:   1058.013 ms/op
                 executeQuery·p0.99:   1058.013 ms/op
                 executeQuery·p0.999:  1058.013 ms/op
                 executeQuery·p0.9999: 1058.013 ms/op
                 executeQuery·p1.00:   1058.013 ms/op

Iteration   4: 1036.226 ±(99.9%) 6.461 ms/op
                 executeQuery·p0.00:   1032.847 ms/op
                 executeQuery·p0.50:   1034.945 ms/op
                 executeQuery·p0.90:   1045.430 ms/op
                 executeQuery·p0.95:   1045.430 ms/op
                 executeQuery·p0.99:   1045.430 ms/op
                 executeQuery·p0.999:  1045.430 ms/op
                 executeQuery·p0.9999: 1045.430 ms/op
                 executeQuery·p1.00:   1045.430 ms/op

Iteration   5: 1029.935 ±(99.9%) 38.310 ms/op
                 executeQuery·p0.00:   969.933 ms/op
                 executeQuery·p0.50:   1035.993 ms/op
                 executeQuery·p0.90:   1043.333 ms/op
                 executeQuery·p0.95:   1043.333 ms/op
                 executeQuery·p0.99:   1043.333 ms/op
                 executeQuery·p0.999:  1043.333 ms/op
                 executeQuery·p0.9999: 1043.333 ms/op
                 executeQuery·p1.00:   1043.333 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 130
  mean =   1074.419 ±(99.9%) 9.419 ms/op

  Histogram, ms/op:
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 1 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 32 
    [1050.000, 1075.000) = 43 
    [1075.000, 1100.000) = 8 
    [1100.000, 1125.000) = 37 
    [1125.000, 1150.000) = 9 
    [1150.000, 1175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    969.933 ms/op
     p(50.0000) =   1065.878 ms/op
     p(90.0000) =   1113.378 ms/op
     p(95.0000) =   1130.155 ms/op
     p(99.0000) =   1141.648 ms/op
     p(99.9000) =   1142.948 ms/op
     p(99.9900) =   1142.948 ms/op
     p(99.9990) =   1142.948 ms/op
     p(99.9999) =   1142.948 ms/op
    p(100.0000) =   1142.948 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536)

# Run progress: 15.38% complete, ETA 03:52:05
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1234.436 ±(99.9%) 49.895 ms/op
# Warmup Iteration   2: 1230.242 ±(99.9%) 5.223 ms/op
# Warmup Iteration   3: 1276.641 ±(99.9%) 90.698 ms/op
# Warmup Iteration   4: 1259.864 ±(99.9%) 78.596 ms/op
# Warmup Iteration   5: 1242.300 ±(99.9%) 77.749 ms/op
Iteration   1: 1219.756 ±(99.9%) 10.703 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1218.445 ms/op
                 executeQuery·p0.90:   1228.931 ms/op
                 executeQuery·p0.95:   1228.931 ms/op
                 executeQuery·p0.99:   1228.931 ms/op
                 executeQuery·p0.999:  1228.931 ms/op
                 executeQuery·p0.9999: 1228.931 ms/op
                 executeQuery·p1.00:   1228.931 ms/op

Iteration   2: 1218.707 ±(99.9%) 9.203 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1216.348 ms/op
                 executeQuery·p0.90:   1228.931 ms/op
                 executeQuery·p0.95:   1228.931 ms/op
                 executeQuery·p0.99:   1228.931 ms/op
                 executeQuery·p0.999:  1228.931 ms/op
                 executeQuery·p0.9999: 1228.931 ms/op
                 executeQuery·p1.00:   1228.931 ms/op

Iteration   3: 1241.776 ±(99.9%) 59.374 ms/op
                 executeQuery·p0.00:   1216.348 ms/op
                 executeQuery·p0.50:   1229.980 ms/op
                 executeQuery·p0.90:   1300.234 ms/op
                 executeQuery·p0.95:   1300.234 ms/op
                 executeQuery·p0.99:   1300.234 ms/op
                 executeQuery·p0.999:  1300.234 ms/op
                 executeQuery·p0.9999: 1300.234 ms/op
                 executeQuery·p1.00:   1300.234 ms/op

Iteration   4: 1231.815 ±(99.9%) 8.001 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1231.028 ms/op
                 executeQuery·p0.90:   1241.514 ms/op
                 executeQuery·p0.95:   1241.514 ms/op
                 executeQuery·p0.99:   1241.514 ms/op
                 executeQuery·p0.999:  1241.514 ms/op
                 executeQuery·p0.9999: 1241.514 ms/op
                 executeQuery·p1.00:   1241.514 ms/op

Iteration   5: 1230.504 ±(99.9%) 3.554 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1229.980 ms/op
                 executeQuery·p0.90:   1233.125 ms/op
                 executeQuery·p0.95:   1233.125 ms/op
                 executeQuery·p0.99:   1233.125 ms/op
                 executeQuery·p0.999:  1233.125 ms/op
                 executeQuery·p0.9999: 1233.125 ms/op
                 executeQuery·p1.00:   1233.125 ms/op


# Run progress: 16.03% complete, ETA 03:50:53
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1298.736 ±(99.9%) 87.506 ms/op
# Warmup Iteration   2: 1323.303 ±(99.9%) 35.764 ms/op
# Warmup Iteration   3: 1314.914 ±(99.9%) 4.723 ms/op
# Warmup Iteration   4: 1315.214 ±(99.9%) 1.785 ms/op
# Warmup Iteration   5: 1322.105 ±(99.9%) 41.073 ms/op
Iteration   1: 1316.113 ±(99.9%) 6.010 ms/op
                 executeQuery·p0.00:   1312.817 ms/op
                 executeQuery·p0.50:   1314.914 ms/op
                 executeQuery·p0.90:   1321.206 ms/op
                 executeQuery·p0.95:   1321.206 ms/op
                 executeQuery·p0.99:   1321.206 ms/op
                 executeQuery·p0.999:  1321.206 ms/op
                 executeQuery·p0.9999: 1321.206 ms/op
                 executeQuery·p1.00:   1321.206 ms/op

Iteration   2: 1288.850 ±(99.9%) 44.963 ms/op
                 executeQuery·p0.00:   1277.166 ms/op
                 executeQuery·p0.50:   1277.166 ms/op
                 executeQuery·p0.90:   1319.109 ms/op
                 executeQuery·p0.95:   1319.109 ms/op
                 executeQuery·p0.99:   1319.109 ms/op
                 executeQuery·p0.999:  1319.109 ms/op
                 executeQuery·p0.9999: 1319.109 ms/op
                 executeQuery·p1.00:   1319.109 ms/op

Iteration   3: 1278.476 ±(99.9%) 4.253 ms/op
                 executeQuery·p0.00:   1275.068 ms/op
                 executeQuery·p0.50:   1278.214 ms/op
                 executeQuery·p0.90:   1281.360 ms/op
                 executeQuery·p0.95:   1281.360 ms/op
                 executeQuery·p0.99:   1281.360 ms/op
                 executeQuery·p0.999:  1281.360 ms/op
                 executeQuery·p0.9999: 1281.360 ms/op
                 executeQuery·p1.00:   1281.360 ms/op

Iteration   4: 1250.165 ±(99.9%) 46.585 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1239.417 ms/op
                 executeQuery·p0.90:   1281.360 ms/op
                 executeQuery·p0.95:   1281.360 ms/op
                 executeQuery·p0.99:   1281.360 ms/op
                 executeQuery·p0.999:  1281.360 ms/op
                 executeQuery·p0.9999: 1281.360 ms/op
                 executeQuery·p1.00:   1281.360 ms/op

Iteration   5: 1232.863 ±(99.9%) 8.144 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1233.125 ms/op
                 executeQuery·p0.90:   1241.514 ms/op
                 executeQuery·p0.95:   1241.514 ms/op
                 executeQuery·p0.99:   1241.514 ms/op
                 executeQuery·p0.999:  1241.514 ms/op
                 executeQuery·p0.9999: 1241.514 ms/op
                 executeQuery·p1.00:   1241.514 ms/op


# Run progress: 16.67% complete, ETA 03:49:11
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1303.530 ±(99.9%) 47.221 ms/op
# Warmup Iteration   2: 1316.712 ±(99.9%) 9.219 ms/op
# Warmup Iteration   3: 1318.210 ±(99.9%) 18.059 ms/op
# Warmup Iteration   4: 1314.315 ±(99.9%) 5.256 ms/op
# Warmup Iteration   5: 1315.813 ±(99.9%) 7.141 ms/op
Iteration   1: 1320.607 ±(99.9%) 36.659 ms/op
                 executeQuery·p0.00:   1312.817 ms/op
                 executeQuery·p0.50:   1312.817 ms/op
                 executeQuery·p0.90:   1356.857 ms/op
                 executeQuery·p0.95:   1356.857 ms/op
                 executeQuery·p0.99:   1356.857 ms/op
                 executeQuery·p0.999:  1356.857 ms/op
                 executeQuery·p0.9999: 1356.857 ms/op
                 executeQuery·p1.00:   1356.857 ms/op

Iteration   2: 1317.611 ±(99.9%) 14.613 ms/op
                 executeQuery·p0.00:   1312.817 ms/op
                 executeQuery·p0.50:   1314.914 ms/op
                 executeQuery·p0.90:   1331.692 ms/op
                 executeQuery·p0.95:   1331.692 ms/op
                 executeQuery·p0.99:   1331.692 ms/op
                 executeQuery·p0.999:  1331.692 ms/op
                 executeQuery·p0.9999: 1331.692 ms/op
                 executeQuery·p1.00:   1331.692 ms/op

Iteration   3: 1314.615 ±(99.9%) 5.049 ms/op
                 executeQuery·p0.00:   1312.817 ms/op
                 executeQuery·p0.50:   1314.914 ms/op
                 executeQuery·p0.90:   1319.109 ms/op
                 executeQuery·p0.95:   1319.109 ms/op
                 executeQuery·p0.99:   1319.109 ms/op
                 executeQuery·p0.999:  1319.109 ms/op
                 executeQuery·p0.9999: 1319.109 ms/op
                 executeQuery·p1.00:   1319.109 ms/op

Iteration   4: 1298.437 ±(99.9%) 62.150 ms/op
                 executeQuery·p0.00:   1279.263 ms/op
                 executeQuery·p0.50:   1285.554 ms/op
                 executeQuery·p0.90:   1354.760 ms/op
                 executeQuery·p0.95:   1354.760 ms/op
                 executeQuery·p0.99:   1354.760 ms/op
                 executeQuery·p0.999:  1354.760 ms/op
                 executeQuery·p0.9999: 1354.760 ms/op
                 executeQuery·p1.00:   1354.760 ms/op

Iteration   5: 1280.836 ±(99.9%) 4.671 ms/op
                 executeQuery·p0.00:   1279.263 ms/op
                 executeQuery·p0.50:   1279.263 ms/op
                 executeQuery·p0.90:   1285.554 ms/op
                 executeQuery·p0.95:   1285.554 ms/op
                 executeQuery·p0.99:   1285.554 ms/op
                 executeQuery·p0.999:  1285.554 ms/op
                 executeQuery·p0.9999: 1285.554 ms/op
                 executeQuery·p1.00:   1285.554 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 114
  mean =   1267.305 ±(99.9%) 12.556 ms/op

  Histogram, ms/op:
    [1200.000, 1212.500) = 0 
    [1212.500, 1225.000) = 17 
    [1225.000, 1237.500) = 29 
    [1237.500, 1250.000) = 5 
    [1250.000, 1262.500) = 0 
    [1262.500, 1275.000) = 1 
    [1275.000, 1287.500) = 28 
    [1287.500, 1300.000) = 1 
    [1300.000, 1312.500) = 1 
    [1312.500, 1325.000) = 29 
    [1325.000, 1337.500) = 1 
    [1337.500, 1350.000) = 0 
    [1350.000, 1362.500) = 2 
    [1362.500, 1375.000) = 0 
    [1375.000, 1387.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1214.251 ms/op
     p(50.0000) =   1277.166 ms/op
     p(90.0000) =   1315.963 ms/op
     p(95.0000) =   1319.633 ms/op
     p(99.0000) =   1356.543 ms/op
     p(99.9000) =   1356.857 ms/op
     p(99.9900) =   1356.857 ms/op
     p(99.9990) =   1356.857 ms/op
     p(99.9999) =   1356.857 ms/op
    p(100.0000) =   1356.857 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 17.31% complete, ETA 03:47:20
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

2677.015 ±(99.9%) 275.849 ms/op
# Warmup Iteration   2: 2542.797 ±(99.9%) 113.652 ms/op
# Warmup Iteration   3: 2561.671 ±(99.9%) 174.778 ms/op
# Warmup Iteration   4: 2556.428 ±(99.9%) 179.102 ms/op
# Warmup Iteration   5: 2564.817 ±(99.9%) 284.695 ms/op
Iteration   1: 2582.643 ±(99.9%) 230.380 ms/op
                 executeQuery·p0.00:   2533.360 ms/op
                 executeQuery·p0.50:   2589.983 ms/op
                 executeQuery·p0.90:   2617.246 ms/op
                 executeQuery·p0.95:   2617.246 ms/op
                 executeQuery·p0.99:   2617.246 ms/op
                 executeQuery·p0.999:  2617.246 ms/op
                 executeQuery·p0.9999: 2617.246 ms/op
                 executeQuery·p1.00:   2617.246 ms/op

Iteration   2: 2552.234 ±(99.9%) 209.359 ms/op
                 executeQuery·p0.00:   2516.582 ms/op
                 executeQuery·p0.50:   2554.331 ms/op
                 executeQuery·p0.90:   2583.691 ms/op
                 executeQuery·p0.95:   2583.691 ms/op
                 executeQuery·p0.99:   2583.691 ms/op
                 executeQuery·p0.999:  2583.691 ms/op
                 executeQuery·p0.9999: 2583.691 ms/op
                 executeQuery·p1.00:   2583.691 ms/op

Iteration   3: 2554.331 ±(99.9%) 237.317 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2560.623 ms/op
                 executeQuery·p0.90:   2592.080 ms/op
                 executeQuery·p0.95:   2592.080 ms/op
                 executeQuery·p0.99:   2592.080 ms/op
                 executeQuery·p0.999:  2592.080 ms/op
                 executeQuery·p0.9999: 2592.080 ms/op
                 executeQuery·p1.00:   2592.080 ms/op

Iteration   4: 2599.420 ±(99.9%) 319.450 ms/op
                 executeQuery·p0.00:   2545.943 ms/op
                 executeQuery·p0.50:   2596.274 ms/op
                 executeQuery·p0.90:   2659.189 ms/op
                 executeQuery·p0.95:   2659.189 ms/op
                 executeQuery·p0.99:   2659.189 ms/op
                 executeQuery·p0.999:  2659.189 ms/op
                 executeQuery·p0.9999: 2659.189 ms/op
                 executeQuery·p1.00:   2659.189 ms/op

Iteration   5: 2541.748 ±(99.9%) 178.417 ms/op
                 executeQuery·p0.00:   2512.388 ms/op
                 executeQuery·p0.50:   2541.748 ms/op
                 executeQuery·p0.90:   2571.108 ms/op
                 executeQuery·p0.95:   2571.108 ms/op
                 executeQuery·p0.99:   2571.108 ms/op
                 executeQuery·p0.999:  2571.108 ms/op
                 executeQuery·p0.9999: 2571.108 ms/op
                 executeQuery·p1.00:   2571.108 ms/op


# Run progress: 17.95% complete, ETA 03:45:55
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

2535.457 ±(99.9%) 308.632 ms/op
# Warmup Iteration   2: 2544.894 ±(99.9%) 140.617 ms/op
# Warmup Iteration   3: 2549.088 ±(99.9%) 433.304 ms/op
# Warmup Iteration   4: 2514.485 ±(99.9%) 490.117 ms/op
# Warmup Iteration   5: 2527.068 ±(99.9%) 382.343 ms/op
Iteration   1: 2543.845 ±(99.9%) 408.356 ms/op
                 executeQuery·p0.00:   2453.668 ms/op
                 executeQuery·p0.50:   2560.623 ms/op
                 executeQuery·p0.90:   2600.468 ms/op
                 executeQuery·p0.95:   2600.468 ms/op
                 executeQuery·p0.99:   2600.468 ms/op
                 executeQuery·p0.999:  2600.468 ms/op
                 executeQuery·p0.9999: 2600.468 ms/op
                 executeQuery·p1.00:   2600.468 ms/op

Iteration   2: 2574.254 ±(99.9%) 374.497 ms/op
                 executeQuery·p0.00:   2499.805 ms/op
                 executeQuery·p0.50:   2583.691 ms/op
                 executeQuery·p0.90:   2629.829 ms/op
                 executeQuery·p0.95:   2629.829 ms/op
                 executeQuery·p0.99:   2629.829 ms/op
                 executeQuery·p0.999:  2629.829 ms/op
                 executeQuery·p0.9999: 2629.829 ms/op
                 executeQuery·p1.00:   2629.829 ms/op

Iteration   3: 2561.671 ±(99.9%) 451.025 ms/op
                 executeQuery·p0.00:   2466.251 ms/op
                 executeQuery·p0.50:   2573.206 ms/op
                 executeQuery·p0.90:   2634.023 ms/op
                 executeQuery·p0.95:   2634.023 ms/op
                 executeQuery·p0.99:   2634.023 ms/op
                 executeQuery·p0.999:  2634.023 ms/op
                 executeQuery·p0.9999: 2634.023 ms/op
                 executeQuery·p1.00:   2634.023 ms/op

Iteration   4: 2562.720 ±(99.9%) 437.032 ms/op
                 executeQuery·p0.00:   2483.028 ms/op
                 executeQuery·p0.50:   2566.914 ms/op
                 executeQuery·p0.90:   2634.023 ms/op
                 executeQuery·p0.95:   2634.023 ms/op
                 executeQuery·p0.99:   2634.023 ms/op
                 executeQuery·p0.999:  2634.023 ms/op
                 executeQuery·p0.9999: 2634.023 ms/op
                 executeQuery·p1.00:   2634.023 ms/op

Iteration   5: 2536.505 ±(99.9%) 272.275 ms/op
                 executeQuery·p0.00:   2483.028 ms/op
                 executeQuery·p0.50:   2539.651 ms/op
                 executeQuery·p0.90:   2583.691 ms/op
                 executeQuery·p0.95:   2583.691 ms/op
                 executeQuery·p0.99:   2583.691 ms/op
                 executeQuery·p0.999:  2583.691 ms/op
                 executeQuery·p0.9999: 2583.691 ms/op
                 executeQuery·p1.00:   2583.691 ms/op


# Run progress: 18.59% complete, ETA 03:44:23
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    for (int aviv = 0; aviv < aggregation_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        agg_0_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_0);
        agg_1_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_1);
        agg_2_sum_map.addToKeyOrPutIfNotExist(ordinal_value, group_key_pre_hash, ordinal_value_2);
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

2610.954 ±(99.9%) 596.073 ms/op
# Warmup Iteration   2: 2492.465 ±(99.9%) 306.941 ms/op
# Warmup Iteration   3: 2493.514 ±(99.9%) 602.203 ms/op
# Warmup Iteration   4: 2478.834 ±(99.9%) 535.709 ms/op
# Warmup Iteration   5: 2516.582 ±(99.9%) 478.232 ms/op
Iteration   1: 2471.494 ±(99.9%) 231.441 ms/op
                 executeQuery·p0.00:   2441.085 ms/op
                 executeQuery·p0.50:   2462.056 ms/op
                 executeQuery·p0.90:   2520.777 ms/op
                 executeQuery·p0.95:   2520.777 ms/op
                 executeQuery·p0.99:   2520.777 ms/op
                 executeQuery·p0.999:  2520.777 ms/op
                 executeQuery·p0.9999: 2520.777 ms/op
                 executeQuery·p1.00:   2520.777 ms/op

Iteration   2: 2443.182 ±(99.9%) 462.881 ms/op
                 executeQuery·p0.00:   2399.142 ms/op
                 executeQuery·p0.50:   2411.725 ms/op
                 executeQuery·p0.90:   2550.137 ms/op
                 executeQuery·p0.95:   2550.137 ms/op
                 executeQuery·p0.99:   2550.137 ms/op
                 executeQuery·p0.999:  2550.137 ms/op
                 executeQuery·p0.9999: 2550.137 ms/op
                 executeQuery·p1.00:   2550.137 ms/op

Iteration   3: 2527.068 ±(99.9%) 373.269 ms/op
                 executeQuery·p0.00:   2478.834 ms/op
                 executeQuery·p0.50:   2514.485 ms/op
                 executeQuery·p0.90:   2600.468 ms/op
                 executeQuery·p0.95:   2600.468 ms/op
                 executeQuery·p0.99:   2600.468 ms/op
                 executeQuery·p0.999:  2600.468 ms/op
                 executeQuery·p0.9999: 2600.468 ms/op
                 executeQuery·p1.00:   2600.468 ms/op

Iteration   4: 2524.971 ±(99.9%) 398.953 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2514.485 ms/op
                 executeQuery·p0.90:   2600.468 ms/op
                 executeQuery·p0.95:   2600.468 ms/op
                 executeQuery·p0.99:   2600.468 ms/op
                 executeQuery·p0.999:  2600.468 ms/op
                 executeQuery·p0.9999: 2600.468 ms/op
                 executeQuery·p1.00:   2600.468 ms/op

Iteration   5: 2524.971 ±(99.9%) 387.748 ms/op
                 executeQuery·p0.00:   2457.862 ms/op
                 executeQuery·p0.50:   2520.777 ms/op
                 executeQuery·p0.90:   2600.468 ms/op
                 executeQuery·p0.95:   2600.468 ms/op
                 executeQuery·p0.99:   2600.468 ms/op
                 executeQuery·p0.999:  2600.468 ms/op
                 executeQuery·p0.9999: 2600.468 ms/op
                 executeQuery·p1.00:   2600.468 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery":
  N = 60
  mean =   2540.071 ±(99.9%) 27.187 ms/op

  Histogram, ms/op:
    [2300.000, 2325.000) = 0 
    [2325.000, 2350.000) = 0 
    [2350.000, 2375.000) = 0 
    [2375.000, 2400.000) = 1 
    [2400.000, 2425.000) = 2 
    [2425.000, 2450.000) = 2 
    [2450.000, 2475.000) = 5 
    [2475.000, 2500.000) = 6 
    [2500.000, 2525.000) = 6 
    [2525.000, 2550.000) = 7 
    [2550.000, 2575.000) = 11 
    [2575.000, 2600.000) = 8 
    [2600.000, 2625.000) = 8 
    [2625.000, 2650.000) = 3 
    [2650.000, 2675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2399.142 ms/op
     p(50.0000) =   2550.137 ms/op
     p(90.0000) =   2616.407 ms/op
     p(95.0000) =   2633.813 ms/op
     p(99.0000) =   2659.189 ms/op
     p(99.9000) =   2659.189 ms/op
     p(99.9900) =   2659.189 ms/op
     p(99.9990) =   2659.189 ms/op
     p(99.9999) =   2659.189 ms/op
    p(100.0000) =   2659.189 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1)

# Run progress: 19.23% complete, ETA 03:42:49
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

646.245 ±(99.9%) 84.537 ms/op
# Warmup Iteration   2: 608.773 ±(99.9%) 16.016 ms/op
# Warmup Iteration   3: 619.484 ±(99.9%) 6.613 ms/op
# Warmup Iteration   4: 621.431 ±(99.9%) 3.729 ms/op
# Warmup Iteration   5: 616.787 ±(99.9%) 9.106 ms/op
Iteration   1: 613.791 ±(99.9%) 11.083 ms/op
                 executeQuery·p0.00:   587.203 ms/op
                 executeQuery·p0.50:   617.611 ms/op
                 executeQuery·p0.90:   620.757 ms/op
                 executeQuery·p0.95:   620.757 ms/op
                 executeQuery·p0.99:   620.757 ms/op
                 executeQuery·p0.999:  620.757 ms/op
                 executeQuery·p0.9999: 620.757 ms/op
                 executeQuery·p1.00:   620.757 ms/op

Iteration   2: 613.941 ±(99.9%) 9.288 ms/op
                 executeQuery·p0.00:   591.397 ms/op
                 executeQuery·p0.50:   616.563 ms/op
                 executeQuery·p0.90:   618.660 ms/op
                 executeQuery·p0.95:   618.660 ms/op
                 executeQuery·p0.99:   618.660 ms/op
                 executeQuery·p0.999:  618.660 ms/op
                 executeQuery·p0.9999: 618.660 ms/op
                 executeQuery·p1.00:   618.660 ms/op

Iteration   3: 613.567 ±(99.9%) 9.347 ms/op
                 executeQuery·p0.00:   598.737 ms/op
                 executeQuery·p0.50:   617.611 ms/op
                 executeQuery·p0.90:   621.281 ms/op
                 executeQuery·p0.95:   622.854 ms/op
                 executeQuery·p0.99:   622.854 ms/op
                 executeQuery·p0.999:  622.854 ms/op
                 executeQuery·p0.9999: 622.854 ms/op
                 executeQuery·p1.00:   622.854 ms/op

Iteration   4: 619.484 ±(99.9%) 3.415 ms/op
                 executeQuery·p0.00:   612.368 ms/op
                 executeQuery·p0.50:   619.708 ms/op
                 executeQuery·p0.90:   624.427 ms/op
                 executeQuery·p0.95:   624.951 ms/op
                 executeQuery·p0.99:   624.951 ms/op
                 executeQuery·p0.999:  624.951 ms/op
                 executeQuery·p0.9999: 624.951 ms/op
                 executeQuery·p1.00:   624.951 ms/op

Iteration   5: 622.105 ±(99.9%) 18.357 ms/op
                 executeQuery·p0.00:   594.543 ms/op
                 executeQuery·p0.50:   619.708 ms/op
                 executeQuery·p0.90:   649.593 ms/op
                 executeQuery·p0.95:   672.137 ms/op
                 executeQuery·p0.99:   672.137 ms/op
                 executeQuery·p0.999:  672.137 ms/op
                 executeQuery·p0.9999: 672.137 ms/op
                 executeQuery·p1.00:   672.137 ms/op


# Run progress: 19.87% complete, ETA 03:41:02
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

656.973 ±(99.9%) 106.869 ms/op
# Warmup Iteration   2: 611.020 ±(99.9%) 7.988 ms/op
# Warmup Iteration   3: 614.690 ±(99.9%) 2.829 ms/op
# Warmup Iteration   4: 612.293 ±(99.9%) 4.136 ms/op
# Warmup Iteration   5: 602.482 ±(99.9%) 20.690 ms/op
Iteration   1: 615.364 ±(99.9%) 6.359 ms/op
                 executeQuery·p0.00:   598.737 ms/op
                 executeQuery·p0.50:   616.563 ms/op
                 executeQuery·p0.90:   620.233 ms/op
                 executeQuery·p0.95:   620.757 ms/op
                 executeQuery·p0.99:   620.757 ms/op
                 executeQuery·p0.999:  620.757 ms/op
                 executeQuery·p0.9999: 620.757 ms/op
                 executeQuery·p1.00:   620.757 ms/op

Iteration   2: 613.417 ±(99.9%) 11.468 ms/op
                 executeQuery·p0.00:   580.911 ms/op
                 executeQuery·p0.50:   614.990 ms/op
                 executeQuery·p0.90:   623.378 ms/op
                 executeQuery·p0.95:   624.951 ms/op
                 executeQuery·p0.99:   624.951 ms/op
                 executeQuery·p0.999:  624.951 ms/op
                 executeQuery·p0.9999: 624.951 ms/op
                 executeQuery·p1.00:   624.951 ms/op

Iteration   3: 604.204 ±(99.9%) 20.053 ms/op
                 executeQuery·p0.00:   570.425 ms/op
                 executeQuery·p0.50:   612.893 ms/op
                 executeQuery·p0.90:   618.660 ms/op
                 executeQuery·p0.95:   619.708 ms/op
                 executeQuery·p0.99:   619.708 ms/op
                 executeQuery·p0.999:  619.708 ms/op
                 executeQuery·p0.9999: 619.708 ms/op
                 executeQuery·p1.00:   619.708 ms/op

Iteration   4: 614.840 ±(99.9%) 9.481 ms/op
                 executeQuery·p0.00:   589.300 ms/op
                 executeQuery·p0.50:   616.563 ms/op
                 executeQuery·p0.90:   623.903 ms/op
                 executeQuery·p0.95:   627.048 ms/op
                 executeQuery·p0.99:   627.048 ms/op
                 executeQuery·p0.999:  627.048 ms/op
                 executeQuery·p0.9999: 627.048 ms/op
                 executeQuery·p1.00:   627.048 ms/op

Iteration   5: 641.325 ±(99.9%) 18.930 ms/op
                 executeQuery·p0.00:   619.708 ms/op
                 executeQuery·p0.50:   639.631 ms/op
                 executeQuery·p0.90:   665.846 ms/op
                 executeQuery·p0.95:   670.040 ms/op
                 executeQuery·p0.99:   670.040 ms/op
                 executeQuery·p0.999:  670.040 ms/op
                 executeQuery·p0.9999: 670.040 ms/op
                 executeQuery·p1.00:   670.040 ms/op


# Run progress: 20.51% complete, ETA 03:39:11
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

664.959 ±(99.9%) 72.981 ms/op
# Warmup Iteration   2: 638.663 ±(99.9%) 13.441 ms/op
# Warmup Iteration   3: 621.581 ±(99.9%) 17.193 ms/op
# Warmup Iteration   4: 626.374 ±(99.9%) 2.649 ms/op
# Warmup Iteration   5: 627.498 ±(99.9%) 5.202 ms/op
Iteration   1: 620.832 ±(99.9%) 25.004 ms/op
                 executeQuery·p0.00:   571.474 ms/op
                 executeQuery·p0.50:   626.524 ms/op
                 executeQuery·p0.90:   644.874 ms/op
                 executeQuery·p0.95:   645.923 ms/op
                 executeQuery·p0.99:   645.923 ms/op
                 executeQuery·p0.999:  645.923 ms/op
                 executeQuery·p0.9999: 645.923 ms/op
                 executeQuery·p1.00:   645.923 ms/op

Iteration   2: 621.731 ±(99.9%) 20.673 ms/op
                 executeQuery·p0.00:   572.522 ms/op
                 executeQuery·p0.50:   625.476 ms/op
                 executeQuery·p0.90:   643.301 ms/op
                 executeQuery·p0.95:   646.971 ms/op
                 executeQuery·p0.99:   646.971 ms/op
                 executeQuery·p0.999:  646.971 ms/op
                 executeQuery·p0.9999: 646.971 ms/op
                 executeQuery·p1.00:   646.971 ms/op

Iteration   3: 617.461 ±(99.9%) 17.636 ms/op
                 executeQuery·p0.00:   573.571 ms/op
                 executeQuery·p0.50:   621.806 ms/op
                 executeQuery·p0.90:   631.243 ms/op
                 executeQuery·p0.95:   631.243 ms/op
                 executeQuery·p0.99:   631.243 ms/op
                 executeQuery·p0.999:  631.243 ms/op
                 executeQuery·p0.9999: 631.243 ms/op
                 executeQuery·p1.00:   631.243 ms/op

Iteration   4: 628.696 ±(99.9%) 9.005 ms/op
                 executeQuery·p0.00:   619.708 ms/op
                 executeQuery·p0.50:   627.573 ms/op
                 executeQuery·p0.90:   643.826 ms/op
                 executeQuery·p0.95:   644.874 ms/op
                 executeQuery·p0.99:   644.874 ms/op
                 executeQuery·p0.999:  644.874 ms/op
                 executeQuery·p0.9999: 644.874 ms/op
                 executeQuery·p1.00:   644.874 ms/op

Iteration   5: 622.480 ±(99.9%) 2.254 ms/op
                 executeQuery·p0.00:   618.660 ms/op
                 executeQuery·p0.50:   622.854 ms/op
                 executeQuery·p0.90:   625.476 ms/op
                 executeQuery·p0.95:   626.000 ms/op
                 executeQuery·p0.99:   626.000 ms/op
                 executeQuery·p0.999:  626.000 ms/op
                 executeQuery·p0.9999: 626.000 ms/op
                 executeQuery·p1.00:   626.000 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 209
  mean =    618.775 ±(99.9%) 3.379 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 0 
    [537.500, 550.000) = 0 
    [550.000, 562.500) = 0 
    [562.500, 575.000) = 6 
    [575.000, 587.500) = 4 
    [587.500, 600.000) = 9 
    [600.000, 612.500) = 15 
    [612.500, 625.000) = 136 
    [625.000, 637.500) = 24 
    [637.500, 650.000) = 10 
    [650.000, 662.500) = 3 
    [662.500, 675.000) = 2 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    570.425 ms/op
     p(50.0000) =    618.660 ms/op
     p(90.0000) =    631.243 ms/op
     p(95.0000) =    643.301 ms/op
     p(99.0000) =    668.991 ms/op
     p(99.9000) =    672.137 ms/op
     p(99.9900) =    672.137 ms/op
     p(99.9990) =    672.137 ms/op
     p(99.9999) =    672.137 ms/op
    p(100.0000) =    672.137 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4)

# Run progress: 21.15% complete, ETA 03:37:27
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

848.717 ±(99.9%) 131.982 ms/op
# Warmup Iteration   2: 743.091 ±(99.9%) 6.638 ms/op
# Warmup Iteration   3: 740.207 ±(99.9%) 7.048 ms/op
# Warmup Iteration   4: 743.528 ±(99.9%) 11.141 ms/op
# Warmup Iteration   5: 740.994 ±(99.9%) 3.813 ms/op
Iteration   1: 743.703 ±(99.9%) 8.911 ms/op
                 executeQuery·p0.00:   735.052 ms/op
                 executeQuery·p0.50:   741.868 ms/op
                 executeQuery·p0.90:   756.757 ms/op
                 executeQuery·p0.95:   760.218 ms/op
                 executeQuery·p0.99:   760.218 ms/op
                 executeQuery·p0.999:  760.218 ms/op
                 executeQuery·p0.9999: 760.218 ms/op
                 executeQuery·p1.00:   760.218 ms/op

Iteration   2: 733.828 ±(99.9%) 22.001 ms/op
                 executeQuery·p0.00:   695.206 ms/op
                 executeQuery·p0.50:   738.722 ms/op
                 executeQuery·p0.90:   749.208 ms/op
                 executeQuery·p0.95:   750.780 ms/op
                 executeQuery·p0.99:   750.780 ms/op
                 executeQuery·p0.999:  750.780 ms/op
                 executeQuery·p0.9999: 750.780 ms/op
                 executeQuery·p1.00:   750.780 ms/op

Iteration   3: 740.732 ±(99.9%) 6.763 ms/op
                 executeQuery·p0.00:   729.809 ms/op
                 executeQuery·p0.50:   739.770 ms/op
                 executeQuery·p0.90:   749.732 ms/op
                 executeQuery·p0.95:   749.732 ms/op
                 executeQuery·p0.99:   749.732 ms/op
                 executeQuery·p0.999:  749.732 ms/op
                 executeQuery·p0.9999: 749.732 ms/op
                 executeQuery·p1.00:   749.732 ms/op

Iteration   4: 744.052 ±(99.9%) 12.422 ms/op
                 executeQuery·p0.00:   725.615 ms/op
                 executeQuery·p0.50:   743.440 ms/op
                 executeQuery·p0.90:   760.847 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op

Iteration   5: 732.692 ±(99.9%) 16.776 ms/op
                 executeQuery·p0.00:   705.692 ms/op
                 executeQuery·p0.50:   735.576 ms/op
                 executeQuery·p0.90:   746.586 ms/op
                 executeQuery·p0.95:   746.586 ms/op
                 executeQuery·p0.99:   746.586 ms/op
                 executeQuery·p0.999:  746.586 ms/op
                 executeQuery·p0.9999: 746.586 ms/op
                 executeQuery·p1.00:   746.586 ms/op


# Run progress: 21.79% complete, ETA 03:35:40
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

808.547 ±(99.9%) 159.796 ms/op
# Warmup Iteration   2: 758.295 ±(99.9%) 12.106 ms/op
# Warmup Iteration   3: 742.042 ±(99.9%) 18.718 ms/op
# Warmup Iteration   4: 744.402 ±(99.9%) 5.566 ms/op
# Warmup Iteration   5: 746.586 ±(99.9%) 7.267 ms/op
Iteration   1: 747.110 ±(99.9%) 5.910 ms/op
                 executeQuery·p0.00:   741.343 ms/op
                 executeQuery·p0.50:   747.110 ms/op
                 executeQuery·p0.90:   755.080 ms/op
                 executeQuery·p0.95:   756.023 ms/op
                 executeQuery·p0.99:   756.023 ms/op
                 executeQuery·p0.999:  756.023 ms/op
                 executeQuery·p0.9999: 756.023 ms/op
                 executeQuery·p1.00:   756.023 ms/op

Iteration   2: 751.217 ±(99.9%) 7.499 ms/op
                 executeQuery·p0.00:   742.392 ms/op
                 executeQuery·p0.50:   751.305 ms/op
                 executeQuery·p0.90:   760.952 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op

Iteration   3: 751.392 ±(99.9%) 5.417 ms/op
                 executeQuery·p0.00:   745.538 ms/op
                 executeQuery·p0.50:   751.305 ms/op
                 executeQuery·p0.90:   757.491 ms/op
                 executeQuery·p0.95:   758.120 ms/op
                 executeQuery·p0.99:   758.120 ms/op
                 executeQuery·p0.999:  758.120 ms/op
                 executeQuery·p0.9999: 758.120 ms/op
                 executeQuery·p1.00:   758.120 ms/op

Iteration   4: 748.858 ±(99.9%) 7.397 ms/op
                 executeQuery·p0.00:   737.149 ms/op
                 executeQuery·p0.50:   749.208 ms/op
                 executeQuery·p0.90:   756.023 ms/op
                 executeQuery·p0.95:   756.023 ms/op
                 executeQuery·p0.99:   756.023 ms/op
                 executeQuery·p0.999:  756.023 ms/op
                 executeQuery·p0.9999: 756.023 ms/op
                 executeQuery·p1.00:   756.023 ms/op

Iteration   5: 761.528 ±(99.9%) 19.141 ms/op
                 executeQuery·p0.00:   739.246 ms/op
                 executeQuery·p0.50:   764.412 ms/op
                 executeQuery·p0.90:   784.754 ms/op
                 executeQuery·p0.95:   785.383 ms/op
                 executeQuery·p0.99:   785.383 ms/op
                 executeQuery·p0.999:  785.383 ms/op
                 executeQuery·p0.9999: 785.383 ms/op
                 executeQuery·p1.00:   785.383 ms/op


# Run progress: 22.44% complete, ETA 03:33:59
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

850.710 ±(99.9%) 124.692 ms/op
# Warmup Iteration   2: 748.858 ±(99.9%) 44.562 ms/op
# Warmup Iteration   3: 739.858 ±(99.9%) 21.324 ms/op
# Warmup Iteration   4: 747.285 ±(99.9%) 3.940 ms/op
# Warmup Iteration   5: 748.072 ±(99.9%) 4.807 ms/op
Iteration   1: 744.926 ±(99.9%) 10.675 ms/op
                 executeQuery·p0.00:   721.420 ms/op
                 executeQuery·p0.50:   746.062 ms/op
                 executeQuery·p0.90:   754.870 ms/op
                 executeQuery·p0.95:   757.072 ms/op
                 executeQuery·p0.99:   757.072 ms/op
                 executeQuery·p0.999:  757.072 ms/op
                 executeQuery·p0.9999: 757.072 ms/op
                 executeQuery·p1.00:   757.072 ms/op

Iteration   2: 744.926 ±(99.9%) 5.386 ms/op
                 executeQuery·p0.00:   739.246 ms/op
                 executeQuery·p0.50:   743.965 ms/op
                 executeQuery·p0.90:   751.514 ms/op
                 executeQuery·p0.95:   751.829 ms/op
                 executeQuery·p0.99:   751.829 ms/op
                 executeQuery·p0.999:  751.829 ms/op
                 executeQuery·p0.9999: 751.829 ms/op
                 executeQuery·p1.00:   751.829 ms/op

Iteration   3: 743.353 ±(99.9%) 6.415 ms/op
                 executeQuery·p0.00:   738.198 ms/op
                 executeQuery·p0.50:   741.343 ms/op
                 executeQuery·p0.90:   752.248 ms/op
                 executeQuery·p0.95:   752.878 ms/op
                 executeQuery·p0.99:   752.878 ms/op
                 executeQuery·p0.999:  752.878 ms/op
                 executeQuery·p0.9999: 752.878 ms/op
                 executeQuery·p1.00:   752.878 ms/op

Iteration   4: 746.324 ±(99.9%) 9.272 ms/op
                 executeQuery·p0.00:   728.760 ms/op
                 executeQuery·p0.50:   749.208 ms/op
                 executeQuery·p0.90:   754.346 ms/op
                 executeQuery·p0.95:   754.975 ms/op
                 executeQuery·p0.99:   754.975 ms/op
                 executeQuery·p0.999:  754.975 ms/op
                 executeQuery·p0.9999: 754.975 ms/op
                 executeQuery·p1.00:   754.975 ms/op

Iteration   5: 702.223 ±(99.9%) 20.146 ms/op
                 executeQuery·p0.00:   677.380 ms/op
                 executeQuery·p0.50:   697.303 ms/op
                 executeQuery·p0.90:   734.632 ms/op
                 executeQuery·p0.95:   737.149 ms/op
                 executeQuery·p0.99:   737.149 ms/op
                 executeQuery·p0.999:  737.149 ms/op
                 executeQuery·p0.9999: 737.149 ms/op
                 executeQuery·p1.00:   737.149 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 181
  mean =    742.235 ±(99.9%) 3.989 ms/op

  Histogram, ms/op:
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 1 
    [687.500, 700.000) = 7 
    [700.000, 712.500) = 6 
    [712.500, 725.000) = 4 
    [725.000, 737.500) = 16 
    [737.500, 750.000) = 102 
    [750.000, 762.500) = 38 
    [762.500, 775.000) = 5 
    [775.000, 787.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    677.380 ms/op
     p(50.0000) =    744.489 ms/op
     p(90.0000) =    755.814 ms/op
     p(95.0000) =    761.161 ms/op
     p(99.0000) =    783.664 ms/op
     p(99.9000) =    785.383 ms/op
     p(99.9900) =    785.383 ms/op
     p(99.9990) =    785.383 ms/op
     p(99.9999) =    785.383 ms/op
    p(100.0000) =    785.383 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 23.08% complete, ETA 03:32:14
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

793.009 ±(99.9%) 130.457 ms/op
# Warmup Iteration   2: 746.324 ±(99.9%) 5.955 ms/op
# Warmup Iteration   3: 742.392 ±(99.9%) 8.609 ms/op
# Warmup Iteration   4: 740.207 ±(99.9%) 13.762 ms/op
# Warmup Iteration   5: 737.673 ±(99.9%) 16.633 ms/op
Iteration   1: 731.469 ±(99.9%) 25.005 ms/op
                 executeQuery·p0.00:   695.206 ms/op
                 executeQuery·p0.50:   740.295 ms/op
                 executeQuery·p0.90:   747.320 ms/op
                 executeQuery·p0.95:   747.635 ms/op
                 executeQuery·p0.99:   747.635 ms/op
                 executeQuery·p0.999:  747.635 ms/op
                 executeQuery·p0.9999: 747.635 ms/op
                 executeQuery·p1.00:   747.635 ms/op

Iteration   2: 742.829 ±(99.9%) 7.736 ms/op
                 executeQuery·p0.00:   729.809 ms/op
                 executeQuery·p0.50:   744.489 ms/op
                 executeQuery·p0.90:   750.885 ms/op
                 executeQuery·p0.95:   751.829 ms/op
                 executeQuery·p0.99:   751.829 ms/op
                 executeQuery·p0.999:  751.829 ms/op
                 executeQuery·p0.9999: 751.829 ms/op
                 executeQuery·p1.00:   751.829 ms/op

Iteration   3: 728.760 ±(99.9%) 26.056 ms/op
                 executeQuery·p0.00:   699.400 ms/op
                 executeQuery·p0.50:   737.673 ms/op
                 executeQuery·p0.90:   753.926 ms/op
                 executeQuery·p0.95:   757.072 ms/op
                 executeQuery·p0.99:   757.072 ms/op
                 executeQuery·p0.999:  757.072 ms/op
                 executeQuery·p0.9999: 757.072 ms/op
                 executeQuery·p1.00:   757.072 ms/op

Iteration   4: 747.984 ±(99.9%) 8.325 ms/op
                 executeQuery·p0.00:   739.246 ms/op
                 executeQuery·p0.50:   747.635 ms/op
                 executeQuery·p0.90:   761.056 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op

Iteration   5: 736.537 ±(99.9%) 3.597 ms/op
                 executeQuery·p0.00:   731.906 ms/op
                 executeQuery·p0.50:   736.100 ms/op
                 executeQuery·p0.90:   741.448 ms/op
                 executeQuery·p0.95:   742.392 ms/op
                 executeQuery·p0.99:   742.392 ms/op
                 executeQuery·p0.999:  742.392 ms/op
                 executeQuery·p0.9999: 742.392 ms/op
                 executeQuery·p1.00:   742.392 ms/op


# Run progress: 23.72% complete, ETA 03:30:26
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

805.688 ±(99.9%) 131.033 ms/op
# Warmup Iteration   2: 746.936 ±(99.9%) 8.384 ms/op
# Warmup Iteration   3: 742.567 ±(99.9%) 9.106 ms/op
# Warmup Iteration   4: 745.974 ±(99.9%) 3.903 ms/op
# Warmup Iteration   5: 753.140 ±(99.9%) 4.692 ms/op
Iteration   1: 742.567 ±(99.9%) 13.920 ms/op
                 executeQuery·p0.00:   715.129 ms/op
                 executeQuery·p0.50:   745.013 ms/op
                 executeQuery·p0.90:   753.716 ms/op
                 executeQuery·p0.95:   754.975 ms/op
                 executeQuery·p0.99:   754.975 ms/op
                 executeQuery·p0.999:  754.975 ms/op
                 executeQuery·p0.9999: 754.975 ms/op
                 executeQuery·p1.00:   754.975 ms/op

Iteration   2: 741.081 ±(99.9%) 17.791 ms/op
                 executeQuery·p0.00:   698.352 ms/op
                 executeQuery·p0.50:   743.965 ms/op
                 executeQuery·p0.90:   751.200 ms/op
                 executeQuery·p0.95:   751.829 ms/op
                 executeQuery·p0.99:   751.829 ms/op
                 executeQuery·p0.999:  751.829 ms/op
                 executeQuery·p0.9999: 751.829 ms/op
                 executeQuery·p1.00:   751.829 ms/op

Iteration   3: 743.615 ±(99.9%) 18.705 ms/op
                 executeQuery·p0.00:   699.400 ms/op
                 executeQuery·p0.50:   746.586 ms/op
                 executeQuery·p0.90:   754.660 ms/op
                 executeQuery·p0.95:   754.975 ms/op
                 executeQuery·p0.99:   754.975 ms/op
                 executeQuery·p0.999:  754.975 ms/op
                 executeQuery·p0.9999: 754.975 ms/op
                 executeQuery·p1.00:   754.975 ms/op

Iteration   4: 747.285 ±(99.9%) 11.198 ms/op
                 executeQuery·p0.00:   740.295 ms/op
                 executeQuery·p0.50:   743.440 ms/op
                 executeQuery·p0.90:   766.509 ms/op
                 executeQuery·p0.95:   772.801 ms/op
                 executeQuery·p0.99:   772.801 ms/op
                 executeQuery·p0.999:  772.801 ms/op
                 executeQuery·p0.9999: 772.801 ms/op
                 executeQuery·p1.00:   772.801 ms/op

Iteration   5: 738.809 ±(99.9%) 13.774 ms/op
                 executeQuery·p0.00:   711.983 ms/op
                 executeQuery·p0.50:   742.916 ms/op
                 executeQuery·p0.90:   746.691 ms/op
                 executeQuery·p0.95:   747.635 ms/op
                 executeQuery·p0.99:   747.635 ms/op
                 executeQuery·p0.999:  747.635 ms/op
                 executeQuery·p0.9999: 747.635 ms/op
                 executeQuery·p1.00:   747.635 ms/op


# Run progress: 24.36% complete, ETA 03:28:39
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

854.904 ±(99.9%) 143.514 ms/op
# Warmup Iteration   2: 734.440 ±(99.9%) 18.885 ms/op
# Warmup Iteration   3: 743.790 ±(99.9%) 16.837 ms/op
# Warmup Iteration   4: 741.605 ±(99.9%) 9.921 ms/op
# Warmup Iteration   5: 741.605 ±(99.9%) 9.236 ms/op
Iteration   1: 747.198 ±(99.9%) 18.437 ms/op
                 executeQuery·p0.00:   704.643 ms/op
                 executeQuery·p0.50:   750.780 ms/op
                 executeQuery·p0.90:   757.072 ms/op
                 executeQuery·p0.95:   757.072 ms/op
                 executeQuery·p0.99:   757.072 ms/op
                 executeQuery·p0.999:  757.072 ms/op
                 executeQuery·p0.9999: 757.072 ms/op
                 executeQuery·p1.00:   757.072 ms/op

Iteration   2: 745.887 ±(99.9%) 13.725 ms/op
                 executeQuery·p0.00:   722.469 ms/op
                 executeQuery·p0.50:   749.208 ms/op
                 executeQuery·p0.90:   756.757 ms/op
                 executeQuery·p0.95:   757.072 ms/op
                 executeQuery·p0.99:   757.072 ms/op
                 executeQuery·p0.999:  757.072 ms/op
                 executeQuery·p0.9999: 757.072 ms/op
                 executeQuery·p1.00:   757.072 ms/op

Iteration   3: 747.897 ±(99.9%) 5.556 ms/op
                 executeQuery·p0.00:   742.392 ms/op
                 executeQuery·p0.50:   747.110 ms/op
                 executeQuery·p0.90:   756.967 ms/op
                 executeQuery·p0.95:   759.169 ms/op
                 executeQuery·p0.99:   759.169 ms/op
                 executeQuery·p0.999:  759.169 ms/op
                 executeQuery·p0.9999: 759.169 ms/op
                 executeQuery·p1.00:   759.169 ms/op

Iteration   4: 750.431 ±(99.9%) 14.860 ms/op
                 executeQuery·p0.00:   743.440 ms/op
                 executeQuery·p0.50:   746.062 ms/op
                 executeQuery·p0.90:   775.946 ms/op
                 executeQuery·p0.95:   785.383 ms/op
                 executeQuery·p0.99:   785.383 ms/op
                 executeQuery·p0.999:  785.383 ms/op
                 executeQuery·p0.9999: 785.383 ms/op
                 executeQuery·p1.00:   785.383 ms/op

Iteration   5: 713.643 ±(99.9%) 32.231 ms/op
                 executeQuery·p0.00:   685.769 ms/op
                 executeQuery·p0.50:   698.876 ms/op
                 executeQuery·p0.90:   748.683 ms/op
                 executeQuery·p0.95:   751.829 ms/op
                 executeQuery·p0.99:   751.829 ms/op
                 executeQuery·p0.999:  751.829 ms/op
                 executeQuery·p0.9999: 751.829 ms/op
                 executeQuery·p1.00:   751.829 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 180
  mean =    740.400 ±(99.9%) 3.975 ms/op

  Histogram, ms/op:
    [680.000, 690.000) = 2 
    [690.000, 700.000) = 9 
    [700.000, 710.000) = 5 
    [710.000, 720.000) = 3 
    [720.000, 730.000) = 6 
    [730.000, 740.000) = 25 
    [740.000, 750.000) = 99 
    [750.000, 760.000) = 28 
    [760.000, 770.000) = 1 
    [770.000, 780.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    685.769 ms/op
     p(50.0000) =    744.489 ms/op
     p(90.0000) =    752.878 ms/op
     p(95.0000) =    756.023 ms/op
     p(99.0000) =    775.191 ms/op
     p(99.9000) =    785.383 ms/op
     p(99.9900) =    785.383 ms/op
     p(99.9990) =    785.383 ms/op
     p(99.9999) =    785.383 ms/op
    p(100.0000) =    785.383 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64)

# Run progress: 25.00% complete, ETA 03:26:51
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

774.993 ±(99.9%) 132.371 ms/op
# Warmup Iteration   2: 710.672 ±(99.9%) 5.872 ms/op
# Warmup Iteration   3: 707.090 ±(99.9%) 10.072 ms/op
# Warmup Iteration   4: 705.046 ±(99.9%) 3.264 ms/op
# Warmup Iteration   5: 709.274 ±(99.9%) 7.736 ms/op
Iteration   1: 713.294 ±(99.9%) 6.608 ms/op
                 executeQuery·p0.00:   705.692 ms/op
                 executeQuery·p0.50:   712.507 ms/op
                 executeQuery·p0.90:   722.259 ms/op
                 executeQuery·p0.95:   723.517 ms/op
                 executeQuery·p0.99:   723.517 ms/op
                 executeQuery·p0.999:  723.517 ms/op
                 executeQuery·p0.9999: 723.517 ms/op
                 executeQuery·p1.00:   723.517 ms/op

Iteration   2: 710.760 ±(99.9%) 29.240 ms/op
                 executeQuery·p0.00:   646.971 ms/op
                 executeQuery·p0.50:   712.507 ms/op
                 executeQuery·p0.90:   739.141 ms/op
                 executeQuery·p0.95:   744.489 ms/op
                 executeQuery·p0.99:   744.489 ms/op
                 executeQuery·p0.999:  744.489 ms/op
                 executeQuery·p0.9999: 744.489 ms/op
                 executeQuery·p1.00:   744.489 ms/op

Iteration   3: 703.857 ±(99.9%) 25.393 ms/op
                 executeQuery·p0.00:   646.971 ms/op
                 executeQuery·p0.50:   707.789 ms/op
                 executeQuery·p0.90:   723.937 ms/op
                 executeQuery·p0.95:   727.712 ms/op
                 executeQuery·p0.99:   727.712 ms/op
                 executeQuery·p0.999:  727.712 ms/op
                 executeQuery·p0.9999: 727.712 ms/op
                 executeQuery·p1.00:   727.712 ms/op

Iteration   4: 709.711 ±(99.9%) 5.117 ms/op
                 executeQuery·p0.00:   705.692 ms/op
                 executeQuery·p0.50:   708.313 ms/op
                 executeQuery·p0.90:   718.170 ms/op
                 executeQuery·p0.95:   720.372 ms/op
                 executeQuery·p0.99:   720.372 ms/op
                 executeQuery·p0.999:  720.372 ms/op
                 executeQuery·p0.9999: 720.372 ms/op
                 executeQuery·p1.00:   720.372 ms/op

Iteration   5: 702.627 ±(99.9%) 11.353 ms/op
                 executeQuery·p0.00:   685.769 ms/op
                 executeQuery·p0.50:   703.594 ms/op
                 executeQuery·p0.90:   714.080 ms/op
                 executeQuery·p0.95:   714.080 ms/op
                 executeQuery·p0.99:   714.080 ms/op
                 executeQuery·p0.999:  714.080 ms/op
                 executeQuery·p0.9999: 714.080 ms/op
                 executeQuery·p1.00:   714.080 ms/op


# Run progress: 25.64% complete, ETA 03:24:57
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

798.634 ±(99.9%) 110.212 ms/op
# Warmup Iteration   2: 708.226 ±(99.9%) 26.427 ms/op
# Warmup Iteration   3: 715.129 ±(99.9%) 11.411 ms/op
# Warmup Iteration   4: 705.853 ±(99.9%) 22.614 ms/op
# Warmup Iteration   5: 708.663 ±(99.9%) 26.023 ms/op
Iteration   1: 705.934 ±(99.9%) 30.112 ms/op
                 executeQuery·p0.00:   661.651 ms/op
                 executeQuery·p0.50:   715.129 ms/op
                 executeQuery·p0.90:   738.827 ms/op
                 executeQuery·p0.95:   745.538 ms/op
                 executeQuery·p0.99:   745.538 ms/op
                 executeQuery·p0.999:  745.538 ms/op
                 executeQuery·p0.9999: 745.538 ms/op
                 executeQuery·p1.00:   745.538 ms/op

Iteration   2: 693.996 ±(99.9%) 27.063 ms/op
                 executeQuery·p0.00:   658.506 ms/op
                 executeQuery·p0.50:   698.352 ms/op
                 executeQuery·p0.90:   720.162 ms/op
                 executeQuery·p0.95:   721.420 ms/op
                 executeQuery·p0.99:   721.420 ms/op
                 executeQuery·p0.999:  721.420 ms/op
                 executeQuery·p0.9999: 721.420 ms/op
                 executeQuery·p1.00:   721.420 ms/op

Iteration   3: 709.449 ±(99.9%) 18.141 ms/op
                 executeQuery·p0.00:   675.283 ms/op
                 executeQuery·p0.50:   714.605 ms/op
                 executeQuery·p0.90:   719.743 ms/op
                 executeQuery·p0.95:   720.372 ms/op
                 executeQuery·p0.99:   720.372 ms/op
                 executeQuery·p0.999:  720.372 ms/op
                 executeQuery·p0.9999: 720.372 ms/op
                 executeQuery·p1.00:   720.372 ms/op

Iteration   4: 717.401 ±(99.9%) 7.529 ms/op
                 executeQuery·p0.00:   703.594 ms/op
                 executeQuery·p0.50:   718.799 ms/op
                 executeQuery·p0.90:   723.517 ms/op
                 executeQuery·p0.95:   723.517 ms/op
                 executeQuery·p0.99:   723.517 ms/op
                 executeQuery·p0.999:  723.517 ms/op
                 executeQuery·p0.9999: 723.517 ms/op
                 executeQuery·p1.00:   723.517 ms/op

Iteration   5: 709.274 ±(99.9%) 22.803 ms/op
                 executeQuery·p0.00:   673.186 ms/op
                 executeQuery·p0.50:   715.653 ms/op
                 executeQuery·p0.90:   723.937 ms/op
                 executeQuery·p0.95:   724.566 ms/op
                 executeQuery·p0.99:   724.566 ms/op
                 executeQuery·p0.999:  724.566 ms/op
                 executeQuery·p0.9999: 724.566 ms/op
                 executeQuery·p1.00:   724.566 ms/op


# Run progress: 26.28% complete, ETA 03:23:08
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

754.276 ±(99.9%) 122.314 ms/op
# Warmup Iteration   2: 707.527 ±(99.9%) 15.633 ms/op
# Warmup Iteration   3: 706.828 ±(99.9%) 4.704 ms/op
# Warmup Iteration   4: 713.469 ±(99.9%) 5.507 ms/op
# Warmup Iteration   5: 712.245 ±(99.9%) 7.938 ms/op
Iteration   1: 708.488 ±(99.9%) 13.337 ms/op
                 executeQuery·p0.00:   678.429 ms/op
                 executeQuery·p0.50:   710.410 ms/op
                 executeQuery·p0.90:   719.323 ms/op
                 executeQuery·p0.95:   719.323 ms/op
                 executeQuery·p0.99:   719.323 ms/op
                 executeQuery·p0.999:  719.323 ms/op
                 executeQuery·p0.9999: 719.323 ms/op
                 executeQuery·p1.00:   719.323 ms/op

Iteration   2: 707.964 ±(99.9%) 21.731 ms/op
                 executeQuery·p0.00:   657.457 ms/op
                 executeQuery·p0.50:   709.886 ms/op
                 executeQuery·p0.90:   724.566 ms/op
                 executeQuery·p0.95:   727.712 ms/op
                 executeQuery·p0.99:   727.712 ms/op
                 executeQuery·p0.999:  727.712 ms/op
                 executeQuery·p0.9999: 727.712 ms/op
                 executeQuery·p1.00:   727.712 ms/op

Iteration   3: 702.304 ±(99.9%) 20.850 ms/op
                 executeQuery·p0.00:   658.506 ms/op
                 executeQuery·p0.50:   708.837 ms/op
                 executeQuery·p0.90:   717.226 ms/op
                 executeQuery·p0.95:   719.323 ms/op
                 executeQuery·p0.99:   719.323 ms/op
                 executeQuery·p0.999:  719.323 ms/op
                 executeQuery·p0.9999: 719.323 ms/op
                 executeQuery·p1.00:   719.323 ms/op

Iteration   4: 713.905 ±(99.9%) 9.372 ms/op
                 executeQuery·p0.00:   705.692 ms/op
                 executeQuery·p0.50:   712.507 ms/op
                 executeQuery·p0.90:   728.970 ms/op
                 executeQuery·p0.95:   730.857 ms/op
                 executeQuery·p0.99:   730.857 ms/op
                 executeQuery·p0.999:  730.857 ms/op
                 executeQuery·p0.9999: 730.857 ms/op
                 executeQuery·p1.00:   730.857 ms/op

Iteration   5: 702.707 ±(99.9%) 17.772 ms/op
                 executeQuery·p0.00:   664.797 ms/op
                 executeQuery·p0.50:   706.740 ms/op
                 executeQuery·p0.90:   717.016 ms/op
                 executeQuery·p0.95:   718.275 ms/op
                 executeQuery·p0.99:   718.275 ms/op
                 executeQuery·p0.999:  718.275 ms/op
                 executeQuery·p0.9999: 718.275 ms/op
                 executeQuery·p1.00:   718.275 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 185
  mean =    707.284 ±(99.9%) 3.991 ms/op

  Histogram, ms/op:
    [640.000, 650.000) = 2 
    [650.000, 660.000) = 3 
    [660.000, 670.000) = 3 
    [670.000, 680.000) = 9 
    [680.000, 690.000) = 8 
    [690.000, 700.000) = 5 
    [700.000, 710.000) = 63 
    [710.000, 720.000) = 68 
    [720.000, 730.000) = 21 
    [730.000, 740.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    646.971 ms/op
     p(50.0000) =    709.886 ms/op
     p(90.0000) =    721.840 ms/op
     p(95.0000) =    724.251 ms/op
     p(99.0000) =    744.636 ms/op
     p(99.9000) =    745.538 ms/op
     p(99.9900) =    745.538 ms/op
     p(99.9990) =    745.538 ms/op
     p(99.9999) =    745.538 ms/op
    p(100.0000) =    745.538 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256)

# Run progress: 26.92% complete, ETA 03:21:17
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

821.893 ±(99.9%) 137.678 ms/op
# Warmup Iteration   2: 756.198 ±(99.9%) 16.754 ms/op
# Warmup Iteration   3: 731.906 ±(99.9%) 25.872 ms/op
# Warmup Iteration   4: 751.217 ±(99.9%) 25.103 ms/op
# Warmup Iteration   5: 755.761 ±(99.9%) 8.419 ms/op
Iteration   1: 739.596 ±(99.9%) 28.151 ms/op
                 executeQuery·p0.00:   694.157 ms/op
                 executeQuery·p0.50:   746.586 ms/op
                 executeQuery·p0.90:   761.686 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   2: 730.595 ±(99.9%) 32.588 ms/op
                 executeQuery·p0.00:   688.914 ms/op
                 executeQuery·p0.50:   740.295 ms/op
                 executeQuery·p0.90:   755.080 ms/op
                 executeQuery·p0.95:   756.023 ms/op
                 executeQuery·p0.99:   756.023 ms/op
                 executeQuery·p0.999:  756.023 ms/op
                 executeQuery·p0.9999: 756.023 ms/op
                 executeQuery·p1.00:   756.023 ms/op

Iteration   3: 745.887 ±(99.9%) 23.601 ms/op
                 executeQuery·p0.00:   708.837 ms/op
                 executeQuery·p0.50:   752.353 ms/op
                 executeQuery·p0.90:   763.783 ms/op
                 executeQuery·p0.95:   764.412 ms/op
                 executeQuery·p0.99:   764.412 ms/op
                 executeQuery·p0.999:  764.412 ms/op
                 executeQuery·p0.9999: 764.412 ms/op
                 executeQuery·p1.00:   764.412 ms/op

Iteration   4: 754.101 ±(99.9%) 18.828 ms/op
                 executeQuery·p0.00:   724.566 ms/op
                 executeQuery·p0.50:   757.072 ms/op
                 executeQuery·p0.90:   770.074 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   5: 732.168 ±(99.9%) 33.750 ms/op
                 executeQuery·p0.00:   692.060 ms/op
                 executeQuery·p0.50:   737.673 ms/op
                 executeQuery·p0.90:   761.686 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op


# Run progress: 27.56% complete, ETA 03:19:33
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

809.787 ±(99.9%) 132.035 ms/op
# Warmup Iteration   2: 757.421 ±(99.9%) 7.229 ms/op
# Warmup Iteration   3: 750.693 ±(99.9%) 12.195 ms/op
# Warmup Iteration   4: 757.596 ±(99.9%) 7.164 ms/op
# Warmup Iteration   5: 758.208 ±(99.9%) 9.710 ms/op
Iteration   1: 754.276 ±(99.9%) 17.411 ms/op
                 executeQuery·p0.00:   717.226 ms/op
                 executeQuery·p0.50:   756.023 ms/op
                 executeQuery·p0.90:   768.711 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op

Iteration   2: 749.033 ±(99.9%) 12.642 ms/op
                 executeQuery·p0.00:   723.517 ms/op
                 executeQuery·p0.50:   750.780 ms/op
                 executeQuery·p0.90:   761.476 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op

Iteration   3: 754.014 ±(99.9%) 9.794 ms/op
                 executeQuery·p0.00:   744.489 ms/op
                 executeQuery·p0.50:   752.353 ms/op
                 executeQuery·p0.90:   766.928 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   4: 746.149 ±(99.9%) 20.194 ms/op
                 executeQuery·p0.00:   714.080 ms/op
                 executeQuery·p0.50:   750.780 ms/op
                 executeQuery·p0.90:   763.049 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op

Iteration   5: 745.887 ±(99.9%) 14.593 ms/op
                 executeQuery·p0.00:   721.420 ms/op
                 executeQuery·p0.50:   747.635 ms/op
                 executeQuery·p0.90:   758.854 ms/op
                 executeQuery·p0.95:   759.169 ms/op
                 executeQuery·p0.99:   759.169 ms/op
                 executeQuery·p0.999:  759.169 ms/op
                 executeQuery·p0.9999: 759.169 ms/op
                 executeQuery·p1.00:   759.169 ms/op


# Run progress: 28.21% complete, ETA 03:17:50
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

818.461 ±(99.9%) 138.875 ms/op
# Warmup Iteration   2: 761.441 ±(99.9%) 18.027 ms/op
# Warmup Iteration   3: 763.363 ±(99.9%) 10.356 ms/op
# Warmup Iteration   4: 748.334 ±(99.9%) 21.215 ms/op
# Warmup Iteration   5: 739.945 ±(99.9%) 26.723 ms/op
Iteration   1: 760.829 ±(99.9%) 7.254 ms/op
                 executeQuery·p0.00:   748.683 ms/op
                 executeQuery·p0.50:   760.742 ms/op
                 executeQuery·p0.90:   768.292 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   2: 732.955 ±(99.9%) 33.427 ms/op
                 executeQuery·p0.00:   696.254 ms/op
                 executeQuery·p0.50:   730.857 ms/op
                 executeQuery·p0.90:   769.235 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   3: 751.916 ±(99.9%) 26.178 ms/op
                 executeQuery·p0.00:   718.275 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   772.486 ms/op
                 executeQuery·p0.95:   772.801 ms/op
                 executeQuery·p0.99:   772.801 ms/op
                 executeQuery·p0.999:  772.801 ms/op
                 executeQuery·p0.9999: 772.801 ms/op
                 executeQuery·p1.00:   772.801 ms/op

Iteration   4: 740.819 ±(99.9%) 27.847 ms/op
                 executeQuery·p0.00:   693.109 ms/op
                 executeQuery·p0.50:   750.256 ms/op
                 executeQuery·p0.90:   761.056 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   5: 733.042 ±(99.9%) 31.562 ms/op
                 executeQuery·p0.00:   700.449 ms/op
                 executeQuery·p0.50:   734.527 ms/op
                 executeQuery·p0.90:   774.478 ms/op
                 executeQuery·p0.95:   780.141 ms/op
                 executeQuery·p0.99:   780.141 ms/op
                 executeQuery·p0.999:  780.141 ms/op
                 executeQuery·p0.9999: 780.141 ms/op
                 executeQuery·p1.00:   780.141 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 180
  mean =    744.751 ±(99.9%) 5.060 ms/op

  Histogram, ms/op:
    [680.000, 690.000) = 1 
    [690.000, 700.000) = 6 
    [700.000, 710.000) = 10 
    [710.000, 720.000) = 11 
    [720.000, 730.000) = 14 
    [730.000, 740.000) = 10 
    [740.000, 750.000) = 26 
    [750.000, 760.000) = 63 
    [760.000, 770.000) = 34 
    [770.000, 780.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    688.914 ms/op
     p(50.0000) =    751.829 ms/op
     p(90.0000) =    764.307 ms/op
     p(95.0000) =    768.554 ms/op
     p(99.0000) =    774.195 ms/op
     p(99.9000) =    780.141 ms/op
     p(99.9900) =    780.141 ms/op
     p(99.9990) =    780.141 ms/op
     p(99.9999) =    780.141 ms/op
    p(100.0000) =    780.141 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024)

# Run progress: 28.85% complete, ETA 03:16:07
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

977.739 ±(99.9%) 161.123 ms/op
# Warmup Iteration   2: 897.791 ±(99.9%) 9.388 ms/op
# Warmup Iteration   3: 900.517 ±(99.9%) 12.252 ms/op
# Warmup Iteration   4: 886.466 ±(99.9%) 12.796 ms/op
# Warmup Iteration   5: 885.942 ±(99.9%) 19.465 ms/op
Iteration   1: 893.911 ±(99.9%) 8.691 ms/op
                 executeQuery·p0.00:   881.852 ms/op
                 executeQuery·p0.50:   894.960 ms/op
                 executeQuery·p0.90:   899.573 ms/op
                 executeQuery·p0.95:   899.678 ms/op
                 executeQuery·p0.99:   899.678 ms/op
                 executeQuery·p0.999:  899.678 ms/op
                 executeQuery·p0.9999: 899.678 ms/op
                 executeQuery·p1.00:   899.678 ms/op

Iteration   2: 895.798 ±(99.9%) 11.335 ms/op
                 executeQuery·p0.00:   886.047 ms/op
                 executeQuery·p0.50:   894.960 ms/op
                 executeQuery·p0.90:   904.816 ms/op
                 executeQuery·p0.95:   904.921 ms/op
                 executeQuery·p0.99:   904.921 ms/op
                 executeQuery·p0.999:  904.921 ms/op
                 executeQuery·p0.9999: 904.921 ms/op
                 executeQuery·p1.00:   904.921 ms/op

Iteration   3: 885.522 ±(99.9%) 38.805 ms/op
                 executeQuery·p0.00:   817.889 ms/op
                 executeQuery·p0.50:   893.911 ms/op
                 executeQuery·p0.90:   904.711 ms/op
                 executeQuery·p0.95:   904.921 ms/op
                 executeQuery·p0.99:   904.921 ms/op
                 executeQuery·p0.999:  904.921 ms/op
                 executeQuery·p0.9999: 904.921 ms/op
                 executeQuery·p1.00:   904.921 ms/op

Iteration   4: 895.903 ±(99.9%) 12.621 ms/op
                 executeQuery·p0.00:   888.144 ms/op
                 executeQuery·p0.50:   893.911 ms/op
                 executeQuery·p0.90:   911.003 ms/op
                 executeQuery·p0.95:   911.213 ms/op
                 executeQuery·p0.99:   911.213 ms/op
                 executeQuery·p0.999:  911.213 ms/op
                 executeQuery·p0.9999: 911.213 ms/op
                 executeQuery·p1.00:   911.213 ms/op

Iteration   5: 890.765 ±(99.9%) 11.241 ms/op
                 executeQuery·p0.00:   881.852 ms/op
                 executeQuery·p0.50:   889.192 ms/op
                 executeQuery·p0.90:   899.573 ms/op
                 executeQuery·p0.95:   899.678 ms/op
                 executeQuery·p0.99:   899.678 ms/op
                 executeQuery·p0.999:  899.678 ms/op
                 executeQuery·p0.9999: 899.678 ms/op
                 executeQuery·p1.00:   899.678 ms/op


# Run progress: 29.49% complete, ETA 03:14:15
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

946.550 ±(99.9%) 166.170 ms/op
# Warmup Iteration   2: 866.982 ±(99.9%) 20.486 ms/op
# Warmup Iteration   3: 865.361 ±(99.9%) 22.032 ms/op
# Warmup Iteration   4: 851.348 ±(99.9%) 38.942 ms/op
# Warmup Iteration   5: 865.552 ±(99.9%) 38.156 ms/op
Iteration   1: 863.264 ±(99.9%) 29.077 ms/op
                 executeQuery·p0.00:   814.744 ms/op
                 executeQuery·p0.50:   871.367 ms/op
                 executeQuery·p0.90:   882.901 ms/op
                 executeQuery·p0.95:   883.950 ms/op
                 executeQuery·p0.99:   883.950 ms/op
                 executeQuery·p0.999:  883.950 ms/op
                 executeQuery·p0.9999: 883.950 ms/op
                 executeQuery·p1.00:   883.950 ms/op

Iteration   2: 868.698 ±(99.9%) 25.569 ms/op
                 executeQuery·p0.00:   829.424 ms/op
                 executeQuery·p0.50:   873.464 ms/op
                 executeQuery·p0.90:   889.402 ms/op
                 executeQuery·p0.95:   891.290 ms/op
                 executeQuery·p0.99:   891.290 ms/op
                 executeQuery·p0.999:  891.290 ms/op
                 executeQuery·p0.9999: 891.290 ms/op
                 executeQuery·p1.00:   891.290 ms/op

Iteration   3: 856.401 ±(99.9%) 38.083 ms/op
                 executeQuery·p0.00:   793.772 ms/op
                 executeQuery·p0.50:   870.318 ms/op
                 executeQuery·p0.90:   879.546 ms/op
                 executeQuery·p0.95:   880.804 ms/op
                 executeQuery·p0.99:   880.804 ms/op
                 executeQuery·p0.999:  880.804 ms/op
                 executeQuery·p0.9999: 880.804 ms/op
                 executeQuery·p1.00:   880.804 ms/op

Iteration   4: 871.557 ±(99.9%) 13.801 ms/op
                 executeQuery·p0.00:   855.638 ms/op
                 executeQuery·p0.50:   871.367 ms/op
                 executeQuery·p0.90:   884.998 ms/op
                 executeQuery·p0.95:   884.998 ms/op
                 executeQuery·p0.99:   884.998 ms/op
                 executeQuery·p0.999:  884.998 ms/op
                 executeQuery·p0.9999: 884.998 ms/op
                 executeQuery·p1.00:   884.998 ms/op

Iteration   5: 854.113 ±(99.9%) 20.564 ms/op
                 executeQuery·p0.00:   831.521 ms/op
                 executeQuery·p0.50:   851.444 ms/op
                 executeQuery·p0.90:   872.835 ms/op
                 executeQuery·p0.95:   873.464 ms/op
                 executeQuery·p0.99:   873.464 ms/op
                 executeQuery·p0.999:  873.464 ms/op
                 executeQuery·p0.9999: 873.464 ms/op
                 executeQuery·p1.00:   873.464 ms/op


# Run progress: 30.13% complete, ETA 03:12:40
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

974.127 ±(99.9%) 197.772 ms/op
# Warmup Iteration   2: 886.781 ±(99.9%) 37.224 ms/op
# Warmup Iteration   3: 883.111 ±(99.9%) 46.794 ms/op
# Warmup Iteration   4: 894.121 ±(99.9%) 17.205 ms/op
# Warmup Iteration   5: 873.569 ±(99.9%) 56.739 ms/op
Iteration   1: 870.842 ±(99.9%) 38.603 ms/op
                 executeQuery·p0.00:   838.861 ms/op
                 executeQuery·p0.50:   876.085 ms/op
                 executeQuery·p0.90:   900.202 ms/op
                 executeQuery·p0.95:   900.727 ms/op
                 executeQuery·p0.99:   900.727 ms/op
                 executeQuery·p0.999:  900.727 ms/op
                 executeQuery·p0.9999: 900.727 ms/op
                 executeQuery·p1.00:   900.727 ms/op

Iteration   2: 884.264 ±(99.9%) 36.019 ms/op
                 executeQuery·p0.00:   850.395 ms/op
                 executeQuery·p0.50:   894.960 ms/op
                 executeQuery·p0.90:   909.745 ms/op
                 executeQuery·p0.95:   910.164 ms/op
                 executeQuery·p0.99:   910.164 ms/op
                 executeQuery·p0.999:  910.164 ms/op
                 executeQuery·p0.9999: 910.164 ms/op
                 executeQuery·p1.00:   910.164 ms/op

Iteration   3: 897.371 ±(99.9%) 13.796 ms/op
                 executeQuery·p0.00:   883.950 ms/op
                 executeQuery·p0.50:   897.057 ms/op
                 executeQuery·p0.90:   915.092 ms/op
                 executeQuery·p0.95:   916.455 ms/op
                 executeQuery·p0.99:   916.455 ms/op
                 executeQuery·p0.999:  916.455 ms/op
                 executeQuery·p0.9999: 916.455 ms/op
                 executeQuery·p1.00:   916.455 ms/op

Iteration   4: 873.044 ±(99.9%) 39.454 ms/op
                 executeQuery·p0.00:   833.618 ms/op
                 executeQuery·p0.50:   886.571 ms/op
                 executeQuery·p0.90:   904.607 ms/op
                 executeQuery·p0.95:   905.970 ms/op
                 executeQuery·p0.99:   905.970 ms/op
                 executeQuery·p0.999:  905.970 ms/op
                 executeQuery·p0.9999: 905.970 ms/op
                 executeQuery·p1.00:   905.970 ms/op

Iteration   5: 894.330 ±(99.9%) 6.361 ms/op
                 executeQuery·p0.00:   889.192 ms/op
                 executeQuery·p0.50:   892.862 ms/op
                 executeQuery·p0.90:   902.509 ms/op
                 executeQuery·p0.95:   902.824 ms/op
                 executeQuery·p0.99:   902.824 ms/op
                 executeQuery·p0.999:  902.824 ms/op
                 executeQuery·p0.9999: 902.824 ms/op
                 executeQuery·p1.00:   902.824 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 155
  mean =    879.173 ±(99.9%) 6.071 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 0 
    [ 750.000,  775.000) = 0 
    [ 775.000,  800.000) = 1 
    [ 800.000,  825.000) = 2 
    [ 825.000,  850.000) = 15 
    [ 850.000,  875.000) = 36 
    [ 875.000,  900.000) = 81 
    [ 900.000,  925.000) = 20 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    793.772 ms/op
     p(50.0000) =    884.998 ms/op
     p(90.0000) =    902.195 ms/op
     p(95.0000) =    904.921 ms/op
     p(99.0000) =    913.519 ms/op
     p(99.9000) =    916.455 ms/op
     p(99.9900) =    916.455 ms/op
     p(99.9990) =    916.455 ms/op
     p(99.9999) =    916.455 ms/op
    p(100.0000) =    916.455 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096)

# Run progress: 30.77% complete, ETA 03:10:47
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1284.356 ±(99.9%) 349.476 ms/op
# Warmup Iteration   2: 1163.919 ±(99.9%) 12.124 ms/op
# Warmup Iteration   3: 1141.637 ±(99.9%) 65.112 ms/op
# Warmup Iteration   4: 1158.676 ±(99.9%) 19.760 ms/op
# Warmup Iteration   5: 1138.229 ±(99.9%) 36.040 ms/op
Iteration   1: 1137.705 ±(99.9%) 33.342 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1142.948 ms/op
                 executeQuery·p0.90:   1151.336 ms/op
                 executeQuery·p0.95:   1151.336 ms/op
                 executeQuery·p0.99:   1151.336 ms/op
                 executeQuery·p0.999:  1151.336 ms/op
                 executeQuery·p0.9999: 1151.336 ms/op
                 executeQuery·p1.00:   1151.336 ms/op

Iteration   2: 1160.511 ±(99.9%) 22.777 ms/op
                 executeQuery·p0.00:   1145.045 ms/op
                 executeQuery·p0.50:   1158.676 ms/op
                 executeQuery·p0.90:   1184.891 ms/op
                 executeQuery·p0.95:   1184.891 ms/op
                 executeQuery·p0.99:   1184.891 ms/op
                 executeQuery·p0.999:  1184.891 ms/op
                 executeQuery·p0.9999: 1184.891 ms/op
                 executeQuery·p1.00:   1184.891 ms/op

Iteration   3: 1146.094 ±(99.9%) 60.126 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1139.802 ms/op
                 executeQuery·p0.90:   1205.862 ms/op
                 executeQuery·p0.95:   1205.862 ms/op
                 executeQuery·p0.99:   1205.862 ms/op
                 executeQuery·p0.999:  1205.862 ms/op
                 executeQuery·p0.9999: 1205.862 ms/op
                 executeQuery·p1.00:   1205.862 ms/op

Iteration   4: 1147.929 ±(99.9%) 25.172 ms/op
                 executeQuery·p0.00:   1132.462 ms/op
                 executeQuery·p0.50:   1143.996 ms/op
                 executeQuery·p0.90:   1166.017 ms/op
                 executeQuery·p0.95:   1166.017 ms/op
                 executeQuery·p0.99:   1166.017 ms/op
                 executeQuery·p0.999:  1166.017 ms/op
                 executeQuery·p0.9999: 1166.017 ms/op
                 executeQuery·p1.00:   1166.017 ms/op

Iteration   5: 1152.909 ±(99.9%) 27.924 ms/op
                 executeQuery·p0.00:   1138.754 ms/op
                 executeQuery·p0.50:   1147.142 ms/op
                 executeQuery·p0.90:   1182.794 ms/op
                 executeQuery·p0.95:   1182.794 ms/op
                 executeQuery·p0.99:   1182.794 ms/op
                 executeQuery·p0.999:  1182.794 ms/op
                 executeQuery·p0.9999: 1182.794 ms/op
                 executeQuery·p1.00:   1182.794 ms/op


# Run progress: 31.41% complete, ETA 03:08:57
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1343.376 ±(99.9%) 292.738 ms/op
# Warmup Iteration   2: 1282.408 ±(99.9%) 150.503 ms/op
# Warmup Iteration   3: 1199.833 ±(99.9%) 31.749 ms/op
# Warmup Iteration   4: 1191.444 ±(99.9%) 14.126 ms/op
# Warmup Iteration   5: 1198.785 ±(99.9%) 49.199 ms/op
Iteration   1: 1227.358 ±(99.9%) 42.150 ms/op
                 executeQuery·p0.00:   1199.571 ms/op
                 executeQuery·p0.50:   1228.931 ms/op
                 executeQuery·p0.90:   1252.000 ms/op
                 executeQuery·p0.95:   1252.000 ms/op
                 executeQuery·p0.99:   1252.000 ms/op
                 executeQuery·p0.999:  1252.000 ms/op
                 executeQuery·p0.9999: 1252.000 ms/op
                 executeQuery·p1.00:   1252.000 ms/op

Iteration   2: 1220.542 ±(99.9%) 86.504 ms/op
                 executeQuery·p0.00:   1128.268 ms/op
                 executeQuery·p0.50:   1237.320 ms/op
                 executeQuery·p0.90:   1264.583 ms/op
                 executeQuery·p0.95:   1264.583 ms/op
                 executeQuery·p0.99:   1264.583 ms/op
                 executeQuery·p0.999:  1264.583 ms/op
                 executeQuery·p0.9999: 1264.583 ms/op
                 executeQuery·p1.00:   1264.583 ms/op

Iteration   3: 1234.960 ±(99.9%) 21.586 ms/op
                 executeQuery·p0.00:   1214.251 ms/op
                 executeQuery·p0.50:   1237.320 ms/op
                 executeQuery·p0.90:   1252.000 ms/op
                 executeQuery·p0.95:   1252.000 ms/op
                 executeQuery·p0.99:   1252.000 ms/op
                 executeQuery·p0.999:  1252.000 ms/op
                 executeQuery·p0.9999: 1252.000 ms/op
                 executeQuery·p1.00:   1252.000 ms/op

Iteration   4: 1241.514 ±(99.9%) 21.000 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1239.417 ms/op
                 executeQuery·p0.90:   1262.486 ms/op
                 executeQuery·p0.95:   1262.486 ms/op
                 executeQuery·p0.99:   1262.486 ms/op
                 executeQuery·p0.999:  1262.486 ms/op
                 executeQuery·p0.9999: 1262.486 ms/op
                 executeQuery·p1.00:   1262.486 ms/op

Iteration   5: 1243.349 ±(99.9%) 17.205 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1245.708 ms/op
                 executeQuery·p0.90:   1252.000 ms/op
                 executeQuery·p0.95:   1252.000 ms/op
                 executeQuery·p0.99:   1252.000 ms/op
                 executeQuery·p0.999:  1252.000 ms/op
                 executeQuery·p0.9999: 1252.000 ms/op
                 executeQuery·p1.00:   1252.000 ms/op


# Run progress: 32.05% complete, ETA 03:07:19
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1256.456 ±(99.9%) 265.303 ms/op
# Warmup Iteration   2: 1180.434 ±(99.9%) 40.859 ms/op
# Warmup Iteration   3: 1192.755 ±(99.9%) 54.506 ms/op
# Warmup Iteration   4: 1154.482 ±(99.9%) 18.437 ms/op
# Warmup Iteration   5: 1197.998 ±(99.9%) 75.587 ms/op
Iteration   1: 1175.978 ±(99.9%) 36.859 ms/op
                 executeQuery·p0.00:   1149.239 ms/op
                 executeQuery·p0.50:   1175.454 ms/op
                 executeQuery·p0.90:   1212.154 ms/op
                 executeQuery·p0.95:   1212.154 ms/op
                 executeQuery·p0.99:   1212.154 ms/op
                 executeQuery·p0.999:  1212.154 ms/op
                 executeQuery·p0.9999: 1212.154 ms/op
                 executeQuery·p1.00:   1212.154 ms/op

Iteration   2: 1137.967 ±(99.9%) 35.988 ms/op
                 executeQuery·p0.00:   1096.810 ms/op
                 executeQuery·p0.50:   1140.851 ms/op
                 executeQuery·p0.90:   1161.822 ms/op
                 executeQuery·p0.95:   1161.822 ms/op
                 executeQuery·p0.99:   1161.822 ms/op
                 executeQuery·p0.999:  1161.822 ms/op
                 executeQuery·p0.9999: 1161.822 ms/op
                 executeQuery·p1.00:   1161.822 ms/op

Iteration   3: 1148.715 ±(99.9%) 33.047 ms/op
                 executeQuery·p0.00:   1126.171 ms/op
                 executeQuery·p0.50:   1155.531 ms/op
                 executeQuery·p0.90:   1172.308 ms/op
                 executeQuery·p0.95:   1172.308 ms/op
                 executeQuery·p0.99:   1172.308 ms/op
                 executeQuery·p0.999:  1172.308 ms/op
                 executeQuery·p0.9999: 1172.308 ms/op
                 executeQuery·p1.00:   1172.308 ms/op

Iteration   4: 1175.454 ±(99.9%) 20.780 ms/op
                 executeQuery·p0.00:   1166.017 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1199.571 ms/op
                 executeQuery·p0.95:   1199.571 ms/op
                 executeQuery·p0.99:   1199.571 ms/op
                 executeQuery·p0.999:  1199.571 ms/op
                 executeQuery·p0.9999: 1199.571 ms/op
                 executeQuery·p1.00:   1199.571 ms/op

Iteration   5: 1140.720 ±(99.9%) 70.894 ms/op
                 executeQuery·p0.00:   1055.916 ms/op
                 executeQuery·p0.50:   1153.434 ms/op
                 executeQuery·p0.90:   1172.308 ms/op
                 executeQuery·p0.95:   1172.308 ms/op
                 executeQuery·p0.99:   1172.308 ms/op
                 executeQuery·p0.999:  1172.308 ms/op
                 executeQuery·p0.9999: 1172.308 ms/op
                 executeQuery·p1.00:   1172.308 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 120
  mean =   1179.447 ±(99.9%) 13.926 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 3 
    [1100.000, 1125.000) = 1 
    [1125.000, 1150.000) = 32 
    [1150.000, 1175.000) = 34 
    [1175.000, 1200.000) = 10 
    [1200.000, 1225.000) = 6 
    [1225.000, 1250.000) = 27 
    [1250.000, 1275.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =   1055.916 ms/op
     p(50.0000) =   1166.017 ms/op
     p(90.0000) =   1245.708 ms/op
     p(95.0000) =   1251.895 ms/op
     p(99.0000) =   1264.142 ms/op
     p(99.9000) =   1264.583 ms/op
     p(99.9900) =   1264.583 ms/op
     p(99.9990) =   1264.583 ms/op
     p(99.9999) =   1264.583 ms/op
    p(100.0000) =   1264.583 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384)

# Run progress: 32.69% complete, ETA 03:05:34
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1693.101 ±(99.9%) 595.231 ms/op
# Warmup Iteration   2: 1581.952 ±(99.9%) 51.223 ms/op
# Warmup Iteration   3: 1570.767 ±(99.9%) 49.202 ms/op
# Warmup Iteration   4: 1540.009 ±(99.9%) 56.488 ms/op
# Warmup Iteration   5: 1510.549 ±(99.9%) 19.033 ms/op
Iteration   1: 1515.642 ±(99.9%) 33.031 ms/op
                 executeQuery·p0.00:   1499.464 ms/op
                 executeQuery·p0.50:   1520.435 ms/op
                 executeQuery·p0.90:   1539.310 ms/op
                 executeQuery·p0.95:   1539.310 ms/op
                 executeQuery·p0.99:   1539.310 ms/op
                 executeQuery·p0.999:  1539.310 ms/op
                 executeQuery·p0.9999: 1539.310 ms/op
                 executeQuery·p1.00:   1539.310 ms/op

Iteration   2: 1512.646 ±(99.9%) 17.400 ms/op
                 executeQuery·p0.00:   1499.464 ms/op
                 executeQuery·p0.50:   1516.241 ms/op
                 executeQuery·p0.90:   1518.338 ms/op
                 executeQuery·p0.95:   1518.338 ms/op
                 executeQuery·p0.99:   1518.338 ms/op
                 executeQuery·p0.999:  1518.338 ms/op
                 executeQuery·p0.9999: 1518.338 ms/op
                 executeQuery·p1.00:   1518.338 ms/op

Iteration   3: 1537.512 ±(99.9%) 70.819 ms/op
                 executeQuery·p0.00:   1499.464 ms/op
                 executeQuery·p0.50:   1553.990 ms/op
                 executeQuery·p0.90:   1566.573 ms/op
                 executeQuery·p0.95:   1566.573 ms/op
                 executeQuery·p0.99:   1566.573 ms/op
                 executeQuery·p0.999:  1566.573 ms/op
                 executeQuery·p0.9999: 1566.573 ms/op
                 executeQuery·p1.00:   1566.573 ms/op

Iteration   4: 1550.844 ±(99.9%) 53.090 ms/op
                 executeQuery·p0.00:   1516.241 ms/op
                 executeQuery·p0.50:   1560.281 ms/op
                 executeQuery·p0.90:   1564.475 ms/op
                 executeQuery·p0.95:   1564.475 ms/op
                 executeQuery·p0.99:   1564.475 ms/op
                 executeQuery·p0.999:  1564.475 ms/op
                 executeQuery·p0.9999: 1564.475 ms/op
                 executeQuery·p1.00:   1564.475 ms/op

Iteration   5: 1532.419 ±(99.9%) 67.446 ms/op
                 executeQuery·p0.00:   1514.144 ms/op
                 executeQuery·p0.50:   1518.338 ms/op
                 executeQuery·p0.90:   1598.030 ms/op
                 executeQuery·p0.95:   1598.030 ms/op
                 executeQuery·p0.99:   1598.030 ms/op
                 executeQuery·p0.999:  1598.030 ms/op
                 executeQuery·p0.9999: 1598.030 ms/op
                 executeQuery·p1.00:   1598.030 ms/op


# Run progress: 33.33% complete, ETA 03:03:58
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1706.732 ±(99.9%) 631.867 ms/op
# Warmup Iteration   2: 1596.981 ±(99.9%) 161.685 ms/op
# Warmup Iteration   3: 1552.941 ±(99.9%) 160.051 ms/op
# Warmup Iteration   4: 1504.557 ±(99.9%) 2.525 ms/op
# Warmup Iteration   5: 1504.257 ±(99.9%) 2.305 ms/op
Iteration   1: 1504.856 ±(99.9%) 3.716 ms/op
                 executeQuery·p0.00:   1501.561 ms/op
                 executeQuery·p0.50:   1505.755 ms/op
                 executeQuery·p0.90:   1505.755 ms/op
                 executeQuery·p0.95:   1505.755 ms/op
                 executeQuery·p0.99:   1505.755 ms/op
                 executeQuery·p0.999:  1505.755 ms/op
                 executeQuery·p0.9999: 1505.755 ms/op
                 executeQuery·p1.00:   1505.755 ms/op

Iteration   2: 1557.834 ±(99.9%) 109.289 ms/op
                 executeQuery·p0.00:   1503.658 ms/op
                 executeQuery·p0.50:   1566.573 ms/op
                 executeQuery·p0.90:   1598.030 ms/op
                 executeQuery·p0.95:   1598.030 ms/op
                 executeQuery·p0.99:   1598.030 ms/op
                 executeQuery·p0.999:  1598.030 ms/op
                 executeQuery·p0.9999: 1598.030 ms/op
                 executeQuery·p1.00:   1598.030 ms/op

Iteration   3: 1554.339 ±(99.9%) 109.416 ms/op
                 executeQuery·p0.00:   1512.047 ms/op
                 executeQuery·p0.50:   1550.844 ms/op
                 executeQuery·p0.90:   1600.127 ms/op
                 executeQuery·p0.95:   1600.127 ms/op
                 executeQuery·p0.99:   1600.127 ms/op
                 executeQuery·p0.999:  1600.127 ms/op
                 executeQuery·p0.9999: 1600.127 ms/op
                 executeQuery·p1.00:   1600.127 ms/op

Iteration   4: 1550.494 ±(99.9%) 22.522 ms/op
                 executeQuery·p0.00:   1537.212 ms/op
                 executeQuery·p0.50:   1552.941 ms/op
                 executeQuery·p0.90:   1558.184 ms/op
                 executeQuery·p0.95:   1558.184 ms/op
                 executeQuery·p0.99:   1558.184 ms/op
                 executeQuery·p0.999:  1558.184 ms/op
                 executeQuery·p0.9999: 1558.184 ms/op
                 executeQuery·p1.00:   1558.184 ms/op

Iteration   5: 1526.727 ±(99.9%) 47.075 ms/op
                 executeQuery·p0.00:   1512.047 ms/op
                 executeQuery·p0.50:   1516.241 ms/op
                 executeQuery·p0.90:   1560.281 ms/op
                 executeQuery·p0.95:   1560.281 ms/op
                 executeQuery·p0.99:   1560.281 ms/op
                 executeQuery·p0.999:  1560.281 ms/op
                 executeQuery·p0.9999: 1560.281 ms/op
                 executeQuery·p1.00:   1560.281 ms/op


# Run progress: 33.97% complete, ETA 03:02:18
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1606.768 ±(99.9%) 359.402 ms/op
# Warmup Iteration   2: 1507.253 ±(99.9%) 27.772 ms/op
# Warmup Iteration   3: 1512.945 ±(99.9%) 2.525 ms/op
# Warmup Iteration   4: 1523.431 ±(99.9%) 37.968 ms/op
# Warmup Iteration   5: 1538.261 ±(99.9%) 58.306 ms/op
Iteration   1: 1564.475 ±(99.9%) 37.747 ms/op
                 executeQuery·p0.00:   1556.087 ms/op
                 executeQuery·p0.50:   1560.281 ms/op
                 executeQuery·p0.90:   1591.738 ms/op
                 executeQuery·p0.95:   1591.738 ms/op
                 executeQuery·p0.99:   1591.738 ms/op
                 executeQuery·p0.999:  1591.738 ms/op
                 executeQuery·p0.9999: 1591.738 ms/op
                 executeQuery·p1.00:   1591.738 ms/op

Iteration   2: 1529.423 ±(99.9%) 90.185 ms/op
                 executeQuery·p0.00:   1493.172 ms/op
                 executeQuery·p0.50:   1512.047 ms/op
                 executeQuery·p0.90:   1587.544 ms/op
                 executeQuery·p0.95:   1587.544 ms/op
                 executeQuery·p0.99:   1587.544 ms/op
                 executeQuery·p0.999:  1587.544 ms/op
                 executeQuery·p0.9999: 1587.544 ms/op
                 executeQuery·p1.00:   1587.544 ms/op

Iteration   3: 1500.662 ±(99.9%) 17.852 ms/op
                 executeQuery·p0.00:   1495.269 ms/op
                 executeQuery·p0.50:   1497.367 ms/op
                 executeQuery·p0.90:   1518.338 ms/op
                 executeQuery·p0.95:   1518.338 ms/op
                 executeQuery·p0.99:   1518.338 ms/op
                 executeQuery·p0.999:  1518.338 ms/op
                 executeQuery·p0.9999: 1518.338 ms/op
                 executeQuery·p1.00:   1518.338 ms/op

Iteration   4: 1539.310 ±(99.9%) 95.116 ms/op
                 executeQuery·p0.00:   1497.367 ms/op
                 executeQuery·p0.50:   1553.990 ms/op
                 executeQuery·p0.90:   1579.155 ms/op
                 executeQuery·p0.95:   1579.155 ms/op
                 executeQuery·p0.99:   1579.155 ms/op
                 executeQuery·p0.999:  1579.155 ms/op
                 executeQuery·p0.9999: 1579.155 ms/op
                 executeQuery·p1.00:   1579.155 ms/op

Iteration   5: 1550.145 ±(99.9%) 6.875 ms/op
                 executeQuery·p0.00:   1545.601 ms/op
                 executeQuery·p0.50:   1550.844 ms/op
                 executeQuery·p0.90:   1551.892 ms/op
                 executeQuery·p0.95:   1551.892 ms/op
                 executeQuery·p0.99:   1551.892 ms/op
                 executeQuery·p0.999:  1551.892 ms/op
                 executeQuery·p0.9999: 1551.892 ms/op
                 executeQuery·p1.00:   1551.892 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 98
  mean =   1533.917 ±(99.9%) 10.210 ms/op

  Histogram, ms/op:
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 0 
    [1475.000, 1500.000) = 14 
    [1500.000, 1525.000) = 36 
    [1525.000, 1550.000) = 12 
    [1550.000, 1575.000) = 27 
    [1575.000, 1600.000) = 8 
    [1600.000, 1625.000) = 1 
    [1625.000, 1650.000) = 0 
    [1650.000, 1675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1493.172 ms/op
     p(50.0000) =   1522.532 ms/op
     p(90.0000) =   1571.606 ms/op
     p(95.0000) =   1594.045 ms/op
     p(99.0000) =   1600.127 ms/op
     p(99.9000) =   1600.127 ms/op
     p(99.9900) =   1600.127 ms/op
     p(99.9990) =   1600.127 ms/op
     p(99.9999) =   1600.127 ms/op
    p(100.0000) =   1600.127 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536)

# Run progress: 34.62% complete, ETA 03:00:39
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1793.414 ±(99.9%) 600.147 ms/op
# Warmup Iteration   2: 1631.235 ±(99.9%) 72.065 ms/op
# Warmup Iteration   3: 1631.584 ±(99.9%) 81.995 ms/op
# Warmup Iteration   4: 1618.652 ±(99.9%) 61.049 ms/op
# Warmup Iteration   5: 1606.418 ±(99.9%) 8.317 ms/op
Iteration   1: 1642.070 ±(99.9%) 83.747 ms/op
                 executeQuery·p0.00:   1604.321 ms/op
                 executeQuery·p0.50:   1655.702 ms/op
                 executeQuery·p0.90:   1671.430 ms/op
                 executeQuery·p0.95:   1671.430 ms/op
                 executeQuery·p0.99:   1671.430 ms/op
                 executeQuery·p0.999:  1671.430 ms/op
                 executeQuery·p0.9999: 1671.430 ms/op
                 executeQuery·p1.00:   1671.430 ms/op

Iteration   2: 1614.458 ±(99.9%) 109.352 ms/op
                 executeQuery·p0.00:   1585.447 ms/op
                 executeQuery·p0.50:   1598.030 ms/op
                 executeQuery·p0.90:   1688.207 ms/op
                 executeQuery·p0.95:   1688.207 ms/op
                 executeQuery·p0.99:   1688.207 ms/op
                 executeQuery·p0.999:  1688.207 ms/op
                 executeQuery·p0.9999: 1688.207 ms/op
                 executeQuery·p1.00:   1688.207 ms/op

Iteration   3: 1617.254 ±(99.9%) 58.385 ms/op
                 executeQuery·p0.00:   1587.544 ms/op
                 executeQuery·p0.50:   1619.001 ms/op
                 executeQuery·p0.90:   1648.361 ms/op
                 executeQuery·p0.95:   1648.361 ms/op
                 executeQuery·p0.99:   1648.361 ms/op
                 executeQuery·p0.999:  1648.361 ms/op
                 executeQuery·p0.9999: 1648.361 ms/op
                 executeQuery·p1.00:   1648.361 ms/op

Iteration   4: 1637.177 ±(99.9%) 94.947 ms/op
                 executeQuery·p0.00:   1598.030 ms/op
                 executeQuery·p0.50:   1637.876 ms/op
                 executeQuery·p0.90:   1694.499 ms/op
                 executeQuery·p0.95:   1694.499 ms/op
                 executeQuery·p0.99:   1694.499 ms/op
                 executeQuery·p0.999:  1694.499 ms/op
                 executeQuery·p0.9999: 1694.499 ms/op
                 executeQuery·p1.00:   1694.499 ms/op

Iteration   5: 1609.215 ±(99.9%) 58.769 ms/op
                 executeQuery·p0.00:   1591.738 ms/op
                 executeQuery·p0.50:   1600.127 ms/op
                 executeQuery·p0.90:   1648.361 ms/op
                 executeQuery·p0.95:   1648.361 ms/op
                 executeQuery·p0.99:   1648.361 ms/op
                 executeQuery·p0.999:  1648.361 ms/op
                 executeQuery·p0.9999: 1648.361 ms/op
                 executeQuery·p1.00:   1648.361 ms/op


# Run progress: 35.26% complete, ETA 02:58:56
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1843.397 ±(99.9%) 783.146 ms/op
# Warmup Iteration   2: 1793.764 ±(99.9%) 90.010 ms/op
# Warmup Iteration   3: 1762.307 ±(99.9%) 29.207 ms/op
# Warmup Iteration   4: 1736.442 ±(99.9%) 86.109 ms/op
# Warmup Iteration   5: 1753.569 ±(99.9%) 53.177 ms/op
Iteration   1: 1654.303 ±(99.9%) 41.152 ms/op
                 executeQuery·p0.00:   1646.264 ms/op
                 executeQuery·p0.50:   1649.410 ms/op
                 executeQuery·p0.90:   1684.013 ms/op
                 executeQuery·p0.95:   1684.013 ms/op
                 executeQuery·p0.99:   1684.013 ms/op
                 executeQuery·p0.999:  1684.013 ms/op
                 executeQuery·p0.9999: 1684.013 ms/op
                 executeQuery·p1.00:   1684.013 ms/op

Iteration   2: 1670.382 ±(99.9%) 91.162 ms/op
                 executeQuery·p0.00:   1648.361 ms/op
                 executeQuery·p0.50:   1650.459 ms/op
                 executeQuery·p0.90:   1713.373 ms/op
                 executeQuery·p0.95:   1713.373 ms/op
                 executeQuery·p0.99:   1713.373 ms/op
                 executeQuery·p0.999:  1713.373 ms/op
                 executeQuery·p0.9999: 1713.373 ms/op
                 executeQuery·p1.00:   1713.373 ms/op

Iteration   3: 1744.481 ±(99.9%) 20.173 ms/op
                 executeQuery·p0.00:   1734.345 ms/op
                 executeQuery·p0.50:   1743.782 ms/op
                 executeQuery·p0.90:   1753.219 ms/op
                 executeQuery·p0.95:   1753.219 ms/op
                 executeQuery·p0.99:   1753.219 ms/op
                 executeQuery·p0.999:  1753.219 ms/op
                 executeQuery·p0.9999: 1753.219 ms/op
                 executeQuery·p1.00:   1753.219 ms/op

Iteration   4: 1727.704 ±(99.9%) 54.589 ms/op
                 executeQuery·p0.00:   1704.985 ms/op
                 executeQuery·p0.50:   1727.005 ms/op
                 executeQuery·p0.90:   1751.122 ms/op
                 executeQuery·p0.95:   1751.122 ms/op
                 executeQuery·p0.99:   1751.122 ms/op
                 executeQuery·p0.999:  1751.122 ms/op
                 executeQuery·p0.9999: 1751.122 ms/op
                 executeQuery·p1.00:   1751.122 ms/op

Iteration   5: 1675.624 ±(99.9%) 80.890 ms/op
                 executeQuery·p0.00:   1648.361 ms/op
                 executeQuery·p0.50:   1660.944 ms/op
                 executeQuery·p0.90:   1713.373 ms/op
                 executeQuery·p0.95:   1713.373 ms/op
                 executeQuery·p0.99:   1713.373 ms/op
                 executeQuery·p0.999:  1713.373 ms/op
                 executeQuery·p0.9999: 1713.373 ms/op
                 executeQuery·p1.00:   1713.373 ms/op


# Run progress: 35.90% complete, ETA 02:57:20
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1750.423 ±(99.9%) 442.363 ms/op
# Warmup Iteration   2: 1601.875 ±(99.9%) 70.806 ms/op
# Warmup Iteration   3: 1544.203 ±(99.9%) 47.291 ms/op
# Warmup Iteration   4: 1545.251 ±(99.9%) 46.665 ms/op
# Warmup Iteration   5: 1553.640 ±(99.9%) 64.143 ms/op
Iteration   1: 1541.407 ±(99.9%) 83.001 ms/op
                 executeQuery·p0.00:   1518.338 ms/op
                 executeQuery·p0.50:   1533.018 ms/op
                 executeQuery·p0.90:   1598.030 ms/op
                 executeQuery·p0.95:   1598.030 ms/op
                 executeQuery·p0.99:   1598.030 ms/op
                 executeQuery·p0.999:  1598.030 ms/op
                 executeQuery·p0.9999: 1598.030 ms/op
                 executeQuery·p1.00:   1598.030 ms/op

Iteration   2: 1593.486 ±(99.9%) 91.892 ms/op
                 executeQuery·p0.00:   1526.727 ms/op
                 executeQuery·p0.50:   1606.418 ms/op
                 executeQuery·p0.90:   1610.613 ms/op
                 executeQuery·p0.95:   1610.613 ms/op
                 executeQuery·p0.99:   1610.613 ms/op
                 executeQuery·p0.999:  1610.613 ms/op
                 executeQuery·p0.9999: 1610.613 ms/op
                 executeQuery·p1.00:   1610.613 ms/op

Iteration   3: 1643.468 ±(99.9%) 113.282 ms/op
                 executeQuery·p0.00:   1604.321 ms/op
                 executeQuery·p0.50:   1637.876 ms/op
                 executeQuery·p0.90:   1694.499 ms/op
                 executeQuery·p0.95:   1694.499 ms/op
                 executeQuery·p0.99:   1694.499 ms/op
                 executeQuery·p0.999:  1694.499 ms/op
                 executeQuery·p0.9999: 1694.499 ms/op
                 executeQuery·p1.00:   1694.499 ms/op

Iteration   4: 1592.437 ±(99.9%) 47.872 ms/op
                 executeQuery·p0.00:   1568.670 ms/op
                 executeQuery·p0.50:   1596.981 ms/op
                 executeQuery·p0.90:   1610.613 ms/op
                 executeQuery·p0.95:   1610.613 ms/op
                 executeQuery·p0.99:   1610.613 ms/op
                 executeQuery·p0.999:  1610.613 ms/op
                 executeQuery·p0.9999: 1610.613 ms/op
                 executeQuery·p1.00:   1610.613 ms/op

Iteration   5: 1608.865 ±(99.9%) 27.688 ms/op
                 executeQuery·p0.00:   1595.933 ms/op
                 executeQuery·p0.50:   1611.661 ms/op
                 executeQuery·p0.90:   1619.001 ms/op
                 executeQuery·p0.95:   1619.001 ms/op
                 executeQuery·p0.99:   1619.001 ms/op
                 executeQuery·p0.999:  1619.001 ms/op
                 executeQuery·p0.9999: 1619.001 ms/op
                 executeQuery·p1.00:   1619.001 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 90
  mean =   1638.155 ±(99.9%) 20.263 ms/op

  Histogram, ms/op:
    [1500.000, 1525.000) = 3 
    [1525.000, 1550.000) = 3 
    [1550.000, 1575.000) = 2 
    [1575.000, 1600.000) = 13 
    [1600.000, 1625.000) = 22 
    [1625.000, 1650.000) = 14 
    [1650.000, 1675.000) = 12 
    [1675.000, 1700.000) = 5 
    [1700.000, 1725.000) = 7 
    [1725.000, 1750.000) = 6 
    [1750.000, 1775.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1518.338 ms/op
     p(50.0000) =   1626.341 ms/op
     p(90.0000) =   1732.457 ms/op
     p(95.0000) =   1745.774 ms/op
     p(99.0000) =   1753.219 ms/op
     p(99.9000) =   1753.219 ms/op
     p(99.9900) =   1753.219 ms/op
     p(99.9990) =   1753.219 ms/op
     p(99.9999) =   1753.219 ms/op
    p(100.0000) =   1753.219 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 36.54% complete, ETA 02:55:31
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

3910.489 ±(99.9%) 6748.212 ms/op
# Warmup Iteration   2: 3663.025 ±(99.9%) 3203.183 ms/op
# Warmup Iteration   3: 3734.329 ±(99.9%) 2848.069 ms/op
# Warmup Iteration   4: 3572.149 ±(99.9%) 880.254 ms/op
# Warmup Iteration   5: 3503.642 ±(99.9%) 377.463 ms/op
Iteration   1: 3523.215 ±(99.9%) 882.468 ms/op
                 executeQuery·p0.00:   3485.467 ms/op
                 executeQuery·p0.50:   3506.438 ms/op
                 executeQuery·p0.90:   3577.741 ms/op
                 executeQuery·p0.95:   3577.741 ms/op
                 executeQuery·p0.99:   3577.741 ms/op
                 executeQuery·p0.999:  3577.741 ms/op
                 executeQuery·p0.9999: 3577.741 ms/op
                 executeQuery·p1.00:   3577.741 ms/op

Iteration   2: 3593.120 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   3569.353 ms/op
                 executeQuery·p0.50:   3594.519 ms/op
                 executeQuery·p0.90:   3615.490 ms/op
                 executeQuery·p0.95:   3615.490 ms/op
                 executeQuery·p0.99:   3615.490 ms/op
                 executeQuery·p0.999:  3615.490 ms/op
                 executeQuery·p0.9999: 3615.490 ms/op
                 executeQuery·p1.00:   3615.490 ms/op

Iteration   3: 3605.703 ±(99.9%) 1519.515 ms/op
                 executeQuery·p0.00:   3539.993 ms/op
                 executeQuery·p0.50:   3577.741 ms/op
                 executeQuery·p0.90:   3699.376 ms/op
                 executeQuery·p0.95:   3699.376 ms/op
                 executeQuery·p0.99:   3699.376 ms/op
                 executeQuery·p0.999:  3699.376 ms/op
                 executeQuery·p0.9999: 3699.376 ms/op
                 executeQuery·p1.00:   3699.376 ms/op

Iteration   4: 3565.158 ±(99.9%) 1581.202 ms/op
                 executeQuery·p0.00:   3493.855 ms/op
                 executeQuery·p0.50:   3539.993 ms/op
                 executeQuery·p0.90:   3661.627 ms/op
                 executeQuery·p0.95:   3661.627 ms/op
                 executeQuery·p0.99:   3661.627 ms/op
                 executeQuery·p0.999:  3661.627 ms/op
                 executeQuery·p0.9999: 3661.627 ms/op
                 executeQuery·p1.00:   3661.627 ms/op

Iteration   5: 3622.481 ±(99.9%) 1706.464 ms/op
                 executeQuery·p0.00:   3552.575 ms/op
                 executeQuery·p0.50:   3586.130 ms/op
                 executeQuery·p0.90:   3728.736 ms/op
                 executeQuery·p0.95:   3728.736 ms/op
                 executeQuery·p0.99:   3728.736 ms/op
                 executeQuery·p0.999:  3728.736 ms/op
                 executeQuery·p0.9999: 3728.736 ms/op
                 executeQuery·p1.00:   3728.736 ms/op


# Run progress: 37.18% complete, ETA 02:53:59
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

3924.470 ±(99.9%) 5837.774 ms/op
# Warmup Iteration   2: 3677.007 ±(99.9%) 4231.017 ms/op
# Warmup Iteration   3: 3538.594 ±(99.9%) 1369.539 ms/op
# Warmup Iteration   4: 3558.168 ±(99.9%) 1258.123 ms/op
# Warmup Iteration   5: 3506.438 ±(99.9%) 551.792 ms/op
Iteration   1: 3565.158 ±(99.9%) 1606.914 ms/op
                 executeQuery·p0.00:   3502.244 ms/op
                 executeQuery·p0.50:   3527.410 ms/op
                 executeQuery·p0.90:   3665.822 ms/op
                 executeQuery·p0.95:   3665.822 ms/op
                 executeQuery·p0.99:   3665.822 ms/op
                 executeQuery·p0.999:  3665.822 ms/op
                 executeQuery·p0.9999: 3665.822 ms/op
                 executeQuery·p1.00:   3665.822 ms/op

Iteration   2: 3545.585 ±(99.9%) 2531.327 ms/op
                 executeQuery·p0.00:   3443.524 ms/op
                 executeQuery·p0.50:   3489.661 ms/op
                 executeQuery·p0.90:   3703.570 ms/op
                 executeQuery·p0.95:   3703.570 ms/op
                 executeQuery·p0.99:   3703.570 ms/op
                 executeQuery·p0.999:  3703.570 ms/op
                 executeQuery·p0.9999: 3703.570 ms/op
                 executeQuery·p1.00:   3703.570 ms/op

Iteration   3: 3545.585 ±(99.9%) 618.502 ms/op
                 executeQuery·p0.00:   3514.827 ms/op
                 executeQuery·p0.50:   3539.993 ms/op
                 executeQuery·p0.90:   3581.936 ms/op
                 executeQuery·p0.95:   3581.936 ms/op
                 executeQuery·p0.99:   3581.936 ms/op
                 executeQuery·p0.999:  3581.936 ms/op
                 executeQuery·p0.9999: 3581.936 ms/op
                 executeQuery·p1.00:   3581.936 ms/op

Iteration   4: 3577.741 ±(99.9%) 902.154 ms/op
                 executeQuery·p0.00:   3535.798 ms/op
                 executeQuery·p0.50:   3565.158 ms/op
                 executeQuery·p0.90:   3632.267 ms/op
                 executeQuery·p0.95:   3632.267 ms/op
                 executeQuery·p0.99:   3632.267 ms/op
                 executeQuery·p0.999:  3632.267 ms/op
                 executeQuery·p0.9999: 3632.267 ms/op
                 executeQuery·p1.00:   3632.267 ms/op

Iteration   5: 3574.945 ±(99.9%) 1464.575 ms/op
                 executeQuery·p0.00:   3489.661 ms/op
                 executeQuery·p0.50:   3586.130 ms/op
                 executeQuery·p0.90:   3649.044 ms/op
                 executeQuery·p0.95:   3649.044 ms/op
                 executeQuery·p0.99:   3649.044 ms/op
                 executeQuery·p0.999:  3649.044 ms/op
                 executeQuery·p0.9999: 3649.044 ms/op
                 executeQuery·p1.00:   3649.044 ms/op


# Run progress: 37.82% complete, ETA 02:52:24
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    int arrowVectorLength = aggregation_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_2.TYPE_WIDTH);
    MemorySegment col_3_ms = oCtx.createMemorySegmentForAddress(aggregation_query_table_vc_3.getDataBufferAddress(), arrowVectorLength * aggregation_query_table_vc_3.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMD_Key_Vector_Int = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * aggregation_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.LongVector SIMD_Key_Vector_Long = (jdk.incubator.vector.LongVector) SIMD_Key_Vector_Int.castShape(oCtx.getVectorSpeciesLong(), 0);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_vector = SIMD_Key_Vector_Long.mul(Int_Hash_Function.hashConstantA);
        jdk.incubator.vector.LongVector SIMD_a_mul_key_plus_b_vector = SIMD_a_mul_key_vector.add(Int_Hash_Function.hashConstantB);
        long[] pre_hash_values = SIMD_a_mul_key_plus_b_vector.toLongArray();
        for (int simd_vector_i = 0; simd_vector_i < commonSIMDVectorLength; simd_vector_i++) {
            if (!inRangeSIMDMask.laneIsSet(simd_vector_i)) {
                continue;
            }
            int flattened_key = aggregation_query_table_vc_0.get(currentVectorOffset + simd_vector_i);
            long pre_hash_value = pre_hash_values[simd_vector_i] % Int_Hash_Function.hashConstantP;
            agg_0_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_1.get(currentVectorOffset + simd_vector_i));
            agg_1_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_2.get(currentVectorOffset + simd_vector_i));
            agg_2_sum_map.addToKeyOrPutIfNotExist(flattened_key, pre_hash_value, aggregation_query_table_vc_3.get(currentVectorOffset + simd_vector_i));
        }
    }
}
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    int groupKey = groupKeyIterator.next();
    long groupKeyPreHash = Int_Hash_Function.preHash(groupKey);
    blackhole.consume(groupKey);
    long ordinal_value = agg_0_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value);
    long ordinal_value_0 = agg_1_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_0);
    long ordinal_value_1 = agg_2_sum_map.get(groupKey, groupKeyPreHash);
    blackhole.consume(ordinal_value_1);
}
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

3899.305 ±(99.9%) 4452.194 ms/op
# Warmup Iteration   2: 3643.452 ±(99.9%) 2877.725 ms/op
# Warmup Iteration   3: 3647.646 ±(99.9%) 3530.979 ms/op
# Warmup Iteration   4: 3481.272 ±(99.9%) 2880.436 ms/op
# Warmup Iteration   5: 3527.410 ±(99.9%) 229.559 ms/op
Iteration   1: 3538.594 ±(99.9%) 2790.960 ms/op
                 executeQuery·p0.00:   3409.969 ms/op
                 executeQuery·p0.50:   3498.050 ms/op
                 executeQuery·p0.90:   3707.765 ms/op
                 executeQuery·p0.95:   3707.765 ms/op
                 executeQuery·p0.99:   3707.765 ms/op
                 executeQuery·p0.999:  3707.765 ms/op
                 executeQuery·p0.9999: 3707.765 ms/op
                 executeQuery·p1.00:   3707.765 ms/op

Iteration   2: 3576.343 ±(99.9%) 3110.443 ms/op
                 executeQuery·p0.00:   3451.912 ms/op
                 executeQuery·p0.50:   3506.438 ms/op
                 executeQuery·p0.90:   3770.679 ms/op
                 executeQuery·p0.95:   3770.679 ms/op
                 executeQuery·p0.99:   3770.679 ms/op
                 executeQuery·p0.999:  3770.679 ms/op
                 executeQuery·p0.9999: 3770.679 ms/op
                 executeQuery·p1.00:   3770.679 ms/op

Iteration   3: 3572.149 ±(99.9%) 1504.023 ms/op
                 executeQuery·p0.00:   3510.632 ms/op
                 executeQuery·p0.50:   3539.993 ms/op
                 executeQuery·p0.90:   3665.822 ms/op
                 executeQuery·p0.95:   3665.822 ms/op
                 executeQuery·p0.99:   3665.822 ms/op
                 executeQuery·p0.999:  3665.822 ms/op
                 executeQuery·p0.9999: 3665.822 ms/op
                 executeQuery·p1.00:   3665.822 ms/op

Iteration   4: 3539.993 ±(99.9%) 667.083 ms/op
                 executeQuery·p0.00:   3514.827 ms/op
                 executeQuery·p0.50:   3523.215 ms/op
                 executeQuery·p0.90:   3581.936 ms/op
                 executeQuery·p0.95:   3581.936 ms/op
                 executeQuery·p0.99:   3581.936 ms/op
                 executeQuery·p0.999:  3581.936 ms/op
                 executeQuery·p0.9999: 3581.936 ms/op
                 executeQuery·p1.00:   3581.936 ms/op

Iteration   5: 3471.486 ±(99.9%) 1115.019 ms/op
                 executeQuery·p0.00:   3401.581 ms/op
                 executeQuery·p0.50:   3498.050 ms/op
                 executeQuery·p0.90:   3514.827 ms/op
                 executeQuery·p0.95:   3514.827 ms/op
                 executeQuery·p0.99:   3514.827 ms/op
                 executeQuery·p0.999:  3514.827 ms/op
                 executeQuery·p0.9999: 3514.827 ms/op
                 executeQuery·p1.00:   3514.827 ms/op



Result "benchmarks.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery":
  N = 45
  mean =   3561.151 ±(99.9%) 44.155 ms/op

  Histogram, ms/op:
    [3400.000, 3425.000) = 2 
    [3425.000, 3450.000) = 1 
    [3450.000, 3475.000) = 1 
    [3475.000, 3500.000) = 6 
    [3500.000, 3525.000) = 8 
    [3525.000, 3550.000) = 6 
    [3550.000, 3575.000) = 3 
    [3575.000, 3600.000) = 7 
    [3600.000, 3625.000) = 1 
    [3625.000, 3650.000) = 2 
    [3650.000, 3675.000) = 3 
    [3675.000, 3700.000) = 1 
    [3700.000, 3725.000) = 2 
    [3725.000, 3750.000) = 1 
    [3750.000, 3775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3401.581 ms/op
     p(50.0000) =   3539.993 ms/op
     p(90.0000) =   3701.054 ms/op
     p(95.0000) =   3722.445 ms/op
     p(99.0000) =   3770.679 ms/op
     p(99.9000) =   3770.679 ms/op
     p(99.9900) =   3770.679 ms/op
     p(99.9990) =   3770.679 ms/op
     p(99.9999) =   3770.679 ms/op
    p(100.0000) =   3770.679 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1)

# Run progress: 38.46% complete, ETA 02:50:49
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

384.827 ±(99.9%) 6.096 ms/op
# Warmup Iteration   2: 378.288 ±(99.9%) 2.892 ms/op
# Warmup Iteration   3: 380.799 ±(99.9%) 0.387 ms/op
# Warmup Iteration   4: 475.660 ±(99.9%) 13.172 ms/op
# Warmup Iteration   5: 478.183 ±(99.9%) 2.835 ms/op
Iteration   1: 478.314 ±(99.9%) 3.306 ms/op
                 executeQuery·p0.00:   469.238 ms/op
                 executeQuery·p0.50:   478.413 ms/op
                 executeQuery·p0.90:   482.345 ms/op
                 executeQuery·p0.95:   486.015 ms/op
                 executeQuery·p0.99:   486.015 ms/op
                 executeQuery·p0.999:  486.015 ms/op
                 executeQuery·p0.9999: 486.015 ms/op
                 executeQuery·p1.00:   486.015 ms/op

Iteration   2: 479.101 ±(99.9%) 2.513 ms/op
                 executeQuery·p0.00:   476.054 ms/op
                 executeQuery·p0.50:   478.151 ms/op
                 executeQuery·p0.90:   484.023 ms/op
                 executeQuery·p0.95:   485.491 ms/op
                 executeQuery·p0.99:   485.491 ms/op
                 executeQuery·p0.999:  485.491 ms/op
                 executeQuery·p0.9999: 485.491 ms/op
                 executeQuery·p1.00:   485.491 ms/op

Iteration   3: 478.249 ±(99.9%) 1.221 ms/op
                 executeQuery·p0.00:   476.054 ms/op
                 executeQuery·p0.50:   478.151 ms/op
                 executeQuery·p0.90:   480.195 ms/op
                 executeQuery·p0.95:   481.296 ms/op
                 executeQuery·p0.99:   481.296 ms/op
                 executeQuery·p0.999:  481.296 ms/op
                 executeQuery·p0.9999: 481.296 ms/op
                 executeQuery·p1.00:   481.296 ms/op

Iteration   4: 478.314 ±(99.9%) 0.542 ms/op
                 executeQuery·p0.00:   477.102 ms/op
                 executeQuery·p0.50:   478.413 ms/op
                 executeQuery·p0.90:   478.832 ms/op
                 executeQuery·p0.95:   479.199 ms/op
                 executeQuery·p0.99:   479.199 ms/op
                 executeQuery·p0.999:  479.199 ms/op
                 executeQuery·p0.9999: 479.199 ms/op
                 executeQuery·p1.00:   479.199 ms/op

Iteration   5: 478.380 ±(99.9%) 0.476 ms/op
                 executeQuery·p0.00:   477.626 ms/op
                 executeQuery·p0.50:   478.675 ms/op
                 executeQuery·p0.90:   478.832 ms/op
                 executeQuery·p0.95:   479.199 ms/op
                 executeQuery·p0.99:   479.199 ms/op
                 executeQuery·p0.999:  479.199 ms/op
                 executeQuery·p0.9999: 479.199 ms/op
                 executeQuery·p1.00:   479.199 ms/op


# Run progress: 39.10% complete, ETA 02:48:55
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

381.558 ±(99.9%) 3.928 ms/op
# Warmup Iteration   2: 380.992 ±(99.9%) 1.316 ms/op
# Warmup Iteration   3: 379.971 ±(99.9%) 0.518 ms/op
# Warmup Iteration   4: 463.569 ±(99.9%) 34.793 ms/op
# Warmup Iteration   5: 478.544 ±(99.9%) 0.945 ms/op
Iteration   1: 478.216 ±(99.9%) 0.643 ms/op
                 executeQuery·p0.00:   476.054 ms/op
                 executeQuery·p0.50:   478.151 ms/op
                 executeQuery·p0.90:   478.675 ms/op
                 executeQuery·p0.95:   478.675 ms/op
                 executeQuery·p0.99:   478.675 ms/op
                 executeQuery·p0.999:  478.675 ms/op
                 executeQuery·p0.9999: 478.675 ms/op
                 executeQuery·p1.00:   478.675 ms/op

Iteration   2: 478.544 ±(99.9%) 1.329 ms/op
                 executeQuery·p0.00:   478.151 ms/op
                 executeQuery·p0.50:   478.151 ms/op
                 executeQuery·p0.90:   480.091 ms/op
                 executeQuery·p0.95:   483.394 ms/op
                 executeQuery·p0.99:   483.394 ms/op
                 executeQuery·p0.999:  483.394 ms/op
                 executeQuery·p0.9999: 483.394 ms/op
                 executeQuery·p1.00:   483.394 ms/op

Iteration   3: 478.118 ±(99.9%) 0.567 ms/op
                 executeQuery·p0.00:   476.578 ms/op
                 executeQuery·p0.50:   478.151 ms/op
                 executeQuery·p0.90:   478.675 ms/op
                 executeQuery·p0.95:   478.675 ms/op
                 executeQuery·p0.99:   478.675 ms/op
                 executeQuery·p0.999:  478.675 ms/op
                 executeQuery·p0.9999: 478.675 ms/op
                 executeQuery·p1.00:   478.675 ms/op

Iteration   4: 478.872 ±(99.9%) 1.838 ms/op
                 executeQuery·p0.00:   477.626 ms/op
                 executeQuery·p0.50:   478.151 ms/op
                 executeQuery·p0.90:   482.817 ms/op
                 executeQuery·p0.95:   483.918 ms/op
                 executeQuery·p0.99:   483.918 ms/op
                 executeQuery·p0.999:  483.918 ms/op
                 executeQuery·p0.9999: 483.918 ms/op
                 executeQuery·p1.00:   483.918 ms/op

Iteration   5: 479.101 ±(99.9%) 2.199 ms/op
                 executeQuery·p0.00:   478.151 ms/op
                 executeQuery·p0.50:   478.151 ms/op
                 executeQuery·p0.90:   483.446 ms/op
                 executeQuery·p0.95:   486.015 ms/op
                 executeQuery·p0.99:   486.015 ms/op
                 executeQuery·p0.999:  486.015 ms/op
                 executeQuery·p0.9999: 486.015 ms/op
                 executeQuery·p1.00:   486.015 ms/op


# Run progress: 39.74% complete, ETA 02:47:07
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

382.237 ±(99.9%) 4.722 ms/op
# Warmup Iteration   2: 381.737 ±(99.9%) 0.981 ms/op
# Warmup Iteration   3: 382.678 ±(99.9%) 2.240 ms/op
# Warmup Iteration   4: 475.036 ±(99.9%) 26.840 ms/op
# Warmup Iteration   5: 481.358 ±(99.9%) 3.009 ms/op
Iteration   1: 479.939 ±(99.9%) 0.677 ms/op
                 executeQuery·p0.00:   479.199 ms/op
                 executeQuery·p0.50:   479.724 ms/op
                 executeQuery·p0.90:   480.667 ms/op
                 executeQuery·p0.95:   482.345 ms/op
                 executeQuery·p0.99:   482.345 ms/op
                 executeQuery·p0.999:  482.345 ms/op
                 executeQuery·p0.9999: 482.345 ms/op
                 executeQuery·p1.00:   482.345 ms/op

Iteration   2: 479.754 ±(99.9%) 0.124 ms/op
                 executeQuery·p0.00:   479.724 ms/op
                 executeQuery·p0.50:   479.724 ms/op
                 executeQuery·p0.90:   479.828 ms/op
                 executeQuery·p0.95:   480.248 ms/op
                 executeQuery·p0.99:   480.248 ms/op
                 executeQuery·p0.999:  480.248 ms/op
                 executeQuery·p0.9999: 480.248 ms/op
                 executeQuery·p1.00:   480.248 ms/op

Iteration   3: 479.785 ±(99.9%) 0.306 ms/op
                 executeQuery·p0.00:   479.199 ms/op
                 executeQuery·p0.50:   479.724 ms/op
                 executeQuery·p0.90:   480.353 ms/op
                 executeQuery·p0.95:   480.772 ms/op
                 executeQuery·p0.99:   480.772 ms/op
                 executeQuery·p0.999:  480.772 ms/op
                 executeQuery·p0.9999: 480.772 ms/op
                 executeQuery·p1.00:   480.772 ms/op

Iteration   4: 479.785 ±(99.9%) 0.595 ms/op
                 executeQuery·p0.00:   478.675 ms/op
                 executeQuery·p0.50:   479.724 ms/op
                 executeQuery·p0.90:   480.562 ms/op
                 executeQuery·p0.95:   481.821 ms/op
                 executeQuery·p0.99:   481.821 ms/op
                 executeQuery·p0.999:  481.821 ms/op
                 executeQuery·p0.9999: 481.821 ms/op
                 executeQuery·p1.00:   481.821 ms/op

Iteration   5: 480.248 ±(99.9%) 2.082 ms/op
                 executeQuery·p0.00:   477.626 ms/op
                 executeQuery·p0.50:   479.724 ms/op
                 executeQuery·p0.90:   484.547 ms/op
                 executeQuery·p0.95:   487.064 ms/op
                 executeQuery·p0.99:   487.064 ms/op
                 executeQuery·p0.999:  487.064 ms/op
                 executeQuery·p0.9999: 487.064 ms/op
                 executeQuery·p1.00:   487.064 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 245
  mean =    479.000 ±(99.9%) 0.348 ms/op

  Histogram, ms/op:
    [460.000, 462.500) = 0 
    [462.500, 465.000) = 0 
    [465.000, 467.500) = 0 
    [467.500, 470.000) = 1 
    [470.000, 472.500) = 0 
    [472.500, 475.000) = 0 
    [475.000, 477.500) = 11 
    [477.500, 480.000) = 204 
    [480.000, 482.500) = 21 
    [482.500, 485.000) = 4 
    [485.000, 487.500) = 4 

  Percentiles, ms/op:
      p(0.0000) =    469.238 ms/op
     p(50.0000) =    478.675 ms/op
     p(90.0000) =    480.248 ms/op
     p(95.0000) =    481.821 ms/op
     p(99.0000) =    486.015 ms/op
     p(99.9000) =    487.064 ms/op
     p(99.9900) =    487.064 ms/op
     p(99.9990) =    487.064 ms/op
     p(99.9999) =    487.064 ms/op
    p(100.0000) =    487.064 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4)

# Run progress: 40.38% complete, ETA 02:45:18
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

654.486 ±(99.9%) 15.096 ms/op
# Warmup Iteration   2: 649.855 ±(99.9%) 3.296 ms/op
# Warmup Iteration   3: 650.359 ±(99.9%) 4.647 ms/op
# Warmup Iteration   4: 648.101 ±(99.9%) 1.083 ms/op
# Warmup Iteration   5: 695.119 ±(99.9%) 74.848 ms/op
Iteration   1: 768.956 ±(99.9%) 2.582 ms/op
                 executeQuery·p0.00:   767.558 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   773.325 ms/op
                 executeQuery·p0.95:   774.898 ms/op
                 executeQuery·p0.99:   774.898 ms/op
                 executeQuery·p0.999:  774.898 ms/op
                 executeQuery·p0.9999: 774.898 ms/op
                 executeQuery·p1.00:   774.898 ms/op

Iteration   2: 769.043 ±(99.9%) 1.455 ms/op
                 executeQuery·p0.00:   767.558 ms/op
                 executeQuery·p0.50:   769.130 ms/op
                 executeQuery·p0.90:   770.703 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   3: 770.004 ±(99.9%) 2.168 ms/op
                 executeQuery·p0.00:   767.558 ms/op
                 executeQuery·p0.50:   770.179 ms/op
                 executeQuery·p0.90:   772.486 ms/op
                 executeQuery·p0.95:   772.801 ms/op
                 executeQuery·p0.99:   772.801 ms/op
                 executeQuery·p0.999:  772.801 ms/op
                 executeQuery·p0.9999: 772.801 ms/op
                 executeQuery·p1.00:   772.801 ms/op

Iteration   4: 770.791 ±(99.9%) 6.541 ms/op
                 executeQuery·p0.00:   767.558 ms/op
                 executeQuery·p0.50:   769.130 ms/op
                 executeQuery·p0.90:   782.028 ms/op
                 executeQuery·p0.95:   786.432 ms/op
                 executeQuery·p0.99:   786.432 ms/op
                 executeQuery·p0.999:  786.432 ms/op
                 executeQuery·p0.9999: 786.432 ms/op
                 executeQuery·p1.00:   786.432 ms/op

Iteration   5: 767.033 ±(99.9%) 4.774 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   773.220 ms/op
                 executeQuery·p0.95:   773.849 ms/op
                 executeQuery·p0.99:   773.849 ms/op
                 executeQuery·p0.999:  773.849 ms/op
                 executeQuery·p0.9999: 773.849 ms/op
                 executeQuery·p1.00:   773.849 ms/op


# Run progress: 41.03% complete, ETA 02:43:33
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

651.515 ±(99.9%) 10.658 ms/op
# Warmup Iteration   2: 647.408 ±(99.9%) 2.393 ms/op
# Warmup Iteration   3: 647.617 ±(99.9%) 1.815 ms/op
# Warmup Iteration   4: 648.585 ±(99.9%) 2.383 ms/op
# Warmup Iteration   5: 693.983 ±(99.9%) 75.229 ms/op
Iteration   1: 768.702 ±(99.9%) 0.437 ms/op
                 executeQuery·p0.00:   768.606 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   769.445 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op

Iteration   2: 768.988 ±(99.9%) 1.341 ms/op
                 executeQuery·p0.00:   768.606 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   771.333 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   3: 768.892 ±(99.9%) 0.677 ms/op
                 executeQuery·p0.00:   768.606 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   769.655 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op

Iteration   4: 769.750 ±(99.9%) 1.515 ms/op
                 executeQuery·p0.00:   768.606 ms/op
                 executeQuery·p0.50:   769.655 ms/op
                 executeQuery·p0.90:   771.542 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   5: 769.464 ±(99.9%) 1.267 ms/op
                 executeQuery·p0.00:   768.606 ms/op
                 executeQuery·p0.50:   769.655 ms/op
                 executeQuery·p0.90:   771.333 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op


# Run progress: 41.67% complete, ETA 02:41:42
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

651.488 ±(99.9%) 10.155 ms/op
# Warmup Iteration   2: 650.924 ±(99.9%) 2.413 ms/op
# Warmup Iteration   3: 650.762 ±(99.9%) 5.558 ms/op
# Warmup Iteration   4: 647.455 ±(99.9%) 2.090 ms/op
# Warmup Iteration   5: 713.469 ±(99.9%) 75.702 ms/op
Iteration   1: 766.604 ±(99.9%) 0.437 ms/op
                 executeQuery·p0.00:   766.509 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   767.348 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   2: 766.986 ±(99.9%) 1.189 ms/op
                 executeQuery·p0.00:   766.509 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   768.606 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   3: 767.844 ±(99.9%) 3.376 ms/op
                 executeQuery·p0.00:   766.509 ms/op
                 executeQuery·p0.50:   767.558 ms/op
                 executeQuery·p0.90:   773.639 ms/op
                 executeQuery·p0.95:   774.898 ms/op
                 executeQuery·p0.99:   774.898 ms/op
                 executeQuery·p0.999:  774.898 ms/op
                 executeQuery·p0.9999: 774.898 ms/op
                 executeQuery·p1.00:   774.898 ms/op

Iteration   4: 767.081 ±(99.9%) 1.355 ms/op
                 executeQuery·p0.00:   766.509 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   769.235 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op

Iteration   5: 768.130 ±(99.9%) 4.648 ms/op
                 executeQuery·p0.00:   766.509 ms/op
                 executeQuery·p0.50:   767.558 ms/op
                 executeQuery·p0.90:   776.156 ms/op
                 executeQuery·p0.95:   778.043 ms/op
                 executeQuery·p0.99:   778.043 ms/op
                 executeQuery·p0.999:  778.043 ms/op
                 executeQuery·p0.9999: 778.043 ms/op
                 executeQuery·p1.00:   778.043 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 170
  mean =    768.569 ±(99.9%) 0.625 ms/op

  Histogram, ms/op:
    [750.000, 752.500) = 0 
    [752.500, 755.000) = 0 
    [755.000, 757.500) = 0 
    [757.500, 760.000) = 1 
    [760.000, 762.500) = 0 
    [762.500, 765.000) = 0 
    [765.000, 767.500) = 41 
    [767.500, 770.000) = 104 
    [770.000, 772.500) = 18 
    [772.500, 775.000) = 4 
    [775.000, 777.500) = 0 
    [777.500, 780.000) = 1 
    [780.000, 782.500) = 0 
    [782.500, 785.000) = 0 
    [785.000, 787.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    758.120 ms/op
     p(50.0000) =    768.606 ms/op
     p(90.0000) =    770.703 ms/op
     p(95.0000) =    771.752 ms/op
     p(99.0000) =    780.476 ms/op
     p(99.9000) =    786.432 ms/op
     p(99.9900) =    786.432 ms/op
     p(99.9990) =    786.432 ms/op
     p(99.9999) =    786.432 ms/op
    p(100.0000) =    786.432 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 42.31% complete, ETA 02:39:51
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

655.622 ±(99.9%) 14.169 ms/op
# Warmup Iteration   2: 653.585 ±(99.9%) 3.491 ms/op
# Warmup Iteration   3: 650.359 ±(99.9%) 3.039 ms/op
# Warmup Iteration   4: 650.520 ±(99.9%) 3.383 ms/op
# Warmup Iteration   5: 702.546 ±(99.9%) 67.063 ms/op
Iteration   1: 761.933 ±(99.9%) 3.684 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   761.266 ms/op
                 executeQuery·p0.90:   766.299 ms/op
                 executeQuery·p0.95:   766.509 ms/op
                 executeQuery·p0.99:   766.509 ms/op
                 executeQuery·p0.999:  766.509 ms/op
                 executeQuery·p0.9999: 766.509 ms/op
                 executeQuery·p1.00:   766.509 ms/op

Iteration   2: 759.836 ±(99.9%) 3.797 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   759.169 ms/op
                 executeQuery·p0.90:   764.202 ms/op
                 executeQuery·p0.95:   764.412 ms/op
                 executeQuery·p0.99:   764.412 ms/op
                 executeQuery·p0.999:  764.412 ms/op
                 executeQuery·p0.9999: 764.412 ms/op
                 executeQuery·p1.00:   764.412 ms/op

Iteration   3: 759.868 ±(99.9%) 3.102 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   759.169 ms/op
                 executeQuery·p0.90:   764.517 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op

Iteration   4: 761.004 ±(99.9%) 2.927 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   761.266 ms/op
                 executeQuery·p0.90:   765.565 ms/op
                 executeQuery·p0.95:   766.509 ms/op
                 executeQuery·p0.99:   766.509 ms/op
                 executeQuery·p0.999:  766.509 ms/op
                 executeQuery·p0.9999: 766.509 ms/op
                 executeQuery·p1.00:   766.509 ms/op

Iteration   5: 759.169 ±(99.9%) 3.530 ms/op
                 executeQuery·p0.00:   754.975 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   762.734 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op


# Run progress: 42.95% complete, ETA 02:38:04
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

654.224 ±(99.9%) 22.528 ms/op
# Warmup Iteration   2: 652.537 ±(99.9%) 5.263 ms/op
# Warmup Iteration   3: 656.731 ±(99.9%) 6.181 ms/op
# Warmup Iteration   4: 653.827 ±(99.9%) 5.512 ms/op
# Warmup Iteration   5: 706.478 ±(99.9%) 69.309 ms/op
Iteration   1: 762.839 ±(99.9%) 2.255 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   762.315 ms/op
                 executeQuery·p0.90:   766.194 ms/op
                 executeQuery·p0.95:   766.509 ms/op
                 executeQuery·p0.99:   766.509 ms/op
                 executeQuery·p0.999:  766.509 ms/op
                 executeQuery·p0.9999: 766.509 ms/op
                 executeQuery·p1.00:   766.509 ms/op

Iteration   2: 765.111 ±(99.9%) 2.882 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   764.936 ms/op
                 executeQuery·p0.90:   768.606 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   3: 760.567 ±(99.9%) 3.102 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   764.097 ms/op
                 executeQuery·p0.95:   764.412 ms/op
                 executeQuery·p0.99:   764.412 ms/op
                 executeQuery·p0.999:  764.412 ms/op
                 executeQuery·p0.9999: 764.412 ms/op
                 executeQuery·p1.00:   764.412 ms/op

Iteration   4: 759.519 ±(99.9%) 3.637 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   759.169 ms/op
                 executeQuery·p0.90:   764.831 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op

Iteration   5: 760.043 ±(99.9%) 1.497 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   762.000 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op


# Run progress: 43.59% complete, ETA 02:36:17
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

668.555 ±(99.9%) 25.376 ms/op
# Warmup Iteration   2: 659.030 ±(99.9%) 1.343 ms/op
# Warmup Iteration   3: 660.603 ±(99.9%) 1.538 ms/op
# Warmup Iteration   4: 663.265 ±(99.9%) 5.464 ms/op
# Warmup Iteration   5: 698.526 ±(99.9%) 60.742 ms/op
Iteration   1: 762.140 ±(99.9%) 3.877 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   762.315 ms/op
                 executeQuery·p0.90:   766.928 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   2: 760.043 ±(99.9%) 5.244 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   759.169 ms/op
                 executeQuery·p0.90:   767.662 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   3: 758.557 ±(99.9%) 2.021 ms/op
                 executeQuery·p0.00:   757.072 ms/op
                 executeQuery·p0.50:   758.120 ms/op
                 executeQuery·p0.90:   761.266 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op

Iteration   4: 758.732 ±(99.9%) 2.323 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   758.645 ms/op
                 executeQuery·p0.90:   761.266 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op

Iteration   5: 760.130 ±(99.9%) 3.643 ms/op
                 executeQuery·p0.00:   757.072 ms/op
                 executeQuery·p0.50:   759.169 ms/op
                 executeQuery·p0.90:   764.831 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 178
  mean =    760.630 ±(99.9%) 0.743 ms/op

  Histogram, ms/op:
    [750.000, 751.250) = 0 
    [751.250, 752.500) = 0 
    [752.500, 753.750) = 0 
    [753.750, 755.000) = 3 
    [755.000, 756.250) = 10 
    [756.250, 757.500) = 15 
    [757.500, 758.750) = 16 
    [758.750, 760.000) = 29 
    [760.000, 761.250) = 29 
    [761.250, 762.500) = 33 
    [762.500, 763.750) = 17 
    [763.750, 765.000) = 8 
    [765.000, 766.250) = 10 
    [766.250, 767.500) = 4 
    [767.500, 768.750) = 4 

  Percentiles, ms/op:
      p(0.0000) =    754.975 ms/op
     p(50.0000) =    760.218 ms/op
     p(90.0000) =    765.460 ms/op
     p(95.0000) =    765.513 ms/op
     p(99.0000) =    768.606 ms/op
     p(99.9000) =    768.606 ms/op
     p(99.9900) =    768.606 ms/op
     p(99.9990) =    768.606 ms/op
     p(99.9999) =    768.606 ms/op
    p(100.0000) =    768.606 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64)

# Run progress: 44.23% complete, ETA 02:34:32
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

598.887 ±(99.9%) 9.438 ms/op
# Warmup Iteration   2: 597.239 ±(99.9%) 2.353 ms/op
# Warmup Iteration   3: 602.032 ±(99.9%) 8.935 ms/op
# Warmup Iteration   4: 597.913 ±(99.9%) 6.296 ms/op
# Warmup Iteration   5: 683.591 ±(99.9%) 34.907 ms/op
Iteration   1: 703.158 ±(99.9%) 19.084 ms/op
                 executeQuery·p0.00:   694.157 ms/op
                 executeQuery·p0.50:   698.352 ms/op
                 executeQuery·p0.90:   737.464 ms/op
                 executeQuery·p0.95:   746.586 ms/op
                 executeQuery·p0.99:   746.586 ms/op
                 executeQuery·p0.999:  746.586 ms/op
                 executeQuery·p0.9999: 746.586 ms/op
                 executeQuery·p1.00:   746.586 ms/op

Iteration   2: 696.167 ±(99.9%) 3.161 ms/op
                 executeQuery·p0.00:   694.157 ms/op
                 executeQuery·p0.50:   695.206 ms/op
                 executeQuery·p0.90:   700.868 ms/op
                 executeQuery·p0.95:   701.497 ms/op
                 executeQuery·p0.99:   701.497 ms/op
                 executeQuery·p0.999:  701.497 ms/op
                 executeQuery·p0.9999: 701.497 ms/op
                 executeQuery·p1.00:   701.497 ms/op

Iteration   3: 695.643 ±(99.9%) 2.714 ms/op
                 executeQuery·p0.00:   694.157 ms/op
                 executeQuery·p0.50:   695.206 ms/op
                 executeQuery·p0.90:   700.239 ms/op
                 executeQuery·p0.95:   701.497 ms/op
                 executeQuery·p0.99:   701.497 ms/op
                 executeQuery·p0.999:  701.497 ms/op
                 executeQuery·p0.9999: 701.497 ms/op
                 executeQuery·p1.00:   701.497 ms/op

Iteration   4: 696.080 ±(99.9%) 2.350 ms/op
                 executeQuery·p0.00:   694.157 ms/op
                 executeQuery·p0.50:   695.206 ms/op
                 executeQuery·p0.90:   699.086 ms/op
                 executeQuery·p0.95:   699.400 ms/op
                 executeQuery·p0.99:   699.400 ms/op
                 executeQuery·p0.999:  699.400 ms/op
                 executeQuery·p0.9999: 699.400 ms/op
                 executeQuery·p1.00:   699.400 ms/op

Iteration   5: 698.614 ±(99.9%) 3.536 ms/op
                 executeQuery·p0.00:   695.206 ms/op
                 executeQuery·p0.50:   698.876 ms/op
                 executeQuery·p0.90:   702.965 ms/op
                 executeQuery·p0.95:   703.594 ms/op
                 executeQuery·p0.99:   703.594 ms/op
                 executeQuery·p0.999:  703.594 ms/op
                 executeQuery·p0.9999: 703.594 ms/op
                 executeQuery·p1.00:   703.594 ms/op


# Run progress: 44.87% complete, ETA 02:32:42
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

595.752 ±(99.9%) 10.378 ms/op
# Warmup Iteration   2: 593.419 ±(99.9%) 3.696 ms/op
# Warmup Iteration   3: 592.745 ±(99.9%) 2.601 ms/op
# Warmup Iteration   4: 593.644 ±(99.9%) 3.468 ms/op
# Warmup Iteration   5: 667.540 ±(99.9%) 41.608 ms/op
Iteration   1: 688.914 ±(99.9%) 17.369 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   684.720 ms/op
                 executeQuery·p0.90:   716.597 ms/op
                 executeQuery·p0.95:   737.149 ms/op
                 executeQuery·p0.99:   737.149 ms/op
                 executeQuery·p0.999:  737.149 ms/op
                 executeQuery·p0.9999: 737.149 ms/op
                 executeQuery·p1.00:   737.149 ms/op

Iteration   2: 689.398 ±(99.9%) 12.040 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   685.769 ms/op
                 executeQuery·p0.90:   709.676 ms/op
                 executeQuery·p0.95:   721.420 ms/op
                 executeQuery·p0.99:   721.420 ms/op
                 executeQuery·p0.999:  721.420 ms/op
                 executeQuery·p0.9999: 721.420 ms/op
                 executeQuery·p1.00:   721.420 ms/op

Iteration   3: 688.511 ±(99.9%) 11.377 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   685.769 ms/op
                 executeQuery·p0.90:   708.418 ms/op
                 executeQuery·p0.95:   719.323 ms/op
                 executeQuery·p0.99:   719.323 ms/op
                 executeQuery·p0.999:  719.323 ms/op
                 executeQuery·p0.9999: 719.323 ms/op
                 executeQuery·p1.00:   719.323 ms/op

Iteration   4: 685.204 ±(99.9%) 2.438 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   684.720 ms/op
                 executeQuery·p0.90:   689.753 ms/op
                 executeQuery·p0.95:   691.012 ms/op
                 executeQuery·p0.99:   691.012 ms/op
                 executeQuery·p0.999:  691.012 ms/op
                 executeQuery·p0.9999: 691.012 ms/op
                 executeQuery·p1.00:   691.012 ms/op

Iteration   5: 685.285 ±(99.9%) 2.438 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   684.720 ms/op
                 executeQuery·p0.90:   689.544 ms/op
                 executeQuery·p0.95:   689.963 ms/op
                 executeQuery·p0.99:   689.963 ms/op
                 executeQuery·p0.999:  689.963 ms/op
                 executeQuery·p0.9999: 689.963 ms/op
                 executeQuery·p1.00:   689.963 ms/op


# Run progress: 45.51% complete, ETA 02:30:56
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

601.970 ±(99.9%) 13.582 ms/op
# Warmup Iteration   2: 600.995 ±(99.9%) 5.931 ms/op
# Warmup Iteration   3: 601.399 ±(99.9%) 8.618 ms/op
# Warmup Iteration   4: 597.204 ±(99.9%) 7.835 ms/op
# Warmup Iteration   5: 645.358 ±(99.9%) 54.099 ms/op
Iteration   1: 688.128 ±(99.9%) 5.029 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   687.342 ms/op
                 executeQuery·p0.90:   693.109 ms/op
                 executeQuery·p0.95:   693.109 ms/op
                 executeQuery·p0.99:   693.109 ms/op
                 executeQuery·p0.999:  693.109 ms/op
                 executeQuery·p0.9999: 693.109 ms/op
                 executeQuery·p1.00:   693.109 ms/op

Iteration   2: 690.662 ±(99.9%) 5.443 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   691.536 ms/op
                 executeQuery·p0.90:   697.093 ms/op
                 executeQuery·p0.95:   698.352 ms/op
                 executeQuery·p0.99:   698.352 ms/op
                 executeQuery·p0.999:  698.352 ms/op
                 executeQuery·p0.9999: 698.352 ms/op
                 executeQuery·p1.00:   698.352 ms/op

Iteration   3: 695.992 ±(99.9%) 17.810 ms/op
                 executeQuery·p0.00:   685.769 ms/op
                 executeQuery·p0.50:   693.109 ms/op
                 executeQuery·p0.90:   726.034 ms/op
                 executeQuery·p0.95:   739.246 ms/op
                 executeQuery·p0.99:   739.246 ms/op
                 executeQuery·p0.999:  739.246 ms/op
                 executeQuery·p0.9999: 739.246 ms/op
                 executeQuery·p1.00:   739.246 ms/op

Iteration   4: 688.565 ±(99.9%) 4.063 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   688.390 ms/op
                 executeQuery·p0.90:   692.794 ms/op
                 executeQuery·p0.95:   693.109 ms/op
                 executeQuery·p0.99:   693.109 ms/op
                 executeQuery·p0.999:  693.109 ms/op
                 executeQuery·p0.9999: 693.109 ms/op
                 executeQuery·p1.00:   693.109 ms/op

Iteration   5: 692.934 ±(99.9%) 18.538 ms/op
                 executeQuery·p0.00:   683.672 ms/op
                 executeQuery·p0.50:   688.390 ms/op
                 executeQuery·p0.90:   724.671 ms/op
                 executeQuery·p0.95:   738.198 ms/op
                 executeQuery·p0.99:   738.198 ms/op
                 executeQuery·p0.999:  738.198 ms/op
                 executeQuery·p0.9999: 738.198 ms/op
                 executeQuery·p1.00:   738.198 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 185
  mean =    692.088 ±(99.9%) 2.377 ms/op

  Histogram, ms/op:
    [680.000, 685.000) = 51 
    [685.000, 690.000) = 37 
    [690.000, 695.000) = 44 
    [695.000, 700.000) = 38 
    [700.000, 705.000) = 8 
    [705.000, 710.000) = 0 
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 2 
    [720.000, 725.000) = 1 
    [725.000, 730.000) = 0 
    [730.000, 735.000) = 0 
    [735.000, 740.000) = 3 
    [740.000, 745.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    683.672 ms/op
     p(50.0000) =    691.012 ms/op
     p(90.0000) =    699.400 ms/op
     p(95.0000) =    701.497 ms/op
     p(99.0000) =    740.274 ms/op
     p(99.9000) =    746.586 ms/op
     p(99.9900) =    746.586 ms/op
     p(99.9990) =    746.586 ms/op
     p(99.9999) =    746.586 ms/op
    p(100.0000) =    746.586 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256)

# Run progress: 46.15% complete, ETA 02:29:08
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

651.428 ±(99.9%) 16.199 ms/op
# Warmup Iteration   2: 646.245 ±(99.9%) 3.454 ms/op
# Warmup Iteration   3: 645.761 ±(99.9%) 2.503 ms/op
# Warmup Iteration   4: 645.116 ±(99.9%) 2.519 ms/op
# Warmup Iteration   5: 697.303 ±(99.9%) 69.689 ms/op
Iteration   1: 759.741 ±(99.9%) 7.792 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   757.072 ms/op
                 executeQuery·p0.90:   770.703 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   2: 757.548 ±(99.9%) 3.135 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   756.023 ms/op
                 executeQuery·p0.90:   762.105 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   3: 757.358 ±(99.9%) 2.681 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   757.072 ms/op
                 executeQuery·p0.90:   761.686 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   4: 757.644 ±(99.9%) 4.069 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   756.023 ms/op
                 executeQuery·p0.90:   764.412 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op

Iteration   5: 756.881 ±(99.9%) 2.133 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   756.023 ms/op
                 executeQuery·p0.90:   760.008 ms/op
                 executeQuery·p0.95:   760.218 ms/op
                 executeQuery·p0.99:   760.218 ms/op
                 executeQuery·p0.999:  760.218 ms/op
                 executeQuery·p0.9999: 760.218 ms/op
                 executeQuery·p1.00:   760.218 ms/op


# Run progress: 46.79% complete, ETA 02:27:20
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

654.399 ±(99.9%) 13.190 ms/op
# Warmup Iteration   2: 651.327 ±(99.9%) 5.975 ms/op
# Warmup Iteration   3: 651.166 ±(99.9%) 3.477 ms/op
# Warmup Iteration   4: 651.004 ±(99.9%) 5.589 ms/op
# Warmup Iteration   5: 702.895 ±(99.9%) 68.251 ms/op
Iteration   1: 760.130 ±(99.9%) 1.564 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   759.693 ms/op
                 executeQuery·p0.90:   762.315 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   2: 760.655 ±(99.9%) 2.393 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   764.517 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op

Iteration   3: 761.933 ±(99.9%) 2.079 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   762.315 ms/op
                 executeQuery·p0.90:   764.202 ms/op
                 executeQuery·p0.95:   764.412 ms/op
                 executeQuery·p0.99:   764.412 ms/op
                 executeQuery·p0.999:  764.412 ms/op
                 executeQuery·p0.9999: 764.412 ms/op
                 executeQuery·p1.00:   764.412 ms/op

Iteration   4: 762.601 ±(99.9%) 4.943 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   761.266 ms/op
                 executeQuery·p0.90:   770.703 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   5: 762.982 ±(99.9%) 5.918 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   761.266 ms/op
                 executeQuery·p0.90:   772.381 ms/op
                 executeQuery·p0.95:   773.849 ms/op
                 executeQuery·p0.99:   773.849 ms/op
                 executeQuery·p0.999:  773.849 ms/op
                 executeQuery·p0.9999: 773.849 ms/op
                 executeQuery·p1.00:   773.849 ms/op


# Run progress: 47.44% complete, ETA 02:25:33
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

653.088 ±(99.9%) 12.829 ms/op
# Warmup Iteration   2: 650.924 ±(99.9%) 3.738 ms/op
# Warmup Iteration   3: 649.391 ±(99.9%) 1.730 ms/op
# Warmup Iteration   4: 648.746 ±(99.9%) 0.943 ms/op
# Warmup Iteration   5: 703.070 ±(99.9%) 72.223 ms/op
Iteration   1: 759.646 ±(99.9%) 1.355 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   761.056 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op

Iteration   2: 760.313 ±(99.9%) 4.372 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   759.169 ms/op
                 executeQuery·p0.90:   767.767 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op

Iteration   3: 761.457 ±(99.9%) 6.282 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   772.171 ms/op
                 executeQuery·p0.95:   774.898 ms/op
                 executeQuery·p0.99:   774.898 ms/op
                 executeQuery·p0.999:  774.898 ms/op
                 executeQuery·p0.9999: 774.898 ms/op
                 executeQuery·p1.00:   774.898 ms/op

Iteration   4: 761.838 ±(99.9%) 7.711 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   774.059 ms/op
                 executeQuery·p0.95:   774.898 ms/op
                 executeQuery·p0.99:   774.898 ms/op
                 executeQuery·p0.999:  774.898 ms/op
                 executeQuery·p0.9999: 774.898 ms/op
                 executeQuery·p1.00:   774.898 ms/op

Iteration   5: 759.932 ±(99.9%) 1.140 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   761.266 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 167
  mean =    760.048 ±(99.9%) 0.929 ms/op

  Histogram, ms/op:
    [750.000, 752.500) = 0 
    [752.500, 755.000) = 0 
    [755.000, 757.500) = 36 
    [757.500, 760.000) = 47 
    [760.000, 762.500) = 66 
    [762.500, 765.000) = 5 
    [765.000, 767.500) = 5 
    [767.500, 770.000) = 1 
    [770.000, 772.500) = 4 
    [772.500, 775.000) = 3 
    [775.000, 777.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    756.023 ms/op
     p(50.0000) =    760.218 ms/op
     p(90.0000) =    763.363 ms/op
     p(95.0000) =    768.396 ms/op
     p(99.0000) =    774.898 ms/op
     p(99.9000) =    774.898 ms/op
     p(99.9900) =    774.898 ms/op
     p(99.9990) =    774.898 ms/op
     p(99.9999) =    774.898 ms/op
    p(100.0000) =    774.898 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024)

# Run progress: 48.08% complete, ETA 02:23:47
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

665.274 ±(99.9%) 16.488 ms/op
# Warmup Iteration   2: 657.807 ±(99.9%) 4.221 ms/op
# Warmup Iteration   3: 656.409 ±(99.9%) 2.945 ms/op
# Warmup Iteration   4: 659.958 ±(99.9%) 5.365 ms/op
# Warmup Iteration   5: 707.527 ±(99.9%) 63.785 ms/op
Iteration   1: 766.509 ±(99.9%) 3.110 ms/op
                 executeQuery·p0.00:   763.363 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   770.284 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   2: 768.130 ±(99.9%) 3.330 ms/op
                 executeQuery·p0.00:   765.460 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   772.591 ms/op
                 executeQuery·p0.95:   772.801 ms/op
                 executeQuery·p0.99:   772.801 ms/op
                 executeQuery·p0.999:  772.801 ms/op
                 executeQuery·p0.9999: 772.801 ms/op
                 executeQuery·p1.00:   772.801 ms/op

Iteration   3: 765.460 ±(99.9%) 2.151 ms/op
                 executeQuery·p0.00:   762.315 ms/op
                 executeQuery·p0.50:   765.460 ms/op
                 executeQuery·p0.90:   767.558 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   4: 765.556 ±(99.9%) 3.398 ms/op
                 executeQuery·p0.00:   762.315 ms/op
                 executeQuery·p0.50:   764.412 ms/op
                 executeQuery·p0.90:   769.445 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op

Iteration   5: 769.083 ±(99.9%) 6.844 ms/op
                 executeQuery·p0.00:   763.363 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   778.882 ms/op
                 executeQuery·p0.95:   780.141 ms/op
                 executeQuery·p0.99:   780.141 ms/op
                 executeQuery·p0.999:  780.141 ms/op
                 executeQuery·p0.9999: 780.141 ms/op
                 executeQuery·p1.00:   780.141 ms/op


# Run progress: 48.72% complete, ETA 02:21:59
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

661.127 ±(99.9%) 12.825 ms/op
# Warmup Iteration   2: 666.894 ±(99.9%) 3.968 ms/op
# Warmup Iteration   3: 658.748 ±(99.9%) 3.738 ms/op
# Warmup Iteration   4: 656.973 ±(99.9%) 4.487 ms/op
# Warmup Iteration   5: 710.585 ±(99.9%) 69.756 ms/op
Iteration   1: 774.111 ±(99.9%) 6.946 ms/op
                 executeQuery·p0.00:   767.558 ms/op
                 executeQuery·p0.50:   772.801 ms/op
                 executeQuery·p0.90:   783.077 ms/op
                 executeQuery·p0.95:   784.335 ms/op
                 executeQuery·p0.99:   784.335 ms/op
                 executeQuery·p0.999:  784.335 ms/op
                 executeQuery·p0.9999: 784.335 ms/op
                 executeQuery·p1.00:   784.335 ms/op

Iteration   2: 771.228 ±(99.9%) 7.478 ms/op
                 executeQuery·p0.00:   764.412 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   780.560 ms/op
                 executeQuery·p0.95:   781.189 ms/op
                 executeQuery·p0.99:   781.189 ms/op
                 executeQuery·p0.999:  781.189 ms/op
                 executeQuery·p0.9999: 781.189 ms/op
                 executeQuery·p1.00:   781.189 ms/op

Iteration   3: 768.519 ±(99.9%) 4.265 ms/op
                 executeQuery·p0.00:   763.363 ms/op
                 executeQuery·p0.50:   768.082 ms/op
                 executeQuery·p0.90:   773.535 ms/op
                 executeQuery·p0.95:   773.849 ms/op
                 executeQuery·p0.99:   773.849 ms/op
                 executeQuery·p0.999:  773.849 ms/op
                 executeQuery·p0.9999: 773.849 ms/op
                 executeQuery·p1.00:   773.849 ms/op

Iteration   4: 767.033 ±(99.9%) 3.553 ms/op
                 executeQuery·p0.00:   763.363 ms/op
                 executeQuery·p0.50:   767.558 ms/op
                 executeQuery·p0.90:   770.703 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   5: 766.684 ±(99.9%) 4.430 ms/op
                 executeQuery·p0.00:   763.363 ms/op
                 executeQuery·p0.50:   765.460 ms/op
                 executeQuery·p0.90:   773.639 ms/op
                 executeQuery·p0.95:   774.898 ms/op
                 executeQuery·p0.99:   774.898 ms/op
                 executeQuery·p0.999:  774.898 ms/op
                 executeQuery·p0.9999: 774.898 ms/op
                 executeQuery·p1.00:   774.898 ms/op


# Run progress: 49.36% complete, ETA 02:20:13
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

663.224 ±(99.9%) 11.659 ms/op
# Warmup Iteration   2: 662.351 ±(99.9%) 3.404 ms/op
# Warmup Iteration   3: 657.195 ±(99.9%) 5.467 ms/op
# Warmup Iteration   4: 654.748 ±(99.9%) 2.393 ms/op
# Warmup Iteration   5: 689.264 ±(99.9%) 62.623 ms/op
Iteration   1: 766.509 ±(99.9%) 7.916 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   764.412 ms/op
                 executeQuery·p0.90:   776.995 ms/op
                 executeQuery·p0.95:   776.995 ms/op
                 executeQuery·p0.99:   776.995 ms/op
                 executeQuery·p0.999:  776.995 ms/op
                 executeQuery·p0.9999: 776.995 ms/op
                 executeQuery·p1.00:   776.995 ms/op

Iteration   2: 761.647 ±(99.9%) 2.772 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   760.218 ms/op
                 executeQuery·p0.90:   765.041 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op

Iteration   3: 762.029 ±(99.9%) 3.437 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   761.266 ms/op
                 executeQuery·p0.90:   766.719 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   4: 761.743 ±(99.9%) 2.998 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   762.315 ms/op
                 executeQuery·p0.90:   764.412 ms/op
                 executeQuery·p0.95:   764.412 ms/op
                 executeQuery·p0.99:   764.412 ms/op
                 executeQuery·p0.999:  764.412 ms/op
                 executeQuery·p0.9999: 764.412 ms/op
                 executeQuery·p1.00:   764.412 ms/op

Iteration   5: 766.509 ±(99.9%) 7.015 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   775.946 ms/op
                 executeQuery·p0.95:   776.995 ms/op
                 executeQuery·p0.99:   776.995 ms/op
                 executeQuery·p0.999:  776.995 ms/op
                 executeQuery·p0.9999: 776.995 ms/op
                 executeQuery·p1.00:   776.995 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 170
  mean =    766.799 ±(99.9%) 1.259 ms/op

  Histogram, ms/op:
    [750.000, 752.500) = 0 
    [752.500, 755.000) = 0 
    [755.000, 757.500) = 0 
    [757.500, 760.000) = 7 
    [760.000, 762.500) = 18 
    [762.500, 765.000) = 44 
    [765.000, 767.500) = 34 
    [767.500, 770.000) = 34 
    [770.000, 772.500) = 13 
    [772.500, 775.000) = 9 
    [775.000, 777.500) = 4 
    [777.500, 780.000) = 2 
    [780.000, 782.500) = 4 
    [782.500, 785.000) = 1 
    [785.000, 787.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    759.169 ms/op
     p(50.0000) =    765.460 ms/op
     p(90.0000) =    773.849 ms/op
     p(95.0000) =    776.995 ms/op
     p(99.0000) =    782.101 ms/op
     p(99.9000) =    784.335 ms/op
     p(99.9900) =    784.335 ms/op
     p(99.9990) =    784.335 ms/op
     p(99.9999) =    784.335 ms/op
    p(100.0000) =    784.335 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096)

# Run progress: 50.00% complete, ETA 02:18:25
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

743.440 ±(99.9%) 15.140 ms/op
# Warmup Iteration   2: 735.433 ±(99.9%) 1.749 ms/op
# Warmup Iteration   3: 737.816 ±(99.9%) 4.217 ms/op
# Warmup Iteration   4: 737.149 ±(99.9%) 4.826 ms/op
# Warmup Iteration   5: 737.673 ±(99.9%) 5.233 ms/op
Iteration   1: 851.444 ±(99.9%) 22.949 ms/op
                 executeQuery·p0.00:   808.452 ms/op
                 executeQuery·p0.50:   856.162 ms/op
                 executeQuery·p0.90:   858.679 ms/op
                 executeQuery·p0.95:   858.784 ms/op
                 executeQuery·p0.99:   858.784 ms/op
                 executeQuery·p0.999:  858.784 ms/op
                 executeQuery·p0.9999: 858.784 ms/op
                 executeQuery·p1.00:   858.784 ms/op

Iteration   2: 857.630 ±(99.9%) 2.529 ms/op
                 executeQuery·p0.00:   855.638 ms/op
                 executeQuery·p0.50:   856.687 ms/op
                 executeQuery·p0.90:   860.776 ms/op
                 executeQuery·p0.95:   860.881 ms/op
                 executeQuery·p0.99:   860.881 ms/op
                 executeQuery·p0.999:  860.881 ms/op
                 executeQuery·p0.9999: 860.881 ms/op
                 executeQuery·p1.00:   860.881 ms/op

Iteration   3: 857.735 ±(99.9%) 4.227 ms/op
                 executeQuery·p0.00:   854.589 ms/op
                 executeQuery·p0.50:   857.735 ms/op
                 executeQuery·p0.90:   863.607 ms/op
                 executeQuery·p0.95:   864.027 ms/op
                 executeQuery·p0.99:   864.027 ms/op
                 executeQuery·p0.999:  864.027 ms/op
                 executeQuery·p0.9999: 864.027 ms/op
                 executeQuery·p1.00:   864.027 ms/op

Iteration   4: 857.316 ±(99.9%) 3.825 ms/op
                 executeQuery·p0.00:   855.638 ms/op
                 executeQuery·p0.50:   856.687 ms/op
                 executeQuery·p0.90:   863.397 ms/op
                 executeQuery·p0.95:   864.027 ms/op
                 executeQuery·p0.99:   864.027 ms/op
                 executeQuery·p0.999:  864.027 ms/op
                 executeQuery·p0.9999: 864.027 ms/op
                 executeQuery·p1.00:   864.027 ms/op

Iteration   5: 856.687 ±(99.9%) 2.363 ms/op
                 executeQuery·p0.00:   854.589 ms/op
                 executeQuery·p0.50:   856.687 ms/op
                 executeQuery·p0.90:   859.623 ms/op
                 executeQuery·p0.95:   859.832 ms/op
                 executeQuery·p0.99:   859.832 ms/op
                 executeQuery·p0.999:  859.832 ms/op
                 executeQuery·p0.9999: 859.832 ms/op
                 executeQuery·p1.00:   859.832 ms/op


# Run progress: 50.64% complete, ETA 02:16:37
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

754.117 ±(99.9%) 17.157 ms/op
# Warmup Iteration   2: 748.493 ±(99.9%) 9.505 ms/op
# Warmup Iteration   3: 747.547 ±(99.9%) 10.009 ms/op
# Warmup Iteration   4: 745.887 ±(99.9%) 9.974 ms/op
# Warmup Iteration   5: 755.849 ±(99.9%) 28.148 ms/op
Iteration   1: 866.219 ±(99.9%) 10.666 ms/op
                 executeQuery·p0.00:   857.735 ms/op
                 executeQuery·p0.50:   862.978 ms/op
                 executeQuery·p0.90:   877.239 ms/op
                 executeQuery·p0.95:   877.658 ms/op
                 executeQuery·p0.99:   877.658 ms/op
                 executeQuery·p0.999:  877.658 ms/op
                 executeQuery·p0.9999: 877.658 ms/op
                 executeQuery·p1.00:   877.658 ms/op

Iteration   2: 870.947 ±(99.9%) 7.018 ms/op
                 executeQuery·p0.00:   859.832 ms/op
                 executeQuery·p0.50:   871.891 ms/op
                 executeQuery·p0.90:   877.239 ms/op
                 executeQuery·p0.95:   877.658 ms/op
                 executeQuery·p0.99:   877.658 ms/op
                 executeQuery·p0.999:  877.658 ms/op
                 executeQuery·p0.9999: 877.658 ms/op
                 executeQuery·p1.00:   877.658 ms/op

Iteration   3: 867.077 ±(99.9%) 6.565 ms/op
                 executeQuery·p0.00:   856.687 ms/op
                 executeQuery·p0.50:   868.221 ms/op
                 executeQuery·p0.90:   872.206 ms/op
                 executeQuery·p0.95:   872.415 ms/op
                 executeQuery·p0.99:   872.415 ms/op
                 executeQuery·p0.999:  872.415 ms/op
                 executeQuery·p0.9999: 872.415 ms/op
                 executeQuery·p1.00:   872.415 ms/op

Iteration   4: 865.361 ±(99.9%) 7.282 ms/op
                 executeQuery·p0.00:   857.735 ms/op
                 executeQuery·p0.50:   867.172 ms/op
                 executeQuery·p0.90:   871.157 ms/op
                 executeQuery·p0.95:   871.367 ms/op
                 executeQuery·p0.99:   871.367 ms/op
                 executeQuery·p0.999:  871.367 ms/op
                 executeQuery·p0.9999: 871.367 ms/op
                 executeQuery·p1.00:   871.367 ms/op

Iteration   5: 868.745 ±(99.9%) 5.752 ms/op
                 executeQuery·p0.00:   858.784 ms/op
                 executeQuery·p0.50:   869.270 ms/op
                 executeQuery·p0.90:   872.310 ms/op
                 executeQuery·p0.95:   872.415 ms/op
                 executeQuery·p0.99:   872.415 ms/op
                 executeQuery·p0.999:  872.415 ms/op
                 executeQuery·p0.9999: 872.415 ms/op
                 executeQuery·p1.00:   872.415 ms/op


# Run progress: 51.28% complete, ETA 02:14:52
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

742.392 ±(99.9%) 9.836 ms/op
# Warmup Iteration   2: 737.721 ±(99.9%) 1.985 ms/op
# Warmup Iteration   3: 737.626 ±(99.9%) 1.636 ms/op
# Warmup Iteration   4: 738.110 ±(99.9%) 2.252 ms/op
# Warmup Iteration   5: 737.935 ±(99.9%) 4.174 ms/op
Iteration   1: 857.525 ±(99.9%) 25.450 ms/op
                 executeQuery·p0.00:   810.549 ms/op
                 executeQuery·p0.50:   861.929 ms/op
                 executeQuery·p0.90:   869.899 ms/op
                 executeQuery·p0.95:   870.318 ms/op
                 executeQuery·p0.99:   870.318 ms/op
                 executeQuery·p0.999:  870.318 ms/op
                 executeQuery·p0.9999: 870.318 ms/op
                 executeQuery·p1.00:   870.318 ms/op

Iteration   2: 861.929 ±(99.9%) 1.495 ms/op
                 executeQuery·p0.00:   860.881 ms/op
                 executeQuery·p0.50:   861.929 ms/op
                 executeQuery·p0.90:   863.922 ms/op
                 executeQuery·p0.95:   864.027 ms/op
                 executeQuery·p0.99:   864.027 ms/op
                 executeQuery·p0.999:  864.027 ms/op
                 executeQuery·p0.9999: 864.027 ms/op
                 executeQuery·p1.00:   864.027 ms/op

Iteration   3: 860.776 ±(99.9%) 2.040 ms/op
                 executeQuery·p0.00:   858.784 ms/op
                 executeQuery·p0.50:   860.881 ms/op
                 executeQuery·p0.90:   862.873 ms/op
                 executeQuery·p0.95:   862.978 ms/op
                 executeQuery·p0.99:   862.978 ms/op
                 executeQuery·p0.999:  862.978 ms/op
                 executeQuery·p0.9999: 862.978 ms/op
                 executeQuery·p1.00:   862.978 ms/op

Iteration   4: 861.300 ±(99.9%) 1.861 ms/op
                 executeQuery·p0.00:   859.832 ms/op
                 executeQuery·p0.50:   860.881 ms/op
                 executeQuery·p0.90:   863.817 ms/op
                 executeQuery·p0.95:   864.027 ms/op
                 executeQuery·p0.99:   864.027 ms/op
                 executeQuery·p0.999:  864.027 ms/op
                 executeQuery·p0.9999: 864.027 ms/op
                 executeQuery·p1.00:   864.027 ms/op

Iteration   5: 861.510 ±(99.9%) 2.267 ms/op
                 executeQuery·p0.00:   859.832 ms/op
                 executeQuery·p0.50:   860.881 ms/op
                 executeQuery·p0.90:   864.027 ms/op
                 executeQuery·p0.95:   864.027 ms/op
                 executeQuery·p0.99:   864.027 ms/op
                 executeQuery·p0.999:  864.027 ms/op
                 executeQuery·p0.9999: 864.027 ms/op
                 executeQuery·p1.00:   864.027 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 153
  mean =    861.573 ±(99.9%) 2.236 ms/op

  Histogram, ms/op:
    [800.000, 805.000) = 0 
    [805.000, 810.000) = 1 
    [810.000, 815.000) = 1 
    [815.000, 820.000) = 0 
    [820.000, 825.000) = 0 
    [825.000, 830.000) = 0 
    [830.000, 835.000) = 0 
    [835.000, 840.000) = 0 
    [840.000, 845.000) = 0 
    [845.000, 850.000) = 0 
    [850.000, 855.000) = 6 
    [855.000, 860.000) = 59 
    [860.000, 865.000) = 46 
    [865.000, 870.000) = 15 
    [870.000, 875.000) = 22 

  Percentiles, ms/op:
      p(0.0000) =    808.452 ms/op
     p(50.0000) =    860.881 ms/op
     p(90.0000) =    871.367 ms/op
     p(95.0000) =    872.415 ms/op
     p(99.0000) =    877.658 ms/op
     p(99.9000) =    877.658 ms/op
     p(99.9900) =    877.658 ms/op
     p(99.9990) =    877.658 ms/op
     p(99.9999) =    877.658 ms/op
    p(100.0000) =    877.658 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384)

# Run progress: 51.92% complete, ETA 02:13:05
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1051.460 ±(99.9%) 69.431 ms/op
# Warmup Iteration   2: 1041.236 ±(99.9%) 71.015 ms/op
# Warmup Iteration   3: 1068.761 ±(99.9%) 114.704 ms/op
# Warmup Iteration   4: 1019.798 ±(99.9%) 27.385 ms/op
# Warmup Iteration   5: 1062.790 ±(99.9%) 105.702 ms/op
Iteration   1: 1014.206 ±(99.9%) 17.943 ms/op
                 executeQuery·p0.00:   1006.633 ms/op
                 executeQuery·p0.50:   1009.779 ms/op
                 executeQuery·p0.90:   1041.236 ms/op
                 executeQuery·p0.95:   1041.236 ms/op
                 executeQuery·p0.99:   1041.236 ms/op
                 executeQuery·p0.999:  1041.236 ms/op
                 executeQuery·p0.9999: 1041.236 ms/op
                 executeQuery·p1.00:   1041.236 ms/op

Iteration   2: 1015.721 ±(99.9%) 12.614 ms/op
                 executeQuery·p0.00:   1008.730 ms/op
                 executeQuery·p0.50:   1013.973 ms/op
                 executeQuery·p0.90:   1031.799 ms/op
                 executeQuery·p0.95:   1031.799 ms/op
                 executeQuery·p0.99:   1031.799 ms/op
                 executeQuery·p0.999:  1031.799 ms/op
                 executeQuery·p0.9999: 1031.799 ms/op
                 executeQuery·p1.00:   1031.799 ms/op

Iteration   3: 1017.934 ±(99.9%) 21.396 ms/op
                 executeQuery·p0.00:   1001.390 ms/op
                 executeQuery·p0.50:   1015.022 ms/op
                 executeQuery·p0.90:   1047.527 ms/op
                 executeQuery·p0.95:   1047.527 ms/op
                 executeQuery·p0.99:   1047.527 ms/op
                 executeQuery·p0.999:  1047.527 ms/op
                 executeQuery·p0.9999: 1047.527 ms/op
                 executeQuery·p1.00:   1047.527 ms/op

Iteration   4: 1022.012 ±(99.9%) 20.492 ms/op
                 executeQuery·p0.00:   1012.924 ms/op
                 executeQuery·p0.50:   1018.167 ms/op
                 executeQuery·p0.90:   1046.479 ms/op
                 executeQuery·p0.95:   1046.479 ms/op
                 executeQuery·p0.99:   1046.479 ms/op
                 executeQuery·p0.999:  1046.479 ms/op
                 executeQuery·p0.9999: 1046.479 ms/op
                 executeQuery·p1.00:   1046.479 ms/op

Iteration   5: 1018.633 ±(99.9%) 17.132 ms/op
                 executeQuery·p0.00:   1009.779 ms/op
                 executeQuery·p0.50:   1016.070 ms/op
                 executeQuery·p0.90:   1044.382 ms/op
                 executeQuery·p0.95:   1044.382 ms/op
                 executeQuery·p0.99:   1044.382 ms/op
                 executeQuery·p0.999:  1044.382 ms/op
                 executeQuery·p0.9999: 1044.382 ms/op
                 executeQuery·p1.00:   1044.382 ms/op


# Run progress: 52.56% complete, ETA 02:11:19
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1034.551 ±(99.9%) 33.870 ms/op
# Warmup Iteration   2: 1025.158 ±(99.9%) 5.910 ms/op
# Warmup Iteration   3: 1040.420 ±(99.9%) 66.824 ms/op
# Warmup Iteration   4: 1017.818 ±(99.9%) 8.405 ms/op
# Warmup Iteration   5: 1041.352 ±(99.9%) 74.035 ms/op
Iteration   1: 1037.508 ±(99.9%) 72.764 ms/op
                 executeQuery·p0.00:   1017.119 ms/op
                 executeQuery·p0.50:   1019.216 ms/op
                 executeQuery·p0.90:   1149.239 ms/op
                 executeQuery·p0.95:   1149.239 ms/op
                 executeQuery·p0.99:   1149.239 ms/op
                 executeQuery·p0.999:  1149.239 ms/op
                 executeQuery·p0.9999: 1149.239 ms/op
                 executeQuery·p1.00:   1149.239 ms/op

Iteration   2: 1022.129 ±(99.9%) 11.614 ms/op
                 executeQuery·p0.00:   1012.924 ms/op
                 executeQuery·p0.50:   1020.264 ms/op
                 executeQuery·p0.90:   1033.896 ms/op
                 executeQuery·p0.95:   1033.896 ms/op
                 executeQuery·p0.99:   1033.896 ms/op
                 executeQuery·p0.999:  1033.896 ms/op
                 executeQuery·p0.9999: 1033.896 ms/op
                 executeQuery·p1.00:   1033.896 ms/op

Iteration   3: 1009.895 ±(99.9%) 26.187 ms/op
                 executeQuery·p0.00:   1002.439 ms/op
                 executeQuery·p0.50:   1003.487 ms/op
                 executeQuery·p0.90:   1050.673 ms/op
                 executeQuery·p0.95:   1050.673 ms/op
                 executeQuery·p0.99:   1050.673 ms/op
                 executeQuery·p0.999:  1050.673 ms/op
                 executeQuery·p0.9999: 1050.673 ms/op
                 executeQuery·p1.00:   1050.673 ms/op

Iteration   4: 1003.953 ±(99.9%) 3.190 ms/op
                 executeQuery·p0.00:   1002.439 ms/op
                 executeQuery·p0.50:   1003.487 ms/op
                 executeQuery·p0.90:   1008.730 ms/op
                 executeQuery·p0.95:   1008.730 ms/op
                 executeQuery·p0.99:   1008.730 ms/op
                 executeQuery·p0.999:  1008.730 ms/op
                 executeQuery·p0.9999: 1008.730 ms/op
                 executeQuery·p1.00:   1008.730 ms/op

Iteration   5: 1019.798 ±(99.9%) 55.261 ms/op
                 executeQuery·p0.00:   1002.439 ms/op
                 executeQuery·p0.50:   1003.487 ms/op
                 executeQuery·p0.90:   1098.908 ms/op
                 executeQuery·p0.95:   1098.908 ms/op
                 executeQuery·p0.99:   1098.908 ms/op
                 executeQuery·p0.999:  1098.908 ms/op
                 executeQuery·p0.9999: 1098.908 ms/op
                 executeQuery·p1.00:   1098.908 ms/op


# Run progress: 53.21% complete, ETA 02:09:33
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1136.132 ±(99.9%) 103.872 ms/op
# Warmup Iteration   2: 1111.228 ±(99.9%) 19.926 ms/op
# Warmup Iteration   3: 1111.753 ±(99.9%) 34.389 ms/op
# Warmup Iteration   4: 1110.092 ±(99.9%) 18.312 ms/op
# Warmup Iteration   5: 1119.617 ±(99.9%) 42.512 ms/op
Iteration   1: 1112.656 ±(99.9%) 24.864 ms/op
                 executeQuery·p0.00:   1105.199 ms/op
                 executeQuery·p0.50:   1107.296 ms/op
                 executeQuery·p0.90:   1151.336 ms/op
                 executeQuery·p0.95:   1151.336 ms/op
                 executeQuery·p0.99:   1151.336 ms/op
                 executeQuery·p0.999:  1151.336 ms/op
                 executeQuery·p0.9999: 1151.336 ms/op
                 executeQuery·p1.00:   1151.336 ms/op

Iteration   2: 1129.578 ±(99.9%) 69.150 ms/op
                 executeQuery·p0.00:   1105.199 ms/op
                 executeQuery·p0.50:   1111.491 ms/op
                 executeQuery·p0.90:   1201.668 ms/op
                 executeQuery·p0.95:   1201.668 ms/op
                 executeQuery·p0.99:   1201.668 ms/op
                 executeQuery·p0.999:  1201.668 ms/op
                 executeQuery·p0.9999: 1201.668 ms/op
                 executeQuery·p1.00:   1201.668 ms/op

Iteration   3: 1116.850 ±(99.9%) 48.356 ms/op
                 executeQuery·p0.00:   1105.199 ms/op
                 executeQuery·p0.50:   1107.296 ms/op
                 executeQuery·p0.90:   1193.279 ms/op
                 executeQuery·p0.95:   1193.279 ms/op
                 executeQuery·p0.99:   1193.279 ms/op
                 executeQuery·p0.999:  1193.279 ms/op
                 executeQuery·p0.9999: 1193.279 ms/op
                 executeQuery·p1.00:   1193.279 ms/op

Iteration   4: 1110.092 ±(99.9%) 9.811 ms/op
                 executeQuery·p0.00:   1105.199 ms/op
                 executeQuery·p0.50:   1107.296 ms/op
                 executeQuery·p0.90:   1124.073 ms/op
                 executeQuery·p0.95:   1124.073 ms/op
                 executeQuery·p0.99:   1124.073 ms/op
                 executeQuery·p0.999:  1124.073 ms/op
                 executeQuery·p0.9999: 1124.073 ms/op
                 executeQuery·p1.00:   1124.073 ms/op

Iteration   5: 1110.325 ±(99.9%) 23.251 ms/op
                 executeQuery·p0.00:   1105.199 ms/op
                 executeQuery·p0.50:   1105.199 ms/op
                 executeQuery·p0.90:   1147.142 ms/op
                 executeQuery·p0.95:   1147.142 ms/op
                 executeQuery·p0.99:   1147.142 ms/op
                 executeQuery·p0.999:  1147.142 ms/op
                 executeQuery·p0.9999: 1147.142 ms/op
                 executeQuery·p1.00:   1147.142 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 134
  mean =   1050.165 ±(99.9%) 14.675 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 75 
    [1025.000, 1050.000) = 11 
    [1050.000, 1075.000) = 2 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 39 
    [1125.000, 1150.000) = 2 
    [1150.000, 1175.000) = 2 
    [1175.000, 1200.000) = 1 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1001.390 ms/op
     p(50.0000) =   1019.740 ms/op
     p(90.0000) =   1111.491 ms/op
     p(95.0000) =   1129.841 ms/op
     p(99.0000) =   1198.732 ms/op
     p(99.9000) =   1201.668 ms/op
     p(99.9900) =   1201.668 ms/op
     p(99.9990) =   1201.668 ms/op
     p(99.9999) =   1201.668 ms/op
    p(100.0000) =   1201.668 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536)

# Run progress: 53.85% complete, ETA 02:07:48
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1387.116 ±(99.9%) 41.613 ms/op
# Warmup Iteration   2: 1332.890 ±(99.9%) 25.706 ms/op
# Warmup Iteration   3: 1322.704 ±(99.9%) 26.258 ms/op
# Warmup Iteration   4: 1324.501 ±(99.9%) 40.801 ms/op
# Warmup Iteration   5: 1329.295 ±(99.9%) 40.579 ms/op
Iteration   1: 1321.805 ±(99.9%) 22.932 ms/op
                 executeQuery·p0.00:   1314.914 ms/op
                 executeQuery·p0.50:   1319.109 ms/op
                 executeQuery·p0.90:   1344.274 ms/op
                 executeQuery·p0.95:   1344.274 ms/op
                 executeQuery·p0.99:   1344.274 ms/op
                 executeQuery·p0.999:  1344.274 ms/op
                 executeQuery·p0.9999: 1344.274 ms/op
                 executeQuery·p1.00:   1344.274 ms/op

Iteration   2: 1329.295 ±(99.9%) 63.336 ms/op
                 executeQuery·p0.00:   1312.817 ms/op
                 executeQuery·p0.50:   1319.109 ms/op
                 executeQuery·p0.90:   1392.509 ms/op
                 executeQuery·p0.95:   1392.509 ms/op
                 executeQuery·p0.99:   1392.509 ms/op
                 executeQuery·p0.999:  1392.509 ms/op
                 executeQuery·p0.9999: 1392.509 ms/op
                 executeQuery·p1.00:   1392.509 ms/op

Iteration   3: 1341.578 ±(99.9%) 112.757 ms/op
                 executeQuery·p0.00:   1312.817 ms/op
                 executeQuery·p0.50:   1319.109 ms/op
                 executeQuery·p0.90:   1449.132 ms/op
                 executeQuery·p0.95:   1449.132 ms/op
                 executeQuery·p0.99:   1449.132 ms/op
                 executeQuery·p0.999:  1449.132 ms/op
                 executeQuery·p0.9999: 1449.132 ms/op
                 executeQuery·p1.00:   1449.132 ms/op

Iteration   4: 1334.388 ±(99.9%) 101.805 ms/op
                 executeQuery·p0.00:   1312.817 ms/op
                 executeQuery·p0.50:   1317.011 ms/op
                 executeQuery·p0.90:   1436.549 ms/op
                 executeQuery·p0.95:   1436.549 ms/op
                 executeQuery·p0.99:   1436.549 ms/op
                 executeQuery·p0.999:  1436.549 ms/op
                 executeQuery·p0.9999: 1436.549 ms/op
                 executeQuery·p1.00:   1436.549 ms/op

Iteration   5: 1327.198 ±(99.9%) 29.425 ms/op
                 executeQuery·p0.00:   1314.914 ms/op
                 executeQuery·p0.50:   1319.109 ms/op
                 executeQuery·p0.90:   1348.469 ms/op
                 executeQuery·p0.95:   1348.469 ms/op
                 executeQuery·p0.99:   1348.469 ms/op
                 executeQuery·p0.999:  1348.469 ms/op
                 executeQuery·p0.9999: 1348.469 ms/op
                 executeQuery·p1.00:   1348.469 ms/op


# Run progress: 54.49% complete, ETA 02:06:03
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1290.048 ±(99.9%) 51.411 ms/op
# Warmup Iteration   2: 1272.672 ±(99.9%) 19.172 ms/op
# Warmup Iteration   3: 1273.870 ±(99.9%) 14.649 ms/op
# Warmup Iteration   4: 1361.651 ±(99.9%) 195.006 ms/op
# Warmup Iteration   5: 1298.736 ±(99.9%) 166.473 ms/op
Iteration   1: 1277.166 ±(99.9%) 43.632 ms/op
                 executeQuery·p0.00:   1260.388 ms/op
                 executeQuery·p0.50:   1268.777 ms/op
                 executeQuery·p0.90:   1314.914 ms/op
                 executeQuery·p0.95:   1314.914 ms/op
                 executeQuery·p0.99:   1314.914 ms/op
                 executeQuery·p0.999:  1314.914 ms/op
                 executeQuery·p0.9999: 1314.914 ms/op
                 executeQuery·p1.00:   1314.914 ms/op

Iteration   2: 1372.436 ±(99.9%) 230.406 ms/op
                 executeQuery·p0.00:   1256.194 ms/op
                 executeQuery·p0.50:   1413.480 ms/op
                 executeQuery·p0.90:   1470.104 ms/op
                 executeQuery·p0.95:   1470.104 ms/op
                 executeQuery·p0.99:   1470.104 ms/op
                 executeQuery·p0.999:  1470.104 ms/op
                 executeQuery·p0.9999: 1470.104 ms/op
                 executeQuery·p1.00:   1470.104 ms/op

Iteration   3: 1362.250 ±(99.9%) 23.276 ms/op
                 executeQuery·p0.00:   1348.469 ms/op
                 executeQuery·p0.50:   1361.052 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op

Iteration   4: 1361.052 ±(99.9%) 36.586 ms/op
                 executeQuery·p0.00:   1344.274 ms/op
                 executeQuery·p0.50:   1354.760 ms/op
                 executeQuery·p0.90:   1379.926 ms/op
                 executeQuery·p0.95:   1379.926 ms/op
                 executeQuery·p0.99:   1379.926 ms/op
                 executeQuery·p0.999:  1379.926 ms/op
                 executeQuery·p0.9999: 1379.926 ms/op
                 executeQuery·p1.00:   1379.926 ms/op

Iteration   5: 1367.343 ±(99.9%) 17.673 ms/op
                 executeQuery·p0.00:   1354.760 ms/op
                 executeQuery·p0.50:   1367.343 ms/op
                 executeQuery·p0.90:   1377.829 ms/op
                 executeQuery·p0.95:   1377.829 ms/op
                 executeQuery·p0.99:   1377.829 ms/op
                 executeQuery·p0.999:  1377.829 ms/op
                 executeQuery·p0.9999: 1377.829 ms/op
                 executeQuery·p1.00:   1377.829 ms/op


# Run progress: 55.13% complete, ETA 02:04:18
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1377.230 ±(99.9%) 45.280 ms/op
# Warmup Iteration   2: 1385.319 ±(99.9%) 66.845 ms/op
# Warmup Iteration   3: 1367.044 ±(99.9%) 19.365 ms/op
# Warmup Iteration   4: 1362.849 ±(99.9%) 14.540 ms/op
# Warmup Iteration   5: 1369.740 ±(99.9%) 10.711 ms/op
Iteration   1: 1364.347 ±(99.9%) 10.151 ms/op
                 executeQuery·p0.00:   1358.954 ms/op
                 executeQuery·p0.50:   1363.149 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op

Iteration   2: 1366.145 ±(99.9%) 10.511 ms/op
                 executeQuery·p0.00:   1358.954 ms/op
                 executeQuery·p0.50:   1367.343 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op

Iteration   3: 1356.857 ±(99.9%) 21.645 ms/op
                 executeQuery·p0.00:   1346.372 ms/op
                 executeQuery·p0.50:   1356.857 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op

Iteration   4: 1358.655 ±(99.9%) 17.123 ms/op
                 executeQuery·p0.00:   1348.469 ms/op
                 executeQuery·p0.50:   1361.052 ms/op
                 executeQuery·p0.90:   1369.440 ms/op
                 executeQuery·p0.95:   1369.440 ms/op
                 executeQuery·p0.99:   1369.440 ms/op
                 executeQuery·p0.999:  1369.440 ms/op
                 executeQuery·p0.9999: 1369.440 ms/op
                 executeQuery·p1.00:   1369.440 ms/op

Iteration   5: 1355.659 ±(99.9%) 22.464 ms/op
                 executeQuery·p0.00:   1344.274 ms/op
                 executeQuery·p0.50:   1352.663 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 105
  mean =   1346.412 ±(99.9%) 13.170 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 7 
    [1275.000, 1300.000) = 2 
    [1300.000, 1325.000) = 28 
    [1325.000, 1350.000) = 14 
    [1350.000, 1375.000) = 43 
    [1375.000, 1400.000) = 5 
    [1400.000, 1425.000) = 1 
    [1425.000, 1450.000) = 2 
    [1450.000, 1475.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1256.194 ms/op
     p(50.0000) =   1350.566 ms/op
     p(90.0000) =   1376.571 ms/op
     p(95.0000) =   1429.629 ms/op
     p(99.0000) =   1469.978 ms/op
     p(99.9000) =   1470.104 ms/op
     p(99.9900) =   1470.104 ms/op
     p(99.9990) =   1470.104 ms/op
     p(99.9999) =   1470.104 ms/op
    p(100.0000) =   1470.104 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 55.77% complete, ETA 02:02:35
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

2782.921 ±(99.9%) 328.613 ms/op
# Warmup Iteration   2: 2816.475 ±(99.9%) 329.357 ms/op
# Warmup Iteration   3: 2785.018 ±(99.9%) 38.330 ms/op
# Warmup Iteration   4: 2790.261 ±(99.9%) 74.637 ms/op
# Warmup Iteration   5: 2780.824 ±(99.9%) 164.120 ms/op
Iteration   1: 2783.969 ±(99.9%) 60.098 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   2797.601 ms/op
                 executeQuery·p0.95:   2797.601 ms/op
                 executeQuery·p0.99:   2797.601 ms/op
                 executeQuery·p0.999:  2797.601 ms/op
                 executeQuery·p0.9999: 2797.601 ms/op
                 executeQuery·p1.00:   2797.601 ms/op

Iteration   2: 2776.629 ±(99.9%) 31.296 ms/op
                 executeQuery·p0.00:   2772.435 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op

Iteration   3: 2769.289 ±(99.9%) 55.875 ms/op
                 executeQuery·p0.00:   2759.852 ms/op
                 executeQuery·p0.50:   2768.241 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op

Iteration   4: 2757.755 ±(99.9%) 34.991 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   2757.755 ms/op
                 executeQuery·p0.90:   2764.046 ms/op
                 executeQuery·p0.95:   2764.046 ms/op
                 executeQuery·p0.99:   2764.046 ms/op
                 executeQuery·p0.999:  2764.046 ms/op
                 executeQuery·p0.9999: 2764.046 ms/op
                 executeQuery·p1.00:   2764.046 ms/op

Iteration   5: 2759.852 ±(99.9%) 110.650 ms/op
                 executeQuery·p0.00:   2734.686 ms/op
                 executeQuery·p0.50:   2766.143 ms/op
                 executeQuery·p0.90:   2772.435 ms/op
                 executeQuery·p0.95:   2772.435 ms/op
                 executeQuery·p0.99:   2772.435 ms/op
                 executeQuery·p0.999:  2772.435 ms/op
                 executeQuery·p0.9999: 2772.435 ms/op
                 executeQuery·p1.00:   2772.435 ms/op


# Run progress: 56.41% complete, ETA 02:00:58
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

2953.839 ±(99.9%) 328.520 ms/op
# Warmup Iteration   2: 2956.984 ±(99.9%) 91.244 ms/op
# Warmup Iteration   3: 2976.907 ±(99.9%) 343.816 ms/op
# Warmup Iteration   4: 2972.713 ±(99.9%) 293.900 ms/op
# Warmup Iteration   5: 2841.641 ±(99.9%) 470.749 ms/op
Iteration   1: 2810.184 ±(99.9%) 145.116 ms/op
                 executeQuery·p0.00:   2789.212 ms/op
                 executeQuery·p0.50:   2808.087 ms/op
                 executeQuery·p0.90:   2835.350 ms/op
                 executeQuery·p0.95:   2835.350 ms/op
                 executeQuery·p0.99:   2835.350 ms/op
                 executeQuery·p0.999:  2835.350 ms/op
                 executeQuery·p0.9999: 2835.350 ms/op
                 executeQuery·p1.00:   2835.350 ms/op

Iteration   2: 2819.621 ±(99.9%) 199.630 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2808.087 ms/op
                 executeQuery·p0.90:   2864.710 ms/op
                 executeQuery·p0.95:   2864.710 ms/op
                 executeQuery·p0.99:   2864.710 ms/op
                 executeQuery·p0.999:  2864.710 ms/op
                 executeQuery·p0.9999: 2864.710 ms/op
                 executeQuery·p1.00:   2864.710 ms/op

Iteration   3: 2738.881 ±(99.9%) 79.791 ms/op
                 executeQuery·p0.00:   2726.298 ms/op
                 executeQuery·p0.50:   2736.783 ms/op
                 executeQuery·p0.90:   2755.658 ms/op
                 executeQuery·p0.95:   2755.658 ms/op
                 executeQuery·p0.99:   2755.658 ms/op
                 executeQuery·p0.999:  2755.658 ms/op
                 executeQuery·p0.9999: 2755.658 ms/op
                 executeQuery·p1.00:   2755.658 ms/op

Iteration   4: 2749.366 ±(99.9%) 318.010 ms/op
                 executeQuery·p0.00:   2717.909 ms/op
                 executeQuery·p0.50:   2728.395 ms/op
                 executeQuery·p0.90:   2822.767 ms/op
                 executeQuery·p0.95:   2822.767 ms/op
                 executeQuery·p0.99:   2822.767 ms/op
                 executeQuery·p0.999:  2822.767 ms/op
                 executeQuery·p0.9999: 2822.767 ms/op
                 executeQuery·p1.00:   2822.767 ms/op

Iteration   5: 2756.706 ±(99.9%) 290.548 ms/op
                 executeQuery·p0.00:   2722.103 ms/op
                 executeQuery·p0.50:   2740.978 ms/op
                 executeQuery·p0.90:   2822.767 ms/op
                 executeQuery·p0.95:   2822.767 ms/op
                 executeQuery·p0.99:   2822.767 ms/op
                 executeQuery·p0.999:  2822.767 ms/op
                 executeQuery·p0.9999: 2822.767 ms/op
                 executeQuery·p1.00:   2822.767 ms/op


# Run progress: 57.05% complete, ETA 01:59:24
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

2814.378 ±(99.9%) 307.439 ms/op
# Warmup Iteration   2: 2793.406 ±(99.9%) 419.303 ms/op
# Warmup Iteration   3: 2864.710 ±(99.9%) 486.356 ms/op
# Warmup Iteration   4: 2965.373 ±(99.9%) 324.489 ms/op
# Warmup Iteration   5: 2974.810 ±(99.9%) 150.703 ms/op
Iteration   1: 2983.199 ±(99.9%) 479.447 ms/op
                 executeQuery·p0.00:   2927.624 ms/op
                 executeQuery·p0.50:   2959.081 ms/op
                 executeQuery·p0.90:   3087.008 ms/op
                 executeQuery·p0.95:   3087.008 ms/op
                 executeQuery·p0.99:   3087.008 ms/op
                 executeQuery·p0.999:  3087.008 ms/op
                 executeQuery·p0.9999: 3087.008 ms/op
                 executeQuery·p1.00:   3087.008 ms/op

Iteration   2: 2942.304 ±(99.9%) 140.834 ms/op
                 executeQuery·p0.00:   2919.236 ms/op
                 executeQuery·p0.50:   2940.207 ms/op
                 executeQuery·p0.90:   2969.567 ms/op
                 executeQuery·p0.95:   2969.567 ms/op
                 executeQuery·p0.99:   2969.567 ms/op
                 executeQuery·p0.999:  2969.567 ms/op
                 executeQuery·p0.9999: 2969.567 ms/op
                 executeQuery·p1.00:   2969.567 ms/op

Iteration   3: 2949.644 ±(99.9%) 140.617 ms/op
                 executeQuery·p0.00:   2923.430 ms/op
                 executeQuery·p0.50:   2952.790 ms/op
                 executeQuery·p0.90:   2969.567 ms/op
                 executeQuery·p0.95:   2969.567 ms/op
                 executeQuery·p0.99:   2969.567 ms/op
                 executeQuery·p0.999:  2969.567 ms/op
                 executeQuery·p0.9999: 2969.567 ms/op
                 executeQuery·p1.00:   2969.567 ms/op

Iteration   4: 2976.907 ±(99.9%) 293.900 ms/op
                 executeQuery·p0.00:   2944.401 ms/op
                 executeQuery·p0.50:   2961.179 ms/op
                 executeQuery·p0.90:   3040.870 ms/op
                 executeQuery·p0.95:   3040.870 ms/op
                 executeQuery·p0.99:   3040.870 ms/op
                 executeQuery·p0.999:  3040.870 ms/op
                 executeQuery·p0.9999: 3040.870 ms/op
                 executeQuery·p1.00:   3040.870 ms/op

Iteration   5: 2953.839 ±(99.9%) 142.347 ms/op
                 executeQuery·p0.00:   2923.430 ms/op
                 executeQuery·p0.50:   2959.081 ms/op
                 executeQuery·p0.90:   2973.762 ms/op
                 executeQuery·p0.95:   2973.762 ms/op
                 executeQuery·p0.99:   2973.762 ms/op
                 executeQuery·p0.999:  2973.762 ms/op
                 executeQuery·p0.9999: 2973.762 ms/op
                 executeQuery·p1.00:   2973.762 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery":
  N = 60
  mean =   2835.210 ±(99.9%) 43.255 ms/op

  Histogram, ms/op:
    [2700.000, 2725.000) = 2 
    [2725.000, 2750.000) = 8 
    [2750.000, 2775.000) = 13 
    [2775.000, 2800.000) = 10 
    [2800.000, 2825.000) = 5 
    [2825.000, 2850.000) = 1 
    [2850.000, 2875.000) = 1 
    [2875.000, 2900.000) = 0 
    [2900.000, 2925.000) = 3 
    [2925.000, 2950.000) = 7 
    [2950.000, 2975.000) = 6 
    [2975.000, 3000.000) = 2 
    [3000.000, 3025.000) = 0 
    [3025.000, 3050.000) = 1 
    [3050.000, 3075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2717.909 ms/op
     p(50.0000) =   2791.309 ms/op
     p(90.0000) =   2969.567 ms/op
     p(95.0000) =   2985.925 ms/op
     p(99.0000) =   3087.008 ms/op
     p(99.9000) =   3087.008 ms/op
     p(99.9900) =   3087.008 ms/op
     p(99.9990) =   3087.008 ms/op
     p(99.9999) =   3087.008 ms/op
    p(100.0000) =   3087.008 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1)

# Run progress: 57.69% complete, ETA 01:57:51
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

372.035 ±(99.9%) 20.812 ms/op
# Warmup Iteration   2: 366.452 ±(99.9%) 2.706 ms/op
# Warmup Iteration   3: 382.311 ±(99.9%) 30.998 ms/op
# Warmup Iteration   4: 463.316 ±(99.9%) 1.234 ms/op
# Warmup Iteration   5: 463.563 ±(99.9%) 0.270 ms/op
Iteration   1: 463.686 ±(99.9%) 0.364 ms/op
                 executeQuery·p0.00:   462.946 ms/op
                 executeQuery·p0.50:   463.471 ms/op
                 executeQuery·p0.90:   464.100 ms/op
                 executeQuery·p0.95:   464.519 ms/op
                 executeQuery·p0.99:   464.519 ms/op
                 executeQuery·p0.999:  464.519 ms/op
                 executeQuery·p0.9999: 464.519 ms/op
                 executeQuery·p1.00:   464.519 ms/op

Iteration   2: 463.440 ±(99.9%) 0.493 ms/op
                 executeQuery·p0.00:   462.946 ms/op
                 executeQuery·p0.50:   463.471 ms/op
                 executeQuery·p0.90:   464.100 ms/op
                 executeQuery·p0.95:   464.519 ms/op
                 executeQuery·p0.99:   464.519 ms/op
                 executeQuery·p0.999:  464.519 ms/op
                 executeQuery·p0.9999: 464.519 ms/op
                 executeQuery·p1.00:   464.519 ms/op

Iteration   3: 463.686 ±(99.9%) 0.627 ms/op
                 executeQuery·p0.00:   461.373 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   463.995 ms/op
                 executeQuery·p0.95:   463.995 ms/op
                 executeQuery·p0.99:   463.995 ms/op
                 executeQuery·p0.999:  463.995 ms/op
                 executeQuery·p0.9999: 463.995 ms/op
                 executeQuery·p1.00:   463.995 ms/op

Iteration   4: 465.444 ±(99.9%) 6.668 ms/op
                 executeQuery·p0.00:   459.276 ms/op
                 executeQuery·p0.50:   463.471 ms/op
                 executeQuery·p0.90:   474.795 ms/op
                 executeQuery·p0.95:   490.734 ms/op
                 executeQuery·p0.99:   490.734 ms/op
                 executeQuery·p0.999:  490.734 ms/op
                 executeQuery·p0.9999: 490.734 ms/op
                 executeQuery·p1.00:   490.734 ms/op

Iteration   5: 465.414 ±(99.9%) 6.229 ms/op
                 executeQuery·p0.00:   463.471 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   469.657 ms/op
                 executeQuery·p0.95:   490.209 ms/op
                 executeQuery·p0.99:   490.209 ms/op
                 executeQuery·p0.999:  490.209 ms/op
                 executeQuery·p0.9999: 490.209 ms/op
                 executeQuery·p1.00:   490.209 ms/op


# Run progress: 58.33% complete, ETA 01:56:01
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

379.270 ±(99.9%) 22.417 ms/op
# Warmup Iteration   2: 372.952 ±(99.9%) 1.508 ms/op
# Warmup Iteration   3: 383.622 ±(99.9%) 25.807 ms/op
# Warmup Iteration   4: 464.982 ±(99.9%) 1.993 ms/op
# Warmup Iteration   5: 465.784 ±(99.9%) 3.537 ms/op
Iteration   1: 468.621 ±(99.9%) 5.045 ms/op
                 executeQuery·p0.00:   463.995 ms/op
                 executeQuery·p0.50:   465.043 ms/op
                 executeQuery·p0.90:   476.263 ms/op
                 executeQuery·p0.95:   477.102 ms/op
                 executeQuery·p0.99:   477.102 ms/op
                 executeQuery·p0.999:  477.102 ms/op
                 executeQuery·p0.9999: 477.102 ms/op
                 executeQuery·p1.00:   477.102 ms/op

Iteration   2: 465.321 ±(99.9%) 1.585 ms/op
                 executeQuery·p0.00:   463.995 ms/op
                 executeQuery·p0.50:   464.519 ms/op
                 executeQuery·p0.90:   468.713 ms/op
                 executeQuery·p0.95:   468.713 ms/op
                 executeQuery·p0.99:   468.713 ms/op
                 executeQuery·p0.999:  468.713 ms/op
                 executeQuery·p0.9999: 468.713 ms/op
                 executeQuery·p1.00:   468.713 ms/op

Iteration   3: 465.198 ±(99.9%) 2.440 ms/op
                 executeQuery·p0.00:   463.995 ms/op
                 executeQuery·p0.50:   464.519 ms/op
                 executeQuery·p0.90:   468.189 ms/op
                 executeQuery·p0.95:   474.481 ms/op
                 executeQuery·p0.99:   474.481 ms/op
                 executeQuery·p0.999:  474.481 ms/op
                 executeQuery·p0.9999: 474.481 ms/op
                 executeQuery·p1.00:   474.481 ms/op

Iteration   4: 464.951 ±(99.9%) 2.697 ms/op
                 executeQuery·p0.00:   463.471 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   471.649 ms/op
                 executeQuery·p0.95:   472.908 ms/op
                 executeQuery·p0.99:   472.908 ms/op
                 executeQuery·p0.999:  472.908 ms/op
                 executeQuery·p0.9999: 472.908 ms/op
                 executeQuery·p1.00:   472.908 ms/op

Iteration   5: 464.828 ±(99.9%) 2.578 ms/op
                 executeQuery·p0.00:   463.995 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   467.036 ms/op
                 executeQuery·p0.95:   475.005 ms/op
                 executeQuery·p0.99:   475.005 ms/op
                 executeQuery·p0.999:  475.005 ms/op
                 executeQuery·p0.9999: 475.005 ms/op
                 executeQuery·p1.00:   475.005 ms/op


# Run progress: 58.97% complete, ETA 01:54:11
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

379.532 ±(99.9%) 22.821 ms/op
# Warmup Iteration   2: 372.978 ±(99.9%) 1.545 ms/op
# Warmup Iteration   3: 382.861 ±(99.9%) 24.898 ms/op
# Warmup Iteration   4: 466.308 ±(99.9%) 6.374 ms/op
# Warmup Iteration   5: 465.691 ±(99.9%) 7.344 ms/op
Iteration   1: 465.907 ±(99.9%) 7.166 ms/op
                 executeQuery·p0.00:   463.471 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   471.335 ms/op
                 executeQuery·p0.95:   494.404 ms/op
                 executeQuery·p0.99:   494.404 ms/op
                 executeQuery·p0.999:  494.404 ms/op
                 executeQuery·p0.9999: 494.404 ms/op
                 executeQuery·p1.00:   494.404 ms/op

Iteration   2: 466.000 ±(99.9%) 7.187 ms/op
                 executeQuery·p0.00:   463.471 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   473.013 ms/op
                 executeQuery·p0.95:   494.404 ms/op
                 executeQuery·p0.99:   494.404 ms/op
                 executeQuery·p0.999:  494.404 ms/op
                 executeQuery·p0.9999: 494.404 ms/op
                 executeQuery·p1.00:   494.404 ms/op

Iteration   3: 464.180 ±(99.9%) 1.693 ms/op
                 executeQuery·p0.00:   463.471 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   465.777 ms/op
                 executeQuery·p0.95:   470.811 ms/op
                 executeQuery·p0.99:   470.811 ms/op
                 executeQuery·p0.999:  470.811 ms/op
                 executeQuery·p0.9999: 470.811 ms/op
                 executeQuery·p1.00:   470.811 ms/op

Iteration   4: 464.982 ±(99.9%) 3.141 ms/op
                 executeQuery·p0.00:   463.471 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   470.286 ms/op
                 executeQuery·p0.95:   476.578 ms/op
                 executeQuery·p0.99:   476.578 ms/op
                 executeQuery·p0.999:  476.578 ms/op
                 executeQuery·p0.9999: 476.578 ms/op
                 executeQuery·p1.00:   476.578 ms/op

Iteration   5: 464.581 ±(99.9%) 1.663 ms/op
                 executeQuery·p0.00:   463.471 ms/op
                 executeQuery·p0.50:   463.995 ms/op
                 executeQuery·p0.90:   466.616 ms/op
                 executeQuery·p0.95:   470.811 ms/op
                 executeQuery·p0.99:   470.811 ms/op
                 executeQuery·p0.999:  470.811 ms/op
                 executeQuery·p0.9999: 470.811 ms/op
                 executeQuery·p1.00:   470.811 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 255
  mean =    465.083 ±(99.9%) 0.887 ms/op

  Histogram, ms/op:
    [450.000, 455.000) = 0 
    [455.000, 460.000) = 1 
    [460.000, 465.000) = 210 
    [465.000, 470.000) = 26 
    [470.000, 475.000) = 8 
    [475.000, 480.000) = 6 
    [480.000, 485.000) = 0 
    [485.000, 490.000) = 0 
    [490.000, 495.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    459.276 ms/op
     p(50.0000) =    463.995 ms/op
     p(90.0000) =    467.036 ms/op
     p(95.0000) =    472.908 ms/op
     p(99.0000) =    492.348 ms/op
     p(99.9000) =    494.404 ms/op
     p(99.9900) =    494.404 ms/op
     p(99.9990) =    494.404 ms/op
     p(99.9999) =    494.404 ms/op
    p(100.0000) =    494.404 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4)

# Run progress: 59.62% complete, ETA 01:52:21
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

649.553 ±(99.9%) 37.136 ms/op
# Warmup Iteration   2: 639.257 ±(99.9%) 2.649 ms/op
# Warmup Iteration   3: 638.358 ±(99.9%) 2.185 ms/op
# Warmup Iteration   4: 641.406 ±(99.9%) 3.984 ms/op
# Warmup Iteration   5: 724.741 ±(99.9%) 63.099 ms/op
Iteration   1: 758.208 ±(99.9%) 6.046 ms/op
                 executeQuery·p0.00:   752.878 ms/op
                 executeQuery·p0.50:   757.072 ms/op
                 executeQuery·p0.90:   766.614 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   2: 757.072 ±(99.9%) 5.090 ms/op
                 executeQuery·p0.00:   752.878 ms/op
                 executeQuery·p0.50:   755.499 ms/op
                 executeQuery·p0.90:   764.936 ms/op
                 executeQuery·p0.95:   766.509 ms/op
                 executeQuery·p0.99:   766.509 ms/op
                 executeQuery·p0.999:  766.509 ms/op
                 executeQuery·p0.9999: 766.509 ms/op
                 executeQuery·p1.00:   766.509 ms/op

Iteration   3: 758.645 ±(99.9%) 3.553 ms/op
                 executeQuery·p0.00:   752.878 ms/op
                 executeQuery·p0.50:   758.645 ms/op
                 executeQuery·p0.90:   762.734 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op

Iteration   4: 760.305 ±(99.9%) 3.861 ms/op
                 executeQuery·p0.00:   751.829 ms/op
                 executeQuery·p0.50:   761.266 ms/op
                 executeQuery·p0.90:   763.049 ms/op
                 executeQuery·p0.95:   763.363 ms/op
                 executeQuery·p0.99:   763.363 ms/op
                 executeQuery·p0.999:  763.363 ms/op
                 executeQuery·p0.9999: 763.363 ms/op
                 executeQuery·p1.00:   763.363 ms/op

Iteration   5: 754.014 ±(99.9%) 2.323 ms/op
                 executeQuery·p0.00:   751.829 ms/op
                 executeQuery·p0.50:   753.926 ms/op
                 executeQuery·p0.90:   756.757 ms/op
                 executeQuery·p0.95:   757.072 ms/op
                 executeQuery·p0.99:   757.072 ms/op
                 executeQuery·p0.999:  757.072 ms/op
                 executeQuery·p0.9999: 757.072 ms/op
                 executeQuery·p1.00:   757.072 ms/op


# Run progress: 60.26% complete, ETA 01:50:34
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

664.797 ±(99.9%) 40.470 ms/op
# Warmup Iteration   2: 660.280 ±(99.9%) 9.541 ms/op
# Warmup Iteration   3: 657.618 ±(99.9%) 4.638 ms/op
# Warmup Iteration   4: 658.344 ±(99.9%) 4.993 ms/op
# Warmup Iteration   5: 705.080 ±(99.9%) 64.656 ms/op
Iteration   1: 750.606 ±(99.9%) 2.206 ms/op
                 executeQuery·p0.00:   749.732 ms/op
                 executeQuery·p0.50:   749.732 ms/op
                 executeQuery·p0.90:   754.346 ms/op
                 executeQuery·p0.95:   754.975 ms/op
                 executeQuery·p0.99:   754.975 ms/op
                 executeQuery·p0.999:  754.975 ms/op
                 executeQuery·p0.9999: 754.975 ms/op
                 executeQuery·p1.00:   754.975 ms/op

Iteration   2: 761.441 ±(99.9%) 7.080 ms/op
                 executeQuery·p0.00:   749.732 ms/op
                 executeQuery·p0.50:   761.790 ms/op
                 executeQuery·p0.90:   767.558 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   3: 757.509 ±(99.9%) 6.491 ms/op
                 executeQuery·p0.00:   749.732 ms/op
                 executeQuery·p0.50:   758.645 ms/op
                 executeQuery·p0.90:   762.315 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   4: 761.528 ±(99.9%) 6.118 ms/op
                 executeQuery·p0.00:   754.975 ms/op
                 executeQuery·p0.50:   759.693 ms/op
                 executeQuery·p0.90:   770.808 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   5: 766.946 ±(99.9%) 6.073 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   767.558 ms/op
                 executeQuery·p0.90:   774.583 ms/op
                 executeQuery·p0.95:   774.898 ms/op
                 executeQuery·p0.99:   774.898 ms/op
                 executeQuery·p0.999:  774.898 ms/op
                 executeQuery·p0.9999: 774.898 ms/op
                 executeQuery·p1.00:   774.898 ms/op


# Run progress: 60.90% complete, ETA 01:48:46
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

659.070 ±(99.9%) 36.673 ms/op
# Warmup Iteration   2: 651.488 ±(99.9%) 9.866 ms/op
# Warmup Iteration   3: 656.005 ±(99.9%) 6.455 ms/op
# Warmup Iteration   4: 653.585 ±(99.9%) 7.166 ms/op
# Warmup Iteration   5: 719.498 ±(99.9%) 71.102 ms/op
Iteration   1: 769.218 ±(99.9%) 4.633 ms/op
                 executeQuery·p0.00:   763.363 ms/op
                 executeQuery·p0.50:   769.655 ms/op
                 executeQuery·p0.90:   774.269 ms/op
                 executeQuery·p0.95:   774.898 ms/op
                 executeQuery·p0.99:   774.898 ms/op
                 executeQuery·p0.999:  774.898 ms/op
                 executeQuery·p0.9999: 774.898 ms/op
                 executeQuery·p1.00:   774.898 ms/op

Iteration   2: 769.130 ±(99.9%) 3.214 ms/op
                 executeQuery·p0.00:   763.363 ms/op
                 executeQuery·p0.50:   769.655 ms/op
                 executeQuery·p0.90:   771.752 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   3: 767.295 ±(99.9%) 5.844 ms/op
                 executeQuery·p0.00:   761.266 ms/op
                 executeQuery·p0.50:   768.606 ms/op
                 executeQuery·p0.90:   774.688 ms/op
                 executeQuery·p0.95:   775.946 ms/op
                 executeQuery·p0.99:   775.946 ms/op
                 executeQuery·p0.999:  775.946 ms/op
                 executeQuery·p0.9999: 775.946 ms/op
                 executeQuery·p1.00:   775.946 ms/op

Iteration   4: 770.791 ±(99.9%) 8.954 ms/op
                 executeQuery·p0.00:   762.315 ms/op
                 executeQuery·p0.50:   769.655 ms/op
                 executeQuery·p0.90:   781.923 ms/op
                 executeQuery·p0.95:   782.238 ms/op
                 executeQuery·p0.99:   782.238 ms/op
                 executeQuery·p0.999:  782.238 ms/op
                 executeQuery·p0.9999: 782.238 ms/op
                 executeQuery·p1.00:   782.238 ms/op

Iteration   5: 769.480 ±(99.9%) 6.295 ms/op
                 executeQuery·p0.00:   762.315 ms/op
                 executeQuery·p0.50:   770.179 ms/op
                 executeQuery·p0.90:   776.680 ms/op
                 executeQuery·p0.95:   776.995 ms/op
                 executeQuery·p0.99:   776.995 ms/op
                 executeQuery·p0.999:  776.995 ms/op
                 executeQuery·p0.9999: 776.995 ms/op
                 executeQuery·p1.00:   776.995 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 180
  mean =    762.146 ±(99.9%) 1.836 ms/op

  Histogram, ms/op:
    [740.000, 745.000) = 0 
    [745.000, 750.000) = 11 
    [750.000, 755.000) = 28 
    [755.000, 760.000) = 30 
    [760.000, 765.000) = 48 
    [765.000, 770.000) = 37 
    [770.000, 775.000) = 20 
    [775.000, 780.000) = 4 
    [780.000, 785.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    749.732 ms/op
     p(50.0000) =    762.315 ms/op
     p(90.0000) =    771.752 ms/op
     p(95.0000) =    774.845 ms/op
     p(99.0000) =    781.388 ms/op
     p(99.9000) =    782.238 ms/op
     p(99.9900) =    782.238 ms/op
     p(99.9990) =    782.238 ms/op
     p(99.9999) =    782.238 ms/op
    p(100.0000) =    782.238 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 61.54% complete, ETA 01:46:59
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

651.246 ±(99.9%) 37.004 ms/op
# Warmup Iteration   2: 654.311 ±(99.9%) 26.869 ms/op
# Warmup Iteration   3: 643.826 ±(99.9%) 6.382 ms/op
# Warmup Iteration   4: 645.681 ±(99.9%) 4.042 ms/op
# Warmup Iteration   5: 712.857 ±(99.9%) 77.511 ms/op
Iteration   1: 757.247 ±(99.9%) 27.392 ms/op
                 executeQuery·p0.00:   692.060 ms/op
                 executeQuery·p0.50:   761.790 ms/op
                 executeQuery·p0.90:   770.703 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   2: 755.237 ±(99.9%) 5.927 ms/op
                 executeQuery·p0.00:   751.829 ms/op
                 executeQuery·p0.50:   753.402 ms/op
                 executeQuery·p0.90:   765.460 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   3: 756.635 ±(99.9%) 4.379 ms/op
                 executeQuery·p0.00:   751.829 ms/op
                 executeQuery·p0.50:   755.499 ms/op
                 executeQuery·p0.90:   763.154 ms/op
                 executeQuery·p0.95:   764.412 ms/op
                 executeQuery·p0.99:   764.412 ms/op
                 executeQuery·p0.999:  764.412 ms/op
                 executeQuery·p0.9999: 764.412 ms/op
                 executeQuery·p1.00:   764.412 ms/op

Iteration   4: 756.897 ±(99.9%) 5.337 ms/op
                 executeQuery·p0.00:   752.878 ms/op
                 executeQuery·p0.50:   755.499 ms/op
                 executeQuery·p0.90:   765.670 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   5: 755.062 ±(99.9%) 3.410 ms/op
                 executeQuery·p0.00:   752.878 ms/op
                 executeQuery·p0.50:   754.975 ms/op
                 executeQuery·p0.90:   760.742 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op


# Run progress: 62.18% complete, ETA 01:45:11
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

653.263 ±(99.9%) 38.557 ms/op
# Warmup Iteration   2: 641.129 ±(99.9%) 3.956 ms/op
# Warmup Iteration   3: 647.375 ±(99.9%) 25.206 ms/op
# Warmup Iteration   4: 645.278 ±(99.9%) 4.905 ms/op
# Warmup Iteration   5: 717.139 ±(99.9%) 74.300 ms/op
Iteration   1: 765.024 ±(99.9%) 7.232 ms/op
                 executeQuery·p0.00:   754.975 ms/op
                 executeQuery·p0.50:   765.460 ms/op
                 executeQuery·p0.90:   772.905 ms/op
                 executeQuery·p0.95:   773.849 ms/op
                 executeQuery·p0.99:   773.849 ms/op
                 executeQuery·p0.999:  773.849 ms/op
                 executeQuery·p0.9999: 773.849 ms/op
                 executeQuery·p1.00:   773.849 ms/op

Iteration   2: 760.742 ±(99.9%) 5.418 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   759.693 ms/op
                 executeQuery·p0.90:   768.292 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   3: 760.305 ±(99.9%) 6.907 ms/op
                 executeQuery·p0.00:   753.926 ms/op
                 executeQuery·p0.50:   758.120 ms/op
                 executeQuery·p0.90:   769.340 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op

Iteration   4: 762.227 ±(99.9%) 2.393 ms/op
                 executeQuery·p0.00:   758.120 ms/op
                 executeQuery·p0.50:   762.839 ms/op
                 executeQuery·p0.90:   764.412 ms/op
                 executeQuery·p0.95:   764.412 ms/op
                 executeQuery·p0.99:   764.412 ms/op
                 executeQuery·p0.999:  764.412 ms/op
                 executeQuery·p0.9999: 764.412 ms/op
                 executeQuery·p1.00:   764.412 ms/op

Iteration   5: 764.062 ±(99.9%) 2.766 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   763.888 ms/op
                 executeQuery·p0.90:   767.977 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op


# Run progress: 62.82% complete, ETA 01:43:23
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

649.230 ±(99.9%) 35.253 ms/op
# Warmup Iteration   2: 638.957 ±(99.9%) 2.301 ms/op
# Warmup Iteration   3: 638.583 ±(99.9%) 2.022 ms/op
# Warmup Iteration   4: 639.332 ±(99.9%) 2.430 ms/op
# Warmup Iteration   5: 732.955 ±(99.9%) 60.312 ms/op
Iteration   1: 758.120 ±(99.9%) 2.430 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   757.072 ms/op
                 executeQuery·p0.90:   761.266 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op

Iteration   2: 757.946 ±(99.9%) 1.970 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   758.120 ms/op
                 executeQuery·p0.90:   760.218 ms/op
                 executeQuery·p0.95:   760.218 ms/op
                 executeQuery·p0.99:   760.218 ms/op
                 executeQuery·p0.999:  760.218 ms/op
                 executeQuery·p0.9999: 760.218 ms/op
                 executeQuery·p1.00:   760.218 ms/op

Iteration   3: 756.023 ±(99.9%) 1.620 ms/op
                 executeQuery·p0.00:   754.975 ms/op
                 executeQuery·p0.50:   756.023 ms/op
                 executeQuery·p0.90:   758.540 ms/op
                 executeQuery·p0.95:   759.169 ms/op
                 executeQuery·p0.99:   759.169 ms/op
                 executeQuery·p0.999:  759.169 ms/op
                 executeQuery·p0.9999: 759.169 ms/op
                 executeQuery·p1.00:   759.169 ms/op

Iteration   4: 758.033 ±(99.9%) 1.939 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   757.596 ms/op
                 executeQuery·p0.90:   760.952 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op

Iteration   5: 757.946 ±(99.9%) 1.970 ms/op
                 executeQuery·p0.00:   756.023 ms/op
                 executeQuery·p0.50:   758.120 ms/op
                 executeQuery·p0.90:   760.952 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 180
  mean =    758.767 ±(99.9%) 1.702 ms/op

  Histogram, ms/op:
    [690.000, 695.000) = 1 
    [695.000, 700.000) = 0 
    [700.000, 705.000) = 0 
    [705.000, 710.000) = 0 
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 0 
    [720.000, 725.000) = 0 
    [725.000, 730.000) = 0 
    [730.000, 735.000) = 0 
    [735.000, 740.000) = 0 
    [740.000, 745.000) = 0 
    [745.000, 750.000) = 0 
    [750.000, 755.000) = 38 
    [755.000, 760.000) = 74 
    [760.000, 765.000) = 47 
    [765.000, 770.000) = 15 
    [770.000, 775.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =    692.060 ms/op
     p(50.0000) =    758.120 ms/op
     p(90.0000) =    766.404 ms/op
     p(95.0000) =    768.606 ms/op
     p(99.0000) =    771.301 ms/op
     p(99.9000) =    773.849 ms/op
     p(99.9900) =    773.849 ms/op
     p(99.9990) =    773.849 ms/op
     p(99.9999) =    773.849 ms/op
    p(100.0000) =    773.849 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64)

# Run progress: 63.46% complete, ETA 01:41:36
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

600.984 ±(99.9%) 31.830 ms/op
# Warmup Iteration   2: 587.203 ±(99.9%) 4.252 ms/op
# Warmup Iteration   3: 589.150 ±(99.9%) 7.363 ms/op
# Warmup Iteration   4: 586.828 ±(99.9%) 5.010 ms/op
# Warmup Iteration   5: 670.524 ±(99.9%) 34.023 ms/op
Iteration   1: 682.300 ±(99.9%) 8.160 ms/op
                 executeQuery·p0.00:   679.477 ms/op
                 executeQuery·p0.50:   680.526 ms/op
                 executeQuery·p0.90:   696.254 ms/op
                 executeQuery·p0.95:   704.643 ms/op
                 executeQuery·p0.99:   704.643 ms/op
                 executeQuery·p0.999:  704.643 ms/op
                 executeQuery·p0.9999: 704.643 ms/op
                 executeQuery·p1.00:   704.643 ms/op

Iteration   2: 683.914 ±(99.9%) 7.828 ms/op
                 executeQuery·p0.00:   680.526 ms/op
                 executeQuery·p0.50:   681.574 ms/op
                 executeQuery·p0.90:   697.932 ms/op
                 executeQuery·p0.95:   704.643 ms/op
                 executeQuery·p0.99:   704.643 ms/op
                 executeQuery·p0.999:  704.643 ms/op
                 executeQuery·p0.9999: 704.643 ms/op
                 executeQuery·p1.00:   704.643 ms/op

Iteration   3: 681.978 ±(99.9%) 3.304 ms/op
                 executeQuery·p0.00:   679.477 ms/op
                 executeQuery·p0.50:   680.526 ms/op
                 executeQuery·p0.90:   687.027 ms/op
                 executeQuery·p0.95:   687.866 ms/op
                 executeQuery·p0.99:   687.866 ms/op
                 executeQuery·p0.999:  687.866 ms/op
                 executeQuery·p0.9999: 687.866 ms/op
                 executeQuery·p1.00:   687.866 ms/op

Iteration   4: 682.058 ±(99.9%) 5.013 ms/op
                 executeQuery·p0.00:   679.477 ms/op
                 executeQuery·p0.50:   680.526 ms/op
                 executeQuery·p0.90:   691.012 ms/op
                 executeQuery·p0.95:   695.206 ms/op
                 executeQuery·p0.99:   695.206 ms/op
                 executeQuery·p0.999:  695.206 ms/op
                 executeQuery·p0.9999: 695.206 ms/op
                 executeQuery·p1.00:   695.206 ms/op

Iteration   5: 680.606 ±(99.9%) 1.083 ms/op
                 executeQuery·p0.00:   679.477 ms/op
                 executeQuery·p0.50:   680.526 ms/op
                 executeQuery·p0.90:   682.204 ms/op
                 executeQuery·p0.95:   682.623 ms/op
                 executeQuery·p0.99:   682.623 ms/op
                 executeQuery·p0.999:  682.623 ms/op
                 executeQuery·p0.9999: 682.623 ms/op
                 executeQuery·p1.00:   682.623 ms/op


# Run progress: 64.10% complete, ETA 01:39:48
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

604.354 ±(99.9%) 31.018 ms/op
# Warmup Iteration   2: 591.247 ±(99.9%) 4.590 ms/op
# Warmup Iteration   3: 592.670 ±(99.9%) 9.909 ms/op
# Warmup Iteration   4: 592.970 ±(99.9%) 7.965 ms/op
# Warmup Iteration   5: 674.718 ±(99.9%) 36.226 ms/op
Iteration   1: 685.527 ±(99.9%) 6.467 ms/op
                 executeQuery·p0.00:   678.429 ms/op
                 executeQuery·p0.50:   686.817 ms/op
                 executeQuery·p0.90:   693.318 ms/op
                 executeQuery·p0.95:   696.254 ms/op
                 executeQuery·p0.99:   696.254 ms/op
                 executeQuery·p0.999:  696.254 ms/op
                 executeQuery·p0.9999: 696.254 ms/op
                 executeQuery·p1.00:   696.254 ms/op

Iteration   2: 685.365 ±(99.9%) 4.054 ms/op
                 executeQuery·p0.00:   678.429 ms/op
                 executeQuery·p0.50:   684.720 ms/op
                 executeQuery·p0.90:   688.914 ms/op
                 executeQuery·p0.95:   688.914 ms/op
                 executeQuery·p0.99:   688.914 ms/op
                 executeQuery·p0.999:  688.914 ms/op
                 executeQuery·p0.9999: 688.914 ms/op
                 executeQuery·p1.00:   688.914 ms/op

Iteration   3: 683.914 ±(99.9%) 7.106 ms/op
                 executeQuery·p0.00:   678.429 ms/op
                 executeQuery·p0.50:   682.623 ms/op
                 executeQuery·p0.90:   695.625 ms/op
                 executeQuery·p0.95:   699.400 ms/op
                 executeQuery·p0.99:   699.400 ms/op
                 executeQuery·p0.999:  699.400 ms/op
                 executeQuery·p0.9999: 699.400 ms/op
                 executeQuery·p1.00:   699.400 ms/op

Iteration   4: 683.833 ±(99.9%) 5.842 ms/op
                 executeQuery·p0.00:   677.380 ms/op
                 executeQuery·p0.50:   685.769 ms/op
                 executeQuery·p0.90:   689.544 ms/op
                 executeQuery·p0.95:   689.963 ms/op
                 executeQuery·p0.99:   689.963 ms/op
                 executeQuery·p0.999:  689.963 ms/op
                 executeQuery·p0.9999: 689.963 ms/op
                 executeQuery·p1.00:   689.963 ms/op

Iteration   5: 683.591 ±(99.9%) 6.119 ms/op
                 executeQuery·p0.00:   677.380 ms/op
                 executeQuery·p0.50:   684.720 ms/op
                 executeQuery·p0.90:   691.012 ms/op
                 executeQuery·p0.95:   693.109 ms/op
                 executeQuery·p0.99:   693.109 ms/op
                 executeQuery·p0.999:  693.109 ms/op
                 executeQuery·p0.9999: 693.109 ms/op
                 executeQuery·p1.00:   693.109 ms/op


# Run progress: 64.74% complete, ETA 01:38:01
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

601.059 ±(99.9%) 33.305 ms/op
# Warmup Iteration   2: 588.775 ±(99.9%) 2.695 ms/op
# Warmup Iteration   3: 590.648 ±(99.9%) 4.556 ms/op
# Warmup Iteration   4: 587.727 ±(99.9%) 3.338 ms/op
# Warmup Iteration   5: 672.057 ±(99.9%) 34.971 ms/op
Iteration   1: 677.622 ±(99.9%) 1.634 ms/op
                 executeQuery·p0.00:   675.283 ms/op
                 executeQuery·p0.50:   677.380 ms/op
                 executeQuery·p0.90:   679.477 ms/op
                 executeQuery·p0.95:   679.477 ms/op
                 executeQuery·p0.99:   679.477 ms/op
                 executeQuery·p0.999:  679.477 ms/op
                 executeQuery·p0.9999: 679.477 ms/op
                 executeQuery·p1.00:   679.477 ms/op

Iteration   2: 680.284 ±(99.9%) 4.138 ms/op
                 executeQuery·p0.00:   676.332 ms/op
                 executeQuery·p0.50:   679.477 ms/op
                 executeQuery·p0.90:   687.656 ms/op
                 executeQuery·p0.95:   688.914 ms/op
                 executeQuery·p0.99:   688.914 ms/op
                 executeQuery·p0.999:  688.914 ms/op
                 executeQuery·p0.9999: 688.914 ms/op
                 executeQuery·p1.00:   688.914 ms/op

Iteration   3: 677.945 ±(99.9%) 2.543 ms/op
                 executeQuery·p0.00:   675.283 ms/op
                 executeQuery·p0.50:   677.380 ms/op
                 executeQuery·p0.90:   681.784 ms/op
                 executeQuery·p0.95:   682.623 ms/op
                 executeQuery·p0.99:   682.623 ms/op
                 executeQuery·p0.999:  682.623 ms/op
                 executeQuery·p0.9999: 682.623 ms/op
                 executeQuery·p1.00:   682.623 ms/op

Iteration   4: 680.687 ±(99.9%) 9.492 ms/op
                 executeQuery·p0.00:   676.332 ms/op
                 executeQuery·p0.50:   679.477 ms/op
                 executeQuery·p0.90:   696.254 ms/op
                 executeQuery·p0.95:   706.740 ms/op
                 executeQuery·p0.99:   706.740 ms/op
                 executeQuery·p0.999:  706.740 ms/op
                 executeQuery·p0.9999: 706.740 ms/op
                 executeQuery·p1.00:   706.740 ms/op

Iteration   5: 679.235 ±(99.9%) 4.201 ms/op
                 executeQuery·p0.00:   676.332 ms/op
                 executeQuery·p0.50:   678.429 ms/op
                 executeQuery·p0.90:   686.608 ms/op
                 executeQuery·p0.95:   689.963 ms/op
                 executeQuery·p0.99:   689.963 ms/op
                 executeQuery·p0.999:  689.963 ms/op
                 executeQuery·p0.9999: 689.963 ms/op
                 executeQuery·p1.00:   689.963 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 195
  mean =    681.924 ±(99.9%) 1.232 ms/op

  Histogram, ms/op:
    [670.000, 672.500) = 0 
    [672.500, 675.000) = 0 
    [675.000, 677.500) = 32 
    [677.500, 680.000) = 55 
    [680.000, 682.500) = 44 
    [682.500, 685.000) = 23 
    [685.000, 687.500) = 9 
    [687.500, 690.000) = 25 
    [690.000, 692.500) = 0 
    [692.500, 695.000) = 1 
    [695.000, 697.500) = 2 
    [697.500, 700.000) = 1 
    [700.000, 702.500) = 0 
    [702.500, 705.000) = 2 
    [705.000, 707.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    675.283 ms/op
     p(50.0000) =    680.526 ms/op
     p(90.0000) =    688.285 ms/op
     p(95.0000) =    689.963 ms/op
     p(99.0000) =    704.727 ms/op
     p(99.9000) =    706.740 ms/op
     p(99.9900) =    706.740 ms/op
     p(99.9990) =    706.740 ms/op
     p(99.9999) =    706.740 ms/op
    p(100.0000) =    706.740 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256)

# Run progress: 65.38% complete, ETA 01:36:13
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

658.828 ±(99.9%) 36.922 ms/op
# Warmup Iteration   2: 643.100 ±(99.9%) 3.092 ms/op
# Warmup Iteration   3: 643.019 ±(99.9%) 4.786 ms/op
# Warmup Iteration   4: 645.036 ±(99.9%) 4.315 ms/op
# Warmup Iteration   5: 708.031 ±(99.9%) 60.824 ms/op
Iteration   1: 754.538 ±(99.9%) 13.570 ms/op
                 executeQuery·p0.00:   743.440 ms/op
                 executeQuery·p0.50:   750.780 ms/op
                 executeQuery·p0.90:   775.317 ms/op
                 executeQuery·p0.95:   775.946 ms/op
                 executeQuery·p0.99:   775.946 ms/op
                 executeQuery·p0.999:  775.946 ms/op
                 executeQuery·p0.9999: 775.946 ms/op
                 executeQuery·p1.00:   775.946 ms/op

Iteration   2: 754.450 ±(99.9%) 9.523 ms/op
                 executeQuery·p0.00:   742.392 ms/op
                 executeQuery·p0.50:   753.402 ms/op
                 executeQuery·p0.90:   767.033 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   3: 742.829 ±(99.9%) 25.031 ms/op
                 executeQuery·p0.00:   684.720 ms/op
                 executeQuery·p0.50:   745.013 ms/op
                 executeQuery·p0.90:   761.056 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   4: 747.460 ±(99.9%) 8.276 ms/op
                 executeQuery·p0.00:   742.392 ms/op
                 executeQuery·p0.50:   743.965 ms/op
                 executeQuery·p0.90:   758.854 ms/op
                 executeQuery·p0.95:   759.169 ms/op
                 executeQuery·p0.99:   759.169 ms/op
                 executeQuery·p0.999:  759.169 ms/op
                 executeQuery·p0.9999: 759.169 ms/op
                 executeQuery·p1.00:   759.169 ms/op

Iteration   5: 745.188 ±(99.9%) 7.474 ms/op
                 executeQuery·p0.00:   736.100 ms/op
                 executeQuery·p0.50:   743.965 ms/op
                 executeQuery·p0.90:   756.862 ms/op
                 executeQuery·p0.95:   758.120 ms/op
                 executeQuery·p0.99:   758.120 ms/op
                 executeQuery·p0.999:  758.120 ms/op
                 executeQuery·p0.9999: 758.120 ms/op
                 executeQuery·p1.00:   758.120 ms/op


# Run progress: 66.03% complete, ETA 01:34:25
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

652.618 ±(99.9%) 38.875 ms/op
# Warmup Iteration   2: 641.054 ±(99.9%) 4.242 ms/op
# Warmup Iteration   3: 639.631 ±(99.9%) 3.472 ms/op
# Warmup Iteration   4: 639.856 ±(99.9%) 4.206 ms/op
# Warmup Iteration   5: 731.906 ±(99.9%) 52.587 ms/op
Iteration   1: 746.324 ±(99.9%) 3.761 ms/op
                 executeQuery·p0.00:   738.198 ms/op
                 executeQuery·p0.50:   746.586 ms/op
                 executeQuery·p0.90:   748.683 ms/op
                 executeQuery·p0.95:   748.683 ms/op
                 executeQuery·p0.99:   748.683 ms/op
                 executeQuery·p0.999:  748.683 ms/op
                 executeQuery·p0.9999: 748.683 ms/op
                 executeQuery·p1.00:   748.683 ms/op

Iteration   2: 749.557 ±(99.9%) 6.575 ms/op
                 executeQuery·p0.00:   745.538 ms/op
                 executeQuery·p0.50:   747.110 ms/op
                 executeQuery·p0.90:   759.274 ms/op
                 executeQuery·p0.95:   760.218 ms/op
                 executeQuery·p0.99:   760.218 ms/op
                 executeQuery·p0.999:  760.218 ms/op
                 executeQuery·p0.9999: 760.218 ms/op
                 executeQuery·p1.00:   760.218 ms/op

Iteration   3: 752.091 ±(99.9%) 8.874 ms/op
                 executeQuery·p0.00:   745.538 ms/op
                 executeQuery·p0.50:   749.732 ms/op
                 executeQuery·p0.90:   765.460 ms/op
                 executeQuery·p0.95:   768.606 ms/op
                 executeQuery·p0.99:   768.606 ms/op
                 executeQuery·p0.999:  768.606 ms/op
                 executeQuery·p0.9999: 768.606 ms/op
                 executeQuery·p1.00:   768.606 ms/op

Iteration   4: 749.557 ±(99.9%) 4.393 ms/op
                 executeQuery·p0.00:   745.538 ms/op
                 executeQuery·p0.50:   748.159 ms/op
                 executeQuery·p0.90:   756.128 ms/op
                 executeQuery·p0.95:   757.072 ms/op
                 executeQuery·p0.99:   757.072 ms/op
                 executeQuery·p0.999:  757.072 ms/op
                 executeQuery·p0.9999: 757.072 ms/op
                 executeQuery·p1.00:   757.072 ms/op

Iteration   5: 748.509 ±(99.9%) 5.779 ms/op
                 executeQuery·p0.00:   745.538 ms/op
                 executeQuery·p0.50:   746.586 ms/op
                 executeQuery·p0.90:   758.540 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op


# Run progress: 66.67% complete, ETA 01:32:38
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

658.344 ±(99.9%) 38.451 ms/op
# Warmup Iteration   2: 647.939 ±(99.9%) 7.594 ms/op
# Warmup Iteration   3: 643.261 ±(99.9%) 6.716 ms/op
# Warmup Iteration   4: 639.556 ±(99.9%) 5.259 ms/op
# Warmup Iteration   5: 716.614 ±(99.9%) 72.946 ms/op
Iteration   1: 755.849 ±(99.9%) 8.156 ms/op
                 executeQuery·p0.00:   750.780 ms/op
                 executeQuery·p0.50:   752.353 ms/op
                 executeQuery·p0.90:   766.194 ms/op
                 executeQuery·p0.95:   766.509 ms/op
                 executeQuery·p0.99:   766.509 ms/op
                 executeQuery·p0.999:  766.509 ms/op
                 executeQuery·p0.9999: 766.509 ms/op
                 executeQuery·p1.00:   766.509 ms/op

Iteration   2: 755.062 ±(99.9%) 10.009 ms/op
                 executeQuery·p0.00:   748.683 ms/op
                 executeQuery·p0.50:   751.829 ms/op
                 executeQuery·p0.90:   770.808 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   3: 758.295 ±(99.9%) 10.226 ms/op
                 executeQuery·p0.00:   749.732 ms/op
                 executeQuery·p0.50:   757.596 ms/op
                 executeQuery·p0.90:   770.494 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   4: 755.586 ±(99.9%) 14.276 ms/op
                 executeQuery·p0.00:   748.683 ms/op
                 executeQuery·p0.50:   751.305 ms/op
                 executeQuery·p0.90:   780.665 ms/op
                 executeQuery·p0.95:   788.529 ms/op
                 executeQuery·p0.99:   788.529 ms/op
                 executeQuery·p0.999:  788.529 ms/op
                 executeQuery·p0.9999: 788.529 ms/op
                 executeQuery·p1.00:   788.529 ms/op

Iteration   5: 754.363 ±(99.9%) 7.841 ms/op
                 executeQuery·p0.00:   748.683 ms/op
                 executeQuery·p0.50:   752.353 ms/op
                 executeQuery·p0.90:   764.831 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 180
  mean =    751.311 ±(99.9%) 2.304 ms/op

  Histogram, ms/op:
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 1 
    [687.500, 700.000) = 0 
    [700.000, 712.500) = 0 
    [712.500, 725.000) = 0 
    [725.000, 737.500) = 1 
    [737.500, 750.000) = 94 
    [750.000, 762.500) = 67 
    [762.500, 775.000) = 15 
    [775.000, 787.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    684.720 ms/op
     p(50.0000) =    749.732 ms/op
     p(90.0000) =    762.315 ms/op
     p(95.0000) =    767.558 ms/op
     p(99.0000) =    778.337 ms/op
     p(99.9000) =    788.529 ms/op
     p(99.9900) =    788.529 ms/op
     p(99.9990) =    788.529 ms/op
     p(99.9999) =    788.529 ms/op
    p(100.0000) =    788.529 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024)

# Run progress: 67.31% complete, ETA 01:30:51
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

665.281 ±(99.9%) 36.317 ms/op
# Warmup Iteration   2: 655.521 ±(99.9%) 5.541 ms/op
# Warmup Iteration   3: 655.360 ±(99.9%) 4.642 ms/op
# Warmup Iteration   4: 657.618 ±(99.9%) 2.893 ms/op
# Warmup Iteration   5: 719.847 ±(99.9%) 64.555 ms/op
Iteration   1: 756.373 ±(99.9%) 3.592 ms/op
                 executeQuery·p0.00:   752.878 ms/op
                 executeQuery·p0.50:   756.023 ms/op
                 executeQuery·p0.90:   761.371 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   2: 756.548 ±(99.9%) 2.835 ms/op
                 executeQuery·p0.00:   753.926 ms/op
                 executeQuery·p0.50:   756.548 ms/op
                 executeQuery·p0.90:   759.903 ms/op
                 executeQuery·p0.95:   760.218 ms/op
                 executeQuery·p0.99:   760.218 ms/op
                 executeQuery·p0.999:  760.218 ms/op
                 executeQuery·p0.9999: 760.218 ms/op
                 executeQuery·p1.00:   760.218 ms/op

Iteration   3: 763.538 ±(99.9%) 6.916 ms/op
                 executeQuery·p0.00:   753.926 ms/op
                 executeQuery·p0.50:   763.363 ms/op
                 executeQuery·p0.90:   770.703 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   4: 764.587 ±(99.9%) 4.786 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   764.412 ms/op
                 executeQuery·p0.90:   770.808 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   5: 766.072 ±(99.9%) 5.566 ms/op
                 executeQuery·p0.00:   760.218 ms/op
                 executeQuery·p0.50:   765.985 ms/op
                 executeQuery·p0.90:   771.752 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op


# Run progress: 67.95% complete, ETA 01:29:04
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

665.281 ±(99.9%) 37.653 ms/op
# Warmup Iteration   2: 661.087 ±(99.9%) 6.890 ms/op
# Warmup Iteration   3: 654.150 ±(99.9%) 6.522 ms/op
# Warmup Iteration   4: 655.037 ±(99.9%) 10.051 ms/op
# Warmup Iteration   5: 727.187 ±(99.9%) 70.168 ms/op
Iteration   1: 763.800 ±(99.9%) 8.088 ms/op
                 executeQuery·p0.00:   752.878 ms/op
                 executeQuery·p0.50:   765.985 ms/op
                 executeQuery·p0.90:   772.276 ms/op
                 executeQuery·p0.95:   773.849 ms/op
                 executeQuery·p0.99:   773.849 ms/op
                 executeQuery·p0.999:  773.849 ms/op
                 executeQuery·p0.9999: 773.849 ms/op
                 executeQuery·p1.00:   773.849 ms/op

Iteration   2: 764.936 ±(99.9%) 4.635 ms/op
                 executeQuery·p0.00:   761.266 ms/op
                 executeQuery·p0.50:   762.839 ms/op
                 executeQuery·p0.90:   771.437 ms/op
                 executeQuery·p0.95:   771.752 ms/op
                 executeQuery·p0.99:   771.752 ms/op
                 executeQuery·p0.999:  771.752 ms/op
                 executeQuery·p0.9999: 771.752 ms/op
                 executeQuery·p1.00:   771.752 ms/op

Iteration   3: 762.839 ±(99.9%) 4.380 ms/op
                 executeQuery·p0.00:   757.072 ms/op
                 executeQuery·p0.50:   762.839 ms/op
                 executeQuery·p0.90:   767.558 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   4: 766.684 ±(99.9%) 7.263 ms/op
                 executeQuery·p0.00:   759.169 ms/op
                 executeQuery·p0.50:   767.558 ms/op
                 executeQuery·p0.90:   775.317 ms/op
                 executeQuery·p0.95:   775.946 ms/op
                 executeQuery·p0.99:   775.946 ms/op
                 executeQuery·p0.999:  775.946 ms/op
                 executeQuery·p0.9999: 775.946 ms/op
                 executeQuery·p1.00:   775.946 ms/op

Iteration   5: 769.917 ±(99.9%) 5.467 ms/op
                 executeQuery·p0.00:   761.266 ms/op
                 executeQuery·p0.50:   769.655 ms/op
                 executeQuery·p0.90:   776.051 ms/op
                 executeQuery·p0.95:   776.995 ms/op
                 executeQuery·p0.99:   776.995 ms/op
                 executeQuery·p0.999:  776.995 ms/op
                 executeQuery·p0.9999: 776.995 ms/op
                 executeQuery·p1.00:   776.995 ms/op


# Run progress: 68.59% complete, ETA 01:27:17
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

663.749 ±(99.9%) 39.280 ms/op
# Warmup Iteration   2: 657.699 ±(99.9%) 5.380 ms/op
# Warmup Iteration   3: 651.488 ±(99.9%) 6.370 ms/op
# Warmup Iteration   4: 655.037 ±(99.9%) 2.633 ms/op
# Warmup Iteration   5: 730.945 ±(99.9%) 73.615 ms/op
Iteration   1: 766.859 ±(99.9%) 6.662 ms/op
                 executeQuery·p0.00:   761.266 ms/op
                 executeQuery·p0.50:   766.509 ms/op
                 executeQuery·p0.90:   776.156 ms/op
                 executeQuery·p0.95:   778.043 ms/op
                 executeQuery·p0.99:   778.043 ms/op
                 executeQuery·p0.999:  778.043 ms/op
                 executeQuery·p0.9999: 778.043 ms/op
                 executeQuery·p1.00:   778.043 ms/op

Iteration   2: 776.296 ±(99.9%) 4.022 ms/op
                 executeQuery·p0.00:   768.606 ms/op
                 executeQuery·p0.50:   776.995 ms/op
                 executeQuery·p0.90:   779.092 ms/op
                 executeQuery·p0.95:   779.092 ms/op
                 executeQuery·p0.99:   779.092 ms/op
                 executeQuery·p0.999:  779.092 ms/op
                 executeQuery·p0.9999: 779.092 ms/op
                 executeQuery·p1.00:   779.092 ms/op

Iteration   3: 773.237 ±(99.9%) 8.387 ms/op
                 executeQuery·p0.00:   762.315 ms/op
                 executeQuery·p0.50:   775.946 ms/op
                 executeQuery·p0.90:   779.092 ms/op
                 executeQuery·p0.95:   779.092 ms/op
                 executeQuery·p0.99:   779.092 ms/op
                 executeQuery·p0.999:  779.092 ms/op
                 executeQuery·p0.9999: 779.092 ms/op
                 executeQuery·p1.00:   779.092 ms/op

Iteration   4: 777.257 ±(99.9%) 6.277 ms/op
                 executeQuery·p0.00:   764.412 ms/op
                 executeQuery·p0.50:   779.092 ms/op
                 executeQuery·p0.90:   781.923 ms/op
                 executeQuery·p0.95:   782.238 ms/op
                 executeQuery·p0.99:   782.238 ms/op
                 executeQuery·p0.999:  782.238 ms/op
                 executeQuery·p0.9999: 782.238 ms/op
                 executeQuery·p1.00:   782.238 ms/op

Iteration   5: 778.131 ±(99.9%) 2.832 ms/op
                 executeQuery·p0.00:   773.849 ms/op
                 executeQuery·p0.50:   778.043 ms/op
                 executeQuery·p0.90:   781.189 ms/op
                 executeQuery·p0.95:   781.189 ms/op
                 executeQuery·p0.99:   781.189 ms/op
                 executeQuery·p0.999:  781.189 ms/op
                 executeQuery·p0.9999: 781.189 ms/op
                 executeQuery·p1.00:   781.189 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 180
  mean =    767.138 ±(99.9%) 1.947 ms/op

  Histogram, ms/op:
    [750.000, 752.500) = 0 
    [752.500, 755.000) = 14 
    [755.000, 757.500) = 6 
    [757.500, 760.000) = 14 
    [760.000, 762.500) = 31 
    [762.500, 765.000) = 14 
    [765.000, 767.500) = 12 
    [767.500, 770.000) = 27 
    [770.000, 772.500) = 14 
    [772.500, 775.000) = 6 
    [775.000, 777.500) = 20 
    [777.500, 780.000) = 14 
    [780.000, 782.500) = 8 
    [782.500, 785.000) = 0 
    [785.000, 787.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    752.878 ms/op
     p(50.0000) =    766.509 ms/op
     p(90.0000) =    778.043 ms/op
     p(95.0000) =    779.092 ms/op
     p(99.0000) =    781.388 ms/op
     p(99.9000) =    782.238 ms/op
     p(99.9900) =    782.238 ms/op
     p(99.9990) =    782.238 ms/op
     p(99.9999) =    782.238 ms/op
    p(100.0000) =    782.238 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096)

# Run progress: 69.23% complete, ETA 01:25:30
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

801.493 ±(99.9%) 54.940 ms/op
# Warmup Iteration   2: 789.101 ±(99.9%) 7.979 ms/op
# Warmup Iteration   3: 785.860 ±(99.9%) 6.399 ms/op
# Warmup Iteration   4: 786.051 ±(99.9%) 4.822 ms/op
# Warmup Iteration   5: 786.241 ±(99.9%) 5.721 ms/op
Iteration   1: 785.193 ±(99.9%) 6.889 ms/op
                 executeQuery·p0.00:   781.189 ms/op
                 executeQuery·p0.50:   782.238 ms/op
                 executeQuery·p0.90:   795.869 ms/op
                 executeQuery·p0.95:   796.918 ms/op
                 executeQuery·p0.99:   796.918 ms/op
                 executeQuery·p0.999:  796.918 ms/op
                 executeQuery·p0.9999: 796.918 ms/op
                 executeQuery·p1.00:   796.918 ms/op

Iteration   2: 785.383 ±(99.9%) 8.381 ms/op
                 executeQuery·p0.00:   781.189 ms/op
                 executeQuery·p0.50:   782.238 ms/op
                 executeQuery·p0.90:   797.547 ms/op
                 executeQuery·p0.95:   797.966 ms/op
                 executeQuery·p0.99:   797.966 ms/op
                 executeQuery·p0.999:  797.966 ms/op
                 executeQuery·p0.9999: 797.966 ms/op
                 executeQuery·p1.00:   797.966 ms/op

Iteration   3: 786.527 ±(99.9%) 7.177 ms/op
                 executeQuery·p0.00:   780.141 ms/op
                 executeQuery·p0.50:   785.383 ms/op
                 executeQuery·p0.90:   796.289 ms/op
                 executeQuery·p0.95:   796.918 ms/op
                 executeQuery·p0.99:   796.918 ms/op
                 executeQuery·p0.999:  796.918 ms/op
                 executeQuery·p0.9999: 796.918 ms/op
                 executeQuery·p1.00:   796.918 ms/op

Iteration   4: 789.673 ±(99.9%) 7.350 ms/op
                 executeQuery·p0.00:   782.238 ms/op
                 executeQuery·p0.50:   789.578 ms/op
                 executeQuery·p0.90:   795.869 ms/op
                 executeQuery·p0.95:   795.869 ms/op
                 executeQuery·p0.99:   795.869 ms/op
                 executeQuery·p0.999:  795.869 ms/op
                 executeQuery·p0.9999: 795.869 ms/op
                 executeQuery·p1.00:   795.869 ms/op

Iteration   5: 788.624 ±(99.9%) 8.189 ms/op
                 executeQuery·p0.00:   781.189 ms/op
                 executeQuery·p0.50:   787.481 ms/op
                 executeQuery·p0.90:   797.757 ms/op
                 executeQuery·p0.95:   797.966 ms/op
                 executeQuery·p0.99:   797.966 ms/op
                 executeQuery·p0.999:  797.966 ms/op
                 executeQuery·p0.9999: 797.966 ms/op
                 executeQuery·p1.00:   797.966 ms/op


# Run progress: 69.87% complete, ETA 01:23:41
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

746.848 ±(99.9%) 42.212 ms/op
# Warmup Iteration   2: 734.964 ±(99.9%) 5.008 ms/op
# Warmup Iteration   3: 732.692 ±(99.9%) 3.296 ms/op
# Warmup Iteration   4: 732.780 ±(99.9%) 4.002 ms/op
# Warmup Iteration   5: 758.819 ±(99.9%) 60.103 ms/op
Iteration   1: 857.354 ±(99.9%) 8.756 ms/op
                 executeQuery·p0.00:   847.249 ms/op
                 executeQuery·p0.50:   860.881 ms/op
                 executeQuery·p0.90:   863.817 ms/op
                 executeQuery·p0.95:   864.027 ms/op
                 executeQuery·p0.99:   864.027 ms/op
                 executeQuery·p0.999:  864.027 ms/op
                 executeQuery·p0.9999: 864.027 ms/op
                 executeQuery·p1.00:   864.027 ms/op

Iteration   2: 859.832 ±(99.9%) 7.104 ms/op
                 executeQuery·p0.00:   850.395 ms/op
                 executeQuery·p0.50:   861.929 ms/op
                 executeQuery·p0.90:   865.704 ms/op
                 executeQuery·p0.95:   866.124 ms/op
                 executeQuery·p0.99:   866.124 ms/op
                 executeQuery·p0.999:  866.124 ms/op
                 executeQuery·p0.9999: 866.124 ms/op
                 executeQuery·p1.00:   866.124 ms/op

Iteration   3: 860.500 ±(99.9%) 7.053 ms/op
                 executeQuery·p0.00:   848.298 ms/op
                 executeQuery·p0.50:   860.881 ms/op
                 executeQuery·p0.90:   867.382 ms/op
                 executeQuery·p0.95:   868.221 ms/op
                 executeQuery·p0.99:   868.221 ms/op
                 executeQuery·p0.999:  868.221 ms/op
                 executeQuery·p0.9999: 868.221 ms/op
                 executeQuery·p1.00:   868.221 ms/op

Iteration   4: 861.834 ±(99.9%) 3.398 ms/op
                 executeQuery·p0.00:   855.638 ms/op
                 executeQuery·p0.50:   861.929 ms/op
                 executeQuery·p0.90:   864.865 ms/op
                 executeQuery·p0.95:   865.075 ms/op
                 executeQuery·p0.99:   865.075 ms/op
                 executeQuery·p0.999:  865.075 ms/op
                 executeQuery·p0.9999: 865.075 ms/op
                 executeQuery·p1.00:   865.075 ms/op

Iteration   5: 861.929 ±(99.9%) 11.006 ms/op
                 executeQuery·p0.00:   847.249 ms/op
                 executeQuery·p0.50:   859.832 ms/op
                 executeQuery·p0.90:   873.254 ms/op
                 executeQuery·p0.95:   873.464 ms/op
                 executeQuery·p0.99:   873.464 ms/op
                 executeQuery·p0.999:  873.464 ms/op
                 executeQuery·p0.9999: 873.464 ms/op
                 executeQuery·p1.00:   873.464 ms/op


# Run progress: 70.51% complete, ETA 01:21:55
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

743.003 ±(99.9%) 42.330 ms/op
# Warmup Iteration   2: 730.683 ±(99.9%) 1.885 ms/op
# Warmup Iteration   3: 740.557 ±(99.9%) 24.122 ms/op
# Warmup Iteration   4: 734.003 ±(99.9%) 10.881 ms/op
# Warmup Iteration   5: 767.121 ±(99.9%) 63.724 ms/op
Iteration   1: 864.980 ±(99.9%) 12.848 ms/op
                 executeQuery·p0.00:   852.492 ms/op
                 executeQuery·p0.50:   861.929 ms/op
                 executeQuery·p0.90:   883.740 ms/op
                 executeQuery·p0.95:   884.998 ms/op
                 executeQuery·p0.99:   884.998 ms/op
                 executeQuery·p0.999:  884.998 ms/op
                 executeQuery·p0.9999: 884.998 ms/op
                 executeQuery·p1.00:   884.998 ms/op

Iteration   2: 863.741 ±(99.9%) 13.896 ms/op
                 executeQuery·p0.00:   855.638 ms/op
                 executeQuery·p0.50:   859.832 ms/op
                 executeQuery·p0.90:   884.159 ms/op
                 executeQuery·p0.95:   884.998 ms/op
                 executeQuery·p0.99:   884.998 ms/op
                 executeQuery·p0.999:  884.998 ms/op
                 executeQuery·p0.9999: 884.998 ms/op
                 executeQuery·p1.00:   884.998 ms/op

Iteration   3: 862.406 ±(99.9%) 18.778 ms/op
                 executeQuery·p0.00:   847.249 ms/op
                 executeQuery·p0.50:   860.881 ms/op
                 executeQuery·p0.90:   887.724 ms/op
                 executeQuery·p0.95:   888.144 ms/op
                 executeQuery·p0.99:   888.144 ms/op
                 executeQuery·p0.999:  888.144 ms/op
                 executeQuery·p0.9999: 888.144 ms/op
                 executeQuery·p1.00:   888.144 ms/op

Iteration   4: 861.643 ±(99.9%) 14.662 ms/op
                 executeQuery·p0.00:   848.298 ms/op
                 executeQuery·p0.50:   859.832 ms/op
                 executeQuery·p0.90:   882.901 ms/op
                 executeQuery·p0.95:   883.950 ms/op
                 executeQuery·p0.99:   883.950 ms/op
                 executeQuery·p0.999:  883.950 ms/op
                 executeQuery·p0.9999: 883.950 ms/op
                 executeQuery·p1.00:   883.950 ms/op

Iteration   5: 856.687 ±(99.9%) 20.209 ms/op
                 executeQuery·p0.00:   847.249 ms/op
                 executeQuery·p0.50:   850.395 ms/op
                 executeQuery·p0.90:   890.870 ms/op
                 executeQuery·p0.95:   897.581 ms/op
                 executeQuery·p0.99:   897.581 ms/op
                 executeQuery·p0.999:  897.581 ms/op
                 executeQuery·p0.9999: 897.581 ms/op
                 executeQuery·p1.00:   897.581 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 165
  mean =    836.420 ±(99.9%) 9.375 ms/op

  Histogram, ms/op:
    [700.000, 712.500) = 0 
    [712.500, 725.000) = 0 
    [725.000, 737.500) = 0 
    [737.500, 750.000) = 0 
    [750.000, 762.500) = 0 
    [762.500, 775.000) = 0 
    [775.000, 787.500) = 35 
    [787.500, 800.000) = 20 
    [800.000, 812.500) = 0 
    [812.500, 825.000) = 0 
    [825.000, 837.500) = 0 
    [837.500, 850.000) = 12 
    [850.000, 862.500) = 63 
    [862.500, 875.000) = 26 
    [875.000, 887.500) = 7 

  Percentiles, ms/op:
      p(0.0000) =    780.141 ms/op
     p(50.0000) =    855.638 ms/op
     p(90.0000) =    866.124 ms/op
     p(95.0000) =    878.707 ms/op
     p(99.0000) =    891.353 ms/op
     p(99.9000) =    897.581 ms/op
     p(99.9900) =    897.581 ms/op
     p(99.9990) =    897.581 ms/op
     p(99.9999) =    897.581 ms/op
    p(100.0000) =    897.581 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384)

# Run progress: 71.15% complete, ETA 01:20:09
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1116.996 ±(99.9%) 75.714 ms/op
# Warmup Iteration   2: 1106.830 ±(99.9%) 25.460 ms/op
# Warmup Iteration   3: 1108.694 ±(99.9%) 22.358 ms/op
# Warmup Iteration   4: 1141.899 ±(99.9%) 60.431 ms/op
# Warmup Iteration   5: 1146.880 ±(99.9%) 78.849 ms/op
Iteration   1: 1121.714 ±(99.9%) 5.845 ms/op
                 executeQuery·p0.00:   1117.782 ms/op
                 executeQuery·p0.50:   1121.976 ms/op
                 executeQuery·p0.90:   1128.268 ms/op
                 executeQuery·p0.95:   1128.268 ms/op
                 executeQuery·p0.99:   1128.268 ms/op
                 executeQuery·p0.999:  1128.268 ms/op
                 executeQuery·p0.9999: 1128.268 ms/op
                 executeQuery·p1.00:   1128.268 ms/op

Iteration   2: 1127.219 ±(99.9%) 17.146 ms/op
                 executeQuery·p0.00:   1119.879 ms/op
                 executeQuery·p0.50:   1123.025 ms/op
                 executeQuery·p0.90:   1147.142 ms/op
                 executeQuery·p0.95:   1147.142 ms/op
                 executeQuery·p0.99:   1147.142 ms/op
                 executeQuery·p0.999:  1147.142 ms/op
                 executeQuery·p0.9999: 1147.142 ms/op
                 executeQuery·p1.00:   1147.142 ms/op

Iteration   3: 1121.190 ±(99.9%) 6.038 ms/op
                 executeQuery·p0.00:   1113.588 ms/op
                 executeQuery·p0.50:   1121.976 ms/op
                 executeQuery·p0.90:   1124.073 ms/op
                 executeQuery·p0.95:   1124.073 ms/op
                 executeQuery·p0.99:   1124.073 ms/op
                 executeQuery·p0.999:  1124.073 ms/op
                 executeQuery·p0.9999: 1124.073 ms/op
                 executeQuery·p1.00:   1124.073 ms/op

Iteration   4: 1126.171 ±(99.9%) 17.803 ms/op
                 executeQuery·p0.00:   1117.782 ms/op
                 executeQuery·p0.50:   1121.976 ms/op
                 executeQuery·p0.90:   1142.948 ms/op
                 executeQuery·p0.95:   1142.948 ms/op
                 executeQuery·p0.99:   1142.948 ms/op
                 executeQuery·p0.999:  1142.948 ms/op
                 executeQuery·p0.9999: 1142.948 ms/op
                 executeQuery·p1.00:   1142.948 ms/op

Iteration   5: 1122.501 ±(99.9%) 7.027 ms/op
                 executeQuery·p0.00:   1117.782 ms/op
                 executeQuery·p0.50:   1121.976 ms/op
                 executeQuery·p0.90:   1130.365 ms/op
                 executeQuery·p0.95:   1130.365 ms/op
                 executeQuery·p0.99:   1130.365 ms/op
                 executeQuery·p0.999:  1130.365 ms/op
                 executeQuery·p0.9999: 1130.365 ms/op
                 executeQuery·p1.00:   1130.365 ms/op


# Run progress: 71.79% complete, ETA 01:18:21
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1105.986 ±(99.9%) 62.960 ms/op
# Warmup Iteration   2: 1093.082 ±(99.9%) 14.824 ms/op
# Warmup Iteration   3: 1091.917 ±(99.9%) 1.762 ms/op
# Warmup Iteration   4: 1088.888 ±(99.9%) 5.510 ms/op
# Warmup Iteration   5: 1093.781 ±(99.9%) 42.659 ms/op
Iteration   1: 1090.752 ±(99.9%) 11.067 ms/op
                 executeQuery·p0.00:   1075.839 ms/op
                 executeQuery·p0.50:   1090.519 ms/op
                 executeQuery·p0.90:   1101.005 ms/op
                 executeQuery·p0.95:   1101.005 ms/op
                 executeQuery·p0.99:   1101.005 ms/op
                 executeQuery·p0.999:  1101.005 ms/op
                 executeQuery·p0.9999: 1101.005 ms/op
                 executeQuery·p1.00:   1101.005 ms/op

Iteration   2: 1088.305 ±(99.9%) 13.140 ms/op
                 executeQuery·p0.00:   1068.499 ms/op
                 executeQuery·p0.50:   1090.519 ms/op
                 executeQuery·p0.90:   1096.810 ms/op
                 executeQuery·p0.95:   1096.810 ms/op
                 executeQuery·p0.99:   1096.810 ms/op
                 executeQuery·p0.999:  1096.810 ms/op
                 executeQuery·p0.9999: 1096.810 ms/op
                 executeQuery·p1.00:   1096.810 ms/op

Iteration   3: 1089.820 ±(99.9%) 4.984 ms/op
                 executeQuery·p0.00:   1082.130 ms/op
                 executeQuery·p0.50:   1090.519 ms/op
                 executeQuery·p0.90:   1092.616 ms/op
                 executeQuery·p0.95:   1092.616 ms/op
                 executeQuery·p0.99:   1092.616 ms/op
                 executeQuery·p0.999:  1092.616 ms/op
                 executeQuery·p0.9999: 1092.616 ms/op
                 executeQuery·p1.00:   1092.616 ms/op

Iteration   4: 1090.985 ±(99.9%) 3.425 ms/op
                 executeQuery·p0.00:   1086.325 ms/op
                 executeQuery·p0.50:   1090.519 ms/op
                 executeQuery·p0.90:   1092.616 ms/op
                 executeQuery·p0.95:   1092.616 ms/op
                 executeQuery·p0.99:   1092.616 ms/op
                 executeQuery·p0.999:  1092.616 ms/op
                 executeQuery·p0.9999: 1092.616 ms/op
                 executeQuery·p1.00:   1092.616 ms/op

Iteration   5: 1089.354 ±(99.9%) 5.018 ms/op
                 executeQuery·p0.00:   1082.130 ms/op
                 executeQuery·p0.50:   1090.519 ms/op
                 executeQuery·p0.90:   1092.616 ms/op
                 executeQuery·p0.95:   1092.616 ms/op
                 executeQuery·p0.99:   1092.616 ms/op
                 executeQuery·p0.999:  1092.616 ms/op
                 executeQuery·p0.9999: 1092.616 ms/op
                 executeQuery·p1.00:   1092.616 ms/op


# Run progress: 72.44% complete, ETA 01:16:36
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1157.890 ±(99.9%) 81.457 ms/op
# Warmup Iteration   2: 1129.316 ±(99.9%) 28.272 ms/op
# Warmup Iteration   3: 1127.219 ±(99.9%) 62.007 ms/op
# Warmup Iteration   4: 1137.967 ±(99.9%) 74.460 ms/op
# Warmup Iteration   5: 1114.753 ±(99.9%) 5.319 ms/op
Iteration   1: 1129.841 ±(99.9%) 40.595 ms/op
                 executeQuery·p0.00:   1113.588 ms/op
                 executeQuery·p0.50:   1124.073 ms/op
                 executeQuery·p0.90:   1180.697 ms/op
                 executeQuery·p0.95:   1180.697 ms/op
                 executeQuery·p0.99:   1180.697 ms/op
                 executeQuery·p0.999:  1180.697 ms/op
                 executeQuery·p0.9999: 1180.697 ms/op
                 executeQuery·p1.00:   1180.697 ms/op

Iteration   2: 1122.675 ±(99.9%) 19.302 ms/op
                 executeQuery·p0.00:   1113.588 ms/op
                 executeQuery·p0.50:   1117.782 ms/op
                 executeQuery·p0.90:   1147.142 ms/op
                 executeQuery·p0.95:   1147.142 ms/op
                 executeQuery·p0.99:   1147.142 ms/op
                 executeQuery·p0.999:  1147.142 ms/op
                 executeQuery·p0.9999: 1147.142 ms/op
                 executeQuery·p1.00:   1147.142 ms/op

Iteration   3: 1114.287 ±(99.9%) 4.662 ms/op
                 executeQuery·p0.00:   1111.491 ms/op
                 executeQuery·p0.50:   1113.588 ms/op
                 executeQuery·p0.90:   1119.879 ms/op
                 executeQuery·p0.95:   1119.879 ms/op
                 executeQuery·p0.99:   1119.879 ms/op
                 executeQuery·p0.999:  1119.879 ms/op
                 executeQuery·p0.9999: 1119.879 ms/op
                 executeQuery·p1.00:   1119.879 ms/op

Iteration   4: 1120.666 ±(99.9%) 18.052 ms/op
                 executeQuery·p0.00:   1109.393 ms/op
                 executeQuery·p0.50:   1118.831 ms/op
                 executeQuery·p0.90:   1132.462 ms/op
                 executeQuery·p0.95:   1132.462 ms/op
                 executeQuery·p0.99:   1132.462 ms/op
                 executeQuery·p0.999:  1132.462 ms/op
                 executeQuery·p0.9999: 1132.462 ms/op
                 executeQuery·p1.00:   1132.462 ms/op

Iteration   5: 1126.957 ±(99.9%) 11.727 ms/op
                 executeQuery·p0.00:   1119.879 ms/op
                 executeQuery·p0.50:   1127.219 ms/op
                 executeQuery·p0.90:   1136.656 ms/op
                 executeQuery·p0.95:   1136.656 ms/op
                 executeQuery·p0.99:   1136.656 ms/op
                 executeQuery·p0.999:  1136.656 ms/op
                 executeQuery·p0.9999: 1136.656 ms/op
                 executeQuery·p1.00:   1136.656 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 127
  mean =   1111.383 ±(99.9%) 5.422 ms/op

  Histogram, ms/op:
    [1000.000, 1012.500) = 0 
    [1012.500, 1025.000) = 0 
    [1025.000, 1037.500) = 0 
    [1037.500, 1050.000) = 0 
    [1050.000, 1062.500) = 0 
    [1062.500, 1075.000) = 1 
    [1075.000, 1087.500) = 4 
    [1087.500, 1100.000) = 39 
    [1100.000, 1112.500) = 6 
    [1112.500, 1125.000) = 56 
    [1125.000, 1137.500) = 16 
    [1137.500, 1150.000) = 4 
    [1150.000, 1162.500) = 0 
    [1162.500, 1175.000) = 0 
    [1175.000, 1187.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1068.499 ms/op
     p(50.0000) =   1117.782 ms/op
     p(90.0000) =   1130.365 ms/op
     p(95.0000) =   1135.818 ms/op
     p(99.0000) =   1171.301 ms/op
     p(99.9000) =   1180.697 ms/op
     p(99.9900) =   1180.697 ms/op
     p(99.9990) =   1180.697 ms/op
     p(99.9999) =   1180.697 ms/op
    p(100.0000) =   1180.697 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536)

# Run progress: 73.08% complete, ETA 01:14:49
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1296.340 ±(99.9%) 147.191 ms/op
# Warmup Iteration   2: 1279.525 ±(99.9%) 26.200 ms/op
# Warmup Iteration   3: 1284.243 ±(99.9%) 23.570 ms/op
# Warmup Iteration   4: 1295.778 ±(99.9%) 50.512 ms/op
# Warmup Iteration   5: 1300.234 ±(99.9%) 63.218 ms/op
Iteration   1: 1332.890 ±(99.9%) 184.788 ms/op
                 executeQuery·p0.00:   1279.263 ms/op
                 executeQuery·p0.50:   1279.263 ms/op
                 executeQuery·p0.90:   1472.201 ms/op
                 executeQuery·p0.95:   1472.201 ms/op
                 executeQuery·p0.99:   1472.201 ms/op
                 executeQuery·p0.999:  1472.201 ms/op
                 executeQuery·p0.9999: 1472.201 ms/op
                 executeQuery·p1.00:   1472.201 ms/op

Iteration   2: 1280.311 ±(99.9%) 7.728 ms/op
                 executeQuery·p0.00:   1277.166 ms/op
                 executeQuery·p0.50:   1279.263 ms/op
                 executeQuery·p0.90:   1289.748 ms/op
                 executeQuery·p0.95:   1289.748 ms/op
                 executeQuery·p0.99:   1289.748 ms/op
                 executeQuery·p0.999:  1289.748 ms/op
                 executeQuery·p0.9999: 1289.748 ms/op
                 executeQuery·p1.00:   1289.748 ms/op

Iteration   3: 1279.787 ±(99.9%) 3.554 ms/op
                 executeQuery·p0.00:   1277.166 ms/op
                 executeQuery·p0.50:   1279.263 ms/op
                 executeQuery·p0.90:   1283.457 ms/op
                 executeQuery·p0.95:   1283.457 ms/op
                 executeQuery·p0.99:   1283.457 ms/op
                 executeQuery·p0.999:  1283.457 ms/op
                 executeQuery·p0.9999: 1283.457 ms/op
                 executeQuery·p1.00:   1283.457 ms/op

Iteration   4: 1282.933 ±(99.9%) 26.489 ms/op
                 executeQuery·p0.00:   1277.166 ms/op
                 executeQuery·p0.50:   1277.166 ms/op
                 executeQuery·p0.90:   1317.011 ms/op
                 executeQuery·p0.95:   1317.011 ms/op
                 executeQuery·p0.99:   1317.011 ms/op
                 executeQuery·p0.999:  1317.011 ms/op
                 executeQuery·p0.9999: 1317.011 ms/op
                 executeQuery·p1.00:   1317.011 ms/op

Iteration   5: 1285.554 ±(99.9%) 35.992 ms/op
                 executeQuery·p0.00:   1272.971 ms/op
                 executeQuery·p0.50:   1279.263 ms/op
                 executeQuery·p0.90:   1331.692 ms/op
                 executeQuery·p0.95:   1331.692 ms/op
                 executeQuery·p0.99:   1331.692 ms/op
                 executeQuery·p0.999:  1331.692 ms/op
                 executeQuery·p0.9999: 1331.692 ms/op
                 executeQuery·p1.00:   1331.692 ms/op


# Run progress: 73.72% complete, ETA 01:13:04
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1291.546 ±(99.9%) 101.465 ms/op
# Warmup Iteration   2: 1259.602 ±(99.9%) 25.263 ms/op
# Warmup Iteration   3: 1316.712 ±(99.9%) 189.410 ms/op
# Warmup Iteration   4: 1276.379 ±(99.9%) 51.302 ms/op
# Warmup Iteration   5: 1269.826 ±(99.9%) 56.665 ms/op
Iteration   1: 1302.331 ±(99.9%) 170.714 ms/op
                 executeQuery·p0.00:   1254.097 ms/op
                 executeQuery·p0.50:   1277.166 ms/op
                 executeQuery·p0.90:   1472.201 ms/op
                 executeQuery·p0.95:   1472.201 ms/op
                 executeQuery·p0.99:   1472.201 ms/op
                 executeQuery·p0.999:  1472.201 ms/op
                 executeQuery·p0.9999: 1472.201 ms/op
                 executeQuery·p1.00:   1472.201 ms/op

Iteration   2: 1277.166 ±(99.9%) 75.015 ms/op
                 executeQuery·p0.00:   1245.708 ms/op
                 executeQuery·p0.50:   1267.728 ms/op
                 executeQuery·p0.90:   1371.537 ms/op
                 executeQuery·p0.95:   1371.537 ms/op
                 executeQuery·p0.99:   1371.537 ms/op
                 executeQuery·p0.999:  1371.537 ms/op
                 executeQuery·p0.9999: 1371.537 ms/op
                 executeQuery·p1.00:   1371.537 ms/op

Iteration   3: 1296.040 ±(99.9%) 70.010 ms/op
                 executeQuery·p0.00:   1266.680 ms/op
                 executeQuery·p0.50:   1275.068 ms/op
                 executeQuery·p0.90:   1348.469 ms/op
                 executeQuery·p0.95:   1348.469 ms/op
                 executeQuery·p0.99:   1348.469 ms/op
                 executeQuery·p0.999:  1348.469 ms/op
                 executeQuery·p0.9999: 1348.469 ms/op
                 executeQuery·p1.00:   1348.469 ms/op

Iteration   4: 1292.108 ±(99.9%) 76.513 ms/op
                 executeQuery·p0.00:   1254.097 ms/op
                 executeQuery·p0.50:   1277.166 ms/op
                 executeQuery·p0.90:   1367.343 ms/op
                 executeQuery·p0.95:   1367.343 ms/op
                 executeQuery·p0.99:   1367.343 ms/op
                 executeQuery·p0.999:  1367.343 ms/op
                 executeQuery·p0.9999: 1367.343 ms/op
                 executeQuery·p1.00:   1367.343 ms/op

Iteration   5: 1272.709 ±(99.9%) 26.978 ms/op
                 executeQuery·p0.00:   1262.486 ms/op
                 executeQuery·p0.50:   1268.777 ms/op
                 executeQuery·p0.90:   1306.526 ms/op
                 executeQuery·p0.95:   1306.526 ms/op
                 executeQuery·p0.99:   1306.526 ms/op
                 executeQuery·p0.999:  1306.526 ms/op
                 executeQuery·p0.9999: 1306.526 ms/op
                 executeQuery·p1.00:   1306.526 ms/op


# Run progress: 74.36% complete, ETA 01:11:18
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

1374.833 ±(99.9%) 70.789 ms/op
# Warmup Iteration   2: 1345.772 ±(99.9%) 48.988 ms/op
# Warmup Iteration   3: 1362.550 ±(99.9%) 51.504 ms/op
# Warmup Iteration   4: 1358.056 ±(99.9%) 18.264 ms/op
# Warmup Iteration   5: 1352.663 ±(99.9%) 50.578 ms/op
Iteration   1: 1352.064 ±(99.9%) 41.510 ms/op
                 executeQuery·p0.00:   1340.080 ms/op
                 executeQuery·p0.50:   1348.469 ms/op
                 executeQuery·p0.90:   1392.509 ms/op
                 executeQuery·p0.95:   1392.509 ms/op
                 executeQuery·p0.99:   1392.509 ms/op
                 executeQuery·p0.999:  1392.509 ms/op
                 executeQuery·p0.9999: 1392.509 ms/op
                 executeQuery·p1.00:   1392.509 ms/op

Iteration   2: 1394.007 ±(99.9%) 166.048 ms/op
                 executeQuery·p0.00:   1329.594 ms/op
                 executeQuery·p0.50:   1361.052 ms/op
                 executeQuery·p0.90:   1505.755 ms/op
                 executeQuery·p0.95:   1505.755 ms/op
                 executeQuery·p0.99:   1505.755 ms/op
                 executeQuery·p0.999:  1505.755 ms/op
                 executeQuery·p0.9999: 1505.755 ms/op
                 executeQuery·p1.00:   1505.755 ms/op

Iteration   3: 1417.675 ±(99.9%) 196.645 ms/op
                 executeQuery·p0.00:   1337.983 ms/op
                 executeQuery·p0.50:   1373.635 ms/op
                 executeQuery·p0.90:   1516.241 ms/op
                 executeQuery·p0.95:   1516.241 ms/op
                 executeQuery·p0.99:   1516.241 ms/op
                 executeQuery·p0.999:  1516.241 ms/op
                 executeQuery·p0.9999: 1516.241 ms/op
                 executeQuery·p1.00:   1516.241 ms/op

Iteration   4: 1354.760 ±(99.9%) 83.385 ms/op
                 executeQuery·p0.00:   1333.789 ms/op
                 executeQuery·p0.50:   1337.983 ms/op
                 executeQuery·p0.90:   1434.452 ms/op
                 executeQuery·p0.95:   1434.452 ms/op
                 executeQuery·p0.99:   1434.452 ms/op
                 executeQuery·p0.999:  1434.452 ms/op
                 executeQuery·p0.9999: 1434.452 ms/op
                 executeQuery·p1.00:   1434.452 ms/op

Iteration   5: 1377.529 ±(99.9%) 146.939 ms/op
                 executeQuery·p0.00:   1335.886 ms/op
                 executeQuery·p0.50:   1342.177 ms/op
                 executeQuery·p0.90:   1509.949 ms/op
                 executeQuery·p0.95:   1509.949 ms/op
                 executeQuery·p0.99:   1509.949 ms/op
                 executeQuery·p0.999:  1509.949 ms/op
                 executeQuery·p0.9999: 1509.949 ms/op
                 executeQuery·p1.00:   1509.949 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 113
  mean =   1317.271 ±(99.9%) 20.410 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 23 
    [1275.000, 1300.000) = 41 
    [1300.000, 1325.000) = 4 
    [1325.000, 1350.000) = 23 
    [1350.000, 1375.000) = 8 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 2 
    [1425.000, 1450.000) = 2 
    [1450.000, 1475.000) = 2 
    [1475.000, 1500.000) = 2 
    [1500.000, 1525.000) = 4 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1245.708 ms/op
     p(50.0000) =   1281.360 ms/op
     p(90.0000) =   1415.578 ms/op
     p(95.0000) =   1484.784 ms/op
     p(99.0000) =   1515.947 ms/op
     p(99.9000) =   1516.241 ms/op
     p(99.9900) =   1516.241 ms/op
     p(99.9990) =   1516.241 ms/op
     p(99.9999) =   1516.241 ms/op
    p(100.0000) =   1516.241 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 75.00% complete, ETA 01:09:31
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

3044.016 ±(99.9%) 237.704 ms/op
# Warmup Iteration   2: 3024.093 ±(99.9%) 374.905 ms/op
# Warmup Iteration   3: 2976.907 ±(99.9%) 256.531 ms/op
# Warmup Iteration   4: 2991.587 ±(99.9%) 453.732 ms/op
# Warmup Iteration   5: 2993.684 ±(99.9%) 427.615 ms/op
Iteration   1: 2963.276 ±(99.9%) 224.049 ms/op
                 executeQuery·p0.00:   2936.013 ms/op
                 executeQuery·p0.50:   2952.790 ms/op
                 executeQuery·p0.90:   3011.510 ms/op
                 executeQuery·p0.95:   3011.510 ms/op
                 executeQuery·p0.99:   3011.510 ms/op
                 executeQuery·p0.999:  3011.510 ms/op
                 executeQuery·p0.9999: 3011.510 ms/op
                 executeQuery·p1.00:   3011.510 ms/op

Iteration   2: 3010.462 ±(99.9%) 702.038 ms/op
                 executeQuery·p0.00:   2936.013 ms/op
                 executeQuery·p0.50:   2967.470 ms/op
                 executeQuery·p0.90:   3170.894 ms/op
                 executeQuery·p0.95:   3170.894 ms/op
                 executeQuery·p0.99:   3170.894 ms/op
                 executeQuery·p0.999:  3170.894 ms/op
                 executeQuery·p0.9999: 3170.894 ms/op
                 executeQuery·p1.00:   3170.894 ms/op

Iteration   3: 3003.122 ±(99.9%) 673.784 ms/op
                 executeQuery·p0.00:   2940.207 ms/op
                 executeQuery·p0.50:   2956.984 ms/op
                 executeQuery·p0.90:   3158.311 ms/op
                 executeQuery·p0.95:   3158.311 ms/op
                 executeQuery·p0.99:   3158.311 ms/op
                 executeQuery·p0.999:  3158.311 ms/op
                 executeQuery·p0.9999: 3158.311 ms/op
                 executeQuery·p1.00:   3158.311 ms/op

Iteration   4: 2974.810 ±(99.9%) 472.761 ms/op
                 executeQuery·p0.00:   2923.430 ms/op
                 executeQuery·p0.50:   2948.596 ms/op
                 executeQuery·p0.90:   3078.619 ms/op
                 executeQuery·p0.95:   3078.619 ms/op
                 executeQuery·p0.99:   3078.619 ms/op
                 executeQuery·p0.999:  3078.619 ms/op
                 executeQuery·p0.9999: 3078.619 ms/op
                 executeQuery·p1.00:   3078.619 ms/op

Iteration   5: 3017.802 ±(99.9%) 347.447 ms/op
                 executeQuery·p0.00:   2965.373 ms/op
                 executeQuery·p0.50:   3017.802 ms/op
                 executeQuery·p0.90:   3070.231 ms/op
                 executeQuery·p0.95:   3070.231 ms/op
                 executeQuery·p0.99:   3070.231 ms/op
                 executeQuery·p0.999:  3070.231 ms/op
                 executeQuery·p0.9999: 3070.231 ms/op
                 executeQuery·p1.00:   3070.231 ms/op


# Run progress: 75.64% complete, ETA 01:07:50
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

2889.875 ±(99.9%) 725.579 ms/op
# Warmup Iteration   2: 2769.289 ±(99.9%) 164.679 ms/op
# Warmup Iteration   3: 2776.629 ±(99.9%) 204.028 ms/op
# Warmup Iteration   4: 2792.358 ±(99.9%) 206.859 ms/op
# Warmup Iteration   5: 2787.115 ±(99.9%) 226.224 ms/op
Iteration   1: 2854.224 ±(99.9%) 436.190 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2856.321 ms/op
                 executeQuery·p0.90:   2927.624 ms/op
                 executeQuery·p0.95:   2927.624 ms/op
                 executeQuery·p0.99:   2927.624 ms/op
                 executeQuery·p0.999:  2927.624 ms/op
                 executeQuery·p0.9999: 2927.624 ms/op
                 executeQuery·p1.00:   2927.624 ms/op

Iteration   2: 2833.252 ±(99.9%) 373.269 ms/op
                 executeQuery·p0.00:   2785.018 ms/op
                 executeQuery·p0.50:   2820.669 ms/op
                 executeQuery·p0.90:   2906.653 ms/op
                 executeQuery·p0.95:   2906.653 ms/op
                 executeQuery·p0.99:   2906.653 ms/op
                 executeQuery·p0.999:  2906.653 ms/op
                 executeQuery·p0.9999: 2906.653 ms/op
                 executeQuery·p1.00:   2906.653 ms/op

Iteration   3: 2799.698 ±(99.9%) 68.209 ms/op
                 executeQuery·p0.00:   2789.212 ms/op
                 executeQuery·p0.50:   2797.601 ms/op
                 executeQuery·p0.90:   2814.378 ms/op
                 executeQuery·p0.95:   2814.378 ms/op
                 executeQuery·p0.99:   2814.378 ms/op
                 executeQuery·p0.999:  2814.378 ms/op
                 executeQuery·p0.9999: 2814.378 ms/op
                 executeQuery·p1.00:   2814.378 ms/op

Iteration   4: 2786.066 ±(99.9%) 137.090 ms/op
                 executeQuery·p0.00:   2759.852 ms/op
                 executeQuery·p0.50:   2787.115 ms/op
                 executeQuery·p0.90:   2810.184 ms/op
                 executeQuery·p0.95:   2810.184 ms/op
                 executeQuery·p0.99:   2810.184 ms/op
                 executeQuery·p0.999:  2810.184 ms/op
                 executeQuery·p0.9999: 2810.184 ms/op
                 executeQuery·p1.00:   2810.184 ms/op

Iteration   5: 2820.669 ±(99.9%) 198.554 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2810.184 ms/op
                 executeQuery·p0.90:   2864.710 ms/op
                 executeQuery·p0.95:   2864.710 ms/op
                 executeQuery·p0.99:   2864.710 ms/op
                 executeQuery·p0.999:  2864.710 ms/op
                 executeQuery·p0.9999: 2864.710 ms/op
                 executeQuery·p1.00:   2864.710 ms/op


# Run progress: 76.28% complete, ETA 01:06:07
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
org.openjdk.jmh.infra.Blackhole blackhole = new org.openjdk.jmh.infra.Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.");
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map agg_0_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_1_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
Simple_Int_Long_Map agg_2_sum_map = cCtx.getAllocationManager().getSimpleIntLongMap();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2);
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = (org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3);
    VectorisedAggregationOperators.constructPreHashKeyVectorSIMD(groupKeyPreHashVector, aggregation_query_table_vc_0);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_1, agg_0_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_2, agg_1_sum_map);
    VectorisedAggregationOperators.maintainSum(aggregation_query_table_vc_0, groupKeyPreHashVector, aggregation_query_table_vc_3, agg_2_sum_map);
}
int aggregationResultVectorLength;
int[] groupKeyVector = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
Simple_Int_Long_Map_Iterator groupKeyIterator = agg_0_sum_map.getIterator();
while (groupKeyIterator.hasNext()) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructKeyVector(groupKeyVector, groupKeyIterator);
    VectorisedAggregationOperators.constructPreHashKeyVector(groupKeyPreHashVector, groupKeyVector, aggregationResultVectorLength);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_0_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_0_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_1_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_1_sum_map);
    VectorisedAggregationOperators.constructValueVector(agg_G_SUM_2_vector, groupKeyVector, groupKeyPreHashVector, aggregationResultVectorLength, agg_2_sum_map);
    blackhole.consume(groupKeyVector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_0_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_1_vector);
    blackhole.consume(aggregationResultVectorLength);
    blackhole.consume(agg_G_SUM_2_vector);
    blackhole.consume(aggregationResultVectorLength);
}
cCtx.getAllocationManager().release(groupKeyVector);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getAllocationManager().release(agg_0_sum_map);
cCtx.getAllocationManager().release(agg_1_sum_map);
cCtx.getAllocationManager().release(agg_2_sum_map);

3040.870 ±(99.9%) 297.728 ms/op
# Warmup Iteration   2: 3021.996 ±(99.9%) 161.867 ms/op
# Warmup Iteration   3: 3014.656 ±(99.9%) 320.980 ms/op
# Warmup Iteration   4: 2987.393 ±(99.9%) 305.341 ms/op
# Warmup Iteration   5: 3008.365 ±(99.9%) 155.501 ms/op
Iteration   1: 3029.336 ±(99.9%) 607.013 ms/op
                 executeQuery·p0.00:   2961.179 ms/op
                 executeQuery·p0.50:   2996.830 ms/op
                 executeQuery·p0.90:   3162.505 ms/op
                 executeQuery·p0.95:   3162.505 ms/op
                 executeQuery·p0.99:   3162.505 ms/op
                 executeQuery·p0.999:  3162.505 ms/op
                 executeQuery·p0.9999: 3162.505 ms/op
                 executeQuery·p1.00:   3162.505 ms/op

Iteration   2: 3184.525 ±(99.9%) 382.903 ms/op
                 executeQuery·p0.00:   3128.951 ms/op
                 executeQuery·p0.50:   3175.088 ms/op
                 executeQuery·p0.90:   3258.974 ms/op
                 executeQuery·p0.95:   3258.974 ms/op
                 executeQuery·p0.99:   3258.974 ms/op
                 executeQuery·p0.999:  3258.974 ms/op
                 executeQuery·p0.9999: 3258.974 ms/op
                 executeQuery·p1.00:   3258.974 ms/op

Iteration   3: 3182.428 ±(99.9%) 355.029 ms/op
                 executeQuery·p0.00:   3120.562 ms/op
                 executeQuery·p0.50:   3179.282 ms/op
                 executeQuery·p0.90:   3250.586 ms/op
                 executeQuery·p0.95:   3250.586 ms/op
                 executeQuery·p0.99:   3250.586 ms/op
                 executeQuery·p0.999:  3250.586 ms/op
                 executeQuery·p0.9999: 3250.586 ms/op
                 executeQuery·p1.00:   3250.586 ms/op

Iteration   4: 3146.777 ±(99.9%) 278.499 ms/op
                 executeQuery·p0.00:   3107.979 ms/op
                 executeQuery·p0.50:   3137.339 ms/op
                 executeQuery·p0.90:   3204.448 ms/op
                 executeQuery·p0.95:   3204.448 ms/op
                 executeQuery·p0.99:   3204.448 ms/op
                 executeQuery·p0.999:  3204.448 ms/op
                 executeQuery·p0.9999: 3204.448 ms/op
                 executeQuery·p1.00:   3204.448 ms/op

Iteration   5: 3154.117 ±(99.9%) 551.476 ms/op
                 executeQuery·p0.00:   3095.396 ms/op
                 executeQuery·p0.50:   3120.562 ms/op
                 executeQuery·p0.90:   3279.946 ms/op
                 executeQuery·p0.95:   3279.946 ms/op
                 executeQuery·p0.99:   3279.946 ms/op
                 executeQuery·p0.999:  3279.946 ms/op
                 executeQuery·p0.9999: 3279.946 ms/op
                 executeQuery·p1.00:   3279.946 ms/op



Result "benchmarks.aggregation_query.VectorisedSimd_No_Verification.executeQuery":
  N = 60
  mean =   2984.038 ±(99.9%) 66.743 ms/op

  Histogram, ms/op:
    [2700.000, 2750.000) = 0 
    [2750.000, 2800.000) = 10 
    [2800.000, 2850.000) = 5 
    [2850.000, 2900.000) = 3 
    [2900.000, 2950.000) = 9 
    [2950.000, 3000.000) = 9 
    [3000.000, 3050.000) = 2 
    [3050.000, 3100.000) = 4 
    [3100.000, 3150.000) = 7 
    [3150.000, 3200.000) = 6 
    [3200.000, 3250.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   2759.852 ms/op
     p(50.0000) =   2965.373 ms/op
     p(90.0000) =   3193.543 ms/op
     p(95.0000) =   3248.279 ms/op
     p(99.0000) =   3279.946 ms/op
     p(99.9000) =   3279.946 ms/op
     p(99.9900) =   3279.946 ms/op
     p(99.9990) =   3279.946 ms/op
     p(99.9999) =   3279.946 ms/op
    p(100.0000) =   3279.946 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 76.92% complete, ETA 01:04:27
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.008 ±(99.9%) 2.554 ms/op
# Warmup Iteration   2: 43.254 ±(99.9%) 0.356 ms/op
# Warmup Iteration   3: 43.018 ±(99.9%) 0.134 ms/op
# Warmup Iteration   4: 43.307 ±(99.9%) 0.101 ms/op
# Warmup Iteration   5: 43.478 ±(99.9%) 0.257 ms/op
Iteration   1: 43.975 ±(99.9%) 0.425 ms/op
                 executeFilterQuery·p0.00:   43.123 ms/op
                 executeFilterQuery·p0.50:   43.319 ms/op
                 executeFilterQuery·p0.90:   45.751 ms/op
                 executeFilterQuery·p0.95:   45.810 ms/op
                 executeFilterQuery·p0.99:   45.875 ms/op
                 executeFilterQuery·p0.999:  45.875 ms/op
                 executeFilterQuery·p0.9999: 45.875 ms/op
                 executeFilterQuery·p1.00:   45.875 ms/op

Iteration   2: 43.377 ±(99.9%) 0.391 ms/op
                 executeFilterQuery·p0.00:   42.533 ms/op
                 executeFilterQuery·p0.50:   42.729 ms/op
                 executeFilterQuery·p0.90:   45.023 ms/op
                 executeFilterQuery·p0.95:   45.089 ms/op
                 executeFilterQuery·p0.99:   45.416 ms/op
                 executeFilterQuery·p0.999:  45.416 ms/op
                 executeFilterQuery·p0.9999: 45.416 ms/op
                 executeFilterQuery·p1.00:   45.416 ms/op

Iteration   3: 43.499 ±(99.9%) 0.382 ms/op
                 executeFilterQuery·p0.00:   42.467 ms/op
                 executeFilterQuery·p0.50:   43.188 ms/op
                 executeFilterQuery·p0.90:   45.089 ms/op
                 executeFilterQuery·p0.95:   45.616 ms/op
                 executeFilterQuery·p0.99:   45.744 ms/op
                 executeFilterQuery·p0.999:  45.744 ms/op
                 executeFilterQuery·p0.9999: 45.744 ms/op
                 executeFilterQuery·p1.00:   45.744 ms/op

Iteration   4: 43.305 ±(99.9%) 0.241 ms/op
                 executeFilterQuery·p0.00:   42.598 ms/op
                 executeFilterQuery·p0.50:   43.254 ms/op
                 executeFilterQuery·p0.90:   43.332 ms/op
                 executeFilterQuery·p0.95:   45.099 ms/op
                 executeFilterQuery·p0.99:   45.679 ms/op
                 executeFilterQuery·p0.999:  45.679 ms/op
                 executeFilterQuery·p0.9999: 45.679 ms/op
                 executeFilterQuery·p1.00:   45.679 ms/op

Iteration   5: 43.514 ±(99.9%) 0.430 ms/op
                 executeFilterQuery·p0.00:   42.598 ms/op
                 executeFilterQuery·p0.50:   42.729 ms/op
                 executeFilterQuery·p0.90:   45.089 ms/op
                 executeFilterQuery·p0.95:   45.154 ms/op
                 executeFilterQuery·p0.99:   45.285 ms/op
                 executeFilterQuery·p0.999:  45.285 ms/op
                 executeFilterQuery·p0.9999: 45.285 ms/op
                 executeFilterQuery·p1.00:   45.285 ms/op


# Run progress: 77.56% complete, ETA 01:02:38
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

43.506 ±(99.9%) 2.712 ms/op
# Warmup Iteration   2: 42.441 ±(99.9%) 0.033 ms/op
# Warmup Iteration   3: 42.393 ±(99.9%) 0.027 ms/op
# Warmup Iteration   4: 42.367 ±(99.9%) 0.025 ms/op
# Warmup Iteration   5: 42.455 ±(99.9%) 0.167 ms/op
Iteration   1: 42.617 ±(99.9%) 0.285 ms/op
                 executeFilterQuery·p0.00:   42.205 ms/op
                 executeFilterQuery·p0.50:   42.336 ms/op
                 executeFilterQuery·p0.90:   44.696 ms/op
                 executeFilterQuery·p0.95:   44.761 ms/op
                 executeFilterQuery·p0.99:   44.958 ms/op
                 executeFilterQuery·p0.999:  44.958 ms/op
                 executeFilterQuery·p0.9999: 44.958 ms/op
                 executeFilterQuery·p1.00:   44.958 ms/op

Iteration   2: 42.477 ±(99.9%) 0.208 ms/op
                 executeFilterQuery·p0.00:   42.271 ms/op
                 executeFilterQuery·p0.50:   42.336 ms/op
                 executeFilterQuery·p0.90:   42.467 ms/op
                 executeFilterQuery·p0.95:   44.761 ms/op
                 executeFilterQuery·p0.99:   44.761 ms/op
                 executeFilterQuery·p0.999:  44.761 ms/op
                 executeFilterQuery·p0.9999: 44.761 ms/op
                 executeFilterQuery·p1.00:   44.761 ms/op

Iteration   3: 42.521 ±(99.9%) 0.213 ms/op
                 executeFilterQuery·p0.00:   42.205 ms/op
                 executeFilterQuery·p0.50:   42.336 ms/op
                 executeFilterQuery·p0.90:   42.533 ms/op
                 executeFilterQuery·p0.95:   44.696 ms/op
                 executeFilterQuery·p0.99:   44.958 ms/op
                 executeFilterQuery·p0.999:  44.958 ms/op
                 executeFilterQuery·p0.9999: 44.958 ms/op
                 executeFilterQuery·p1.00:   44.958 ms/op

Iteration   4: 42.676 ±(99.9%) 0.226 ms/op
                 executeFilterQuery·p0.00:   42.402 ms/op
                 executeFilterQuery·p0.50:   42.533 ms/op
                 executeFilterQuery·p0.90:   42.729 ms/op
                 executeFilterQuery·p0.95:   44.827 ms/op
                 executeFilterQuery·p0.99:   44.958 ms/op
                 executeFilterQuery·p0.999:  44.958 ms/op
                 executeFilterQuery·p0.9999: 44.958 ms/op
                 executeFilterQuery·p1.00:   44.958 ms/op

Iteration   5: 42.517 ±(99.9%) 0.020 ms/op
                 executeFilterQuery·p0.00:   42.402 ms/op
                 executeFilterQuery·p0.50:   42.533 ms/op
                 executeFilterQuery·p0.90:   42.598 ms/op
                 executeFilterQuery·p0.95:   42.598 ms/op
                 executeFilterQuery·p0.99:   42.664 ms/op
                 executeFilterQuery·p0.999:  42.664 ms/op
                 executeFilterQuery·p0.9999: 42.664 ms/op
                 executeFilterQuery·p1.00:   42.664 ms/op


# Run progress: 78.21% complete, ETA 01:00:49
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

44.222 ±(99.9%) 4.039 ms/op
# Warmup Iteration   2: 42.479 ±(99.9%) 0.358 ms/op
# Warmup Iteration   3: 43.156 ±(99.9%) 0.485 ms/op
# Warmup Iteration   4: 43.467 ±(99.9%) 0.515 ms/op
# Warmup Iteration   5: 42.798 ±(99.9%) 0.425 ms/op
Iteration   1: 42.379 ±(99.9%) 0.255 ms/op
                 executeFilterQuery·p0.00:   42.074 ms/op
                 executeFilterQuery·p0.50:   42.205 ms/op
                 executeFilterQuery·p0.90:   42.664 ms/op
                 executeFilterQuery·p0.95:   44.696 ms/op
                 executeFilterQuery·p0.99:   44.761 ms/op
                 executeFilterQuery·p0.999:  44.761 ms/op
                 executeFilterQuery·p0.9999: 44.761 ms/op
                 executeFilterQuery·p1.00:   44.761 ms/op

Iteration   2: 43.311 ±(99.9%) 0.477 ms/op
                 executeFilterQuery·p0.00:   42.009 ms/op
                 executeFilterQuery·p0.50:   42.303 ms/op
                 executeFilterQuery·p0.90:   44.702 ms/op
                 executeFilterQuery·p0.95:   44.764 ms/op
                 executeFilterQuery·p0.99:   44.827 ms/op
                 executeFilterQuery·p0.999:  44.827 ms/op
                 executeFilterQuery·p0.9999: 44.827 ms/op
                 executeFilterQuery·p1.00:   44.827 ms/op

Iteration   3: 43.664 ±(99.9%) 0.483 ms/op
                 executeFilterQuery·p0.00:   41.943 ms/op
                 executeFilterQuery·p0.50:   44.630 ms/op
                 executeFilterQuery·p0.90:   44.761 ms/op
                 executeFilterQuery·p0.95:   44.761 ms/op
                 executeFilterQuery·p0.99:   44.827 ms/op
                 executeFilterQuery·p0.999:  44.827 ms/op
                 executeFilterQuery·p0.9999: 44.827 ms/op
                 executeFilterQuery·p1.00:   44.827 ms/op

Iteration   4: 41.916 ±(99.9%) 0.020 ms/op
                 executeFilterQuery·p0.00:   41.812 ms/op
                 executeFilterQuery·p0.50:   41.943 ms/op
                 executeFilterQuery·p0.90:   41.943 ms/op
                 executeFilterQuery·p0.95:   42.009 ms/op
                 executeFilterQuery·p0.99:   42.074 ms/op
                 executeFilterQuery·p0.999:  42.074 ms/op
                 executeFilterQuery·p0.9999: 42.074 ms/op
                 executeFilterQuery·p1.00:   42.074 ms/op

Iteration   5: 42.091 ±(99.9%) 0.043 ms/op
                 executeFilterQuery·p0.00:   41.878 ms/op
                 executeFilterQuery·p0.50:   42.140 ms/op
                 executeFilterQuery·p0.90:   42.205 ms/op
                 executeFilterQuery·p0.95:   42.271 ms/op
                 executeFilterQuery·p0.99:   42.271 ms/op
                 executeFilterQuery·p0.999:  42.271 ms/op
                 executeFilterQuery·p0.9999: 42.271 ms/op
                 executeFilterQuery·p1.00:   42.271 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1179
  mean =     42.920 ±(99.9%) 0.097 ms/op

  Histogram, ms/op:
    [41.000, 41.500) = 0 
    [41.500, 42.000) = 90 
    [42.000, 42.500) = 474 
    [42.500, 43.000) = 253 
    [43.000, 43.500) = 155 
    [43.500, 44.000) = 6 
    [44.000, 44.500) = 5 
    [44.500, 45.000) = 114 
    [45.000, 45.500) = 54 

  Percentiles, ms/op:
      p(0.0000) =     41.812 ms/op
     p(50.0000) =     42.533 ms/op
     p(90.0000) =     44.761 ms/op
     p(95.0000) =     45.023 ms/op
     p(99.0000) =     45.744 ms/op
     p(99.9000) =     45.863 ms/op
     p(99.9900) =     45.875 ms/op
     p(99.9990) =     45.875 ms/op
     p(99.9999) =     45.875 ms/op
    p(100.0000) =     45.875 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 78.85% complete, ETA 00:59:00
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

50.921 ±(99.9%) 3.325 ms/op
# Warmup Iteration   2: 50.068 ±(99.9%) 0.238 ms/op
# Warmup Iteration   3: 50.324 ±(99.9%) 0.382 ms/op
# Warmup Iteration   4: 50.473 ±(99.9%) 0.445 ms/op
# Warmup Iteration   5: 49.101 ±(99.9%) 0.570 ms/op
Iteration   1: 50.440 ±(99.9%) 0.272 ms/op
                 executeFilterQuery·p0.00:   50.070 ms/op
                 executeFilterQuery·p0.50:   50.266 ms/op
                 executeFilterQuery·p0.90:   50.659 ms/op
                 executeFilterQuery·p0.95:   53.035 ms/op
                 executeFilterQuery·p0.99:   53.084 ms/op
                 executeFilterQuery·p0.999:  53.084 ms/op
                 executeFilterQuery·p0.9999: 53.084 ms/op
                 executeFilterQuery·p1.00:   53.084 ms/op

Iteration   2: 50.606 ±(99.9%) 0.393 ms/op
                 executeFilterQuery·p0.00:   50.070 ms/op
                 executeFilterQuery·p0.50:   50.201 ms/op
                 executeFilterQuery·p0.90:   53.019 ms/op
                 executeFilterQuery·p0.95:   53.101 ms/op
                 executeFilterQuery·p0.99:   53.150 ms/op
                 executeFilterQuery·p0.999:  53.150 ms/op
                 executeFilterQuery·p0.9999: 53.150 ms/op
                 executeFilterQuery·p1.00:   53.150 ms/op

Iteration   3: 50.654 ±(99.9%) 0.409 ms/op
                 executeFilterQuery·p0.00:   50.135 ms/op
                 executeFilterQuery·p0.50:   50.201 ms/op
                 executeFilterQuery·p0.90:   53.019 ms/op
                 executeFilterQuery·p0.95:   53.084 ms/op
                 executeFilterQuery·p0.99:   53.215 ms/op
                 executeFilterQuery·p0.999:  53.215 ms/op
                 executeFilterQuery·p0.9999: 53.215 ms/op
                 executeFilterQuery·p1.00:   53.215 ms/op

Iteration   4: 50.502 ±(99.9%) 0.319 ms/op
                 executeFilterQuery·p0.00:   50.135 ms/op
                 executeFilterQuery·p0.50:   50.201 ms/op
                 executeFilterQuery·p0.90:   51.511 ms/op
                 executeFilterQuery·p0.95:   53.035 ms/op
                 executeFilterQuery·p0.99:   53.150 ms/op
                 executeFilterQuery·p0.999:  53.150 ms/op
                 executeFilterQuery·p0.9999: 53.150 ms/op
                 executeFilterQuery·p1.00:   53.150 ms/op

Iteration   5: 50.588 ±(99.9%) 0.391 ms/op
                 executeFilterQuery·p0.00:   49.676 ms/op
                 executeFilterQuery·p0.50:   50.201 ms/op
                 executeFilterQuery·p0.90:   53.019 ms/op
                 executeFilterQuery·p0.95:   53.035 ms/op
                 executeFilterQuery·p0.99:   53.084 ms/op
                 executeFilterQuery·p0.999:  53.084 ms/op
                 executeFilterQuery·p0.9999: 53.084 ms/op
                 executeFilterQuery·p1.00:   53.084 ms/op


# Run progress: 79.49% complete, ETA 00:57:12
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

50.828 ±(99.9%) 3.703 ms/op
# Warmup Iteration   2: 50.186 ±(99.9%) 0.302 ms/op
# Warmup Iteration   3: 50.030 ±(99.9%) 0.184 ms/op
# Warmup Iteration   4: 50.097 ±(99.9%) 0.283 ms/op
# Warmup Iteration   5: 50.012 ±(99.9%) 0.249 ms/op
Iteration   1: 50.471 ±(99.9%) 0.444 ms/op
                 executeFilterQuery·p0.00:   49.218 ms/op
                 executeFilterQuery·p0.50:   49.938 ms/op
                 executeFilterQuery·p0.90:   52.193 ms/op
                 executeFilterQuery·p0.95:   52.232 ms/op
                 executeFilterQuery·p0.99:   52.560 ms/op
                 executeFilterQuery·p0.999:  52.560 ms/op
                 executeFilterQuery·p0.9999: 52.560 ms/op
                 executeFilterQuery·p1.00:   52.560 ms/op

Iteration   2: 50.990 ±(99.9%) 0.521 ms/op
                 executeFilterQuery·p0.00:   49.349 ms/op
                 executeFilterQuery·p0.50:   51.839 ms/op
                 executeFilterQuery·p0.90:   52.298 ms/op
                 executeFilterQuery·p0.95:   52.363 ms/op
                 executeFilterQuery·p0.99:   52.363 ms/op
                 executeFilterQuery·p0.999:  52.363 ms/op
                 executeFilterQuery·p0.9999: 52.363 ms/op
                 executeFilterQuery·p1.00:   52.363 ms/op

Iteration   3: 50.924 ±(99.9%) 0.544 ms/op
                 executeFilterQuery·p0.00:   49.283 ms/op
                 executeFilterQuery·p0.50:   52.101 ms/op
                 executeFilterQuery·p0.90:   52.232 ms/op
                 executeFilterQuery·p0.95:   52.298 ms/op
                 executeFilterQuery·p0.99:   52.363 ms/op
                 executeFilterQuery·p0.999:  52.363 ms/op
                 executeFilterQuery·p0.9999: 52.363 ms/op
                 executeFilterQuery·p1.00:   52.363 ms/op

Iteration   4: 50.535 ±(99.9%) 0.543 ms/op
                 executeFilterQuery·p0.00:   49.283 ms/op
                 executeFilterQuery·p0.50:   49.480 ms/op
                 executeFilterQuery·p0.90:   52.298 ms/op
                 executeFilterQuery·p0.95:   52.298 ms/op
                 executeFilterQuery·p0.99:   52.363 ms/op
                 executeFilterQuery·p0.999:  52.363 ms/op
                 executeFilterQuery·p0.9999: 52.363 ms/op
                 executeFilterQuery·p1.00:   52.363 ms/op

Iteration   5: 50.468 ±(99.9%) 0.523 ms/op
                 executeFilterQuery·p0.00:   49.283 ms/op
                 executeFilterQuery·p0.50:   49.545 ms/op
                 executeFilterQuery·p0.90:   52.232 ms/op
                 executeFilterQuery·p0.95:   52.232 ms/op
                 executeFilterQuery·p0.99:   52.363 ms/op
                 executeFilterQuery·p0.999:  52.363 ms/op
                 executeFilterQuery·p0.9999: 52.363 ms/op
                 executeFilterQuery·p1.00:   52.363 ms/op


# Run progress: 80.13% complete, ETA 00:55:23
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

51.487 ±(99.9%) 3.517 ms/op
# Warmup Iteration   2: 50.210 ±(99.9%) 0.280 ms/op
# Warmup Iteration   3: 49.782 ±(99.9%) 0.411 ms/op
# Warmup Iteration   4: 51.093 ±(99.9%) 0.390 ms/op
# Warmup Iteration   5: 50.588 ±(99.9%) 0.056 ms/op
Iteration   1: 51.070 ±(99.9%) 0.446 ms/op
                 executeFilterQuery·p0.00:   50.397 ms/op
                 executeFilterQuery·p0.50:   50.528 ms/op
                 executeFilterQuery·p0.90:   53.346 ms/op
                 executeFilterQuery·p0.95:   53.428 ms/op
                 executeFilterQuery·p0.99:   53.477 ms/op
                 executeFilterQuery·p0.999:  53.477 ms/op
                 executeFilterQuery·p0.9999: 53.477 ms/op
                 executeFilterQuery·p1.00:   53.477 ms/op

Iteration   2: 52.098 ±(99.9%) 0.561 ms/op
                 executeFilterQuery·p0.00:   50.463 ms/op
                 executeFilterQuery·p0.50:   53.281 ms/op
                 executeFilterQuery·p0.90:   53.412 ms/op
                 executeFilterQuery·p0.95:   53.497 ms/op
                 executeFilterQuery·p0.99:   54.133 ms/op
                 executeFilterQuery·p0.999:  54.133 ms/op
                 executeFilterQuery·p0.9999: 54.133 ms/op
                 executeFilterQuery·p1.00:   54.133 ms/op

Iteration   3: 52.642 ±(99.9%) 0.489 ms/op
                 executeFilterQuery·p0.00:   50.463 ms/op
                 executeFilterQuery·p0.50:   53.346 ms/op
                 executeFilterQuery·p0.90:   53.412 ms/op
                 executeFilterQuery·p0.95:   53.432 ms/op
                 executeFilterQuery·p0.99:   53.608 ms/op
                 executeFilterQuery·p0.999:  53.608 ms/op
                 executeFilterQuery·p0.9999: 53.608 ms/op
                 executeFilterQuery·p1.00:   53.608 ms/op

Iteration   4: 50.839 ±(99.9%) 0.342 ms/op
                 executeFilterQuery·p0.00:   50.397 ms/op
                 executeFilterQuery·p0.50:   50.528 ms/op
                 executeFilterQuery·p0.90:   52.953 ms/op
                 executeFilterQuery·p0.95:   53.346 ms/op
                 executeFilterQuery·p0.99:   53.412 ms/op
                 executeFilterQuery·p0.999:  53.412 ms/op
                 executeFilterQuery·p0.9999: 53.412 ms/op
                 executeFilterQuery·p1.00:   53.412 ms/op

Iteration   5: 51.717 ±(99.9%) 0.557 ms/op
                 executeFilterQuery·p0.00:   50.397 ms/op
                 executeFilterQuery·p0.50:   50.594 ms/op
                 executeFilterQuery·p0.90:   53.346 ms/op
                 executeFilterQuery·p0.95:   53.428 ms/op
                 executeFilterQuery·p0.99:   54.067 ms/op
                 executeFilterQuery·p0.999:  54.067 ms/op
                 executeFilterQuery·p0.9999: 54.067 ms/op
                 executeFilterQuery·p1.00:   54.067 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1113
  mean =     50.966 ±(99.9%) 0.130 ms/op

  Histogram, ms/op:
    [49.000, 49.500) = 129 
    [49.500, 50.000) = 71 
    [50.000, 50.500) = 385 
    [50.500, 51.000) = 171 
    [51.000, 51.500) = 7 
    [51.500, 52.000) = 6 
    [52.000, 52.500) = 156 
    [52.500, 53.000) = 9 
    [53.000, 53.500) = 172 
    [53.500, 54.000) = 5 
    [54.000, 54.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =     49.218 ms/op
     p(50.0000) =     50.463 ms/op
     p(90.0000) =     53.281 ms/op
     p(95.0000) =     53.346 ms/op
     p(99.0000) =     53.477 ms/op
     p(99.9000) =     54.125 ms/op
     p(99.9900) =     54.133 ms/op
     p(99.9990) =     54.133 ms/op
     p(99.9999) =     54.133 ms/op
    p(100.0000) =     54.133 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 80.77% complete, ETA 00:53:34
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.536 ±(99.9%) 4.958 ms/op
# Warmup Iteration   2: 46.674 ±(99.9%) 0.347 ms/op
# Warmup Iteration   3: 46.801 ±(99.9%) 0.389 ms/op
# Warmup Iteration   4: 46.857 ±(99.9%) 0.409 ms/op
# Warmup Iteration   5: 46.445 ±(99.9%) 0.268 ms/op
Iteration   1: 46.450 ±(99.9%) 0.235 ms/op
                 executeFilterQuery·p0.00:   46.072 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.478 ms/op
                 executeFilterQuery·p0.95:   48.634 ms/op
                 executeFilterQuery·p0.99:   48.824 ms/op
                 executeFilterQuery·p0.999:  48.824 ms/op
                 executeFilterQuery·p0.9999: 48.824 ms/op
                 executeFilterQuery·p1.00:   48.824 ms/op

Iteration   2: 46.440 ±(99.9%) 0.252 ms/op
                 executeFilterQuery·p0.00:   46.006 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.491 ms/op
                 executeFilterQuery·p0.95:   48.628 ms/op
                 executeFilterQuery·p0.99:   48.693 ms/op
                 executeFilterQuery·p0.999:  48.693 ms/op
                 executeFilterQuery·p0.9999: 48.693 ms/op
                 executeFilterQuery·p1.00:   48.693 ms/op

Iteration   3: 46.273 ±(99.9%) 0.022 ms/op
                 executeFilterQuery·p0.00:   46.137 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.334 ms/op
                 executeFilterQuery·p0.95:   46.334 ms/op
                 executeFilterQuery·p0.99:   46.465 ms/op
                 executeFilterQuery·p0.999:  46.465 ms/op
                 executeFilterQuery·p0.9999: 46.465 ms/op
                 executeFilterQuery·p1.00:   46.465 ms/op

Iteration   4: 46.259 ±(99.9%) 0.021 ms/op
                 executeFilterQuery·p0.00:   46.137 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.334 ms/op
                 executeFilterQuery·p0.95:   46.341 ms/op
                 executeFilterQuery·p0.99:   46.465 ms/op
                 executeFilterQuery·p0.999:  46.465 ms/op
                 executeFilterQuery·p0.9999: 46.465 ms/op
                 executeFilterQuery·p1.00:   46.465 ms/op

Iteration   5: 46.256 ±(99.9%) 0.023 ms/op
                 executeFilterQuery·p0.00:   46.137 ms/op
                 executeFilterQuery·p0.50:   46.268 ms/op
                 executeFilterQuery·p0.90:   46.334 ms/op
                 executeFilterQuery·p0.95:   46.334 ms/op
                 executeFilterQuery·p0.99:   46.531 ms/op
                 executeFilterQuery·p0.999:  46.531 ms/op
                 executeFilterQuery·p0.9999: 46.531 ms/op
                 executeFilterQuery·p1.00:   46.531 ms/op


# Run progress: 81.41% complete, ETA 00:51:46
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.847 ±(99.9%) 4.174 ms/op
# Warmup Iteration   2: 47.078 ±(99.9%) 0.052 ms/op
# Warmup Iteration   3: 47.054 ±(99.9%) 0.031 ms/op
# Warmup Iteration   4: 47.050 ±(99.9%) 0.032 ms/op
# Warmup Iteration   5: 47.036 ±(99.9%) 0.064 ms/op
Iteration   1: 47.611 ±(99.9%) 0.383 ms/op
                 executeFilterQuery·p0.00:   46.858 ms/op
                 executeFilterQuery·p0.50:   46.989 ms/op
                 executeFilterQuery·p0.90:   49.152 ms/op
                 executeFilterQuery·p0.95:   49.152 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op

Iteration   2: 47.485 ±(99.9%) 0.340 ms/op
                 executeFilterQuery·p0.00:   46.924 ms/op
                 executeFilterQuery·p0.50:   47.055 ms/op
                 executeFilterQuery·p0.90:   49.152 ms/op
                 executeFilterQuery·p0.95:   49.152 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op

Iteration   3: 47.289 ±(99.9%) 0.027 ms/op
                 executeFilterQuery·p0.00:   47.186 ms/op
                 executeFilterQuery·p0.50:   47.317 ms/op
                 executeFilterQuery·p0.90:   47.383 ms/op
                 executeFilterQuery·p0.95:   47.383 ms/op
                 executeFilterQuery·p0.99:   47.579 ms/op
                 executeFilterQuery·p0.999:  47.579 ms/op
                 executeFilterQuery·p0.9999: 47.579 ms/op
                 executeFilterQuery·p1.00:   47.579 ms/op

Iteration   4: 47.290 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   47.120 ms/op
                 executeFilterQuery·p0.50:   47.251 ms/op
                 executeFilterQuery·p0.90:   47.317 ms/op
                 executeFilterQuery·p0.95:   47.396 ms/op
                 executeFilterQuery·p0.99:   48.300 ms/op
                 executeFilterQuery·p0.999:  48.300 ms/op
                 executeFilterQuery·p0.9999: 48.300 ms/op
                 executeFilterQuery·p1.00:   48.300 ms/op

Iteration   5: 47.261 ±(99.9%) 0.026 ms/op
                 executeFilterQuery·p0.00:   47.120 ms/op
                 executeFilterQuery·p0.50:   47.251 ms/op
                 executeFilterQuery·p0.90:   47.317 ms/op
                 executeFilterQuery·p0.95:   47.383 ms/op
                 executeFilterQuery·p0.99:   47.383 ms/op
                 executeFilterQuery·p0.999:  47.383 ms/op
                 executeFilterQuery·p0.9999: 47.383 ms/op
                 executeFilterQuery·p1.00:   47.383 ms/op


# Run progress: 82.05% complete, ETA 00:49:58
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    for (int aviv = 0; aviv < filter_query_table_vc_0.getValueCount(); aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!ordinal_value < 3000) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!ordinal_value_0 < 3000) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!ordinal_value_1 < 3000) {
            continue;
        }
        agg_0_count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

48.779 ±(99.9%) 4.028 ms/op
# Warmup Iteration   2: 46.881 ±(99.9%) 0.286 ms/op
# Warmup Iteration   3: 47.023 ±(99.9%) 0.350 ms/op
# Warmup Iteration   4: 47.657 ±(99.9%) 0.449 ms/op
# Warmup Iteration   5: 46.998 ±(99.9%) 0.347 ms/op
Iteration   1: 47.038 ±(99.9%) 0.355 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   48.890 ms/op
                 executeFilterQuery·p0.95:   48.890 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   2: 46.849 ±(99.9%) 0.286 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   48.824 ms/op
                 executeFilterQuery·p0.95:   48.890 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   3: 46.969 ±(99.9%) 0.329 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.596 ms/op
                 executeFilterQuery·p0.90:   48.824 ms/op
                 executeFilterQuery·p0.95:   48.890 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   4: 46.730 ±(99.9%) 0.158 ms/op
                 executeFilterQuery·p0.00:   46.465 ms/op
                 executeFilterQuery·p0.50:   46.662 ms/op
                 executeFilterQuery·p0.90:   46.727 ms/op
                 executeFilterQuery·p0.95:   47.114 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op

Iteration   5: 46.982 ±(99.9%) 0.294 ms/op
                 executeFilterQuery·p0.00:   46.531 ms/op
                 executeFilterQuery·p0.50:   46.662 ms/op
                 executeFilterQuery·p0.90:   48.837 ms/op
                 executeFilterQuery·p0.95:   48.890 ms/op
                 executeFilterQuery·p0.99:   48.890 ms/op
                 executeFilterQuery·p0.999:  48.890 ms/op
                 executeFilterQuery·p0.9999: 48.890 ms/op
                 executeFilterQuery·p1.00:   48.890 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1146
  mean =     46.875 ±(99.9%) 0.072 ms/op

  Histogram, ms/op:
    [46.000, 46.250) = 118 
    [46.250, 46.500) = 258 
    [46.500, 46.750) = 316 
    [46.750, 47.000) = 88 
    [47.000, 47.250) = 79 
    [47.250, 47.500) = 182 
    [47.500, 47.750) = 2 
    [47.750, 48.000) = 1 
    [48.000, 48.250) = 4 
    [48.250, 48.500) = 3 
    [48.500, 48.750) = 11 
    [48.750, 49.000) = 46 
    [49.000, 49.250) = 38 
    [49.250, 49.500) = 0 
    [49.500, 49.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     46.006 ms/op
     p(50.0000) =     46.596 ms/op
     p(90.0000) =     47.383 ms/op
     p(95.0000) =     48.890 ms/op
     p(99.0000) =     49.152 ms/op
     p(99.9000) =     49.218 ms/op
     p(99.9900) =     49.218 ms/op
     p(99.9990) =     49.218 ms/op
     p(99.9999) =     49.218 ms/op
    p(100.0000) =     49.218 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 82.69% complete, ETA 00:48:10
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.498 ±(99.9%) 8.532 ms/op
# Warmup Iteration   2: 72.546 ±(99.9%) 0.038 ms/op
# Warmup Iteration   3: 72.572 ±(99.9%) 0.081 ms/op
# Warmup Iteration   4: 72.590 ±(99.9%) 0.055 ms/op
# Warmup Iteration   5: 72.530 ±(99.9%) 0.054 ms/op
Iteration   1: 72.636 ±(99.9%) 0.101 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   73.046 ms/op
                 executeFilterQuery·p0.95:   73.269 ms/op
                 executeFilterQuery·p0.99:   73.531 ms/op
                 executeFilterQuery·p0.999:  73.531 ms/op
                 executeFilterQuery·p0.9999: 73.531 ms/op
                 executeFilterQuery·p1.00:   73.531 ms/op

Iteration   2: 72.519 ±(99.9%) 0.032 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   72.483 ms/op
                 executeFilterQuery·p0.90:   72.614 ms/op
                 executeFilterQuery·p0.95:   72.614 ms/op
                 executeFilterQuery·p0.99:   72.745 ms/op
                 executeFilterQuery·p0.999:  72.745 ms/op
                 executeFilterQuery·p0.9999: 72.745 ms/op
                 executeFilterQuery·p1.00:   72.745 ms/op

Iteration   3: 72.511 ±(99.9%) 0.053 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   72.483 ms/op
                 executeFilterQuery·p0.90:   72.614 ms/op
                 executeFilterQuery·p0.95:   72.699 ms/op
                 executeFilterQuery·p0.99:   73.269 ms/op
                 executeFilterQuery·p0.999:  73.269 ms/op
                 executeFilterQuery·p0.9999: 73.269 ms/op
                 executeFilterQuery·p1.00:   73.269 ms/op

Iteration   4: 72.515 ±(99.9%) 0.066 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   72.483 ms/op
                 executeFilterQuery·p0.90:   72.614 ms/op
                 executeFilterQuery·p0.95:   72.614 ms/op
                 executeFilterQuery·p0.99:   73.400 ms/op
                 executeFilterQuery·p0.999:  73.400 ms/op
                 executeFilterQuery·p0.9999: 73.400 ms/op
                 executeFilterQuery·p1.00:   73.400 ms/op

Iteration   5: 72.542 ±(99.9%) 0.069 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.483 ms/op
                 executeFilterQuery·p0.90:   72.614 ms/op
                 executeFilterQuery·p0.95:   72.614 ms/op
                 executeFilterQuery·p0.99:   73.400 ms/op
                 executeFilterQuery·p0.999:  73.400 ms/op
                 executeFilterQuery·p0.9999: 73.400 ms/op
                 executeFilterQuery·p1.00:   73.400 ms/op


# Run progress: 83.33% complete, ETA 00:46:22
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.173 ±(99.9%) 7.808 ms/op
# Warmup Iteration   2: 72.580 ±(99.9%) 0.061 ms/op
# Warmup Iteration   3: 72.814 ±(99.9%) 0.081 ms/op
# Warmup Iteration   4: 72.876 ±(99.9%) 0.039 ms/op
# Warmup Iteration   5: 72.876 ±(99.9%) 0.020 ms/op
Iteration   1: 72.979 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.794 ms/op
                 executeFilterQuery·p0.999:  73.794 ms/op
                 executeFilterQuery·p0.9999: 73.794 ms/op
                 executeFilterQuery·p1.00:   73.794 ms/op

Iteration   2: 72.701 ±(99.9%) 0.073 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.915 ms/op
                 executeFilterQuery·p0.95:   73.007 ms/op
                 executeFilterQuery·p0.99:   73.400 ms/op
                 executeFilterQuery·p0.999:  73.400 ms/op
                 executeFilterQuery·p0.9999: 73.400 ms/op
                 executeFilterQuery·p1.00:   73.400 ms/op

Iteration   3: 72.759 ±(99.9%) 0.284 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.876 ms/op
                 executeFilterQuery·p0.95:   73.440 ms/op
                 executeFilterQuery·p0.99:   77.857 ms/op
                 executeFilterQuery·p0.999:  77.857 ms/op
                 executeFilterQuery·p0.9999: 77.857 ms/op
                 executeFilterQuery·p1.00:   77.857 ms/op

Iteration   4: 72.648 ±(99.9%) 0.071 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.745 ms/op
                 executeFilterQuery·p0.99:   73.794 ms/op
                 executeFilterQuery·p0.999:  73.794 ms/op
                 executeFilterQuery·p0.9999: 73.794 ms/op
                 executeFilterQuery·p1.00:   73.794 ms/op

Iteration   5: 72.767 ±(99.9%) 0.131 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   73.531 ms/op
                 executeFilterQuery·p0.95:   73.531 ms/op
                 executeFilterQuery·p0.99:   73.662 ms/op
                 executeFilterQuery·p0.999:  73.662 ms/op
                 executeFilterQuery·p0.9999: 73.662 ms/op
                 executeFilterQuery·p1.00:   73.662 ms/op


# Run progress: 83.97% complete, ETA 00:44:34
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.038 ±(99.9%) 8.140 ms/op
# Warmup Iteration   2: 72.467 ±(99.9%) 0.056 ms/op
# Warmup Iteration   3: 72.545 ±(99.9%) 0.067 ms/op
# Warmup Iteration   4: 72.426 ±(99.9%) 0.030 ms/op
# Warmup Iteration   5: 72.457 ±(99.9%) 0.034 ms/op
Iteration   1: 72.350 ±(99.9%) 0.039 ms/op
                 executeFilterQuery·p0.00:   72.221 ms/op
                 executeFilterQuery·p0.50:   72.352 ms/op
                 executeFilterQuery·p0.90:   72.483 ms/op
                 executeFilterQuery·p0.95:   72.483 ms/op
                 executeFilterQuery·p0.99:   72.483 ms/op
                 executeFilterQuery·p0.999:  72.483 ms/op
                 executeFilterQuery·p0.9999: 72.483 ms/op
                 executeFilterQuery·p1.00:   72.483 ms/op

Iteration   2: 72.491 ±(99.9%) 0.034 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   72.483 ms/op
                 executeFilterQuery·p0.90:   72.614 ms/op
                 executeFilterQuery·p0.95:   72.614 ms/op
                 executeFilterQuery·p0.99:   72.876 ms/op
                 executeFilterQuery·p0.999:  72.876 ms/op
                 executeFilterQuery·p0.9999: 72.876 ms/op
                 executeFilterQuery·p1.00:   72.876 ms/op

Iteration   3: 72.521 ±(99.9%) 0.026 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.483 ms/op
                 executeFilterQuery·p0.90:   72.614 ms/op
                 executeFilterQuery·p0.95:   72.614 ms/op
                 executeFilterQuery·p0.99:   72.614 ms/op
                 executeFilterQuery·p0.999:  72.614 ms/op
                 executeFilterQuery·p0.9999: 72.614 ms/op
                 executeFilterQuery·p1.00:   72.614 ms/op

Iteration   4: 72.503 ±(99.9%) 0.039 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   72.483 ms/op
                 executeFilterQuery·p0.90:   72.614 ms/op
                 executeFilterQuery·p0.95:   72.614 ms/op
                 executeFilterQuery·p0.99:   72.876 ms/op
                 executeFilterQuery·p0.999:  72.876 ms/op
                 executeFilterQuery·p0.9999: 72.876 ms/op
                 executeFilterQuery·p1.00:   72.876 ms/op

Iteration   5: 72.445 ±(99.9%) 0.033 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   72.483 ms/op
                 executeFilterQuery·p0.90:   72.483 ms/op
                 executeFilterQuery·p0.95:   72.568 ms/op
                 executeFilterQuery·p0.99:   72.745 ms/op
                 executeFilterQuery·p0.999:  72.745 ms/op
                 executeFilterQuery·p0.9999: 72.745 ms/op
                 executeFilterQuery·p1.00:   72.745 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 986
  mean =     72.593 ±(99.9%) 0.029 ms/op

  Histogram, ms/op:
    [72.000, 72.500) = 544 
    [72.500, 73.000) = 371 
    [73.000, 73.500) = 57 
    [73.500, 74.000) = 13 
    [74.000, 74.500) = 0 
    [74.500, 75.000) = 0 
    [75.000, 75.500) = 0 
    [75.500, 76.000) = 0 
    [76.000, 76.500) = 0 
    [76.500, 77.000) = 0 
    [77.000, 77.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.221 ms/op
     p(50.0000) =     72.483 ms/op
     p(90.0000) =     72.876 ms/op
     p(95.0000) =     73.007 ms/op
     p(99.0000) =     73.531 ms/op
     p(99.9000) =     77.857 ms/op
     p(99.9900) =     77.857 ms/op
     p(99.9990) =     77.857 ms/op
     p(99.9999) =     77.857 ms/op
    p(100.0000) =     77.857 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 84.62% complete, ETA 00:42:46
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.639 ±(99.9%) 7.864 ms/op
# Warmup Iteration   2: 72.981 ±(99.9%) 0.032 ms/op
# Warmup Iteration   3: 73.027 ±(99.9%) 0.113 ms/op
# Warmup Iteration   4: 73.116 ±(99.9%) 0.122 ms/op
# Warmup Iteration   5: 72.930 ±(99.9%) 0.041 ms/op
Iteration   1: 73.090 ±(99.9%) 0.027 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.138 ms/op
                 executeFilterQuery·p0.999:  73.138 ms/op
                 executeFilterQuery·p0.9999: 73.138 ms/op
                 executeFilterQuery·p1.00:   73.138 ms/op

Iteration   2: 73.058 ±(99.9%) 0.034 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.138 ms/op
                 executeFilterQuery·p0.999:  73.138 ms/op
                 executeFilterQuery·p0.9999: 73.138 ms/op
                 executeFilterQuery·p1.00:   73.138 ms/op

Iteration   3: 73.098 ±(99.9%) 0.026 ms/op
                 executeFilterQuery·p0.00:   73.007 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.138 ms/op
                 executeFilterQuery·p0.999:  73.138 ms/op
                 executeFilterQuery·p0.9999: 73.138 ms/op
                 executeFilterQuery·p1.00:   73.138 ms/op

Iteration   4: 73.072 ±(99.9%) 0.041 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   73.138 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.269 ms/op
                 executeFilterQuery·p0.999:  73.269 ms/op
                 executeFilterQuery·p0.9999: 73.269 ms/op
                 executeFilterQuery·p1.00:   73.269 ms/op

Iteration   5: 72.924 ±(99.9%) 0.084 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.525 ms/op
                 executeFilterQuery·p0.99:   73.925 ms/op
                 executeFilterQuery·p0.999:  73.925 ms/op
                 executeFilterQuery·p0.9999: 73.925 ms/op
                 executeFilterQuery·p1.00:   73.925 ms/op


# Run progress: 85.26% complete, ETA 00:40:58
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.569 ±(99.9%) 7.950 ms/op
# Warmup Iteration   2: 72.989 ±(99.9%) 0.045 ms/op
# Warmup Iteration   3: 72.725 ±(99.9%) 0.047 ms/op
# Warmup Iteration   4: 72.789 ±(99.9%) 0.119 ms/op
# Warmup Iteration   5: 72.672 ±(99.9%) 0.038 ms/op
Iteration   1: 72.660 ±(99.9%) 0.029 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.745 ms/op
                 executeFilterQuery·p0.99:   72.745 ms/op
                 executeFilterQuery·p0.999:  72.745 ms/op
                 executeFilterQuery·p0.9999: 72.745 ms/op
                 executeFilterQuery·p1.00:   72.745 ms/op

Iteration   2: 72.688 ±(99.9%) 0.082 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.837 ms/op
                 executeFilterQuery·p0.99:   73.662 ms/op
                 executeFilterQuery·p0.999:  73.662 ms/op
                 executeFilterQuery·p0.9999: 73.662 ms/op
                 executeFilterQuery·p1.00:   73.662 ms/op

Iteration   3: 72.680 ±(99.9%) 0.030 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.745 ms/op
                 executeFilterQuery·p0.99:   72.745 ms/op
                 executeFilterQuery·p0.999:  72.745 ms/op
                 executeFilterQuery·p0.9999: 72.745 ms/op
                 executeFilterQuery·p1.00:   72.745 ms/op

Iteration   4: 72.834 ±(99.9%) 0.130 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   73.584 ms/op
                 executeFilterQuery·p0.95:   73.662 ms/op
                 executeFilterQuery·p0.99:   73.662 ms/op
                 executeFilterQuery·p0.999:  73.662 ms/op
                 executeFilterQuery·p0.9999: 73.662 ms/op
                 executeFilterQuery·p1.00:   73.662 ms/op

Iteration   5: 72.723 ±(99.9%) 0.021 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.745 ms/op
                 executeFilterQuery·p0.99:   72.745 ms/op
                 executeFilterQuery·p0.999:  72.745 ms/op
                 executeFilterQuery·p0.9999: 72.745 ms/op
                 executeFilterQuery·p1.00:   72.745 ms/op


# Run progress: 85.90% complete, ETA 00:39:10
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.704 ±(99.9%) 8.307 ms/op
# Warmup Iteration   2: 72.685 ±(99.9%) 0.058 ms/op
# Warmup Iteration   3: 72.640 ±(99.9%) 0.056 ms/op
# Warmup Iteration   4: 72.610 ±(99.9%) 0.019 ms/op
# Warmup Iteration   5: 72.658 ±(99.9%) 0.094 ms/op
Iteration   1: 72.640 ±(99.9%) 0.062 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.745 ms/op
                 executeFilterQuery·p0.99:   73.662 ms/op
                 executeFilterQuery·p0.999:  73.662 ms/op
                 executeFilterQuery·p0.9999: 73.662 ms/op
                 executeFilterQuery·p1.00:   73.662 ms/op

Iteration   2: 72.924 ±(99.9%) 0.082 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   73.007 ms/op
                 executeFilterQuery·p0.90:   73.046 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.531 ms/op
                 executeFilterQuery·p0.999:  73.531 ms/op
                 executeFilterQuery·p0.9999: 73.531 ms/op
                 executeFilterQuery·p1.00:   73.531 ms/op

Iteration   3: 72.769 ±(99.9%) 0.105 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.354 ms/op
                 executeFilterQuery·p0.99:   73.662 ms/op
                 executeFilterQuery·p0.999:  73.662 ms/op
                 executeFilterQuery·p0.9999: 73.662 ms/op
                 executeFilterQuery·p1.00:   73.662 ms/op

Iteration   4: 72.723 ±(99.9%) 0.126 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   73.440 ms/op
                 executeFilterQuery·p0.95:   73.531 ms/op
                 executeFilterQuery·p0.99:   73.531 ms/op
                 executeFilterQuery·p0.999:  73.531 ms/op
                 executeFilterQuery·p0.9999: 73.531 ms/op
                 executeFilterQuery·p1.00:   73.531 ms/op

Iteration   5: 72.644 ±(99.9%) 0.074 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.745 ms/op
                 executeFilterQuery·p0.99:   73.925 ms/op
                 executeFilterQuery·p0.999:  73.925 ms/op
                 executeFilterQuery·p0.9999: 73.925 ms/op
                 executeFilterQuery·p1.00:   73.925 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 981
  mean =     72.835 ±(99.9%) 0.025 ms/op

  Histogram, ms/op:
    [72.000, 72.125) = 0 
    [72.125, 72.250) = 0 
    [72.250, 72.375) = 0 
    [72.375, 72.500) = 25 
    [72.500, 72.625) = 324 
    [72.625, 72.750) = 216 
    [72.750, 72.875) = 0 
    [72.875, 73.000) = 75 
    [73.000, 73.125) = 152 
    [73.125, 73.250) = 159 
    [73.250, 73.375) = 3 
    [73.375, 73.500) = 3 
    [73.500, 73.625) = 10 
    [73.625, 73.750) = 12 
    [73.750, 73.875) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.483 ms/op
     p(50.0000) =     72.745 ms/op
     p(90.0000) =     73.138 ms/op
     p(95.0000) =     73.138 ms/op
     p(99.0000) =     73.662 ms/op
     p(99.9000) =     73.925 ms/op
     p(99.9900) =     73.925 ms/op
     p(99.9990) =     73.925 ms/op
     p(99.9999) =     73.925 ms/op
    p(100.0000) =     73.925 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 86.54% complete, ETA 00:37:23
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.185 ±(99.9%) 7.821 ms/op
# Warmup Iteration   2: 72.741 ±(99.9%) 0.205 ms/op
# Warmup Iteration   3: 72.641 ±(99.9%) 0.031 ms/op
# Warmup Iteration   4: 72.647 ±(99.9%) 0.025 ms/op
# Warmup Iteration   5: 72.712 ±(99.9%) 0.091 ms/op
Iteration   1: 72.839 ±(99.9%) 0.053 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.138 ms/op
                 executeFilterQuery·p0.999:  73.138 ms/op
                 executeFilterQuery·p0.9999: 73.138 ms/op
                 executeFilterQuery·p1.00:   73.138 ms/op

Iteration   2: 72.943 ±(99.9%) 0.040 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.138 ms/op
                 executeFilterQuery·p0.99:   73.269 ms/op
                 executeFilterQuery·p0.999:  73.269 ms/op
                 executeFilterQuery·p0.9999: 73.269 ms/op
                 executeFilterQuery·p1.00:   73.269 ms/op

Iteration   3: 72.922 ±(99.9%) 0.027 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.007 ms/op
                 executeFilterQuery·p0.99:   73.007 ms/op
                 executeFilterQuery·p0.999:  73.007 ms/op
                 executeFilterQuery·p0.9999: 73.007 ms/op
                 executeFilterQuery·p1.00:   73.007 ms/op

Iteration   4: 72.880 ±(99.9%) 0.123 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.925 ms/op
                 executeFilterQuery·p0.99:   73.925 ms/op
                 executeFilterQuery·p0.999:  73.925 ms/op
                 executeFilterQuery·p0.9999: 73.925 ms/op
                 executeFilterQuery·p1.00:   73.925 ms/op

Iteration   5: 72.835 ±(99.9%) 0.043 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.007 ms/op
                 executeFilterQuery·p0.99:   73.138 ms/op
                 executeFilterQuery·p0.999:  73.138 ms/op
                 executeFilterQuery·p0.9999: 73.138 ms/op
                 executeFilterQuery·p1.00:   73.138 ms/op


# Run progress: 87.18% complete, ETA 00:35:35
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

75.905 ±(99.9%) 7.362 ms/op
# Warmup Iteration   2: 72.698 ±(99.9%) 0.080 ms/op
# Warmup Iteration   3: 72.600 ±(99.9%) 0.105 ms/op
# Warmup Iteration   4: 72.576 ±(99.9%) 0.031 ms/op
# Warmup Iteration   5: 72.590 ±(99.9%) 0.043 ms/op
Iteration   1: 72.660 ±(99.9%) 0.043 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.797 ms/op
                 executeFilterQuery·p0.95:   72.876 ms/op
                 executeFilterQuery·p0.99:   73.007 ms/op
                 executeFilterQuery·p0.999:  73.007 ms/op
                 executeFilterQuery·p0.9999: 73.007 ms/op
                 executeFilterQuery·p1.00:   73.007 ms/op

Iteration   2: 72.804 ±(99.9%) 0.061 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   72.942 ms/op
                 executeFilterQuery·p0.95:   73.105 ms/op
                 executeFilterQuery·p0.99:   73.400 ms/op
                 executeFilterQuery·p0.999:  73.400 ms/op
                 executeFilterQuery·p0.9999: 73.400 ms/op
                 executeFilterQuery·p1.00:   73.400 ms/op

Iteration   3: 72.921 ±(99.9%) 0.051 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   72.876 ms/op
                 executeFilterQuery·p0.90:   73.007 ms/op
                 executeFilterQuery·p0.95:   73.236 ms/op
                 executeFilterQuery·p0.99:   73.400 ms/op
                 executeFilterQuery·p0.999:  73.400 ms/op
                 executeFilterQuery·p0.9999: 73.400 ms/op
                 executeFilterQuery·p1.00:   73.400 ms/op

Iteration   4: 72.771 ±(99.9%) 0.041 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   72.876 ms/op
                 executeFilterQuery·p0.95:   72.968 ms/op
                 executeFilterQuery·p0.99:   73.007 ms/op
                 executeFilterQuery·p0.999:  73.007 ms/op
                 executeFilterQuery·p0.9999: 73.007 ms/op
                 executeFilterQuery·p1.00:   73.007 ms/op

Iteration   5: 72.771 ±(99.9%) 0.074 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.745 ms/op
                 executeFilterQuery·p0.90:   72.876 ms/op
                 executeFilterQuery·p0.95:   73.007 ms/op
                 executeFilterQuery·p0.99:   73.925 ms/op
                 executeFilterQuery·p0.999:  73.925 ms/op
                 executeFilterQuery·p0.9999: 73.925 ms/op
                 executeFilterQuery·p1.00:   73.925 ms/op


# Run progress: 87.82% complete, ETA 00:33:48
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int commonSIMDVectorLength = 4;
jdk.incubator.vector.VectorSpecies<Integer> IntVectorSpecies = oCtx.getVectorSpeciesInt();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int arrowVectorLength = filter_query_table_vc_0.getValueCount();
    MemorySegment col_0_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_0.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_0.TYPE_WIDTH);
    MemorySegment col_1_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_1.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_1.TYPE_WIDTH);
    MemorySegment col_2_ms = oCtx.createMemorySegmentForAddress(filter_query_table_vc_2.getDataBufferAddress(), arrowVectorLength * filter_query_table_vc_2.TYPE_WIDTH);
    for (int currentVectorOffset = 0; currentVectorOffset < arrowVectorLength; currentVectorOffset += commonSIMDVectorLength) {
        jdk.incubator.vector.VectorMask<Integer> inRangeSIMDMask = IntVectorSpecies.indexInRange(currentVectorOffset, arrowVectorLength);
        jdk.incubator.vector.IntVector SIMDVector = oCtx.createIntVector(IntVectorSpecies, col_0_ms, currentVectorOffset * filter_query_table_vc_0.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, inRangeSIMDMask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_sel_mask = SIMDVector.compare(jdk.incubator.vector.VectorOperators.LT, 3000, inRangeSIMDMask);
        jdk.incubator.vector.IntVector SIMDVector_0 = oCtx.createIntVector(IntVectorSpecies, col_1_ms, currentVectorOffset * filter_query_table_vc_1.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_0_sel_mask = SIMDVector_0.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_sel_mask);
        jdk.incubator.vector.IntVector SIMDVector_1 = oCtx.createIntVector(IntVectorSpecies, col_2_ms, currentVectorOffset * filter_query_table_vc_2.TYPE_WIDTH, java.nio.ByteOrder.LITTLE_ENDIAN, SIMDVector_0_sel_mask);
        jdk.incubator.vector.VectorMask<Integer> SIMDVector_1_sel_mask = SIMDVector_1.compare(jdk.incubator.vector.VectorOperators.LT, 3000, SIMDVector_0_sel_mask);
        agg_0_count += SIMDVector_1_sel_mask.trueCount();
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

76.182 ±(99.9%) 7.710 ms/op
# Warmup Iteration   2: 72.837 ±(99.9%) 0.048 ms/op
# Warmup Iteration   3: 72.698 ±(99.9%) 0.045 ms/op
# Warmup Iteration   4: 72.630 ±(99.9%) 0.032 ms/op
# Warmup Iteration   5: 72.634 ±(99.9%) 0.033 ms/op
Iteration   1: 72.644 ±(99.9%) 0.054 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.745 ms/op
                 executeFilterQuery·p0.99:   73.531 ms/op
                 executeFilterQuery·p0.999:  73.531 ms/op
                 executeFilterQuery·p0.9999: 73.531 ms/op
                 executeFilterQuery·p1.00:   73.531 ms/op

Iteration   2: 72.703 ±(99.9%) 0.129 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   73.400 ms/op
                 executeFilterQuery·p0.95:   73.531 ms/op
                 executeFilterQuery·p0.99:   73.662 ms/op
                 executeFilterQuery·p0.999:  73.662 ms/op
                 executeFilterQuery·p0.9999: 73.662 ms/op
                 executeFilterQuery·p1.00:   73.662 ms/op

Iteration   3: 72.646 ±(99.9%) 0.076 ms/op
                 executeFilterQuery·p0.00:   72.483 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.614 ms/op
                 executeFilterQuery·p0.95:   72.837 ms/op
                 executeFilterQuery·p0.99:   73.662 ms/op
                 executeFilterQuery·p0.999:  73.662 ms/op
                 executeFilterQuery·p0.9999: 73.662 ms/op
                 executeFilterQuery·p1.00:   73.662 ms/op

Iteration   4: 72.642 ±(99.9%) 0.023 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.745 ms/op
                 executeFilterQuery·p0.99:   72.745 ms/op
                 executeFilterQuery·p0.999:  72.745 ms/op
                 executeFilterQuery·p0.9999: 72.745 ms/op
                 executeFilterQuery·p1.00:   72.745 ms/op

Iteration   5: 72.678 ±(99.9%) 0.114 ms/op
                 executeFilterQuery·p0.00:   72.614 ms/op
                 executeFilterQuery·p0.50:   72.614 ms/op
                 executeFilterQuery·p0.90:   72.745 ms/op
                 executeFilterQuery·p0.95:   72.837 ms/op
                 executeFilterQuery·p0.99:   74.318 ms/op
                 executeFilterQuery·p0.999:  74.318 ms/op
                 executeFilterQuery·p0.9999: 74.318 ms/op
                 executeFilterQuery·p1.00:   74.318 ms/op



Result "benchmarks.filter_query.NonVectorisedSimd.executeFilterQuery":
  N = 966
  mean =     72.776 ±(99.9%) 0.021 ms/op

  Histogram, ms/op:
    [72.000, 72.250) = 0 
    [72.250, 72.500) = 20 
    [72.500, 72.750) = 587 
    [72.750, 73.000) = 242 
    [73.000, 73.250) = 94 
    [73.250, 73.500) = 8 
    [73.500, 73.750) = 8 
    [73.750, 74.000) = 6 
    [74.000, 74.250) = 0 
    [74.250, 74.500) = 1 
    [74.500, 74.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.483 ms/op
     p(50.0000) =     72.745 ms/op
     p(90.0000) =     73.007 ms/op
     p(95.0000) =     73.007 ms/op
     p(99.0000) =     73.662 ms/op
     p(99.9000) =     74.318 ms/op
     p(99.9900) =     74.318 ms/op
     p(99.9990) =     74.318 ms/op
     p(99.9999) =     74.318 ms/op
    p(100.0000) =     74.318 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 88.46% complete, ETA 00:32:01
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

24.842 ±(99.9%) 0.708 ms/op
# Warmup Iteration   2: 25.344 ±(99.9%) 0.248 ms/op
# Warmup Iteration   3: 25.084 ±(99.9%) 0.238 ms/op
# Warmup Iteration   4: 25.326 ±(99.9%) 0.242 ms/op
# Warmup Iteration   5: 25.031 ±(99.9%) 0.220 ms/op
Iteration   1: 25.095 ±(99.9%) 0.236 ms/op
                 executeFilterQuery·p0.00:   24.445 ms/op
                 executeFilterQuery·p0.50:   24.674 ms/op
                 executeFilterQuery·p0.90:   26.096 ms/op
                 executeFilterQuery·p0.95:   26.195 ms/op
                 executeFilterQuery·p0.99:   26.378 ms/op
                 executeFilterQuery·p0.999:  26.378 ms/op
                 executeFilterQuery·p0.9999: 26.378 ms/op
                 executeFilterQuery·p1.00:   26.378 ms/op

Iteration   2: 25.193 ±(99.9%) 0.244 ms/op
                 executeFilterQuery·p0.00:   24.281 ms/op
                 executeFilterQuery·p0.50:   24.707 ms/op
                 executeFilterQuery·p0.90:   26.149 ms/op
                 executeFilterQuery·p0.95:   26.214 ms/op
                 executeFilterQuery·p0.99:   26.280 ms/op
                 executeFilterQuery·p0.999:  26.280 ms/op
                 executeFilterQuery·p0.9999: 26.280 ms/op
                 executeFilterQuery·p1.00:   26.280 ms/op

Iteration   3: 25.164 ±(99.9%) 0.231 ms/op
                 executeFilterQuery·p0.00:   24.445 ms/op
                 executeFilterQuery·p0.50:   24.707 ms/op
                 executeFilterQuery·p0.90:   26.116 ms/op
                 executeFilterQuery·p0.95:   26.149 ms/op
                 executeFilterQuery·p0.99:   26.214 ms/op
                 executeFilterQuery·p0.999:  26.214 ms/op
                 executeFilterQuery·p0.9999: 26.214 ms/op
                 executeFilterQuery·p1.00:   26.214 ms/op

Iteration   4: 25.213 ±(99.9%) 0.241 ms/op
                 executeFilterQuery·p0.00:   24.347 ms/op
                 executeFilterQuery·p0.50:   24.740 ms/op
                 executeFilterQuery·p0.90:   26.083 ms/op
                 executeFilterQuery·p0.95:   26.214 ms/op
                 executeFilterQuery·p0.99:   26.509 ms/op
                 executeFilterQuery·p0.999:  26.509 ms/op
                 executeFilterQuery·p0.9999: 26.509 ms/op
                 executeFilterQuery·p1.00:   26.509 ms/op

Iteration   5: 24.638 ±(99.9%) 0.037 ms/op
                 executeFilterQuery·p0.00:   24.412 ms/op
                 executeFilterQuery·p0.50:   24.609 ms/op
                 executeFilterQuery·p0.90:   24.805 ms/op
                 executeFilterQuery·p0.95:   24.818 ms/op
                 executeFilterQuery·p0.99:   24.871 ms/op
                 executeFilterQuery·p0.999:  24.871 ms/op
                 executeFilterQuery·p0.9999: 24.871 ms/op
                 executeFilterQuery·p1.00:   24.871 ms/op


# Run progress: 89.10% complete, ETA 00:30:13
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

25.039 ±(99.9%) 0.719 ms/op
# Warmup Iteration   2: 24.961 ±(99.9%) 0.171 ms/op
# Warmup Iteration   3: 24.763 ±(99.9%) 0.131 ms/op
# Warmup Iteration   4: 25.022 ±(99.9%) 0.221 ms/op
# Warmup Iteration   5: 25.680 ±(99.9%) 0.210 ms/op
Iteration   1: 25.945 ±(99.9%) 0.122 ms/op
                 executeFilterQuery·p0.00:   24.543 ms/op
                 executeFilterQuery·p0.50:   25.985 ms/op
                 executeFilterQuery·p0.90:   26.198 ms/op
                 executeFilterQuery·p0.95:   26.296 ms/op
                 executeFilterQuery·p0.99:   26.477 ms/op
                 executeFilterQuery·p0.999:  26.477 ms/op
                 executeFilterQuery·p0.9999: 26.477 ms/op
                 executeFilterQuery·p1.00:   26.477 ms/op

Iteration   2: 25.822 ±(99.9%) 0.177 ms/op
                 executeFilterQuery·p0.00:   24.510 ms/op
                 executeFilterQuery·p0.50:   26.018 ms/op
                 executeFilterQuery·p0.90:   26.132 ms/op
                 executeFilterQuery·p0.95:   26.190 ms/op
                 executeFilterQuery·p0.99:   26.280 ms/op
                 executeFilterQuery·p0.999:  26.280 ms/op
                 executeFilterQuery·p0.9999: 26.280 ms/op
                 executeFilterQuery·p1.00:   26.280 ms/op

Iteration   3: 25.891 ±(99.9%) 0.148 ms/op
                 executeFilterQuery·p0.00:   24.543 ms/op
                 executeFilterQuery·p0.50:   26.018 ms/op
                 executeFilterQuery·p0.90:   26.165 ms/op
                 executeFilterQuery·p0.95:   26.190 ms/op
                 executeFilterQuery·p0.99:   26.247 ms/op
                 executeFilterQuery·p0.999:  26.247 ms/op
                 executeFilterQuery·p0.9999: 26.247 ms/op
                 executeFilterQuery·p1.00:   26.247 ms/op

Iteration   4: 25.704 ±(99.9%) 0.209 ms/op
                 executeFilterQuery·p0.00:   24.183 ms/op
                 executeFilterQuery·p0.50:   25.969 ms/op
                 executeFilterQuery·p0.90:   26.116 ms/op
                 executeFilterQuery·p0.95:   26.157 ms/op
                 executeFilterQuery·p0.99:   26.411 ms/op
                 executeFilterQuery·p0.999:  26.411 ms/op
                 executeFilterQuery·p0.9999: 26.411 ms/op
                 executeFilterQuery·p1.00:   26.411 ms/op

Iteration   5: 25.674 ±(99.9%) 0.213 ms/op
                 executeFilterQuery·p0.00:   24.576 ms/op
                 executeFilterQuery·p0.50:   25.985 ms/op
                 executeFilterQuery·p0.90:   26.116 ms/op
                 executeFilterQuery·p0.95:   26.190 ms/op
                 executeFilterQuery·p0.99:   26.771 ms/op
                 executeFilterQuery·p0.999:  26.771 ms/op
                 executeFilterQuery·p0.9999: 26.771 ms/op
                 executeFilterQuery·p1.00:   26.771 ms/op


# Run progress: 89.74% complete, ETA 00:28:26
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

24.861 ±(99.9%) 0.699 ms/op
# Warmup Iteration   2: 24.714 ±(99.9%) 0.126 ms/op
# Warmup Iteration   3: 24.647 ±(99.9%) 0.122 ms/op
# Warmup Iteration   4: 24.585 ±(99.9%) 0.112 ms/op
# Warmup Iteration   5: 24.566 ±(99.9%) 0.112 ms/op
Iteration   1: 24.718 ±(99.9%) 0.153 ms/op
                 executeFilterQuery·p0.00:   24.347 ms/op
                 executeFilterQuery·p0.50:   24.609 ms/op
                 executeFilterQuery·p0.90:   25.041 ms/op
                 executeFilterQuery·p0.95:   26.024 ms/op
                 executeFilterQuery·p0.99:   26.477 ms/op
                 executeFilterQuery·p0.999:  26.477 ms/op
                 executeFilterQuery·p0.9999: 26.477 ms/op
                 executeFilterQuery·p1.00:   26.477 ms/op

Iteration   2: 25.041 ±(99.9%) 0.212 ms/op
                 executeFilterQuery·p0.00:   24.445 ms/op
                 executeFilterQuery·p0.50:   24.707 ms/op
                 executeFilterQuery·p0.90:   26.051 ms/op
                 executeFilterQuery·p0.95:   26.116 ms/op
                 executeFilterQuery·p0.99:   26.542 ms/op
                 executeFilterQuery·p0.999:  26.542 ms/op
                 executeFilterQuery·p0.9999: 26.542 ms/op
                 executeFilterQuery·p1.00:   26.542 ms/op

Iteration   3: 24.655 ±(99.9%) 0.030 ms/op
                 executeFilterQuery·p0.00:   24.347 ms/op
                 executeFilterQuery·p0.50:   24.674 ms/op
                 executeFilterQuery·p0.90:   24.740 ms/op
                 executeFilterQuery·p0.95:   24.805 ms/op
                 executeFilterQuery·p0.99:   24.904 ms/op
                 executeFilterQuery·p0.999:  24.904 ms/op
                 executeFilterQuery·p0.9999: 24.904 ms/op
                 executeFilterQuery·p1.00:   24.904 ms/op

Iteration   4: 24.833 ±(99.9%) 0.161 ms/op
                 executeFilterQuery·p0.00:   24.510 ms/op
                 executeFilterQuery·p0.50:   24.642 ms/op
                 executeFilterQuery·p0.90:   25.919 ms/op
                 executeFilterQuery·p0.95:   25.985 ms/op
                 executeFilterQuery·p0.99:   26.149 ms/op
                 executeFilterQuery·p0.999:  26.149 ms/op
                 executeFilterQuery·p0.9999: 26.149 ms/op
                 executeFilterQuery·p1.00:   26.149 ms/op

Iteration   5: 24.666 ±(99.9%) 0.039 ms/op
                 executeFilterQuery·p0.00:   24.510 ms/op
                 executeFilterQuery·p0.50:   24.642 ms/op
                 executeFilterQuery·p0.90:   24.750 ms/op
                 executeFilterQuery·p0.95:   24.810 ms/op
                 executeFilterQuery·p0.99:   25.428 ms/op
                 executeFilterQuery·p0.999:  25.428 ms/op
                 executeFilterQuery·p0.9999: 25.428 ms/op
                 executeFilterQuery·p1.00:   25.428 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1422
  mean =     25.214 ±(99.9%) 0.060 ms/op

  Histogram, ms/op:
    [24.000, 24.250) = 1 
    [24.250, 24.500) = 35 
    [24.500, 24.750) = 731 
    [24.750, 25.000) = 58 
    [25.000, 25.250) = 7 
    [25.250, 25.500) = 5 
    [25.500, 25.750) = 9 
    [25.750, 26.000) = 238 
    [26.000, 26.250) = 317 
    [26.250, 26.500) = 18 
    [26.500, 26.750) = 2 

  Percentiles, ms/op:
      p(0.0000) =     24.183 ms/op
     p(50.0000) =     24.707 ms/op
     p(90.0000) =     26.083 ms/op
     p(95.0000) =     26.149 ms/op
     p(99.0000) =     26.313 ms/op
     p(99.9000) =     26.674 ms/op
     p(99.9900) =     26.771 ms/op
     p(99.9990) =     26.771 ms/op
     p(99.9999) =     26.771 ms/op
    p(100.0000) =     26.771 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 90.38% complete, ETA 00:26:39
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

52.321 ±(99.9%) 0.860 ms/op
# Warmup Iteration   2: 52.008 ±(99.9%) 0.082 ms/op
# Warmup Iteration   3: 51.774 ±(99.9%) 0.063 ms/op
# Warmup Iteration   4: 52.034 ±(99.9%) 0.373 ms/op
# Warmup Iteration   5: 52.230 ±(99.9%) 0.518 ms/op
Iteration   1: 51.645 ±(99.9%) 0.031 ms/op
                 executeFilterQuery·p0.00:   51.511 ms/op
                 executeFilterQuery·p0.50:   51.642 ms/op
                 executeFilterQuery·p0.90:   51.721 ms/op
                 executeFilterQuery·p0.95:   51.773 ms/op
                 executeFilterQuery·p0.99:   52.036 ms/op
                 executeFilterQuery·p0.999:  52.036 ms/op
                 executeFilterQuery·p0.9999: 52.036 ms/op
                 executeFilterQuery·p1.00:   52.036 ms/op

Iteration   2: 51.639 ±(99.9%) 0.029 ms/op
                 executeFilterQuery·p0.00:   51.511 ms/op
                 executeFilterQuery·p0.50:   51.642 ms/op
                 executeFilterQuery·p0.90:   51.721 ms/op
                 executeFilterQuery·p0.95:   51.773 ms/op
                 executeFilterQuery·p0.99:   51.773 ms/op
                 executeFilterQuery·p0.999:  51.773 ms/op
                 executeFilterQuery·p0.9999: 51.773 ms/op
                 executeFilterQuery·p1.00:   51.773 ms/op

Iteration   3: 51.636 ±(99.9%) 0.039 ms/op
                 executeFilterQuery·p0.00:   51.446 ms/op
                 executeFilterQuery·p0.50:   51.642 ms/op
                 executeFilterQuery·p0.90:   51.773 ms/op
                 executeFilterQuery·p0.95:   51.780 ms/op
                 executeFilterQuery·p0.99:   52.036 ms/op
                 executeFilterQuery·p0.999:  52.036 ms/op
                 executeFilterQuery·p0.9999: 52.036 ms/op
                 executeFilterQuery·p1.00:   52.036 ms/op

Iteration   4: 51.635 ±(99.9%) 0.028 ms/op
                 executeFilterQuery·p0.00:   51.511 ms/op
                 executeFilterQuery·p0.50:   51.642 ms/op
                 executeFilterQuery·p0.90:   51.708 ms/op
                 executeFilterQuery·p0.95:   51.773 ms/op
                 executeFilterQuery·p0.99:   51.905 ms/op
                 executeFilterQuery·p0.999:  51.905 ms/op
                 executeFilterQuery·p0.9999: 51.905 ms/op
                 executeFilterQuery·p1.00:   51.905 ms/op

Iteration   5: 51.622 ±(99.9%) 0.039 ms/op
                 executeFilterQuery·p0.00:   51.446 ms/op
                 executeFilterQuery·p0.50:   51.642 ms/op
                 executeFilterQuery·p0.90:   51.708 ms/op
                 executeFilterQuery·p0.95:   51.773 ms/op
                 executeFilterQuery·p0.99:   52.101 ms/op
                 executeFilterQuery·p0.999:  52.101 ms/op
                 executeFilterQuery·p0.9999: 52.101 ms/op
                 executeFilterQuery·p1.00:   52.101 ms/op


# Run progress: 91.03% complete, ETA 00:24:52
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

53.294 ±(99.9%) 1.090 ms/op
# Warmup Iteration   2: 53.353 ±(99.9%) 0.811 ms/op
# Warmup Iteration   3: 52.308 ±(99.9%) 0.473 ms/op
# Warmup Iteration   4: 55.309 ±(99.9%) 0.693 ms/op
# Warmup Iteration   5: 53.015 ±(99.9%) 0.753 ms/op
Iteration   1: 53.169 ±(99.9%) 0.768 ms/op
                 executeFilterQuery·p0.00:   51.773 ms/op
                 executeFilterQuery·p0.50:   51.970 ms/op
                 executeFilterQuery·p0.90:   56.230 ms/op
                 executeFilterQuery·p0.95:   56.295 ms/op
                 executeFilterQuery·p0.99:   56.426 ms/op
                 executeFilterQuery·p0.999:  56.426 ms/op
                 executeFilterQuery·p0.9999: 56.426 ms/op
                 executeFilterQuery·p1.00:   56.426 ms/op

Iteration   2: 52.864 ±(99.9%) 0.704 ms/op
                 executeFilterQuery·p0.00:   51.773 ms/op
                 executeFilterQuery·p0.50:   51.905 ms/op
                 executeFilterQuery·p0.90:   56.230 ms/op
                 executeFilterQuery·p0.95:   56.295 ms/op
                 executeFilterQuery·p0.99:   56.558 ms/op
                 executeFilterQuery·p0.999:  56.558 ms/op
                 executeFilterQuery·p0.9999: 56.558 ms/op
                 executeFilterQuery·p1.00:   56.558 ms/op

Iteration   3: 51.879 ±(99.9%) 0.029 ms/op
                 executeFilterQuery·p0.00:   51.773 ms/op
                 executeFilterQuery·p0.50:   51.872 ms/op
                 executeFilterQuery·p0.90:   51.970 ms/op
                 executeFilterQuery·p0.95:   51.970 ms/op
                 executeFilterQuery·p0.99:   52.101 ms/op
                 executeFilterQuery·p0.999:  52.101 ms/op
                 executeFilterQuery·p0.9999: 52.101 ms/op
                 executeFilterQuery·p1.00:   52.101 ms/op

Iteration   4: 52.210 ±(99.9%) 0.441 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   51.905 ms/op
                 executeFilterQuery·p0.90:   52.180 ms/op
                 executeFilterQuery·p0.95:   56.164 ms/op
                 executeFilterQuery·p0.99:   56.295 ms/op
                 executeFilterQuery·p0.999:  56.295 ms/op
                 executeFilterQuery·p0.9999: 56.295 ms/op
                 executeFilterQuery·p1.00:   56.295 ms/op

Iteration   5: 53.190 ±(99.9%) 0.796 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   51.905 ms/op
                 executeFilterQuery·p0.90:   56.295 ms/op
                 executeFilterQuery·p0.95:   56.295 ms/op
                 executeFilterQuery·p0.99:   56.361 ms/op
                 executeFilterQuery·p0.999:  56.361 ms/op
                 executeFilterQuery·p0.9999: 56.361 ms/op
                 executeFilterQuery·p1.00:   56.361 ms/op


# Run progress: 91.67% complete, ETA 00:23:05
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

52.370 ±(99.9%) 0.923 ms/op
# Warmup Iteration   2: 52.347 ±(99.9%) 0.520 ms/op
# Warmup Iteration   3: 52.173 ±(99.9%) 0.444 ms/op
# Warmup Iteration   4: 51.902 ±(99.9%) 0.112 ms/op
# Warmup Iteration   5: 51.861 ±(99.9%) 0.029 ms/op
Iteration   1: 51.869 ±(99.9%) 0.032 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   51.839 ms/op
                 executeFilterQuery·p0.90:   51.970 ms/op
                 executeFilterQuery·p0.95:   52.036 ms/op
                 executeFilterQuery·p0.99:   52.101 ms/op
                 executeFilterQuery·p0.999:  52.101 ms/op
                 executeFilterQuery·p0.9999: 52.101 ms/op
                 executeFilterQuery·p1.00:   52.101 ms/op

Iteration   2: 53.560 ±(99.9%) 0.823 ms/op
                 executeFilterQuery·p0.00:   51.642 ms/op
                 executeFilterQuery·p0.50:   51.970 ms/op
                 executeFilterQuery·p0.90:   56.230 ms/op
                 executeFilterQuery·p0.95:   56.295 ms/op
                 executeFilterQuery·p0.99:   56.361 ms/op
                 executeFilterQuery·p0.999:  56.361 ms/op
                 executeFilterQuery·p0.9999: 56.361 ms/op
                 executeFilterQuery·p1.00:   56.361 ms/op

Iteration   3: 52.600 ±(99.9%) 0.647 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   51.839 ms/op
                 executeFilterQuery·p0.90:   56.099 ms/op
                 executeFilterQuery·p0.95:   56.243 ms/op
                 executeFilterQuery·p0.99:   56.426 ms/op
                 executeFilterQuery·p0.999:  56.426 ms/op
                 executeFilterQuery·p0.9999: 56.426 ms/op
                 executeFilterQuery·p1.00:   56.426 ms/op

Iteration   4: 54.898 ±(99.9%) 0.789 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   56.033 ms/op
                 executeFilterQuery·p0.90:   56.230 ms/op
                 executeFilterQuery·p0.95:   56.361 ms/op
                 executeFilterQuery·p0.99:   56.426 ms/op
                 executeFilterQuery·p0.999:  56.426 ms/op
                 executeFilterQuery·p0.9999: 56.426 ms/op
                 executeFilterQuery·p1.00:   56.426 ms/op

Iteration   5: 55.119 ±(99.9%) 0.719 ms/op
                 executeFilterQuery·p0.00:   51.708 ms/op
                 executeFilterQuery·p0.50:   56.099 ms/op
                 executeFilterQuery·p0.90:   56.230 ms/op
                 executeFilterQuery·p0.95:   56.315 ms/op
                 executeFilterQuery·p0.99:   56.426 ms/op
                 executeFilterQuery·p0.999:  56.426 ms/op
                 executeFilterQuery·p0.9999: 56.426 ms/op
                 executeFilterQuery·p1.00:   56.426 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1131
  mean =     52.617 ±(99.9%) 0.169 ms/op

  Histogram, ms/op:
    [51.000, 51.500) = 3 
    [51.500, 52.000) = 871 
    [52.000, 52.500) = 28 
    [52.500, 53.000) = 4 
    [53.000, 53.500) = 5 
    [53.500, 54.000) = 2 
    [54.000, 54.500) = 2 
    [54.500, 55.000) = 4 
    [55.000, 55.500) = 2 
    [55.500, 56.000) = 23 
    [56.000, 56.500) = 186 

  Percentiles, ms/op:
      p(0.0000) =     51.446 ms/op
     p(50.0000) =     51.839 ms/op
     p(90.0000) =     56.164 ms/op
     p(95.0000) =     56.230 ms/op
     p(99.0000) =     56.361 ms/op
     p(99.9000) =     56.549 ms/op
     p(99.9900) =     56.558 ms/op
     p(99.9990) =     56.558 ms/op
     p(99.9999) =     56.558 ms/op
    p(100.0000) =     56.558 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 92.31% complete, ETA 00:21:18
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

86.785 ±(99.9%) 1.379 ms/op
# Warmup Iteration   2: 86.552 ±(99.9%) 0.201 ms/op
# Warmup Iteration   3: 86.554 ±(99.9%) 0.253 ms/op
# Warmup Iteration   4: 86.925 ±(99.9%) 0.471 ms/op
# Warmup Iteration   5: 87.327 ±(99.9%) 0.615 ms/op
Iteration   1: 86.621 ±(99.9%) 0.280 ms/op
                 executeFilterQuery·p0.00:   86.245 ms/op
                 executeFilterQuery·p0.50:   86.508 ms/op
                 executeFilterQuery·p0.90:   86.508 ms/op
                 executeFilterQuery·p0.95:   88.474 ms/op
                 executeFilterQuery·p0.99:   89.653 ms/op
                 executeFilterQuery·p0.999:  89.653 ms/op
                 executeFilterQuery·p0.9999: 89.653 ms/op
                 executeFilterQuery·p1.00:   89.653 ms/op

Iteration   2: 86.594 ±(99.9%) 0.259 ms/op
                 executeFilterQuery·p0.00:   86.245 ms/op
                 executeFilterQuery·p0.50:   86.508 ms/op
                 executeFilterQuery·p0.90:   86.639 ms/op
                 executeFilterQuery·p0.95:   86.901 ms/op
                 executeFilterQuery·p0.99:   89.653 ms/op
                 executeFilterQuery·p0.999:  89.653 ms/op
                 executeFilterQuery·p0.9999: 89.653 ms/op
                 executeFilterQuery·p1.00:   89.653 ms/op

Iteration   3: 86.730 ±(99.9%) 0.337 ms/op
                 executeFilterQuery·p0.00:   86.376 ms/op
                 executeFilterQuery·p0.50:   86.508 ms/op
                 executeFilterQuery·p0.90:   87.294 ms/op
                 executeFilterQuery·p0.95:   89.522 ms/op
                 executeFilterQuery·p0.99:   89.784 ms/op
                 executeFilterQuery·p0.999:  89.784 ms/op
                 executeFilterQuery·p0.9999: 89.784 ms/op
                 executeFilterQuery·p1.00:   89.784 ms/op

Iteration   4: 86.792 ±(99.9%) 0.412 ms/op
                 executeFilterQuery·p0.00:   86.245 ms/op
                 executeFilterQuery·p0.50:   86.508 ms/op
                 executeFilterQuery·p0.90:   88.605 ms/op
                 executeFilterQuery·p0.95:   89.522 ms/op
                 executeFilterQuery·p0.99:   89.653 ms/op
                 executeFilterQuery·p0.999:  89.653 ms/op
                 executeFilterQuery·p0.9999: 89.653 ms/op
                 executeFilterQuery·p1.00:   89.653 ms/op

Iteration   5: 86.605 ±(99.9%) 0.331 ms/op
                 executeFilterQuery·p0.00:   86.245 ms/op
                 executeFilterQuery·p0.50:   86.376 ms/op
                 executeFilterQuery·p0.90:   86.508 ms/op
                 executeFilterQuery·p0.95:   89.522 ms/op
                 executeFilterQuery·p0.99:   89.653 ms/op
                 executeFilterQuery·p0.999:  89.653 ms/op
                 executeFilterQuery·p0.9999: 89.653 ms/op
                 executeFilterQuery·p1.00:   89.653 ms/op


# Run progress: 92.95% complete, ETA 00:19:31
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

86.688 ±(99.9%) 1.170 ms/op
# Warmup Iteration   2: 89.714 ±(99.9%) 0.584 ms/op
# Warmup Iteration   3: 89.662 ±(99.9%) 0.568 ms/op
# Warmup Iteration   4: 89.149 ±(99.9%) 0.297 ms/op
# Warmup Iteration   5: 89.060 ±(99.9%) 0.053 ms/op
Iteration   1: 89.224 ±(99.9%) 0.342 ms/op
                 executeFilterQuery·p0.00:   88.867 ms/op
                 executeFilterQuery·p0.50:   88.998 ms/op
                 executeFilterQuery·p0.90:   89.391 ms/op
                 executeFilterQuery·p0.95:   91.881 ms/op
                 executeFilterQuery·p0.99:   92.144 ms/op
                 executeFilterQuery·p0.999:  92.144 ms/op
                 executeFilterQuery·p0.9999: 92.144 ms/op
                 executeFilterQuery·p1.00:   92.144 ms/op

Iteration   2: 89.113 ±(99.9%) 0.264 ms/op
                 executeFilterQuery·p0.00:   88.867 ms/op
                 executeFilterQuery·p0.50:   88.998 ms/op
                 executeFilterQuery·p0.90:   89.522 ms/op
                 executeFilterQuery·p0.95:   89.784 ms/op
                 executeFilterQuery·p0.99:   92.144 ms/op
                 executeFilterQuery·p0.999:  92.144 ms/op
                 executeFilterQuery·p0.9999: 92.144 ms/op
                 executeFilterQuery·p1.00:   92.144 ms/op

Iteration   3: 89.176 ±(99.9%) 0.273 ms/op
                 executeFilterQuery·p0.00:   88.736 ms/op
                 executeFilterQuery·p0.50:   88.998 ms/op
                 executeFilterQuery·p0.90:   89.653 ms/op
                 executeFilterQuery·p0.95:   90.440 ms/op
                 executeFilterQuery·p0.99:   92.144 ms/op
                 executeFilterQuery·p0.999:  92.144 ms/op
                 executeFilterQuery·p0.9999: 92.144 ms/op
                 executeFilterQuery·p1.00:   92.144 ms/op

Iteration   4: 90.277 ±(99.9%) 0.673 ms/op
                 executeFilterQuery·p0.00:   88.867 ms/op
                 executeFilterQuery·p0.50:   89.129 ms/op
                 executeFilterQuery·p0.90:   92.144 ms/op
                 executeFilterQuery·p0.95:   92.150 ms/op
                 executeFilterQuery·p0.99:   92.406 ms/op
                 executeFilterQuery·p0.999:  92.406 ms/op
                 executeFilterQuery·p0.9999: 92.406 ms/op
                 executeFilterQuery·p1.00:   92.406 ms/op

Iteration   5: 90.478 ±(99.9%) 0.676 ms/op
                 executeFilterQuery·p0.00:   88.736 ms/op
                 executeFilterQuery·p0.50:   91.554 ms/op
                 executeFilterQuery·p0.90:   92.026 ms/op
                 executeFilterQuery·p0.95:   92.150 ms/op
                 executeFilterQuery·p0.99:   92.537 ms/op
                 executeFilterQuery·p0.999:  92.537 ms/op
                 executeFilterQuery·p0.9999: 92.537 ms/op
                 executeFilterQuery·p1.00:   92.537 ms/op


# Run progress: 93.59% complete, ETA 00:17:44
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lessThan(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    agg_0_count += ordinal_2_sel_vec_length;
}
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

87.287 ±(99.9%) 1.217 ms/op
# Warmup Iteration   2: 86.803 ±(99.9%) 0.529 ms/op
# Warmup Iteration   3: 86.796 ±(99.9%) 0.508 ms/op
# Warmup Iteration   4: 86.592 ±(99.9%) 0.441 ms/op
# Warmup Iteration   5: 86.454 ±(99.9%) 0.385 ms/op
Iteration   1: 86.596 ±(99.9%) 0.447 ms/op
                 executeFilterQuery·p0.00:   85.852 ms/op
                 executeFilterQuery·p0.50:   86.245 ms/op
                 executeFilterQuery·p0.90:   88.867 ms/op
                 executeFilterQuery·p0.95:   89.522 ms/op
                 executeFilterQuery·p0.99:   89.915 ms/op
                 executeFilterQuery·p0.999:  89.915 ms/op
                 executeFilterQuery·p0.9999: 89.915 ms/op
                 executeFilterQuery·p1.00:   89.915 ms/op

Iteration   2: 86.321 ±(99.9%) 0.180 ms/op
                 executeFilterQuery·p0.00:   85.721 ms/op
                 executeFilterQuery·p0.50:   86.245 ms/op
                 executeFilterQuery·p0.90:   86.639 ms/op
                 executeFilterQuery·p0.95:   87.032 ms/op
                 executeFilterQuery·p0.99:   88.211 ms/op
                 executeFilterQuery·p0.999:  88.211 ms/op
                 executeFilterQuery·p0.9999: 88.211 ms/op
                 executeFilterQuery·p1.00:   88.211 ms/op

Iteration   3: 86.468 ±(99.9%) 0.224 ms/op
                 executeFilterQuery·p0.00:   85.983 ms/op
                 executeFilterQuery·p0.50:   86.376 ms/op
                 executeFilterQuery·p0.90:   86.770 ms/op
                 executeFilterQuery·p0.95:   87.032 ms/op
                 executeFilterQuery·p0.99:   89.653 ms/op
                 executeFilterQuery·p0.999:  89.653 ms/op
                 executeFilterQuery·p0.9999: 89.653 ms/op
                 executeFilterQuery·p1.00:   89.653 ms/op

Iteration   4: 85.970 ±(99.9%) 0.130 ms/op
                 executeFilterQuery·p0.00:   85.590 ms/op
                 executeFilterQuery·p0.50:   85.852 ms/op
                 executeFilterQuery·p0.90:   86.376 ms/op
                 executeFilterQuery·p0.95:   86.508 ms/op
                 executeFilterQuery·p0.99:   86.770 ms/op
                 executeFilterQuery·p0.999:  86.770 ms/op
                 executeFilterQuery·p0.9999: 86.770 ms/op
                 executeFilterQuery·p1.00:   86.770 ms/op

Iteration   5: 86.241 ±(99.9%) 0.133 ms/op
                 executeFilterQuery·p0.00:   85.852 ms/op
                 executeFilterQuery·p0.50:   86.114 ms/op
                 executeFilterQuery·p0.90:   86.639 ms/op
                 executeFilterQuery·p0.95:   86.901 ms/op
                 executeFilterQuery·p0.99:   87.163 ms/op
                 executeFilterQuery·p0.999:  87.163 ms/op
                 executeFilterQuery·p0.9999: 87.163 ms/op
                 executeFilterQuery·p1.00:   87.163 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 883
  mean =     87.541 ±(99.9%) 0.193 ms/op

  Histogram, ms/op:
    [85.000, 85.500) = 0 
    [85.500, 86.000) = 82 
    [86.000, 86.500) = 222 
    [86.500, 87.000) = 247 
    [87.000, 87.500) = 10 
    [87.500, 88.000) = 3 
    [88.000, 88.500) = 3 
    [88.500, 89.000) = 177 
    [89.000, 89.500) = 47 
    [89.500, 90.000) = 27 
    [90.000, 90.500) = 2 
    [90.500, 91.000) = 0 
    [91.000, 91.500) = 1 
    [91.500, 92.000) = 41 
    [92.000, 92.500) = 20 

  Percentiles, ms/op:
      p(0.0000) =     85.590 ms/op
     p(50.0000) =     86.508 ms/op
     p(90.0000) =     89.522 ms/op
     p(95.0000) =     91.855 ms/op
     p(99.0000) =     92.144 ms/op
     p(99.9000) =     92.537 ms/op
     p(99.9900) =     92.537 ms/op
     p(99.9990) =     92.537 ms/op
     p(99.9999) =     92.537 ms/op
    p(100.0000) =     92.537 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 94.23% complete, ETA 00:15:57
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

42.045 ±(99.9%) 5.345 ms/op
# Warmup Iteration   2: 40.998 ±(99.9%) 0.277 ms/op
# Warmup Iteration   3: 40.328 ±(99.9%) 0.332 ms/op
# Warmup Iteration   4: 39.879 ±(99.9%) 0.032 ms/op
# Warmup Iteration   5: 39.875 ±(99.9%) 0.145 ms/op
Iteration   1: 39.790 ±(99.9%) 0.056 ms/op
                 executeFilterQuery·p0.00:   39.191 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   39.944 ms/op
                 executeFilterQuery·p0.95:   39.977 ms/op
                 executeFilterQuery·p0.99:   39.977 ms/op
                 executeFilterQuery·p0.999:  39.977 ms/op
                 executeFilterQuery·p0.9999: 39.977 ms/op
                 executeFilterQuery·p1.00:   39.977 ms/op

Iteration   2: 39.805 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   39.453 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   39.977 ms/op
                 executeFilterQuery·p0.95:   39.977 ms/op
                 executeFilterQuery·p0.99:   40.108 ms/op
                 executeFilterQuery·p0.999:  40.108 ms/op
                 executeFilterQuery·p0.9999: 40.108 ms/op
                 executeFilterQuery·p1.00:   40.108 ms/op

Iteration   3: 39.957 ±(99.9%) 0.164 ms/op
                 executeFilterQuery·p0.00:   39.518 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   40.272 ms/op
                 executeFilterQuery·p0.95:   41.288 ms/op
                 executeFilterQuery·p0.99:   41.550 ms/op
                 executeFilterQuery·p0.999:  41.550 ms/op
                 executeFilterQuery·p0.9999: 41.550 ms/op
                 executeFilterQuery·p1.00:   41.550 ms/op

Iteration   4: 40.027 ±(99.9%) 0.216 ms/op
                 executeFilterQuery·p0.00:   39.584 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   41.255 ms/op
                 executeFilterQuery·p0.95:   41.452 ms/op
                 executeFilterQuery·p0.99:   42.074 ms/op
                 executeFilterQuery·p0.999:  42.074 ms/op
                 executeFilterQuery·p0.9999: 42.074 ms/op
                 executeFilterQuery·p1.00:   42.074 ms/op

Iteration   5: 39.901 ±(99.9%) 0.131 ms/op
                 executeFilterQuery·p0.00:   39.518 ms/op
                 executeFilterQuery·p0.50:   39.911 ms/op
                 executeFilterQuery·p0.90:   39.977 ms/op
                 executeFilterQuery·p0.95:   39.977 ms/op
                 executeFilterQuery·p0.99:   42.861 ms/op
                 executeFilterQuery·p0.999:  42.861 ms/op
                 executeFilterQuery·p0.9999: 42.861 ms/op
                 executeFilterQuery·p1.00:   42.861 ms/op


# Run progress: 94.87% complete, ETA 00:14:11
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

41.252 ±(99.9%) 5.153 ms/op
# Warmup Iteration   2: 40.398 ±(99.9%) 0.156 ms/op
# Warmup Iteration   3: 39.826 ±(99.9%) 0.053 ms/op
# Warmup Iteration   4: 39.811 ±(99.9%) 0.049 ms/op
# Warmup Iteration   5: 39.851 ±(99.9%) 0.052 ms/op
Iteration   1: 39.840 ±(99.9%) 0.040 ms/op
                 executeFilterQuery·p0.00:   39.387 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   39.911 ms/op
                 executeFilterQuery·p0.95:   39.977 ms/op
                 executeFilterQuery·p0.99:   40.108 ms/op
                 executeFilterQuery·p0.999:  40.108 ms/op
                 executeFilterQuery·p0.9999: 40.108 ms/op
                 executeFilterQuery·p1.00:   40.108 ms/op

Iteration   2: 39.850 ±(99.9%) 0.055 ms/op
                 executeFilterQuery·p0.00:   39.387 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   39.911 ms/op
                 executeFilterQuery·p0.95:   39.977 ms/op
                 executeFilterQuery·p0.99:   40.829 ms/op
                 executeFilterQuery·p0.999:  40.829 ms/op
                 executeFilterQuery·p0.9999: 40.829 ms/op
                 executeFilterQuery·p1.00:   40.829 ms/op

Iteration   3: 39.827 ±(99.9%) 0.041 ms/op
                 executeFilterQuery·p0.00:   39.518 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   39.911 ms/op
                 executeFilterQuery·p0.95:   39.977 ms/op
                 executeFilterQuery·p0.99:   40.174 ms/op
                 executeFilterQuery·p0.999:  40.174 ms/op
                 executeFilterQuery·p0.9999: 40.174 ms/op
                 executeFilterQuery·p1.00:   40.174 ms/op

Iteration   4: 39.810 ±(99.9%) 0.085 ms/op
                 executeFilterQuery·p0.00:   39.518 ms/op
                 executeFilterQuery·p0.50:   39.846 ms/op
                 executeFilterQuery·p0.90:   39.911 ms/op
                 executeFilterQuery·p0.95:   39.961 ms/op
                 executeFilterQuery·p0.99:   41.222 ms/op
                 executeFilterQuery·p0.999:  41.222 ms/op
                 executeFilterQuery·p0.9999: 41.222 ms/op
                 executeFilterQuery·p1.00:   41.222 ms/op

Iteration   5: 40.425 ±(99.9%) 0.168 ms/op
                 executeFilterQuery·p0.00:   39.715 ms/op
                 executeFilterQuery·p0.50:   40.763 ms/op
                 executeFilterQuery·p0.90:   40.829 ms/op
                 executeFilterQuery·p0.95:   40.829 ms/op
                 executeFilterQuery·p0.99:   40.960 ms/op
                 executeFilterQuery·p0.999:  40.960 ms/op
                 executeFilterQuery·p0.9999: 40.960 ms/op
                 executeFilterQuery·p1.00:   40.960 ms/op


# Run progress: 95.51% complete, ETA 00:12:24
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

40.556 ±(99.9%) 5.043 ms/op
# Warmup Iteration   2: 40.088 ±(99.9%) 0.028 ms/op
# Warmup Iteration   3: 40.669 ±(99.9%) 0.361 ms/op
# Warmup Iteration   4: 39.984 ±(99.9%) 0.065 ms/op
# Warmup Iteration   5: 39.839 ±(99.9%) 0.054 ms/op
Iteration   1: 39.918 ±(99.9%) 0.057 ms/op
                 executeFilterQuery·p0.00:   39.387 ms/op
                 executeFilterQuery·p0.50:   39.911 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.108 ms/op
                 executeFilterQuery·p0.99:   40.174 ms/op
                 executeFilterQuery·p0.999:  40.174 ms/op
                 executeFilterQuery·p0.9999: 40.174 ms/op
                 executeFilterQuery·p1.00:   40.174 ms/op

Iteration   2: 39.926 ±(99.9%) 0.074 ms/op
                 executeFilterQuery·p0.00:   39.518 ms/op
                 executeFilterQuery·p0.50:   39.911 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.108 ms/op
                 executeFilterQuery·p0.99:   41.157 ms/op
                 executeFilterQuery·p0.999:  41.157 ms/op
                 executeFilterQuery·p0.9999: 41.157 ms/op
                 executeFilterQuery·p1.00:   41.157 ms/op

Iteration   3: 40.097 ±(99.9%) 0.035 ms/op
                 executeFilterQuery·p0.00:   39.715 ms/op
                 executeFilterQuery·p0.50:   40.108 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.174 ms/op
                 executeFilterQuery·p0.99:   40.305 ms/op
                 executeFilterQuery·p0.999:  40.305 ms/op
                 executeFilterQuery·p0.9999: 40.305 ms/op
                 executeFilterQuery·p1.00:   40.305 ms/op

Iteration   4: 39.979 ±(99.9%) 0.047 ms/op
                 executeFilterQuery·p0.00:   39.518 ms/op
                 executeFilterQuery·p0.50:   40.042 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.108 ms/op
                 executeFilterQuery·p0.99:   40.174 ms/op
                 executeFilterQuery·p0.999:  40.174 ms/op
                 executeFilterQuery·p0.9999: 40.174 ms/op
                 executeFilterQuery·p1.00:   40.174 ms/op

Iteration   5: 40.086 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   39.715 ms/op
                 executeFilterQuery·p0.50:   40.108 ms/op
                 executeFilterQuery·p0.90:   40.108 ms/op
                 executeFilterQuery·p0.95:   40.174 ms/op
                 executeFilterQuery·p0.99:   41.353 ms/op
                 executeFilterQuery·p0.999:  41.353 ms/op
                 executeFilterQuery·p0.9999: 41.353 ms/op
                 executeFilterQuery·p1.00:   41.353 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 1257
  mean =     39.949 ±(99.9%) 0.029 ms/op

  Histogram, ms/op:
    [39.000, 39.250) = 1 
    [39.250, 39.500) = 5 
    [39.500, 39.750) = 167 
    [39.750, 40.000) = 765 
    [40.000, 40.250) = 239 
    [40.250, 40.500) = 2 
    [40.500, 40.750) = 12 
    [40.750, 41.000) = 46 
    [41.000, 41.250) = 4 
    [41.250, 41.500) = 11 
    [41.500, 41.750) = 2 
    [41.750, 42.000) = 0 
    [42.000, 42.250) = 2 
    [42.250, 42.500) = 0 
    [42.500, 42.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     39.191 ms/op
     p(50.0000) =     39.911 ms/op
     p(90.0000) =     40.108 ms/op
     p(95.0000) =     40.763 ms/op
     p(99.0000) =     41.288 ms/op
     p(99.9000) =     42.658 ms/op
     p(99.9900) =     42.861 ms/op
     p(99.9990) =     42.861 ms/op
     p(99.9999) =     42.861 ms/op
    p(100.0000) =     42.861 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 96.15% complete, ETA 00:10:38
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

40.629 ±(99.9%) 5.160 ms/op
# Warmup Iteration   2: 40.306 ±(99.9%) 0.223 ms/op
# Warmup Iteration   3: 40.187 ±(99.9%) 0.156 ms/op
# Warmup Iteration   4: 40.201 ±(99.9%) 0.186 ms/op
# Warmup Iteration   5: 40.181 ±(99.9%) 0.152 ms/op
Iteration   1: 40.110 ±(99.9%) 0.154 ms/op
                 executeFilterQuery·p0.00:   39.387 ms/op
                 executeFilterQuery·p0.50:   40.075 ms/op
                 executeFilterQuery·p0.90:   40.305 ms/op
                 executeFilterQuery·p0.95:   41.402 ms/op
                 executeFilterQuery·p0.99:   41.681 ms/op
                 executeFilterQuery·p0.999:  41.681 ms/op
                 executeFilterQuery·p0.9999: 41.681 ms/op
                 executeFilterQuery·p1.00:   41.681 ms/op

Iteration   2: 40.178 ±(99.9%) 0.163 ms/op
                 executeFilterQuery·p0.00:   39.453 ms/op
                 executeFilterQuery·p0.50:   40.174 ms/op
                 executeFilterQuery·p0.90:   40.436 ms/op
                 executeFilterQuery·p0.95:   41.452 ms/op
                 executeFilterQuery·p0.99:   41.878 ms/op
                 executeFilterQuery·p0.999:  41.878 ms/op
                 executeFilterQuery·p0.9999: 41.878 ms/op
                 executeFilterQuery·p1.00:   41.878 ms/op

Iteration   3: 40.254 ±(99.9%) 0.196 ms/op
                 executeFilterQuery·p0.00:   39.518 ms/op
                 executeFilterQuery·p0.50:   40.174 ms/op
                 executeFilterQuery·p0.90:   41.419 ms/op
                 executeFilterQuery·p0.95:   41.648 ms/op
                 executeFilterQuery·p0.99:   41.943 ms/op
                 executeFilterQuery·p0.999:  41.943 ms/op
                 executeFilterQuery·p0.9999: 41.943 ms/op
                 executeFilterQuery·p1.00:   41.943 ms/op

Iteration   4: 40.261 ±(99.9%) 0.221 ms/op
                 executeFilterQuery·p0.00:   39.518 ms/op
                 executeFilterQuery·p0.50:   40.174 ms/op
                 executeFilterQuery·p0.90:   41.452 ms/op
                 executeFilterQuery·p0.95:   41.828 ms/op
                 executeFilterQuery·p0.99:   42.336 ms/op
                 executeFilterQuery·p0.999:  42.336 ms/op
                 executeFilterQuery·p0.9999: 42.336 ms/op
                 executeFilterQuery·p1.00:   42.336 ms/op

Iteration   5: 40.141 ±(99.9%) 0.158 ms/op
                 executeFilterQuery·p0.00:   39.453 ms/op
                 executeFilterQuery·p0.50:   40.108 ms/op
                 executeFilterQuery·p0.90:   40.567 ms/op
                 executeFilterQuery·p0.95:   41.271 ms/op
                 executeFilterQuery·p0.99:   41.746 ms/op
                 executeFilterQuery·p0.999:  41.746 ms/op
                 executeFilterQuery·p0.9999: 41.746 ms/op
                 executeFilterQuery·p1.00:   41.746 ms/op


# Run progress: 96.79% complete, ETA 00:08:51
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

40.598 ±(99.9%) 4.970 ms/op
# Warmup Iteration   2: 40.030 ±(99.9%) 0.162 ms/op
# Warmup Iteration   3: 40.359 ±(99.9%) 0.099 ms/op
# Warmup Iteration   4: 40.498 ±(99.9%) 0.061 ms/op
# Warmup Iteration   5: 40.453 ±(99.9%) 0.050 ms/op
Iteration   1: 40.581 ±(99.9%) 0.208 ms/op
                 executeFilterQuery·p0.00:   39.977 ms/op
                 executeFilterQuery·p0.50:   40.501 ms/op
                 executeFilterQuery·p0.90:   41.458 ms/op
                 executeFilterQuery·p0.95:   42.258 ms/op
                 executeFilterQuery·p0.99:   42.402 ms/op
                 executeFilterQuery·p0.999:  42.402 ms/op
                 executeFilterQuery·p0.9999: 42.402 ms/op
                 executeFilterQuery·p1.00:   42.402 ms/op

Iteration   2: 40.534 ±(99.9%) 0.144 ms/op
                 executeFilterQuery·p0.00:   40.174 ms/op
                 executeFilterQuery·p0.50:   40.501 ms/op
                 executeFilterQuery·p0.90:   40.632 ms/op
                 executeFilterQuery·p0.95:   41.799 ms/op
                 executeFilterQuery·p0.99:   42.336 ms/op
                 executeFilterQuery·p0.999:  42.336 ms/op
                 executeFilterQuery·p0.9999: 42.336 ms/op
                 executeFilterQuery·p1.00:   42.336 ms/op

Iteration   3: 40.506 ±(99.9%) 0.096 ms/op
                 executeFilterQuery·p0.00:   40.174 ms/op
                 executeFilterQuery·p0.50:   40.501 ms/op
                 executeFilterQuery·p0.90:   40.632 ms/op
                 executeFilterQuery·p0.95:   40.803 ms/op
                 executeFilterQuery·p0.99:   42.205 ms/op
                 executeFilterQuery·p0.999:  42.205 ms/op
                 executeFilterQuery·p0.9999: 42.205 ms/op
                 executeFilterQuery·p1.00:   42.205 ms/op

Iteration   4: 40.550 ±(99.9%) 0.132 ms/op
                 executeFilterQuery·p0.00:   40.239 ms/op
                 executeFilterQuery·p0.50:   40.501 ms/op
                 executeFilterQuery·p0.90:   40.632 ms/op
                 executeFilterQuery·p0.95:   41.170 ms/op
                 executeFilterQuery·p0.99:   42.271 ms/op
                 executeFilterQuery·p0.999:  42.271 ms/op
                 executeFilterQuery·p0.9999: 42.271 ms/op
                 executeFilterQuery·p1.00:   42.271 ms/op

Iteration   5: 40.475 ±(99.9%) 0.079 ms/op
                 executeFilterQuery·p0.00:   40.174 ms/op
                 executeFilterQuery·p0.50:   40.501 ms/op
                 executeFilterQuery·p0.90:   40.567 ms/op
                 executeFilterQuery·p0.95:   40.619 ms/op
                 executeFilterQuery·p0.99:   41.812 ms/op
                 executeFilterQuery·p0.999:  41.812 ms/op
                 executeFilterQuery·p0.9999: 41.812 ms/op
                 executeFilterQuery·p1.00:   41.812 ms/op


# Run progress: 97.44% complete, ETA 00:07:05
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

40.514 ±(99.9%) 5.046 ms/op
# Warmup Iteration   2: 40.255 ±(99.9%) 0.030 ms/op
# Warmup Iteration   3: 40.360 ±(99.9%) 0.184 ms/op
# Warmup Iteration   4: 40.270 ±(99.9%) 0.033 ms/op
# Warmup Iteration   5: 40.225 ±(99.9%) 0.044 ms/op
Iteration   1: 40.242 ±(99.9%) 0.031 ms/op
                 executeFilterQuery·p0.00:   39.780 ms/op
                 executeFilterQuery·p0.50:   40.239 ms/op
                 executeFilterQuery·p0.90:   40.305 ms/op
                 executeFilterQuery·p0.95:   40.354 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   2: 40.476 ±(99.9%) 0.261 ms/op
                 executeFilterQuery·p0.00:   40.108 ms/op
                 executeFilterQuery·p0.50:   40.174 ms/op
                 executeFilterQuery·p0.90:   41.845 ms/op
                 executeFilterQuery·p0.95:   42.435 ms/op
                 executeFilterQuery·p0.99:   42.598 ms/op
                 executeFilterQuery·p0.999:  42.598 ms/op
                 executeFilterQuery·p0.9999: 42.598 ms/op
                 executeFilterQuery·p1.00:   42.598 ms/op

Iteration   3: 40.153 ±(99.9%) 0.045 ms/op
                 executeFilterQuery·p0.00:   39.715 ms/op
                 executeFilterQuery·p0.50:   40.174 ms/op
                 executeFilterQuery·p0.90:   40.239 ms/op
                 executeFilterQuery·p0.95:   40.305 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   4: 40.291 ±(99.9%) 0.130 ms/op
                 executeFilterQuery·p0.00:   39.584 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   41.271 ms/op
                 executeFilterQuery·p0.99:   41.812 ms/op
                 executeFilterQuery·p0.999:  41.812 ms/op
                 executeFilterQuery·p0.9999: 41.812 ms/op
                 executeFilterQuery·p1.00:   41.812 ms/op

Iteration   5: 40.374 ±(99.9%) 0.048 ms/op
                 executeFilterQuery·p0.00:   40.042 ms/op
                 executeFilterQuery·p0.50:   40.370 ms/op
                 executeFilterQuery·p0.90:   40.501 ms/op
                 executeFilterQuery·p0.95:   40.567 ms/op
                 executeFilterQuery·p0.99:   40.763 ms/op
                 executeFilterQuery·p0.999:  40.763 ms/op
                 executeFilterQuery·p0.9999: 40.763 ms/op
                 executeFilterQuery·p1.00:   40.763 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 1255
  mean =     40.341 ±(99.9%) 0.041 ms/op

  Histogram, ms/op:
    [39.000, 39.250) = 0 
    [39.250, 39.500) = 4 
    [39.500, 39.750) = 34 
    [39.750, 40.000) = 148 
    [40.000, 40.250) = 493 
    [40.250, 40.500) = 233 
    [40.500, 40.750) = 263 
    [40.750, 41.000) = 5 
    [41.000, 41.250) = 7 
    [41.250, 41.500) = 16 
    [41.500, 41.750) = 18 
    [41.750, 42.000) = 9 
    [42.000, 42.250) = 11 
    [42.250, 42.500) = 11 
    [42.500, 42.750) = 3 

  Percentiles, ms/op:
      p(0.0000) =     39.387 ms/op
     p(50.0000) =     40.239 ms/op
     p(90.0000) =     40.567 ms/op
     p(95.0000) =     41.366 ms/op
     p(99.0000) =     42.271 ms/op
     p(99.9000) =     42.582 ms/op
     p(99.9900) =     42.598 ms/op
     p(99.9990) =     42.598 ms/op
     p(99.9999) =     42.598 ms/op
    p(100.0000) =     42.598 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview --enable-native-access=ALL-UNNAMED
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 98.08% complete, ETA 00:05:18
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

40.700 ±(99.9%) 5.238 ms/op
# Warmup Iteration   2: 40.383 ±(99.9%) 0.109 ms/op
# Warmup Iteration   3: 40.292 ±(99.9%) 0.045 ms/op
# Warmup Iteration   4: 40.269 ±(99.9%) 0.048 ms/op
# Warmup Iteration   5: 40.297 ±(99.9%) 0.117 ms/op
Iteration   1: 40.283 ±(99.9%) 0.025 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.357 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   2: 40.325 ±(99.9%) 0.116 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   40.672 ms/op
                 executeFilterQuery·p0.99:   42.271 ms/op
                 executeFilterQuery·p0.999:  42.271 ms/op
                 executeFilterQuery·p0.9999: 42.271 ms/op
                 executeFilterQuery·p1.00:   42.271 ms/op

Iteration   3: 40.263 ±(99.9%) 0.043 ms/op
                 executeFilterQuery·p0.00:   39.846 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   4: 40.266 ±(99.9%) 0.034 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.370 ms/op
                 executeFilterQuery·p0.999:  40.370 ms/op
                 executeFilterQuery·p0.9999: 40.370 ms/op
                 executeFilterQuery·p1.00:   40.370 ms/op

Iteration   5: 40.253 ±(99.9%) 0.050 ms/op
                 executeFilterQuery·p0.00:   39.780 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.370 ms/op
                 executeFilterQuery·p0.95:   40.370 ms/op
                 executeFilterQuery·p0.99:   40.632 ms/op
                 executeFilterQuery·p0.999:  40.632 ms/op
                 executeFilterQuery·p0.9999: 40.632 ms/op
                 executeFilterQuery·p1.00:   40.632 ms/op


# Run progress: 98.72% complete, ETA 00:03:32
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

40.736 ±(99.9%) 5.386 ms/op
# Warmup Iteration   2: 40.347 ±(99.9%) 0.084 ms/op
# Warmup Iteration   3: 40.552 ±(99.9%) 0.050 ms/op
# Warmup Iteration   4: 40.386 ±(99.9%) 0.070 ms/op
# Warmup Iteration   5: 40.451 ±(99.9%) 0.213 ms/op
Iteration   1: 40.687 ±(99.9%) 0.063 ms/op
                 executeFilterQuery·p0.00:   40.370 ms/op
                 executeFilterQuery·p0.50:   40.763 ms/op
                 executeFilterQuery·p0.90:   40.829 ms/op
                 executeFilterQuery·p0.95:   40.891 ms/op
                 executeFilterQuery·p0.99:   41.222 ms/op
                 executeFilterQuery·p0.999:  41.222 ms/op
                 executeFilterQuery·p0.9999: 41.222 ms/op
                 executeFilterQuery·p1.00:   41.222 ms/op

Iteration   2: 40.127 ±(99.9%) 0.083 ms/op
                 executeFilterQuery·p0.00:   39.780 ms/op
                 executeFilterQuery·p0.50:   40.108 ms/op
                 executeFilterQuery·p0.90:   40.174 ms/op
                 executeFilterQuery·p0.95:   40.816 ms/op
                 executeFilterQuery·p0.99:   41.026 ms/op
                 executeFilterQuery·p0.999:  41.026 ms/op
                 executeFilterQuery·p0.9999: 41.026 ms/op
                 executeFilterQuery·p1.00:   41.026 ms/op

Iteration   3: 40.705 ±(99.9%) 0.157 ms/op
                 executeFilterQuery·p0.00:   40.436 ms/op
                 executeFilterQuery·p0.50:   40.698 ms/op
                 executeFilterQuery·p0.90:   40.894 ms/op
                 executeFilterQuery·p0.95:   40.957 ms/op
                 executeFilterQuery·p0.99:   44.040 ms/op
                 executeFilterQuery·p0.999:  44.040 ms/op
                 executeFilterQuery·p0.9999: 44.040 ms/op
                 executeFilterQuery·p1.00:   44.040 ms/op

Iteration   4: 40.582 ±(99.9%) 0.111 ms/op
                 executeFilterQuery·p0.00:   39.649 ms/op
                 executeFilterQuery·p0.50:   40.665 ms/op
                 executeFilterQuery·p0.90:   40.829 ms/op
                 executeFilterQuery·p0.95:   40.891 ms/op
                 executeFilterQuery·p0.99:   40.894 ms/op
                 executeFilterQuery·p0.999:  40.894 ms/op
                 executeFilterQuery·p0.9999: 40.894 ms/op
                 executeFilterQuery·p1.00:   40.894 ms/op

Iteration   5: 39.958 ±(99.9%) 0.036 ms/op
                 executeFilterQuery·p0.00:   39.453 ms/op
                 executeFilterQuery·p0.50:   39.977 ms/op
                 executeFilterQuery·p0.90:   40.042 ms/op
                 executeFilterQuery·p0.95:   40.042 ms/op
                 executeFilterQuery·p0.99:   40.108 ms/op
                 executeFilterQuery·p0.999:  40.108 ms/op
                 executeFilterQuery·p0.9999: 40.108 ms/op
                 executeFilterQuery·p1.00:   40.108 ms/op


# Run progress: 99.36% complete, ETA 00:01:46
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: [Generated query code]
int agg_0_count = 0;
boolean[] ordinal_0_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_1_val_mask = cCtx.getAllocationManager().getBooleanVector();
boolean[] ordinal_2_val_mask = cCtx.getAllocationManager().getBooleanVector();
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(0);
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(1);
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = (org.apache.arrow.vector.IntVector) filter_query_table.getVector(2);
    int ordinal_0_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_0, 3000, ordinal_0_val_mask);
    int ordinal_1_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_1, 3000, ordinal_1_val_mask, ordinal_0_val_mask, ordinal_0_val_mask_length);
    int ordinal_2_val_mask_length = VectorisedFilterOperators.lessThanSIMD(filter_query_table_vc_2, 3000, ordinal_2_val_mask, ordinal_1_val_mask, ordinal_1_val_mask_length);
    agg_0_count += VectorisedAggregationOperators.count(ordinal_2_val_mask, ordinal_2_val_mask_length);
}
cCtx.getAllocationManager().release(ordinal_0_val_mask);
cCtx.getAllocationManager().release(ordinal_1_val_mask);
cCtx.getAllocationManager().release(ordinal_2_val_mask);
cCtx.getResultConsumptionTarget().consumeResultItem(agg_0_count);

40.702 ±(99.9%) 5.349 ms/op
# Warmup Iteration   2: 40.333 ±(99.9%) 0.067 ms/op
# Warmup Iteration   3: 40.431 ±(99.9%) 0.048 ms/op
# Warmup Iteration   4: 40.273 ±(99.9%) 0.056 ms/op
# Warmup Iteration   5: 40.242 ±(99.9%) 0.039 ms/op
Iteration   1: 40.241 ±(99.9%) 0.083 ms/op
                 executeFilterQuery·p0.00:   39.715 ms/op
                 executeFilterQuery·p0.50:   40.305 ms/op
                 executeFilterQuery·p0.90:   40.436 ms/op
                 executeFilterQuery·p0.95:   40.501 ms/op
                 executeFilterQuery·p0.99:   40.501 ms/op
                 executeFilterQuery·p0.999:  40.501 ms/op
                 executeFilterQuery·p0.9999: 40.501 ms/op
                 executeFilterQuery·p1.00:   40.501 ms/op

Iteration   2: 40.386 ±(99.9%) 0.181 ms/op
                 executeFilterQuery·p0.00:   39.911 ms/op
                 executeFilterQuery·p0.50:   40.370 ms/op
                 executeFilterQuery·p0.90:   40.436 ms/op
                 executeFilterQuery·p0.95:   40.560 ms/op
                 executeFilterQuery·p0.99:   42.795 ms/op
                 executeFilterQuery·p0.999:  42.795 ms/op
                 executeFilterQuery·p0.9999: 42.795 ms/op
                 executeFilterQuery·p1.00:   42.795 ms/op

Iteration   3: 40.403 ±(99.9%) 0.154 ms/op
                 executeFilterQuery·p0.00:   39.715 ms/op
                 executeFilterQuery·p0.50:   40.370 ms/op
                 executeFilterQuery·p0.90:   40.501 ms/op
                 executeFilterQuery·p0.95:   40.567 ms/op
                 executeFilterQuery·p0.99:   42.533 ms/op
                 executeFilterQuery·p0.999:  42.533 ms/op
                 executeFilterQuery·p0.9999: 42.533 ms/op
                 executeFilterQuery·p1.00:   42.533 ms/op

Iteration   4: 40.358 ±(99.9%) 0.058 ms/op
                 executeFilterQuery·p0.00:   39.977 ms/op
                 executeFilterQuery·p0.50:   40.436 ms/op
                 executeFilterQuery·p0.90:   40.501 ms/op
                 executeFilterQuery·p0.95:   40.501 ms/op
                 executeFilterQuery·p0.99:   40.763 ms/op
                 executeFilterQuery·p0.999:  40.763 ms/op
                 executeFilterQuery·p0.9999: 40.763 ms/op
                 executeFilterQuery·p1.00:   40.763 ms/op

Iteration   5: 40.420 ±(99.9%) 0.216 ms/op
                 executeFilterQuery·p0.00:   40.042 ms/op
                 executeFilterQuery·p0.50:   40.370 ms/op
                 executeFilterQuery·p0.90:   40.501 ms/op
                 executeFilterQuery·p0.95:   40.560 ms/op
                 executeFilterQuery·p0.99:   43.909 ms/op
                 executeFilterQuery·p0.999:  43.909 ms/op
                 executeFilterQuery·p0.9999: 43.909 ms/op
                 executeFilterQuery·p1.00:   43.909 ms/op



Result "benchmarks.filter_query.VectorisedSimd.executeFilterQuery":
  N = 1212
  mean =     40.350 ±(99.9%) 0.033 ms/op

  Histogram, ms/op:
    [39.000, 39.500) = 1 
    [39.500, 40.000) = 128 
    [40.000, 40.500) = 809 
    [40.500, 41.000) = 257 
    [41.000, 41.500) = 5 
    [41.500, 42.000) = 2 
    [42.000, 42.500) = 1 
    [42.500, 43.000) = 7 
    [43.000, 43.500) = 0 
    [43.500, 44.000) = 1 
    [44.000, 44.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     39.453 ms/op
     p(50.0000) =     40.305 ms/op
     p(90.0000) =     40.763 ms/op
     p(95.0000) =     40.829 ms/op
     p(99.0000) =     41.621 ms/op
     p(99.9000) =     44.012 ms/op
     p(99.9900) =     44.040 ms/op
     p(99.9990) =     44.040 ms/op
     p(99.9999) =     44.040 ms/op
    p(100.0000) =     44.040 ms/op


# Run complete. Total time: 04:36:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                               (tableFilePath)    Mode   Cnt     Score    Error  Units
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample   274   406.490 ±  2.712  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         394.789           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         403.177           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         416.023           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         427.295           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         436.863           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         587.203           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         587.203           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         587.203           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample   215   555.501 ±  0.944  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         545.260           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         556.794           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         559.940           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         560.988           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         566.776           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         568.328           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         568.328           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         568.328           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample   225   547.100 ±  4.606  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         524.288           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         548.405           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         558.262           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         564.134           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         675.786           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         685.769           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         685.769           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         685.769           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample   230   511.598 ±  2.232  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         494.928           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         515.375           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         519.517           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         521.378           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         558.147           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         571.474           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         571.474           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         571.474           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample   224   538.963 ±  1.351  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         526.385           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         537.919           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         549.978           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         554.435           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         559.677           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         560.988           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         560.988           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         560.988           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample   210   601.433 ±  0.811  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         594.543           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         601.883           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         606.077           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         607.597           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         610.156           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         613.417           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         613.417           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         613.417           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample   179   714.813 ±  4.776  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         698.352           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         708.837           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         722.469           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         748.683           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         816.421           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         818.938           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         818.938           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         818.938           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample   130  1074.419 ±  9.419  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample         969.933           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1065.878           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1113.378           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1130.155           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1141.648           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1142.948           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1142.948           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1142.948           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample   114  1267.305 ± 12.556  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1214.251           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1277.166           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1315.963           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1319.633           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1356.543           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1356.857           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1356.857           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1356.857           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample    60  2540.071 ± 27.187  ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2399.142           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2550.137           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2616.407           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2633.813           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2659.189           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2659.189           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2659.189           ms/op
b.aggregation_query.NonVectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2659.189           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample   209   618.775 ±  3.379  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         570.425           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         618.660           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         631.243           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         643.301           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         668.991           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         672.137           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         672.137           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         672.137           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample   181   742.235 ±  3.989  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         677.380           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         744.489           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         755.814           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         761.161           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         783.664           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         785.383           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         785.383           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         785.383           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample   180   740.400 ±  3.975  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         685.769           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         744.489           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         752.878           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         756.023           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         775.191           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         785.383           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         785.383           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         785.383           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample   185   707.284 ±  3.991  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         646.971           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         709.886           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         721.840           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         724.251           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         744.636           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         745.538           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         745.538           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         745.538           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample   180   744.751 ±  5.060  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         688.914           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         751.829           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         764.307           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         768.554           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         774.195           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         780.141           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         780.141           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         780.141           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample   155   879.173 ±  6.071  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         793.772           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         884.998           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         902.195           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         904.921           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         913.519           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         916.455           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         916.455           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         916.455           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample   120  1179.447 ± 13.926  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample        1055.916           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample        1166.017           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample        1245.708           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample        1251.895           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample        1264.142           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample        1264.583           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample        1264.583           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample        1264.583           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample    98  1533.917 ± 10.210  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1493.172           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1522.532           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1571.606           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1594.045           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1600.127           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1600.127           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1600.127           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1600.127           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample    90  1638.155 ± 20.263  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1518.338           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1626.341           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1732.457           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1745.774           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1753.219           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1753.219           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1753.219           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1753.219           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery                          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample    45  3561.151 ± 44.155  ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3401.581           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3539.993           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3701.054           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3722.445           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3770.679           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3770.679           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3770.679           ms/op
b.aggregation_query.NonVectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3770.679           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample   245   479.000 ±  0.348  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         469.238           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         478.675           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         480.248           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         481.821           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         486.015           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         487.064           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         487.064           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         487.064           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample   170   768.569 ±  0.625  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         758.120           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         768.606           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         770.703           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         771.752           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         780.476           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         786.432           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         786.432           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         786.432           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample   178   760.630 ±  0.743  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         754.975           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         760.218           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         765.460           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         765.513           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         768.606           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         768.606           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         768.606           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         768.606           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample   185   692.088 ±  2.377  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         683.672           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         691.012           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         699.400           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         701.497           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         740.274           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         746.586           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         746.586           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         746.586           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample   167   760.048 ±  0.929  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         756.023           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         760.218           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         763.363           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         768.396           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         774.898           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         774.898           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         774.898           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         774.898           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample   170   766.799 ±  1.259  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         759.169           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         765.460           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         773.849           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         776.995           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         782.101           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         784.335           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         784.335           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         784.335           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample   153   861.573 ±  2.236  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         808.452           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         860.881           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         871.367           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         872.415           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         877.658           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         877.658           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         877.658           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         877.658           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample   134  1050.165 ± 14.675  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1001.390           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1019.740           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1111.491           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1129.841           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1198.732           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1201.668           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1201.668           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1201.668           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample   105  1346.412 ± 13.170  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1256.194           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1350.566           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1376.571           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1429.629           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1469.978           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1470.104           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1470.104           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1470.104           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery                          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample    60  2835.210 ± 43.255  ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.00       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2717.909           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.50       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2791.309           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.90       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2969.567           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.95       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2985.925           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.99       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3087.008           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.999      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3087.008           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p0.9999     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3087.008           ms/op
b.aggregation_query.VectorisedNonSimd_No_Verification.executeQuery:executeQuery·p1.00       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3087.008           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample   255   465.083 ±  0.887  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         459.276           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         463.995           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         467.036           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         472.908           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         492.348           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         494.404           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         494.404           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1  sample         494.404           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample   180   762.146 ±  1.836  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         749.732           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         762.315           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         771.752           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         774.845           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         781.388           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         782.238           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         782.238           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4  sample         782.238           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample   180   758.767 ±  1.702  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         692.060           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         758.120           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         766.404           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         768.606           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         771.301           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         773.849           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         773.849           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16  sample         773.849           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample   195   681.924 ±  1.232  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         675.283           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         680.526           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         688.285           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         689.963           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         704.727           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         706.740           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         706.740           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_64  sample         706.740           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample   180   751.311 ±  2.304  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         684.720           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         749.732           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         762.315           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         767.558           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         778.337           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         788.529           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         788.529           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_256  sample         788.529           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample   180   767.138 ±  1.947  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         752.878           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         766.509           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         778.043           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         779.092           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         781.388           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         782.238           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         782.238           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_1024  sample         782.238           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample   165   836.420 ±  9.375  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         780.141           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         855.638           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         866.124           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         878.707           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         891.353           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         897.581           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         897.581           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_4096  sample         897.581           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample   127  1111.383 ±  5.422  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1068.499           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1117.782           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1130.365           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1135.818           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1171.301           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1180.697           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1180.697           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16384  sample        1180.697           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                              /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample   113  1317.271 ± 20.410  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1245.708           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1281.360           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1415.578           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1484.784           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1515.947           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1516.241           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1516.241           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_65536  sample        1516.241           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery                             /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample    60  2984.038 ± 66.743  ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.00          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2759.852           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.50          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        2965.373           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.90          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3193.543           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.95          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3248.279           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.99          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3279.946           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.999         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3279.946           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p0.9999        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3279.946           ms/op
b.aggregation_query.VectorisedSimd_No_Verification.executeQuery:executeQuery·p1.00          /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144  sample        3279.946           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1179    42.920 ±  0.097  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          41.812           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          42.533           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          44.761           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          45.023           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          45.744           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          45.863           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          45.875           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          45.875           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1113    50.966 ±  0.130  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          49.218           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          50.463           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          53.281           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          53.346           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          53.477           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          54.125           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          54.133           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          54.133           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1146    46.875 ±  0.072  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          46.006           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          46.596           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          47.383           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          48.890           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          49.152           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          49.218           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          49.218           ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          49.218           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery                                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample   986    72.593 ±  0.029  ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          72.221           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          72.483           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          72.876           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          73.007           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          73.531           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999                  /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          77.857           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999                 /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          77.857           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          77.857           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery                                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample   981    72.835 ±  0.025  ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          72.483           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          72.745           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          73.138           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          73.138           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          73.662           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999                  /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          73.925           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999                 /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          73.925           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          73.925           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery                                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample   966    72.776 ±  0.021  ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          72.483           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          72.745           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          73.007           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          73.007           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          73.662           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999                  /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          74.318           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999                 /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          74.318           ms/op
b.filter_query.NonVectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          74.318           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1422    25.214 ±  0.060  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          24.183           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          24.707           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          26.083           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          26.149           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          26.313           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                  /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          26.674           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                 /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          26.771           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          26.771           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1131    52.617 ±  0.169  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          51.446           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          51.839           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          56.164           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          56.230           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          56.361           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                  /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          56.549           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                 /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          56.558           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          56.558           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample   883    87.541 ±  0.193  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          85.590           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          86.508           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          89.522           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          91.855           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          92.144           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                  /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          92.537           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                 /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          92.537           ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                   /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          92.537           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery                                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample  1257    39.949 ±  0.029  ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          39.191           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          39.911           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          40.108           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          40.763           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          41.288           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999                     /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          42.658           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999                    /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          42.861           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/  sample          42.861           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery                                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample  1255    40.341 ±  0.041  ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          39.387           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          40.239           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          40.567           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          41.366           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          42.271           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999                     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          42.582           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999                    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          42.598           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/  sample          42.598           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery                                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample  1212    40.350 ±  0.033  ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.00                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          39.453           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.50                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          40.305           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.90                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          40.763           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.95                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          40.829           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.99                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          41.621           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.999                     /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          44.012           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p0.9999                    /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          44.040           ms/op
b.filter_query.VectorisedSimd.executeFilterQuery:executeFilterQuery·p1.00                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/  sample          44.040           ms/op

Benchmark result is saved to jmh-result.csv

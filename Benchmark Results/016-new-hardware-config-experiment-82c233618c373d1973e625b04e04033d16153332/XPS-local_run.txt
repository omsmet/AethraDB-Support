# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 04:40:00
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

337.572 ±(99.9%) 20.392 ms/op
# Warmup Iteration   2: 332.101 ±(99.9%) 4.542 ms/op
# Warmup Iteration   3: 330.978 ±(99.9%) 3.054 ms/op
# Warmup Iteration   4: 329.101 ±(99.9%) 1.072 ms/op
# Warmup Iteration   5: 328.779 ±(99.9%) 2.051 ms/op
Iteration   1: 324.433 ±(99.9%) 0.325 ms/op
                 executeQuery·p0.00:   324.010 ms/op
                 executeQuery·p0.50:   324.534 ms/op
                 executeQuery·p0.90:   324.534 ms/op
                 executeQuery·p0.95:   325.688 ms/op
                 executeQuery·p0.99:   326.631 ms/op
                 executeQuery·p0.999:  326.631 ms/op
                 executeQuery·p0.9999: 326.631 ms/op
                 executeQuery·p1.00:   326.631 ms/op

Iteration   2: 324.551 ±(99.9%) 0.188 ms/op
                 executeQuery·p0.00:   324.010 ms/op
                 executeQuery·p0.50:   324.534 ms/op
                 executeQuery·p0.90:   324.954 ms/op
                 executeQuery·p0.95:   325.268 ms/op
                 executeQuery·p0.99:   325.583 ms/op
                 executeQuery·p0.999:  325.583 ms/op
                 executeQuery·p0.9999: 325.583 ms/op
                 executeQuery·p1.00:   325.583 ms/op

Iteration   3: 324.703 ±(99.9%) 1.264 ms/op
                 executeQuery·p0.00:   323.486 ms/op
                 executeQuery·p0.50:   324.010 ms/op
                 executeQuery·p0.90:   326.422 ms/op
                 executeQuery·p0.95:   329.882 ms/op
                 executeQuery·p0.99:   333.971 ms/op
                 executeQuery·p0.999:  333.971 ms/op
                 executeQuery·p0.9999: 333.971 ms/op
                 executeQuery·p1.00:   333.971 ms/op

Iteration   4: 325.346 ±(99.9%) 1.578 ms/op
                 executeQuery·p0.00:   324.010 ms/op
                 executeQuery·p0.50:   324.534 ms/op
                 executeQuery·p0.90:   327.890 ms/op
                 executeQuery·p0.95:   333.552 ms/op
                 executeQuery·p0.99:   334.496 ms/op
                 executeQuery·p0.999:  334.496 ms/op
                 executeQuery·p0.9999: 334.496 ms/op
                 executeQuery·p1.00:   334.496 ms/op

Iteration   5: 325.126 ±(99.9%) 1.545 ms/op
                 executeQuery·p0.00:   323.486 ms/op
                 executeQuery·p0.50:   324.534 ms/op
                 executeQuery·p0.90:   328.624 ms/op
                 executeQuery·p0.95:   332.084 ms/op
                 executeQuery·p0.99:   335.544 ms/op
                 executeQuery·p0.999:  335.544 ms/op
                 executeQuery·p0.9999: 335.544 ms/op
                 executeQuery·p1.00:   335.544 ms/op


# Run progress: 0.60% complete, ETA 04:46:18
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

337.012 ±(99.9%) 48.512 ms/op
# Warmup Iteration   2: 326.784 ±(99.9%) 5.516 ms/op
# Warmup Iteration   3: 344.108 ±(99.9%) 40.108 ms/op
# Warmup Iteration   4: 353.732 ±(99.9%) 44.343 ms/op
# Warmup Iteration   5: 370.934 ±(99.9%) 61.342 ms/op
Iteration   1: 362.189 ±(99.9%) 57.926 ms/op
                 executeQuery·p0.00:   325.583 ms/op
                 executeQuery·p0.50:   327.942 ms/op
                 executeQuery·p0.90:   522.401 ms/op
                 executeQuery·p0.95:   620.442 ms/op
                 executeQuery·p0.99:   683.672 ms/op
                 executeQuery·p0.999:  683.672 ms/op
                 executeQuery·p0.9999: 683.672 ms/op
                 executeQuery·p1.00:   683.672 ms/op

Iteration   2: 327.951 ±(99.9%) 0.451 ms/op
                 executeQuery·p0.00:   327.156 ms/op
                 executeQuery·p0.50:   327.680 ms/op
                 executeQuery·p0.90:   329.148 ms/op
                 executeQuery·p0.95:   329.463 ms/op
                 executeQuery·p0.99:   329.777 ms/op
                 executeQuery·p0.999:  329.777 ms/op
                 executeQuery·p0.9999: 329.777 ms/op
                 executeQuery·p1.00:   329.777 ms/op

Iteration   3: 328.475 ±(99.9%) 0.979 ms/op
                 executeQuery·p0.00:   327.156 ms/op
                 executeQuery·p0.50:   328.204 ms/op
                 executeQuery·p0.90:   329.253 ms/op
                 executeQuery·p0.95:   332.084 ms/op
                 executeQuery·p0.99:   335.544 ms/op
                 executeQuery·p0.999:  335.544 ms/op
                 executeQuery·p0.9999: 335.544 ms/op
                 executeQuery·p1.00:   335.544 ms/op

Iteration   4: 340.403 ±(99.9%) 43.864 ms/op
                 executeQuery·p0.00:   327.156 ms/op
                 executeQuery·p0.50:   327.942 ms/op
                 executeQuery·p0.90:   332.608 ms/op
                 executeQuery·p0.95:   494.954 ms/op
                 executeQuery·p0.99:   687.866 ms/op
                 executeQuery·p0.999:  687.866 ms/op
                 executeQuery·p0.9999: 687.866 ms/op
                 executeQuery·p1.00:   687.866 ms/op

Iteration   5: 339.809 ±(99.9%) 35.899 ms/op
                 executeQuery·p0.00:   327.156 ms/op
                 executeQuery·p0.50:   327.680 ms/op
                 executeQuery·p0.90:   354.419 ms/op
                 executeQuery·p0.95:   483.603 ms/op
                 executeQuery·p0.99:   619.708 ms/op
                 executeQuery·p0.999:  619.708 ms/op
                 executeQuery·p0.9999: 619.708 ms/op
                 executeQuery·p1.00:   619.708 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 305
  mean =    331.953 ±(99.9%) 7.189 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 129 
    [325.000, 350.000) = 165 
    [350.000, 375.000) = 5 
    [375.000, 400.000) = 1 
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 0 
    [500.000, 525.000) = 1 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    323.486 ms/op
     p(50.0000) =    327.156 ms/op
     p(90.0000) =    329.253 ms/op
     p(95.0000) =    334.338 ms/op
     p(99.0000) =    615.116 ms/op
     p(99.9000) =    687.866 ms/op
     p(99.9900) =    687.866 ms/op
     p(99.9990) =    687.866 ms/op
     p(99.9999) =    687.866 ms/op
    p(100.0000) =    687.866 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 1.19% complete, ETA 04:45:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

451.913 ±(99.9%) 5.970 ms/op
# Warmup Iteration   2: 450.341 ±(99.9%) 1.670 ms/op
# Warmup Iteration   3: 450.591 ±(99.9%) 1.391 ms/op
# Warmup Iteration   4: 452.278 ±(99.9%) 4.585 ms/op
# Warmup Iteration   5: 449.360 ±(99.9%) 1.891 ms/op
Iteration   1: 448.791 ±(99.9%) 1.875 ms/op
                 executeQuery·p0.00:   447.742 ms/op
                 executeQuery·p0.50:   447.742 ms/op
                 executeQuery·p0.90:   452.356 ms/op
                 executeQuery·p0.95:   456.969 ms/op
                 executeQuery·p0.99:   457.703 ms/op
                 executeQuery·p0.999:  457.703 ms/op
                 executeQuery·p0.9999: 457.703 ms/op
                 executeQuery·p1.00:   457.703 ms/op

Iteration   2: 450.614 ±(99.9%) 1.550 ms/op
                 executeQuery·p0.00:   446.693 ms/op
                 executeQuery·p0.50:   450.363 ms/op
                 executeQuery·p0.90:   452.041 ms/op
                 executeQuery·p0.95:   457.074 ms/op
                 executeQuery·p0.99:   458.228 ms/op
                 executeQuery·p0.999:  458.228 ms/op
                 executeQuery·p0.9999: 458.228 ms/op
                 executeQuery·p1.00:   458.228 ms/op

Iteration   3: 450.637 ±(99.9%) 0.934 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   450.363 ms/op
                 executeQuery·p0.90:   452.775 ms/op
                 executeQuery·p0.95:   453.404 ms/op
                 executeQuery·p0.99:   453.509 ms/op
                 executeQuery·p0.999:  453.509 ms/op
                 executeQuery·p0.9999: 453.509 ms/op
                 executeQuery·p1.00:   453.509 ms/op

Iteration   4: 450.181 ±(99.9%) 0.539 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   449.839 ms/op
                 executeQuery·p0.90:   450.363 ms/op
                 executeQuery·p0.95:   452.461 ms/op
                 executeQuery·p0.99:   452.985 ms/op
                 executeQuery·p0.999:  452.985 ms/op
                 executeQuery·p0.9999: 452.985 ms/op
                 executeQuery·p1.00:   452.985 ms/op

Iteration   5: 450.409 ±(99.9%) 0.624 ms/op
                 executeQuery·p0.00:   448.791 ms/op
                 executeQuery·p0.50:   450.363 ms/op
                 executeQuery·p0.90:   451.517 ms/op
                 executeQuery·p0.95:   452.356 ms/op
                 executeQuery·p0.99:   452.461 ms/op
                 executeQuery·p0.999:  452.461 ms/op
                 executeQuery·p0.9999: 452.461 ms/op
                 executeQuery·p1.00:   452.461 ms/op


# Run progress: 1.79% complete, ETA 04:45:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1533385272 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1533385272() {
        this(4);
    }
    public KeyValueMap_1533385272(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1533385272 aggregation_state_map = new KeyValueMap_1533385272();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

451.161 ±(99.9%) 8.220 ms/op
# Warmup Iteration   2: 451.640 ±(99.9%) 1.932 ms/op
# Warmup Iteration   3: 452.369 ±(99.9%) 1.058 ms/op
# Warmup Iteration   4: 451.799 ±(99.9%) 1.715 ms/op
# Warmup Iteration   5: 451.549 ±(99.9%) 1.245 ms/op
Iteration   1: 450.774 ±(99.9%) 0.790 ms/op
                 executeQuery·p0.00:   449.315 ms/op
                 executeQuery·p0.50:   450.363 ms/op
                 executeQuery·p0.90:   452.461 ms/op
                 executeQuery·p0.95:   452.461 ms/op
                 executeQuery·p0.99:   452.461 ms/op
                 executeQuery·p0.999:  452.461 ms/op
                 executeQuery·p0.9999: 452.461 ms/op
                 executeQuery·p1.00:   452.461 ms/op

Iteration   2: 452.552 ±(99.9%) 2.978 ms/op
                 executeQuery·p0.00:   450.363 ms/op
                 executeQuery·p0.50:   450.888 ms/op
                 executeQuery·p0.90:   460.325 ms/op
                 executeQuery·p0.95:   463.051 ms/op
                 executeQuery·p0.99:   463.471 ms/op
                 executeQuery·p0.999:  463.471 ms/op
                 executeQuery·p0.9999: 463.471 ms/op
                 executeQuery·p1.00:   463.471 ms/op

Iteration   3: 453.962 ±(99.9%) 2.854 ms/op
                 executeQuery·p0.00:   449.839 ms/op
                 executeQuery·p0.50:   452.985 ms/op
                 executeQuery·p0.90:   460.168 ms/op
                 executeQuery·p0.95:   462.999 ms/op
                 executeQuery·p0.99:   463.471 ms/op
                 executeQuery·p0.999:  463.471 ms/op
                 executeQuery·p0.9999: 463.471 ms/op
                 executeQuery·p1.00:   463.471 ms/op

Iteration   4: 453.464 ±(99.9%) 3.056 ms/op
                 executeQuery·p0.00:   450.363 ms/op
                 executeQuery·p0.50:   452.461 ms/op
                 executeQuery·p0.90:   462.527 ms/op
                 executeQuery·p0.95:   463.366 ms/op
                 executeQuery·p0.99:   463.471 ms/op
                 executeQuery·p0.999:  463.471 ms/op
                 executeQuery·p0.9999: 463.471 ms/op
                 executeQuery·p1.00:   463.471 ms/op

Iteration   5: 453.652 ±(99.9%) 3.087 ms/op
                 executeQuery·p0.00:   450.363 ms/op
                 executeQuery·p0.50:   452.723 ms/op
                 executeQuery·p0.90:   462.474 ms/op
                 executeQuery·p0.95:   463.392 ms/op
                 executeQuery·p0.99:   463.471 ms/op
                 executeQuery·p0.999:  463.471 ms/op
                 executeQuery·p0.9999: 463.471 ms/op
                 executeQuery·p1.00:   463.471 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 228
  mean =    451.483 ±(99.9%) 0.674 ms/op

  Histogram, ms/op:
    [440.000, 442.500) = 0 
    [442.500, 445.000) = 0 
    [445.000, 447.500) = 1 
    [447.500, 450.000) = 66 
    [450.000, 452.500) = 117 
    [452.500, 455.000) = 26 
    [455.000, 457.500) = 3 
    [457.500, 460.000) = 5 
    [460.000, 462.500) = 4 
    [462.500, 465.000) = 6 
    [465.000, 467.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    446.693 ms/op
     p(50.0000) =    450.363 ms/op
     p(90.0000) =    453.509 ms/op
     p(95.0000) =    459.329 ms/op
     p(99.0000) =    463.471 ms/op
     p(99.9000) =    463.471 ms/op
     p(99.9900) =    463.471 ms/op
     p(99.9990) =    463.471 ms/op
     p(99.9999) =    463.471 ms/op
    p(100.0000) =    463.471 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 2.38% complete, ETA 04:44:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

673.256 ±(99.9%) 34.289 ms/op
# Warmup Iteration   2: 658.925 ±(99.9%) 7.361 ms/op
# Warmup Iteration   3: 641.139 ±(99.9%) 6.930 ms/op
# Warmup Iteration   4: 640.483 ±(99.9%) 4.414 ms/op
# Warmup Iteration   5: 644.809 ±(99.9%) 5.957 ms/op
Iteration   1: 644.415 ±(99.9%) 7.178 ms/op
                 executeQuery·p0.00:   631.243 ms/op
                 executeQuery·p0.50:   645.399 ms/op
                 executeQuery·p0.90:   653.263 ms/op
                 executeQuery·p0.95:   653.263 ms/op
                 executeQuery·p0.99:   653.263 ms/op
                 executeQuery·p0.999:  653.263 ms/op
                 executeQuery·p0.9999: 653.263 ms/op
                 executeQuery·p1.00:   653.263 ms/op

Iteration   2: 644.612 ±(99.9%) 4.367 ms/op
                 executeQuery·p0.00:   636.486 ms/op
                 executeQuery·p0.50:   644.874 ms/op
                 executeQuery·p0.90:   650.432 ms/op
                 executeQuery·p0.95:   651.166 ms/op
                 executeQuery·p0.99:   651.166 ms/op
                 executeQuery·p0.999:  651.166 ms/op
                 executeQuery·p0.9999: 651.166 ms/op
                 executeQuery·p1.00:   651.166 ms/op

Iteration   3: 638.845 ±(99.9%) 4.297 ms/op
                 executeQuery·p0.00:   631.243 ms/op
                 executeQuery·p0.50:   639.631 ms/op
                 executeQuery·p0.90:   643.092 ms/op
                 executeQuery·p0.95:   643.826 ms/op
                 executeQuery·p0.99:   643.826 ms/op
                 executeQuery·p0.999:  643.826 ms/op
                 executeQuery·p0.9999: 643.826 ms/op
                 executeQuery·p1.00:   643.826 ms/op

Iteration   4: 643.957 ±(99.9%) 5.021 ms/op
                 executeQuery·p0.00:   636.486 ms/op
                 executeQuery·p0.50:   644.350 ms/op
                 executeQuery·p0.90:   651.795 ms/op
                 executeQuery·p0.95:   653.263 ms/op
                 executeQuery·p0.99:   653.263 ms/op
                 executeQuery·p0.999:  653.263 ms/op
                 executeQuery·p0.9999: 653.263 ms/op
                 executeQuery·p1.00:   653.263 ms/op

Iteration   5: 643.170 ±(99.9%) 5.566 ms/op
                 executeQuery·p0.00:   636.486 ms/op
                 executeQuery·p0.50:   640.680 ms/op
                 executeQuery·p0.90:   651.480 ms/op
                 executeQuery·p0.95:   652.214 ms/op
                 executeQuery·p0.99:   652.214 ms/op
                 executeQuery·p0.999:  652.214 ms/op
                 executeQuery·p0.9999: 652.214 ms/op
                 executeQuery·p1.00:   652.214 ms/op


# Run progress: 2.98% complete, ETA 04:43:02
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

646.775 ±(99.9%) 12.156 ms/op
# Warmup Iteration   2: 654.705 ±(99.9%) 4.068 ms/op
# Warmup Iteration   3: 661.791 ±(99.9%) 6.830 ms/op
# Warmup Iteration   4: 666.545 ±(99.9%) 6.017 ms/op
# Warmup Iteration   5: 658.768 ±(99.9%) 6.133 ms/op
Iteration   1: 660.743 ±(99.9%) 7.075 ms/op
                 executeQuery·p0.00:   649.069 ms/op
                 executeQuery·p0.50:   662.700 ms/op
                 executeQuery·p0.90:   667.943 ms/op
                 executeQuery·p0.95:   667.943 ms/op
                 executeQuery·p0.99:   667.943 ms/op
                 executeQuery·p0.999:  667.943 ms/op
                 executeQuery·p0.9999: 667.943 ms/op
                 executeQuery·p1.00:   667.943 ms/op

Iteration   2: 657.457 ±(99.9%) 6.547 ms/op
                 executeQuery·p0.00:   648.020 ms/op
                 executeQuery·p0.50:   657.981 ms/op
                 executeQuery·p0.90:   665.426 ms/op
                 executeQuery·p0.95:   666.894 ms/op
                 executeQuery·p0.99:   666.894 ms/op
                 executeQuery·p0.999:  666.894 ms/op
                 executeQuery·p0.9999: 666.894 ms/op
                 executeQuery·p1.00:   666.894 ms/op

Iteration   3: 659.624 ±(99.9%) 7.146 ms/op
                 executeQuery·p0.00:   648.020 ms/op
                 executeQuery·p0.50:   663.749 ms/op
                 executeQuery·p0.90:   667.733 ms/op
                 executeQuery·p0.95:   668.991 ms/op
                 executeQuery·p0.99:   668.991 ms/op
                 executeQuery·p0.999:  668.991 ms/op
                 executeQuery·p0.9999: 668.991 ms/op
                 executeQuery·p1.00:   668.991 ms/op

Iteration   4: 663.958 ±(99.9%) 7.450 ms/op
                 executeQuery·p0.00:   650.117 ms/op
                 executeQuery·p0.50:   666.894 ms/op
                 executeQuery·p0.90:   671.928 ms/op
                 executeQuery·p0.95:   673.186 ms/op
                 executeQuery·p0.99:   673.186 ms/op
                 executeQuery·p0.999:  673.186 ms/op
                 executeQuery·p0.9999: 673.186 ms/op
                 executeQuery·p1.00:   673.186 ms/op

Iteration   5: 667.104 ±(99.9%) 2.686 ms/op
                 executeQuery·p0.00:   662.700 ms/op
                 executeQuery·p0.50:   666.894 ms/op
                 executeQuery·p0.90:   671.089 ms/op
                 executeQuery·p0.95:   671.089 ms/op
                 executeQuery·p0.99:   671.089 ms/op
                 executeQuery·p0.999:  671.089 ms/op
                 executeQuery·p0.9999: 671.089 ms/op
                 executeQuery·p1.00:   671.089 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 156
  mean =    652.120 ±(99.9%) 3.023 ms/op

  Histogram, ms/op:
    [630.000, 635.000) = 6 
    [635.000, 640.000) = 21 
    [640.000, 645.000) = 27 
    [645.000, 650.000) = 18 
    [650.000, 655.000) = 26 
    [655.000, 660.000) = 7 
    [660.000, 665.000) = 23 
    [665.000, 670.000) = 22 
    [670.000, 675.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =    631.243 ms/op
     p(50.0000) =    650.117 ms/op
     p(90.0000) =    667.209 ms/op
     p(95.0000) =    668.991 ms/op
     p(99.0000) =    671.990 ms/op
     p(99.9000) =    673.186 ms/op
     p(99.9900) =    673.186 ms/op
     p(99.9990) =    673.186 ms/op
     p(99.9999) =    673.186 ms/op
    p(100.0000) =    673.186 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 3.57% complete, ETA 04:41:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1533385272 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1533385272() {
        this(4);
    }
    public KeyValueMap_1533385272(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1533385272 aggregation_state_map = new KeyValueMap_1533385272();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1056.965 ms/op
# Warmup Iteration   2: 948.961 ms/op
# Warmup Iteration   3: 913.834 ms/op
# Warmup Iteration   4: 907.543 ms/op
# Warmup Iteration   5: 901.775 ms/op
Iteration   1: 909.640 ms/op
                 executeQuery·p0.00:   903.873 ms/op
                 executeQuery·p0.50:   909.640 ms/op
                 executeQuery·p0.90:   915.407 ms/op
                 executeQuery·p0.95:   915.407 ms/op
                 executeQuery·p0.99:   915.407 ms/op
                 executeQuery·p0.999:  915.407 ms/op
                 executeQuery·p0.9999: 915.407 ms/op
                 executeQuery·p1.00:   915.407 ms/op

Iteration   2: 770.179 ms/op
                 executeQuery·p0.00:   769.655 ms/op
                 executeQuery·p0.50:   770.179 ms/op
                 executeQuery·p0.90:   770.703 ms/op
                 executeQuery·p0.95:   770.703 ms/op
                 executeQuery·p0.99:   770.703 ms/op
                 executeQuery·p0.999:  770.703 ms/op
                 executeQuery·p0.9999: 770.703 ms/op
                 executeQuery·p1.00:   770.703 ms/op

Iteration   3: 926.417 ms/op
                 executeQuery·p0.00:   922.747 ms/op
                 executeQuery·p0.50:   926.417 ms/op
                 executeQuery·p0.90:   930.087 ms/op
                 executeQuery·p0.95:   930.087 ms/op
                 executeQuery·p0.99:   930.087 ms/op
                 executeQuery·p0.999:  930.087 ms/op
                 executeQuery·p0.9999: 930.087 ms/op
                 executeQuery·p1.00:   930.087 ms/op

Iteration   4: 844.104 ms/op
                 executeQuery·p0.00:   766.509 ms/op
                 executeQuery·p0.50:   844.104 ms/op
                 executeQuery·p0.90:   921.698 ms/op
                 executeQuery·p0.95:   921.698 ms/op
                 executeQuery·p0.99:   921.698 ms/op
                 executeQuery·p0.999:  921.698 ms/op
                 executeQuery·p0.9999: 921.698 ms/op
                 executeQuery·p1.00:   921.698 ms/op

Iteration   5: 844.104 ms/op
                 executeQuery·p0.00:   765.460 ms/op
                 executeQuery·p0.50:   844.104 ms/op
                 executeQuery·p0.90:   922.747 ms/op
                 executeQuery·p0.95:   922.747 ms/op
                 executeQuery·p0.99:   922.747 ms/op
                 executeQuery·p0.999:  922.747 ms/op
                 executeQuery·p0.9999: 922.747 ms/op
                 executeQuery·p1.00:   922.747 ms/op


# Run progress: 4.17% complete, ETA 04:59:34
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

992.477 ms/op
# Warmup Iteration   2: 924.844 ms/op
# Warmup Iteration   3: 947.388 ms/op
# Warmup Iteration   4: 993.001 ms/op
# Warmup Iteration   5: 956.826 ms/op
Iteration   1: 992.477 ms/op
                 executeQuery·p0.00:   989.856 ms/op
                 executeQuery·p0.50:   992.477 ms/op
                 executeQuery·p0.90:   995.099 ms/op
                 executeQuery·p0.95:   995.099 ms/op
                 executeQuery·p0.99:   995.099 ms/op
                 executeQuery·p0.999:  995.099 ms/op
                 executeQuery·p0.9999: 995.099 ms/op
                 executeQuery·p1.00:   995.099 ms/op

Iteration   2: 955.777 ms/op
                 executeQuery·p0.00:   947.913 ms/op
                 executeQuery·p0.50:   955.777 ms/op
                 executeQuery·p0.90:   963.641 ms/op
                 executeQuery·p0.95:   963.641 ms/op
                 executeQuery·p0.99:   963.641 ms/op
                 executeQuery·p0.999:  963.641 ms/op
                 executeQuery·p0.9999: 963.641 ms/op
                 executeQuery·p1.00:   963.641 ms/op

Iteration   3: 943.194 ms/op
                 executeQuery·p0.00:   941.621 ms/op
                 executeQuery·p0.50:   943.194 ms/op
                 executeQuery·p0.90:   944.767 ms/op
                 executeQuery·p0.95:   944.767 ms/op
                 executeQuery·p0.99:   944.767 ms/op
                 executeQuery·p0.999:  944.767 ms/op
                 executeQuery·p0.9999: 944.767 ms/op
                 executeQuery·p1.00:   944.767 ms/op

Iteration   4: 823.132 ms/op
                 executeQuery·p0.00:   747.635 ms/op
                 executeQuery·p0.50:   823.132 ms/op
                 executeQuery·p0.90:   898.630 ms/op
                 executeQuery·p0.95:   898.630 ms/op
                 executeQuery·p0.99:   898.630 ms/op
                 executeQuery·p0.999:  898.630 ms/op
                 executeQuery·p0.9999: 898.630 ms/op
                 executeQuery·p1.00:   898.630 ms/op

Iteration   5: 916.455 ms/op
                 executeQuery·p0.00:   904.921 ms/op
                 executeQuery·p0.50:   916.455 ms/op
                 executeQuery·p0.90:   927.990 ms/op
                 executeQuery·p0.95:   927.990 ms/op
                 executeQuery·p0.99:   927.990 ms/op
                 executeQuery·p0.999:  927.990 ms/op
                 executeQuery·p0.9999: 927.990 ms/op
                 executeQuery·p1.00:   927.990 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =    892.548 ±(99.9%) 69.698 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 4 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 1 
    [ 900.000,  925.000) = 6 
    [ 925.000,  950.000) = 5 
    [ 950.000,  975.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    747.635 ms/op
     p(50.0000) =    922.223 ms/op
     p(90.0000) =    987.234 ms/op
     p(95.0000) =    994.836 ms/op
     p(99.0000) =    995.099 ms/op
     p(99.9000) =    995.099 ms/op
     p(99.9900) =    995.099 ms/op
     p(99.9990) =    995.099 ms/op
     p(99.9999) =    995.099 ms/op
    p(100.0000) =    995.099 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 4.76% complete, ETA 05:17:58
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2881.487 ms/op
# Warmup Iteration   2: 2474.639 ms/op
# Warmup Iteration   3: 2625.634 ms/op
# Warmup Iteration   4: 2516.582 ms/op
# Warmup Iteration   5: 2558.525 ms/op
Iteration   1: 2533.360 ms/op
                 executeQuery·p0.00:   2533.360 ms/op
                 executeQuery·p0.50:   2533.360 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op

Iteration   2: 2503.999 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2503.999 ms/op
                 executeQuery·p0.90:   2503.999 ms/op
                 executeQuery·p0.95:   2503.999 ms/op
                 executeQuery·p0.99:   2503.999 ms/op
                 executeQuery·p0.999:  2503.999 ms/op
                 executeQuery·p0.9999: 2503.999 ms/op
                 executeQuery·p1.00:   2503.999 ms/op

Iteration   3: 2483.028 ms/op
                 executeQuery·p0.00:   2483.028 ms/op
                 executeQuery·p0.50:   2483.028 ms/op
                 executeQuery·p0.90:   2483.028 ms/op
                 executeQuery·p0.95:   2483.028 ms/op
                 executeQuery·p0.99:   2483.028 ms/op
                 executeQuery·p0.999:  2483.028 ms/op
                 executeQuery·p0.9999: 2483.028 ms/op
                 executeQuery·p1.00:   2483.028 ms/op

Iteration   4: 2537.554 ms/op
                 executeQuery·p0.00:   2537.554 ms/op
                 executeQuery·p0.50:   2537.554 ms/op
                 executeQuery·p0.90:   2537.554 ms/op
                 executeQuery·p0.95:   2537.554 ms/op
                 executeQuery·p0.99:   2537.554 ms/op
                 executeQuery·p0.999:  2537.554 ms/op
                 executeQuery·p0.9999: 2537.554 ms/op
                 executeQuery·p1.00:   2537.554 ms/op

Iteration   5: 2323.644 ms/op
                 executeQuery·p0.00:   2323.644 ms/op
                 executeQuery·p0.50:   2323.644 ms/op
                 executeQuery·p0.90:   2323.644 ms/op
                 executeQuery·p0.95:   2323.644 ms/op
                 executeQuery·p0.99:   2323.644 ms/op
                 executeQuery·p0.999:  2323.644 ms/op
                 executeQuery·p0.9999: 2323.644 ms/op
                 executeQuery·p1.00:   2323.644 ms/op


# Run progress: 5.36% complete, ETA 06:14:26
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2713.715 ms/op
# Warmup Iteration   2: 2503.999 ms/op
# Warmup Iteration   3: 2529.165 ms/op
# Warmup Iteration   4: 2390.753 ms/op
# Warmup Iteration   5: 2340.422 ms/op
Iteration   1: 2336.227 ms/op
                 executeQuery·p0.00:   2336.227 ms/op
                 executeQuery·p0.50:   2336.227 ms/op
                 executeQuery·p0.90:   2336.227 ms/op
                 executeQuery·p0.95:   2336.227 ms/op
                 executeQuery·p0.99:   2336.227 ms/op
                 executeQuery·p0.999:  2336.227 ms/op
                 executeQuery·p0.9999: 2336.227 ms/op
                 executeQuery·p1.00:   2336.227 ms/op

Iteration   2: 2503.999 ms/op
                 executeQuery·p0.00:   2503.999 ms/op
                 executeQuery·p0.50:   2503.999 ms/op
                 executeQuery·p0.90:   2503.999 ms/op
                 executeQuery·p0.95:   2503.999 ms/op
                 executeQuery·p0.99:   2503.999 ms/op
                 executeQuery·p0.999:  2503.999 ms/op
                 executeQuery·p0.9999: 2503.999 ms/op
                 executeQuery·p1.00:   2503.999 ms/op

Iteration   3: 2428.502 ms/op
                 executeQuery·p0.00:   2428.502 ms/op
                 executeQuery·p0.50:   2428.502 ms/op
                 executeQuery·p0.90:   2428.502 ms/op
                 executeQuery·p0.95:   2428.502 ms/op
                 executeQuery·p0.99:   2428.502 ms/op
                 executeQuery·p0.999:  2428.502 ms/op
                 executeQuery·p0.9999: 2428.502 ms/op
                 executeQuery·p1.00:   2428.502 ms/op

Iteration   4: 2348.810 ms/op
                 executeQuery·p0.00:   2348.810 ms/op
                 executeQuery·p0.50:   2348.810 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   5: 2332.033 ms/op
                 executeQuery·p0.00:   2332.033 ms/op
                 executeQuery·p0.50:   2332.033 ms/op
                 executeQuery·p0.90:   2332.033 ms/op
                 executeQuery·p0.95:   2332.033 ms/op
                 executeQuery·p0.99:   2332.033 ms/op
                 executeQuery·p0.999:  2332.033 ms/op
                 executeQuery·p0.9999: 2332.033 ms/op
                 executeQuery·p1.00:   2332.033 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   2433.116 ±(99.9%) 135.426 ms/op

  Histogram, ms/op:
    [2300.000, 2325.000) = 1 
    [2325.000, 2350.000) = 3 
    [2350.000, 2375.000) = 0 
    [2375.000, 2400.000) = 0 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 1 
    [2450.000, 2475.000) = 0 
    [2475.000, 2500.000) = 1 
    [2500.000, 2525.000) = 2 
    [2525.000, 2550.000) = 2 
    [2550.000, 2575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2323.644 ms/op
     p(50.0000) =   2455.765 ms/op
     p(90.0000) =   2537.134 ms/op
     p(95.0000) =   2537.554 ms/op
     p(99.0000) =   2537.554 ms/op
     p(99.9000) =   2537.554 ms/op
     p(99.9900) =   2537.554 ms/op
     p(99.9990) =   2537.554 ms/op
     p(99.9999) =   2537.554 ms/op
    p(100.0000) =   2537.554 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 5.95% complete, ETA 07:01:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3407.173 ±(99.9%) 7279.569 ms/op
# Warmup Iteration   2: 3225.420 ±(99.9%) 199.170 ms/op
# Warmup Iteration   3: 3244.294 ±(99.9%) 15.648 ms/op
# Warmup Iteration   4: 3255.828 ±(99.9%) 140.617 ms/op
# Warmup Iteration   5: 3252.683 ±(99.9%) 154.117 ms/op
Iteration   1: 3242.197 ±(99.9%) 22.130 ms/op
                 executeQuery·p0.00:   3238.003 ms/op
                 executeQuery·p0.50:   3242.197 ms/op
                 executeQuery·p0.90:   3246.391 ms/op
                 executeQuery·p0.95:   3246.391 ms/op
                 executeQuery·p0.99:   3246.391 ms/op
                 executeQuery·p0.999:  3246.391 ms/op
                 executeQuery·p0.9999: 3246.391 ms/op
                 executeQuery·p1.00:   3246.391 ms/op

Iteration   2: 3266.314 ±(99.9%) 293.900 ms/op
                 executeQuery·p0.00:   3242.197 ms/op
                 executeQuery·p0.50:   3244.294 ms/op
                 executeQuery·p0.90:   3334.472 ms/op
                 executeQuery·p0.95:   3334.472 ms/op
                 executeQuery·p0.99:   3334.472 ms/op
                 executeQuery·p0.999:  3334.472 ms/op
                 executeQuery·p0.9999: 3334.472 ms/op
                 executeQuery·p1.00:   3334.472 ms/op

Iteration   3: 3243.246 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3242.197 ms/op
                 executeQuery·p0.50:   3242.197 ms/op
                 executeQuery·p0.90:   3246.391 ms/op
                 executeQuery·p0.95:   3246.391 ms/op
                 executeQuery·p0.99:   3246.391 ms/op
                 executeQuery·p0.999:  3246.391 ms/op
                 executeQuery·p0.9999: 3246.391 ms/op
                 executeQuery·p1.00:   3246.391 ms/op

Iteration   4: 3240.100 ±(99.9%) 15.648 ms/op
                 executeQuery·p0.00:   3238.003 ms/op
                 executeQuery·p0.50:   3240.100 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op

Iteration   5: 3243.246 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   3242.197 ms/op
                 executeQuery·p0.50:   3242.197 ms/op
                 executeQuery·p0.90:   3246.391 ms/op
                 executeQuery·p0.95:   3246.391 ms/op
                 executeQuery·p0.99:   3246.391 ms/op
                 executeQuery·p0.999:  3246.391 ms/op
                 executeQuery·p0.9999: 3246.391 ms/op
                 executeQuery·p1.00:   3246.391 ms/op


# Run progress: 6.55% complete, ETA 06:51:24
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2867.331 ±(99.9%) 5342.257 ms/op
# Warmup Iteration   2: 3298.820 ±(99.9%) 344.617 ms/op
# Warmup Iteration   3: 3233.808 ±(99.9%) 38.330 ms/op
# Warmup Iteration   4: 3250.586 ±(99.9%) 199.170 ms/op
# Warmup Iteration   5: 3233.808 ±(99.9%) 22.130 ms/op
Iteration   1: 3231.711 ±(99.9%) 15.648 ms/op
                 executeQuery·p0.00:   3229.614 ms/op
                 executeQuery·p0.50:   3231.711 ms/op
                 executeQuery·p0.90:   3233.808 ms/op
                 executeQuery·p0.95:   3233.808 ms/op
                 executeQuery·p0.99:   3233.808 ms/op
                 executeQuery·p0.999:  3233.808 ms/op
                 executeQuery·p0.9999: 3233.808 ms/op
                 executeQuery·p1.00:   3233.808 ms/op

Iteration   2: 3246.391 ±(99.9%) 162.621 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3233.808 ms/op
                 executeQuery·p0.90:   3284.140 ms/op
                 executeQuery·p0.95:   3284.140 ms/op
                 executeQuery·p0.99:   3284.140 ms/op
                 executeQuery·p0.999:  3284.140 ms/op
                 executeQuery·p0.9999: 3284.140 ms/op
                 executeQuery·p1.00:   3284.140 ms/op

Iteration   3: 3248.488 ±(99.9%) 191.011 ms/op
                 executeQuery·p0.00:   3229.614 ms/op
                 executeQuery·p0.50:   3235.906 ms/op
                 executeQuery·p0.90:   3292.529 ms/op
                 executeQuery·p0.95:   3292.529 ms/op
                 executeQuery·p0.99:   3292.529 ms/op
                 executeQuery·p0.999:  3292.529 ms/op
                 executeQuery·p0.9999: 3292.529 ms/op
                 executeQuery·p1.00:   3292.529 ms/op

Iteration   4: 3235.906 ±(99.9%) 27.104 ms/op
                 executeQuery·p0.00:   3233.808 ms/op
                 executeQuery·p0.50:   3233.808 ms/op
                 executeQuery·p0.90:   3242.197 ms/op
                 executeQuery·p0.95:   3242.197 ms/op
                 executeQuery·p0.99:   3242.197 ms/op
                 executeQuery·p0.999:  3242.197 ms/op
                 executeQuery·p0.9999: 3242.197 ms/op
                 executeQuery·p1.00:   3242.197 ms/op

Iteration   5: 3233.808 ±(99.9%) 22.130 ms/op
                 executeQuery·p0.00:   3229.614 ms/op
                 executeQuery·p0.50:   3233.808 ms/op
                 executeQuery·p0.90:   3238.003 ms/op
                 executeQuery·p0.95:   3238.003 ms/op
                 executeQuery·p0.99:   3238.003 ms/op
                 executeQuery·p0.999:  3238.003 ms/op
                 executeQuery·p0.9999: 3238.003 ms/op
                 executeQuery·p1.00:   3238.003 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 40
  mean =   3243.141 ±(99.9%) 10.787 ms/op

  Histogram, ms/op:
    [3200.000, 3212.500) = 0 
    [3212.500, 3225.000) = 0 
    [3225.000, 3237.500) = 15 
    [3237.500, 3250.000) = 22 
    [3250.000, 3262.500) = 0 
    [3262.500, 3275.000) = 0 
    [3275.000, 3287.500) = 1 
    [3287.500, 3300.000) = 1 
    [3300.000, 3312.500) = 0 
    [3312.500, 3325.000) = 0 
    [3325.000, 3337.500) = 1 
    [3337.500, 3350.000) = 0 
    [3350.000, 3362.500) = 0 
    [3362.500, 3375.000) = 0 
    [3375.000, 3387.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3229.614 ms/op
     p(50.0000) =   3240.100 ms/op
     p(90.0000) =   3246.391 ms/op
     p(95.0000) =   3292.109 ms/op
     p(99.0000) =   3334.472 ms/op
     p(99.9000) =   3334.472 ms/op
     p(99.9900) =   3334.472 ms/op
     p(99.9990) =   3334.472 ms/op
     p(99.9999) =   3334.472 ms/op
    p(100.0000) =   3334.472 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 7.14% complete, ETA 06:42:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4136.982 ±(99.9%) 6377.510 ms/op
# Warmup Iteration   2: 4260.015 ±(99.9%) 542.877 ms/op
# Warmup Iteration   3: 4272.598 ±(99.9%) 233.772 ms/op
# Warmup Iteration   4: 4269.801 ±(99.9%) 265.072 ms/op
# Warmup Iteration   5: 4740.962 ±(99.9%) 14425.608 ms/op
Iteration   1: 4282.384 ±(99.9%) 465.451 ms/op
                 executeQuery·p0.00:   4265.607 ms/op
                 executeQuery·p0.50:   4269.801 ms/op
                 executeQuery·p0.90:   4311.745 ms/op
                 executeQuery·p0.95:   4311.745 ms/op
                 executeQuery·p0.99:   4311.745 ms/op
                 executeQuery·p0.999:  4311.745 ms/op
                 executeQuery·p0.9999: 4311.745 ms/op
                 executeQuery·p1.00:   4311.745 ms/op

Iteration   2: 4261.413 ±(99.9%) 275.896 ms/op
                 executeQuery·p0.00:   4244.636 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4273.996 ms/op
                 executeQuery·p0.95:   4273.996 ms/op
                 executeQuery·p0.99:   4273.996 ms/op
                 executeQuery·p0.999:  4273.996 ms/op
                 executeQuery·p0.9999: 4273.996 ms/op
                 executeQuery·p1.00:   4273.996 ms/op

Iteration   3: 4262.811 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   4253.024 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4269.801 ms/op
                 executeQuery·p0.95:   4269.801 ms/op
                 executeQuery·p0.99:   4269.801 ms/op
                 executeQuery·p0.999:  4269.801 ms/op
                 executeQuery·p0.9999: 4269.801 ms/op
                 executeQuery·p1.00:   4269.801 ms/op

Iteration   4: 4285.181 ±(99.9%) 448.365 ms/op
                 executeQuery·p0.00:   4257.219 ms/op
                 executeQuery·p0.50:   4294.967 ms/op
                 executeQuery·p0.90:   4303.356 ms/op
                 executeQuery·p0.95:   4303.356 ms/op
                 executeQuery·p0.99:   4303.356 ms/op
                 executeQuery·p0.999:  4303.356 ms/op
                 executeQuery·p0.9999: 4303.356 ms/op
                 executeQuery·p1.00:   4303.356 ms/op

Iteration   5: 4267.005 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   4265.607 ms/op
                 executeQuery·p0.50:   4265.607 ms/op
                 executeQuery·p0.90:   4269.801 ms/op
                 executeQuery·p0.95:   4269.801 ms/op
                 executeQuery·p0.99:   4269.801 ms/op
                 executeQuery·p0.999:  4269.801 ms/op
                 executeQuery·p0.9999: 4269.801 ms/op
                 executeQuery·p1.00:   4269.801 ms/op


# Run progress: 7.74% complete, ETA 06:35:22
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_996334896 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_996334896() {
        this(4);
    }
    public KeyValueMap_996334896(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_996334896 aggregation_state_map = new KeyValueMap_996334896();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4054.494 ±(99.9%) 8416.242 ms/op
# Warmup Iteration   2: 4226.460 ±(99.9%) 268.728 ms/op
# Warmup Iteration   3: 4239.043 ±(99.9%) 268.728 ms/op
# Warmup Iteration   4: 4243.238 ±(99.9%) 637.154 ms/op
# Warmup Iteration   5: 4230.655 ±(99.9%) 44.179 ms/op
Iteration   1: 4239.043 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   4223.664 ms/op
                 executeQuery·p0.50:   4227.858 ms/op
                 executeQuery·p0.90:   4265.607 ms/op
                 executeQuery·p0.95:   4265.607 ms/op
                 executeQuery·p0.99:   4265.607 ms/op
                 executeQuery·p0.999:  4265.607 ms/op
                 executeQuery·p0.9999: 4265.607 ms/op
                 executeQuery·p1.00:   4265.607 ms/op

Iteration   2: 5796.528 ms/op
                 executeQuery·p0.00:   4261.413 ms/op
                 executeQuery·p0.50:   5796.528 ms/op
                 executeQuery·p0.90:   7331.643 ms/op
                 executeQuery·p0.95:   7331.643 ms/op
                 executeQuery·p0.99:   7331.643 ms/op
                 executeQuery·p0.999:  7331.643 ms/op
                 executeQuery·p0.9999: 7331.643 ms/op
                 executeQuery·p1.00:   7331.643 ms/op

Iteration   3: 4286.579 ±(99.9%) 551.792 ms/op
                 executeQuery·p0.00:   4261.413 ms/op
                 executeQuery·p0.50:   4278.190 ms/op
                 executeQuery·p0.90:   4320.133 ms/op
                 executeQuery·p0.95:   4320.133 ms/op
                 executeQuery·p0.99:   4320.133 ms/op
                 executeQuery·p0.999:  4320.133 ms/op
                 executeQuery·p0.9999: 4320.133 ms/op
                 executeQuery·p1.00:   4320.133 ms/op

Iteration   4: 4246.034 ±(99.9%) 392.669 ms/op
                 executeQuery·p0.00:   4227.858 ms/op
                 executeQuery·p0.50:   4240.441 ms/op
                 executeQuery·p0.90:   4269.801 ms/op
                 executeQuery·p0.95:   4269.801 ms/op
                 executeQuery·p0.99:   4269.801 ms/op
                 executeQuery·p0.999:  4269.801 ms/op
                 executeQuery·p0.9999: 4269.801 ms/op
                 executeQuery·p1.00:   4269.801 ms/op

Iteration   5: 4251.626 ±(99.9%) 318.577 ms/op
                 executeQuery·p0.00:   4232.053 ms/op
                 executeQuery·p0.50:   4257.219 ms/op
                 executeQuery·p0.90:   4265.607 ms/op
                 executeQuery·p0.95:   4265.607 ms/op
                 executeQuery·p0.99:   4265.607 ms/op
                 executeQuery·p0.999:  4265.607 ms/op
                 executeQuery·p0.9999: 4265.607 ms/op
                 executeQuery·p1.00:   4265.607 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 29
  mean =   4370.320 ±(99.9%) 388.874 ms/op

  Histogram, ms/op:
    [4000.000, 4250.000) = 6 
    [4250.000, 4500.000) = 22 
    [4500.000, 4750.000) = 0 
    [4750.000, 5000.000) = 0 
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 0 
    [5750.000, 6000.000) = 0 
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 0 
    [6750.000, 7000.000) = 0 
    [7000.000, 7250.000) = 0 
    [7250.000, 7500.000) = 1 
    [7500.000, 7750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4223.664 ms/op
     p(50.0000) =   4265.607 ms/op
     p(90.0000) =   4311.745 ms/op
     p(95.0000) =   5825.888 ms/op
     p(99.0000) =   7331.643 ms/op
     p(99.9000) =   7331.643 ms/op
     p(99.9900) =   7331.643 ms/op
     p(99.9990) =   7331.643 ms/op
     p(99.9999) =   7331.643 ms/op
    p(100.0000) =   7331.643 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 8.33% complete, ETA 06:28:02
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6698.303 ms/op
# Warmup Iteration   2: 7071.597 ms/op
# Warmup Iteration   3: 7482.638 ms/op
# Warmup Iteration   4: 6924.796 ms/op
# Warmup Iteration   5: 6425.674 ms/op
Iteration   1: 6937.379 ms/op
                 executeQuery·p0.00:   6903.824 ms/op
                 executeQuery·p0.50:   6937.379 ms/op
                 executeQuery·p0.90:   6970.933 ms/op
                 executeQuery·p0.95:   6970.933 ms/op
                 executeQuery·p0.99:   6970.933 ms/op
                 executeQuery·p0.999:  6970.933 ms/op
                 executeQuery·p0.9999: 6970.933 ms/op
                 executeQuery·p1.00:   6970.933 ms/op

Iteration   2: 7591.690 ms/op
                 executeQuery·p0.00:   7348.421 ms/op
                 executeQuery·p0.50:   7591.690 ms/op
                 executeQuery·p0.90:   7834.960 ms/op
                 executeQuery·p0.95:   7834.960 ms/op
                 executeQuery·p0.99:   7834.960 ms/op
                 executeQuery·p0.999:  7834.960 ms/op
                 executeQuery·p0.9999: 7834.960 ms/op
                 executeQuery·p1.00:   7834.960 ms/op

Iteration   3: 7243.563 ms/op
                 executeQuery·p0.00:   7071.597 ms/op
                 executeQuery·p0.50:   7243.563 ms/op
                 executeQuery·p0.90:   7415.529 ms/op
                 executeQuery·p0.95:   7415.529 ms/op
                 executeQuery·p0.99:   7415.529 ms/op
                 executeQuery·p0.999:  7415.529 ms/op
                 executeQuery·p0.9999: 7415.529 ms/op
                 executeQuery·p1.00:   7415.529 ms/op

Iteration   4: 6840.910 ms/op
                 executeQuery·p0.00:   6576.669 ms/op
                 executeQuery·p0.50:   6840.910 ms/op
                 executeQuery·p0.90:   7105.151 ms/op
                 executeQuery·p0.95:   7105.151 ms/op
                 executeQuery·p0.99:   7105.151 ms/op
                 executeQuery·p0.999:  7105.151 ms/op
                 executeQuery·p0.9999: 7105.151 ms/op
                 executeQuery·p1.00:   7105.151 ms/op

Iteration   5: 7210.009 ms/op
                 executeQuery·p0.00:   7130.317 ms/op
                 executeQuery·p0.50:   7210.009 ms/op
                 executeQuery·p0.90:   7289.700 ms/op
                 executeQuery·p0.95:   7289.700 ms/op
                 executeQuery·p0.99:   7289.700 ms/op
                 executeQuery·p0.999:  7289.700 ms/op
                 executeQuery·p0.9999: 7289.700 ms/op
                 executeQuery·p1.00:   7289.700 ms/op


# Run progress: 8.93% complete, ETA 06:24:02
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6564.086 ms/op
# Warmup Iteration   2: 7063.208 ms/op
# Warmup Iteration   3: 7197.426 ms/op
# Warmup Iteration   4: 6744.441 ms/op
# Warmup Iteration   5: 6782.190 ms/op
Iteration   1: 7025.459 ms/op
                 executeQuery·p0.00:   6954.156 ms/op
                 executeQuery·p0.50:   7025.459 ms/op
                 executeQuery·p0.90:   7096.762 ms/op
                 executeQuery·p0.95:   7096.762 ms/op
                 executeQuery·p0.99:   7096.762 ms/op
                 executeQuery·p0.999:  7096.762 ms/op
                 executeQuery·p0.9999: 7096.762 ms/op
                 executeQuery·p1.00:   7096.762 ms/op

Iteration   2: 7121.928 ms/op
                 executeQuery·p0.00:   7088.374 ms/op
                 executeQuery·p0.50:   7121.928 ms/op
                 executeQuery·p0.90:   7155.483 ms/op
                 executeQuery·p0.95:   7155.483 ms/op
                 executeQuery·p0.99:   7155.483 ms/op
                 executeQuery·p0.999:  7155.483 ms/op
                 executeQuery·p0.9999: 7155.483 ms/op
                 executeQuery·p1.00:   7155.483 ms/op

Iteration   3: 6459.228 ms/op
                 executeQuery·p0.00:   6434.062 ms/op
                 executeQuery·p0.50:   6459.228 ms/op
                 executeQuery·p0.90:   6484.394 ms/op
                 executeQuery·p0.95:   6484.394 ms/op
                 executeQuery·p0.99:   6484.394 ms/op
                 executeQuery·p0.999:  6484.394 ms/op
                 executeQuery·p0.9999: 6484.394 ms/op
                 executeQuery·p1.00:   6484.394 ms/op

Iteration   4: 7239.369 ms/op
                 executeQuery·p0.00:   7180.648 ms/op
                 executeQuery·p0.50:   7239.369 ms/op
                 executeQuery·p0.90:   7298.089 ms/op
                 executeQuery·p0.95:   7298.089 ms/op
                 executeQuery·p0.99:   7298.089 ms/op
                 executeQuery·p0.999:  7298.089 ms/op
                 executeQuery·p0.9999: 7298.089 ms/op
                 executeQuery·p1.00:   7298.089 ms/op

Iteration   5: 7067.402 ms/op
                 executeQuery·p0.00:   6979.322 ms/op
                 executeQuery·p0.50:   7067.402 ms/op
                 executeQuery·p0.90:   7155.483 ms/op
                 executeQuery·p0.95:   7155.483 ms/op
                 executeQuery·p0.99:   7155.483 ms/op
                 executeQuery·p0.999:  7155.483 ms/op
                 executeQuery·p0.9999: 7155.483 ms/op
                 executeQuery·p1.00:   7155.483 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   7073.694 ±(99.9%) 279.233 ms/op

  Histogram, ms/op:
    [6000.000, 6125.000) = 0 
    [6125.000, 6250.000) = 0 
    [6250.000, 6375.000) = 0 
    [6375.000, 6500.000) = 2 
    [6500.000, 6625.000) = 1 
    [6625.000, 6750.000) = 0 
    [6750.000, 6875.000) = 0 
    [6875.000, 7000.000) = 4 
    [7000.000, 7125.000) = 4 
    [7125.000, 7250.000) = 4 
    [7250.000, 7375.000) = 3 
    [7375.000, 7500.000) = 1 
    [7500.000, 7625.000) = 0 
    [7625.000, 7750.000) = 0 
    [7750.000, 7875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6434.062 ms/op
     p(50.0000) =   7100.957 ms/op
     p(90.0000) =   7408.819 ms/op
     p(95.0000) =   7813.988 ms/op
     p(99.0000) =   7834.960 ms/op
     p(99.9000) =   7834.960 ms/op
     p(99.9900) =   7834.960 ms/op
     p(99.9990) =   7834.960 ms/op
     p(99.9999) =   7834.960 ms/op
    p(100.0000) =   7834.960 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 9.52% complete, ETA 06:19:51
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

15535.702 ms/op
# Warmup Iteration   2: 13706.985 ms/op
# Warmup Iteration   3: 12817.793 ms/op
# Warmup Iteration   4: 15099.494 ms/op
# Warmup Iteration   5: 14025.753 ms/op
Iteration   1: 8975.811 ms/op
                 executeQuery·p0.00:   8975.811 ms/op
                 executeQuery·p0.50:   8975.811 ms/op
                 executeQuery·p0.90:   8975.811 ms/op
                 executeQuery·p0.95:   8975.811 ms/op
                 executeQuery·p0.99:   8975.811 ms/op
                 executeQuery·p0.999:  8975.811 ms/op
                 executeQuery·p0.9999: 8975.811 ms/op
                 executeQuery·p1.00:   8975.811 ms/op

Iteration   2: 13757.317 ms/op
                 executeQuery·p0.00:   13757.317 ms/op
                 executeQuery·p0.50:   13757.317 ms/op
                 executeQuery·p0.90:   13757.317 ms/op
                 executeQuery·p0.95:   13757.317 ms/op
                 executeQuery·p0.99:   13757.317 ms/op
                 executeQuery·p0.999:  13757.317 ms/op
                 executeQuery·p0.9999: 13757.317 ms/op
                 executeQuery·p1.00:   13757.317 ms/op

Iteration   3: 13606.322 ms/op
                 executeQuery·p0.00:   13606.322 ms/op
                 executeQuery·p0.50:   13606.322 ms/op
                 executeQuery·p0.90:   13606.322 ms/op
                 executeQuery·p0.95:   13606.322 ms/op
                 executeQuery·p0.99:   13606.322 ms/op
                 executeQuery·p0.999:  13606.322 ms/op
                 executeQuery·p0.9999: 13606.322 ms/op
                 executeQuery·p1.00:   13606.322 ms/op

Iteration   4: 13254.001 ms/op
                 executeQuery·p0.00:   13254.001 ms/op
                 executeQuery·p0.50:   13254.001 ms/op
                 executeQuery·p0.90:   13254.001 ms/op
                 executeQuery·p0.95:   13254.001 ms/op
                 executeQuery·p0.99:   13254.001 ms/op
                 executeQuery·p0.999:  13254.001 ms/op
                 executeQuery·p0.9999: 13254.001 ms/op
                 executeQuery·p1.00:   13254.001 ms/op

Iteration   5: 13388.218 ms/op
                 executeQuery·p0.00:   13388.218 ms/op
                 executeQuery·p0.50:   13388.218 ms/op
                 executeQuery·p0.90:   13388.218 ms/op
                 executeQuery·p0.95:   13388.218 ms/op
                 executeQuery·p0.99:   13388.218 ms/op
                 executeQuery·p0.999:  13388.218 ms/op
                 executeQuery·p0.9999: 13388.218 ms/op
                 executeQuery·p1.00:   13388.218 ms/op


# Run progress: 10.12% complete, ETA 06:26:07
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1533385272 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1533385272() {
        this(4);
    }
    public KeyValueMap_1533385272(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1533385272 aggregation_state_map = new KeyValueMap_1533385272();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

14814.282 ms/op
# Warmup Iteration   2: 14512.292 ms/op
# Warmup Iteration   3: 14914.945 ms/op
# Warmup Iteration   4: 15351.153 ms/op
# Warmup Iteration   5: 13992.198 ms/op
Iteration   1: 10183.770 ms/op
                 executeQuery·p0.00:   10183.770 ms/op
                 executeQuery·p0.50:   10183.770 ms/op
                 executeQuery·p0.90:   10183.770 ms/op
                 executeQuery·p0.95:   10183.770 ms/op
                 executeQuery·p0.99:   10183.770 ms/op
                 executeQuery·p0.999:  10183.770 ms/op
                 executeQuery·p0.9999: 10183.770 ms/op
                 executeQuery·p1.00:   10183.770 ms/op

Iteration   2: 13237.223 ms/op
                 executeQuery·p0.00:   13237.223 ms/op
                 executeQuery·p0.50:   13237.223 ms/op
                 executeQuery·p0.90:   13237.223 ms/op
                 executeQuery·p0.95:   13237.223 ms/op
                 executeQuery·p0.99:   13237.223 ms/op
                 executeQuery·p0.999:  13237.223 ms/op
                 executeQuery·p0.9999: 13237.223 ms/op
                 executeQuery·p1.00:   13237.223 ms/op

Iteration   3: 13623.099 ms/op
                 executeQuery·p0.00:   13623.099 ms/op
                 executeQuery·p0.50:   13623.099 ms/op
                 executeQuery·p0.90:   13623.099 ms/op
                 executeQuery·p0.95:   13623.099 ms/op
                 executeQuery·p0.99:   13623.099 ms/op
                 executeQuery·p0.999:  13623.099 ms/op
                 executeQuery·p0.9999: 13623.099 ms/op
                 executeQuery·p1.00:   13623.099 ms/op

Iteration   4: 17515.414 ms/op
                 executeQuery·p0.00:   17515.414 ms/op
                 executeQuery·p0.50:   17515.414 ms/op
                 executeQuery·p0.90:   17515.414 ms/op
                 executeQuery·p0.95:   17515.414 ms/op
                 executeQuery·p0.99:   17515.414 ms/op
                 executeQuery·p0.999:  17515.414 ms/op
                 executeQuery·p0.9999: 17515.414 ms/op
                 executeQuery·p1.00:   17515.414 ms/op

Iteration   5: 15535.702 ms/op
                 executeQuery·p0.00:   15535.702 ms/op
                 executeQuery·p0.50:   15535.702 ms/op
                 executeQuery·p0.90:   15535.702 ms/op
                 executeQuery·p0.95:   15535.702 ms/op
                 executeQuery·p0.99:   15535.702 ms/op
                 executeQuery·p0.999:  15535.702 ms/op
                 executeQuery·p0.9999: 15535.702 ms/op
                 executeQuery·p1.00:   15535.702 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  13307.688 ±(99.9%) 3619.985 ms/op

  Histogram, ms/op:
    [ 8000.000,  9000.000) = 1 
    [ 9000.000, 10000.000) = 0 
    [10000.000, 11000.000) = 1 
    [11000.000, 12000.000) = 0 
    [12000.000, 13000.000) = 0 
    [13000.000, 14000.000) = 6 
    [14000.000, 15000.000) = 0 
    [15000.000, 16000.000) = 1 
    [16000.000, 17000.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8975.811 ms/op
     p(50.0000) =  13497.270 ms/op
     p(90.0000) =  17317.442 ms/op
     p(95.0000) =  17515.414 ms/op
     p(99.0000) =  17515.414 ms/op
     p(99.9000) =  17515.414 ms/op
     p(99.9900) =  17515.414 ms/op
     p(99.9990) =  17515.414 ms/op
     p(99.9999) =  17515.414 ms/op
    p(100.0000) =  17515.414 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 10.71% complete, ETA 06:32:28
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

42412.802 ms/op
# Warmup Iteration   2: 24360.518 ms/op
# Warmup Iteration   3: 37648.073 ms/op
# Warmup Iteration   4: 39527.121 ms/op
# Warmup Iteration   5: 40198.210 ms/op
Iteration   1: 39527.121 ms/op
                 executeQuery·p0.00:   39527.121 ms/op
                 executeQuery·p0.50:   39527.121 ms/op
                 executeQuery·p0.90:   39527.121 ms/op
                 executeQuery·p0.95:   39527.121 ms/op
                 executeQuery·p0.99:   39527.121 ms/op
                 executeQuery·p0.999:  39527.121 ms/op
                 executeQuery·p0.9999: 39527.121 ms/op
                 executeQuery·p1.00:   39527.121 ms/op

Iteration   2: 28487.713 ms/op
                 executeQuery·p0.00:   28487.713 ms/op
                 executeQuery·p0.50:   28487.713 ms/op
                 executeQuery·p0.90:   28487.713 ms/op
                 executeQuery·p0.95:   28487.713 ms/op
                 executeQuery·p0.99:   28487.713 ms/op
                 executeQuery·p0.999:  28487.713 ms/op
                 executeQuery·p0.9999: 28487.713 ms/op
                 executeQuery·p1.00:   28487.713 ms/op

Iteration   3: 41070.625 ms/op
                 executeQuery·p0.00:   41070.625 ms/op
                 executeQuery·p0.50:   41070.625 ms/op
                 executeQuery·p0.90:   41070.625 ms/op
                 executeQuery·p0.95:   41070.625 ms/op
                 executeQuery·p0.99:   41070.625 ms/op
                 executeQuery·p0.999:  41070.625 ms/op
                 executeQuery·p0.9999: 41070.625 ms/op
                 executeQuery·p1.00:   41070.625 ms/op

Iteration   4: 30266.098 ms/op
                 executeQuery·p0.00:   30266.098 ms/op
                 executeQuery·p0.50:   30266.098 ms/op
                 executeQuery·p0.90:   30266.098 ms/op
                 executeQuery·p0.95:   30266.098 ms/op
                 executeQuery·p0.99:   30266.098 ms/op
                 executeQuery·p0.999:  30266.098 ms/op
                 executeQuery·p0.9999: 30266.098 ms/op
                 executeQuery·p1.00:   30266.098 ms/op

Iteration   5: 41271.951 ms/op
                 executeQuery·p0.00:   41271.951 ms/op
                 executeQuery·p0.50:   41271.951 ms/op
                 executeQuery·p0.90:   41271.951 ms/op
                 executeQuery·p0.95:   41271.951 ms/op
                 executeQuery·p0.99:   41271.951 ms/op
                 executeQuery·p0.999:  41271.951 ms/op
                 executeQuery·p0.9999: 41271.951 ms/op
                 executeQuery·p1.00:   41271.951 ms/op


# Run progress: 11.31% complete, ETA 07:36:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

41070.625 ms/op
# Warmup Iteration   2: 40063.992 ms/op
# Warmup Iteration   3: 40802.189 ms/op
# Warmup Iteration   4: 39996.883 ms/op
# Warmup Iteration   5: 23286.776 ms/op
Iteration   1: 23857.201 ms/op
                 executeQuery·p0.00:   23857.201 ms/op
                 executeQuery·p0.50:   23857.201 ms/op
                 executeQuery·p0.90:   23857.201 ms/op
                 executeQuery·p0.95:   23857.201 ms/op
                 executeQuery·p0.99:   23857.201 ms/op
                 executeQuery·p0.999:  23857.201 ms/op
                 executeQuery·p0.9999: 23857.201 ms/op
                 executeQuery·p1.00:   23857.201 ms/op

Iteration   2: 35634.807 ms/op
                 executeQuery·p0.00:   35634.807 ms/op
                 executeQuery·p0.50:   35634.807 ms/op
                 executeQuery·p0.90:   35634.807 ms/op
                 executeQuery·p0.95:   35634.807 ms/op
                 executeQuery·p0.99:   35634.807 ms/op
                 executeQuery·p0.999:  35634.807 ms/op
                 executeQuery·p0.9999: 35634.807 ms/op
                 executeQuery·p1.00:   35634.807 ms/op

Iteration   3: 39862.665 ms/op
                 executeQuery·p0.00:   39862.665 ms/op
                 executeQuery·p0.50:   39862.665 ms/op
                 executeQuery·p0.90:   39862.665 ms/op
                 executeQuery·p0.95:   39862.665 ms/op
                 executeQuery·p0.99:   39862.665 ms/op
                 executeQuery·p0.999:  39862.665 ms/op
                 executeQuery·p0.9999: 39862.665 ms/op
                 executeQuery·p1.00:   39862.665 ms/op

Iteration   4: 39124.468 ms/op
                 executeQuery·p0.00:   39124.468 ms/op
                 executeQuery·p0.50:   39124.468 ms/op
                 executeQuery·p0.90:   39124.468 ms/op
                 executeQuery·p0.95:   39124.468 ms/op
                 executeQuery·p0.99:   39124.468 ms/op
                 executeQuery·p0.999:  39124.468 ms/op
                 executeQuery·p0.9999: 39124.468 ms/op
                 executeQuery·p1.00:   39124.468 ms/op

Iteration   5: 23320.330 ms/op
                 executeQuery·p0.00:   23320.330 ms/op
                 executeQuery·p0.50:   23320.330 ms/op
                 executeQuery·p0.90:   23320.330 ms/op
                 executeQuery·p0.95:   23320.330 ms/op
                 executeQuery·p0.99:   23320.330 ms/op
                 executeQuery·p0.999:  23320.330 ms/op
                 executeQuery·p0.9999: 23320.330 ms/op
                 executeQuery·p1.00:   23320.330 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  34242.298 ±(99.9%) 10777.982 ms/op

  Histogram, ms/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 2 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 1 
    [30000.000, 32500.000) = 1 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 1 
    [37500.000, 40000.000) = 3 
    [40000.000, 42500.000) = 2 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  23320.330 ms/op
     p(50.0000) =  37379.637 ms/op
     p(90.0000) =  41251.819 ms/op
     p(95.0000) =  41271.951 ms/op
     p(99.0000) =  41271.951 ms/op
     p(99.9000) =  41271.951 ms/op
     p(99.9900) =  41271.951 ms/op
     p(99.9990) =  41271.951 ms/op
     p(99.9999) =  41271.951 ms/op
    p(100.0000) =  41271.951 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 11.90% complete, ETA 08:31:31
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_1533385272 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1533385272() {
        this(4);
    }
    public KeyValueMap_1533385272(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1533385272 aggregation_state_map = new KeyValueMap_1533385272();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7444.890 ms/op
# Warmup Iteration   2: 7180.648 ms/op
# Warmup Iteration   3: 7042.236 ms/op
# Warmup Iteration   4: 7046.431 ms/op
# Warmup Iteration   5: 7210.009 ms/op
Iteration   1: 7075.791 ms/op
                 executeQuery·p0.00:   7046.431 ms/op
                 executeQuery·p0.50:   7075.791 ms/op
                 executeQuery·p0.90:   7105.151 ms/op
                 executeQuery·p0.95:   7105.151 ms/op
                 executeQuery·p0.99:   7105.151 ms/op
                 executeQuery·p0.999:  7105.151 ms/op
                 executeQuery·p0.9999: 7105.151 ms/op
                 executeQuery·p1.00:   7105.151 ms/op

Iteration   2: 7084.179 ms/op
                 executeQuery·p0.00:   7079.985 ms/op
                 executeQuery·p0.50:   7084.179 ms/op
                 executeQuery·p0.90:   7088.374 ms/op
                 executeQuery·p0.95:   7088.374 ms/op
                 executeQuery·p0.99:   7088.374 ms/op
                 executeQuery·p0.999:  7088.374 ms/op
                 executeQuery·p0.9999: 7088.374 ms/op
                 executeQuery·p1.00:   7088.374 ms/op

Iteration   3: 7050.625 ms/op
                 executeQuery·p0.00:   7021.265 ms/op
                 executeQuery·p0.50:   7050.625 ms/op
                 executeQuery·p0.90:   7079.985 ms/op
                 executeQuery·p0.95:   7079.985 ms/op
                 executeQuery·p0.99:   7079.985 ms/op
                 executeQuery·p0.999:  7079.985 ms/op
                 executeQuery·p0.9999: 7079.985 ms/op
                 executeQuery·p1.00:   7079.985 ms/op

Iteration   4: 7205.814 ms/op
                 executeQuery·p0.00:   7105.151 ms/op
                 executeQuery·p0.50:   7205.814 ms/op
                 executeQuery·p0.90:   7306.478 ms/op
                 executeQuery·p0.95:   7306.478 ms/op
                 executeQuery·p0.99:   7306.478 ms/op
                 executeQuery·p0.999:  7306.478 ms/op
                 executeQuery·p0.9999: 7306.478 ms/op
                 executeQuery·p1.00:   7306.478 ms/op

Iteration   5: 7033.848 ms/op
                 executeQuery·p0.00:   6996.099 ms/op
                 executeQuery·p0.50:   7033.848 ms/op
                 executeQuery·p0.90:   7071.597 ms/op
                 executeQuery·p0.95:   7071.597 ms/op
                 executeQuery·p0.99:   7071.597 ms/op
                 executeQuery·p0.999:  7071.597 ms/op
                 executeQuery·p0.9999: 7071.597 ms/op
                 executeQuery·p1.00:   7071.597 ms/op


# Run progress: 12.50% complete, ETA 08:20:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7105.151 ms/op
# Warmup Iteration   2: 7189.037 ms/op
# Warmup Iteration   3: 7113.540 ms/op
# Warmup Iteration   4: 7138.705 ms/op
# Warmup Iteration   5: 7100.957 ms/op
Iteration   1: 7163.871 ms/op
                 executeQuery·p0.00:   7071.597 ms/op
                 executeQuery·p0.50:   7163.871 ms/op
                 executeQuery·p0.90:   7256.146 ms/op
                 executeQuery·p0.95:   7256.146 ms/op
                 executeQuery·p0.99:   7256.146 ms/op
                 executeQuery·p0.999:  7256.146 ms/op
                 executeQuery·p0.9999: 7256.146 ms/op
                 executeQuery·p1.00:   7256.146 ms/op

Iteration   2: 7000.293 ms/op
                 executeQuery·p0.00:   6987.710 ms/op
                 executeQuery·p0.50:   7000.293 ms/op
                 executeQuery·p0.90:   7012.876 ms/op
                 executeQuery·p0.95:   7012.876 ms/op
                 executeQuery·p0.99:   7012.876 ms/op
                 executeQuery·p0.999:  7012.876 ms/op
                 executeQuery·p0.9999: 7012.876 ms/op
                 executeQuery·p1.00:   7012.876 ms/op

Iteration   3: 7197.426 ms/op
                 executeQuery·p0.00:   7096.762 ms/op
                 executeQuery·p0.50:   7197.426 ms/op
                 executeQuery·p0.90:   7298.089 ms/op
                 executeQuery·p0.95:   7298.089 ms/op
                 executeQuery·p0.99:   7298.089 ms/op
                 executeQuery·p0.999:  7298.089 ms/op
                 executeQuery·p0.9999: 7298.089 ms/op
                 executeQuery·p1.00:   7298.089 ms/op

Iteration   4: 7138.705 ms/op
                 executeQuery·p0.00:   7113.540 ms/op
                 executeQuery·p0.50:   7138.705 ms/op
                 executeQuery·p0.90:   7163.871 ms/op
                 executeQuery·p0.95:   7163.871 ms/op
                 executeQuery·p0.99:   7163.871 ms/op
                 executeQuery·p0.999:  7163.871 ms/op
                 executeQuery·p0.9999: 7163.871 ms/op
                 executeQuery·p1.00:   7163.871 ms/op

Iteration   5: 7050.625 ms/op
                 executeQuery·p0.00:   7012.876 ms/op
                 executeQuery·p0.50:   7050.625 ms/op
                 executeQuery·p0.90:   7088.374 ms/op
                 executeQuery·p0.95:   7088.374 ms/op
                 executeQuery·p0.99:   7088.374 ms/op
                 executeQuery·p0.999:  7088.374 ms/op
                 executeQuery·p0.9999: 7088.374 ms/op
                 executeQuery·p1.00:   7088.374 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   7100.118 ±(99.9%) 79.914 ms/op

  Histogram, ms/op:
    [6900.000, 6950.000) = 0 
    [6950.000, 7000.000) = 2 
    [7000.000, 7050.000) = 4 
    [7050.000, 7100.000) = 7 
    [7100.000, 7150.000) = 3 
    [7150.000, 7200.000) = 1 
    [7200.000, 7250.000) = 0 
    [7250.000, 7300.000) = 2 
    [7300.000, 7350.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6987.710 ms/op
     p(50.0000) =   7084.179 ms/op
     p(90.0000) =   7293.895 ms/op
     p(95.0000) =   7306.058 ms/op
     p(99.0000) =   7306.478 ms/op
     p(99.9000) =   7306.478 ms/op
     p(99.9900) =   7306.478 ms/op
     p(99.9990) =   7306.478 ms/op
     p(99.9999) =   7306.478 ms/op
    p(100.0000) =   7306.478 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 13.10% complete, ETA 08:10:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10074.718 ms/op
# Warmup Iteration   2: 10854.859 ms/op
# Warmup Iteration   3: 10754.195 ms/op
# Warmup Iteration   4: 10838.082 ms/op
# Warmup Iteration   5: 11005.854 ms/op
Iteration   1: 10921.968 ms/op
                 executeQuery·p0.00:   10921.968 ms/op
                 executeQuery·p0.50:   10921.968 ms/op
                 executeQuery·p0.90:   10921.968 ms/op
                 executeQuery·p0.95:   10921.968 ms/op
                 executeQuery·p0.99:   10921.968 ms/op
                 executeQuery·p0.999:  10921.968 ms/op
                 executeQuery·p0.9999: 10921.968 ms/op
                 executeQuery·p1.00:   10921.968 ms/op

Iteration   2: 10955.522 ms/op
                 executeQuery·p0.00:   10955.522 ms/op
                 executeQuery·p0.50:   10955.522 ms/op
                 executeQuery·p0.90:   10955.522 ms/op
                 executeQuery·p0.95:   10955.522 ms/op
                 executeQuery·p0.99:   10955.522 ms/op
                 executeQuery·p0.999:  10955.522 ms/op
                 executeQuery·p0.9999: 10955.522 ms/op
                 executeQuery·p1.00:   10955.522 ms/op

Iteration   3: 10838.082 ms/op
                 executeQuery·p0.00:   10838.082 ms/op
                 executeQuery·p0.50:   10838.082 ms/op
                 executeQuery·p0.90:   10838.082 ms/op
                 executeQuery·p0.95:   10838.082 ms/op
                 executeQuery·p0.99:   10838.082 ms/op
                 executeQuery·p0.999:  10838.082 ms/op
                 executeQuery·p0.9999: 10838.082 ms/op
                 executeQuery·p1.00:   10838.082 ms/op

Iteration   4: 10821.304 ms/op
                 executeQuery·p0.00:   10821.304 ms/op
                 executeQuery·p0.50:   10821.304 ms/op
                 executeQuery·p0.90:   10821.304 ms/op
                 executeQuery·p0.95:   10821.304 ms/op
                 executeQuery·p0.99:   10821.304 ms/op
                 executeQuery·p0.999:  10821.304 ms/op
                 executeQuery·p0.9999: 10821.304 ms/op
                 executeQuery·p1.00:   10821.304 ms/op

Iteration   5: 11022.631 ms/op
                 executeQuery·p0.00:   11022.631 ms/op
                 executeQuery·p0.50:   11022.631 ms/op
                 executeQuery·p0.90:   11022.631 ms/op
                 executeQuery·p0.95:   11022.631 ms/op
                 executeQuery·p0.99:   11022.631 ms/op
                 executeQuery·p0.999:  11022.631 ms/op
                 executeQuery·p0.9999: 11022.631 ms/op
                 executeQuery·p1.00:   11022.631 ms/op


# Run progress: 13.69% complete, ETA 07:58:36
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_1533385272 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1533385272() {
        this(4);
    }
    public KeyValueMap_1533385272(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1533385272 aggregation_state_map = new KeyValueMap_1533385272();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10066.330 ms/op
# Warmup Iteration   2: 10854.859 ms/op
# Warmup Iteration   3: 10619.978 ms/op
# Warmup Iteration   4: 10603.201 ms/op
# Warmup Iteration   5: 10636.755 ms/op
Iteration   1: 10586.423 ms/op
                 executeQuery·p0.00:   10586.423 ms/op
                 executeQuery·p0.50:   10586.423 ms/op
                 executeQuery·p0.90:   10586.423 ms/op
                 executeQuery·p0.95:   10586.423 ms/op
                 executeQuery·p0.99:   10586.423 ms/op
                 executeQuery·p0.999:  10586.423 ms/op
                 executeQuery·p0.9999: 10586.423 ms/op
                 executeQuery·p1.00:   10586.423 ms/op

Iteration   2: 10787.750 ms/op
                 executeQuery·p0.00:   10787.750 ms/op
                 executeQuery·p0.50:   10787.750 ms/op
                 executeQuery·p0.90:   10787.750 ms/op
                 executeQuery·p0.95:   10787.750 ms/op
                 executeQuery·p0.99:   10787.750 ms/op
                 executeQuery·p0.999:  10787.750 ms/op
                 executeQuery·p0.9999: 10787.750 ms/op
                 executeQuery·p1.00:   10787.750 ms/op

Iteration   3: 10586.423 ms/op
                 executeQuery·p0.00:   10586.423 ms/op
                 executeQuery·p0.50:   10586.423 ms/op
                 executeQuery·p0.90:   10586.423 ms/op
                 executeQuery·p0.95:   10586.423 ms/op
                 executeQuery·p0.99:   10586.423 ms/op
                 executeQuery·p0.999:  10586.423 ms/op
                 executeQuery·p0.9999: 10586.423 ms/op
                 executeQuery·p1.00:   10586.423 ms/op

Iteration   4: 10586.423 ms/op
                 executeQuery·p0.00:   10586.423 ms/op
                 executeQuery·p0.50:   10586.423 ms/op
                 executeQuery·p0.90:   10586.423 ms/op
                 executeQuery·p0.95:   10586.423 ms/op
                 executeQuery·p0.99:   10586.423 ms/op
                 executeQuery·p0.999:  10586.423 ms/op
                 executeQuery·p0.9999: 10586.423 ms/op
                 executeQuery·p1.00:   10586.423 ms/op

Iteration   5: 10636.755 ms/op
                 executeQuery·p0.00:   10636.755 ms/op
                 executeQuery·p0.50:   10636.755 ms/op
                 executeQuery·p0.90:   10636.755 ms/op
                 executeQuery·p0.95:   10636.755 ms/op
                 executeQuery·p0.99:   10636.755 ms/op
                 executeQuery·p0.999:  10636.755 ms/op
                 executeQuery·p0.9999: 10636.755 ms/op
                 executeQuery·p1.00:   10636.755 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  10774.328 ±(99.9%) 250.756 ms/op

  Histogram, ms/op:
    [10500.000, 10550.000) = 0 
    [10550.000, 10600.000) = 3 
    [10600.000, 10650.000) = 1 
    [10650.000, 10700.000) = 0 
    [10700.000, 10750.000) = 0 
    [10750.000, 10800.000) = 1 
    [10800.000, 10850.000) = 2 
    [10850.000, 10900.000) = 0 
    [10900.000, 10950.000) = 1 
    [10950.000, 11000.000) = 1 
    [11000.000, 11050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  10586.423 ms/op
     p(50.0000) =  10804.527 ms/op
     p(90.0000) =  11015.920 ms/op
     p(95.0000) =  11022.631 ms/op
     p(99.0000) =  11022.631 ms/op
     p(99.9000) =  11022.631 ms/op
     p(99.9900) =  11022.631 ms/op
     p(99.9990) =  11022.631 ms/op
     p(99.9999) =  11022.631 ms/op
    p(100.0000) =  11022.631 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 14.29% complete, ETA 07:47:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

13170.115 ms/op
# Warmup Iteration   2: 14898.168 ms/op
# Warmup Iteration   3: 14461.960 ms/op
# Warmup Iteration   4: 14696.841 ms/op
# Warmup Iteration   5: 13337.887 ms/op
Iteration   1: 15216.935 ms/op
                 executeQuery·p0.00:   15216.935 ms/op
                 executeQuery·p0.50:   15216.935 ms/op
                 executeQuery·p0.90:   15216.935 ms/op
                 executeQuery·p0.95:   15216.935 ms/op
                 executeQuery·p0.99:   15216.935 ms/op
                 executeQuery·p0.999:  15216.935 ms/op
                 executeQuery·p0.9999: 15216.935 ms/op
                 executeQuery·p1.00:   15216.935 ms/op

Iteration   2: 13254.001 ms/op
                 executeQuery·p0.00:   13254.001 ms/op
                 executeQuery·p0.50:   13254.001 ms/op
                 executeQuery·p0.90:   13254.001 ms/op
                 executeQuery·p0.95:   13254.001 ms/op
                 executeQuery·p0.99:   13254.001 ms/op
                 executeQuery·p0.999:  13254.001 ms/op
                 executeQuery·p0.9999: 13254.001 ms/op
                 executeQuery·p1.00:   13254.001 ms/op

Iteration   3: 14025.753 ms/op
                 executeQuery·p0.00:   14025.753 ms/op
                 executeQuery·p0.50:   14025.753 ms/op
                 executeQuery·p0.90:   14025.753 ms/op
                 executeQuery·p0.95:   14025.753 ms/op
                 executeQuery·p0.99:   14025.753 ms/op
                 executeQuery·p0.999:  14025.753 ms/op
                 executeQuery·p0.9999: 14025.753 ms/op
                 executeQuery·p1.00:   14025.753 ms/op

Iteration   4: 14310.965 ms/op
                 executeQuery·p0.00:   14310.965 ms/op
                 executeQuery·p0.50:   14310.965 ms/op
                 executeQuery·p0.90:   14310.965 ms/op
                 executeQuery·p0.95:   14310.965 ms/op
                 executeQuery·p0.99:   14310.965 ms/op
                 executeQuery·p0.999:  14310.965 ms/op
                 executeQuery·p0.9999: 14310.965 ms/op
                 executeQuery·p1.00:   14310.965 ms/op

Iteration   5: 14663.287 ms/op
                 executeQuery·p0.00:   14663.287 ms/op
                 executeQuery·p0.50:   14663.287 ms/op
                 executeQuery·p0.90:   14663.287 ms/op
                 executeQuery·p0.95:   14663.287 ms/op
                 executeQuery·p0.99:   14663.287 ms/op
                 executeQuery·p0.999:  14663.287 ms/op
                 executeQuery·p0.9999: 14663.287 ms/op
                 executeQuery·p1.00:   14663.287 ms/op


# Run progress: 14.88% complete, ETA 07:39:07
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

13186.892 ms/op
# Warmup Iteration   2: 14445.183 ms/op
# Warmup Iteration   3: 14680.064 ms/op
# Warmup Iteration   4: 14176.748 ms/op
# Warmup Iteration   5: 13472.104 ms/op
Iteration   1: 14680.064 ms/op
                 executeQuery·p0.00:   14680.064 ms/op
                 executeQuery·p0.50:   14680.064 ms/op
                 executeQuery·p0.90:   14680.064 ms/op
                 executeQuery·p0.95:   14680.064 ms/op
                 executeQuery·p0.99:   14680.064 ms/op
                 executeQuery·p0.999:  14680.064 ms/op
                 executeQuery·p0.9999: 14680.064 ms/op
                 executeQuery·p1.00:   14680.064 ms/op

Iteration   2: 15267.267 ms/op
                 executeQuery·p0.00:   15267.267 ms/op
                 executeQuery·p0.50:   15267.267 ms/op
                 executeQuery·p0.90:   15267.267 ms/op
                 executeQuery·p0.95:   15267.267 ms/op
                 executeQuery·p0.99:   15267.267 ms/op
                 executeQuery·p0.999:  15267.267 ms/op
                 executeQuery·p0.9999: 15267.267 ms/op
                 executeQuery·p1.00:   15267.267 ms/op

Iteration   3: 15149.826 ms/op
                 executeQuery·p0.00:   15149.826 ms/op
                 executeQuery·p0.50:   15149.826 ms/op
                 executeQuery·p0.90:   15149.826 ms/op
                 executeQuery·p0.95:   15149.826 ms/op
                 executeQuery·p0.99:   15149.826 ms/op
                 executeQuery·p0.999:  15149.826 ms/op
                 executeQuery·p0.9999: 15149.826 ms/op
                 executeQuery·p1.00:   15149.826 ms/op

Iteration   4: 14159.970 ms/op
                 executeQuery·p0.00:   14159.970 ms/op
                 executeQuery·p0.50:   14159.970 ms/op
                 executeQuery·p0.90:   14159.970 ms/op
                 executeQuery·p0.95:   14159.970 ms/op
                 executeQuery·p0.99:   14159.970 ms/op
                 executeQuery·p0.999:  14159.970 ms/op
                 executeQuery·p0.9999: 14159.970 ms/op
                 executeQuery·p1.00:   14159.970 ms/op

Iteration   5: 15116.272 ms/op
                 executeQuery·p0.00:   15116.272 ms/op
                 executeQuery·p0.50:   15116.272 ms/op
                 executeQuery·p0.90:   15116.272 ms/op
                 executeQuery·p0.95:   15116.272 ms/op
                 executeQuery·p0.99:   15116.272 ms/op
                 executeQuery·p0.999:  15116.272 ms/op
                 executeQuery·p0.9999: 15116.272 ms/op
                 executeQuery·p1.00:   15116.272 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  14584.434 ±(99.9%) 985.138 ms/op

  Histogram, ms/op:
    [13000.000, 13250.000) = 0 
    [13250.000, 13500.000) = 1 
    [13500.000, 13750.000) = 0 
    [13750.000, 14000.000) = 0 
    [14000.000, 14250.000) = 2 
    [14250.000, 14500.000) = 1 
    [14500.000, 14750.000) = 2 
    [14750.000, 15000.000) = 0 
    [15000.000, 15250.000) = 3 
    [15250.000, 15500.000) = 1 
    [15500.000, 15750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  13254.001 ms/op
     p(50.0000) =  14671.675 ms/op
     p(90.0000) =  15262.233 ms/op
     p(95.0000) =  15267.267 ms/op
     p(99.0000) =  15267.267 ms/op
     p(99.9000) =  15267.267 ms/op
     p(99.9900) =  15267.267 ms/op
     p(99.9990) =  15267.267 ms/op
     p(99.9999) =  15267.267 ms/op
    p(100.0000) =  15267.267 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 15.48% complete, ETA 07:31:39
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

29595.009 ms/op
# Warmup Iteration   2: 28991.029 ms/op
# Warmup Iteration   3: 29628.563 ms/op
# Warmup Iteration   4: 17951.621 ms/op
# Warmup Iteration   5: 29293.019 ms/op
Iteration   1: 28252.832 ms/op
                 executeQuery·p0.00:   28252.832 ms/op
                 executeQuery·p0.50:   28252.832 ms/op
                 executeQuery·p0.90:   28252.832 ms/op
                 executeQuery·p0.95:   28252.832 ms/op
                 executeQuery·p0.99:   28252.832 ms/op
                 executeQuery·p0.999:  28252.832 ms/op
                 executeQuery·p0.9999: 28252.832 ms/op
                 executeQuery·p1.00:   28252.832 ms/op

Iteration   2: 17850.958 ms/op
                 executeQuery·p0.00:   17850.958 ms/op
                 executeQuery·p0.50:   17850.958 ms/op
                 executeQuery·p0.90:   17850.958 ms/op
                 executeQuery·p0.95:   17850.958 ms/op
                 executeQuery·p0.99:   17850.958 ms/op
                 executeQuery·p0.999:  17850.958 ms/op
                 executeQuery·p0.9999: 17850.958 ms/op
                 executeQuery·p1.00:   17850.958 ms/op

Iteration   3: 26004.685 ms/op
                 executeQuery·p0.00:   26004.685 ms/op
                 executeQuery·p0.50:   26004.685 ms/op
                 executeQuery·p0.90:   26004.685 ms/op
                 executeQuery·p0.95:   26004.685 ms/op
                 executeQuery·p0.99:   26004.685 ms/op
                 executeQuery·p0.999:  26004.685 ms/op
                 executeQuery·p0.9999: 26004.685 ms/op
                 executeQuery·p1.00:   26004.685 ms/op

Iteration   4: 19797.115 ms/op
                 executeQuery·p0.00:   19797.115 ms/op
                 executeQuery·p0.50:   19797.115 ms/op
                 executeQuery·p0.90:   19797.115 ms/op
                 executeQuery·p0.95:   19797.115 ms/op
                 executeQuery·p0.99:   19797.115 ms/op
                 executeQuery·p0.999:  19797.115 ms/op
                 executeQuery·p0.9999: 19797.115 ms/op
                 executeQuery·p1.00:   19797.115 ms/op

Iteration   5: 29393.682 ms/op
                 executeQuery·p0.00:   29393.682 ms/op
                 executeQuery·p0.50:   29393.682 ms/op
                 executeQuery·p0.90:   29393.682 ms/op
                 executeQuery·p0.95:   29393.682 ms/op
                 executeQuery·p0.99:   29393.682 ms/op
                 executeQuery·p0.999:  29393.682 ms/op
                 executeQuery·p0.9999: 29393.682 ms/op
                 executeQuery·p1.00:   29393.682 ms/op


# Run progress: 16.07% complete, ETA 07:40:46
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_1533385272 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_1533385272() {
        this(4);
    }
    public KeyValueMap_1533385272(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_1533385272 aggregation_state_map = new KeyValueMap_1533385272();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17683.186 ms/op
# Warmup Iteration   2: 30165.434 ms/op
# Warmup Iteration   3: 29427.237 ms/op
# Warmup Iteration   4: 18018.730 ms/op
# Warmup Iteration   5: 29494.346 ms/op
Iteration   1: 28554.822 ms/op
                 executeQuery·p0.00:   28554.822 ms/op
                 executeQuery·p0.50:   28554.822 ms/op
                 executeQuery·p0.90:   28554.822 ms/op
                 executeQuery·p0.95:   28554.822 ms/op
                 executeQuery·p0.99:   28554.822 ms/op
                 executeQuery·p0.999:  28554.822 ms/op
                 executeQuery·p0.9999: 28554.822 ms/op
                 executeQuery·p1.00:   28554.822 ms/op

Iteration   2: 17817.403 ms/op
                 executeQuery·p0.00:   17817.403 ms/op
                 executeQuery·p0.50:   17817.403 ms/op
                 executeQuery·p0.90:   17817.403 ms/op
                 executeQuery·p0.95:   17817.403 ms/op
                 executeQuery·p0.99:   17817.403 ms/op
                 executeQuery·p0.999:  17817.403 ms/op
                 executeQuery·p0.9999: 17817.403 ms/op
                 executeQuery·p1.00:   17817.403 ms/op

Iteration   3: 30098.326 ms/op
                 executeQuery·p0.00:   30098.326 ms/op
                 executeQuery·p0.50:   30098.326 ms/op
                 executeQuery·p0.90:   30098.326 ms/op
                 executeQuery·p0.95:   30098.326 ms/op
                 executeQuery·p0.99:   30098.326 ms/op
                 executeQuery·p0.999:  30098.326 ms/op
                 executeQuery·p0.9999: 30098.326 ms/op
                 executeQuery·p1.00:   30098.326 ms/op

Iteration   4: 28554.822 ms/op
                 executeQuery·p0.00:   28554.822 ms/op
                 executeQuery·p0.50:   28554.822 ms/op
                 executeQuery·p0.90:   28554.822 ms/op
                 executeQuery·p0.95:   28554.822 ms/op
                 executeQuery·p0.99:   28554.822 ms/op
                 executeQuery·p0.999:  28554.822 ms/op
                 executeQuery·p0.9999: 28554.822 ms/op
                 executeQuery·p1.00:   28554.822 ms/op

Iteration   5: 21139.292 ms/op
                 executeQuery·p0.00:   21139.292 ms/op
                 executeQuery·p0.50:   21139.292 ms/op
                 executeQuery·p0.90:   21139.292 ms/op
                 executeQuery·p0.95:   21139.292 ms/op
                 executeQuery·p0.99:   21139.292 ms/op
                 executeQuery·p0.999:  21139.292 ms/op
                 executeQuery·p0.9999: 21139.292 ms/op
                 executeQuery·p1.00:   21139.292 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  24746.394 ±(99.9%) 7579.277 ms/op

  Histogram, ms/op:
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 3 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 1 
    [27500.000, 30000.000) = 4 
    [30000.000, 32500.000) = 1 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  17817.403 ms/op
     p(50.0000) =  27128.758 ms/op
     p(90.0000) =  30027.861 ms/op
     p(95.0000) =  30098.326 ms/op
     p(99.0000) =  30098.326 ms/op
     p(99.9000) =  30098.326 ms/op
     p(99.9900) =  30098.326 ms/op
     p(99.9990) =  30098.326 ms/op
     p(99.9999) =  30098.326 ms/op
    p(100.0000) =  30098.326 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 16.67% complete, ETA 07:48:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_104453162 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_104453162() {
        this(4);
    }
    public KeyValueMap_104453162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_104453162 aggregation_state_map = new KeyValueMap_104453162();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

83214.991 ms/op
# Warmup Iteration   2: 82141.250 ms/op
# Warmup Iteration   3: 52143.587 ms/op
# Warmup Iteration   4: 51405.390 ms/op
# Warmup Iteration   5: 82141.250 ms/op
Iteration   1: 55700.357 ms/op
                 executeQuery·p0.00:   55700.357 ms/op
                 executeQuery·p0.50:   55700.357 ms/op
                 executeQuery·p0.90:   55700.357 ms/op
                 executeQuery·p0.95:   55700.357 ms/op
                 executeQuery·p0.99:   55700.357 ms/op
                 executeQuery·p0.999:  55700.357 ms/op
                 executeQuery·p0.9999: 55700.357 ms/op
                 executeQuery·p1.00:   55700.357 ms/op

Iteration   2: 47982.838 ms/op
                 executeQuery·p0.00:   47982.838 ms/op
                 executeQuery·p0.50:   47982.838 ms/op
                 executeQuery·p0.90:   47982.838 ms/op
                 executeQuery·p0.95:   47982.838 ms/op
                 executeQuery·p0.99:   47982.838 ms/op
                 executeQuery·p0.999:  47982.838 ms/op
                 executeQuery·p0.9999: 47982.838 ms/op
                 executeQuery·p1.00:   47982.838 ms/op

Iteration   3: 81067.508 ms/op
                 executeQuery·p0.00:   81067.508 ms/op
                 executeQuery·p0.50:   81067.508 ms/op
                 executeQuery·p0.90:   81067.508 ms/op
                 executeQuery·p0.95:   81067.508 ms/op
                 executeQuery·p0.99:   81067.508 ms/op
                 executeQuery·p0.999:  81067.508 ms/op
                 executeQuery·p0.9999: 81067.508 ms/op
                 executeQuery·p1.00:   81067.508 ms/op

Iteration   4: 82007.032 ms/op
                 executeQuery·p0.00:   82007.032 ms/op
                 executeQuery·p0.50:   82007.032 ms/op
                 executeQuery·p0.90:   82007.032 ms/op
                 executeQuery·p0.95:   82007.032 ms/op
                 executeQuery·p0.99:   82007.032 ms/op
                 executeQuery·p0.999:  82007.032 ms/op
                 executeQuery·p0.9999: 82007.032 ms/op
                 executeQuery·p1.00:   82007.032 ms/op

Iteration   5: 47513.076 ms/op
                 executeQuery·p0.00:   47513.076 ms/op
                 executeQuery·p0.50:   47513.076 ms/op
                 executeQuery·p0.90:   47513.076 ms/op
                 executeQuery·p0.95:   47513.076 ms/op
                 executeQuery·p0.99:   47513.076 ms/op
                 executeQuery·p0.999:  47513.076 ms/op
                 executeQuery·p0.9999: 47513.076 ms/op
                 executeQuery·p1.00:   47513.076 ms/op


# Run progress: 17.26% complete, ETA 08:46:01
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_996334896 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_996334896() {
        this(4);
    }
    public KeyValueMap_996334896(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_996334896 aggregation_state_map = new KeyValueMap_996334896();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

48184.164 ms/op
# Warmup Iteration   2: 81872.814 ms/op
# Warmup Iteration   3: 47445.967 ms/op
# Warmup Iteration   4: 50264.539 ms/op
# Warmup Iteration   5: 67914.170 ms/op
Iteration   1: 50331.648 ms/op
                 executeQuery·p0.00:   50331.648 ms/op
                 executeQuery·p0.50:   50331.648 ms/op
                 executeQuery·p0.90:   50331.648 ms/op
                 executeQuery·p0.95:   50331.648 ms/op
                 executeQuery·p0.99:   50331.648 ms/op
                 executeQuery·p0.999:  50331.648 ms/op
                 executeQuery·p0.9999: 50331.648 ms/op
                 executeQuery·p1.00:   50331.648 ms/op

Iteration   2: 47781.511 ms/op
                 executeQuery·p0.00:   47781.511 ms/op
                 executeQuery·p0.50:   47781.511 ms/op
                 executeQuery·p0.90:   47781.511 ms/op
                 executeQuery·p0.95:   47781.511 ms/op
                 executeQuery·p0.99:   47781.511 ms/op
                 executeQuery·p0.999:  47781.511 ms/op
                 executeQuery·p0.9999: 47781.511 ms/op
                 executeQuery·p1.00:   47781.511 ms/op

Iteration   3: 82007.032 ms/op
                 executeQuery·p0.00:   82007.032 ms/op
                 executeQuery·p0.50:   82007.032 ms/op
                 executeQuery·p0.90:   82007.032 ms/op
                 executeQuery·p0.95:   82007.032 ms/op
                 executeQuery·p0.99:   82007.032 ms/op
                 executeQuery·p0.999:  82007.032 ms/op
                 executeQuery·p0.9999: 82007.032 ms/op
                 executeQuery·p1.00:   82007.032 ms/op

Iteration   4: 47647.293 ms/op
                 executeQuery·p0.00:   47647.293 ms/op
                 executeQuery·p0.50:   47647.293 ms/op
                 executeQuery·p0.90:   47647.293 ms/op
                 executeQuery·p0.95:   47647.293 ms/op
                 executeQuery·p0.99:   47647.293 ms/op
                 executeQuery·p0.999:  47647.293 ms/op
                 executeQuery·p0.9999: 47647.293 ms/op
                 executeQuery·p1.00:   47647.293 ms/op

Iteration   5: 50600.083 ms/op
                 executeQuery·p0.00:   50600.083 ms/op
                 executeQuery·p0.50:   50600.083 ms/op
                 executeQuery·p0.90:   50600.083 ms/op
                 executeQuery·p0.95:   50600.083 ms/op
                 executeQuery·p0.99:   50600.083 ms/op
                 executeQuery·p0.999:  50600.083 ms/op
                 executeQuery·p0.9999: 50600.083 ms/op
                 executeQuery·p1.00:   50600.083 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  59263.838 ±(99.9%) 23688.864 ms/op

  Histogram, ms/op:
    [40000.000, 45000.000) = 0 
    [45000.000, 50000.000) = 4 
    [50000.000, 55000.000) = 2 
    [55000.000, 60000.000) = 1 
    [60000.000, 65000.000) = 0 
    [65000.000, 70000.000) = 0 
    [70000.000, 75000.000) = 0 
    [75000.000, 80000.000) = 0 
    [80000.000, 85000.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =  47513.076 ms/op
     p(50.0000) =  50465.866 ms/op
     p(90.0000) =  82007.032 ms/op
     p(95.0000) =  82007.032 ms/op
     p(99.0000) =  82007.032 ms/op
     p(99.9000) =  82007.032 ms/op
     p(99.9900) =  82007.032 ms/op
     p(99.9990) =  82007.032 ms/op
     p(99.9999) =  82007.032 ms/op
    p(100.0000) =  82007.032 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 17.86% complete, ETA 09:32:28
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

355.070 ±(99.9%) 13.574 ms/op
# Warmup Iteration   2: 355.558 ±(99.9%) 3.171 ms/op
# Warmup Iteration   3: 363.706 ±(99.9%) 12.409 ms/op
# Warmup Iteration   4: 354.256 ±(99.9%) 2.495 ms/op
# Warmup Iteration   5: 356.172 ±(99.9%) 2.730 ms/op
Iteration   1: 360.617 ±(99.9%) 9.195 ms/op
                 executeQuery·p0.00:   352.846 ms/op
                 executeQuery·p0.50:   355.729 ms/op
                 executeQuery·p0.90:   378.588 ms/op
                 executeQuery·p0.95:   398.092 ms/op
                 executeQuery·p0.99:   413.663 ms/op
                 executeQuery·p0.999:  413.663 ms/op
                 executeQuery·p0.9999: 413.663 ms/op
                 executeQuery·p1.00:   413.663 ms/op

Iteration   2: 356.227 ±(99.9%) 1.391 ms/op
                 executeQuery·p0.00:   353.370 ms/op
                 executeQuery·p0.50:   356.516 ms/op
                 executeQuery·p0.90:   359.137 ms/op
                 executeQuery·p0.95:   359.924 ms/op
                 executeQuery·p0.99:   360.186 ms/op
                 executeQuery·p0.999:  360.186 ms/op
                 executeQuery·p0.9999: 360.186 ms/op
                 executeQuery·p1.00:   360.186 ms/op

Iteration   3: 359.025 ±(99.9%) 8.734 ms/op
                 executeQuery·p0.00:   353.370 ms/op
                 executeQuery·p0.50:   354.419 ms/op
                 executeQuery·p0.90:   377.173 ms/op
                 executeQuery·p0.95:   400.608 ms/op
                 executeQuery·p0.99:   410.518 ms/op
                 executeQuery·p0.999:  410.518 ms/op
                 executeQuery·p0.9999: 410.518 ms/op
                 executeQuery·p1.00:   410.518 ms/op

Iteration   4: 361.497 ±(99.9%) 12.576 ms/op
                 executeQuery·p0.00:   353.370 ms/op
                 executeQuery·p0.50:   353.894 ms/op
                 executeQuery·p0.90:   409.521 ms/op
                 executeQuery·p0.95:   409.993 ms/op
                 executeQuery·p0.99:   409.993 ms/op
                 executeQuery·p0.999:  409.993 ms/op
                 executeQuery·p0.9999: 409.993 ms/op
                 executeQuery·p1.00:   409.993 ms/op

Iteration   5: 359.699 ±(99.9%) 5.623 ms/op
                 executeQuery·p0.00:   353.894 ms/op
                 executeQuery·p0.50:   354.419 ms/op
                 executeQuery·p0.90:   376.439 ms/op
                 executeQuery·p0.95:   376.727 ms/op
                 executeQuery·p0.99:   376.963 ms/op
                 executeQuery·p0.999:  376.963 ms/op
                 executeQuery·p0.9999: 376.963 ms/op
                 executeQuery·p1.00:   376.963 ms/op


# Run progress: 18.45% complete, ETA 09:17:37
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

328.390 ±(99.9%) 23.304 ms/op
# Warmup Iteration   2: 325.177 ±(99.9%) 4.922 ms/op
# Warmup Iteration   3: 336.051 ±(99.9%) 31.469 ms/op
# Warmup Iteration   4: 332.661 ±(99.9%) 9.752 ms/op
# Warmup Iteration   5: 330.352 ±(99.9%) 7.930 ms/op
Iteration   1: 319.504 ±(99.9%) 0.986 ms/op
                 executeQuery·p0.00:   318.243 ms/op
                 executeQuery·p0.50:   318.767 ms/op
                 executeQuery·p0.90:   321.965 ms/op
                 executeQuery·p0.95:   323.486 ms/op
                 executeQuery·p0.99:   323.486 ms/op
                 executeQuery·p0.999:  323.486 ms/op
                 executeQuery·p0.9999: 323.486 ms/op
                 executeQuery·p1.00:   323.486 ms/op

Iteration   2: 321.659 ±(99.9%) 1.693 ms/op
                 executeQuery·p0.00:   317.719 ms/op
                 executeQuery·p0.50:   321.913 ms/op
                 executeQuery·p0.90:   325.478 ms/op
                 executeQuery·p0.95:   327.051 ms/op
                 executeQuery·p0.99:   327.680 ms/op
                 executeQuery·p0.999:  327.680 ms/op
                 executeQuery·p0.9999: 327.680 ms/op
                 executeQuery·p1.00:   327.680 ms/op

Iteration   3: 324.365 ±(99.9%) 1.430 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   324.010 ms/op
                 executeQuery·p0.90:   327.156 ms/op
                 executeQuery·p0.95:   328.309 ms/op
                 executeQuery·p0.99:   329.253 ms/op
                 executeQuery·p0.999:  329.253 ms/op
                 executeQuery·p0.9999: 329.253 ms/op
                 executeQuery·p1.00:   329.253 ms/op

Iteration   4: 323.181 ±(99.9%) 2.443 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   321.913 ms/op
                 executeQuery·p0.90:   329.358 ms/op
                 executeQuery·p0.95:   334.601 ms/op
                 executeQuery·p0.99:   338.690 ms/op
                 executeQuery·p0.999:  338.690 ms/op
                 executeQuery·p0.9999: 338.690 ms/op
                 executeQuery·p1.00:   338.690 ms/op

Iteration   5: 322.251 ±(99.9%) 0.439 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   321.913 ms/op
                 executeQuery·p0.90:   322.857 ms/op
                 executeQuery·p0.95:   324.115 ms/op
                 executeQuery·p0.99:   325.059 ms/op
                 executeQuery·p0.999:  325.059 ms/op
                 executeQuery·p0.9999: 325.059 ms/op
                 executeQuery·p1.00:   325.059 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 297
  mean =    339.843 ±(99.9%) 3.946 ms/op

  Histogram, ms/op:
    [310.000, 320.000) = 32 
    [320.000, 330.000) = 121 
    [330.000, 340.000) = 3 
    [340.000, 350.000) = 0 
    [350.000, 360.000) = 116 
    [360.000, 370.000) = 9 
    [370.000, 380.000) = 9 
    [380.000, 390.000) = 2 
    [390.000, 400.000) = 0 
    [400.000, 410.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    317.719 ms/op
     p(50.0000) =    327.156 ms/op
     p(90.0000) =    358.298 ms/op
     p(95.0000) =    375.967 ms/op
     p(99.0000) =    410.004 ms/op
     p(99.9000) =    413.663 ms/op
     p(99.9900) =    413.663 ms/op
     p(99.9990) =    413.663 ms/op
     p(99.9999) =    413.663 ms/op
    p(100.0000) =    413.663 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 19.05% complete, ETA 09:03:30
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

446.306 ±(99.9%) 15.172 ms/op
# Warmup Iteration   2: 440.607 ±(99.9%) 2.706 ms/op
# Warmup Iteration   3: 439.650 ±(99.9%) 1.224 ms/op
# Warmup Iteration   4: 444.368 ±(99.9%) 3.363 ms/op
# Warmup Iteration   5: 440.630 ±(99.9%) 2.904 ms/op
Iteration   1: 440.106 ±(99.9%) 3.074 ms/op
                 executeQuery·p0.00:   438.829 ms/op
                 executeQuery·p0.50:   439.353 ms/op
                 executeQuery·p0.90:   441.031 ms/op
                 executeQuery·p0.95:   454.453 ms/op
                 executeQuery·p0.99:   457.703 ms/op
                 executeQuery·p0.999:  457.703 ms/op
                 executeQuery·p0.9999: 457.703 ms/op
                 executeQuery·p1.00:   457.703 ms/op

Iteration   2: 442.226 ±(99.9%) 1.722 ms/op
                 executeQuery·p0.00:   440.926 ms/op
                 executeQuery·p0.50:   441.450 ms/op
                 executeQuery·p0.90:   444.282 ms/op
                 executeQuery·p0.95:   450.154 ms/op
                 executeQuery·p0.99:   451.412 ms/op
                 executeQuery·p0.999:  451.412 ms/op
                 executeQuery·p0.9999: 451.412 ms/op
                 executeQuery·p1.00:   451.412 ms/op

Iteration   3: 441.906 ±(99.9%) 0.456 ms/op
                 executeQuery·p0.00:   440.926 ms/op
                 executeQuery·p0.50:   441.975 ms/op
                 executeQuery·p0.90:   442.499 ms/op
                 executeQuery·p0.95:   443.338 ms/op
                 executeQuery·p0.99:   443.548 ms/op
                 executeQuery·p0.999:  443.548 ms/op
                 executeQuery·p0.9999: 443.548 ms/op
                 executeQuery·p1.00:   443.548 ms/op

Iteration   4: 444.551 ±(99.9%) 1.789 ms/op
                 executeQuery·p0.00:   441.450 ms/op
                 executeQuery·p0.50:   444.596 ms/op
                 executeQuery·p0.90:   448.266 ms/op
                 executeQuery·p0.95:   448.686 ms/op
                 executeQuery·p0.99:   448.791 ms/op
                 executeQuery·p0.999:  448.791 ms/op
                 executeQuery·p0.9999: 448.791 ms/op
                 executeQuery·p1.00:   448.791 ms/op

Iteration   5: 445.280 ±(99.9%) 1.308 ms/op
                 executeQuery·p0.00:   442.499 ms/op
                 executeQuery·p0.50:   445.121 ms/op
                 executeQuery·p0.90:   447.218 ms/op
                 executeQuery·p0.95:   449.315 ms/op
                 executeQuery·p0.99:   449.839 ms/op
                 executeQuery·p0.999:  449.839 ms/op
                 executeQuery·p0.9999: 449.839 ms/op
                 executeQuery·p1.00:   449.839 ms/op


# Run progress: 19.64% complete, ETA 08:50:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

452.027 ±(99.9%) 23.331 ms/op
# Warmup Iteration   2: 443.776 ±(99.9%) 0.967 ms/op
# Warmup Iteration   3: 443.434 ±(99.9%) 1.145 ms/op
# Warmup Iteration   4: 444.232 ±(99.9%) 2.535 ms/op
# Warmup Iteration   5: 445.234 ±(99.9%) 1.709 ms/op
Iteration   1: 442.567 ±(99.9%) 2.945 ms/op
                 executeQuery·p0.00:   438.305 ms/op
                 executeQuery·p0.50:   441.975 ms/op
                 executeQuery·p0.90:   446.064 ms/op
                 executeQuery·p0.95:   453.824 ms/op
                 executeQuery·p0.99:   455.606 ms/op
                 executeQuery·p0.999:  455.606 ms/op
                 executeQuery·p0.9999: 455.606 ms/op
                 executeQuery·p1.00:   455.606 ms/op

Iteration   2: 444.847 ±(99.9%) 2.920 ms/op
                 executeQuery·p0.00:   441.975 ms/op
                 executeQuery·p0.50:   443.548 ms/op
                 executeQuery·p0.90:   451.727 ms/op
                 executeQuery·p0.95:   454.872 ms/op
                 executeQuery·p0.99:   455.606 ms/op
                 executeQuery·p0.999:  455.606 ms/op
                 executeQuery·p0.9999: 455.606 ms/op
                 executeQuery·p1.00:   455.606 ms/op

Iteration   3: 446.351 ±(99.9%) 2.847 ms/op
                 executeQuery·p0.00:   441.975 ms/op
                 executeQuery·p0.50:   445.645 ms/op
                 executeQuery·p0.90:   452.041 ms/op
                 executeQuery·p0.95:   453.719 ms/op
                 executeQuery·p0.99:   454.033 ms/op
                 executeQuery·p0.999:  454.033 ms/op
                 executeQuery·p0.9999: 454.033 ms/op
                 executeQuery·p1.00:   454.033 ms/op

Iteration   4: 448.198 ±(99.9%) 3.320 ms/op
                 executeQuery·p0.00:   441.450 ms/op
                 executeQuery·p0.50:   446.693 ms/op
                 executeQuery·p0.90:   455.292 ms/op
                 executeQuery·p0.95:   457.389 ms/op
                 executeQuery·p0.99:   457.703 ms/op
                 executeQuery·p0.999:  457.703 ms/op
                 executeQuery·p0.9999: 457.703 ms/op
                 executeQuery·p1.00:   457.703 ms/op

Iteration   5: 447.605 ±(99.9%) 3.180 ms/op
                 executeQuery·p0.00:   443.548 ms/op
                 executeQuery·p0.50:   445.645 ms/op
                 executeQuery·p0.90:   455.292 ms/op
                 executeQuery·p0.95:   456.550 ms/op
                 executeQuery·p0.99:   456.655 ms/op
                 executeQuery·p0.999:  456.655 ms/op
                 executeQuery·p0.9999: 456.655 ms/op
                 executeQuery·p1.00:   456.655 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 230
  mean =    444.364 ±(99.9%) 0.881 ms/op

  Histogram, ms/op:
    [430.000, 432.500) = 0 
    [432.500, 435.000) = 0 
    [435.000, 437.500) = 0 
    [437.500, 440.000) = 27 
    [440.000, 442.500) = 71 
    [442.500, 445.000) = 47 
    [445.000, 447.500) = 48 
    [447.500, 450.000) = 15 
    [450.000, 452.500) = 10 
    [452.500, 455.000) = 5 
    [455.000, 457.500) = 5 

  Percentiles, ms/op:
      p(0.0000) =    438.305 ms/op
     p(50.0000) =    443.548 ms/op
     p(90.0000) =    449.839 ms/op
     p(95.0000) =    453.457 ms/op
     p(99.0000) =    457.378 ms/op
     p(99.9000) =    457.703 ms/op
     p(99.9900) =    457.703 ms/op
     p(99.9990) =    457.703 ms/op
     p(99.9999) =    457.703 ms/op
    p(100.0000) =    457.703 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 20.24% complete, ETA 08:37:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

669.970 ±(99.9%) 29.937 ms/op
# Warmup Iteration   2: 658.506 ±(99.9%) 4.583 ms/op
# Warmup Iteration   3: 659.065 ±(99.9%) 4.561 ms/op
# Warmup Iteration   4: 661.092 ±(99.9%) 6.153 ms/op
# Warmup Iteration   5: 658.375 ±(99.9%) 8.064 ms/op
Iteration   1: 661.092 ±(99.9%) 9.790 ms/op
                 executeQuery·p0.00:   649.069 ms/op
                 executeQuery·p0.50:   663.749 ms/op
                 executeQuery·p0.90:   672.137 ms/op
                 executeQuery·p0.95:   672.137 ms/op
                 executeQuery·p0.99:   672.137 ms/op
                 executeQuery·p0.999:  672.137 ms/op
                 executeQuery·p0.9999: 672.137 ms/op
                 executeQuery·p1.00:   672.137 ms/op

Iteration   2: 662.141 ±(99.9%) 5.152 ms/op
                 executeQuery·p0.00:   655.360 ms/op
                 executeQuery·p0.50:   663.749 ms/op
                 executeQuery·p0.90:   668.572 ms/op
                 executeQuery·p0.95:   671.089 ms/op
                 executeQuery·p0.99:   671.089 ms/op
                 executeQuery·p0.999:  671.089 ms/op
                 executeQuery·p0.9999: 671.089 ms/op
                 executeQuery·p1.00:   671.089 ms/op

Iteration   3: 663.609 ±(99.9%) 4.735 ms/op
                 executeQuery·p0.00:   658.506 ms/op
                 executeQuery·p0.50:   662.700 ms/op
                 executeQuery·p0.90:   671.298 ms/op
                 executeQuery·p0.95:   676.332 ms/op
                 executeQuery·p0.99:   676.332 ms/op
                 executeQuery·p0.999:  676.332 ms/op
                 executeQuery·p0.9999: 676.332 ms/op
                 executeQuery·p1.00:   676.332 ms/op

Iteration   4: 664.657 ±(99.9%) 9.007 ms/op
                 executeQuery·p0.00:   653.263 ms/op
                 executeQuery·p0.50:   662.700 ms/op
                 executeQuery·p0.90:   681.574 ms/op
                 executeQuery·p0.95:   687.866 ms/op
                 executeQuery·p0.99:   687.866 ms/op
                 executeQuery·p0.999:  687.866 ms/op
                 executeQuery·p0.9999: 687.866 ms/op
                 executeQuery·p1.00:   687.866 ms/op

Iteration   5: 663.119 ±(99.9%) 3.489 ms/op
                 executeQuery·p0.00:   656.409 ms/op
                 executeQuery·p0.50:   662.700 ms/op
                 executeQuery·p0.90:   668.362 ms/op
                 executeQuery·p0.95:   672.137 ms/op
                 executeQuery·p0.99:   672.137 ms/op
                 executeQuery·p0.999:  672.137 ms/op
                 executeQuery·p0.9999: 672.137 ms/op
                 executeQuery·p1.00:   672.137 ms/op


# Run progress: 20.83% complete, ETA 08:25:34
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

664.238 ±(99.9%) 38.280 ms/op
# Warmup Iteration   2: 644.874 ±(99.9%) 3.045 ms/op
# Warmup Iteration   3: 644.022 ±(99.9%) 11.347 ms/op
# Warmup Iteration   4: 652.870 ±(99.9%) 5.414 ms/op
# Warmup Iteration   5: 660.952 ±(99.9%) 4.497 ms/op
Iteration   1: 666.545 ±(99.9%) 9.231 ms/op
                 executeQuery·p0.00:   653.263 ms/op
                 executeQuery·p0.50:   664.797 ms/op
                 executeQuery·p0.90:   685.978 ms/op
                 executeQuery·p0.95:   687.866 ms/op
                 executeQuery·p0.99:   687.866 ms/op
                 executeQuery·p0.999:  687.866 ms/op
                 executeQuery·p0.9999: 687.866 ms/op
                 executeQuery·p1.00:   687.866 ms/op

Iteration   2: 664.797 ±(99.9%) 11.024 ms/op
                 executeQuery·p0.00:   649.069 ms/op
                 executeQuery·p0.50:   666.894 ms/op
                 executeQuery·p0.90:   680.945 ms/op
                 executeQuery·p0.95:   684.720 ms/op
                 executeQuery·p0.99:   684.720 ms/op
                 executeQuery·p0.999:  684.720 ms/op
                 executeQuery·p0.9999: 684.720 ms/op
                 executeQuery·p1.00:   684.720 ms/op

Iteration   3: 659.345 ±(99.9%) 7.462 ms/op
                 executeQuery·p0.00:   649.069 ms/op
                 executeQuery·p0.50:   661.651 ms/op
                 executeQuery·p0.90:   667.314 ms/op
                 executeQuery·p0.95:   667.943 ms/op
                 executeQuery·p0.99:   667.943 ms/op
                 executeQuery·p0.999:  667.943 ms/op
                 executeQuery·p0.9999: 667.943 ms/op
                 executeQuery·p1.00:   667.943 ms/op

Iteration   4: 667.663 ±(99.9%) 8.308 ms/op
                 executeQuery·p0.00:   653.263 ms/op
                 executeQuery·p0.50:   667.943 ms/op
                 executeQuery·p0.90:   680.316 ms/op
                 executeQuery·p0.95:   684.720 ms/op
                 executeQuery·p0.99:   684.720 ms/op
                 executeQuery·p0.999:  684.720 ms/op
                 executeQuery·p0.9999: 684.720 ms/op
                 executeQuery·p1.00:   684.720 ms/op

Iteration   5: 667.593 ±(99.9%) 9.970 ms/op
                 executeQuery·p0.00:   654.311 ms/op
                 executeQuery·p0.50:   666.894 ms/op
                 executeQuery·p0.90:   681.574 ms/op
                 executeQuery·p0.95:   694.157 ms/op
                 executeQuery·p0.99:   694.157 ms/op
                 executeQuery·p0.999:  694.157 ms/op
                 executeQuery·p0.9999: 694.157 ms/op
                 executeQuery·p1.00:   694.157 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 150
  mean =    664.056 ±(99.9%) 2.156 ms/op

  Histogram, ms/op:
    [640.000, 645.000) = 0 
    [645.000, 650.000) = 9 
    [650.000, 655.000) = 7 
    [655.000, 660.000) = 16 
    [660.000, 665.000) = 63 
    [665.000, 670.000) = 28 
    [670.000, 675.000) = 17 
    [675.000, 680.000) = 4 
    [680.000, 685.000) = 3 
    [685.000, 690.000) = 2 
    [690.000, 695.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    649.069 ms/op
     p(50.0000) =    663.749 ms/op
     p(90.0000) =    672.137 ms/op
     p(95.0000) =    677.852 ms/op
     p(99.0000) =    690.949 ms/op
     p(99.9000) =    694.157 ms/op
     p(99.9900) =    694.157 ms/op
     p(99.9990) =    694.157 ms/op
     p(99.9999) =    694.157 ms/op
    p(100.0000) =    694.157 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 21.43% complete, ETA 08:14:09
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1106.248 ms/op
# Warmup Iteration   2: 1015.546 ms/op
# Warmup Iteration   3: 815.792 ms/op
# Warmup Iteration   4: 887.620 ms/op
# Warmup Iteration   5: 1194.328 ms/op
Iteration   1: 1491.075 ms/op
                 executeQuery·p0.00:   1486.881 ms/op
                 executeQuery·p0.50:   1491.075 ms/op
                 executeQuery·p0.90:   1495.269 ms/op
                 executeQuery·p0.95:   1495.269 ms/op
                 executeQuery·p0.99:   1495.269 ms/op
                 executeQuery·p0.999:  1495.269 ms/op
                 executeQuery·p0.9999: 1495.269 ms/op
                 executeQuery·p1.00:   1495.269 ms/op

Iteration   2: 1455.423 ms/op
                 executeQuery·p0.00:   1428.161 ms/op
                 executeQuery·p0.50:   1455.423 ms/op
                 executeQuery·p0.90:   1482.686 ms/op
                 executeQuery·p0.95:   1482.686 ms/op
                 executeQuery·p0.99:   1482.686 ms/op
                 executeQuery·p0.999:  1482.686 ms/op
                 executeQuery·p0.9999: 1482.686 ms/op
                 executeQuery·p1.00:   1482.686 ms/op

Iteration   3: 1237.844 ms/op
                 executeQuery·p0.00:   948.961 ms/op
                 executeQuery·p0.50:   1237.844 ms/op
                 executeQuery·p0.90:   1526.727 ms/op
                 executeQuery·p0.95:   1526.727 ms/op
                 executeQuery·p0.99:   1526.727 ms/op
                 executeQuery·p0.999:  1526.727 ms/op
                 executeQuery·p0.9999: 1526.727 ms/op
                 executeQuery·p1.00:   1526.727 ms/op

Iteration   4: 950.534 ms/op
                 executeQuery·p0.00:   905.970 ms/op
                 executeQuery·p0.50:   950.534 ms/op
                 executeQuery·p0.90:   995.099 ms/op
                 executeQuery·p0.95:   995.099 ms/op
                 executeQuery·p0.99:   995.099 ms/op
                 executeQuery·p0.999:  995.099 ms/op
                 executeQuery·p0.9999: 995.099 ms/op
                 executeQuery·p1.00:   995.099 ms/op

Iteration   5: 805.831 ms/op
                 executeQuery·p0.00:   726.663 ms/op
                 executeQuery·p0.50:   805.831 ms/op
                 executeQuery·p0.90:   884.998 ms/op
                 executeQuery·p0.95:   884.998 ms/op
                 executeQuery·p0.99:   884.998 ms/op
                 executeQuery·p0.999:  884.998 ms/op
                 executeQuery·p0.9999: 884.998 ms/op
                 executeQuery·p1.00:   884.998 ms/op


# Run progress: 22.02% complete, ETA 08:07:15
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

1117.258 ms/op
# Warmup Iteration   2: 1008.730 ms/op
# Warmup Iteration   3: 905.970 ms/op
# Warmup Iteration   4: 932.708 ms/op
# Warmup Iteration   5: 999.293 ms/op
Iteration   1: 1538.261 ms/op
                 executeQuery·p0.00:   1505.755 ms/op
                 executeQuery·p0.50:   1538.261 ms/op
                 executeQuery·p0.90:   1570.767 ms/op
                 executeQuery·p0.95:   1570.767 ms/op
                 executeQuery·p0.99:   1570.767 ms/op
                 executeQuery·p0.999:  1570.767 ms/op
                 executeQuery·p0.9999: 1570.767 ms/op
                 executeQuery·p1.00:   1570.767 ms/op

Iteration   2: 1524.630 ms/op
                 executeQuery·p0.00:   1465.909 ms/op
                 executeQuery·p0.50:   1524.630 ms/op
                 executeQuery·p0.90:   1583.350 ms/op
                 executeQuery·p0.95:   1583.350 ms/op
                 executeQuery·p0.99:   1583.350 ms/op
                 executeQuery·p0.999:  1583.350 ms/op
                 executeQuery·p0.9999: 1583.350 ms/op
                 executeQuery·p1.00:   1583.350 ms/op

Iteration   3: 1225.785 ms/op
                 executeQuery·p0.00:   937.427 ms/op
                 executeQuery·p0.50:   1225.785 ms/op
                 executeQuery·p0.90:   1514.144 ms/op
                 executeQuery·p0.95:   1514.144 ms/op
                 executeQuery·p0.99:   1514.144 ms/op
                 executeQuery·p0.999:  1514.144 ms/op
                 executeQuery·p0.9999: 1514.144 ms/op
                 executeQuery·p1.00:   1514.144 ms/op

Iteration   4: 958.398 ms/op
                 executeQuery·p0.00:   957.350 ms/op
                 executeQuery·p0.50:   958.398 ms/op
                 executeQuery·p0.90:   959.447 ms/op
                 executeQuery·p0.95:   959.447 ms/op
                 executeQuery·p0.99:   959.447 ms/op
                 executeQuery·p0.999:  959.447 ms/op
                 executeQuery·p0.9999: 959.447 ms/op
                 executeQuery·p1.00:   959.447 ms/op

Iteration   5: 967.836 ms/op
                 executeQuery·p0.00:   962.593 ms/op
                 executeQuery·p0.50:   967.836 ms/op
                 executeQuery·p0.90:   973.079 ms/op
                 executeQuery·p0.95:   973.079 ms/op
                 executeQuery·p0.99:   973.079 ms/op
                 executeQuery·p0.999:  973.079 ms/op
                 executeQuery·p0.9999: 973.079 ms/op
                 executeQuery·p1.00:   973.079 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   1215.562 ±(99.9%) 264.209 ms/op

  Histogram, ms/op:
    [ 700.000,  750.000) = 1 
    [ 750.000,  800.000) = 0 
    [ 800.000,  850.000) = 0 
    [ 850.000,  900.000) = 1 
    [ 900.000,  950.000) = 3 
    [ 950.000, 1000.000) = 5 
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 0 
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 0 
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 1 
    [1450.000, 1500.000) = 4 
    [1500.000, 1550.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    726.663 ms/op
     p(50.0000) =   1211.630 ms/op
     p(90.0000) =   1566.363 ms/op
     p(95.0000) =   1582.721 ms/op
     p(99.0000) =   1583.350 ms/op
     p(99.9000) =   1583.350 ms/op
     p(99.9900) =   1583.350 ms/op
     p(99.9990) =   1583.350 ms/op
     p(99.9999) =   1583.350 ms/op
    p(100.0000) =   1583.350 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 22.62% complete, ETA 08:00:55
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2826.961 ms/op
# Warmup Iteration   2: 2956.984 ms/op
# Warmup Iteration   3: 2520.777 ms/op
# Warmup Iteration   4: 2646.606 ms/op
# Warmup Iteration   5: 4206.887 ms/op
Iteration   1: 4181.721 ms/op
                 executeQuery·p0.00:   4181.721 ms/op
                 executeQuery·p0.50:   4181.721 ms/op
                 executeQuery·p0.90:   4181.721 ms/op
                 executeQuery·p0.95:   4181.721 ms/op
                 executeQuery·p0.99:   4181.721 ms/op
                 executeQuery·p0.999:  4181.721 ms/op
                 executeQuery·p0.9999: 4181.721 ms/op
                 executeQuery·p1.00:   4181.721 ms/op

Iteration   2: 4227.858 ms/op
                 executeQuery·p0.00:   4227.858 ms/op
                 executeQuery·p0.50:   4227.858 ms/op
                 executeQuery·p0.90:   4227.858 ms/op
                 executeQuery·p0.95:   4227.858 ms/op
                 executeQuery·p0.99:   4227.858 ms/op
                 executeQuery·p0.999:  4227.858 ms/op
                 executeQuery·p0.9999: 4227.858 ms/op
                 executeQuery·p1.00:   4227.858 ms/op

Iteration   3: 4194.304 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4194.304 ms/op
                 executeQuery·p0.90:   4194.304 ms/op
                 executeQuery·p0.95:   4194.304 ms/op
                 executeQuery·p0.99:   4194.304 ms/op
                 executeQuery·p0.999:  4194.304 ms/op
                 executeQuery·p0.9999: 4194.304 ms/op
                 executeQuery·p1.00:   4194.304 ms/op

Iteration   4: 4261.413 ms/op
                 executeQuery·p0.00:   4261.413 ms/op
                 executeQuery·p0.50:   4261.413 ms/op
                 executeQuery·p0.90:   4261.413 ms/op
                 executeQuery·p0.95:   4261.413 ms/op
                 executeQuery·p0.99:   4261.413 ms/op
                 executeQuery·p0.999:  4261.413 ms/op
                 executeQuery·p0.9999: 4261.413 ms/op
                 executeQuery·p1.00:   4261.413 ms/op

Iteration   5: 2529.165 ms/op
                 executeQuery·p0.00:   2529.165 ms/op
                 executeQuery·p0.50:   2529.165 ms/op
                 executeQuery·p0.90:   2529.165 ms/op
                 executeQuery·p0.95:   2529.165 ms/op
                 executeQuery·p0.99:   2529.165 ms/op
                 executeQuery·p0.999:  2529.165 ms/op
                 executeQuery·p0.9999: 2529.165 ms/op
                 executeQuery·p1.00:   2529.165 ms/op


# Run progress: 23.21% complete, ETA 08:03:20
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2814.378 ms/op
# Warmup Iteration   2: 2835.350 ms/op
# Warmup Iteration   3: 2545.943 ms/op
# Warmup Iteration   4: 2759.852 ms/op
# Warmup Iteration   5: 4148.167 ms/op
Iteration   1: 4148.167 ms/op
                 executeQuery·p0.00:   4148.167 ms/op
                 executeQuery·p0.50:   4148.167 ms/op
                 executeQuery·p0.90:   4148.167 ms/op
                 executeQuery·p0.95:   4148.167 ms/op
                 executeQuery·p0.99:   4148.167 ms/op
                 executeQuery·p0.999:  4148.167 ms/op
                 executeQuery·p0.9999: 4148.167 ms/op
                 executeQuery·p1.00:   4148.167 ms/op

Iteration   2: 4177.527 ms/op
                 executeQuery·p0.00:   4177.527 ms/op
                 executeQuery·p0.50:   4177.527 ms/op
                 executeQuery·p0.90:   4177.527 ms/op
                 executeQuery·p0.95:   4177.527 ms/op
                 executeQuery·p0.99:   4177.527 ms/op
                 executeQuery·p0.999:  4177.527 ms/op
                 executeQuery·p0.9999: 4177.527 ms/op
                 executeQuery·p1.00:   4177.527 ms/op

Iteration   3: 4194.304 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4194.304 ms/op
                 executeQuery·p0.90:   4194.304 ms/op
                 executeQuery·p0.95:   4194.304 ms/op
                 executeQuery·p0.99:   4194.304 ms/op
                 executeQuery·p0.999:  4194.304 ms/op
                 executeQuery·p0.9999: 4194.304 ms/op
                 executeQuery·p1.00:   4194.304 ms/op

Iteration   4: 3070.231 ms/op
                 executeQuery·p0.00:   3070.231 ms/op
                 executeQuery·p0.50:   3070.231 ms/op
                 executeQuery·p0.90:   3070.231 ms/op
                 executeQuery·p0.95:   3070.231 ms/op
                 executeQuery·p0.99:   3070.231 ms/op
                 executeQuery·p0.999:  3070.231 ms/op
                 executeQuery·p0.9999: 3070.231 ms/op
                 executeQuery·p1.00:   3070.231 ms/op

Iteration   5: 2499.805 ms/op
                 executeQuery·p0.00:   2499.805 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2499.805 ms/op
                 executeQuery·p0.95:   2499.805 ms/op
                 executeQuery·p0.99:   2499.805 ms/op
                 executeQuery·p0.999:  2499.805 ms/op
                 executeQuery·p0.9999: 2499.805 ms/op
                 executeQuery·p1.00:   2499.805 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   3748.449 ±(99.9%) 1118.716 ms/op

  Histogram, ms/op:
    [2000.000, 2250.000) = 0 
    [2250.000, 2500.000) = 1 
    [2500.000, 2750.000) = 1 
    [2750.000, 3000.000) = 0 
    [3000.000, 3250.000) = 1 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 0 
    [3750.000, 4000.000) = 0 
    [4000.000, 4250.000) = 6 
    [4250.000, 4500.000) = 1 
    [4500.000, 4750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2499.805 ms/op
     p(50.0000) =   4179.624 ms/op
     p(90.0000) =   4258.057 ms/op
     p(95.0000) =   4261.413 ms/op
     p(99.0000) =   4261.413 ms/op
     p(99.9000) =   4261.413 ms/op
     p(99.9900) =   4261.413 ms/op
     p(99.9990) =   4261.413 ms/op
     p(99.9999) =   4261.413 ms/op
    p(100.0000) =   4261.413 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 23.81% complete, ETA 08:05:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3249.013 ±(99.9%) 6125.455 ms/op
# Warmup Iteration   2: 3489.661 ±(99.9%) 202.452 ms/op
# Warmup Iteration   3: 3495.253 ±(99.9%) 377.463 ms/op
# Warmup Iteration   4: 3482.670 ±(99.9%) 44.179 ms/op
# Warmup Iteration   5: 3484.069 ±(99.9%) 88.357 ms/op
Iteration   1: 3527.410 ±(99.9%) 1457.896 ms/op
                 executeQuery·p0.00:   3481.272 ms/op
                 executeQuery·p0.50:   3481.272 ms/op
                 executeQuery·p0.90:   3619.684 ms/op
                 executeQuery·p0.95:   3619.684 ms/op
                 executeQuery·p0.99:   3619.684 ms/op
                 executeQuery·p0.999:  3619.684 ms/op
                 executeQuery·p0.9999: 3619.684 ms/op
                 executeQuery·p1.00:   3619.684 ms/op

Iteration   2: 3485.467 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   3485.467 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op

Iteration   3: 3484.069 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3481.272 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op

Iteration   4: 3488.263 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   3481.272 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3498.050 ms/op
                 executeQuery·p0.95:   3498.050 ms/op
                 executeQuery·p0.99:   3498.050 ms/op
                 executeQuery·p0.999:  3498.050 ms/op
                 executeQuery·p0.9999: 3498.050 ms/op
                 executeQuery·p1.00:   3498.050 ms/op

Iteration   5: 3484.069 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3481.272 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op


# Run progress: 24.40% complete, ETA 07:55:26
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3225.420 ±(99.9%) 6479.846 ms/op
# Warmup Iteration   2: 3492.457 ±(99.9%) 116.886 ms/op
# Warmup Iteration   3: 3482.670 ±(99.9%) 44.179 ms/op
# Warmup Iteration   4: 3485.467 ±(99.9%) 76.520 ms/op
# Warmup Iteration   5: 3486.865 ±(99.9%) 116.886 ms/op
Iteration   1: 3535.798 ±(99.9%) 1590.432 ms/op
                 executeQuery·p0.00:   3485.467 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3636.462 ms/op
                 executeQuery·p0.95:   3636.462 ms/op
                 executeQuery·p0.99:   3636.462 ms/op
                 executeQuery·p0.999:  3636.462 ms/op
                 executeQuery·p0.9999: 3636.462 ms/op
                 executeQuery·p1.00:   3636.462 ms/op

Iteration   2: 3496.651 ±(99.9%) 421.438 ms/op
                 executeQuery·p0.00:   3481.272 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3523.215 ms/op
                 executeQuery·p0.95:   3523.215 ms/op
                 executeQuery·p0.99:   3523.215 ms/op
                 executeQuery·p0.999:  3523.215 ms/op
                 executeQuery·p0.9999: 3523.215 ms/op
                 executeQuery·p1.00:   3523.215 ms/op

Iteration   3: 3491.059 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3489.661 ms/op
                 executeQuery·p0.50:   3489.661 ms/op
                 executeQuery·p0.90:   3493.855 ms/op
                 executeQuery·p0.95:   3493.855 ms/op
                 executeQuery·p0.99:   3493.855 ms/op
                 executeQuery·p0.999:  3493.855 ms/op
                 executeQuery·p0.9999: 3493.855 ms/op
                 executeQuery·p1.00:   3493.855 ms/op

Iteration   4: 3489.661 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   3489.661 ms/op
                 executeQuery·p0.50:   3489.661 ms/op
                 executeQuery·p0.90:   3489.661 ms/op
                 executeQuery·p0.95:   3489.661 ms/op
                 executeQuery·p0.99:   3489.661 ms/op
                 executeQuery·p0.999:  3489.661 ms/op
                 executeQuery·p0.9999: 3489.661 ms/op
                 executeQuery·p1.00:   3489.661 ms/op

Iteration   5: 3491.059 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3489.661 ms/op
                 executeQuery·p0.50:   3489.661 ms/op
                 executeQuery·p0.90:   3493.855 ms/op
                 executeQuery·p0.95:   3493.855 ms/op
                 executeQuery·p0.99:   3493.855 ms/op
                 executeQuery·p0.999:  3493.855 ms/op
                 executeQuery·p0.9999: 3493.855 ms/op
                 executeQuery·p1.00:   3493.855 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   3497.350 ±(99.9%) 24.353 ms/op

  Histogram, ms/op:
    [3400.000, 3425.000) = 0 
    [3425.000, 3450.000) = 0 
    [3450.000, 3475.000) = 0 
    [3475.000, 3500.000) = 27 
    [3500.000, 3525.000) = 1 
    [3525.000, 3550.000) = 0 
    [3550.000, 3575.000) = 0 
    [3575.000, 3600.000) = 0 
    [3600.000, 3625.000) = 1 
    [3625.000, 3650.000) = 1 
    [3650.000, 3675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3481.272 ms/op
     p(50.0000) =   3485.467 ms/op
     p(90.0000) =   3520.699 ms/op
     p(95.0000) =   3627.234 ms/op
     p(99.0000) =   3636.462 ms/op
     p(99.9000) =   3636.462 ms/op
     p(99.9900) =   3636.462 ms/op
     p(99.9990) =   3636.462 ms/op
     p(99.9999) =   3636.462 ms/op
    p(100.0000) =   3636.462 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 25.00% complete, ETA 07:45:53
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4377.455 ±(99.9%) 7002.425 ms/op
# Warmup Iteration   2: 4376.057 ±(99.9%) 3008.046 ms/op
# Warmup Iteration   3: 4297.763 ±(99.9%) 233.772 ms/op
# Warmup Iteration   4: 4299.162 ±(99.9%) 501.773 ms/op
# Warmup Iteration   5: 4310.346 ±(99.9%) 448.365 ms/op
Iteration   1: 4320.133 ±(99.9%) 459.118 ms/op
                 executeQuery·p0.00:   4294.967 ms/op
                 executeQuery·p0.50:   4320.133 ms/op
                 executeQuery·p0.90:   4345.299 ms/op
                 executeQuery·p0.95:   4345.299 ms/op
                 executeQuery·p0.99:   4345.299 ms/op
                 executeQuery·p0.999:  4345.299 ms/op
                 executeQuery·p0.9999: 4345.299 ms/op
                 executeQuery·p1.00:   4345.299 ms/op

Iteration   2: 4307.550 ±(99.9%) 350.657 ms/op
                 executeQuery·p0.00:   4290.773 ms/op
                 executeQuery·p0.50:   4303.356 ms/op
                 executeQuery·p0.90:   4328.522 ms/op
                 executeQuery·p0.95:   4328.522 ms/op
                 executeQuery·p0.99:   4328.522 ms/op
                 executeQuery·p0.999:  4328.522 ms/op
                 executeQuery·p0.9999: 4328.522 ms/op
                 executeQuery·p1.00:   4328.522 ms/op

Iteration   3: 4306.152 ±(99.9%) 233.772 ms/op
                 executeQuery·p0.00:   4294.967 ms/op
                 executeQuery·p0.50:   4303.356 ms/op
                 executeQuery·p0.90:   4320.133 ms/op
                 executeQuery·p0.95:   4320.133 ms/op
                 executeQuery·p0.99:   4320.133 ms/op
                 executeQuery·p0.999:  4320.133 ms/op
                 executeQuery·p0.9999: 4320.133 ms/op
                 executeQuery·p1.00:   4320.133 ms/op

Iteration   4: 4339.707 ±(99.9%) 618.502 ms/op
                 executeQuery·p0.00:   4320.133 ms/op
                 executeQuery·p0.50:   4320.133 ms/op
                 executeQuery·p0.90:   4378.853 ms/op
                 executeQuery·p0.95:   4378.853 ms/op
                 executeQuery·p0.99:   4378.853 ms/op
                 executeQuery·p0.999:  4378.853 ms/op
                 executeQuery·p0.9999: 4378.853 ms/op
                 executeQuery·p1.00:   4378.853 ms/op

Iteration   5: 4336.910 ±(99.9%) 667.083 ms/op
                 executeQuery·p0.00:   4311.745 ms/op
                 executeQuery·p0.50:   4320.133 ms/op
                 executeQuery·p0.90:   4378.853 ms/op
                 executeQuery·p0.95:   4378.853 ms/op
                 executeQuery·p0.99:   4378.853 ms/op
                 executeQuery·p0.999:  4378.853 ms/op
                 executeQuery·p0.9999: 4378.853 ms/op
                 executeQuery·p1.00:   4378.853 ms/op


# Run progress: 25.60% complete, ETA 07:37:48
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

4321.531 ±(99.9%) 4923.694 ms/op
# Warmup Iteration   2: 4434.777 ±(99.9%) 3107.618 ms/op
# Warmup Iteration   3: 4328.522 ±(99.9%) 404.904 ms/op
# Warmup Iteration   4: 4314.541 ±(99.9%) 176.715 ms/op
# Warmup Iteration   5: 4314.541 ±(99.9%) 385.141 ms/op
Iteration   1: 4359.280 ±(99.9%) 842.876 ms/op
                 executeQuery·p0.00:   4328.522 ms/op
                 executeQuery·p0.50:   4336.910 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   2: 4328.522 ±(99.9%) 306.079 ms/op
                 executeQuery·p0.00:   4311.745 ms/op
                 executeQuery·p0.50:   4328.522 ms/op
                 executeQuery·p0.90:   4345.299 ms/op
                 executeQuery·p0.95:   4345.299 ms/op
                 executeQuery·p0.99:   4345.299 ms/op
                 executeQuery·p0.999:  4345.299 ms/op
                 executeQuery·p0.9999: 4345.299 ms/op
                 executeQuery·p1.00:   4345.299 ms/op

Iteration   3: 4320.133 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   4311.745 ms/op
                 executeQuery·p0.50:   4320.133 ms/op
                 executeQuery·p0.90:   4328.522 ms/op
                 executeQuery·p0.95:   4328.522 ms/op
                 executeQuery·p0.99:   4328.522 ms/op
                 executeQuery·p0.999:  4328.522 ms/op
                 executeQuery·p0.9999: 4328.522 ms/op
                 executeQuery·p1.00:   4328.522 ms/op

Iteration   4: 4311.745 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   4303.356 ms/op
                 executeQuery·p0.50:   4311.745 ms/op
                 executeQuery·p0.90:   4320.133 ms/op
                 executeQuery·p0.95:   4320.133 ms/op
                 executeQuery·p0.99:   4320.133 ms/op
                 executeQuery·p0.999:  4320.133 ms/op
                 executeQuery·p0.9999: 4320.133 ms/op
                 executeQuery·p1.00:   4320.133 ms/op

Iteration   5: 4314.541 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   4311.745 ms/op
                 executeQuery·p0.50:   4311.745 ms/op
                 executeQuery·p0.90:   4320.133 ms/op
                 executeQuery·p0.95:   4320.133 ms/op
                 executeQuery·p0.99:   4320.133 ms/op
                 executeQuery·p0.999:  4320.133 ms/op
                 executeQuery·p0.9999: 4320.133 ms/op
                 executeQuery·p1.00:   4320.133 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   4324.467 ±(99.9%) 17.577 ms/op

  Histogram, ms/op:
    [4200.000, 4225.000) = 0 
    [4225.000, 4250.000) = 0 
    [4250.000, 4275.000) = 0 
    [4275.000, 4300.000) = 3 
    [4300.000, 4325.000) = 17 
    [4325.000, 4350.000) = 7 
    [4350.000, 4375.000) = 0 
    [4375.000, 4400.000) = 2 
    [4400.000, 4425.000) = 1 
    [4425.000, 4450.000) = 0 
    [4450.000, 4475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4290.773 ms/op
     p(50.0000) =   4320.133 ms/op
     p(90.0000) =   4375.498 ms/op
     p(95.0000) =   4393.953 ms/op
     p(99.0000) =   4412.408 ms/op
     p(99.9000) =   4412.408 ms/op
     p(99.9900) =   4412.408 ms/op
     p(99.9990) =   4412.408 ms/op
     p(99.9999) =   4412.408 ms/op
    p(100.0000) =   4412.408 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 26.19% complete, ETA 07:29:59
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_155809670 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_155809670() {
        this(4);
    }
    public KeyValueMap_155809670(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_155809670 aggregation_state_map = new KeyValueMap_155809670();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6836.716 ms/op
# Warmup Iteration   2: 6702.498 ms/op
# Warmup Iteration   3: 6421.479 ms/op
# Warmup Iteration   4: 6325.010 ms/op
# Warmup Iteration   5: 6408.897 ms/op
Iteration   1: 6358.565 ms/op
                 executeQuery·p0.00:   6341.788 ms/op
                 executeQuery·p0.50:   6358.565 ms/op
                 executeQuery·p0.90:   6375.342 ms/op
                 executeQuery·p0.95:   6375.342 ms/op
                 executeQuery·p0.99:   6375.342 ms/op
                 executeQuery·p0.999:  6375.342 ms/op
                 executeQuery·p0.9999: 6375.342 ms/op
                 executeQuery·p1.00:   6375.342 ms/op

Iteration   2: 6408.897 ms/op
                 executeQuery·p0.00:   6375.342 ms/op
                 executeQuery·p0.50:   6408.897 ms/op
                 executeQuery·p0.90:   6442.451 ms/op
                 executeQuery·p0.95:   6442.451 ms/op
                 executeQuery·p0.99:   6442.451 ms/op
                 executeQuery·p0.999:  6442.451 ms/op
                 executeQuery·p0.9999: 6442.451 ms/op
                 executeQuery·p1.00:   6442.451 ms/op

Iteration   3: 6534.726 ms/op
                 executeQuery·p0.00:   6534.726 ms/op
                 executeQuery·p0.50:   6534.726 ms/op
                 executeQuery·p0.90:   6534.726 ms/op
                 executeQuery·p0.95:   6534.726 ms/op
                 executeQuery·p0.99:   6534.726 ms/op
                 executeQuery·p0.999:  6534.726 ms/op
                 executeQuery·p0.9999: 6534.726 ms/op
                 executeQuery·p1.00:   6534.726 ms/op

Iteration   4: 6413.091 ms/op
                 executeQuery·p0.00:   6341.788 ms/op
                 executeQuery·p0.50:   6413.091 ms/op
                 executeQuery·p0.90:   6484.394 ms/op
                 executeQuery·p0.95:   6484.394 ms/op
                 executeQuery·p0.99:   6484.394 ms/op
                 executeQuery·p0.999:  6484.394 ms/op
                 executeQuery·p0.9999: 6484.394 ms/op
                 executeQuery·p1.00:   6484.394 ms/op

Iteration   5: 6417.285 ms/op
                 executeQuery·p0.00:   6392.119 ms/op
                 executeQuery·p0.50:   6417.285 ms/op
                 executeQuery·p0.90:   6442.451 ms/op
                 executeQuery·p0.95:   6442.451 ms/op
                 executeQuery·p0.99:   6442.451 ms/op
                 executeQuery·p0.999:  6442.451 ms/op
                 executeQuery·p0.9999: 6442.451 ms/op
                 executeQuery·p1.00:   6442.451 ms/op


# Run progress: 26.79% complete, ETA 07:22:25
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_155809670 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_155809670() {
        this(4);
    }
    public KeyValueMap_155809670(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_155809670 aggregation_state_map = new KeyValueMap_155809670();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7038.042 ms/op
# Warmup Iteration   2: 6857.687 ms/op
# Warmup Iteration   3: 6572.474 ms/op
# Warmup Iteration   4: 6534.726 ms/op
# Warmup Iteration   5: 6593.446 ms/op
Iteration   1: 6551.503 ms/op
                 executeQuery·p0.00:   6526.337 ms/op
                 executeQuery·p0.50:   6551.503 ms/op
                 executeQuery·p0.90:   6576.669 ms/op
                 executeQuery·p0.95:   6576.669 ms/op
                 executeQuery·p0.99:   6576.669 ms/op
                 executeQuery·p0.999:  6576.669 ms/op
                 executeQuery·p0.9999: 6576.669 ms/op
                 executeQuery·p1.00:   6576.669 ms/op

Iteration   2: 6555.697 ms/op
                 executeQuery·p0.00:   6526.337 ms/op
                 executeQuery·p0.50:   6555.697 ms/op
                 executeQuery·p0.90:   6585.057 ms/op
                 executeQuery·p0.95:   6585.057 ms/op
                 executeQuery·p0.99:   6585.057 ms/op
                 executeQuery·p0.999:  6585.057 ms/op
                 executeQuery·p0.9999: 6585.057 ms/op
                 executeQuery·p1.00:   6585.057 ms/op

Iteration   3: 6471.811 ms/op
                 executeQuery·p0.00:   6434.062 ms/op
                 executeQuery·p0.50:   6471.811 ms/op
                 executeQuery·p0.90:   6509.560 ms/op
                 executeQuery·p0.95:   6509.560 ms/op
                 executeQuery·p0.99:   6509.560 ms/op
                 executeQuery·p0.999:  6509.560 ms/op
                 executeQuery·p0.9999: 6509.560 ms/op
                 executeQuery·p1.00:   6509.560 ms/op

Iteration   4: 6576.669 ms/op
                 executeQuery·p0.00:   6559.891 ms/op
                 executeQuery·p0.50:   6576.669 ms/op
                 executeQuery·p0.90:   6593.446 ms/op
                 executeQuery·p0.95:   6593.446 ms/op
                 executeQuery·p0.99:   6593.446 ms/op
                 executeQuery·p0.999:  6593.446 ms/op
                 executeQuery·p0.9999: 6593.446 ms/op
                 executeQuery·p1.00:   6593.446 ms/op

Iteration   5: 6660.555 ms/op
                 executeQuery·p0.00:   6627.000 ms/op
                 executeQuery·p0.50:   6660.555 ms/op
                 executeQuery·p0.90:   6694.109 ms/op
                 executeQuery·p0.95:   6694.109 ms/op
                 executeQuery·p0.99:   6694.109 ms/op
                 executeQuery·p0.999:  6694.109 ms/op
                 executeQuery·p0.9999: 6694.109 ms/op
                 executeQuery·p1.00:   6694.109 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   6494.880 ±(99.9%) 86.055 ms/op

  Histogram, ms/op:
    [6300.000, 6325.000) = 0 
    [6325.000, 6350.000) = 2 
    [6350.000, 6375.000) = 0 
    [6375.000, 6400.000) = 3 
    [6400.000, 6425.000) = 0 
    [6425.000, 6450.000) = 3 
    [6450.000, 6475.000) = 0 
    [6475.000, 6500.000) = 1 
    [6500.000, 6525.000) = 1 
    [6525.000, 6550.000) = 4 
    [6550.000, 6575.000) = 1 
    [6575.000, 6600.000) = 3 
    [6600.000, 6625.000) = 0 
    [6625.000, 6650.000) = 1 
    [6650.000, 6675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   6341.788 ms/op
     p(50.0000) =   6517.948 ms/op
     p(90.0000) =   6623.645 ms/op
     p(95.0000) =   6690.754 ms/op
     p(99.0000) =   6694.109 ms/op
     p(99.9000) =   6694.109 ms/op
     p(99.9900) =   6694.109 ms/op
     p(99.9990) =   6694.109 ms/op
     p(99.9999) =   6694.109 ms/op
    p(100.0000) =   6694.109 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 27.38% complete, ETA 07:15:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9814.671 ms/op
# Warmup Iteration   2: 9764.340 ms/op
# Warmup Iteration   3: 9126.806 ms/op
# Warmup Iteration   4: 9630.122 ms/op
# Warmup Iteration   5: 10619.978 ms/op
Iteration   1: 7734.297 ms/op
                 executeQuery·p0.00:   7734.297 ms/op
                 executeQuery·p0.50:   7734.297 ms/op
                 executeQuery·p0.90:   7734.297 ms/op
                 executeQuery·p0.95:   7734.297 ms/op
                 executeQuery·p0.99:   7734.297 ms/op
                 executeQuery·p0.999:  7734.297 ms/op
                 executeQuery·p0.9999: 7734.297 ms/op
                 executeQuery·p1.00:   7734.297 ms/op

Iteration   2: 8707.375 ms/op
                 executeQuery·p0.00:   8707.375 ms/op
                 executeQuery·p0.50:   8707.375 ms/op
                 executeQuery·p0.90:   8707.375 ms/op
                 executeQuery·p0.95:   8707.375 ms/op
                 executeQuery·p0.99:   8707.375 ms/op
                 executeQuery·p0.999:  8707.375 ms/op
                 executeQuery·p0.9999: 8707.375 ms/op
                 executeQuery·p1.00:   8707.375 ms/op

Iteration   3: 8891.924 ms/op
                 executeQuery·p0.00:   8891.924 ms/op
                 executeQuery·p0.50:   8891.924 ms/op
                 executeQuery·p0.90:   8891.924 ms/op
                 executeQuery·p0.95:   8891.924 ms/op
                 executeQuery·p0.99:   8891.924 ms/op
                 executeQuery·p0.999:  8891.924 ms/op
                 executeQuery·p0.9999: 8891.924 ms/op
                 executeQuery·p1.00:   8891.924 ms/op

Iteration   4: 8824.816 ms/op
                 executeQuery·p0.00:   8824.816 ms/op
                 executeQuery·p0.50:   8824.816 ms/op
                 executeQuery·p0.90:   8824.816 ms/op
                 executeQuery·p0.95:   8824.816 ms/op
                 executeQuery·p0.99:   8824.816 ms/op
                 executeQuery·p0.999:  8824.816 ms/op
                 executeQuery·p0.9999: 8824.816 ms/op
                 executeQuery·p1.00:   8824.816 ms/op

Iteration   5: 8673.821 ms/op
                 executeQuery·p0.00:   8673.821 ms/op
                 executeQuery·p0.50:   8673.821 ms/op
                 executeQuery·p0.90:   8673.821 ms/op
                 executeQuery·p0.95:   8673.821 ms/op
                 executeQuery·p0.99:   8673.821 ms/op
                 executeQuery·p0.999:  8673.821 ms/op
                 executeQuery·p0.9999: 8673.821 ms/op
                 executeQuery·p1.00:   8673.821 ms/op


# Run progress: 27.98% complete, ETA 07:09:42
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

9865.003 ms/op
# Warmup Iteration   2: 9328.132 ms/op
# Warmup Iteration   3: 8581.546 ms/op
# Warmup Iteration   4: 9344.909 ms/op
# Warmup Iteration   5: 14612.955 ms/op
Iteration   1: 8875.147 ms/op
                 executeQuery·p0.00:   8875.147 ms/op
                 executeQuery·p0.50:   8875.147 ms/op
                 executeQuery·p0.90:   8875.147 ms/op
                 executeQuery·p0.95:   8875.147 ms/op
                 executeQuery·p0.99:   8875.147 ms/op
                 executeQuery·p0.999:  8875.147 ms/op
                 executeQuery·p0.9999: 8875.147 ms/op
                 executeQuery·p1.00:   8875.147 ms/op

Iteration   2: 9126.806 ms/op
                 executeQuery·p0.00:   9126.806 ms/op
                 executeQuery·p0.50:   9126.806 ms/op
                 executeQuery·p0.90:   9126.806 ms/op
                 executeQuery·p0.95:   9126.806 ms/op
                 executeQuery·p0.99:   9126.806 ms/op
                 executeQuery·p0.999:  9126.806 ms/op
                 executeQuery·p0.9999: 9126.806 ms/op
                 executeQuery·p1.00:   9126.806 ms/op

Iteration   3: 8657.043 ms/op
                 executeQuery·p0.00:   8657.043 ms/op
                 executeQuery·p0.50:   8657.043 ms/op
                 executeQuery·p0.90:   8657.043 ms/op
                 executeQuery·p0.95:   8657.043 ms/op
                 executeQuery·p0.99:   8657.043 ms/op
                 executeQuery·p0.999:  8657.043 ms/op
                 executeQuery·p0.9999: 8657.043 ms/op
                 executeQuery·p1.00:   8657.043 ms/op

Iteration   4: 9277.800 ms/op
                 executeQuery·p0.00:   9277.800 ms/op
                 executeQuery·p0.50:   9277.800 ms/op
                 executeQuery·p0.90:   9277.800 ms/op
                 executeQuery·p0.95:   9277.800 ms/op
                 executeQuery·p0.99:   9277.800 ms/op
                 executeQuery·p0.999:  9277.800 ms/op
                 executeQuery·p0.9999: 9277.800 ms/op
                 executeQuery·p1.00:   9277.800 ms/op

Iteration   5: 7834.960 ms/op
                 executeQuery·p0.00:   7834.960 ms/op
                 executeQuery·p0.50:   7834.960 ms/op
                 executeQuery·p0.90:   7834.960 ms/op
                 executeQuery·p0.95:   7834.960 ms/op
                 executeQuery·p0.99:   7834.960 ms/op
                 executeQuery·p0.999:  7834.960 ms/op
                 executeQuery·p0.9999: 7834.960 ms/op
                 executeQuery·p1.00:   7834.960 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   8660.399 ±(99.9%) 758.760 ms/op

  Histogram, ms/op:
    [ 7000.000,  7250.000) = 0 
    [ 7250.000,  7500.000) = 0 
    [ 7500.000,  7750.000) = 1 
    [ 7750.000,  8000.000) = 1 
    [ 8000.000,  8250.000) = 0 
    [ 8250.000,  8500.000) = 0 
    [ 8500.000,  8750.000) = 3 
    [ 8750.000,  9000.000) = 3 
    [ 9000.000,  9250.000) = 1 
    [ 9250.000,  9500.000) = 1 
    [ 9500.000,  9750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7734.297 ms/op
     p(50.0000) =   8766.095 ms/op
     p(90.0000) =   9262.701 ms/op
     p(95.0000) =   9277.800 ms/op
     p(99.0000) =   9277.800 ms/op
     p(99.9000) =   9277.800 ms/op
     p(99.9900) =   9277.800 ms/op
     p(99.9990) =   9277.800 ms/op
     p(99.9999) =   9277.800 ms/op
    p(100.0000) =   9277.800 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 28.57% complete, ETA 07:04:32
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

28756.148 ms/op
# Warmup Iteration   2: 25669.140 ms/op
# Warmup Iteration   3: 24528.290 ms/op
# Warmup Iteration   4: 42882.564 ms/op
# Warmup Iteration   5: 25333.596 ms/op
Iteration   1: 24494.735 ms/op
                 executeQuery·p0.00:   24494.735 ms/op
                 executeQuery·p0.50:   24494.735 ms/op
                 executeQuery·p0.90:   24494.735 ms/op
                 executeQuery·p0.95:   24494.735 ms/op
                 executeQuery·p0.99:   24494.735 ms/op
                 executeQuery·p0.999:  24494.735 ms/op
                 executeQuery·p0.9999: 24494.735 ms/op
                 executeQuery·p1.00:   24494.735 ms/op

Iteration   2: 25132.270 ms/op
                 executeQuery·p0.00:   25132.270 ms/op
                 executeQuery·p0.50:   25132.270 ms/op
                 executeQuery·p0.90:   25132.270 ms/op
                 executeQuery·p0.95:   25132.270 ms/op
                 executeQuery·p0.99:   25132.270 ms/op
                 executeQuery·p0.999:  25132.270 ms/op
                 executeQuery·p0.9999: 25132.270 ms/op
                 executeQuery·p1.00:   25132.270 ms/op

Iteration   3: 26474.447 ms/op
                 executeQuery·p0.00:   26474.447 ms/op
                 executeQuery·p0.50:   26474.447 ms/op
                 executeQuery·p0.90:   26474.447 ms/op
                 executeQuery·p0.95:   26474.447 ms/op
                 executeQuery·p0.99:   26474.447 ms/op
                 executeQuery·p0.999:  26474.447 ms/op
                 executeQuery·p0.9999: 26474.447 ms/op
                 executeQuery·p1.00:   26474.447 ms/op

Iteration   4: 42278.584 ms/op
                 executeQuery·p0.00:   42278.584 ms/op
                 executeQuery·p0.50:   42278.584 ms/op
                 executeQuery·p0.90:   42278.584 ms/op
                 executeQuery·p0.95:   42278.584 ms/op
                 executeQuery·p0.99:   42278.584 ms/op
                 executeQuery·p0.999:  42278.584 ms/op
                 executeQuery·p0.9999: 42278.584 ms/op
                 executeQuery·p1.00:   42278.584 ms/op

Iteration   5: 24930.943 ms/op
                 executeQuery·p0.00:   24930.943 ms/op
                 executeQuery·p0.50:   24930.943 ms/op
                 executeQuery·p0.90:   24930.943 ms/op
                 executeQuery·p0.95:   24930.943 ms/op
                 executeQuery·p0.99:   24930.943 ms/op
                 executeQuery·p0.999:  24930.943 ms/op
                 executeQuery·p0.9999: 24930.943 ms/op
                 executeQuery·p1.00:   24930.943 ms/op


# Run progress: 29.17% complete, ETA 07:15:54
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

28085.060 ms/op
# Warmup Iteration   2: 27413.971 ms/op
# Warmup Iteration   3: 26709.328 ms/op
# Warmup Iteration   4: 43419.435 ms/op
# Warmup Iteration   5: 26575.110 ms/op
Iteration   1: 28487.713 ms/op
                 executeQuery·p0.00:   28487.713 ms/op
                 executeQuery·p0.50:   28487.713 ms/op
                 executeQuery·p0.90:   28487.713 ms/op
                 executeQuery·p0.95:   28487.713 ms/op
                 executeQuery·p0.99:   28487.713 ms/op
                 executeQuery·p0.999:  28487.713 ms/op
                 executeQuery·p0.9999: 28487.713 ms/op
                 executeQuery·p1.00:   28487.713 ms/op

Iteration   2: 26910.654 ms/op
                 executeQuery·p0.00:   26910.654 ms/op
                 executeQuery·p0.50:   26910.654 ms/op
                 executeQuery·p0.90:   26910.654 ms/op
                 executeQuery·p0.95:   26910.654 ms/op
                 executeQuery·p0.99:   26910.654 ms/op
                 executeQuery·p0.999:  26910.654 ms/op
                 executeQuery·p0.9999: 26910.654 ms/op
                 executeQuery·p1.00:   26910.654 ms/op

Iteration   3: 26843.546 ms/op
                 executeQuery·p0.00:   26843.546 ms/op
                 executeQuery·p0.50:   26843.546 ms/op
                 executeQuery·p0.90:   26843.546 ms/op
                 executeQuery·p0.95:   26843.546 ms/op
                 executeQuery·p0.99:   26843.546 ms/op
                 executeQuery·p0.999:  26843.546 ms/op
                 executeQuery·p0.9999: 26843.546 ms/op
                 executeQuery·p1.00:   26843.546 ms/op

Iteration   4: 29930.553 ms/op
                 executeQuery·p0.00:   29930.553 ms/op
                 executeQuery·p0.50:   29930.553 ms/op
                 executeQuery·p0.90:   29930.553 ms/op
                 executeQuery·p0.95:   29930.553 ms/op
                 executeQuery·p0.99:   29930.553 ms/op
                 executeQuery·p0.999:  29930.553 ms/op
                 executeQuery·p0.9999: 29930.553 ms/op
                 executeQuery·p1.00:   29930.553 ms/op

Iteration   5: 28789.703 ms/op
                 executeQuery·p0.00:   28789.703 ms/op
                 executeQuery·p0.50:   28789.703 ms/op
                 executeQuery·p0.90:   28789.703 ms/op
                 executeQuery·p0.95:   28789.703 ms/op
                 executeQuery·p0.99:   28789.703 ms/op
                 executeQuery·p0.999:  28789.703 ms/op
                 executeQuery·p0.9999: 28789.703 ms/op
                 executeQuery·p1.00:   28789.703 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  28427.315 ±(99.9%) 7830.288 ms/op

  Histogram, ms/op:
    [20000.000, 22500.000) = 0 
    [22500.000, 25000.000) = 2 
    [25000.000, 27500.000) = 4 
    [27500.000, 30000.000) = 3 
    [30000.000, 32500.000) = 0 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 
    [37500.000, 40000.000) = 0 
    [40000.000, 42500.000) = 1 
    [42500.000, 45000.000) = 0 
    [45000.000, 47500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  24494.735 ms/op
     p(50.0000) =  26877.100 ms/op
     p(90.0000) =  41043.781 ms/op
     p(95.0000) =  42278.584 ms/op
     p(99.0000) =  42278.584 ms/op
     p(99.9000) =  42278.584 ms/op
     p(99.9900) =  42278.584 ms/op
     p(99.9990) =  42278.584 ms/op
     p(99.9999) =  42278.584 ms/op
    p(100.0000) =  42278.584 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 29.76% complete, ETA 07:26:26
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7256.146 ms/op
# Warmup Iteration   2: 7436.501 ms/op
# Warmup Iteration   3: 7109.345 ms/op
# Warmup Iteration   4: 7134.511 ms/op
# Warmup Iteration   5: 7138.705 ms/op
Iteration   1: 7168.066 ms/op
                 executeQuery·p0.00:   7113.540 ms/op
                 executeQuery·p0.50:   7168.066 ms/op
                 executeQuery·p0.90:   7222.591 ms/op
                 executeQuery·p0.95:   7222.591 ms/op
                 executeQuery·p0.99:   7222.591 ms/op
                 executeQuery·p0.999:  7222.591 ms/op
                 executeQuery·p0.9999: 7222.591 ms/op
                 executeQuery·p1.00:   7222.591 ms/op

Iteration   2: 7109.345 ms/op
                 executeQuery·p0.00:   7096.762 ms/op
                 executeQuery·p0.50:   7109.345 ms/op
                 executeQuery·p0.90:   7121.928 ms/op
                 executeQuery·p0.95:   7121.928 ms/op
                 executeQuery·p0.99:   7121.928 ms/op
                 executeQuery·p0.999:  7121.928 ms/op
                 executeQuery·p0.9999: 7121.928 ms/op
                 executeQuery·p1.00:   7121.928 ms/op

Iteration   3: 7134.511 ms/op
                 executeQuery·p0.00:   7096.762 ms/op
                 executeQuery·p0.50:   7134.511 ms/op
                 executeQuery·p0.90:   7172.260 ms/op
                 executeQuery·p0.95:   7172.260 ms/op
                 executeQuery·p0.99:   7172.260 ms/op
                 executeQuery·p0.999:  7172.260 ms/op
                 executeQuery·p0.9999: 7172.260 ms/op
                 executeQuery·p1.00:   7172.260 ms/op

Iteration   4: 7054.819 ms/op
                 executeQuery·p0.00:   7046.431 ms/op
                 executeQuery·p0.50:   7054.819 ms/op
                 executeQuery·p0.90:   7063.208 ms/op
                 executeQuery·p0.95:   7063.208 ms/op
                 executeQuery·p0.99:   7063.208 ms/op
                 executeQuery·p0.999:  7063.208 ms/op
                 executeQuery·p0.9999: 7063.208 ms/op
                 executeQuery·p1.00:   7063.208 ms/op

Iteration   5: 7050.625 ms/op
                 executeQuery·p0.00:   7021.265 ms/op
                 executeQuery·p0.50:   7050.625 ms/op
                 executeQuery·p0.90:   7079.985 ms/op
                 executeQuery·p0.95:   7079.985 ms/op
                 executeQuery·p0.99:   7079.985 ms/op
                 executeQuery·p0.999:  7079.985 ms/op
                 executeQuery·p0.9999: 7079.985 ms/op
                 executeQuery·p1.00:   7079.985 ms/op


# Run progress: 30.36% complete, ETA 07:19:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_781701721 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_781701721() {
        this(4);
    }
    public KeyValueMap_781701721(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_781701721 aggregation_state_map = new KeyValueMap_781701721();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7243.563 ms/op
# Warmup Iteration   2: 7453.278 ms/op
# Warmup Iteration   3: 7142.900 ms/op
# Warmup Iteration   4: 7147.094 ms/op
# Warmup Iteration   5: 7126.122 ms/op
Iteration   1: 7004.488 ms/op
                 executeQuery·p0.00:   7004.488 ms/op
                 executeQuery·p0.50:   7004.488 ms/op
                 executeQuery·p0.90:   7004.488 ms/op
                 executeQuery·p0.95:   7004.488 ms/op
                 executeQuery·p0.99:   7004.488 ms/op
                 executeQuery·p0.999:  7004.488 ms/op
                 executeQuery·p0.9999: 7004.488 ms/op
                 executeQuery·p1.00:   7004.488 ms/op

Iteration   2: 7042.236 ms/op
                 executeQuery·p0.00:   7012.876 ms/op
                 executeQuery·p0.50:   7042.236 ms/op
                 executeQuery·p0.90:   7071.597 ms/op
                 executeQuery·p0.95:   7071.597 ms/op
                 executeQuery·p0.99:   7071.597 ms/op
                 executeQuery·p0.999:  7071.597 ms/op
                 executeQuery·p0.9999: 7071.597 ms/op
                 executeQuery·p1.00:   7071.597 ms/op

Iteration   3: 7100.957 ms/op
                 executeQuery·p0.00:   7071.597 ms/op
                 executeQuery·p0.50:   7100.957 ms/op
                 executeQuery·p0.90:   7130.317 ms/op
                 executeQuery·p0.95:   7130.317 ms/op
                 executeQuery·p0.99:   7130.317 ms/op
                 executeQuery·p0.999:  7130.317 ms/op
                 executeQuery·p0.9999: 7130.317 ms/op
                 executeQuery·p1.00:   7130.317 ms/op

Iteration   4: 7361.004 ms/op
                 executeQuery·p0.00:   7189.037 ms/op
                 executeQuery·p0.50:   7361.004 ms/op
                 executeQuery·p0.90:   7532.970 ms/op
                 executeQuery·p0.95:   7532.970 ms/op
                 executeQuery·p0.99:   7532.970 ms/op
                 executeQuery·p0.999:  7532.970 ms/op
                 executeQuery·p0.9999: 7532.970 ms/op
                 executeQuery·p1.00:   7532.970 ms/op

Iteration   5: 7130.317 ms/op
                 executeQuery·p0.00:   7046.431 ms/op
                 executeQuery·p0.50:   7130.317 ms/op
                 executeQuery·p0.90:   7214.203 ms/op
                 executeQuery·p0.95:   7214.203 ms/op
                 executeQuery·p0.99:   7214.203 ms/op
                 executeQuery·p0.999:  7214.203 ms/op
                 executeQuery·p0.9999: 7214.203 ms/op
                 executeQuery·p1.00:   7214.203 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   7115.637 ±(99.9%) 102.849 ms/op

  Histogram, ms/op:
    [7000.000, 7050.000) = 6 
    [7050.000, 7100.000) = 6 
    [7100.000, 7150.000) = 3 
    [7150.000, 7200.000) = 2 
    [7200.000, 7250.000) = 2 
    [7250.000, 7300.000) = 0 
    [7300.000, 7350.000) = 0 
    [7350.000, 7400.000) = 0 
    [7400.000, 7450.000) = 0 
    [7450.000, 7500.000) = 0 
    [7500.000, 7550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   7004.488 ms/op
     p(50.0000) =   7088.374 ms/op
     p(90.0000) =   7221.753 ms/op
     p(95.0000) =   7517.451 ms/op
     p(99.0000) =   7532.970 ms/op
     p(99.9000) =   7532.970 ms/op
     p(99.9900) =   7532.970 ms/op
     p(99.9990) =   7532.970 ms/op
     p(99.9999) =   7532.970 ms/op
    p(100.0000) =   7532.970 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 30.95% complete, ETA 07:12:45
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_155809670 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_155809670() {
        this(4);
    }
    public KeyValueMap_155809670(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_155809670 aggregation_state_map = new KeyValueMap_155809670();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

11400.118 ms/op
# Warmup Iteration   2: 10670.309 ms/op
# Warmup Iteration   3: 11257.512 ms/op
# Warmup Iteration   4: 10234.102 ms/op
# Warmup Iteration   5: 10468.983 ms/op
Iteration   1: 10234.102 ms/op
                 executeQuery·p0.00:   10234.102 ms/op
                 executeQuery·p0.50:   10234.102 ms/op
                 executeQuery·p0.90:   10234.102 ms/op
                 executeQuery·p0.95:   10234.102 ms/op
                 executeQuery·p0.99:   10234.102 ms/op
                 executeQuery·p0.999:  10234.102 ms/op
                 executeQuery·p0.9999: 10234.102 ms/op
                 executeQuery·p1.00:   10234.102 ms/op

Iteration   2: 10552.869 ms/op
                 executeQuery·p0.00:   10552.869 ms/op
                 executeQuery·p0.50:   10552.869 ms/op
                 executeQuery·p0.90:   10552.869 ms/op
                 executeQuery·p0.95:   10552.869 ms/op
                 executeQuery·p0.99:   10552.869 ms/op
                 executeQuery·p0.999:  10552.869 ms/op
                 executeQuery·p0.9999: 10552.869 ms/op
                 executeQuery·p1.00:   10552.869 ms/op

Iteration   3: 10972.299 ms/op
                 executeQuery·p0.00:   10972.299 ms/op
                 executeQuery·p0.50:   10972.299 ms/op
                 executeQuery·p0.90:   10972.299 ms/op
                 executeQuery·p0.95:   10972.299 ms/op
                 executeQuery·p0.99:   10972.299 ms/op
                 executeQuery·p0.999:  10972.299 ms/op
                 executeQuery·p0.9999: 10972.299 ms/op
                 executeQuery·p1.00:   10972.299 ms/op

Iteration   4: 10250.879 ms/op
                 executeQuery·p0.00:   10250.879 ms/op
                 executeQuery·p0.50:   10250.879 ms/op
                 executeQuery·p0.90:   10250.879 ms/op
                 executeQuery·p0.95:   10250.879 ms/op
                 executeQuery·p0.99:   10250.879 ms/op
                 executeQuery·p0.999:  10250.879 ms/op
                 executeQuery·p0.9999: 10250.879 ms/op
                 executeQuery·p1.00:   10250.879 ms/op

Iteration   5: 10552.869 ms/op
                 executeQuery·p0.00:   10552.869 ms/op
                 executeQuery·p0.50:   10552.869 ms/op
                 executeQuery·p0.90:   10552.869 ms/op
                 executeQuery·p0.95:   10552.869 ms/op
                 executeQuery·p0.99:   10552.869 ms/op
                 executeQuery·p0.999:  10552.869 ms/op
                 executeQuery·p0.9999: 10552.869 ms/op
                 executeQuery·p1.00:   10552.869 ms/op


# Run progress: 31.55% complete, ETA 07:05:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

10049.552 ms/op
# Warmup Iteration   2: 10720.641 ms/op
# Warmup Iteration   3: 10653.532 ms/op
# Warmup Iteration   4: 11408.507 ms/op
# Warmup Iteration   5: 10301.211 ms/op
Iteration   1: 10401.874 ms/op
                 executeQuery·p0.00:   10401.874 ms/op
                 executeQuery·p0.50:   10401.874 ms/op
                 executeQuery·p0.90:   10401.874 ms/op
                 executeQuery·p0.95:   10401.874 ms/op
                 executeQuery·p0.99:   10401.874 ms/op
                 executeQuery·p0.999:  10401.874 ms/op
                 executeQuery·p0.9999: 10401.874 ms/op
                 executeQuery·p1.00:   10401.874 ms/op

Iteration   2: 10368.319 ms/op
                 executeQuery·p0.00:   10368.319 ms/op
                 executeQuery·p0.50:   10368.319 ms/op
                 executeQuery·p0.90:   10368.319 ms/op
                 executeQuery·p0.95:   10368.319 ms/op
                 executeQuery·p0.99:   10368.319 ms/op
                 executeQuery·p0.999:  10368.319 ms/op
                 executeQuery·p0.9999: 10368.319 ms/op
                 executeQuery·p1.00:   10368.319 ms/op

Iteration   3: 10519.314 ms/op
                 executeQuery·p0.00:   10519.314 ms/op
                 executeQuery·p0.50:   10519.314 ms/op
                 executeQuery·p0.90:   10519.314 ms/op
                 executeQuery·p0.95:   10519.314 ms/op
                 executeQuery·p0.99:   10519.314 ms/op
                 executeQuery·p0.999:  10519.314 ms/op
                 executeQuery·p0.9999: 10519.314 ms/op
                 executeQuery·p1.00:   10519.314 ms/op

Iteration   4: 10687.087 ms/op
                 executeQuery·p0.00:   10687.087 ms/op
                 executeQuery·p0.50:   10687.087 ms/op
                 executeQuery·p0.90:   10687.087 ms/op
                 executeQuery·p0.95:   10687.087 ms/op
                 executeQuery·p0.99:   10687.087 ms/op
                 executeQuery·p0.999:  10687.087 ms/op
                 executeQuery·p0.9999: 10687.087 ms/op
                 executeQuery·p1.00:   10687.087 ms/op

Iteration   5: 10284.433 ms/op
                 executeQuery·p0.00:   10284.433 ms/op
                 executeQuery·p0.50:   10284.433 ms/op
                 executeQuery·p0.90:   10284.433 ms/op
                 executeQuery·p0.95:   10284.433 ms/op
                 executeQuery·p0.99:   10284.433 ms/op
                 executeQuery·p0.999:  10284.433 ms/op
                 executeQuery·p0.9999: 10284.433 ms/op
                 executeQuery·p1.00:   10284.433 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  10482.405 ±(99.9%) 344.438 ms/op

  Histogram, ms/op:
    [10200.000, 10250.000) = 1 
    [10250.000, 10300.000) = 2 
    [10300.000, 10350.000) = 0 
    [10350.000, 10400.000) = 1 
    [10400.000, 10450.000) = 1 
    [10450.000, 10500.000) = 0 
    [10500.000, 10550.000) = 1 
    [10550.000, 10600.000) = 2 
    [10600.000, 10650.000) = 0 
    [10650.000, 10700.000) = 1 
    [10700.000, 10750.000) = 0 
    [10750.000, 10800.000) = 0 
    [10800.000, 10850.000) = 0 
    [10850.000, 10900.000) = 0 
    [10900.000, 10950.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  10234.102 ms/op
     p(50.0000) =  10460.594 ms/op
     p(90.0000) =  10943.778 ms/op
     p(95.0000) =  10972.299 ms/op
     p(99.0000) =  10972.299 ms/op
     p(99.9000) =  10972.299 ms/op
     p(99.9900) =  10972.299 ms/op
     p(99.9990) =  10972.299 ms/op
     p(99.9999) =  10972.299 ms/op
    p(100.0000) =  10972.299 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 32.14% complete, ETA 06:57:29
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_781701721 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_781701721() {
        this(4);
    }
    public KeyValueMap_781701721(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_781701721 aggregation_state_map = new KeyValueMap_781701721();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

13639.877 ms/op
# Warmup Iteration   2: 15938.355 ms/op
# Warmup Iteration   3: 16055.796 ms/op
# Warmup Iteration   4: 15518.925 ms/op
# Warmup Iteration   5: 13086.228 ms/op
Iteration   1: 15518.925 ms/op
                 executeQuery·p0.00:   15518.925 ms/op
                 executeQuery·p0.50:   15518.925 ms/op
                 executeQuery·p0.90:   15518.925 ms/op
                 executeQuery·p0.95:   15518.925 ms/op
                 executeQuery·p0.99:   15518.925 ms/op
                 executeQuery·p0.999:  15518.925 ms/op
                 executeQuery·p0.9999: 15518.925 ms/op
                 executeQuery·p1.00:   15518.925 ms/op

Iteration   2: 15116.272 ms/op
                 executeQuery·p0.00:   15116.272 ms/op
                 executeQuery·p0.50:   15116.272 ms/op
                 executeQuery·p0.90:   15116.272 ms/op
                 executeQuery·p0.95:   15116.272 ms/op
                 executeQuery·p0.99:   15116.272 ms/op
                 executeQuery·p0.999:  15116.272 ms/op
                 executeQuery·p0.9999: 15116.272 ms/op
                 executeQuery·p1.00:   15116.272 ms/op

Iteration   3: 14847.836 ms/op
                 executeQuery·p0.00:   14847.836 ms/op
                 executeQuery·p0.50:   14847.836 ms/op
                 executeQuery·p0.90:   14847.836 ms/op
                 executeQuery·p0.95:   14847.836 ms/op
                 executeQuery·p0.99:   14847.836 ms/op
                 executeQuery·p0.999:  14847.836 ms/op
                 executeQuery·p0.9999: 14847.836 ms/op
                 executeQuery·p1.00:   14847.836 ms/op

Iteration   4: 15720.251 ms/op
                 executeQuery·p0.00:   15720.251 ms/op
                 executeQuery·p0.50:   15720.251 ms/op
                 executeQuery·p0.90:   15720.251 ms/op
                 executeQuery·p0.95:   15720.251 ms/op
                 executeQuery·p0.99:   15720.251 ms/op
                 executeQuery·p0.999:  15720.251 ms/op
                 executeQuery·p0.9999: 15720.251 ms/op
                 executeQuery·p1.00:   15720.251 ms/op

Iteration   5: 14612.955 ms/op
                 executeQuery·p0.00:   14612.955 ms/op
                 executeQuery·p0.50:   14612.955 ms/op
                 executeQuery·p0.90:   14612.955 ms/op
                 executeQuery·p0.95:   14612.955 ms/op
                 executeQuery·p0.99:   14612.955 ms/op
                 executeQuery·p0.999:  14612.955 ms/op
                 executeQuery·p0.9999: 14612.955 ms/op
                 executeQuery·p1.00:   14612.955 ms/op


# Run progress: 32.74% complete, ETA 06:51:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_781701721 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_781701721() {
        this(4);
    }
    public KeyValueMap_781701721(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_781701721 aggregation_state_map = new KeyValueMap_781701721();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

13706.985 ms/op
# Warmup Iteration   2: 15703.474 ms/op
# Warmup Iteration   3: 15418.262 ms/op
# Warmup Iteration   4: 15804.137 ms/op
# Warmup Iteration   5: 13488.882 ms/op
Iteration   1: 15166.603 ms/op
                 executeQuery·p0.00:   15166.603 ms/op
                 executeQuery·p0.50:   15166.603 ms/op
                 executeQuery·p0.90:   15166.603 ms/op
                 executeQuery·p0.95:   15166.603 ms/op
                 executeQuery·p0.99:   15166.603 ms/op
                 executeQuery·p0.999:  15166.603 ms/op
                 executeQuery·p0.9999: 15166.603 ms/op
                 executeQuery·p1.00:   15166.603 ms/op

Iteration   2: 14814.282 ms/op
                 executeQuery·p0.00:   14814.282 ms/op
                 executeQuery·p0.50:   14814.282 ms/op
                 executeQuery·p0.90:   14814.282 ms/op
                 executeQuery·p0.95:   14814.282 ms/op
                 executeQuery·p0.99:   14814.282 ms/op
                 executeQuery·p0.999:  14814.282 ms/op
                 executeQuery·p0.9999: 14814.282 ms/op
                 executeQuery·p1.00:   14814.282 ms/op

Iteration   3: 14361.297 ms/op
                 executeQuery·p0.00:   14361.297 ms/op
                 executeQuery·p0.50:   14361.297 ms/op
                 executeQuery·p0.90:   14361.297 ms/op
                 executeQuery·p0.95:   14361.297 ms/op
                 executeQuery·p0.99:   14361.297 ms/op
                 executeQuery·p0.999:  14361.297 ms/op
                 executeQuery·p0.9999: 14361.297 ms/op
                 executeQuery·p1.00:   14361.297 ms/op

Iteration   4: 13002.342 ms/op
                 executeQuery·p0.00:   13002.342 ms/op
                 executeQuery·p0.50:   13002.342 ms/op
                 executeQuery·p0.90:   13002.342 ms/op
                 executeQuery·p0.95:   13002.342 ms/op
                 executeQuery·p0.99:   13002.342 ms/op
                 executeQuery·p0.999:  13002.342 ms/op
                 executeQuery·p0.9999: 13002.342 ms/op
                 executeQuery·p1.00:   13002.342 ms/op

Iteration   5: 15133.049 ms/op
                 executeQuery·p0.00:   15133.049 ms/op
                 executeQuery·p0.50:   15133.049 ms/op
                 executeQuery·p0.90:   15133.049 ms/op
                 executeQuery·p0.95:   15133.049 ms/op
                 executeQuery·p0.99:   15133.049 ms/op
                 executeQuery·p0.999:  15133.049 ms/op
                 executeQuery·p0.9999: 15133.049 ms/op
                 executeQuery·p1.00:   15133.049 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  14829.381 ±(99.9%) 1144.975 ms/op

  Histogram, ms/op:
    [13000.000, 13250.000) = 1 
    [13250.000, 13500.000) = 0 
    [13500.000, 13750.000) = 0 
    [13750.000, 14000.000) = 0 
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 1 
    [14500.000, 14750.000) = 1 
    [14750.000, 15000.000) = 2 
    [15000.000, 15250.000) = 3 
    [15250.000, 15500.000) = 0 
    [15500.000, 15750.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  13002.342 ms/op
     p(50.0000) =  14982.054 ms/op
     p(90.0000) =  15700.119 ms/op
     p(95.0000) =  15720.251 ms/op
     p(99.0000) =  15720.251 ms/op
     p(99.9000) =  15720.251 ms/op
     p(99.9900) =  15720.251 ms/op
     p(99.9990) =  15720.251 ms/op
     p(99.9999) =  15720.251 ms/op
    p(100.0000) =  15720.251 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 33.33% complete, ETA 06:45:30
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

31675.384 ms/op
# Warmup Iteration   2: 32816.234 ms/op
# Warmup Iteration   3: 31339.839 ms/op
# Warmup Iteration   4: 18958.254 ms/op
# Warmup Iteration   5: 31004.295 ms/op
Iteration   1: 30299.652 ms/op
                 executeQuery·p0.00:   30299.652 ms/op
                 executeQuery·p0.50:   30299.652 ms/op
                 executeQuery·p0.90:   30299.652 ms/op
                 executeQuery·p0.95:   30299.652 ms/op
                 executeQuery·p0.99:   30299.652 ms/op
                 executeQuery·p0.999:  30299.652 ms/op
                 executeQuery·p0.9999: 30299.652 ms/op
                 executeQuery·p1.00:   30299.652 ms/op

Iteration   2: 18354.274 ms/op
                 executeQuery·p0.00:   18354.274 ms/op
                 executeQuery·p0.50:   18354.274 ms/op
                 executeQuery·p0.90:   18354.274 ms/op
                 executeQuery·p0.95:   18354.274 ms/op
                 executeQuery·p0.99:   18354.274 ms/op
                 executeQuery·p0.999:  18354.274 ms/op
                 executeQuery·p0.9999: 18354.274 ms/op
                 executeQuery·p1.00:   18354.274 ms/op

Iteration   3: 31071.404 ms/op
                 executeQuery·p0.00:   31071.404 ms/op
                 executeQuery·p0.50:   31071.404 ms/op
                 executeQuery·p0.90:   31071.404 ms/op
                 executeQuery·p0.95:   31071.404 ms/op
                 executeQuery·p0.99:   31071.404 ms/op
                 executeQuery·p0.999:  31071.404 ms/op
                 executeQuery·p0.9999: 31071.404 ms/op
                 executeQuery·p1.00:   31071.404 ms/op

Iteration   4: 31239.176 ms/op
                 executeQuery·p0.00:   31239.176 ms/op
                 executeQuery·p0.50:   31239.176 ms/op
                 executeQuery·p0.90:   31239.176 ms/op
                 executeQuery·p0.95:   31239.176 ms/op
                 executeQuery·p0.99:   31239.176 ms/op
                 executeQuery·p0.999:  31239.176 ms/op
                 executeQuery·p0.9999: 31239.176 ms/op
                 executeQuery·p1.00:   31239.176 ms/op

Iteration   5: 30366.761 ms/op
                 executeQuery·p0.00:   30366.761 ms/op
                 executeQuery·p0.50:   30366.761 ms/op
                 executeQuery·p0.90:   30366.761 ms/op
                 executeQuery·p0.95:   30366.761 ms/op
                 executeQuery·p0.99:   30366.761 ms/op
                 executeQuery·p0.999:  30366.761 ms/op
                 executeQuery·p0.9999: 30366.761 ms/op
                 executeQuery·p1.00:   30366.761 ms/op


# Run progress: 33.93% complete, ETA 06:46:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_768325284 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_768325284() {
        this(4);
    }
    public KeyValueMap_768325284(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_768325284 aggregation_state_map = new KeyValueMap_768325284();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

20971.520 ms/op
# Warmup Iteration   2: 31574.721 ms/op
# Warmup Iteration   3: 30836.523 ms/op
# Warmup Iteration   4: 19159.581 ms/op
# Warmup Iteration   5: 30366.761 ms/op
Iteration   1: 30735.860 ms/op
                 executeQuery·p0.00:   30735.860 ms/op
                 executeQuery·p0.50:   30735.860 ms/op
                 executeQuery·p0.90:   30735.860 ms/op
                 executeQuery·p0.95:   30735.860 ms/op
                 executeQuery·p0.99:   30735.860 ms/op
                 executeQuery·p0.999:  30735.860 ms/op
                 executeQuery·p0.9999: 30735.860 ms/op
                 executeQuery·p1.00:   30735.860 ms/op

Iteration   2: 18421.383 ms/op
                 executeQuery·p0.00:   18421.383 ms/op
                 executeQuery·p0.50:   18421.383 ms/op
                 executeQuery·p0.90:   18421.383 ms/op
                 executeQuery·p0.95:   18421.383 ms/op
                 executeQuery·p0.99:   18421.383 ms/op
                 executeQuery·p0.999:  18421.383 ms/op
                 executeQuery·p0.9999: 18421.383 ms/op
                 executeQuery·p1.00:   18421.383 ms/op

Iteration   3: 32178.700 ms/op
                 executeQuery·p0.00:   32178.700 ms/op
                 executeQuery·p0.50:   32178.700 ms/op
                 executeQuery·p0.90:   32178.700 ms/op
                 executeQuery·p0.95:   32178.700 ms/op
                 executeQuery·p0.99:   32178.700 ms/op
                 executeQuery·p0.999:  32178.700 ms/op
                 executeQuery·p0.9999: 32178.700 ms/op
                 executeQuery·p1.00:   32178.700 ms/op

Iteration   4: 31943.819 ms/op
                 executeQuery·p0.00:   31943.819 ms/op
                 executeQuery·p0.50:   31943.819 ms/op
                 executeQuery·p0.90:   31943.819 ms/op
                 executeQuery·p0.95:   31943.819 ms/op
                 executeQuery·p0.99:   31943.819 ms/op
                 executeQuery·p0.999:  31943.819 ms/op
                 executeQuery·p0.9999: 31943.819 ms/op
                 executeQuery·p1.00:   31943.819 ms/op

Iteration   5: 20468.204 ms/op
                 executeQuery·p0.00:   20468.204 ms/op
                 executeQuery·p0.50:   20468.204 ms/op
                 executeQuery·p0.90:   20468.204 ms/op
                 executeQuery·p0.95:   20468.204 ms/op
                 executeQuery·p0.99:   20468.204 ms/op
                 executeQuery·p0.999:  20468.204 ms/op
                 executeQuery·p0.9999: 20468.204 ms/op
                 executeQuery·p1.00:   20468.204 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  27507.923 ±(99.9%) 8878.898 ms/op

  Histogram, ms/op:
    [10000.000, 12500.000) = 0 
    [12500.000, 15000.000) = 0 
    [15000.000, 17500.000) = 0 
    [17500.000, 20000.000) = 2 
    [20000.000, 22500.000) = 1 
    [22500.000, 25000.000) = 0 
    [25000.000, 27500.000) = 0 
    [27500.000, 30000.000) = 0 
    [30000.000, 32500.000) = 7 
    [32500.000, 35000.000) = 0 
    [35000.000, 37500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  18354.274 ms/op
     p(50.0000) =  30551.310 ms/op
     p(90.0000) =  32155.212 ms/op
     p(95.0000) =  32178.700 ms/op
     p(99.0000) =  32178.700 ms/op
     p(99.9000) =  32178.700 ms/op
     p(99.9900) =  32178.700 ms/op
     p(99.9990) =  32178.700 ms/op
     p(99.9999) =  32178.700 ms/op
    p(100.0000) =  32178.700 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 34.52% complete, ETA 06:46:56
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_781701721 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_781701721() {
        this(4);
    }
    public KeyValueMap_781701721(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_781701721 aggregation_state_map = new KeyValueMap_781701721();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

89254.789 ms/op
# Warmup Iteration   2: 89120.571 ms/op
# Warmup Iteration   3: 48385.491 ms/op
# Warmup Iteration   4: 87241.523 ms/op
# Warmup Iteration   5: 85228.257 ms/op
Iteration   1: 51606.716 ms/op
                 executeQuery·p0.00:   51606.716 ms/op
                 executeQuery·p0.50:   51606.716 ms/op
                 executeQuery·p0.90:   51606.716 ms/op
                 executeQuery·p0.95:   51606.716 ms/op
                 executeQuery·p0.99:   51606.716 ms/op
                 executeQuery·p0.999:  51606.716 ms/op
                 executeQuery·p0.9999: 51606.716 ms/op
                 executeQuery·p1.00:   51606.716 ms/op

Iteration   2: 78248.935 ms/op
                 executeQuery·p0.00:   78248.935 ms/op
                 executeQuery·p0.50:   78248.935 ms/op
                 executeQuery·p0.90:   78248.935 ms/op
                 executeQuery·p0.95:   78248.935 ms/op
                 executeQuery·p0.99:   78248.935 ms/op
                 executeQuery·p0.999:  78248.935 ms/op
                 executeQuery·p0.9999: 78248.935 ms/op
                 executeQuery·p1.00:   78248.935 ms/op

Iteration   3: 86167.781 ms/op
                 executeQuery·p0.00:   86167.781 ms/op
                 executeQuery·p0.50:   86167.781 ms/op
                 executeQuery·p0.90:   86167.781 ms/op
                 executeQuery·p0.95:   86167.781 ms/op
                 executeQuery·p0.99:   86167.781 ms/op
                 executeQuery·p0.999:  86167.781 ms/op
                 executeQuery·p0.9999: 86167.781 ms/op
                 executeQuery·p1.00:   86167.781 ms/op

Iteration   4: 50935.628 ms/op
                 executeQuery·p0.00:   50935.628 ms/op
                 executeQuery·p0.50:   50935.628 ms/op
                 executeQuery·p0.90:   50935.628 ms/op
                 executeQuery·p0.95:   50935.628 ms/op
                 executeQuery·p0.99:   50935.628 ms/op
                 executeQuery·p0.999:  50935.628 ms/op
                 executeQuery·p0.9999: 50935.628 ms/op
                 executeQuery·p1.00:   50935.628 ms/op

Iteration   5: 67779.953 ms/op
                 executeQuery·p0.00:   67779.953 ms/op
                 executeQuery·p0.50:   67779.953 ms/op
                 executeQuery·p0.90:   67779.953 ms/op
                 executeQuery·p0.95:   67779.953 ms/op
                 executeQuery·p0.99:   67779.953 ms/op
                 executeQuery·p0.999:  67779.953 ms/op
                 executeQuery·p0.9999: 67779.953 ms/op
                 executeQuery·p1.00:   67779.953 ms/op


# Run progress: 35.12% complete, ETA 07:08:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_155809670 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_155809670() {
        this(4);
    }
    public KeyValueMap_155809670(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_155809670 aggregation_state_map = new KeyValueMap_155809670();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

89120.571 ms/op
# Warmup Iteration   2: 90462.749 ms/op
# Warmup Iteration   3: 49325.015 ms/op
# Warmup Iteration   4: 68383.932 ms/op
# Warmup Iteration   5: 86436.217 ms/op
Iteration   1: 49996.104 ms/op
                 executeQuery·p0.00:   49996.104 ms/op
                 executeQuery·p0.50:   49996.104 ms/op
                 executeQuery·p0.90:   49996.104 ms/op
                 executeQuery·p0.95:   49996.104 ms/op
                 executeQuery·p0.99:   49996.104 ms/op
                 executeQuery·p0.999:  49996.104 ms/op
                 executeQuery·p0.9999: 49996.104 ms/op
                 executeQuery·p1.00:   49996.104 ms/op

Iteration   2: 62209.917 ms/op
                 executeQuery·p0.00:   62209.917 ms/op
                 executeQuery·p0.50:   62209.917 ms/op
                 executeQuery·p0.90:   62209.917 ms/op
                 executeQuery·p0.95:   62209.917 ms/op
                 executeQuery·p0.99:   62209.917 ms/op
                 executeQuery·p0.999:  62209.917 ms/op
                 executeQuery·p0.9999: 62209.917 ms/op
                 executeQuery·p1.00:   62209.917 ms/op

Iteration   3: 86704.652 ms/op
                 executeQuery·p0.00:   86704.652 ms/op
                 executeQuery·p0.50:   86704.652 ms/op
                 executeQuery·p0.90:   86704.652 ms/op
                 executeQuery·p0.95:   86704.652 ms/op
                 executeQuery·p0.99:   86704.652 ms/op
                 executeQuery·p0.999:  86704.652 ms/op
                 executeQuery·p0.9999: 86704.652 ms/op
                 executeQuery·p1.00:   86704.652 ms/op

Iteration   4: 49794.777 ms/op
                 executeQuery·p0.00:   49794.777 ms/op
                 executeQuery·p0.50:   49794.777 ms/op
                 executeQuery·p0.90:   49794.777 ms/op
                 executeQuery·p0.95:   49794.777 ms/op
                 executeQuery·p0.99:   49794.777 ms/op
                 executeQuery·p0.999:  49794.777 ms/op
                 executeQuery·p0.9999: 49794.777 ms/op
                 executeQuery·p1.00:   49794.777 ms/op

Iteration   5: 54156.853 ms/op
                 executeQuery·p0.00:   54156.853 ms/op
                 executeQuery·p0.50:   54156.853 ms/op
                 executeQuery·p0.90:   54156.853 ms/op
                 executeQuery·p0.95:   54156.853 ms/op
                 executeQuery·p0.99:   54156.853 ms/op
                 executeQuery·p0.999:  54156.853 ms/op
                 executeQuery·p0.9999: 54156.853 ms/op
                 executeQuery·p1.00:   54156.853 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  63760.132 ±(99.9%) 22794.685 ms/op

  Histogram, ms/op:
    [40000.000, 45000.000) = 0 
    [45000.000, 50000.000) = 2 
    [50000.000, 55000.000) = 3 
    [55000.000, 60000.000) = 0 
    [60000.000, 65000.000) = 1 
    [65000.000, 70000.000) = 1 
    [70000.000, 75000.000) = 0 
    [75000.000, 80000.000) = 1 
    [80000.000, 85000.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  49794.777 ms/op
     p(50.0000) =  58183.385 ms/op
     p(90.0000) =  86650.965 ms/op
     p(95.0000) =  86704.652 ms/op
     p(99.0000) =  86704.652 ms/op
     p(99.9000) =  86704.652 ms/op
     p(99.9900) =  86704.652 ms/op
     p(99.9990) =  86704.652 ms/op
     p(99.9999) =  86704.652 ms/op
    p(100.0000) =  86704.652 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 35.71% complete, ETA 07:27:01
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

54.892 ±(99.9%) 5.234 ms/op
# Warmup Iteration   2: 53.382 ±(99.9%) 0.422 ms/op
# Warmup Iteration   3: 55.725 ±(99.9%) 0.200 ms/op
# Warmup Iteration   4: 55.139 ±(99.9%) 0.229 ms/op
# Warmup Iteration   5: 52.712 ±(99.9%) 0.508 ms/op
Iteration   1: 182.094 ±(99.9%) 46.673 ms/op
                 executeFilterQuery·p0.00:   51.511 ms/op
                 executeFilterQuery·p0.50:   255.853 ms/op
                 executeFilterQuery·p0.90:   274.203 ms/op
                 executeFilterQuery·p0.95:   275.461 ms/op
                 executeFilterQuery·p0.99:   278.397 ms/op
                 executeFilterQuery·p0.999:  278.397 ms/op
                 executeFilterQuery·p0.9999: 278.397 ms/op
                 executeFilterQuery·p1.00:   278.397 ms/op

Iteration   2: 77.143 ±(99.9%) 15.668 ms/op
                 executeFilterQuery·p0.00:   48.103 ms/op
                 executeFilterQuery·p0.50:   51.577 ms/op
                 executeFilterQuery·p0.90:   186.384 ms/op
                 executeFilterQuery·p0.95:   217.580 ms/op
                 executeFilterQuery·p0.99:   236.873 ms/op
                 executeFilterQuery·p0.999:  241.435 ms/op
                 executeFilterQuery·p0.9999: 241.435 ms/op
                 executeFilterQuery·p1.00:   241.435 ms/op

Iteration   3: 52.374 ±(99.9%) 0.402 ms/op
                 executeFilterQuery·p0.00:   48.300 ms/op
                 executeFilterQuery·p0.50:   52.724 ms/op
                 executeFilterQuery·p0.90:   54.002 ms/op
                 executeFilterQuery·p0.95:   54.257 ms/op
                 executeFilterQuery·p0.99:   54.949 ms/op
                 executeFilterQuery·p0.999:  55.247 ms/op
                 executeFilterQuery·p0.9999: 55.247 ms/op
                 executeFilterQuery·p1.00:   55.247 ms/op

Iteration   4: 50.380 ±(99.9%) 0.404 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   49.676 ms/op
                 executeFilterQuery·p0.90:   53.084 ms/op
                 executeFilterQuery·p0.95:   53.353 ms/op
                 executeFilterQuery·p0.99:   54.002 ms/op
                 executeFilterQuery·p0.999:  54.002 ms/op
                 executeFilterQuery·p0.9999: 54.002 ms/op
                 executeFilterQuery·p1.00:   54.002 ms/op

Iteration   5: 48.924 ±(99.9%) 0.126 ms/op
                 executeFilterQuery·p0.00:   47.776 ms/op
                 executeFilterQuery·p0.50:   48.955 ms/op
                 executeFilterQuery·p0.90:   49.545 ms/op
                 executeFilterQuery·p0.95:   49.742 ms/op
                 executeFilterQuery·p0.99:   50.835 ms/op
                 executeFilterQuery·p0.999:  51.118 ms/op
                 executeFilterQuery·p0.9999: 51.118 ms/op
                 executeFilterQuery·p1.00:   51.118 ms/op


# Run progress: 36.31% complete, ETA 07:18:36
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

50.980 ±(99.9%) 2.031 ms/op
# Warmup Iteration   2: 50.057 ±(99.9%) 0.374 ms/op
# Warmup Iteration   3: 50.523 ±(99.9%) 0.514 ms/op
# Warmup Iteration   4: 51.218 ±(99.9%) 0.449 ms/op
# Warmup Iteration   5: 49.998 ±(99.9%) 0.288 ms/op
Iteration   1: 50.833 ±(99.9%) 0.344 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   50.692 ms/op
                 executeFilterQuery·p0.90:   52.462 ms/op
                 executeFilterQuery·p0.95:   52.838 ms/op
                 executeFilterQuery·p0.99:   54.729 ms/op
                 executeFilterQuery·p0.999:  54.854 ms/op
                 executeFilterQuery·p0.9999: 54.854 ms/op
                 executeFilterQuery·p1.00:   54.854 ms/op

Iteration   2: 49.973 ±(99.9%) 0.405 ms/op
                 executeFilterQuery·p0.00:   47.907 ms/op
                 executeFilterQuery·p0.50:   49.512 ms/op
                 executeFilterQuery·p0.90:   52.501 ms/op
                 executeFilterQuery·p0.95:   53.022 ms/op
                 executeFilterQuery·p0.99:   53.838 ms/op
                 executeFilterQuery·p0.999:  57.082 ms/op
                 executeFilterQuery·p0.9999: 57.082 ms/op
                 executeFilterQuery·p1.00:   57.082 ms/op

Iteration   3: 48.954 ±(99.9%) 0.169 ms/op
                 executeFilterQuery·p0.00:   47.448 ms/op
                 executeFilterQuery·p0.50:   48.824 ms/op
                 executeFilterQuery·p0.90:   50.004 ms/op
                 executeFilterQuery·p0.95:   50.135 ms/op
                 executeFilterQuery·p0.99:   50.594 ms/op
                 executeFilterQuery·p0.999:  50.921 ms/op
                 executeFilterQuery·p0.9999: 50.921 ms/op
                 executeFilterQuery·p1.00:   50.921 ms/op

Iteration   4: 48.677 ±(99.9%) 0.192 ms/op
                 executeFilterQuery·p0.00:   47.251 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   49.938 ms/op
                 executeFilterQuery·p0.95:   50.053 ms/op
                 executeFilterQuery·p0.99:   51.026 ms/op
                 executeFilterQuery·p0.999:  52.756 ms/op
                 executeFilterQuery·p0.9999: 52.756 ms/op
                 executeFilterQuery·p1.00:   52.756 ms/op

Iteration   5: 49.097 ±(99.9%) 0.157 ms/op
                 executeFilterQuery·p0.00:   47.186 ms/op
                 executeFilterQuery·p0.50:   49.218 ms/op
                 executeFilterQuery·p0.90:   49.742 ms/op
                 executeFilterQuery·p0.95:   49.873 ms/op
                 executeFilterQuery·p0.99:   50.326 ms/op
                 executeFilterQuery·p0.999:  50.659 ms/op
                 executeFilterQuery·p0.9999: 50.659 ms/op
                 executeFilterQuery·p1.00:   50.659 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1776
  mean =     55.949 ±(99.9%) 2.551 ms/op

  Histogram, ms/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 1122 
    [ 50.000,  75.000) = 587 
    [ 75.000, 100.000) = 6 
    [100.000, 125.000) = 8 
    [125.000, 150.000) = 2 
    [150.000, 175.000) = 4 
    [175.000, 200.000) = 6 
    [200.000, 225.000) = 8 
    [225.000, 250.000) = 5 
    [250.000, 275.000) = 25 

  Percentiles, ms/op:
      p(0.0000) =     47.186 ms/op
     p(50.0000) =     49.480 ms/op
     p(90.0000) =     53.432 ms/op
     p(95.0000) =     54.723 ms/op
     p(99.0000) =    266.399 ms/op
     p(99.9000) =    276.767 ms/op
     p(99.9900) =    278.397 ms/op
     p(99.9990) =    278.397 ms/op
     p(99.9999) =    278.397 ms/op
    p(100.0000) =    278.397 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 36.90% complete, ETA 07:10:24
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

54.435 ±(99.9%) 5.315 ms/op
# Warmup Iteration   2: 51.784 ±(99.9%) 0.284 ms/op
# Warmup Iteration   3: 52.201 ±(99.9%) 0.184 ms/op
# Warmup Iteration   4: 53.140 ±(99.9%) 0.253 ms/op
# Warmup Iteration   5: 51.010 ±(99.9%) 0.230 ms/op
Iteration   1: 51.267 ±(99.9%) 0.174 ms/op
                 executeFilterQuery·p0.00:   49.545 ms/op
                 executeFilterQuery·p0.50:   51.249 ms/op
                 executeFilterQuery·p0.90:   52.101 ms/op
                 executeFilterQuery·p0.95:   52.298 ms/op
                 executeFilterQuery·p0.99:   53.711 ms/op
                 executeFilterQuery·p0.999:  54.198 ms/op
                 executeFilterQuery·p0.9999: 54.198 ms/op
                 executeFilterQuery·p1.00:   54.198 ms/op

Iteration   2: 51.455 ±(99.9%) 0.319 ms/op
                 executeFilterQuery·p0.00:   49.807 ms/op
                 executeFilterQuery·p0.50:   51.315 ms/op
                 executeFilterQuery·p0.90:   54.198 ms/op
                 executeFilterQuery·p0.95:   54.434 ms/op
                 executeFilterQuery·p0.99:   54.940 ms/op
                 executeFilterQuery·p0.999:  56.295 ms/op
                 executeFilterQuery·p0.9999: 56.295 ms/op
                 executeFilterQuery·p1.00:   56.295 ms/op

Iteration   3: 51.055 ±(99.9%) 0.193 ms/op
                 executeFilterQuery·p0.00:   49.676 ms/op
                 executeFilterQuery·p0.50:   50.987 ms/op
                 executeFilterQuery·p0.90:   52.167 ms/op
                 executeFilterQuery·p0.95:   52.298 ms/op
                 executeFilterQuery·p0.99:   52.583 ms/op
                 executeFilterQuery·p0.999:  53.150 ms/op
                 executeFilterQuery·p0.9999: 53.150 ms/op
                 executeFilterQuery·p1.00:   53.150 ms/op

Iteration   4: 51.039 ±(99.9%) 0.190 ms/op
                 executeFilterQuery·p0.00:   49.807 ms/op
                 executeFilterQuery·p0.50:   50.987 ms/op
                 executeFilterQuery·p0.90:   52.127 ms/op
                 executeFilterQuery·p0.95:   52.376 ms/op
                 executeFilterQuery·p0.99:   52.720 ms/op
                 executeFilterQuery·p0.999:  53.412 ms/op
                 executeFilterQuery·p0.9999: 53.412 ms/op
                 executeFilterQuery·p1.00:   53.412 ms/op

Iteration   5: 50.944 ±(99.9%) 0.254 ms/op
                 executeFilterQuery·p0.00:   49.545 ms/op
                 executeFilterQuery·p0.50:   50.659 ms/op
                 executeFilterQuery·p0.90:   51.970 ms/op
                 executeFilterQuery·p0.95:   53.202 ms/op
                 executeFilterQuery·p0.99:   55.506 ms/op
                 executeFilterQuery·p0.999:  57.016 ms/op
                 executeFilterQuery·p0.9999: 57.016 ms/op
                 executeFilterQuery·p1.00:   57.016 ms/op


# Run progress: 37.50% complete, ETA 07:02:23
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

53.005 ±(99.9%) 1.704 ms/op
# Warmup Iteration   2: 51.842 ±(99.9%) 0.250 ms/op
# Warmup Iteration   3: 52.421 ±(99.9%) 0.165 ms/op
# Warmup Iteration   4: 53.050 ±(99.9%) 0.294 ms/op
# Warmup Iteration   5: 52.023 ±(99.9%) 0.390 ms/op
Iteration   1: 51.415 ±(99.9%) 0.223 ms/op
                 executeFilterQuery·p0.00:   49.676 ms/op
                 executeFilterQuery·p0.50:   51.315 ms/op
                 executeFilterQuery·p0.90:   52.232 ms/op
                 executeFilterQuery·p0.95:   53.530 ms/op
                 executeFilterQuery·p0.99:   54.657 ms/op
                 executeFilterQuery·p0.999:  54.657 ms/op
                 executeFilterQuery·p0.9999: 54.657 ms/op
                 executeFilterQuery·p1.00:   54.657 ms/op

Iteration   2: 50.991 ±(99.9%) 0.300 ms/op
                 executeFilterQuery·p0.00:   49.283 ms/op
                 executeFilterQuery·p0.50:   50.725 ms/op
                 executeFilterQuery·p0.90:   53.117 ms/op
                 executeFilterQuery·p0.95:   54.149 ms/op
                 executeFilterQuery·p0.99:   54.447 ms/op
                 executeFilterQuery·p0.999:  55.443 ms/op
                 executeFilterQuery·p0.9999: 55.443 ms/op
                 executeFilterQuery·p1.00:   55.443 ms/op

Iteration   3: 50.732 ±(99.9%) 0.204 ms/op
                 executeFilterQuery·p0.00:   49.021 ms/op
                 executeFilterQuery·p0.50:   50.856 ms/op
                 executeFilterQuery·p0.90:   52.036 ms/op
                 executeFilterQuery·p0.95:   52.232 ms/op
                 executeFilterQuery·p0.99:   52.300 ms/op
                 executeFilterQuery·p0.999:  52.363 ms/op
                 executeFilterQuery·p0.9999: 52.363 ms/op
                 executeFilterQuery·p1.00:   52.363 ms/op

Iteration   4: 51.048 ±(99.9%) 0.275 ms/op
                 executeFilterQuery·p0.00:   49.349 ms/op
                 executeFilterQuery·p0.50:   50.790 ms/op
                 executeFilterQuery·p0.90:   51.813 ms/op
                 executeFilterQuery·p0.95:   54.067 ms/op
                 executeFilterQuery·p0.99:   54.800 ms/op
                 executeFilterQuery·p0.999:  54.985 ms/op
                 executeFilterQuery·p0.9999: 54.985 ms/op
                 executeFilterQuery·p1.00:   54.985 ms/op

Iteration   5: 51.038 ±(99.9%) 0.234 ms/op
                 executeFilterQuery·p0.00:   50.004 ms/op
                 executeFilterQuery·p0.50:   50.921 ms/op
                 executeFilterQuery·p0.90:   51.446 ms/op
                 executeFilterQuery·p0.95:   53.687 ms/op
                 executeFilterQuery·p0.99:   54.589 ms/op
                 executeFilterQuery·p0.999:  59.245 ms/op
                 executeFilterQuery·p0.9999: 59.245 ms/op
                 executeFilterQuery·p1.00:   59.245 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1938
  mean =     51.097 ±(99.9%) 0.077 ms/op

  Histogram, ms/op:
    [40.000, 41.250) = 0 
    [41.250, 42.500) = 0 
    [42.500, 43.750) = 0 
    [43.750, 45.000) = 0 
    [45.000, 46.250) = 0 
    [46.250, 47.500) = 0 
    [47.500, 48.750) = 0 
    [48.750, 50.000) = 166 
    [50.000, 51.250) = 1098 
    [51.250, 52.500) = 558 
    [52.500, 53.750) = 46 
    [53.750, 55.000) = 65 
    [55.000, 56.250) = 2 
    [56.250, 57.500) = 2 
    [57.500, 58.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     49.021 ms/op
     p(50.0000) =     50.921 ms/op
     p(90.0000) =     52.167 ms/op
     p(95.0000) =     53.150 ms/op
     p(99.0000) =     54.657 ms/op
     p(99.9000) =     57.152 ms/op
     p(99.9900) =     59.245 ms/op
     p(99.9990) =     59.245 ms/op
     p(99.9999) =     59.245 ms/op
    p(100.0000) =     59.245 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 38.10% complete, ETA 06:54:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

50.287 ±(99.9%) 4.774 ms/op
# Warmup Iteration   2: 48.249 ±(99.9%) 0.246 ms/op
# Warmup Iteration   3: 49.101 ±(99.9%) 0.220 ms/op
# Warmup Iteration   4: 49.116 ±(99.9%) 0.431 ms/op
# Warmup Iteration   5: 48.640 ±(99.9%) 0.429 ms/op
Iteration   1: 49.258 ±(99.9%) 0.494 ms/op
                 executeFilterQuery·p0.00:   46.334 ms/op
                 executeFilterQuery·p0.50:   48.923 ms/op
                 executeFilterQuery·p0.90:   51.767 ms/op
                 executeFilterQuery·p0.95:   52.363 ms/op
                 executeFilterQuery·p0.99:   53.345 ms/op
                 executeFilterQuery·p0.999:  64.291 ms/op
                 executeFilterQuery·p0.9999: 64.291 ms/op
                 executeFilterQuery·p1.00:   64.291 ms/op

Iteration   2: 47.922 ±(99.9%) 0.404 ms/op
                 executeFilterQuery·p0.00:   46.072 ms/op
                 executeFilterQuery·p0.50:   47.710 ms/op
                 executeFilterQuery·p0.90:   49.991 ms/op
                 executeFilterQuery·p0.95:   51.773 ms/op
                 executeFilterQuery·p0.99:   52.825 ms/op
                 executeFilterQuery·p0.999:  61.932 ms/op
                 executeFilterQuery·p0.9999: 61.932 ms/op
                 executeFilterQuery·p1.00:   61.932 ms/op

Iteration   3: 47.425 ±(99.9%) 0.195 ms/op
                 executeFilterQuery·p0.00:   46.072 ms/op
                 executeFilterQuery·p0.50:   47.251 ms/op
                 executeFilterQuery·p0.90:   48.169 ms/op
                 executeFilterQuery·p0.95:   48.824 ms/op
                 executeFilterQuery·p0.99:   50.558 ms/op
                 executeFilterQuery·p0.999:  51.511 ms/op
                 executeFilterQuery·p0.9999: 51.511 ms/op
                 executeFilterQuery·p1.00:   51.511 ms/op

Iteration   4: 47.570 ±(99.9%) 0.248 ms/op
                 executeFilterQuery·p0.00:   45.941 ms/op
                 executeFilterQuery·p0.50:   47.186 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   49.185 ms/op
                 executeFilterQuery·p0.99:   51.007 ms/op
                 executeFilterQuery·p0.999:  51.118 ms/op
                 executeFilterQuery·p0.9999: 51.118 ms/op
                 executeFilterQuery·p1.00:   51.118 ms/op

Iteration   5: 47.358 ±(99.9%) 0.169 ms/op
                 executeFilterQuery·p0.00:   45.875 ms/op
                 executeFilterQuery·p0.50:   47.120 ms/op
                 executeFilterQuery·p0.90:   48.169 ms/op
                 executeFilterQuery·p0.95:   48.425 ms/op
                 executeFilterQuery·p0.99:   49.218 ms/op
                 executeFilterQuery·p0.999:  49.218 ms/op
                 executeFilterQuery·p0.9999: 49.218 ms/op
                 executeFilterQuery·p1.00:   49.218 ms/op


# Run progress: 38.69% complete, ETA 06:46:58
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

50.193 ±(99.9%) 1.890 ms/op
# Warmup Iteration   2: 48.383 ±(99.9%) 0.278 ms/op
# Warmup Iteration   3: 49.293 ±(99.9%) 0.124 ms/op
# Warmup Iteration   4: 49.949 ±(99.9%) 0.419 ms/op
# Warmup Iteration   5: 49.426 ±(99.9%) 0.335 ms/op
Iteration   1: 49.790 ±(99.9%) 0.307 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   50.201 ms/op
                 executeFilterQuery·p0.90:   51.118 ms/op
                 executeFilterQuery·p0.95:   51.249 ms/op
                 executeFilterQuery·p0.99:   51.640 ms/op
                 executeFilterQuery·p0.999:  52.232 ms/op
                 executeFilterQuery·p0.9999: 52.232 ms/op
                 executeFilterQuery·p1.00:   52.232 ms/op

Iteration   2: 48.824 ±(99.9%) 0.275 ms/op
                 executeFilterQuery·p0.00:   46.858 ms/op
                 executeFilterQuery·p0.50:   48.497 ms/op
                 executeFilterQuery·p0.90:   50.856 ms/op
                 executeFilterQuery·p0.95:   51.118 ms/op
                 executeFilterQuery·p0.99:   51.962 ms/op
                 executeFilterQuery·p0.999:  53.150 ms/op
                 executeFilterQuery·p0.9999: 53.150 ms/op
                 executeFilterQuery·p1.00:   53.150 ms/op

Iteration   3: 47.922 ±(99.9%) 0.154 ms/op
                 executeFilterQuery·p0.00:   46.334 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.628 ms/op
                 executeFilterQuery·p0.95:   49.188 ms/op
                 executeFilterQuery·p0.99:   50.064 ms/op
                 executeFilterQuery·p0.999:  50.201 ms/op
                 executeFilterQuery·p0.9999: 50.201 ms/op
                 executeFilterQuery·p1.00:   50.201 ms/op

Iteration   4: 47.856 ±(99.9%) 0.179 ms/op
                 executeFilterQuery·p0.00:   46.137 ms/op
                 executeFilterQuery·p0.50:   47.972 ms/op
                 executeFilterQuery·p0.90:   48.765 ms/op
                 executeFilterQuery·p0.95:   48.955 ms/op
                 executeFilterQuery·p0.99:   49.212 ms/op
                 executeFilterQuery·p0.999:  52.822 ms/op
                 executeFilterQuery·p0.9999: 52.822 ms/op
                 executeFilterQuery·p1.00:   52.822 ms/op

Iteration   5: 47.640 ±(99.9%) 0.123 ms/op
                 executeFilterQuery·p0.00:   46.596 ms/op
                 executeFilterQuery·p0.50:   47.514 ms/op
                 executeFilterQuery·p0.90:   48.693 ms/op
                 executeFilterQuery·p0.95:   48.824 ms/op
                 executeFilterQuery·p0.99:   49.139 ms/op
                 executeFilterQuery·p0.999:  49.414 ms/op
                 executeFilterQuery·p0.9999: 49.414 ms/op
                 executeFilterQuery·p1.00:   49.414 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 2064
  mean =     48.142 ±(99.9%) 0.103 ms/op

  Histogram, ms/op:
    [40.000, 42.500) = 0 
    [42.500, 45.000) = 0 
    [45.000, 47.500) = 744 
    [47.500, 50.000) = 1040 
    [50.000, 52.500) = 270 
    [52.500, 55.000) = 8 
    [55.000, 57.500) = 0 
    [57.500, 60.000) = 0 
    [60.000, 62.500) = 1 
    [62.500, 65.000) = 1 
    [65.000, 67.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     45.875 ms/op
     p(50.0000) =     47.907 ms/op
     p(90.0000) =     50.266 ms/op
     p(95.0000) =     51.036 ms/op
     p(99.0000) =     52.101 ms/op
     p(99.9000) =     61.373 ms/op
     p(99.9900) =     64.291 ms/op
     p(99.9990) =     64.291 ms/op
     p(99.9999) =     64.291 ms/op
    p(100.0000) =     64.291 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 39.29% complete, ETA 06:39:31
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

576.484 ±(99.9%) 461.900 ms/op
# Warmup Iteration   2: 449.041 ±(99.9%) 4.203 ms/op
# Warmup Iteration   3: 453.652 ±(99.9%) 6.683 ms/op
# Warmup Iteration   4: 453.372 ±(99.9%) 5.081 ms/op
# Warmup Iteration   5: 457.870 ±(99.9%) 7.660 ms/op
Iteration   1: 475.005 ±(99.9%) 6.456 ms/op
                 executeFilterQuery·p0.00:   463.471 ms/op
                 executeFilterQuery·p0.50:   474.481 ms/op
                 executeFilterQuery·p0.90:   486.015 ms/op
                 executeFilterQuery·p0.95:   488.899 ms/op
                 executeFilterQuery·p0.99:   489.161 ms/op
                 executeFilterQuery·p0.999:  489.161 ms/op
                 executeFilterQuery·p0.9999: 489.161 ms/op
                 executeFilterQuery·p1.00:   489.161 ms/op

Iteration   2: 471.978 ±(99.9%) 16.796 ms/op
                 executeFilterQuery·p0.00:   436.732 ms/op
                 executeFilterQuery·p0.50:   481.559 ms/op
                 executeFilterQuery·p0.90:   491.992 ms/op
                 executeFilterQuery·p0.95:   492.752 ms/op
                 executeFilterQuery·p0.99:   492.831 ms/op
                 executeFilterQuery·p0.999:  492.831 ms/op
                 executeFilterQuery·p0.9999: 492.831 ms/op
                 executeFilterQuery·p1.00:   492.831 ms/op

Iteration   3: 446.101 ±(99.9%) 5.289 ms/op
                 executeFilterQuery·p0.00:   431.489 ms/op
                 executeFilterQuery·p0.50:   447.742 ms/op
                 executeFilterQuery·p0.90:   454.348 ms/op
                 executeFilterQuery·p0.95:   456.655 ms/op
                 executeFilterQuery·p0.99:   457.179 ms/op
                 executeFilterQuery·p0.999:  457.179 ms/op
                 executeFilterQuery·p0.9999: 457.179 ms/op
                 executeFilterQuery·p1.00:   457.179 ms/op

Iteration   4: 443.570 ±(99.9%) 5.189 ms/op
                 executeFilterQuery·p0.00:   432.013 ms/op
                 executeFilterQuery·p0.50:   446.169 ms/op
                 executeFilterQuery·p0.90:   450.468 ms/op
                 executeFilterQuery·p0.95:   453.404 ms/op
                 executeFilterQuery·p0.99:   454.033 ms/op
                 executeFilterQuery·p0.999:  454.033 ms/op
                 executeFilterQuery·p0.9999: 454.033 ms/op
                 executeFilterQuery·p1.00:   454.033 ms/op

Iteration   5: 440.858 ±(99.9%) 5.356 ms/op
                 executeFilterQuery·p0.00:   431.489 ms/op
                 executeFilterQuery·p0.50:   440.402 ms/op
                 executeFilterQuery·p0.90:   453.299 ms/op
                 executeFilterQuery·p0.95:   455.397 ms/op
                 executeFilterQuery·p0.99:   455.606 ms/op
                 executeFilterQuery·p0.999:  455.606 ms/op
                 executeFilterQuery·p0.9999: 455.606 ms/op
                 executeFilterQuery·p1.00:   455.606 ms/op


# Run progress: 39.88% complete, ETA 06:32:18
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

461.516 ±(99.9%) 25.990 ms/op
# Warmup Iteration   2: 447.788 ±(99.9%) 5.143 ms/op
# Warmup Iteration   3: 452.141 ±(99.9%) 6.474 ms/op
# Warmup Iteration   4: 455.082 ±(99.9%) 4.938 ms/op
# Warmup Iteration   5: 467.498 ±(99.9%) 14.947 ms/op
Iteration   1: 479.124 ±(99.9%) 4.728 ms/op
                 executeFilterQuery·p0.00:   470.811 ms/op
                 executeFilterQuery·p0.50:   478.151 ms/op
                 executeFilterQuery·p0.90:   489.370 ms/op
                 executeFilterQuery·p0.95:   491.153 ms/op
                 executeFilterQuery·p0.99:   491.258 ms/op
                 executeFilterQuery·p0.999:  491.258 ms/op
                 executeFilterQuery·p0.9999: 491.258 ms/op
                 executeFilterQuery·p1.00:   491.258 ms/op

Iteration   2: 468.451 ±(99.9%) 15.172 ms/op
                 executeFilterQuery·p0.00:   443.548 ms/op
                 executeFilterQuery·p0.50:   459.801 ms/op
                 executeFilterQuery·p0.90:   496.396 ms/op
                 executeFilterQuery·p0.95:   500.145 ms/op
                 executeFilterQuery·p0.99:   500.695 ms/op
                 executeFilterQuery·p0.999:  500.695 ms/op
                 executeFilterQuery·p0.9999: 500.695 ms/op
                 executeFilterQuery·p1.00:   500.695 ms/op

Iteration   3: 456.202 ±(99.9%) 5.702 ms/op
                 executeFilterQuery·p0.00:   444.072 ms/op
                 executeFilterQuery·p0.50:   458.228 ms/op
                 executeFilterQuery·p0.90:   462.946 ms/op
                 executeFilterQuery·p0.95:   467.403 ms/op
                 executeFilterQuery·p0.99:   468.189 ms/op
                 executeFilterQuery·p0.999:  468.189 ms/op
                 executeFilterQuery·p0.9999: 468.189 ms/op
                 executeFilterQuery·p1.00:   468.189 ms/op

Iteration   4: 456.965 ±(99.9%) 5.213 ms/op
                 executeFilterQuery·p0.00:   445.121 ms/op
                 executeFilterQuery·p0.50:   457.441 ms/op
                 executeFilterQuery·p0.90:   464.729 ms/op
                 executeFilterQuery·p0.95:   468.163 ms/op
                 executeFilterQuery·p0.99:   468.713 ms/op
                 executeFilterQuery·p0.999:  468.713 ms/op
                 executeFilterQuery·p0.9999: 468.713 ms/op
                 executeFilterQuery·p1.00:   468.713 ms/op

Iteration   5: 457.823 ±(99.9%) 4.179 ms/op
                 executeFilterQuery·p0.00:   450.888 ms/op
                 executeFilterQuery·p0.50:   457.179 ms/op
                 executeFilterQuery·p0.90:   467.717 ms/op
                 executeFilterQuery·p0.95:   470.208 ms/op
                 executeFilterQuery·p0.99:   470.286 ms/op
                 executeFilterQuery·p0.999:  470.286 ms/op
                 executeFilterQuery·p0.9999: 470.286 ms/op
                 executeFilterQuery·p1.00:   470.286 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 221
  mean =    459.231 ±(99.9%) 3.709 ms/op

  Histogram, ms/op:
    [430.000, 435.000) = 12 
    [435.000, 440.000) = 12 
    [440.000, 445.000) = 23 
    [445.000, 450.000) = 28 
    [450.000, 455.000) = 25 
    [455.000, 460.000) = 34 
    [460.000, 465.000) = 15 
    [465.000, 470.000) = 11 
    [470.000, 475.000) = 11 
    [475.000, 480.000) = 19 
    [480.000, 485.000) = 13 
    [485.000, 490.000) = 8 
    [490.000, 495.000) = 8 
    [495.000, 500.000) = 1 
    [500.000, 505.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    431.489 ms/op
     p(50.0000) =    456.131 ms/op
     p(90.0000) =    483.918 ms/op
     p(95.0000) =    489.161 ms/op
     p(99.0000) =    496.564 ms/op
     p(99.9000) =    500.695 ms/op
     p(99.9900) =    500.695 ms/op
     p(99.9990) =    500.695 ms/op
     p(99.9999) =    500.695 ms/op
    p(100.0000) =    500.695 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 40.48% complete, ETA 06:25:15
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

694.227 ±(99.9%) 840.670 ms/op
# Warmup Iteration   2: 455.058 ±(99.9%) 7.263 ms/op
# Warmup Iteration   3: 457.417 ±(99.9%) 7.998 ms/op
# Warmup Iteration   4: 466.926 ±(99.9%) 6.118 ms/op
# Warmup Iteration   5: 462.541 ±(99.9%) 10.220 ms/op
Iteration   1: 492.032 ±(99.9%) 5.156 ms/op
                 executeFilterQuery·p0.00:   475.529 ms/op
                 executeFilterQuery·p0.50:   491.782 ms/op
                 executeFilterQuery·p0.90:   499.542 ms/op
                 executeFilterQuery·p0.95:   500.590 ms/op
                 executeFilterQuery·p0.99:   500.695 ms/op
                 executeFilterQuery·p0.999:  500.695 ms/op
                 executeFilterQuery·p0.9999: 500.695 ms/op
                 executeFilterQuery·p1.00:   500.695 ms/op

Iteration   2: 487.313 ±(99.9%) 13.577 ms/op
                 executeFilterQuery·p0.00:   451.412 ms/op
                 executeFilterQuery·p0.50:   490.734 ms/op
                 executeFilterQuery·p0.90:   504.680 ms/op
                 executeFilterQuery·p0.95:   505.833 ms/op
                 executeFilterQuery·p0.99:   505.938 ms/op
                 executeFilterQuery·p0.999:  505.938 ms/op
                 executeFilterQuery·p0.9999: 505.938 ms/op
                 executeFilterQuery·p1.00:   505.938 ms/op

Iteration   3: 455.868 ±(99.9%) 5.832 ms/op
                 executeFilterQuery·p0.00:   441.450 ms/op
                 executeFilterQuery·p0.50:   453.509 ms/op
                 executeFilterQuery·p0.90:   465.410 ms/op
                 executeFilterQuery·p0.95:   470.915 ms/op
                 executeFilterQuery·p0.99:   471.859 ms/op
                 executeFilterQuery·p0.999:  471.859 ms/op
                 executeFilterQuery·p0.9999: 471.859 ms/op
                 executeFilterQuery·p1.00:   471.859 ms/op

Iteration   4: 455.273 ±(99.9%) 4.174 ms/op
                 executeFilterQuery·p0.00:   447.742 ms/op
                 executeFilterQuery·p0.50:   454.296 ms/op
                 executeFilterQuery·p0.90:   462.107 ms/op
                 executeFilterQuery·p0.95:   463.313 ms/op
                 executeFilterQuery·p0.99:   463.471 ms/op
                 executeFilterQuery·p0.999:  463.471 ms/op
                 executeFilterQuery·p0.9999: 463.471 ms/op
                 executeFilterQuery·p1.00:   463.471 ms/op

Iteration   5: 459.157 ±(99.9%) 4.373 ms/op
                 executeFilterQuery·p0.00:   444.596 ms/op
                 executeFilterQuery·p0.50:   457.966 ms/op
                 executeFilterQuery·p0.90:   465.568 ms/op
                 executeFilterQuery·p0.95:   467.350 ms/op
                 executeFilterQuery·p0.99:   467.665 ms/op
                 executeFilterQuery·p0.999:  467.665 ms/op
                 executeFilterQuery·p0.9999: 467.665 ms/op
                 executeFilterQuery·p1.00:   467.665 ms/op


# Run progress: 41.07% complete, ETA 06:18:20
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

489.136 ±(99.9%) 61.718 ms/op
# Warmup Iteration   2: 459.348 ±(99.9%) 7.704 ms/op
# Warmup Iteration   3: 465.687 ±(99.9%) 6.872 ms/op
# Warmup Iteration   4: 466.616 ±(99.9%) 4.261 ms/op
# Warmup Iteration   5: 474.576 ±(99.9%) 14.672 ms/op
Iteration   1: 500.931 ±(99.9%) 9.972 ms/op
                 executeFilterQuery·p0.00:   477.626 ms/op
                 executeFilterQuery·p0.50:   503.579 ms/op
                 executeFilterQuery·p0.90:   515.847 ms/op
                 executeFilterQuery·p0.95:   515.899 ms/op
                 executeFilterQuery·p0.99:   515.899 ms/op
                 executeFilterQuery·p0.999:  515.899 ms/op
                 executeFilterQuery·p0.9999: 515.899 ms/op
                 executeFilterQuery·p1.00:   515.899 ms/op

Iteration   2: 491.083 ±(99.9%) 10.615 ms/op
                 executeFilterQuery·p0.00:   459.276 ms/op
                 executeFilterQuery·p0.50:   494.928 ms/op
                 executeFilterQuery·p0.90:   503.107 ms/op
                 executeFilterQuery·p0.95:   505.676 ms/op
                 executeFilterQuery·p0.99:   505.938 ms/op
                 executeFilterQuery·p0.999:  505.938 ms/op
                 executeFilterQuery·p0.9999: 505.938 ms/op
                 executeFilterQuery·p1.00:   505.938 ms/op

Iteration   3: 472.098 ±(99.9%) 4.293 ms/op
                 executeFilterQuery·p0.00:   459.276 ms/op
                 executeFilterQuery·p0.50:   472.121 ms/op
                 executeFilterQuery·p0.90:   480.458 ms/op
                 executeFilterQuery·p0.95:   481.218 ms/op
                 executeFilterQuery·p0.99:   481.296 ms/op
                 executeFilterQuery·p0.999:  481.296 ms/op
                 executeFilterQuery·p0.9999: 481.296 ms/op
                 executeFilterQuery·p1.00:   481.296 ms/op

Iteration   4: 470.477 ±(99.9%) 7.696 ms/op
                 executeFilterQuery·p0.00:   452.461 ms/op
                 executeFilterQuery·p0.50:   471.597 ms/op
                 executeFilterQuery·p0.90:   481.349 ms/op
                 executeFilterQuery·p0.95:   489.842 ms/op
                 executeFilterQuery·p0.99:   491.258 ms/op
                 executeFilterQuery·p0.999:  491.258 ms/op
                 executeFilterQuery·p0.9999: 491.258 ms/op
                 executeFilterQuery·p1.00:   491.258 ms/op

Iteration   5: 464.257 ±(99.9%) 5.139 ms/op
                 executeFilterQuery·p0.00:   454.033 ms/op
                 executeFilterQuery·p0.50:   463.471 ms/op
                 executeFilterQuery·p0.90:   472.960 ms/op
                 executeFilterQuery·p0.95:   478.780 ms/op
                 executeFilterQuery·p0.99:   479.724 ms/op
                 executeFilterQuery·p0.999:  479.724 ms/op
                 executeFilterQuery·p0.9999: 479.724 ms/op
                 executeFilterQuery·p1.00:   479.724 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 215
  mean =    474.393 ±(99.9%) 4.133 ms/op

  Histogram, ms/op:
    [440.000, 445.000) = 2 
    [445.000, 450.000) = 5 
    [450.000, 455.000) = 24 
    [455.000, 460.000) = 29 
    [460.000, 465.000) = 24 
    [465.000, 470.000) = 23 
    [470.000, 475.000) = 16 
    [475.000, 480.000) = 15 
    [480.000, 485.000) = 9 
    [485.000, 490.000) = 7 
    [490.000, 495.000) = 20 
    [495.000, 500.000) = 21 
    [500.000, 505.000) = 11 
    [505.000, 510.000) = 4 
    [510.000, 515.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    441.450 ms/op
     p(50.0000) =    470.286 ms/op
     p(90.0000) =    499.646 ms/op
     p(95.0000) =    504.889 ms/op
     p(99.0000) =    515.816 ms/op
     p(99.9000) =    515.899 ms/op
     p(99.9900) =    515.899 ms/op
     p(99.9990) =    515.899 ms/op
     p(99.9999) =    515.899 ms/op
    p(100.0000) =    515.899 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 41.67% complete, ETA 06:11:36
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

767.517 ±(99.9%) 983.016 ms/op
# Warmup Iteration   2: 478.500 ±(99.9%) 8.896 ms/op
# Warmup Iteration   3: 479.374 ±(99.9%) 12.235 ms/op
# Warmup Iteration   4: 483.943 ±(99.9%) 5.009 ms/op
# Warmup Iteration   5: 491.757 ±(99.9%) 20.688 ms/op
Iteration   1: 487.313 ±(99.9%) 11.185 ms/op
                 executeFilterQuery·p0.00:   477.102 ms/op
                 executeFilterQuery·p0.50:   481.821 ms/op
                 executeFilterQuery·p0.90:   502.058 ms/op
                 executeFilterQuery·p0.95:   531.995 ms/op
                 executeFilterQuery·p0.99:   535.298 ms/op
                 executeFilterQuery·p0.999:  535.298 ms/op
                 executeFilterQuery·p0.9999: 535.298 ms/op
                 executeFilterQuery·p1.00:   535.298 ms/op

Iteration   2: 485.416 ±(99.9%) 3.398 ms/op
                 executeFilterQuery·p0.00:   479.724 ms/op
                 executeFilterQuery·p0.50:   486.539 ms/op
                 executeFilterQuery·p0.90:   490.629 ms/op
                 executeFilterQuery·p0.95:   490.734 ms/op
                 executeFilterQuery·p0.99:   490.734 ms/op
                 executeFilterQuery·p0.999:  490.734 ms/op
                 executeFilterQuery·p0.9999: 490.734 ms/op
                 executeFilterQuery·p1.00:   490.734 ms/op

Iteration   3: 481.771 ±(99.9%) 5.751 ms/op
                 executeFilterQuery·p0.00:   471.859 ms/op
                 executeFilterQuery·p0.50:   481.296 ms/op
                 executeFilterQuery·p0.90:   490.629 ms/op
                 executeFilterQuery·p0.95:   498.283 ms/op
                 executeFilterQuery·p0.99:   499.122 ms/op
                 executeFilterQuery·p0.999:  499.122 ms/op
                 executeFilterQuery·p0.9999: 499.122 ms/op
                 executeFilterQuery·p1.00:   499.122 ms/op

Iteration   4: 493.130 ±(99.9%) 10.402 ms/op
                 executeFilterQuery·p0.00:   472.908 ms/op
                 executeFilterQuery·p0.50:   499.122 ms/op
                 executeFilterQuery·p0.90:   506.777 ms/op
                 executeFilterQuery·p0.95:   507.930 ms/op
                 executeFilterQuery·p0.99:   508.035 ms/op
                 executeFilterQuery·p0.999:  508.035 ms/op
                 executeFilterQuery·p0.9999: 508.035 ms/op
                 executeFilterQuery·p1.00:   508.035 ms/op

Iteration   5: 496.451 ±(99.9%) 9.370 ms/op
                 executeFilterQuery·p0.00:   472.383 ms/op
                 executeFilterQuery·p0.50:   500.695 ms/op
                 executeFilterQuery·p0.90:   506.252 ms/op
                 executeFilterQuery·p0.95:   506.934 ms/op
                 executeFilterQuery·p0.99:   506.986 ms/op
                 executeFilterQuery·p0.999:  506.986 ms/op
                 executeFilterQuery·p0.9999: 506.986 ms/op
                 executeFilterQuery·p1.00:   506.986 ms/op


# Run progress: 42.26% complete, ETA 06:04:59
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

539.934 ±(99.9%) 117.459 ms/op
# Warmup Iteration   2: 482.345 ±(99.9%) 10.410 ms/op
# Warmup Iteration   3: 486.015 ±(99.9%) 10.960 ms/op
# Warmup Iteration   4: 502.451 ±(99.9%) 6.520 ms/op
# Warmup Iteration   5: 504.837 ±(99.9%) 2.814 ms/op
Iteration   1: 499.306 ±(99.9%) 7.654 ms/op
                 executeFilterQuery·p0.00:   482.345 ms/op
                 executeFilterQuery·p0.50:   500.957 ms/op
                 executeFilterQuery·p0.90:   507.301 ms/op
                 executeFilterQuery·p0.95:   517.970 ms/op
                 executeFilterQuery·p0.99:   518.521 ms/op
                 executeFilterQuery·p0.999:  518.521 ms/op
                 executeFilterQuery·p0.9999: 518.521 ms/op
                 executeFilterQuery·p1.00:   518.521 ms/op

Iteration   2: 486.040 ±(99.9%) 4.170 ms/op
                 executeFilterQuery·p0.00:   481.821 ms/op
                 executeFilterQuery·p0.50:   483.918 ms/op
                 executeFilterQuery·p0.90:   493.670 ms/op
                 executeFilterQuery·p0.95:   500.013 ms/op
                 executeFilterQuery·p0.99:   500.695 ms/op
                 executeFilterQuery·p0.999:  500.695 ms/op
                 executeFilterQuery·p0.9999: 500.695 ms/op
                 executeFilterQuery·p1.00:   500.695 ms/op

Iteration   3: 478.400 ±(99.9%) 4.646 ms/op
                 executeFilterQuery·p0.00:   471.335 ms/op
                 executeFilterQuery·p0.50:   477.626 ms/op
                 executeFilterQuery·p0.90:   486.330 ms/op
                 executeFilterQuery·p0.95:   490.786 ms/op
                 executeFilterQuery·p0.99:   491.258 ms/op
                 executeFilterQuery·p0.999:  491.258 ms/op
                 executeFilterQuery·p0.9999: 491.258 ms/op
                 executeFilterQuery·p1.00:   491.258 ms/op

Iteration   4: 478.350 ±(99.9%) 5.032 ms/op
                 executeFilterQuery·p0.00:   468.713 ms/op
                 executeFilterQuery·p0.50:   478.151 ms/op
                 executeFilterQuery·p0.90:   488.217 ms/op
                 executeFilterQuery·p0.95:   489.580 ms/op
                 executeFilterQuery·p0.99:   489.685 ms/op
                 executeFilterQuery·p0.999:  489.685 ms/op
                 executeFilterQuery·p0.9999: 489.685 ms/op
                 executeFilterQuery·p1.00:   489.685 ms/op

Iteration   5: 485.291 ±(99.9%) 6.342 ms/op
                 executeFilterQuery·p0.00:   473.956 ms/op
                 executeFilterQuery·p0.50:   485.491 ms/op
                 executeFilterQuery·p0.90:   496.815 ms/op
                 executeFilterQuery·p0.95:   497.969 ms/op
                 executeFilterQuery·p0.99:   498.074 ms/op
                 executeFilterQuery·p0.999:  498.074 ms/op
                 executeFilterQuery·p0.9999: 498.074 ms/op
                 executeFilterQuery·p1.00:   498.074 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 209
  mean =    487.089 ±(99.9%) 2.497 ms/op

  Histogram, ms/op:
    [460.000, 465.000) = 0 
    [465.000, 470.000) = 1 
    [470.000, 475.000) = 21 
    [475.000, 480.000) = 35 
    [480.000, 485.000) = 54 
    [485.000, 490.000) = 29 
    [490.000, 495.000) = 19 
    [495.000, 500.000) = 15 
    [500.000, 505.000) = 23 
    [505.000, 510.000) = 10 
    [510.000, 515.000) = 0 
    [515.000, 520.000) = 1 
    [520.000, 525.000) = 0 
    [525.000, 530.000) = 0 
    [530.000, 535.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    468.713 ms/op
     p(50.0000) =    483.918 ms/op
     p(90.0000) =    503.316 ms/op
     p(95.0000) =    505.414 ms/op
     p(99.0000) =    517.472 ms/op
     p(99.9000) =    535.298 ms/op
     p(99.9900) =    535.298 ms/op
     p(99.9990) =    535.298 ms/op
     p(99.9999) =    535.298 ms/op
    p(100.0000) =    535.298 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 42.86% complete, ETA 05:58:29
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1547.548 ±(99.9%) 3663.049 ms/op
# Warmup Iteration   2: 882.988 ±(99.9%) 17.516 ms/op
# Warmup Iteration   3: 886.571 ±(99.9%) 14.334 ms/op
# Warmup Iteration   4: 940.954 ±(99.9%) 38.403 ms/op
# Warmup Iteration   5: 955.443 ±(99.9%) 12.095 ms/op
Iteration   1: 937.999 ±(99.9%) 39.065 ms/op
                 executeFilterQuery·p0.00:   890.241 ms/op
                 executeFilterQuery·p0.50:   941.621 ms/op
                 executeFilterQuery·p0.90:   976.434 ms/op
                 executeFilterQuery·p0.95:   980.419 ms/op
                 executeFilterQuery·p0.99:   980.419 ms/op
                 executeFilterQuery·p0.999:  980.419 ms/op
                 executeFilterQuery·p0.9999: 980.419 ms/op
                 executeFilterQuery·p1.00:   980.419 ms/op

Iteration   2: 907.400 ±(99.9%) 21.688 ms/op
                 executeFilterQuery·p0.00:   892.338 ms/op
                 executeFilterQuery·p0.50:   902.824 ms/op
                 executeFilterQuery·p0.90:   940.153 ms/op
                 executeFilterQuery·p0.95:   942.670 ms/op
                 executeFilterQuery·p0.99:   942.670 ms/op
                 executeFilterQuery·p0.999:  942.670 ms/op
                 executeFilterQuery·p0.9999: 942.670 ms/op
                 executeFilterQuery·p1.00:   942.670 ms/op

Iteration   3: 886.921 ±(99.9%) 10.954 ms/op
                 executeFilterQuery·p0.00:   874.512 ms/op
                 executeFilterQuery·p0.50:   885.522 ms/op
                 executeFilterQuery·p0.90:   899.364 ms/op
                 executeFilterQuery·p0.95:   899.678 ms/op
                 executeFilterQuery·p0.99:   899.678 ms/op
                 executeFilterQuery·p0.999:  899.678 ms/op
                 executeFilterQuery·p0.9999: 899.678 ms/op
                 executeFilterQuery·p1.00:   899.678 ms/op

Iteration   4: 876.173 ±(99.9%) 12.939 ms/op
                 executeFilterQuery·p0.00:   864.027 ms/op
                 executeFilterQuery·p0.50:   874.512 ms/op
                 executeFilterQuery·p0.90:   894.960 ms/op
                 executeFilterQuery·p0.95:   896.532 ms/op
                 executeFilterQuery·p0.99:   896.532 ms/op
                 executeFilterQuery·p0.999:  896.532 ms/op
                 executeFilterQuery·p0.9999: 896.532 ms/op
                 executeFilterQuery·p1.00:   896.532 ms/op

Iteration   5: 884.561 ±(99.9%) 12.289 ms/op
                 executeFilterQuery·p0.00:   869.270 ms/op
                 executeFilterQuery·p0.50:   882.377 ms/op
                 executeFilterQuery·p0.90:   901.671 ms/op
                 executeFilterQuery·p0.95:   903.873 ms/op
                 executeFilterQuery·p0.99:   903.873 ms/op
                 executeFilterQuery·p0.999:  903.873 ms/op
                 executeFilterQuery·p0.9999: 903.873 ms/op
                 executeFilterQuery·p1.00:   903.873 ms/op


# Run progress: 43.45% complete, ETA 05:52:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

902.911 ±(99.9%) 79.226 ms/op
# Warmup Iteration   2: 883.163 ±(99.9%) 18.093 ms/op
# Warmup Iteration   3: 895.309 ±(99.9%) 12.160 ms/op
# Warmup Iteration   4: 917.409 ±(99.9%) 25.553 ms/op
# Warmup Iteration   5: 919.982 ±(99.9%) 23.005 ms/op
Iteration   1: 952.393 ±(99.9%) 14.269 ms/op
                 executeFilterQuery·p0.00:   927.990 ms/op
                 executeFilterQuery·p0.50:   952.107 ms/op
                 executeFilterQuery·p0.90:   968.465 ms/op
                 executeFilterQuery·p0.95:   969.933 ms/op
                 executeFilterQuery·p0.99:   969.933 ms/op
                 executeFilterQuery·p0.999:  969.933 ms/op
                 executeFilterQuery·p0.9999: 969.933 ms/op
                 executeFilterQuery·p1.00:   969.933 ms/op

Iteration   2: 936.474 ±(99.9%) 47.172 ms/op
                 executeFilterQuery·p0.00:   878.707 ms/op
                 executeFilterQuery·p0.50:   943.718 ms/op
                 executeFilterQuery·p0.90:   970.772 ms/op
                 executeFilterQuery·p0.95:   970.981 ms/op
                 executeFilterQuery·p0.99:   970.981 ms/op
                 executeFilterQuery·p0.999:  970.981 ms/op
                 executeFilterQuery·p0.9999: 970.981 ms/op
                 executeFilterQuery·p1.00:   970.981 ms/op

Iteration   3: 900.290 ±(99.9%) 14.299 ms/op
                 executeFilterQuery·p0.00:   882.901 ms/op
                 executeFilterQuery·p0.50:   899.678 ms/op
                 executeFilterQuery·p0.90:   915.197 ms/op
                 executeFilterQuery·p0.95:   916.455 ms/op
                 executeFilterQuery·p0.99:   916.455 ms/op
                 executeFilterQuery·p0.999:  916.455 ms/op
                 executeFilterQuery·p0.9999: 916.455 ms/op
                 executeFilterQuery·p1.00:   916.455 ms/op

Iteration   4: 904.309 ±(99.9%) 12.734 ms/op
                 executeFilterQuery·p0.00:   888.144 ms/op
                 executeFilterQuery·p0.50:   905.445 ms/op
                 executeFilterQuery·p0.90:   917.189 ms/op
                 executeFilterQuery·p0.95:   917.504 ms/op
                 executeFilterQuery·p0.99:   917.504 ms/op
                 executeFilterQuery·p0.999:  917.504 ms/op
                 executeFilterQuery·p0.9999: 917.504 ms/op
                 executeFilterQuery·p1.00:   917.504 ms/op

Iteration   5: 898.892 ±(99.9%) 12.338 ms/op
                 executeFilterQuery·p0.00:   884.998 ms/op
                 executeFilterQuery·p0.50:   900.727 ms/op
                 executeFilterQuery·p0.90:   912.261 ms/op
                 executeFilterQuery·p0.95:   912.261 ms/op
                 executeFilterQuery·p0.99:   912.261 ms/op
                 executeFilterQuery·p0.999:  912.261 ms/op
                 executeFilterQuery·p0.9999: 912.261 ms/op
                 executeFilterQuery·p1.00:   912.261 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 116
  mean =    907.678 ±(99.9%) 9.059 ms/op

  Histogram, ms/op:
    [ 800.000,  812.500) = 0 
    [ 812.500,  825.000) = 0 
    [ 825.000,  837.500) = 0 
    [ 837.500,  850.000) = 0 
    [ 850.000,  862.500) = 0 
    [ 862.500,  875.000) = 8 
    [ 875.000,  887.500) = 23 
    [ 887.500,  900.000) = 29 
    [ 900.000,  912.500) = 23 
    [ 912.500,  925.000) = 5 
    [ 925.000,  937.500) = 3 
    [ 937.500,  950.000) = 7 
    [ 950.000,  962.500) = 11 
    [ 962.500,  975.000) = 6 
    [ 975.000,  987.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    864.027 ms/op
     p(50.0000) =    899.678 ms/op
     p(90.0000) =    956.616 ms/op
     p(95.0000) =    963.799 ms/op
     p(99.0000) =    978.814 ms/op
     p(99.9000) =    980.419 ms/op
     p(99.9900) =    980.419 ms/op
     p(99.9990) =    980.419 ms/op
     p(99.9999) =    980.419 ms/op
    p(100.0000) =    980.419 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 44.05% complete, ETA 05:46:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1724.208 ±(99.9%) 4407.775 ms/op
# Warmup Iteration   2: 892.600 ±(99.9%) 13.408 ms/op
# Warmup Iteration   3: 902.474 ±(99.9%) 20.339 ms/op
# Warmup Iteration   4: 936.474 ±(99.9%) 39.168 ms/op
# Warmup Iteration   5: 952.202 ±(99.9%) 9.888 ms/op
Iteration   1: 960.782 ±(99.9%) 15.593 ms/op
                 executeFilterQuery·p0.00:   941.621 ms/op
                 executeFilterQuery·p0.50:   963.641 ms/op
                 executeFilterQuery·p0.90:   974.127 ms/op
                 executeFilterQuery·p0.95:   974.127 ms/op
                 executeFilterQuery·p0.99:   974.127 ms/op
                 executeFilterQuery·p0.999:  974.127 ms/op
                 executeFilterQuery·p0.9999: 974.127 ms/op
                 executeFilterQuery·p1.00:   974.127 ms/op

Iteration   2: 954.776 ±(99.9%) 31.655 ms/op
                 executeFilterQuery·p0.00:   898.630 ms/op
                 executeFilterQuery·p0.50:   963.641 ms/op
                 executeFilterQuery·p0.90:   979.160 ms/op
                 executeFilterQuery·p0.95:   979.370 ms/op
                 executeFilterQuery·p0.99:   979.370 ms/op
                 executeFilterQuery·p0.999:  979.370 ms/op
                 executeFilterQuery·p0.9999: 979.370 ms/op
                 executeFilterQuery·p1.00:   979.370 ms/op

Iteration   3: 910.927 ±(99.9%) 18.183 ms/op
                 executeFilterQuery·p0.00:   893.387 ms/op
                 executeFilterQuery·p0.50:   913.310 ms/op
                 executeFilterQuery·p0.90:   935.540 ms/op
                 executeFilterQuery·p0.95:   939.524 ms/op
                 executeFilterQuery·p0.99:   939.524 ms/op
                 executeFilterQuery·p0.999:  939.524 ms/op
                 executeFilterQuery·p0.9999: 939.524 ms/op
                 executeFilterQuery·p1.00:   939.524 ms/op

Iteration   4: 889.804 ±(99.9%) 11.602 ms/op
                 executeFilterQuery·p0.00:   877.658 ms/op
                 executeFilterQuery·p0.50:   887.095 ms/op
                 executeFilterQuery·p0.90:   906.075 ms/op
                 executeFilterQuery·p0.95:   907.018 ms/op
                 executeFilterQuery·p0.99:   907.018 ms/op
                 executeFilterQuery·p0.999:  907.018 ms/op
                 executeFilterQuery·p0.9999: 907.018 ms/op
                 executeFilterQuery·p1.00:   907.018 ms/op

Iteration   5: 893.387 ±(99.9%) 15.631 ms/op
                 executeFilterQuery·p0.00:   878.707 ms/op
                 executeFilterQuery·p0.50:   890.241 ms/op
                 executeFilterQuery·p0.90:   911.317 ms/op
                 executeFilterQuery·p0.95:   912.261 ms/op
                 executeFilterQuery·p0.99:   912.261 ms/op
                 executeFilterQuery·p0.999:  912.261 ms/op
                 executeFilterQuery·p0.9999: 912.261 ms/op
                 executeFilterQuery·p1.00:   912.261 ms/op


# Run progress: 44.64% complete, ETA 05:40:01
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1022.047 ±(99.9%) 285.555 ms/op
# Warmup Iteration   2: 898.717 ±(99.9%) 10.978 ms/op
# Warmup Iteration   3: 914.168 ±(99.9%) 45.817 ms/op
# Warmup Iteration   4: 901.601 ±(99.9%) 14.014 ms/op
# Warmup Iteration   5: 909.028 ±(99.9%) 27.509 ms/op
Iteration   1: 951.058 ±(99.9%) 14.902 ms/op
                 executeFilterQuery·p0.00:   934.281 ms/op
                 executeFilterQuery·p0.50:   951.058 ms/op
                 executeFilterQuery·p0.90:   968.255 ms/op
                 executeFilterQuery·p0.95:   969.933 ms/op
                 executeFilterQuery·p0.99:   969.933 ms/op
                 executeFilterQuery·p0.999:  969.933 ms/op
                 executeFilterQuery·p0.9999: 969.933 ms/op
                 executeFilterQuery·p1.00:   969.933 ms/op

Iteration   2: 945.148 ±(99.9%) 33.925 ms/op
                 executeFilterQuery·p0.00:   881.852 ms/op
                 executeFilterQuery·p0.50:   953.156 ms/op
                 executeFilterQuery·p0.90:   965.319 ms/op
                 executeFilterQuery·p0.95:   965.738 ms/op
                 executeFilterQuery·p0.99:   965.738 ms/op
                 executeFilterQuery·p0.999:  965.738 ms/op
                 executeFilterQuery·p0.9999: 965.738 ms/op
                 executeFilterQuery·p1.00:   965.738 ms/op

Iteration   3: 898.979 ±(99.9%) 11.629 ms/op
                 executeFilterQuery·p0.00:   884.998 ms/op
                 executeFilterQuery·p0.50:   900.202 ms/op
                 executeFilterQuery·p0.90:   911.213 ms/op
                 executeFilterQuery·p0.95:   911.213 ms/op
                 executeFilterQuery·p0.99:   911.213 ms/op
                 executeFilterQuery·p0.999:  911.213 ms/op
                 executeFilterQuery·p0.9999: 911.213 ms/op
                 executeFilterQuery·p1.00:   911.213 ms/op

Iteration   4: 895.921 ±(99.9%) 19.110 ms/op
                 executeFilterQuery·p0.00:   881.852 ms/op
                 executeFilterQuery·p0.50:   890.241 ms/op
                 executeFilterQuery·p0.90:   924.844 ms/op
                 executeFilterQuery·p0.95:   927.990 ms/op
                 executeFilterQuery·p0.99:   927.990 ms/op
                 executeFilterQuery·p0.999:  927.990 ms/op
                 executeFilterQuery·p0.9999: 927.990 ms/op
                 executeFilterQuery·p1.00:   927.990 ms/op

Iteration   5: 894.872 ±(99.9%) 16.770 ms/op
                 executeFilterQuery·p0.00:   881.852 ms/op
                 executeFilterQuery·p0.50:   891.290 ms/op
                 executeFilterQuery·p0.90:   919.496 ms/op
                 executeFilterQuery·p0.95:   921.698 ms/op
                 executeFilterQuery·p0.99:   921.698 ms/op
                 executeFilterQuery·p0.999:  921.698 ms/op
                 executeFilterQuery·p0.9999: 921.698 ms/op
                 executeFilterQuery·p1.00:   921.698 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 115
  mean =    918.480 ±(99.9%) 9.886 ms/op

  Histogram, ms/op:
    [ 800.000,  812.500) = 0 
    [ 812.500,  825.000) = 0 
    [ 825.000,  837.500) = 0 
    [ 837.500,  850.000) = 0 
    [ 850.000,  862.500) = 0 
    [ 862.500,  875.000) = 0 
    [ 875.000,  887.500) = 23 
    [ 887.500,  900.000) = 24 
    [ 900.000,  912.500) = 16 
    [ 912.500,  925.000) = 9 
    [ 925.000,  937.500) = 3 
    [ 937.500,  950.000) = 10 
    [ 950.000,  962.500) = 15 
    [ 962.500,  975.000) = 13 
    [ 975.000,  987.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    877.658 ms/op
     p(50.0000) =    909.115 ms/op
     p(90.0000) =    963.641 ms/op
     p(95.0000) =    970.562 ms/op
     p(99.0000) =    979.202 ms/op
     p(99.9000) =    979.370 ms/op
     p(99.9900) =    979.370 ms/op
     p(99.9990) =    979.370 ms/op
     p(99.9999) =    979.370 ms/op
    p(100.0000) =    979.370 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 45.24% complete, ETA 05:34:07
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2069.470 ±(99.9%) 6990.921 ms/op
# Warmup Iteration   2: 932.661 ±(99.9%) 17.765 ms/op
# Warmup Iteration   3: 931.040 ±(99.9%) 18.958 ms/op
# Warmup Iteration   4: 939.810 ±(99.9%) 20.581 ms/op
# Warmup Iteration   5: 947.436 ±(99.9%) 17.824 ms/op
Iteration   1: 944.481 ±(99.9%) 29.756 ms/op
                 executeFilterQuery·p0.00:   921.698 ms/op
                 executeFilterQuery·p0.50:   936.378 ms/op
                 executeFilterQuery·p0.90:   974.966 ms/op
                 executeFilterQuery·p0.95:   975.176 ms/op
                 executeFilterQuery·p0.99:   975.176 ms/op
                 executeFilterQuery·p0.999:  975.176 ms/op
                 executeFilterQuery·p0.9999: 975.176 ms/op
                 executeFilterQuery·p1.00:   975.176 ms/op

Iteration   2: 927.227 ±(99.9%) 11.693 ms/op
                 executeFilterQuery·p0.00:   917.504 ms/op
                 executeFilterQuery·p0.50:   922.747 ms/op
                 executeFilterQuery·p0.90:   942.460 ms/op
                 executeFilterQuery·p0.95:   943.718 ms/op
                 executeFilterQuery·p0.99:   943.718 ms/op
                 executeFilterQuery·p0.999:  943.718 ms/op
                 executeFilterQuery·p0.9999: 943.718 ms/op
                 executeFilterQuery·p1.00:   943.718 ms/op

Iteration   3: 944.100 ±(99.9%) 16.100 ms/op
                 executeFilterQuery·p0.00:   931.135 ms/op
                 executeFilterQuery·p0.50:   940.573 ms/op
                 executeFilterQuery·p0.90:   967.836 ms/op
                 executeFilterQuery·p0.95:   969.933 ms/op
                 executeFilterQuery·p0.99:   969.933 ms/op
                 executeFilterQuery·p0.999:  969.933 ms/op
                 executeFilterQuery·p0.9999: 969.933 ms/op
                 executeFilterQuery·p1.00:   969.933 ms/op

Iteration   4: 959.828 ±(99.9%) 25.411 ms/op
                 executeFilterQuery·p0.00:   937.427 ms/op
                 executeFilterQuery·p0.50:   946.864 ms/op
                 executeFilterQuery·p0.90:   987.968 ms/op
                 executeFilterQuery·p0.95:   988.807 ms/op
                 executeFilterQuery·p0.99:   988.807 ms/op
                 executeFilterQuery·p0.999:  988.807 ms/op
                 executeFilterQuery·p0.9999: 988.807 ms/op
                 executeFilterQuery·p1.00:   988.807 ms/op

Iteration   5: 975.271 ±(99.9%) 16.642 ms/op
                 executeFilterQuery·p0.00:   942.670 ms/op
                 executeFilterQuery·p0.50:   977.273 ms/op
                 executeFilterQuery·p0.90:   985.452 ms/op
                 executeFilterQuery·p0.95:   985.661 ms/op
                 executeFilterQuery·p0.99:   985.661 ms/op
                 executeFilterQuery·p0.999:  985.661 ms/op
                 executeFilterQuery·p0.9999: 985.661 ms/op
                 executeFilterQuery·p1.00:   985.661 ms/op


# Run progress: 45.83% complete, ETA 05:28:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1177.318 ±(99.9%) 500.758 ms/op
# Warmup Iteration   2: 971.458 ±(99.9%) 33.160 ms/op
# Warmup Iteration   3: 982.611 ±(99.9%) 25.619 ms/op
# Warmup Iteration   4: 965.167 ±(99.9%) 14.893 ms/op
# Warmup Iteration   5: 966.120 ±(99.9%) 22.543 ms/op
Iteration   1: 964.595 ±(99.9%) 14.595 ms/op
                 executeFilterQuery·p0.00:   940.573 ms/op
                 executeFilterQuery·p0.50:   965.738 ms/op
                 executeFilterQuery·p0.90:   979.999 ms/op
                 executeFilterQuery·p0.95:   981.467 ms/op
                 executeFilterQuery·p0.99:   981.467 ms/op
                 executeFilterQuery·p0.999:  981.467 ms/op
                 executeFilterQuery·p0.9999: 981.467 ms/op
                 executeFilterQuery·p1.00:   981.467 ms/op

Iteration   2: 957.636 ±(99.9%) 21.344 ms/op
                 executeFilterQuery·p0.00:   937.427 ms/op
                 executeFilterQuery·p0.50:   953.156 ms/op
                 executeFilterQuery·p0.90:   982.306 ms/op
                 executeFilterQuery·p0.95:   982.516 ms/op
                 executeFilterQuery·p0.99:   982.516 ms/op
                 executeFilterQuery·p0.999:  982.516 ms/op
                 executeFilterQuery·p0.9999: 982.516 ms/op
                 executeFilterQuery·p1.00:   982.516 ms/op

Iteration   3: 946.959 ±(99.9%) 23.674 ms/op
                 executeFilterQuery·p0.00:   932.184 ms/op
                 executeFilterQuery·p0.50:   941.621 ms/op
                 executeFilterQuery·p0.90:   982.516 ms/op
                 executeFilterQuery·p0.95:   984.613 ms/op
                 executeFilterQuery·p0.99:   984.613 ms/op
                 executeFilterQuery·p0.999:  984.613 ms/op
                 executeFilterQuery·p0.9999: 984.613 ms/op
                 executeFilterQuery·p1.00:   984.613 ms/op

Iteration   4: 936.569 ±(99.9%) 4.531 ms/op
                 executeFilterQuery·p0.00:   931.135 ms/op
                 executeFilterQuery·p0.50:   937.427 ms/op
                 executeFilterQuery·p0.90:   941.202 ms/op
                 executeFilterQuery·p0.95:   941.621 ms/op
                 executeFilterQuery·p0.99:   941.621 ms/op
                 executeFilterQuery·p0.999:  941.621 ms/op
                 executeFilterQuery·p0.9999: 941.621 ms/op
                 executeFilterQuery·p1.00:   941.621 ms/op

Iteration   5: 937.999 ±(99.9%) 4.955 ms/op
                 executeFilterQuery·p0.00:   932.184 ms/op
                 executeFilterQuery·p0.50:   937.427 ms/op
                 executeFilterQuery·p0.90:   944.557 ms/op
                 executeFilterQuery·p0.95:   944.767 ms/op
                 executeFilterQuery·p0.99:   944.767 ms/op
                 executeFilterQuery·p0.999:  944.767 ms/op
                 executeFilterQuery·p0.9999: 944.767 ms/op
                 executeFilterQuery·p1.00:   944.767 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 110
  mean =    949.467 ±(99.9%) 6.124 ms/op

  Histogram, ms/op:
    [910.000, 915.000) = 0 
    [915.000, 920.000) = 2 
    [920.000, 925.000) = 6 
    [925.000, 930.000) = 3 
    [930.000, 935.000) = 11 
    [935.000, 940.000) = 26 
    [940.000, 945.000) = 9 
    [945.000, 950.000) = 13 
    [950.000, 955.000) = 2 
    [955.000, 960.000) = 3 
    [960.000, 965.000) = 6 
    [965.000, 970.000) = 6 
    [970.000, 975.000) = 9 
    [975.000, 980.000) = 4 
    [980.000, 985.000) = 8 

  Percentiles, ms/op:
      p(0.0000) =    917.504 ms/op
     p(50.0000) =    943.718 ms/op
     p(90.0000) =    979.160 ms/op
     p(95.0000) =    984.036 ms/op
     p(99.0000) =    988.461 ms/op
     p(99.9000) =    988.807 ms/op
     p(99.9900) =    988.807 ms/op
     p(99.9990) =    988.807 ms/op
     p(99.9999) =    988.807 ms/op
    p(100.0000) =    988.807 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 46.43% complete, ETA 05:22:34
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

50.533 ±(99.9%) 1.843 ms/op
# Warmup Iteration   2: 49.891 ±(99.9%) 0.164 ms/op
# Warmup Iteration   3: 50.999 ±(99.9%) 0.307 ms/op
# Warmup Iteration   4: 51.622 ±(99.9%) 0.428 ms/op
# Warmup Iteration   5: 49.226 ±(99.9%) 0.245 ms/op
Iteration   1: 49.947 ±(99.9%) 0.300 ms/op
                 executeFilterQuery·p0.00:   47.972 ms/op
                 executeFilterQuery·p0.50:   49.545 ms/op
                 executeFilterQuery·p0.90:   52.232 ms/op
                 executeFilterQuery·p0.95:   52.494 ms/op
                 executeFilterQuery·p0.99:   52.822 ms/op
                 executeFilterQuery·p0.999:  52.953 ms/op
                 executeFilterQuery·p0.9999: 52.953 ms/op
                 executeFilterQuery·p1.00:   52.953 ms/op

Iteration   2: 48.944 ±(99.9%) 0.238 ms/op
                 executeFilterQuery·p0.00:   46.989 ms/op
                 executeFilterQuery·p0.50:   48.693 ms/op
                 executeFilterQuery·p0.90:   50.240 ms/op
                 executeFilterQuery·p0.95:   50.463 ms/op
                 executeFilterQuery·p0.99:   52.696 ms/op
                 executeFilterQuery·p0.999:  53.477 ms/op
                 executeFilterQuery·p0.9999: 53.477 ms/op
                 executeFilterQuery·p1.00:   53.477 ms/op

Iteration   3: 49.097 ±(99.9%) 0.302 ms/op
                 executeFilterQuery·p0.00:   47.251 ms/op
                 executeFilterQuery·p0.50:   48.824 ms/op
                 executeFilterQuery·p0.90:   51.092 ms/op
                 executeFilterQuery·p0.95:   51.564 ms/op
                 executeFilterQuery·p0.99:   52.625 ms/op
                 executeFilterQuery·p0.999:  52.888 ms/op
                 executeFilterQuery·p0.9999: 52.888 ms/op
                 executeFilterQuery·p1.00:   52.888 ms/op

Iteration   4: 49.485 ±(99.9%) 0.360 ms/op
                 executeFilterQuery·p0.00:   47.055 ms/op
                 executeFilterQuery·p0.50:   49.349 ms/op
                 executeFilterQuery·p0.90:   52.691 ms/op
                 executeFilterQuery·p0.95:   52.756 ms/op
                 executeFilterQuery·p0.99:   53.278 ms/op
                 executeFilterQuery·p0.999:  53.412 ms/op
                 executeFilterQuery·p0.9999: 53.412 ms/op
                 executeFilterQuery·p1.00:   53.412 ms/op

Iteration   5: 48.929 ±(99.9%) 0.209 ms/op
                 executeFilterQuery·p0.00:   46.989 ms/op
                 executeFilterQuery·p0.50:   48.890 ms/op
                 executeFilterQuery·p0.90:   49.873 ms/op
                 executeFilterQuery·p0.95:   50.201 ms/op
                 executeFilterQuery·p0.99:   51.113 ms/op
                 executeFilterQuery·p0.999:  52.888 ms/op
                 executeFilterQuery·p0.9999: 52.888 ms/op
                 executeFilterQuery·p1.00:   52.888 ms/op


# Run progress: 47.02% complete, ETA 05:16:51
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

51.091 ±(99.9%) 1.924 ms/op
# Warmup Iteration   2: 50.327 ±(99.9%) 0.200 ms/op
# Warmup Iteration   3: 51.232 ±(99.9%) 0.280 ms/op
# Warmup Iteration   4: 51.413 ±(99.9%) 0.389 ms/op
# Warmup Iteration   5: 49.135 ±(99.9%) 0.229 ms/op
Iteration   1: 49.372 ±(99.9%) 0.297 ms/op
                 executeFilterQuery·p0.00:   47.710 ms/op
                 executeFilterQuery·p0.50:   48.955 ms/op
                 executeFilterQuery·p0.90:   51.433 ms/op
                 executeFilterQuery·p0.95:   52.036 ms/op
                 executeFilterQuery·p0.99:   52.557 ms/op
                 executeFilterQuery·p0.999:  53.674 ms/op
                 executeFilterQuery·p0.9999: 53.674 ms/op
                 executeFilterQuery·p1.00:   53.674 ms/op

Iteration   2: 48.807 ±(99.9%) 0.250 ms/op
                 executeFilterQuery·p0.00:   47.055 ms/op
                 executeFilterQuery·p0.50:   48.562 ms/op
                 executeFilterQuery·p0.90:   50.568 ms/op
                 executeFilterQuery·p0.95:   51.367 ms/op
                 executeFilterQuery·p0.99:   51.967 ms/op
                 executeFilterQuery·p0.999:  53.805 ms/op
                 executeFilterQuery·p0.9999: 53.805 ms/op
                 executeFilterQuery·p1.00:   53.805 ms/op

Iteration   3: 48.241 ±(99.9%) 0.133 ms/op
                 executeFilterQuery·p0.00:   46.727 ms/op
                 executeFilterQuery·p0.50:   48.366 ms/op
                 executeFilterQuery·p0.90:   48.824 ms/op
                 executeFilterQuery·p0.95:   48.932 ms/op
                 executeFilterQuery·p0.99:   49.592 ms/op
                 executeFilterQuery·p0.999:  50.135 ms/op
                 executeFilterQuery·p0.9999: 50.135 ms/op
                 executeFilterQuery·p1.00:   50.135 ms/op

Iteration   4: 48.293 ±(99.9%) 0.156 ms/op
                 executeFilterQuery·p0.00:   46.858 ms/op
                 executeFilterQuery·p0.50:   48.333 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   49.237 ms/op
                 executeFilterQuery·p0.99:   49.929 ms/op
                 executeFilterQuery·p0.999:  53.477 ms/op
                 executeFilterQuery·p0.9999: 53.477 ms/op
                 executeFilterQuery·p1.00:   53.477 ms/op

Iteration   5: 48.152 ±(99.9%) 0.152 ms/op
                 executeFilterQuery·p0.00:   46.924 ms/op
                 executeFilterQuery·p0.50:   48.169 ms/op
                 executeFilterQuery·p0.90:   48.955 ms/op
                 executeFilterQuery·p0.95:   49.152 ms/op
                 executeFilterQuery·p0.99:   49.545 ms/op
                 executeFilterQuery·p0.999:  50.332 ms/op
                 executeFilterQuery·p0.9999: 50.332 ms/op
                 executeFilterQuery·p1.00:   50.332 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 2032
  mean =     48.920 ±(99.9%) 0.087 ms/op

  Histogram, ms/op:
    [46.000, 46.500) = 0 
    [46.500, 47.000) = 15 
    [47.000, 47.500) = 104 
    [47.500, 48.000) = 273 
    [48.000, 48.500) = 477 
    [48.500, 49.000) = 451 
    [49.000, 49.500) = 221 
    [49.500, 50.000) = 202 
    [50.000, 50.500) = 98 
    [50.500, 51.000) = 38 
    [51.000, 51.500) = 48 
    [51.500, 52.000) = 34 
    [52.000, 52.500) = 31 
    [52.500, 53.000) = 31 
    [53.000, 53.500) = 7 

  Percentiles, ms/op:
      p(0.0000) =     46.727 ms/op
     p(50.0000) =     48.693 ms/op
     p(90.0000) =     50.397 ms/op
     p(95.0000) =     51.511 ms/op
     p(99.0000) =     52.756 ms/op
     p(99.9000) =     53.667 ms/op
     p(99.9900) =     53.805 ms/op
     p(99.9990) =     53.805 ms/op
     p(99.9999) =     53.805 ms/op
    p(100.0000) =     53.805 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 47.62% complete, ETA 05:11:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

58.471 ±(99.9%) 2.291 ms/op
# Warmup Iteration   2: 59.854 ±(99.9%) 0.405 ms/op
# Warmup Iteration   3: 61.731 ±(99.9%) 0.376 ms/op
# Warmup Iteration   4: 59.359 ±(99.9%) 0.514 ms/op
# Warmup Iteration   5: 58.498 ±(99.9%) 0.333 ms/op
Iteration   1: 58.161 ±(99.9%) 0.076 ms/op
                 executeFilterQuery·p0.00:   57.803 ms/op
                 executeFilterQuery·p0.50:   58.065 ms/op
                 executeFilterQuery·p0.90:   58.393 ms/op
                 executeFilterQuery·p0.95:   58.619 ms/op
                 executeFilterQuery·p0.99:   59.559 ms/op
                 executeFilterQuery·p0.999:  60.490 ms/op
                 executeFilterQuery·p0.9999: 60.490 ms/op
                 executeFilterQuery·p1.00:   60.490 ms/op

Iteration   2: 58.298 ±(99.9%) 0.147 ms/op
                 executeFilterQuery·p0.00:   57.868 ms/op
                 executeFilterQuery·p0.50:   58.196 ms/op
                 executeFilterQuery·p0.90:   58.524 ms/op
                 executeFilterQuery·p0.95:   58.933 ms/op
                 executeFilterQuery·p0.99:   61.948 ms/op
                 executeFilterQuery·p0.999:  63.111 ms/op
                 executeFilterQuery·p0.9999: 63.111 ms/op
                 executeFilterQuery·p1.00:   63.111 ms/op

Iteration   3: 58.198 ±(99.9%) 0.143 ms/op
                 executeFilterQuery·p0.00:   57.737 ms/op
                 executeFilterQuery·p0.50:   58.065 ms/op
                 executeFilterQuery·p0.90:   58.452 ms/op
                 executeFilterQuery·p0.95:   59.058 ms/op
                 executeFilterQuery·p0.99:   61.044 ms/op
                 executeFilterQuery·p0.999:  61.276 ms/op
                 executeFilterQuery·p0.9999: 61.276 ms/op
                 executeFilterQuery·p1.00:   61.276 ms/op

Iteration   4: 58.266 ±(99.9%) 0.180 ms/op
                 executeFilterQuery·p0.00:   57.803 ms/op
                 executeFilterQuery·p0.50:   58.065 ms/op
                 executeFilterQuery·p0.90:   58.393 ms/op
                 executeFilterQuery·p0.95:   60.457 ms/op
                 executeFilterQuery·p0.99:   61.315 ms/op
                 executeFilterQuery·p0.999:  61.407 ms/op
                 executeFilterQuery·p0.9999: 61.407 ms/op
                 executeFilterQuery·p1.00:   61.407 ms/op

Iteration   5: 59.609 ±(99.9%) 0.476 ms/op
                 executeFilterQuery·p0.00:   57.868 ms/op
                 executeFilterQuery·p0.50:   58.262 ms/op
                 executeFilterQuery·p0.90:   61.997 ms/op
                 executeFilterQuery·p0.95:   62.171 ms/op
                 executeFilterQuery·p0.99:   62.586 ms/op
                 executeFilterQuery·p0.999:  62.718 ms/op
                 executeFilterQuery·p0.9999: 62.718 ms/op
                 executeFilterQuery·p1.00:   62.718 ms/op


# Run progress: 48.21% complete, ETA 05:05:43
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

58.476 ±(99.9%) 2.623 ms/op
# Warmup Iteration   2: 58.988 ±(99.9%) 0.310 ms/op
# Warmup Iteration   3: 60.026 ±(99.9%) 0.186 ms/op
# Warmup Iteration   4: 59.166 ±(99.9%) 0.351 ms/op
# Warmup Iteration   5: 58.229 ±(99.9%) 0.190 ms/op
Iteration   1: 58.372 ±(99.9%) 0.396 ms/op
                 executeFilterQuery·p0.00:   57.147 ms/op
                 executeFilterQuery·p0.50:   57.606 ms/op
                 executeFilterQuery·p0.90:   61.538 ms/op
                 executeFilterQuery·p0.95:   61.604 ms/op
                 executeFilterQuery·p0.99:   61.706 ms/op
                 executeFilterQuery·p0.999:  61.800 ms/op
                 executeFilterQuery·p0.9999: 61.800 ms/op
                 executeFilterQuery·p1.00:   61.800 ms/op

Iteration   2: 60.903 ±(99.9%) 0.460 ms/op
                 executeFilterQuery·p0.00:   57.213 ms/op
                 executeFilterQuery·p0.50:   61.669 ms/op
                 executeFilterQuery·p0.90:   62.259 ms/op
                 executeFilterQuery·p0.95:   63.013 ms/op
                 executeFilterQuery·p0.99:   63.927 ms/op
                 executeFilterQuery·p0.999:  64.225 ms/op
                 executeFilterQuery·p0.9999: 64.225 ms/op
                 executeFilterQuery·p1.00:   64.225 ms/op

Iteration   3: 60.161 ±(99.9%) 0.489 ms/op
                 executeFilterQuery·p0.00:   57.606 ms/op
                 executeFilterQuery·p0.50:   60.228 ms/op
                 executeFilterQuery·p0.90:   62.213 ms/op
                 executeFilterQuery·p0.95:   62.325 ms/op
                 executeFilterQuery·p0.99:   64.135 ms/op
                 executeFilterQuery·p0.999:  64.618 ms/op
                 executeFilterQuery·p0.9999: 64.618 ms/op
                 executeFilterQuery·p1.00:   64.618 ms/op

Iteration   4: 58.084 ±(99.9%) 0.082 ms/op
                 executeFilterQuery·p0.00:   57.606 ms/op
                 executeFilterQuery·p0.50:   58.065 ms/op
                 executeFilterQuery·p0.90:   58.393 ms/op
                 executeFilterQuery·p0.95:   58.547 ms/op
                 executeFilterQuery·p0.99:   59.875 ms/op
                 executeFilterQuery·p0.999:  60.162 ms/op
                 executeFilterQuery·p0.9999: 60.162 ms/op
                 executeFilterQuery·p1.00:   60.162 ms/op

Iteration   5: 58.982 ±(99.9%) 0.404 ms/op
                 executeFilterQuery·p0.00:   57.737 ms/op
                 executeFilterQuery·p0.50:   58.196 ms/op
                 executeFilterQuery·p0.90:   61.997 ms/op
                 executeFilterQuery·p0.95:   62.226 ms/op
                 executeFilterQuery·p0.99:   62.790 ms/op
                 executeFilterQuery·p0.999:  63.111 ms/op
                 executeFilterQuery·p0.9999: 63.111 ms/op
                 executeFilterQuery·p1.00:   63.111 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1687
  mean =     58.891 ±(99.9%) 0.126 ms/op

  Histogram, ms/op:
    [57.000, 57.500) = 70 
    [57.500, 58.000) = 490 
    [58.000, 58.500) = 649 
    [58.500, 59.000) = 65 
    [59.000, 59.500) = 31 
    [59.500, 60.000) = 18 
    [60.000, 60.500) = 24 
    [60.500, 61.000) = 18 
    [61.000, 61.500) = 28 
    [61.500, 62.000) = 206 
    [62.000, 62.500) = 65 
    [62.500, 63.000) = 10 
    [63.000, 63.500) = 8 
    [63.500, 64.000) = 3 
    [64.000, 64.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     57.147 ms/op
     p(50.0000) =     58.130 ms/op
     p(90.0000) =     61.814 ms/op
     p(95.0000) =     62.063 ms/op
     p(99.0000) =     62.660 ms/op
     p(99.9000) =     64.348 ms/op
     p(99.9900) =     64.618 ms/op
     p(99.9990) =     64.618 ms/op
     p(99.9999) =     64.618 ms/op
    p(100.0000) =     64.618 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 48.81% complete, ETA 05:00:18
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

94.105 ±(99.9%) 3.834 ms/op
# Warmup Iteration   2: 102.077 ±(99.9%) 0.745 ms/op
# Warmup Iteration   3: 101.941 ±(99.9%) 0.539 ms/op
# Warmup Iteration   4: 101.978 ±(99.9%) 0.709 ms/op
# Warmup Iteration   5: 103.102 ±(99.9%) 0.689 ms/op
Iteration   1: 101.212 ±(99.9%) 0.152 ms/op
                 executeFilterQuery·p0.00:   100.401 ms/op
                 executeFilterQuery·p0.50:   101.188 ms/op
                 executeFilterQuery·p0.90:   101.581 ms/op
                 executeFilterQuery·p0.95:   101.843 ms/op
                 executeFilterQuery·p0.99:   103.940 ms/op
                 executeFilterQuery·p0.999:  103.940 ms/op
                 executeFilterQuery·p0.9999: 103.940 ms/op
                 executeFilterQuery·p1.00:   103.940 ms/op

Iteration   2: 100.987 ±(99.9%) 0.339 ms/op
                 executeFilterQuery·p0.00:   100.139 ms/op
                 executeFilterQuery·p0.50:   100.794 ms/op
                 executeFilterQuery·p0.90:   101.581 ms/op
                 executeFilterQuery·p0.95:   104.084 ms/op
                 executeFilterQuery·p0.99:   105.120 ms/op
                 executeFilterQuery·p0.999:  105.120 ms/op
                 executeFilterQuery·p0.9999: 105.120 ms/op
                 executeFilterQuery·p1.00:   105.120 ms/op

Iteration   3: 101.000 ±(99.9%) 0.377 ms/op
                 executeFilterQuery·p0.00:   100.139 ms/op
                 executeFilterQuery·p0.50:   100.663 ms/op
                 executeFilterQuery·p0.90:   101.450 ms/op
                 executeFilterQuery·p0.95:   104.202 ms/op
                 executeFilterQuery·p0.99:   106.430 ms/op
                 executeFilterQuery·p0.999:  106.430 ms/op
                 executeFilterQuery·p0.9999: 106.430 ms/op
                 executeFilterQuery·p1.00:   106.430 ms/op

Iteration   4: 101.309 ±(99.9%) 0.485 ms/op
                 executeFilterQuery·p0.00:   100.270 ms/op
                 executeFilterQuery·p0.50:   100.794 ms/op
                 executeFilterQuery·p0.90:   104.595 ms/op
                 executeFilterQuery·p0.95:   104.989 ms/op
                 executeFilterQuery·p0.99:   106.693 ms/op
                 executeFilterQuery·p0.999:  106.693 ms/op
                 executeFilterQuery·p0.9999: 106.693 ms/op
                 executeFilterQuery·p1.00:   106.693 ms/op

Iteration   5: 102.033 ±(99.9%) 0.847 ms/op
                 executeFilterQuery·p0.00:   100.401 ms/op
                 executeFilterQuery·p0.50:   101.057 ms/op
                 executeFilterQuery·p0.90:   105.395 ms/op
                 executeFilterQuery·p0.95:   105.775 ms/op
                 executeFilterQuery·p0.99:   117.834 ms/op
                 executeFilterQuery·p0.999:  117.834 ms/op
                 executeFilterQuery·p0.9999: 117.834 ms/op
                 executeFilterQuery·p1.00:   117.834 ms/op


# Run progress: 49.40% complete, ETA 04:54:58
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

91.829 ±(99.9%) 3.320 ms/op
# Warmup Iteration   2: 100.257 ±(99.9%) 0.633 ms/op
# Warmup Iteration   3: 98.115 ±(99.9%) 0.584 ms/op
# Warmup Iteration   4: 97.849 ±(99.9%) 0.785 ms/op
# Warmup Iteration   5: 100.088 ±(99.9%) 0.604 ms/op
Iteration   1: 99.406 ±(99.9%) 0.748 ms/op
                 executeFilterQuery·p0.00:   96.469 ms/op
                 executeFilterQuery·p0.50:   99.287 ms/op
                 executeFilterQuery·p0.90:   101.843 ms/op
                 executeFilterQuery·p0.95:   102.099 ms/op
                 executeFilterQuery·p0.99:   102.757 ms/op
                 executeFilterQuery·p0.999:  102.760 ms/op
                 executeFilterQuery·p0.9999: 102.760 ms/op
                 executeFilterQuery·p1.00:   102.760 ms/op

Iteration   2: 97.049 ±(99.9%) 0.375 ms/op
                 executeFilterQuery·p0.00:   96.338 ms/op
                 executeFilterQuery·p0.50:   96.731 ms/op
                 executeFilterQuery·p0.90:   97.255 ms/op
                 executeFilterQuery·p0.95:   100.952 ms/op
                 executeFilterQuery·p0.99:   102.226 ms/op
                 executeFilterQuery·p0.999:  102.236 ms/op
                 executeFilterQuery·p0.9999: 102.236 ms/op
                 executeFilterQuery·p1.00:   102.236 ms/op

Iteration   3: 96.978 ±(99.9%) 0.176 ms/op
                 executeFilterQuery·p0.00:   96.469 ms/op
                 executeFilterQuery·p0.50:   96.862 ms/op
                 executeFilterQuery·p0.90:   97.255 ms/op
                 executeFilterQuery·p0.95:   97.491 ms/op
                 executeFilterQuery·p0.99:   101.109 ms/op
                 executeFilterQuery·p0.999:  101.188 ms/op
                 executeFilterQuery·p0.9999: 101.188 ms/op
                 executeFilterQuery·p1.00:   101.188 ms/op

Iteration   4: 96.936 ±(99.9%) 0.205 ms/op
                 executeFilterQuery·p0.00:   96.469 ms/op
                 executeFilterQuery·p0.50:   96.731 ms/op
                 executeFilterQuery·p0.90:   97.386 ms/op
                 executeFilterQuery·p0.95:   98.042 ms/op
                 executeFilterQuery·p0.99:   100.260 ms/op
                 executeFilterQuery·p0.999:  100.270 ms/op
                 executeFilterQuery·p0.9999: 100.270 ms/op
                 executeFilterQuery·p1.00:   100.270 ms/op

Iteration   5: 98.375 ±(99.9%) 0.691 ms/op
                 executeFilterQuery·p0.00:   96.600 ms/op
                 executeFilterQuery·p0.50:   97.124 ms/op
                 executeFilterQuery·p0.90:   101.712 ms/op
                 executeFilterQuery·p0.95:   101.712 ms/op
                 executeFilterQuery·p0.99:   103.281 ms/op
                 executeFilterQuery·p0.999:  103.285 ms/op
                 executeFilterQuery·p0.9999: 103.285 ms/op
                 executeFilterQuery·p1.00:   103.285 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1003
  mean =     99.489 ±(99.9%) 0.253 ms/op

  Histogram, ms/op:
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 390 
    [ 97.500, 100.000) = 36 
    [100.000, 102.500) = 523 
    [102.500, 105.000) = 32 
    [105.000, 107.500) = 20 
    [107.500, 110.000) = 1 
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     96.338 ms/op
     p(50.0000) =    100.532 ms/op
     p(90.0000) =    101.659 ms/op
     p(95.0000) =    102.892 ms/op
     p(99.0000) =    105.513 ms/op
     p(99.9000) =    117.802 ms/op
     p(99.9900) =    117.834 ms/op
     p(99.9990) =    117.834 ms/op
     p(99.9999) =    117.834 ms/op
    p(100.0000) =    117.834 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 50.00% complete, ETA 04:49:44
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

464.877 ±(99.9%) 31.788 ms/op
# Warmup Iteration   2: 461.016 ±(99.9%) 5.377 ms/op
# Warmup Iteration   3: 455.606 ±(99.9%) 4.495 ms/op
# Warmup Iteration   4: 468.308 ±(99.9%) 7.983 ms/op
# Warmup Iteration   5: 482.719 ±(99.9%) 5.033 ms/op
Iteration   1: 466.497 ±(99.9%) 12.015 ms/op
                 executeFilterQuery·p0.00:   444.072 ms/op
                 executeFilterQuery·p0.50:   464.257 ms/op
                 executeFilterQuery·p0.90:   487.326 ms/op
                 executeFilterQuery·p0.95:   488.558 ms/op
                 executeFilterQuery·p0.99:   488.636 ms/op
                 executeFilterQuery·p0.999:  488.636 ms/op
                 executeFilterQuery·p0.9999: 488.636 ms/op
                 executeFilterQuery·p1.00:   488.636 ms/op

Iteration   2: 449.862 ±(99.9%) 4.243 ms/op
                 executeFilterQuery·p0.00:   440.926 ms/op
                 executeFilterQuery·p0.50:   450.888 ms/op
                 executeFilterQuery·p0.90:   458.228 ms/op
                 executeFilterQuery·p0.95:   458.647 ms/op
                 executeFilterQuery·p0.99:   458.752 ms/op
                 executeFilterQuery·p0.999:  458.752 ms/op
                 executeFilterQuery·p0.9999: 458.752 ms/op
                 executeFilterQuery·p1.00:   458.752 ms/op

Iteration   3: 447.309 ±(99.9%) 4.173 ms/op
                 executeFilterQuery·p0.00:   437.780 ms/op
                 executeFilterQuery·p0.50:   446.169 ms/op
                 executeFilterQuery·p0.90:   453.614 ms/op
                 executeFilterQuery·p0.95:   454.033 ms/op
                 executeFilterQuery·p0.99:   454.033 ms/op
                 executeFilterQuery·p0.999:  454.033 ms/op
                 executeFilterQuery·p0.9999: 454.033 ms/op
                 executeFilterQuery·p1.00:   454.033 ms/op

Iteration   4: 452.392 ±(99.9%) 4.191 ms/op
                 executeFilterQuery·p0.00:   447.218 ms/op
                 executeFilterQuery·p0.50:   450.888 ms/op
                 executeFilterQuery·p0.90:   459.591 ms/op
                 executeFilterQuery·p0.95:   467.560 ms/op
                 executeFilterQuery·p0.99:   469.238 ms/op
                 executeFilterQuery·p0.999:  469.238 ms/op
                 executeFilterQuery·p0.9999: 469.238 ms/op
                 executeFilterQuery·p1.00:   469.238 ms/op

Iteration   5: 453.795 ±(99.9%) 3.881 ms/op
                 executeFilterQuery·p0.00:   444.072 ms/op
                 executeFilterQuery·p0.50:   454.033 ms/op
                 executeFilterQuery·p0.90:   460.325 ms/op
                 executeFilterQuery·p0.95:   461.216 ms/op
                 executeFilterQuery·p0.99:   461.373 ms/op
                 executeFilterQuery·p0.999:  461.373 ms/op
                 executeFilterQuery·p0.9999: 461.373 ms/op
                 executeFilterQuery·p1.00:   461.373 ms/op


# Run progress: 50.60% complete, ETA 04:44:36
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

462.494 ±(99.9%) 30.947 ms/op
# Warmup Iteration   2: 459.586 ±(99.9%) 7.336 ms/op
# Warmup Iteration   3: 455.034 ±(99.9%) 5.530 ms/op
# Warmup Iteration   4: 446.762 ±(99.9%) 5.574 ms/op
# Warmup Iteration   5: 449.794 ±(99.9%) 6.706 ms/op
Iteration   1: 468.451 ±(99.9%) 11.285 ms/op
                 executeFilterQuery·p0.00:   448.266 ms/op
                 executeFilterQuery·p0.50:   467.927 ms/op
                 executeFilterQuery·p0.90:   494.718 ms/op
                 executeFilterQuery·p0.95:   496.422 ms/op
                 executeFilterQuery·p0.99:   496.501 ms/op
                 executeFilterQuery·p0.999:  496.501 ms/op
                 executeFilterQuery·p0.9999: 496.501 ms/op
                 executeFilterQuery·p1.00:   496.501 ms/op

Iteration   2: 476.653 ±(99.9%) 8.440 ms/op
                 executeFilterQuery·p0.00:   463.995 ms/op
                 executeFilterQuery·p0.50:   477.626 ms/op
                 executeFilterQuery·p0.90:   490.838 ms/op
                 executeFilterQuery·p0.95:   492.202 ms/op
                 executeFilterQuery·p0.99:   492.306 ms/op
                 executeFilterQuery·p0.999:  492.306 ms/op
                 executeFilterQuery·p0.9999: 492.306 ms/op
                 executeFilterQuery·p1.00:   492.306 ms/op

Iteration   3: 481.746 ±(99.9%) 8.828 ms/op
                 executeFilterQuery·p0.00:   445.645 ms/op
                 executeFilterQuery·p0.50:   482.869 ms/op
                 executeFilterQuery·p0.90:   491.258 ms/op
                 executeFilterQuery·p0.95:   498.336 ms/op
                 executeFilterQuery·p0.99:   499.122 ms/op
                 executeFilterQuery·p0.999:  499.122 ms/op
                 executeFilterQuery·p0.9999: 499.122 ms/op
                 executeFilterQuery·p1.00:   499.122 ms/op

Iteration   4: 450.295 ±(99.9%) 4.937 ms/op
                 executeFilterQuery·p0.00:   436.732 ms/op
                 executeFilterQuery·p0.50:   449.315 ms/op
                 executeFilterQuery·p0.90:   459.486 ms/op
                 executeFilterQuery·p0.95:   461.583 ms/op
                 executeFilterQuery·p0.99:   461.898 ms/op
                 executeFilterQuery·p0.999:  461.898 ms/op
                 executeFilterQuery·p0.9999: 461.898 ms/op
                 executeFilterQuery·p1.00:   461.898 ms/op

Iteration   5: 448.221 ±(99.9%) 4.447 ms/op
                 executeFilterQuery·p0.00:   437.256 ms/op
                 executeFilterQuery·p0.50:   448.266 ms/op
                 executeFilterQuery·p0.90:   454.453 ms/op
                 executeFilterQuery·p0.95:   465.568 ms/op
                 executeFilterQuery·p0.99:   467.665 ms/op
                 executeFilterQuery·p0.999:  467.665 ms/op
                 executeFilterQuery·p0.9999: 467.665 ms/op
                 executeFilterQuery·p1.00:   467.665 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 223
  mean =    459.123 ±(99.9%) 3.298 ms/op

  Histogram, ms/op:
    [430.000, 435.000) = 0 
    [435.000, 440.000) = 5 
    [440.000, 445.000) = 17 
    [445.000, 450.000) = 57 
    [450.000, 455.000) = 38 
    [455.000, 460.000) = 30 
    [460.000, 465.000) = 9 
    [465.000, 470.000) = 18 
    [470.000, 475.000) = 5 
    [475.000, 480.000) = 12 
    [480.000, 485.000) = 13 
    [485.000, 490.000) = 10 
    [490.000, 495.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =    436.732 ms/op
     p(50.0000) =    453.509 ms/op
     p(90.0000) =    484.232 ms/op
     p(95.0000) =    488.636 ms/op
     p(99.0000) =    496.375 ms/op
     p(99.9000) =    499.122 ms/op
     p(99.9900) =    499.122 ms/op
     p(99.9990) =    499.122 ms/op
     p(99.9999) =    499.122 ms/op
    p(100.0000) =    499.122 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 51.19% complete, ETA 04:39:33
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

573.891 ±(99.9%) 46.381 ms/op
# Warmup Iteration   2: 567.105 ±(99.9%) 14.992 ms/op
# Warmup Iteration   3: 571.299 ±(99.9%) 7.718 ms/op
# Warmup Iteration   4: 578.989 ±(99.9%) 6.972 ms/op
# Warmup Iteration   5: 558.949 ±(99.9%) 12.297 ms/op
Iteration   1: 554.813 ±(99.9%) 8.483 ms/op
                 executeFilterQuery·p0.00:   547.357 ms/op
                 executeFilterQuery·p0.50:   551.551 ms/op
                 executeFilterQuery·p0.90:   571.369 ms/op
                 executeFilterQuery·p0.95:   579.863 ms/op
                 executeFilterQuery·p0.99:   579.863 ms/op
                 executeFilterQuery·p0.999:  579.863 ms/op
                 executeFilterQuery·p0.9999: 579.863 ms/op
                 executeFilterQuery·p1.00:   579.863 ms/op

Iteration   2: 552.489 ±(99.9%) 10.092 ms/op
                 executeFilterQuery·p0.00:   546.308 ms/op
                 executeFilterQuery·p0.50:   549.454 ms/op
                 executeFilterQuery·p0.90:   577.765 ms/op
                 executeFilterQuery·p0.95:   589.300 ms/op
                 executeFilterQuery·p0.99:   589.300 ms/op
                 executeFilterQuery·p0.999:  589.300 ms/op
                 executeFilterQuery·p0.9999: 589.300 ms/op
                 executeFilterQuery·p1.00:   589.300 ms/op

Iteration   3: 555.966 ±(99.9%) 15.888 ms/op
                 executeFilterQuery·p0.00:   547.357 ms/op
                 executeFilterQuery·p0.50:   549.454 ms/op
                 executeFilterQuery·p0.90:   598.737 ms/op
                 executeFilterQuery·p0.95:   610.271 ms/op
                 executeFilterQuery·p0.99:   610.271 ms/op
                 executeFilterQuery·p0.999:  610.271 ms/op
                 executeFilterQuery·p0.9999: 610.271 ms/op
                 executeFilterQuery·p1.00:   610.271 ms/op

Iteration   4: 574.853 ±(99.9%) 15.620 ms/op
                 executeFilterQuery·p0.00:   550.502 ms/op
                 executeFilterQuery·p0.50:   572.522 ms/op
                 executeFilterQuery·p0.90:   597.898 ms/op
                 executeFilterQuery·p0.95:   599.785 ms/op
                 executeFilterQuery·p0.99:   599.785 ms/op
                 executeFilterQuery·p0.999:  599.785 ms/op
                 executeFilterQuery·p0.9999: 599.785 ms/op
                 executeFilterQuery·p1.00:   599.785 ms/op

Iteration   5: 563.610 ±(99.9%) 14.365 ms/op
                 executeFilterQuery·p0.00:   547.357 ms/op
                 executeFilterQuery·p0.50:   554.697 ms/op
                 executeFilterQuery·p0.90:   590.034 ms/op
                 executeFilterQuery·p0.95:   596.640 ms/op
                 executeFilterQuery·p0.99:   596.640 ms/op
                 executeFilterQuery·p0.999:  596.640 ms/op
                 executeFilterQuery·p0.9999: 596.640 ms/op
                 executeFilterQuery·p1.00:   596.640 ms/op


# Run progress: 51.79% complete, ETA 04:34:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

612.862 ±(99.9%) 60.655 ms/op
# Warmup Iteration   2: 661.062 ±(99.9%) 18.009 ms/op
# Warmup Iteration   3: 663.355 ±(99.9%) 17.298 ms/op
# Warmup Iteration   4: 662.766 ±(99.9%) 9.221 ms/op
# Warmup Iteration   5: 650.707 ±(99.9%) 8.804 ms/op
Iteration   1: 646.185 ±(99.9%) 9.320 ms/op
                 executeFilterQuery·p0.00:   637.534 ms/op
                 executeFilterQuery·p0.50:   642.777 ms/op
                 executeFilterQuery·p0.90:   659.869 ms/op
                 executeFilterQuery·p0.95:   675.283 ms/op
                 executeFilterQuery·p0.99:   675.283 ms/op
                 executeFilterQuery·p0.999:  675.283 ms/op
                 executeFilterQuery·p0.9999: 675.283 ms/op
                 executeFilterQuery·p1.00:   675.283 ms/op

Iteration   2: 639.304 ±(99.9%) 3.546 ms/op
                 executeFilterQuery·p0.00:   636.486 ms/op
                 executeFilterQuery·p0.50:   638.583 ms/op
                 executeFilterQuery·p0.90:   646.133 ms/op
                 executeFilterQuery·p0.95:   649.069 ms/op
                 executeFilterQuery·p0.99:   649.069 ms/op
                 executeFilterQuery·p0.999:  649.069 ms/op
                 executeFilterQuery·p0.9999: 649.069 ms/op
                 executeFilterQuery·p1.00:   649.069 ms/op

Iteration   3: 637.272 ±(99.9%) 2.117 ms/op
                 executeFilterQuery·p0.00:   634.388 ms/op
                 executeFilterQuery·p0.50:   637.010 ms/op
                 executeFilterQuery·p0.90:   640.995 ms/op
                 executeFilterQuery·p0.95:   641.729 ms/op
                 executeFilterQuery·p0.99:   641.729 ms/op
                 executeFilterQuery·p0.999:  641.729 ms/op
                 executeFilterQuery·p0.9999: 641.729 ms/op
                 executeFilterQuery·p1.00:   641.729 ms/op

Iteration   4: 636.486 ±(99.9%) 2.784 ms/op
                 executeFilterQuery·p0.00:   633.340 ms/op
                 executeFilterQuery·p0.50:   635.961 ms/op
                 executeFilterQuery·p0.90:   640.890 ms/op
                 executeFilterQuery·p0.95:   643.826 ms/op
                 executeFilterQuery·p0.99:   643.826 ms/op
                 executeFilterQuery·p0.999:  643.826 ms/op
                 executeFilterQuery·p0.9999: 643.826 ms/op
                 executeFilterQuery·p1.00:   643.826 ms/op

Iteration   5: 641.925 ±(99.9%) 8.754 ms/op
                 executeFilterQuery·p0.00:   636.486 ms/op
                 executeFilterQuery·p0.50:   638.583 ms/op
                 executeFilterQuery·p0.90:   657.877 ms/op
                 executeFilterQuery·p0.95:   671.089 ms/op
                 executeFilterQuery·p0.99:   671.089 ms/op
                 executeFilterQuery·p0.999:  671.089 ms/op
                 executeFilterQuery·p0.9999: 671.089 ms/op
                 executeFilterQuery·p1.00:   671.089 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 172
  mean =    597.432 ±(99.9%) 10.726 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 0 
    [537.500, 550.000) = 34 
    [550.000, 562.500) = 30 
    [562.500, 575.000) = 10 
    [575.000, 587.500) = 7 
    [587.500, 600.000) = 10 
    [600.000, 612.500) = 1 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 25 
    [637.500, 650.000) = 48 
    [650.000, 662.500) = 5 
    [662.500, 675.000) = 1 
    [675.000, 687.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    546.308 ms/op
     p(50.0000) =    595.067 ms/op
     p(90.0000) =    641.729 ms/op
     p(95.0000) =    648.387 ms/op
     p(99.0000) =    672.221 ms/op
     p(99.9000) =    675.283 ms/op
     p(99.9900) =    675.283 ms/op
     p(99.9990) =    675.283 ms/op
     p(99.9999) =    675.283 ms/op
    p(100.0000) =    675.283 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 52.38% complete, ETA 04:29:43
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

919.506 ±(99.9%) 98.042 ms/op
# Warmup Iteration   2: 975.843 ±(99.9%) 3.195 ms/op
# Warmup Iteration   3: 994.527 ±(99.9%) 26.066 ms/op
# Warmup Iteration   4: 1006.214 ±(99.9%) 14.686 ms/op
# Warmup Iteration   5: 1013.029 ±(99.9%) 13.461 ms/op
Iteration   1: 1013.029 ±(99.9%) 12.199 ms/op
                 executeFilterQuery·p0.00:   1000.342 ms/op
                 executeFilterQuery·p0.50:   1013.449 ms/op
                 executeFilterQuery·p0.90:   1023.200 ms/op
                 executeFilterQuery·p0.95:   1023.410 ms/op
                 executeFilterQuery·p0.99:   1023.410 ms/op
                 executeFilterQuery·p0.999:  1023.410 ms/op
                 executeFilterQuery·p0.9999: 1023.410 ms/op
                 executeFilterQuery·p1.00:   1023.410 ms/op

Iteration   2: 1012.715 ±(99.9%) 15.475 ms/op
                 executeFilterQuery·p0.00:   989.856 ms/op
                 executeFilterQuery·p0.50:   1015.022 ms/op
                 executeFilterQuery·p0.90:   1025.088 ms/op
                 executeFilterQuery·p0.95:   1025.507 ms/op
                 executeFilterQuery·p0.99:   1025.507 ms/op
                 executeFilterQuery·p0.999:  1025.507 ms/op
                 executeFilterQuery·p0.9999: 1025.507 ms/op
                 executeFilterQuery·p1.00:   1025.507 ms/op

Iteration   3: 985.947 ±(99.9%) 29.721 ms/op
                 executeFilterQuery·p0.00:   968.884 ms/op
                 executeFilterQuery·p0.50:   974.127 ms/op
                 executeFilterQuery·p0.90:   1021.942 ms/op
                 executeFilterQuery·p0.95:   1022.362 ms/op
                 executeFilterQuery·p0.99:   1022.362 ms/op
                 executeFilterQuery·p0.999:  1022.362 ms/op
                 executeFilterQuery·p0.9999: 1022.362 ms/op
                 executeFilterQuery·p1.00:   1022.362 ms/op

Iteration   4: 979.370 ±(99.9%) 12.922 ms/op
                 executeFilterQuery·p0.00:   970.981 ms/op
                 executeFilterQuery·p0.50:   974.127 ms/op
                 executeFilterQuery·p0.90:   994.050 ms/op
                 executeFilterQuery·p0.95:   994.050 ms/op
                 executeFilterQuery·p0.99:   994.050 ms/op
                 executeFilterQuery·p0.999:  994.050 ms/op
                 executeFilterQuery·p0.9999: 994.050 ms/op
                 executeFilterQuery·p1.00:   994.050 ms/op

Iteration   5: 984.327 ±(99.9%) 20.896 ms/op
                 executeFilterQuery·p0.00:   969.933 ms/op
                 executeFilterQuery·p0.50:   977.273 ms/op
                 executeFilterQuery·p0.90:   1011.666 ms/op
                 executeFilterQuery·p0.95:   1011.876 ms/op
                 executeFilterQuery·p0.99:   1011.876 ms/op
                 executeFilterQuery·p0.999:  1011.876 ms/op
                 executeFilterQuery·p0.9999: 1011.876 ms/op
                 executeFilterQuery·p1.00:   1011.876 ms/op


# Run progress: 52.98% complete, ETA 04:24:55
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

912.349 ±(99.9%) 101.413 ms/op
# Warmup Iteration   2: 984.327 ±(99.9%) 2.602 ms/op
# Warmup Iteration   3: 987.282 ±(99.9%) 10.956 ms/op
# Warmup Iteration   4: 994.527 ±(99.9%) 14.637 ms/op
# Warmup Iteration   5: 983.660 ±(99.9%) 5.444 ms/op
Iteration   1: 994.813 ±(99.9%) 12.169 ms/op
                 executeFilterQuery·p0.00:   985.661 ms/op
                 executeFilterQuery·p0.50:   993.001 ms/op
                 executeFilterQuery·p0.90:   1009.569 ms/op
                 executeFilterQuery·p0.95:   1009.779 ms/op
                 executeFilterQuery·p0.99:   1009.779 ms/op
                 executeFilterQuery·p0.999:  1009.779 ms/op
                 executeFilterQuery·p0.9999: 1009.779 ms/op
                 executeFilterQuery·p1.00:   1009.779 ms/op

Iteration   2: 990.618 ±(99.9%) 11.765 ms/op
                 executeFilterQuery·p0.00:   979.370 ms/op
                 executeFilterQuery·p0.50:   988.807 ms/op
                 executeFilterQuery·p0.90:   1006.214 ms/op
                 executeFilterQuery·p0.95:   1006.633 ms/op
                 executeFilterQuery·p0.99:   1006.633 ms/op
                 executeFilterQuery·p0.999:  1006.633 ms/op
                 executeFilterQuery·p0.9999: 1006.633 ms/op
                 executeFilterQuery·p1.00:   1006.633 ms/op

Iteration   3: 987.663 ±(99.9%) 14.052 ms/op
                 executeFilterQuery·p0.00:   981.467 ms/op
                 executeFilterQuery·p0.50:   984.613 ms/op
                 executeFilterQuery·p0.90:   1012.086 ms/op
                 executeFilterQuery·p0.95:   1017.119 ms/op
                 executeFilterQuery·p0.99:   1017.119 ms/op
                 executeFilterQuery·p0.999:  1017.119 ms/op
                 executeFilterQuery·p0.9999: 1017.119 ms/op
                 executeFilterQuery·p1.00:   1017.119 ms/op

Iteration   4: 984.994 ±(99.9%) 5.627 ms/op
                 executeFilterQuery·p0.00:   978.321 ms/op
                 executeFilterQuery·p0.50:   984.613 ms/op
                 executeFilterQuery·p0.90:   991.743 ms/op
                 executeFilterQuery·p0.95:   991.953 ms/op
                 executeFilterQuery·p0.99:   991.953 ms/op
                 executeFilterQuery·p0.999:  991.953 ms/op
                 executeFilterQuery·p0.9999: 991.953 ms/op
                 executeFilterQuery·p1.00:   991.953 ms/op

Iteration   5: 983.564 ±(99.9%) 4.586 ms/op
                 executeFilterQuery·p0.00:   981.467 ms/op
                 executeFilterQuery·p0.50:   982.516 ms/op
                 executeFilterQuery·p0.90:   991.324 ms/op
                 executeFilterQuery·p0.95:   993.001 ms/op
                 executeFilterQuery·p0.99:   993.001 ms/op
                 executeFilterQuery·p0.999:  993.001 ms/op
                 executeFilterQuery·p0.9999: 993.001 ms/op
                 executeFilterQuery·p1.00:   993.001 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 108
  mean =    991.312 ±(99.9%) 4.998 ms/op

  Histogram, ms/op:
    [ 960.000,  965.000) = 0 
    [ 965.000,  970.000) = 3 
    [ 970.000,  975.000) = 14 
    [ 975.000,  980.000) = 6 
    [ 980.000,  985.000) = 26 
    [ 985.000,  990.000) = 17 
    [ 990.000,  995.000) = 9 
    [ 995.000, 1000.000) = 3 
    [1000.000, 1005.000) = 5 
    [1005.000, 1010.000) = 6 
    [1010.000, 1015.000) = 7 
    [1015.000, 1020.000) = 5 
    [1020.000, 1025.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =    968.884 ms/op
     p(50.0000) =    986.710 ms/op
     p(90.0000) =   1017.224 ms/op
     p(95.0000) =   1020.841 ms/op
     p(99.0000) =   1025.319 ms/op
     p(99.9000) =   1025.507 ms/op
     p(99.9900) =   1025.507 ms/op
     p(99.9990) =   1025.507 ms/op
     p(99.9999) =   1025.507 ms/op
    p(100.0000) =   1025.507 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 53.57% complete, ETA 04:20:15
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

917.313 ±(99.9%) 83.382 ms/op
# Warmup Iteration   2: 909.020 ±(99.9%) 21.020 ms/op
# Warmup Iteration   3: 909.687 ±(99.9%) 15.131 ms/op
# Warmup Iteration   4: 937.618 ±(99.9%) 40.313 ms/op
# Warmup Iteration   5: 896.358 ±(99.9%) 17.265 ms/op
Iteration   1: 884.911 ±(99.9%) 13.666 ms/op
                 executeFilterQuery·p0.00:   873.464 ms/op
                 executeFilterQuery·p0.50:   882.901 ms/op
                 executeFilterQuery·p0.90:   904.711 ms/op
                 executeFilterQuery·p0.95:   905.970 ms/op
                 executeFilterQuery·p0.99:   905.970 ms/op
                 executeFilterQuery·p0.999:  905.970 ms/op
                 executeFilterQuery·p0.9999: 905.970 ms/op
                 executeFilterQuery·p1.00:   905.970 ms/op

Iteration   2: 890.940 ±(99.9%) 10.961 ms/op
                 executeFilterQuery·p0.00:   879.755 ms/op
                 executeFilterQuery·p0.50:   891.290 ms/op
                 executeFilterQuery·p0.90:   902.824 ms/op
                 executeFilterQuery·p0.95:   902.824 ms/op
                 executeFilterQuery·p0.99:   902.824 ms/op
                 executeFilterQuery·p0.999:  902.824 ms/op
                 executeFilterQuery·p0.9999: 902.824 ms/op
                 executeFilterQuery·p1.00:   902.824 ms/op

Iteration   3: 962.211 ±(99.9%) 19.642 ms/op
                 executeFilterQuery·p0.00:   926.941 ms/op
                 executeFilterQuery·p0.50:   964.690 ms/op
                 executeFilterQuery·p0.90:   977.063 ms/op
                 executeFilterQuery·p0.95:   977.273 ms/op
                 executeFilterQuery·p0.99:   977.273 ms/op
                 executeFilterQuery·p0.999:  977.273 ms/op
                 executeFilterQuery·p0.9999: 977.273 ms/op
                 executeFilterQuery·p1.00:   977.273 ms/op

Iteration   4: 946.006 ±(99.9%) 35.056 ms/op
                 executeFilterQuery·p0.00:   887.095 ms/op
                 executeFilterQuery·p0.50:   955.253 ms/op
                 executeFilterQuery·p0.90:   971.820 ms/op
                 executeFilterQuery·p0.95:   973.079 ms/op
                 executeFilterQuery·p0.99:   973.079 ms/op
                 executeFilterQuery·p0.999:  973.079 ms/op
                 executeFilterQuery·p0.9999: 973.079 ms/op
                 executeFilterQuery·p1.00:   973.079 ms/op

Iteration   5: 896.008 ±(99.9%) 16.955 ms/op
                 executeFilterQuery·p0.00:   874.512 ms/op
                 executeFilterQuery·p0.50:   893.911 ms/op
                 executeFilterQuery·p0.90:   913.415 ms/op
                 executeFilterQuery·p0.95:   914.358 ms/op
                 executeFilterQuery·p0.99:   914.358 ms/op
                 executeFilterQuery·p0.999:  914.358 ms/op
                 executeFilterQuery·p0.9999: 914.358 ms/op
                 executeFilterQuery·p1.00:   914.358 ms/op


# Run progress: 54.17% complete, ETA 04:15:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

928.943 ±(99.9%) 114.961 ms/op
# Warmup Iteration   2: 913.786 ±(99.9%) 14.737 ms/op
# Warmup Iteration   3: 909.878 ±(99.9%) 16.357 ms/op
# Warmup Iteration   4: 895.047 ±(99.9%) 10.331 ms/op
# Warmup Iteration   5: 892.688 ±(99.9%) 13.151 ms/op
Iteration   1: 940.477 ±(99.9%) 40.809 ms/op
                 executeFilterQuery·p0.00:   890.241 ms/op
                 executeFilterQuery·p0.50:   951.058 ms/op
                 executeFilterQuery·p0.90:   974.127 ms/op
                 executeFilterQuery·p0.95:   975.176 ms/op
                 executeFilterQuery·p0.99:   975.176 ms/op
                 executeFilterQuery·p0.999:  975.176 ms/op
                 executeFilterQuery·p0.9999: 975.176 ms/op
                 executeFilterQuery·p1.00:   975.176 ms/op

Iteration   2: 954.967 ±(99.9%) 14.861 ms/op
                 executeFilterQuery·p0.00:   933.233 ms/op
                 executeFilterQuery·p0.50:   952.107 ms/op
                 executeFilterQuery·p0.90:   971.820 ms/op
                 executeFilterQuery·p0.95:   974.127 ms/op
                 executeFilterQuery·p0.99:   974.127 ms/op
                 executeFilterQuery·p0.999:  974.127 ms/op
                 executeFilterQuery·p0.9999: 974.127 ms/op
                 executeFilterQuery·p1.00:   974.127 ms/op

Iteration   3: 936.188 ±(99.9%) 37.091 ms/op
                 executeFilterQuery·p0.00:   882.901 ms/op
                 executeFilterQuery·p0.50:   945.816 ms/op
                 executeFilterQuery·p0.90:   960.076 ms/op
                 executeFilterQuery·p0.95:   960.496 ms/op
                 executeFilterQuery·p0.99:   960.496 ms/op
                 executeFilterQuery·p0.999:  960.496 ms/op
                 executeFilterQuery·p0.9999: 960.496 ms/op
                 executeFilterQuery·p1.00:   960.496 ms/op

Iteration   4: 882.377 ±(99.9%) 12.786 ms/op
                 executeFilterQuery·p0.00:   870.318 ms/op
                 executeFilterQuery·p0.50:   882.901 ms/op
                 executeFilterQuery·p0.90:   896.428 ms/op
                 executeFilterQuery·p0.95:   898.630 ms/op
                 executeFilterQuery·p0.99:   898.630 ms/op
                 executeFilterQuery·p0.999:  898.630 ms/op
                 executeFilterQuery·p0.9999: 898.630 ms/op
                 executeFilterQuery·p1.00:   898.630 ms/op

Iteration   5: 890.416 ±(99.9%) 12.791 ms/op
                 executeFilterQuery·p0.00:   873.464 ms/op
                 executeFilterQuery·p0.50:   893.911 ms/op
                 executeFilterQuery·p0.90:   905.341 ms/op
                 executeFilterQuery·p0.95:   909.115 ms/op
                 executeFilterQuery·p0.99:   909.115 ms/op
                 executeFilterQuery·p0.999:  909.115 ms/op
                 executeFilterQuery·p0.9999: 909.115 ms/op
                 executeFilterQuery·p1.00:   909.115 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 115
  mean =    917.167 ±(99.9%) 10.961 ms/op

  Histogram, ms/op:
    [ 800.000,  812.500) = 0 
    [ 812.500,  825.000) = 0 
    [ 825.000,  837.500) = 0 
    [ 837.500,  850.000) = 0 
    [ 850.000,  862.500) = 0 
    [ 862.500,  875.000) = 8 
    [ 875.000,  887.500) = 21 
    [ 887.500,  900.000) = 26 
    [ 900.000,  912.500) = 9 
    [ 912.500,  925.000) = 5 
    [ 925.000,  937.500) = 5 
    [ 937.500,  950.000) = 6 
    [ 950.000,  962.500) = 18 
    [ 962.500,  975.000) = 14 
    [ 975.000,  987.500) = 3 

  Percentiles, ms/op:
      p(0.0000) =    870.318 ms/op
     p(50.0000) =    902.824 ms/op
     p(90.0000) =    966.787 ms/op
     p(95.0000) =    972.240 ms/op
     p(99.0000) =    977.105 ms/op
     p(99.9000) =    977.273 ms/op
     p(99.9900) =    977.273 ms/op
     p(99.9990) =    977.273 ms/op
     p(99.9999) =    977.273 ms/op
    p(100.0000) =    977.273 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 54.76% complete, ETA 04:10:58
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1128.384 ±(99.9%) 128.457 ms/op
# Warmup Iteration   2: 1118.481 ±(99.9%) 34.753 ms/op
# Warmup Iteration   3: 1170.677 ±(99.9%) 125.339 ms/op
# Warmup Iteration   4: 1149.239 ±(99.9%) 33.802 ms/op
# Warmup Iteration   5: 1105.199 ±(99.9%) 39.994 ms/op
Iteration   1: 1091.987 ±(99.9%) 9.920 ms/op
                 executeFilterQuery·p0.00:   1080.033 ms/op
                 executeFilterQuery·p0.50:   1093.665 ms/op
                 executeFilterQuery·p0.90:   1100.585 ms/op
                 executeFilterQuery·p0.95:   1101.005 ms/op
                 executeFilterQuery·p0.99:   1101.005 ms/op
                 executeFilterQuery·p0.999:  1101.005 ms/op
                 executeFilterQuery·p0.9999: 1101.005 ms/op
                 executeFilterQuery·p1.00:   1101.005 ms/op

Iteration   2: 1119.646 ±(99.9%) 34.594 ms/op
                 executeFilterQuery·p0.00:   1098.908 ms/op
                 executeFilterQuery·p0.50:   1115.685 ms/op
                 executeFilterQuery·p0.90:   1166.017 ms/op
                 executeFilterQuery·p0.95:   1166.017 ms/op
                 executeFilterQuery·p0.99:   1166.017 ms/op
                 executeFilterQuery·p0.999:  1166.017 ms/op
                 executeFilterQuery·p0.9999: 1166.017 ms/op
                 executeFilterQuery·p1.00:   1166.017 ms/op

Iteration   3: 1109.626 ±(99.9%) 22.180 ms/op
                 executeFilterQuery·p0.00:   1088.422 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1132.462 ms/op
                 executeFilterQuery·p0.95:   1132.462 ms/op
                 executeFilterQuery·p0.99:   1132.462 ms/op
                 executeFilterQuery·p0.999:  1132.462 ms/op
                 executeFilterQuery·p0.9999: 1132.462 ms/op
                 executeFilterQuery·p1.00:   1132.462 ms/op

Iteration   4: 1109.160 ±(99.9%) 37.769 ms/op
                 executeFilterQuery·p0.00:   1088.422 ms/op
                 executeFilterQuery·p0.50:   1101.005 ms/op
                 executeFilterQuery·p0.90:   1149.239 ms/op
                 executeFilterQuery·p0.95:   1149.239 ms/op
                 executeFilterQuery·p0.99:   1149.239 ms/op
                 executeFilterQuery·p0.999:  1149.239 ms/op
                 executeFilterQuery·p0.9999: 1149.239 ms/op
                 executeFilterQuery·p1.00:   1149.239 ms/op

Iteration   5: 1102.892 ±(99.9%) 20.078 ms/op
                 executeFilterQuery·p0.00:   1086.325 ms/op
                 executeFilterQuery·p0.50:   1103.102 ms/op
                 executeFilterQuery·p0.90:   1124.073 ms/op
                 executeFilterQuery·p0.95:   1124.073 ms/op
                 executeFilterQuery·p0.99:   1124.073 ms/op
                 executeFilterQuery·p0.999:  1124.073 ms/op
                 executeFilterQuery·p0.9999: 1124.073 ms/op
                 executeFilterQuery·p1.00:   1124.073 ms/op


# Run progress: 55.36% complete, ETA 04:06:26
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1114.753 ±(99.9%) 88.017 ms/op
# Warmup Iteration   2: 1126.637 ±(99.9%) 27.904 ms/op
# Warmup Iteration   3: 1151.103 ±(99.9%) 22.937 ms/op
# Warmup Iteration   4: 1169.046 ±(99.9%) 40.532 ms/op
# Warmup Iteration   5: 1122.442 ±(99.9%) 33.049 ms/op
Iteration   1: 1117.316 ±(99.9%) 42.973 ms/op
                 executeFilterQuery·p0.00:   1096.810 ms/op
                 executeFilterQuery·p0.50:   1109.393 ms/op
                 executeFilterQuery·p0.90:   1178.599 ms/op
                 executeFilterQuery·p0.95:   1178.599 ms/op
                 executeFilterQuery·p0.99:   1178.599 ms/op
                 executeFilterQuery·p0.999:  1178.599 ms/op
                 executeFilterQuery·p0.9999: 1178.599 ms/op
                 executeFilterQuery·p1.00:   1178.599 ms/op

Iteration   2: 1132.229 ±(99.9%) 37.810 ms/op
                 executeFilterQuery·p0.00:   1098.908 ms/op
                 executeFilterQuery·p0.50:   1124.073 ms/op
                 executeFilterQuery·p0.90:   1166.017 ms/op
                 executeFilterQuery·p0.95:   1166.017 ms/op
                 executeFilterQuery·p0.99:   1166.017 ms/op
                 executeFilterQuery·p0.999:  1166.017 ms/op
                 executeFilterQuery·p0.9999: 1166.017 ms/op
                 executeFilterQuery·p1.00:   1166.017 ms/op

Iteration   3: 1125.938 ±(99.9%) 33.033 ms/op
                 executeFilterQuery·p0.00:   1109.393 ms/op
                 executeFilterQuery·p0.50:   1119.879 ms/op
                 executeFilterQuery·p0.90:   1174.405 ms/op
                 executeFilterQuery·p0.95:   1174.405 ms/op
                 executeFilterQuery·p0.99:   1174.405 ms/op
                 executeFilterQuery·p0.999:  1174.405 ms/op
                 executeFilterQuery·p0.9999: 1174.405 ms/op
                 executeFilterQuery·p1.00:   1174.405 ms/op

Iteration   4: 1141.783 ±(99.9%) 33.345 ms/op
                 executeFilterQuery·p0.00:   1117.782 ms/op
                 executeFilterQuery·p0.50:   1136.656 ms/op
                 executeFilterQuery·p0.90:   1180.697 ms/op
                 executeFilterQuery·p0.95:   1180.697 ms/op
                 executeFilterQuery·p0.99:   1180.697 ms/op
                 executeFilterQuery·p0.999:  1180.697 ms/op
                 executeFilterQuery·p0.9999: 1180.697 ms/op
                 executeFilterQuery·p1.00:   1180.697 ms/op

Iteration   5: 1127.103 ±(99.9%) 39.129 ms/op
                 executeFilterQuery·p0.00:   1105.199 ms/op
                 executeFilterQuery·p0.50:   1117.782 ms/op
                 executeFilterQuery·p0.90:   1180.697 ms/op
                 executeFilterQuery·p0.95:   1180.697 ms/op
                 executeFilterQuery·p0.99:   1180.697 ms/op
                 executeFilterQuery·p0.999:  1180.697 ms/op
                 executeFilterQuery·p0.9999: 1180.697 ms/op
                 executeFilterQuery·p1.00:   1180.697 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 92
  mean =   1117.326 ±(99.9%) 8.249 ms/op

  Histogram, ms/op:
    [1000.000, 1012.500) = 0 
    [1012.500, 1025.000) = 0 
    [1025.000, 1037.500) = 0 
    [1037.500, 1050.000) = 0 
    [1050.000, 1062.500) = 0 
    [1062.500, 1075.000) = 0 
    [1075.000, 1087.500) = 3 
    [1087.500, 1100.000) = 20 
    [1100.000, 1112.500) = 21 
    [1112.500, 1125.000) = 24 
    [1125.000, 1137.500) = 8 
    [1137.500, 1150.000) = 6 
    [1150.000, 1162.500) = 4 
    [1162.500, 1175.000) = 3 
    [1175.000, 1187.500) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1080.033 ms/op
     p(50.0000) =   1113.588 ms/op
     p(90.0000) =   1151.336 ms/op
     p(95.0000) =   1168.953 ms/op
     p(99.0000) =   1180.697 ms/op
     p(99.9000) =   1180.697 ms/op
     p(99.9900) =   1180.697 ms/op
     p(99.9990) =   1180.697 ms/op
     p(99.9999) =   1180.697 ms/op
    p(100.0000) =   1180.697 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 55.95% complete, ETA 04:01:55
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1855.280 ±(99.9%) 379.859 ms/op
# Warmup Iteration   2: 1973.071 ±(99.9%) 48.411 ms/op
# Warmup Iteration   3: 2053.951 ±(99.9%) 410.759 ms/op
# Warmup Iteration   4: 2002.780 ±(99.9%) 147.583 ms/op
# Warmup Iteration   5: 2038.012 ±(99.9%) 54.591 ms/op
Iteration   1: 2016.621 ±(99.9%) 111.692 ms/op
                 executeFilterQuery·p0.00:   1977.614 ms/op
                 executeFilterQuery·p0.50:   2021.655 ms/op
                 executeFilterQuery·p0.90:   2051.015 ms/op
                 executeFilterQuery·p0.95:   2051.015 ms/op
                 executeFilterQuery·p0.99:   2051.015 ms/op
                 executeFilterQuery·p0.999:  2051.015 ms/op
                 executeFilterQuery·p0.9999: 2051.015 ms/op
                 executeFilterQuery·p1.00:   2051.015 ms/op

Iteration   2: 1979.362 ±(99.9%) 14.604 ms/op
                 executeFilterQuery·p0.00:   1975.517 ms/op
                 executeFilterQuery·p0.50:   1976.566 ms/op
                 executeFilterQuery·p0.90:   1986.003 ms/op
                 executeFilterQuery·p0.95:   1986.003 ms/op
                 executeFilterQuery·p0.99:   1986.003 ms/op
                 executeFilterQuery·p0.999:  1986.003 ms/op
                 executeFilterQuery·p0.9999: 1986.003 ms/op
                 executeFilterQuery·p1.00:   1986.003 ms/op

Iteration   3: 1970.973 ±(99.9%) 15.522 ms/op
                 executeFilterQuery·p0.00:   1965.031 ms/op
                 executeFilterQuery·p0.50:   1971.323 ms/op
                 executeFilterQuery·p0.90:   1979.711 ms/op
                 executeFilterQuery·p0.95:   1979.711 ms/op
                 executeFilterQuery·p0.99:   1979.711 ms/op
                 executeFilterQuery·p0.999:  1979.711 ms/op
                 executeFilterQuery·p0.9999: 1979.711 ms/op
                 executeFilterQuery·p1.00:   1979.711 ms/op

Iteration   4: 1996.139 ±(99.9%) 135.867 ms/op
                 executeFilterQuery·p0.00:   1971.323 ms/op
                 executeFilterQuery·p0.50:   1972.371 ms/op
                 executeFilterQuery·p0.90:   2092.958 ms/op
                 executeFilterQuery·p0.95:   2092.958 ms/op
                 executeFilterQuery·p0.99:   2092.958 ms/op
                 executeFilterQuery·p0.999:  2092.958 ms/op
                 executeFilterQuery·p0.9999: 2092.958 ms/op
                 executeFilterQuery·p1.00:   2092.958 ms/op

Iteration   5: 1973.071 ±(99.9%) 13.106 ms/op
                 executeFilterQuery·p0.00:   1967.129 ms/op
                 executeFilterQuery·p0.50:   1975.517 ms/op
                 executeFilterQuery·p0.90:   1977.614 ms/op
                 executeFilterQuery·p0.95:   1977.614 ms/op
                 executeFilterQuery·p0.99:   1977.614 ms/op
                 executeFilterQuery·p0.999:  1977.614 ms/op
                 executeFilterQuery·p0.9999: 1977.614 ms/op
                 executeFilterQuery·p1.00:   1977.614 ms/op


# Run progress: 56.55% complete, ETA 03:57:34
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1850.737 ±(99.9%) 370.570 ms/op
# Warmup Iteration   2: 1972.022 ±(99.9%) 26.212 ms/op
# Warmup Iteration   3: 1963.983 ±(99.9%) 14.284 ms/op
# Warmup Iteration   4: 1962.585 ±(99.9%) 10.129 ms/op
# Warmup Iteration   5: 2010.330 ±(99.9%) 67.225 ms/op
Iteration   1: 2066.534 ±(99.9%) 622.790 ms/op
                 executeFilterQuery·p0.00:   1958.740 ms/op
                 executeFilterQuery·p0.50:   1960.837 ms/op
                 executeFilterQuery·p0.90:   2323.644 ms/op
                 executeFilterQuery·p0.95:   2323.644 ms/op
                 executeFilterQuery·p0.99:   2323.644 ms/op
                 executeFilterQuery·p0.999:  2323.644 ms/op
                 executeFilterQuery·p0.9999: 2323.644 ms/op
                 executeFilterQuery·p1.00:   2323.644 ms/op

Iteration   2: 1967.129 ±(99.9%) 18.965 ms/op
                 executeFilterQuery·p0.00:   1960.837 ms/op
                 executeFilterQuery·p0.50:   1965.031 ms/op
                 executeFilterQuery·p0.90:   1979.711 ms/op
                 executeFilterQuery·p0.95:   1979.711 ms/op
                 executeFilterQuery·p0.99:   1979.711 ms/op
                 executeFilterQuery·p0.999:  1979.711 ms/op
                 executeFilterQuery·p0.9999: 1979.711 ms/op
                 executeFilterQuery·p1.00:   1979.711 ms/op

Iteration   3: 1959.789 ±(99.9%) 13.281 ms/op
                 executeFilterQuery·p0.00:   1954.546 ms/op
                 executeFilterQuery·p0.50:   1960.837 ms/op
                 executeFilterQuery·p0.90:   1967.129 ms/op
                 executeFilterQuery·p0.95:   1967.129 ms/op
                 executeFilterQuery·p0.99:   1967.129 ms/op
                 executeFilterQuery·p0.999:  1967.129 ms/op
                 executeFilterQuery·p0.9999: 1967.129 ms/op
                 executeFilterQuery·p1.00:   1967.129 ms/op

Iteration   4: 2001.522 ±(99.9%) 220.681 ms/op
                 executeFilterQuery·p0.00:   1965.031 ms/op
                 executeFilterQuery·p0.50:   1969.226 ms/op
                 executeFilterQuery·p0.90:   2099.249 ms/op
                 executeFilterQuery·p0.95:   2099.249 ms/op
                 executeFilterQuery·p0.99:   2099.249 ms/op
                 executeFilterQuery·p0.999:  2099.249 ms/op
                 executeFilterQuery·p0.9999: 2099.249 ms/op
                 executeFilterQuery·p1.00:   2099.249 ms/op

Iteration   5: 1997.537 ±(99.9%) 162.921 ms/op
                 executeFilterQuery·p0.00:   1971.323 ms/op
                 executeFilterQuery·p0.50:   1974.469 ms/op
                 executeFilterQuery·p0.90:   2116.026 ms/op
                 executeFilterQuery·p0.95:   2116.026 ms/op
                 executeFilterQuery·p0.99:   2116.026 ms/op
                 executeFilterQuery·p0.999:  2116.026 ms/op
                 executeFilterQuery·p0.9999: 2116.026 ms/op
                 executeFilterQuery·p1.00:   2116.026 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 57
  mean =   1991.007 ±(99.9%) 27.330 ms/op

  Histogram, ms/op:
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 48 
    [2000.000, 2050.000) = 3 
    [2050.000, 2100.000) = 3 
    [2100.000, 2150.000) = 2 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 0 
    [2250.000, 2300.000) = 0 
    [2300.000, 2350.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1954.546 ms/op
     p(50.0000) =   1973.420 ms/op
     p(90.0000) =   2059.403 ms/op
     p(95.0000) =   2117.494 ms/op
     p(99.0000) =   2323.644 ms/op
     p(99.9000) =   2323.644 ms/op
     p(99.9900) =   2323.644 ms/op
     p(99.9990) =   2323.644 ms/op
     p(99.9999) =   2323.644 ms/op
    p(100.0000) =   2323.644 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 57.14% complete, ETA 03:53:18
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1709563519 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1709563519() {
        this(4);
    }
    public KeyMultiRecordMap_1709563519(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1709563519 join_map = new KeyMultiRecordMap_1709563519();
private final class KeyMultiRecordMap_250489921 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_250489921() {
        this(4);
    }
    public KeyMultiRecordMap_250489921(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_250489921 join_map_0 = new KeyMultiRecordMap_250489921();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map_0.values_record_ord_2[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            join_map.associate(left_join_ord_1, left_join_key_prehash, left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            int left_join_ord_5 = join_map.values_record_ord_5[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4399.825 ±(99.9%) 9560.066 ms/op
# Warmup Iteration   2: 4262.811 ±(99.9%) 8958.473 ms/op
# Warmup Iteration   3: 4518.664 ±(99.9%) 14291.240 ms/op
# Warmup Iteration   4: 4016.745 ±(99.9%) 3371.502 ms/op
# Warmup Iteration   5: 4089.446 ±(99.9%) 1861.805 ms/op
Iteration   1: 4103.427 ±(99.9%) 7876.081 ms/op
                 executeQuery·p0.00:   3795.845 ms/op
                 executeQuery·p0.50:   3917.480 ms/op
                 executeQuery·p0.90:   4596.957 ms/op
                 executeQuery·p0.95:   4596.957 ms/op
                 executeQuery·p0.99:   4596.957 ms/op
                 executeQuery·p0.999:  4596.957 ms/op
                 executeQuery·p0.9999: 4596.957 ms/op
                 executeQuery·p1.00:   4596.957 ms/op

Iteration   2: 4072.669 ±(99.9%) 2475.978 ms/op
                 executeQuery·p0.00:   3917.480 ms/op
                 executeQuery·p0.50:   4131.389 ms/op
                 executeQuery·p0.90:   4169.138 ms/op
                 executeQuery·p0.95:   4169.138 ms/op
                 executeQuery·p0.99:   4169.138 ms/op
                 executeQuery·p0.999:  4169.138 ms/op
                 executeQuery·p0.9999: 4169.138 ms/op
                 executeQuery·p1.00:   4169.138 ms/op

Iteration   3: 4219.470 ±(99.9%) 1809.170 ms/op
                 executeQuery·p0.00:   4114.612 ms/op
                 executeQuery·p0.50:   4232.053 ms/op
                 executeQuery·p0.90:   4311.745 ms/op
                 executeQuery·p0.95:   4311.745 ms/op
                 executeQuery·p0.99:   4311.745 ms/op
                 executeQuery·p0.999:  4311.745 ms/op
                 executeQuery·p0.9999: 4311.745 ms/op
                 executeQuery·p1.00:   4311.745 ms/op

Iteration   4: 4652.881 ±(99.9%) 8053.617 ms/op
                 executeQuery·p0.00:   4177.527 ms/op
                 executeQuery·p0.50:   4731.175 ms/op
                 executeQuery·p0.90:   5049.942 ms/op
                 executeQuery·p0.95:   5049.942 ms/op
                 executeQuery·p0.99:   5049.942 ms/op
                 executeQuery·p0.999:  5049.942 ms/op
                 executeQuery·p0.9999: 5049.942 ms/op
                 executeQuery·p1.00:   5049.942 ms/op

Iteration   5: 4181.721 ±(99.9%) 9476.404 ms/op
                 executeQuery·p0.00:   3745.513 ms/op
                 executeQuery·p0.50:   4043.309 ms/op
                 executeQuery·p0.90:   4756.341 ms/op
                 executeQuery·p0.95:   4756.341 ms/op
                 executeQuery·p0.99:   4756.341 ms/op
                 executeQuery·p0.999:  4756.341 ms/op
                 executeQuery·p0.9999: 4756.341 ms/op
                 executeQuery·p1.00:   4756.341 ms/op


# Run progress: 57.74% complete, ETA 03:49:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1402224162 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1402224162() {
        this(4);
    }
    public KeyMultiRecordMap_1402224162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1402224162 join_map = new KeyMultiRecordMap_1402224162();
private final class KeyMultiRecordMap_1103415643 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1103415643() {
        this(4);
    }
    public KeyMultiRecordMap_1103415643(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1103415643 join_map_0 = new KeyMultiRecordMap_1103415643();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map_0.values_record_ord_2[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            join_map.associate(left_join_ord_1, left_join_key_prehash, left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            int left_join_ord_5 = join_map.values_record_ord_5[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4124.399 ±(99.9%) 1592.885 ms/op
# Warmup Iteration   2: 3955.229 ±(99.9%) 776.590 ms/op
# Warmup Iteration   3: 3994.376 ±(99.9%) 1072.187 ms/op
# Warmup Iteration   4: 3976.200 ±(99.9%) 729.952 ms/op
# Warmup Iteration   5: 3906.295 ±(99.9%) 1099.153 ms/op
Iteration   1: 3928.665 ±(99.9%) 5093.210 ms/op
                 executeQuery·p0.00:   3682.599 ms/op
                 executeQuery·p0.50:   3871.343 ms/op
                 executeQuery·p0.90:   4232.053 ms/op
                 executeQuery·p0.95:   4232.053 ms/op
                 executeQuery·p0.99:   4232.053 ms/op
                 executeQuery·p0.999:  4232.053 ms/op
                 executeQuery·p0.9999: 4232.053 ms/op
                 executeQuery·p1.00:   4232.053 ms/op

Iteration   2: 3804.234 ±(99.9%) 2584.736 ms/op
                 executeQuery·p0.00:   3640.656 ms/op
                 executeQuery·p0.50:   3883.926 ms/op
                 executeQuery·p0.90:   3888.120 ms/op
                 executeQuery·p0.95:   3888.120 ms/op
                 executeQuery·p0.99:   3888.120 ms/op
                 executeQuery·p0.999:  3888.120 ms/op
                 executeQuery·p0.9999: 3888.120 ms/op
                 executeQuery·p1.00:   3888.120 ms/op

Iteration   3: 3985.987 ±(99.9%) 1085.753 ms/op
                 executeQuery·p0.00:   3921.674 ms/op
                 executeQuery·p0.50:   3997.172 ms/op
                 executeQuery·p0.90:   4039.115 ms/op
                 executeQuery·p0.95:   4039.115 ms/op
                 executeQuery·p0.99:   4039.115 ms/op
                 executeQuery·p0.999:  4039.115 ms/op
                 executeQuery·p0.9999: 4039.115 ms/op
                 executeQuery·p1.00:   4039.115 ms/op

Iteration   4: 4271.200 ±(99.9%) 10041.397 ms/op
                 executeQuery·p0.00:   3871.343 ms/op
                 executeQuery·p0.50:   4043.309 ms/op
                 executeQuery·p0.90:   4898.947 ms/op
                 executeQuery·p0.95:   4898.947 ms/op
                 executeQuery·p0.99:   4898.947 ms/op
                 executeQuery·p0.999:  4898.947 ms/op
                 executeQuery·p0.9999: 4898.947 ms/op
                 executeQuery·p1.00:   4898.947 ms/op

Iteration   5: 3931.461 ±(99.9%) 4595.220 ms/op
                 executeQuery·p0.00:   3640.656 ms/op
                 executeQuery·p0.50:   4072.669 ms/op
                 executeQuery·p0.90:   4081.058 ms/op
                 executeQuery·p0.95:   4081.058 ms/op
                 executeQuery·p0.99:   4081.058 ms/op
                 executeQuery·p0.999:  4081.058 ms/op
                 executeQuery·p0.9999: 4081.058 ms/op
                 executeQuery·p1.00:   4081.058 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   4115.171 ±(99.9%) 242.877 ms/op

  Histogram, ms/op:
    [3000.000, 3250.000) = 0 
    [3250.000, 3500.000) = 0 
    [3500.000, 3750.000) = 4 
    [3750.000, 4000.000) = 9 
    [4000.000, 4250.000) = 11 
    [4250.000, 4500.000) = 1 
    [4500.000, 4750.000) = 2 
    [4750.000, 5000.000) = 2 
    [5000.000, 5250.000) = 1 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3640.656 ms/op
     p(50.0000) =   4043.309 ms/op
     p(90.0000) =   4753.824 ms/op
     p(95.0000) =   4966.895 ms/op
     p(99.0000) =   5049.942 ms/op
     p(99.9000) =   5049.942 ms/op
     p(99.9900) =   5049.942 ms/op
     p(99.9990) =   5049.942 ms/op
     p(99.9999) =   5049.942 ms/op
    p(100.0000) =   5049.942 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 58.33% complete, ETA 03:45:11
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1402224162 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1402224162() {
        this(4);
    }
    public KeyMultiRecordMap_1402224162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1402224162 join_map = new KeyMultiRecordMap_1402224162();
private final class KeyMultiRecordMap_1103415643 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1103415643() {
        this(4);
    }
    public KeyMultiRecordMap_1103415643(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1103415643 join_map_0 = new KeyMultiRecordMap_1103415643();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map_0.values_record_ord_2[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            join_map.associate(left_join_ord_1, left_join_key_prehash, left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            int left_join_ord_5 = join_map.values_record_ord_5[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

55029.268 ms/op
# Warmup Iteration   2: 57847.841 ms/op
# Warmup Iteration   3: 56774.099 ms/op
# Warmup Iteration   4: 55767.466 ms/op
# Warmup Iteration   5: 54156.853 ms/op
Iteration   1: 51875.152 ms/op
                 executeQuery·p0.00:   51875.152 ms/op
                 executeQuery·p0.50:   51875.152 ms/op
                 executeQuery·p0.90:   51875.152 ms/op
                 executeQuery·p0.95:   51875.152 ms/op
                 executeQuery·p0.99:   51875.152 ms/op
                 executeQuery·p0.999:  51875.152 ms/op
                 executeQuery·p0.9999: 51875.152 ms/op
                 executeQuery·p1.00:   51875.152 ms/op

Iteration   2: 51002.737 ms/op
                 executeQuery·p0.00:   51002.737 ms/op
                 executeQuery·p0.50:   51002.737 ms/op
                 executeQuery·p0.90:   51002.737 ms/op
                 executeQuery·p0.95:   51002.737 ms/op
                 executeQuery·p0.99:   51002.737 ms/op
                 executeQuery·p0.999:  51002.737 ms/op
                 executeQuery·p0.9999: 51002.737 ms/op
                 executeQuery·p1.00:   51002.737 ms/op

Iteration   3: 50600.083 ms/op
                 executeQuery·p0.00:   50600.083 ms/op
                 executeQuery·p0.50:   50600.083 ms/op
                 executeQuery·p0.90:   50600.083 ms/op
                 executeQuery·p0.95:   50600.083 ms/op
                 executeQuery·p0.99:   50600.083 ms/op
                 executeQuery·p0.999:  50600.083 ms/op
                 executeQuery·p0.9999: 50600.083 ms/op
                 executeQuery·p1.00:   50600.083 ms/op

Iteration   4: 52143.587 ms/op
                 executeQuery·p0.00:   52143.587 ms/op
                 executeQuery·p0.50:   52143.587 ms/op
                 executeQuery·p0.90:   52143.587 ms/op
                 executeQuery·p0.95:   52143.587 ms/op
                 executeQuery·p0.99:   52143.587 ms/op
                 executeQuery·p0.999:  52143.587 ms/op
                 executeQuery·p0.9999: 52143.587 ms/op
                 executeQuery·p1.00:   52143.587 ms/op

Iteration   5: 48788.144 ms/op
                 executeQuery·p0.00:   48788.144 ms/op
                 executeQuery·p0.50:   48788.144 ms/op
                 executeQuery·p0.90:   48788.144 ms/op
                 executeQuery·p0.95:   48788.144 ms/op
                 executeQuery·p0.99:   48788.144 ms/op
                 executeQuery·p0.999:  48788.144 ms/op
                 executeQuery·p0.9999: 48788.144 ms/op
                 executeQuery·p1.00:   48788.144 ms/op


# Run progress: 58.93% complete, ETA 03:45:57
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1402224162 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1402224162() {
        this(4);
    }
    public KeyMultiRecordMap_1402224162(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1402224162 join_map = new KeyMultiRecordMap_1402224162();
private final class KeyMultiRecordMap_1103415643 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1103415643() {
        this(4);
    }
    public KeyMultiRecordMap_1103415643(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1103415643 join_map_0 = new KeyMultiRecordMap_1103415643();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map_0.values_record_ord_2[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            join_map.associate(left_join_ord_1, left_join_key_prehash, left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            int left_join_ord_5 = join_map.values_record_ord_5[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

43285.217 ms/op
# Warmup Iteration   2: 43151.000 ms/op
# Warmup Iteration   3: 48117.055 ms/op
# Warmup Iteration   4: 42815.455 ms/op
# Warmup Iteration   5: 44358.959 ms/op
Iteration   1: 44090.524 ms/op
                 executeQuery·p0.00:   44090.524 ms/op
                 executeQuery·p0.50:   44090.524 ms/op
                 executeQuery·p0.90:   44090.524 ms/op
                 executeQuery·p0.95:   44090.524 ms/op
                 executeQuery·p0.99:   44090.524 ms/op
                 executeQuery·p0.999:  44090.524 ms/op
                 executeQuery·p0.9999: 44090.524 ms/op
                 executeQuery·p1.00:   44090.524 ms/op

Iteration   2: 43687.870 ms/op
                 executeQuery·p0.00:   43687.870 ms/op
                 executeQuery·p0.50:   43687.870 ms/op
                 executeQuery·p0.90:   43687.870 ms/op
                 executeQuery·p0.95:   43687.870 ms/op
                 executeQuery·p0.99:   43687.870 ms/op
                 executeQuery·p0.999:  43687.870 ms/op
                 executeQuery·p0.9999: 43687.870 ms/op
                 executeQuery·p1.00:   43687.870 ms/op

Iteration   3: 44090.524 ms/op
                 executeQuery·p0.00:   44090.524 ms/op
                 executeQuery·p0.50:   44090.524 ms/op
                 executeQuery·p0.90:   44090.524 ms/op
                 executeQuery·p0.95:   44090.524 ms/op
                 executeQuery·p0.99:   44090.524 ms/op
                 executeQuery·p0.999:  44090.524 ms/op
                 executeQuery·p0.9999: 44090.524 ms/op
                 executeQuery·p1.00:   44090.524 ms/op

Iteration   4: 41808.822 ms/op
                 executeQuery·p0.00:   41808.822 ms/op
                 executeQuery·p0.50:   41808.822 ms/op
                 executeQuery·p0.90:   41808.822 ms/op
                 executeQuery·p0.95:   41808.822 ms/op
                 executeQuery·p0.99:   41808.822 ms/op
                 executeQuery·p0.999:  41808.822 ms/op
                 executeQuery·p0.9999: 41808.822 ms/op
                 executeQuery·p1.00:   41808.822 ms/op

Iteration   5: 44090.524 ms/op
                 executeQuery·p0.00:   44090.524 ms/op
                 executeQuery·p0.50:   44090.524 ms/op
                 executeQuery·p0.90:   44090.524 ms/op
                 executeQuery·p0.95:   44090.524 ms/op
                 executeQuery·p0.99:   44090.524 ms/op
                 executeQuery·p0.999:  44090.524 ms/op
                 executeQuery·p0.9999: 44090.524 ms/op
                 executeQuery·p1.00:   44090.524 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  47217.797 ±(99.9%) 6073.471 ms/op

  Histogram, ms/op:
    [40000.000, 41250.000) = 0 
    [41250.000, 42500.000) = 1 
    [42500.000, 43750.000) = 1 
    [43750.000, 45000.000) = 3 
    [45000.000, 46250.000) = 0 
    [46250.000, 47500.000) = 0 
    [47500.000, 48750.000) = 0 
    [48750.000, 50000.000) = 1 
    [50000.000, 51250.000) = 2 
    [51250.000, 52500.000) = 2 
    [52500.000, 53750.000) = 0 
    [53750.000, 55000.000) = 0 
    [55000.000, 56250.000) = 0 
    [56250.000, 57500.000) = 0 
    [57500.000, 58750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  41808.822 ms/op
     p(50.0000) =  46439.334 ms/op
     p(90.0000) =  52116.744 ms/op
     p(95.0000) =  52143.587 ms/op
     p(99.0000) =  52143.587 ms/op
     p(99.9000) =  52143.587 ms/op
     p(99.9900) =  52143.587 ms/op
     p(99.9990) =  52143.587 ms/op
     p(99.9999) =  52143.587 ms/op
    p(100.0000) =  52143.587 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 59.52% complete, ETA 03:45:27
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1091606724 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1091606724() {
        this(4);
    }
    public KeyMultiRecordMap_1091606724(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1091606724 join_map = new KeyMultiRecordMap_1091606724();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1279956673 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1279956673() {
        this(4);
    }
    public KeyMultiRecordMap_1279956673(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1279956673 join_map_0 = new KeyMultiRecordMap_1279956673();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_0_0[i_0], left_join_record_key, join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_5[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4135.584 ±(99.9%) 1667.709 ms/op
# Warmup Iteration   2: 3953.831 ±(99.9%) 4607.309 ms/op
# Warmup Iteration   3: 3914.684 ±(99.9%) 1411.645 ms/op
# Warmup Iteration   4: 4020.939 ±(99.9%) 1262.769 ms/op
# Warmup Iteration   5: 4096.437 ±(99.9%) 3574.653 ms/op
Iteration   1: 4174.731 ±(99.9%) 1865.471 ms/op
                 executeQuery·p0.00:   4097.835 ms/op
                 executeQuery·p0.50:   4135.584 ms/op
                 executeQuery·p0.90:   4290.773 ms/op
                 executeQuery·p0.95:   4290.773 ms/op
                 executeQuery·p0.99:   4290.773 ms/op
                 executeQuery·p0.999:  4290.773 ms/op
                 executeQuery·p0.9999: 4290.773 ms/op
                 executeQuery·p1.00:   4290.773 ms/op

Iteration   2: 4135.584 ±(99.9%) 852.088 ms/op
                 executeQuery·p0.00:   4085.252 ms/op
                 executeQuery·p0.50:   4143.972 ms/op
                 executeQuery·p0.90:   4177.527 ms/op
                 executeQuery·p0.95:   4177.527 ms/op
                 executeQuery·p0.99:   4177.527 ms/op
                 executeQuery·p0.999:  4177.527 ms/op
                 executeQuery·p0.9999: 4177.527 ms/op
                 executeQuery·p1.00:   4177.527 ms/op

Iteration   3: 4208.285 ±(99.9%) 594.363 ms/op
                 executeQuery·p0.00:   4181.721 ms/op
                 executeQuery·p0.50:   4198.498 ms/op
                 executeQuery·p0.90:   4244.636 ms/op
                 executeQuery·p0.95:   4244.636 ms/op
                 executeQuery·p0.99:   4244.636 ms/op
                 executeQuery·p0.999:  4244.636 ms/op
                 executeQuery·p0.9999: 4244.636 ms/op
                 executeQuery·p1.00:   4244.636 ms/op

Iteration   4: 4164.944 ±(99.9%) 1325.360 ms/op
                 executeQuery·p0.00:   4081.058 ms/op
                 executeQuery·p0.50:   4206.887 ms/op
                 executeQuery·p0.90:   4206.887 ms/op
                 executeQuery·p0.95:   4206.887 ms/op
                 executeQuery·p0.99:   4206.887 ms/op
                 executeQuery·p0.999:  4206.887 ms/op
                 executeQuery·p0.9999: 4206.887 ms/op
                 executeQuery·p1.00:   4206.887 ms/op

Iteration   5: 4202.693 ±(99.9%) 501.773 ms/op
                 executeQuery·p0.00:   4177.527 ms/op
                 executeQuery·p0.50:   4198.498 ms/op
                 executeQuery·p0.90:   4232.053 ms/op
                 executeQuery·p0.95:   4232.053 ms/op
                 executeQuery·p0.99:   4232.053 ms/op
                 executeQuery·p0.999:  4232.053 ms/op
                 executeQuery·p0.9999: 4232.053 ms/op
                 executeQuery·p1.00:   4232.053 ms/op


# Run progress: 60.12% complete, ETA 03:41:19
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1091606724 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1091606724() {
        this(4);
    }
    public KeyMultiRecordMap_1091606724(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1091606724 join_map = new KeyMultiRecordMap_1091606724();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1279956673 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1279956673() {
        this(4);
    }
    public KeyMultiRecordMap_1279956673(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1279956673 join_map_0 = new KeyMultiRecordMap_1279956673();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_0_0[i_0], left_join_record_key, join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_5[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

4159.351 ±(99.9%) 1670.048 ms/op
# Warmup Iteration   2: 3995.774 ±(99.9%) 4460.078 ms/op
# Warmup Iteration   3: 3960.821 ±(99.9%) 2272.949 ms/op
# Warmup Iteration   4: 4037.717 ±(99.9%) 3388.824 ms/op
# Warmup Iteration   5: 4211.081 ±(99.9%) 6619.287 ms/op
Iteration   1: 4128.593 ±(99.9%) 1540.563 ms/op
                 executeQuery·p0.00:   4039.115 ms/op
                 executeQuery·p0.50:   4139.778 ms/op
                 executeQuery·p0.90:   4206.887 ms/op
                 executeQuery·p0.95:   4206.887 ms/op
                 executeQuery·p0.99:   4206.887 ms/op
                 executeQuery·p0.999:  4206.887 ms/op
                 executeQuery·p0.9999: 4206.887 ms/op
                 executeQuery·p1.00:   4206.887 ms/op

Iteration   2: 4113.214 ±(99.9%) 2807.693 ms/op
                 executeQuery·p0.00:   3951.034 ms/op
                 executeQuery·p0.50:   4131.389 ms/op
                 executeQuery·p0.90:   4257.219 ms/op
                 executeQuery·p0.95:   4257.219 ms/op
                 executeQuery·p0.99:   4257.219 ms/op
                 executeQuery·p0.999:  4257.219 ms/op
                 executeQuery·p0.9999: 4257.219 ms/op
                 executeQuery·p1.00:   4257.219 ms/op

Iteration   3: 4156.555 ±(99.9%) 1667.709 ms/op
                 executeQuery·p0.00:   4093.641 ms/op
                 executeQuery·p0.50:   4114.612 ms/op
                 executeQuery·p0.90:   4261.413 ms/op
                 executeQuery·p0.95:   4261.413 ms/op
                 executeQuery·p0.99:   4261.413 ms/op
                 executeQuery·p0.999:  4261.413 ms/op
                 executeQuery·p0.9999: 4261.413 ms/op
                 executeQuery·p1.00:   4261.413 ms/op

Iteration   4: 4058.688 ±(99.9%) 1685.751 ms/op
                 executeQuery·p0.00:   3997.172 ms/op
                 executeQuery·p0.50:   4013.949 ms/op
                 executeQuery·p0.90:   4164.944 ms/op
                 executeQuery·p0.95:   4164.944 ms/op
                 executeQuery·p0.99:   4164.944 ms/op
                 executeQuery·p0.999:  4164.944 ms/op
                 executeQuery·p0.9999: 4164.944 ms/op
                 executeQuery·p1.00:   4164.944 ms/op

Iteration   5: 4136.982 ±(99.9%) 1636.401 ms/op
                 executeQuery·p0.00:   4081.058 ms/op
                 executeQuery·p0.50:   4089.446 ms/op
                 executeQuery·p0.90:   4240.441 ms/op
                 executeQuery·p0.95:   4240.441 ms/op
                 executeQuery·p0.99:   4240.441 ms/op
                 executeQuery·p0.999:  4240.441 ms/op
                 executeQuery·p0.9999: 4240.441 ms/op
                 executeQuery·p1.00:   4240.441 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   4148.027 ±(99.9%) 55.980 ms/op

  Histogram, ms/op:
    [3900.000, 3925.000) = 0 
    [3925.000, 3950.000) = 0 
    [3950.000, 3975.000) = 1 
    [3975.000, 4000.000) = 1 
    [4000.000, 4025.000) = 1 
    [4025.000, 4050.000) = 1 
    [4050.000, 4075.000) = 0 
    [4075.000, 4100.000) = 6 
    [4100.000, 4125.000) = 1 
    [4125.000, 4150.000) = 4 
    [4150.000, 4175.000) = 1 
    [4175.000, 4200.000) = 5 
    [4200.000, 4225.000) = 3 
    [4225.000, 4250.000) = 3 
    [4250.000, 4275.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   3951.034 ms/op
     p(50.0000) =   4154.458 ms/op
     p(90.0000) =   4255.960 ms/op
     p(95.0000) =   4274.625 ms/op
     p(99.0000) =   4290.773 ms/op
     p(99.9000) =   4290.773 ms/op
     p(99.9900) =   4290.773 ms/op
     p(99.9990) =   4290.773 ms/op
     p(99.9999) =   4290.773 ms/op
    p(100.0000) =   4290.773 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 60.71% complete, ETA 03:37:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_984287572 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_984287572() {
        this(4);
    }
    public KeyMultiRecordMap_984287572(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_984287572 join_map = new KeyMultiRecordMap_984287572();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1620366692 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1620366692() {
        this(4);
    }
    public KeyMultiRecordMap_1620366692(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1620366692 join_map_0 = new KeyMultiRecordMap_1620366692();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_0_0[i_0], left_join_record_key, join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_5[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

43419.435 ms/op
# Warmup Iteration   2: 40869.298 ms/op
# Warmup Iteration   3: 42681.238 ms/op
# Warmup Iteration   4: 42345.693 ms/op
# Warmup Iteration   5: 43822.088 ms/op
Iteration   1: 41473.278 ms/op
                 executeQuery·p0.00:   41473.278 ms/op
                 executeQuery·p0.50:   41473.278 ms/op
                 executeQuery·p0.90:   41473.278 ms/op
                 executeQuery·p0.95:   41473.278 ms/op
                 executeQuery·p0.99:   41473.278 ms/op
                 executeQuery·p0.999:  41473.278 ms/op
                 executeQuery·p0.9999: 41473.278 ms/op
                 executeQuery·p1.00:   41473.278 ms/op

Iteration   2: 43486.544 ms/op
                 executeQuery·p0.00:   43486.544 ms/op
                 executeQuery·p0.50:   43486.544 ms/op
                 executeQuery·p0.90:   43486.544 ms/op
                 executeQuery·p0.95:   43486.544 ms/op
                 executeQuery·p0.99:   43486.544 ms/op
                 executeQuery·p0.999:  43486.544 ms/op
                 executeQuery·p0.9999: 43486.544 ms/op
                 executeQuery·p1.00:   43486.544 ms/op

Iteration   3: 41943.040 ms/op
                 executeQuery·p0.00:   41943.040 ms/op
                 executeQuery·p0.50:   41943.040 ms/op
                 executeQuery·p0.90:   41943.040 ms/op
                 executeQuery·p0.95:   41943.040 ms/op
                 executeQuery·p0.99:   41943.040 ms/op
                 executeQuery·p0.999:  41943.040 ms/op
                 executeQuery·p0.9999: 41943.040 ms/op
                 executeQuery·p1.00:   41943.040 ms/op

Iteration   4: 44627.395 ms/op
                 executeQuery·p0.00:   44627.395 ms/op
                 executeQuery·p0.50:   44627.395 ms/op
                 executeQuery·p0.90:   44627.395 ms/op
                 executeQuery·p0.95:   44627.395 ms/op
                 executeQuery·p0.99:   44627.395 ms/op
                 executeQuery·p0.999:  44627.395 ms/op
                 executeQuery·p0.9999: 44627.395 ms/op
                 executeQuery·p1.00:   44627.395 ms/op

Iteration   5: 42949.673 ms/op
                 executeQuery·p0.00:   42949.673 ms/op
                 executeQuery·p0.50:   42949.673 ms/op
                 executeQuery·p0.90:   42949.673 ms/op
                 executeQuery·p0.95:   42949.673 ms/op
                 executeQuery·p0.99:   42949.673 ms/op
                 executeQuery·p0.999:  42949.673 ms/op
                 executeQuery·p0.9999: 42949.673 ms/op
                 executeQuery·p1.00:   42949.673 ms/op


# Run progress: 61.31% complete, ETA 03:36:22
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1091606724 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1091606724() {
        this(4);
    }
    public KeyMultiRecordMap_1091606724(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1091606724 join_map = new KeyMultiRecordMap_1091606724();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1279956673 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1279956673() {
        this(4);
    }
    public KeyMultiRecordMap_1279956673(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1279956673 join_map_0 = new KeyMultiRecordMap_1279956673();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_0_0[i_0], left_join_record_key, join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_5[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

43419.435 ms/op
# Warmup Iteration   2: 40936.407 ms/op
# Warmup Iteration   3: 44560.286 ms/op
# Warmup Iteration   4: 42748.346 ms/op
# Warmup Iteration   5: 41943.040 ms/op
Iteration   1: 42345.693 ms/op
                 executeQuery·p0.00:   42345.693 ms/op
                 executeQuery·p0.50:   42345.693 ms/op
                 executeQuery·p0.90:   42345.693 ms/op
                 executeQuery·p0.95:   42345.693 ms/op
                 executeQuery·p0.99:   42345.693 ms/op
                 executeQuery·p0.999:  42345.693 ms/op
                 executeQuery·p0.9999: 42345.693 ms/op
                 executeQuery·p1.00:   42345.693 ms/op

Iteration   2: 41875.931 ms/op
                 executeQuery·p0.00:   41875.931 ms/op
                 executeQuery·p0.50:   41875.931 ms/op
                 executeQuery·p0.90:   41875.931 ms/op
                 executeQuery·p0.95:   41875.931 ms/op
                 executeQuery·p0.99:   41875.931 ms/op
                 executeQuery·p0.999:  41875.931 ms/op
                 executeQuery·p0.9999: 41875.931 ms/op
                 executeQuery·p1.00:   41875.931 ms/op

Iteration   3: 41607.496 ms/op
                 executeQuery·p0.00:   41607.496 ms/op
                 executeQuery·p0.50:   41607.496 ms/op
                 executeQuery·p0.90:   41607.496 ms/op
                 executeQuery·p0.95:   41607.496 ms/op
                 executeQuery·p0.99:   41607.496 ms/op
                 executeQuery·p0.999:  41607.496 ms/op
                 executeQuery·p0.9999: 41607.496 ms/op
                 executeQuery·p1.00:   41607.496 ms/op

Iteration   4: 40667.972 ms/op
                 executeQuery·p0.00:   40667.972 ms/op
                 executeQuery·p0.50:   40667.972 ms/op
                 executeQuery·p0.90:   40667.972 ms/op
                 executeQuery·p0.95:   40667.972 ms/op
                 executeQuery·p0.99:   40667.972 ms/op
                 executeQuery·p0.999:  40667.972 ms/op
                 executeQuery·p0.9999: 40667.972 ms/op
                 executeQuery·p1.00:   40667.972 ms/op

Iteration   5: 40735.080 ms/op
                 executeQuery·p0.00:   40735.080 ms/op
                 executeQuery·p0.50:   40735.080 ms/op
                 executeQuery·p0.90:   40735.080 ms/op
                 executeQuery·p0.95:   40735.080 ms/op
                 executeQuery·p0.99:   40735.080 ms/op
                 executeQuery·p0.999:  40735.080 ms/op
                 executeQuery·p0.9999: 40735.080 ms/op
                 executeQuery·p1.00:   40735.080 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  42171.210 ±(99.9%) 1862.970 ms/op

  Histogram, ms/op:
    [40000.000, 40500.000) = 0 
    [40500.000, 41000.000) = 2 
    [41000.000, 41500.000) = 1 
    [41500.000, 42000.000) = 3 
    [42000.000, 42500.000) = 1 
    [42500.000, 43000.000) = 1 
    [43000.000, 43500.000) = 1 
    [43500.000, 44000.000) = 0 
    [44000.000, 44500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  40667.972 ms/op
     p(50.0000) =  41909.486 ms/op
     p(90.0000) =  44513.309 ms/op
     p(95.0000) =  44627.395 ms/op
     p(99.0000) =  44627.395 ms/op
     p(99.9000) =  44627.395 ms/op
     p(99.9900) =  44627.395 ms/op
     p(99.9990) =  44627.395 ms/op
     p(99.9999) =  44627.395 ms/op
    p(100.0000) =  44627.395 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 61.90% complete, ETA 03:35:19
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1749.724 ±(99.9%) 431.952 ms/op
# Warmup Iteration   2: 1692.402 ±(99.9%) 77.929 ms/op
# Warmup Iteration   3: 1713.024 ±(99.9%) 20.847 ms/op
# Warmup Iteration   4: 1692.402 ±(99.9%) 9.840 ms/op
# Warmup Iteration   5: 1697.295 ±(99.9%) 22.522 ms/op
Iteration   1: 1714.422 ±(99.9%) 15.222 ms/op
                 executeQuery·p0.00:   1704.985 ms/op
                 executeQuery·p0.50:   1716.519 ms/op
                 executeQuery·p0.90:   1719.665 ms/op
                 executeQuery·p0.95:   1719.665 ms/op
                 executeQuery·p0.99:   1719.665 ms/op
                 executeQuery·p0.999:  1719.665 ms/op
                 executeQuery·p0.9999: 1719.665 ms/op
                 executeQuery·p1.00:   1719.665 ms/op

Iteration   2: 1719.665 ±(99.9%) 47.193 ms/op
                 executeQuery·p0.00:   1707.082 ms/op
                 executeQuery·p0.50:   1714.422 ms/op
                 executeQuery·p0.90:   1753.219 ms/op
                 executeQuery·p0.95:   1753.219 ms/op
                 executeQuery·p0.99:   1753.219 ms/op
                 executeQuery·p0.999:  1753.219 ms/op
                 executeQuery·p0.9999: 1753.219 ms/op
                 executeQuery·p1.00:   1753.219 ms/op

Iteration   3: 1712.325 ±(99.9%) 9.663 ms/op
                 executeQuery·p0.00:   1707.082 ms/op
                 executeQuery·p0.50:   1712.325 ms/op
                 executeQuery·p0.90:   1717.567 ms/op
                 executeQuery·p0.95:   1717.567 ms/op
                 executeQuery·p0.99:   1717.567 ms/op
                 executeQuery·p0.999:  1717.567 ms/op
                 executeQuery·p0.9999: 1717.567 ms/op
                 executeQuery·p1.00:   1717.567 ms/op

Iteration   4: 1737.141 ±(99.9%) 6.074 ms/op
                 executeQuery·p0.00:   1734.345 ms/op
                 executeQuery·p0.50:   1736.442 ms/op
                 executeQuery·p0.90:   1740.636 ms/op
                 executeQuery·p0.95:   1740.636 ms/op
                 executeQuery·p0.99:   1740.636 ms/op
                 executeQuery·p0.999:  1740.636 ms/op
                 executeQuery·p0.9999: 1740.636 ms/op
                 executeQuery·p1.00:   1740.636 ms/op

Iteration   5: 1720.014 ±(99.9%) 23.351 ms/op
                 executeQuery·p0.00:   1711.276 ms/op
                 executeQuery·p0.50:   1717.567 ms/op
                 executeQuery·p0.90:   1730.150 ms/op
                 executeQuery·p0.95:   1730.150 ms/op
                 executeQuery·p0.99:   1730.150 ms/op
                 executeQuery·p0.999:  1730.150 ms/op
                 executeQuery·p0.9999: 1730.150 ms/op
                 executeQuery·p1.00:   1730.150 ms/op


# Run progress: 62.50% complete, ETA 03:31:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1816.483 ±(99.9%) 468.836 ms/op
# Warmup Iteration   2: 1691.004 ±(99.9%) 59.004 ms/op
# Warmup Iteration   3: 1700.441 ±(99.9%) 7.817 ms/op
# Warmup Iteration   4: 1698.693 ±(99.9%) 10.520 ms/op
# Warmup Iteration   5: 1703.586 ±(99.9%) 12.147 ms/op
Iteration   1: 1731.549 ±(99.9%) 87.911 ms/op
                 executeQuery·p0.00:   1700.790 ms/op
                 executeQuery·p0.50:   1725.956 ms/op
                 executeQuery·p0.90:   1774.191 ms/op
                 executeQuery·p0.95:   1774.191 ms/op
                 executeQuery·p0.99:   1774.191 ms/op
                 executeQuery·p0.999:  1774.191 ms/op
                 executeQuery·p0.9999: 1774.191 ms/op
                 executeQuery·p1.00:   1774.191 ms/op

Iteration   2: 1810.891 ±(99.9%) 52.960 ms/op
                 executeQuery·p0.00:   1778.385 ms/op
                 executeQuery·p0.50:   1821.377 ms/op
                 executeQuery·p0.90:   1824.522 ms/op
                 executeQuery·p0.95:   1824.522 ms/op
                 executeQuery·p0.99:   1824.522 ms/op
                 executeQuery·p0.999:  1824.522 ms/op
                 executeQuery·p0.9999: 1824.522 ms/op
                 executeQuery·p1.00:   1824.522 ms/op

Iteration   3: 1798.657 ±(99.9%) 27.750 ms/op
                 executeQuery·p0.00:   1790.968 ms/op
                 executeQuery·p0.50:   1796.211 ms/op
                 executeQuery·p0.90:   1818.231 ms/op
                 executeQuery·p0.95:   1818.231 ms/op
                 executeQuery·p0.99:   1818.231 ms/op
                 executeQuery·p0.999:  1818.231 ms/op
                 executeQuery·p0.9999: 1818.231 ms/op
                 executeQuery·p1.00:   1818.231 ms/op

Iteration   4: 1797.609 ±(99.9%) 10.790 ms/op
                 executeQuery·p0.00:   1795.162 ms/op
                 executeQuery·p0.50:   1795.162 ms/op
                 executeQuery·p0.90:   1803.551 ms/op
                 executeQuery·p0.95:   1803.551 ms/op
                 executeQuery·p0.99:   1803.551 ms/op
                 executeQuery·p0.999:  1803.551 ms/op
                 executeQuery·p0.9999: 1803.551 ms/op
                 executeQuery·p1.00:   1803.551 ms/op

Iteration   5: 1792.715 ±(99.9%) 13.624 ms/op
                 executeQuery·p0.00:   1786.774 ms/op
                 executeQuery·p0.50:   1794.114 ms/op
                 executeQuery·p0.90:   1797.259 ms/op
                 executeQuery·p0.95:   1797.259 ms/op
                 executeQuery·p0.99:   1797.259 ms/op
                 executeQuery·p0.999:  1797.259 ms/op
                 executeQuery·p0.9999: 1797.259 ms/op
                 executeQuery·p1.00:   1797.259 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 60
  mean =   1753.499 ±(99.9%) 18.379 ms/op

  Histogram, ms/op:
    [1700.000, 1712.500) = 11 
    [1712.500, 1725.000) = 13 
    [1725.000, 1737.500) = 6 
    [1737.500, 1750.000) = 3 
    [1750.000, 1762.500) = 2 
    [1762.500, 1775.000) = 1 
    [1775.000, 1787.500) = 3 
    [1787.500, 1800.000) = 14 
    [1800.000, 1812.500) = 2 
    [1812.500, 1825.000) = 5 
    [1825.000, 1837.500) = 0 
    [1837.500, 1850.000) = 0 
    [1850.000, 1862.500) = 0 
    [1862.500, 1875.000) = 0 
    [1875.000, 1887.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1700.790 ms/op
     p(50.0000) =   1737.490 ms/op
     p(90.0000) =   1803.341 ms/op
     p(95.0000) =   1822.320 ms/op
     p(99.0000) =   1824.522 ms/op
     p(99.9000) =   1824.522 ms/op
     p(99.9900) =   1824.522 ms/op
     p(99.9990) =   1824.522 ms/op
     p(99.9999) =   1824.522 ms/op
    p(100.0000) =   1824.522 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 63.10% complete, ETA 03:26:46
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 24930.943 ms/op
# Warmup Iteration   2: 26071.794 ms/op
# Warmup Iteration   3: 24897.389 ms/op
# Warmup Iteration   4: 21139.292 ms/op
# Warmup Iteration   5: 27011.318 ms/op
Iteration   1: 20870.857 ms/op
                 executeQuery·p0.00:   20870.857 ms/op
                 executeQuery·p0.50:   20870.857 ms/op
                 executeQuery·p0.90:   20870.857 ms/op
                 executeQuery·p0.95:   20870.857 ms/op
                 executeQuery·p0.99:   20870.857 ms/op
                 executeQuery·p0.999:  20870.857 ms/op
                 executeQuery·p0.9999: 20870.857 ms/op
                 executeQuery·p1.00:   20870.857 ms/op

Iteration   2: 20870.857 ms/op
                 executeQuery·p0.00:   20870.857 ms/op
                 executeQuery·p0.50:   20870.857 ms/op
                 executeQuery·p0.90:   20870.857 ms/op
                 executeQuery·p0.95:   20870.857 ms/op
                 executeQuery·p0.99:   20870.857 ms/op
                 executeQuery·p0.999:  20870.857 ms/op
                 executeQuery·p0.9999: 20870.857 ms/op
                 executeQuery·p1.00:   20870.857 ms/op

Iteration   3: 19428.016 ms/op
                 executeQuery·p0.00:   19428.016 ms/op
                 executeQuery·p0.50:   19428.016 ms/op
                 executeQuery·p0.90:   19428.016 ms/op
                 executeQuery·p0.95:   19428.016 ms/op
                 executeQuery·p0.99:   19428.016 ms/op
                 executeQuery·p0.999:  19428.016 ms/op
                 executeQuery·p0.9999: 19428.016 ms/op
                 executeQuery·p1.00:   19428.016 ms/op

Iteration   4: 19327.353 ms/op
                 executeQuery·p0.00:   19327.353 ms/op
                 executeQuery·p0.50:   19327.353 ms/op
                 executeQuery·p0.90:   19327.353 ms/op
                 executeQuery·p0.95:   19327.353 ms/op
                 executeQuery·p0.99:   19327.353 ms/op
                 executeQuery·p0.999:  19327.353 ms/op
                 executeQuery·p0.9999: 19327.353 ms/op
                 executeQuery·p1.00:   19327.353 ms/op

Iteration   5: 19360.907 ms/op
                 executeQuery·p0.00:   19360.907 ms/op
                 executeQuery·p0.50:   19360.907 ms/op
                 executeQuery·p0.90:   19360.907 ms/op
                 executeQuery·p0.95:   19360.907 ms/op
                 executeQuery·p0.99:   19360.907 ms/op
                 executeQuery·p0.999:  19360.907 ms/op
                 executeQuery·p0.9999: 19360.907 ms/op
                 executeQuery·p1.00:   19360.907 ms/op


# Run progress: 63.69% complete, ETA 03:23:50
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 24226.300 ms/op
# Warmup Iteration   2: 24763.171 ms/op
# Warmup Iteration   3: 23521.657 ms/op
# Warmup Iteration   4: 23454.548 ms/op
# Warmup Iteration   5: 23655.875 ms/op
Iteration   1: 24293.409 ms/op
                 executeQuery·p0.00:   24293.409 ms/op
                 executeQuery·p0.50:   24293.409 ms/op
                 executeQuery·p0.90:   24293.409 ms/op
                 executeQuery·p0.95:   24293.409 ms/op
                 executeQuery·p0.99:   24293.409 ms/op
                 executeQuery·p0.999:  24293.409 ms/op
                 executeQuery·p0.9999: 24293.409 ms/op
                 executeQuery·p1.00:   24293.409 ms/op

Iteration   2: 24226.300 ms/op
                 executeQuery·p0.00:   24226.300 ms/op
                 executeQuery·p0.50:   24226.300 ms/op
                 executeQuery·p0.90:   24226.300 ms/op
                 executeQuery·p0.95:   24226.300 ms/op
                 executeQuery·p0.99:   24226.300 ms/op
                 executeQuery·p0.999:  24226.300 ms/op
                 executeQuery·p0.9999: 24226.300 ms/op
                 executeQuery·p1.00:   24226.300 ms/op

Iteration   3: 22447.915 ms/op
                 executeQuery·p0.00:   22447.915 ms/op
                 executeQuery·p0.50:   22447.915 ms/op
                 executeQuery·p0.90:   22447.915 ms/op
                 executeQuery·p0.95:   22447.915 ms/op
                 executeQuery·p0.99:   22447.915 ms/op
                 executeQuery·p0.999:  22447.915 ms/op
                 executeQuery·p0.9999: 22447.915 ms/op
                 executeQuery·p1.00:   22447.915 ms/op

Iteration   4: 23588.766 ms/op
                 executeQuery·p0.00:   23588.766 ms/op
                 executeQuery·p0.50:   23588.766 ms/op
                 executeQuery·p0.90:   23588.766 ms/op
                 executeQuery·p0.95:   23588.766 ms/op
                 executeQuery·p0.99:   23588.766 ms/op
                 executeQuery·p0.999:  23588.766 ms/op
                 executeQuery·p0.9999: 23588.766 ms/op
                 executeQuery·p1.00:   23588.766 ms/op

Iteration   5: 22515.024 ms/op
                 executeQuery·p0.00:   22515.024 ms/op
                 executeQuery·p0.50:   22515.024 ms/op
                 executeQuery·p0.90:   22515.024 ms/op
                 executeQuery·p0.95:   22515.024 ms/op
                 executeQuery·p0.99:   22515.024 ms/op
                 executeQuery·p0.999:  22515.024 ms/op
                 executeQuery·p0.9999: 22515.024 ms/op
                 executeQuery·p1.00:   22515.024 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  21692.940 ±(99.9%) 3004.174 ms/op

  Histogram, ms/op:
    [19000.000, 19500.000) = 3 
    [19500.000, 20000.000) = 0 
    [20000.000, 20500.000) = 0 
    [20500.000, 21000.000) = 2 
    [21000.000, 21500.000) = 0 
    [21500.000, 22000.000) = 0 
    [22000.000, 22500.000) = 1 
    [22500.000, 23000.000) = 1 
    [23000.000, 23500.000) = 0 
    [23500.000, 24000.000) = 1 
    [24000.000, 24500.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  19327.353 ms/op
     p(50.0000) =  21659.386 ms/op
     p(90.0000) =  24286.698 ms/op
     p(95.0000) =  24293.409 ms/op
     p(99.0000) =  24293.409 ms/op
     p(99.9000) =  24293.409 ms/op
     p(99.9900) =  24293.409 ms/op
     p(99.9990) =  24293.409 ms/op
     p(99.9999) =  24293.409 ms/op
    p(100.0000) =  24293.409 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 64.29% complete, ETA 03:21:01
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1305.739 ±(99.9%) 319.053 ms/op
# Warmup Iteration   2: 1225.436 ±(99.9%) 26.839 ms/op
# Warmup Iteration   3: 1234.174 ±(99.9%) 4.287 ms/op
# Warmup Iteration   4: 1235.223 ±(99.9%) 6.062 ms/op
# Warmup Iteration   5: 1245.446 ±(99.9%) 61.912 ms/op
Iteration   1: 1233.650 ±(99.9%) 5.967 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1234.174 ms/op
                 executeQuery·p0.90:   1237.320 ms/op
                 executeQuery·p0.95:   1237.320 ms/op
                 executeQuery·p0.99:   1237.320 ms/op
                 executeQuery·p0.999:  1237.320 ms/op
                 executeQuery·p0.9999: 1237.320 ms/op
                 executeQuery·p1.00:   1237.320 ms/op

Iteration   2: 1233.125 ±(99.9%) 5.671 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1233.125 ms/op
                 executeQuery·p0.90:   1237.320 ms/op
                 executeQuery·p0.95:   1237.320 ms/op
                 executeQuery·p0.99:   1237.320 ms/op
                 executeQuery·p0.999:  1237.320 ms/op
                 executeQuery·p0.9999: 1237.320 ms/op
                 executeQuery·p1.00:   1237.320 ms/op

Iteration   3: 1233.912 ±(99.9%) 6.756 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1235.223 ms/op
                 executeQuery·p0.90:   1239.417 ms/op
                 executeQuery·p0.95:   1239.417 ms/op
                 executeQuery·p0.99:   1239.417 ms/op
                 executeQuery·p0.999:  1239.417 ms/op
                 executeQuery·p0.9999: 1239.417 ms/op
                 executeQuery·p1.00:   1239.417 ms/op

Iteration   4: 1234.960 ±(99.9%) 7.248 ms/op
                 executeQuery·p0.00:   1228.931 ms/op
                 executeQuery·p0.50:   1235.223 ms/op
                 executeQuery·p0.90:   1239.417 ms/op
                 executeQuery·p0.95:   1239.417 ms/op
                 executeQuery·p0.99:   1239.417 ms/op
                 executeQuery·p0.999:  1239.417 ms/op
                 executeQuery·p0.9999: 1239.417 ms/op
                 executeQuery·p1.00:   1239.417 ms/op

Iteration   5: 1236.795 ±(99.9%) 4.150 ms/op
                 executeQuery·p0.00:   1235.223 ms/op
                 executeQuery·p0.50:   1236.271 ms/op
                 executeQuery·p0.90:   1241.514 ms/op
                 executeQuery·p0.95:   1241.514 ms/op
                 executeQuery·p0.99:   1241.514 ms/op
                 executeQuery·p0.999:  1241.514 ms/op
                 executeQuery·p0.9999: 1241.514 ms/op
                 executeQuery·p1.00:   1241.514 ms/op


# Run progress: 64.88% complete, ETA 03:16:47
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1309.147 ±(99.9%) 248.692 ms/op
# Warmup Iteration   2: 1251.213 ±(99.9%) 32.287 ms/op
# Warmup Iteration   3: 1259.864 ±(99.9%) 7.347 ms/op
# Warmup Iteration   4: 1313.341 ±(99.9%) 24.319 ms/op
# Warmup Iteration   5: 1267.466 ±(99.9%) 116.191 ms/op
Iteration   1: 1253.310 ±(99.9%) 9.327 ms/op
                 executeQuery·p0.00:   1243.611 ms/op
                 executeQuery·p0.50:   1254.097 ms/op
                 executeQuery·p0.90:   1258.291 ms/op
                 executeQuery·p0.95:   1258.291 ms/op
                 executeQuery·p0.99:   1258.291 ms/op
                 executeQuery·p0.999:  1258.291 ms/op
                 executeQuery·p0.9999: 1258.291 ms/op
                 executeQuery·p1.00:   1258.291 ms/op

Iteration   2: 1275.331 ±(99.9%) 4.998 ms/op
                 executeQuery·p0.00:   1272.971 ms/op
                 executeQuery·p0.50:   1275.068 ms/op
                 executeQuery·p0.90:   1279.263 ms/op
                 executeQuery·p0.95:   1279.263 ms/op
                 executeQuery·p0.99:   1279.263 ms/op
                 executeQuery·p0.999:  1279.263 ms/op
                 executeQuery·p0.9999: 1279.263 ms/op
                 executeQuery·p1.00:   1279.263 ms/op

Iteration   3: 1287.127 ±(99.9%) 11.492 ms/op
                 executeQuery·p0.00:   1275.068 ms/op
                 executeQuery·p0.50:   1288.700 ms/op
                 executeQuery·p0.90:   1291.846 ms/op
                 executeQuery·p0.95:   1291.846 ms/op
                 executeQuery·p0.99:   1291.846 ms/op
                 executeQuery·p0.999:  1291.846 ms/op
                 executeQuery·p0.9999: 1291.846 ms/op
                 executeQuery·p1.00:   1291.846 ms/op

Iteration   4: 1252.786 ±(99.9%) 10.265 ms/op
                 executeQuery·p0.00:   1245.708 ms/op
                 executeQuery·p0.50:   1252.000 ms/op
                 executeQuery·p0.90:   1264.583 ms/op
                 executeQuery·p0.95:   1264.583 ms/op
                 executeQuery·p0.99:   1264.583 ms/op
                 executeQuery·p0.999:  1264.583 ms/op
                 executeQuery·p0.9999: 1264.583 ms/op
                 executeQuery·p1.00:   1264.583 ms/op

Iteration   5: 1283.457 ±(99.9%) 14.217 ms/op
                 executeQuery·p0.00:   1268.777 ms/op
                 executeQuery·p0.50:   1284.506 ms/op
                 executeQuery·p0.90:   1293.943 ms/op
                 executeQuery·p0.95:   1293.943 ms/op
                 executeQuery·p0.99:   1293.943 ms/op
                 executeQuery·p0.999:  1293.943 ms/op
                 executeQuery·p0.9999: 1293.943 ms/op
                 executeQuery·p1.00:   1293.943 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 80
  mean =   1252.445 ±(99.9%) 8.145 ms/op

  Histogram, ms/op:
    [1220.000, 1225.000) = 0 
    [1225.000, 1230.000) = 5 
    [1230.000, 1235.000) = 11 
    [1235.000, 1240.000) = 23 
    [1240.000, 1245.000) = 2 
    [1245.000, 1250.000) = 3 
    [1250.000, 1255.000) = 8 
    [1255.000, 1260.000) = 3 
    [1260.000, 1265.000) = 1 
    [1265.000, 1270.000) = 1 
    [1270.000, 1275.000) = 3 
    [1275.000, 1280.000) = 7 
    [1280.000, 1285.000) = 3 
    [1285.000, 1290.000) = 5 
    [1290.000, 1295.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =   1228.931 ms/op
     p(50.0000) =   1242.563 ms/op
     p(90.0000) =   1285.554 ms/op
     p(95.0000) =   1291.846 ms/op
     p(99.0000) =   1293.943 ms/op
     p(99.9000) =   1293.943 ms/op
     p(99.9900) =   1293.943 ms/op
     p(99.9990) =   1293.943 ms/op
     p(99.9999) =   1293.943 ms/op
    p(100.0000) =   1293.943 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 65.48% complete, ETA 03:12:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 19797.115 ms/op
# Warmup Iteration   2: 20568.867 ms/op
# Warmup Iteration   3: 16626.221 ms/op
# Warmup Iteration   4: 20535.312 ms/op
# Warmup Iteration   5: 15971.910 ms/op
Iteration   1: 16005.464 ms/op
                 executeQuery·p0.00:   16005.464 ms/op
                 executeQuery·p0.50:   16005.464 ms/op
                 executeQuery·p0.90:   16005.464 ms/op
                 executeQuery·p0.95:   16005.464 ms/op
                 executeQuery·p0.99:   16005.464 ms/op
                 executeQuery·p0.999:  16005.464 ms/op
                 executeQuery·p0.9999: 16005.464 ms/op
                 executeQuery·p1.00:   16005.464 ms/op

Iteration   2: 15971.910 ms/op
                 executeQuery·p0.00:   15971.910 ms/op
                 executeQuery·p0.50:   15971.910 ms/op
                 executeQuery·p0.90:   15971.910 ms/op
                 executeQuery·p0.95:   15971.910 ms/op
                 executeQuery·p0.99:   15971.910 ms/op
                 executeQuery·p0.999:  15971.910 ms/op
                 executeQuery·p0.9999: 15971.910 ms/op
                 executeQuery·p1.00:   15971.910 ms/op

Iteration   3: 16005.464 ms/op
                 executeQuery·p0.00:   16005.464 ms/op
                 executeQuery·p0.50:   16005.464 ms/op
                 executeQuery·p0.90:   16005.464 ms/op
                 executeQuery·p0.95:   16005.464 ms/op
                 executeQuery·p0.99:   16005.464 ms/op
                 executeQuery·p0.999:  16005.464 ms/op
                 executeQuery·p0.9999: 16005.464 ms/op
                 executeQuery·p1.00:   16005.464 ms/op

Iteration   4: 15988.687 ms/op
                 executeQuery·p0.00:   15988.687 ms/op
                 executeQuery·p0.50:   15988.687 ms/op
                 executeQuery·p0.90:   15988.687 ms/op
                 executeQuery·p0.95:   15988.687 ms/op
                 executeQuery·p0.99:   15988.687 ms/op
                 executeQuery·p0.999:  15988.687 ms/op
                 executeQuery·p0.9999: 15988.687 ms/op
                 executeQuery·p1.00:   15988.687 ms/op

Iteration   5: 15988.687 ms/op
                 executeQuery·p0.00:   15988.687 ms/op
                 executeQuery·p0.50:   15988.687 ms/op
                 executeQuery·p0.90:   15988.687 ms/op
                 executeQuery·p0.95:   15988.687 ms/op
                 executeQuery·p0.99:   15988.687 ms/op
                 executeQuery·p0.999:  15988.687 ms/op
                 executeQuery·p0.9999: 15988.687 ms/op
                 executeQuery·p1.00:   15988.687 ms/op


# Run progress: 66.07% complete, ETA 03:09:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 18790.482 ms/op
# Warmup Iteration   2: 19528.679 ms/op
# Warmup Iteration   3: 15854.469 ms/op
# Warmup Iteration   4: 19595.788 ms/op
# Warmup Iteration   5: 15200.158 ms/op
Iteration   1: 15300.821 ms/op
                 executeQuery·p0.00:   15300.821 ms/op
                 executeQuery·p0.50:   15300.821 ms/op
                 executeQuery·p0.90:   15300.821 ms/op
                 executeQuery·p0.95:   15300.821 ms/op
                 executeQuery·p0.99:   15300.821 ms/op
                 executeQuery·p0.999:  15300.821 ms/op
                 executeQuery·p0.9999: 15300.821 ms/op
                 executeQuery·p1.00:   15300.821 ms/op

Iteration   2: 15250.489 ms/op
                 executeQuery·p0.00:   15250.489 ms/op
                 executeQuery·p0.50:   15250.489 ms/op
                 executeQuery·p0.90:   15250.489 ms/op
                 executeQuery·p0.95:   15250.489 ms/op
                 executeQuery·p0.99:   15250.489 ms/op
                 executeQuery·p0.999:  15250.489 ms/op
                 executeQuery·p0.9999: 15250.489 ms/op
                 executeQuery·p1.00:   15250.489 ms/op

Iteration   3: 15284.044 ms/op
                 executeQuery·p0.00:   15284.044 ms/op
                 executeQuery·p0.50:   15284.044 ms/op
                 executeQuery·p0.90:   15284.044 ms/op
                 executeQuery·p0.95:   15284.044 ms/op
                 executeQuery·p0.99:   15284.044 ms/op
                 executeQuery·p0.999:  15284.044 ms/op
                 executeQuery·p0.9999: 15284.044 ms/op
                 executeQuery·p1.00:   15284.044 ms/op

Iteration   4: 15267.267 ms/op
                 executeQuery·p0.00:   15267.267 ms/op
                 executeQuery·p0.50:   15267.267 ms/op
                 executeQuery·p0.90:   15267.267 ms/op
                 executeQuery·p0.95:   15267.267 ms/op
                 executeQuery·p0.99:   15267.267 ms/op
                 executeQuery·p0.999:  15267.267 ms/op
                 executeQuery·p0.9999: 15267.267 ms/op
                 executeQuery·p1.00:   15267.267 ms/op

Iteration   5: 15334.375 ms/op
                 executeQuery·p0.00:   15334.375 ms/op
                 executeQuery·p0.50:   15334.375 ms/op
                 executeQuery·p0.90:   15334.375 ms/op
                 executeQuery·p0.95:   15334.375 ms/op
                 executeQuery·p0.99:   15334.375 ms/op
                 executeQuery·p0.999:  15334.375 ms/op
                 executeQuery·p0.9999: 15334.375 ms/op
                 executeQuery·p1.00:   15334.375 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 10
  mean =  15639.721 ±(99.9%) 562.592 ms/op

  Histogram, ms/op:
    [15200.000, 15250.000) = 0 
    [15250.000, 15300.000) = 3 
    [15300.000, 15350.000) = 2 
    [15350.000, 15400.000) = 0 
    [15400.000, 15450.000) = 0 
    [15450.000, 15500.000) = 0 
    [15500.000, 15550.000) = 0 
    [15550.000, 15600.000) = 0 
    [15600.000, 15650.000) = 0 
    [15650.000, 15700.000) = 0 
    [15700.000, 15750.000) = 0 
    [15750.000, 15800.000) = 0 
    [15800.000, 15850.000) = 0 
    [15850.000, 15900.000) = 0 
    [15900.000, 15950.000) = 0 
    [15950.000, 16000.000) = 3 
    [16000.000, 16050.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  15250.489 ms/op
     p(50.0000) =  15653.143 ms/op
     p(90.0000) =  16005.464 ms/op
     p(95.0000) =  16005.464 ms/op
     p(99.0000) =  16005.464 ms/op
     p(99.9000) =  16005.464 ms/op
     p(99.9900) =  16005.464 ms/op
     p(99.9990) =  16005.464 ms/op
     p(99.9999) =  16005.464 ms/op
    p(100.0000) =  16005.464 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 66.67% complete, ETA 03:05:40
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1869.961 ±(99.9%) 58.058 ms/op
# Warmup Iteration   2: 1886.738 ±(99.9%) 66.810 ms/op
# Warmup Iteration   3: 1902.466 ±(99.9%) 13.624 ms/op
# Warmup Iteration   4: 1898.622 ±(99.9%) 17.313 ms/op
# Warmup Iteration   5: 1909.457 ±(99.9%) 65.565 ms/op
Iteration   1: 1900.020 ±(99.9%) 21.040 ms/op
                 executeQuery·p0.00:   1893.728 ms/op
                 executeQuery·p0.50:   1896.874 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   2: 1852.484 ±(99.9%) 8.035 ms/op
                 executeQuery·p0.00:   1849.688 ms/op
                 executeQuery·p0.50:   1851.785 ms/op
                 executeQuery·p0.90:   1855.980 ms/op
                 executeQuery·p0.95:   1855.980 ms/op
                 executeQuery·p0.99:   1855.980 ms/op
                 executeQuery·p0.999:  1855.980 ms/op
                 executeQuery·p0.9999: 1855.980 ms/op
                 executeQuery·p1.00:   1855.980 ms/op

Iteration   3: 1871.708 ±(99.9%) 62.762 ms/op
                 executeQuery·p0.00:   1847.591 ms/op
                 executeQuery·p0.50:   1867.514 ms/op
                 executeQuery·p0.90:   1900.020 ms/op
                 executeQuery·p0.95:   1900.020 ms/op
                 executeQuery·p0.99:   1900.020 ms/op
                 executeQuery·p0.999:  1900.020 ms/op
                 executeQuery·p0.9999: 1900.020 ms/op
                 executeQuery·p1.00:   1900.020 ms/op

Iteration   4: 1893.728 ±(99.9%) 11.158 ms/op
                 executeQuery·p0.00:   1889.534 ms/op
                 executeQuery·p0.50:   1893.728 ms/op
                 executeQuery·p0.90:   1900.020 ms/op
                 executeQuery·p0.95:   1900.020 ms/op
                 executeQuery·p0.99:   1900.020 ms/op
                 executeQuery·p0.999:  1900.020 ms/op
                 executeQuery·p0.9999: 1900.020 ms/op
                 executeQuery·p1.00:   1900.020 ms/op

Iteration   5: 1892.330 ±(99.9%) 10.949 ms/op
                 executeQuery·p0.00:   1887.437 ms/op
                 executeQuery·p0.50:   1892.680 ms/op
                 executeQuery·p0.90:   1895.825 ms/op
                 executeQuery·p0.95:   1895.825 ms/op
                 executeQuery·p0.99:   1895.825 ms/op
                 executeQuery·p0.999:  1895.825 ms/op
                 executeQuery·p0.9999: 1895.825 ms/op
                 executeQuery·p1.00:   1895.825 ms/op


# Run progress: 67.26% complete, ETA 03:01:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1876.602 ±(99.9%) 143.926 ms/op
# Warmup Iteration   2: 1951.400 ±(99.9%) 68.050 ms/op
# Warmup Iteration   3: 1985.584 ±(99.9%) 45.467 ms/op
# Warmup Iteration   4: 1983.067 ±(99.9%) 38.980 ms/op
# Warmup Iteration   5: 1964.332 ±(99.9%) 109.747 ms/op
Iteration   1: 1917.146 ±(99.9%) 24.788 ms/op
                 executeQuery·p0.00:   1906.311 ms/op
                 executeQuery·p0.50:   1914.700 ms/op
                 executeQuery·p0.90:   1931.477 ms/op
                 executeQuery·p0.95:   1931.477 ms/op
                 executeQuery·p0.99:   1931.477 ms/op
                 executeQuery·p0.999:  1931.477 ms/op
                 executeQuery·p0.9999: 1931.477 ms/op
                 executeQuery·p1.00:   1931.477 ms/op

Iteration   2: 1934.273 ±(99.9%) 47.437 ms/op
                 executeQuery·p0.00:   1910.505 ms/op
                 executeQuery·p0.50:   1935.671 ms/op
                 executeQuery·p0.90:   1950.351 ms/op
                 executeQuery·p0.95:   1950.351 ms/op
                 executeQuery·p0.99:   1950.351 ms/op
                 executeQuery·p0.999:  1950.351 ms/op
                 executeQuery·p0.9999: 1950.351 ms/op
                 executeQuery·p1.00:   1950.351 ms/op

Iteration   3: 1903.864 ±(99.9%) 13.624 ms/op
                 executeQuery·p0.00:   1897.923 ms/op
                 executeQuery·p0.50:   1903.165 ms/op
                 executeQuery·p0.90:   1910.505 ms/op
                 executeQuery·p0.95:   1910.505 ms/op
                 executeQuery·p0.99:   1910.505 ms/op
                 executeQuery·p0.999:  1910.505 ms/op
                 executeQuery·p0.9999: 1910.505 ms/op
                 executeQuery·p1.00:   1910.505 ms/op

Iteration   4: 1909.107 ±(99.9%) 14.722 ms/op
                 executeQuery·p0.00:   1904.214 ms/op
                 executeQuery·p0.50:   1907.360 ms/op
                 executeQuery·p0.90:   1918.894 ms/op
                 executeQuery·p0.95:   1918.894 ms/op
                 executeQuery·p0.99:   1918.894 ms/op
                 executeQuery·p0.999:  1918.894 ms/op
                 executeQuery·p0.9999: 1918.894 ms/op
                 executeQuery·p1.00:   1918.894 ms/op

Iteration   5: 1913.302 ±(99.9%) 42.678 ms/op
                 executeQuery·p0.00:   1902.117 ms/op
                 executeQuery·p0.50:   1909.457 ms/op
                 executeQuery·p0.90:   1941.963 ms/op
                 executeQuery·p0.95:   1941.963 ms/op
                 executeQuery·p0.99:   1941.963 ms/op
                 executeQuery·p0.999:  1941.963 ms/op
                 executeQuery·p0.9999: 1941.963 ms/op
                 executeQuery·p1.00:   1941.963 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 60
  mean =   1898.796 ±(99.9%) 10.972 ms/op

  Histogram, ms/op:
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 0 
    [1837.500, 1850.000) = 3 
    [1850.000, 1862.500) = 6 
    [1862.500, 1875.000) = 1 
    [1875.000, 1887.500) = 1 
    [1887.500, 1900.000) = 16 
    [1900.000, 1912.500) = 19 
    [1912.500, 1925.000) = 8 
    [1925.000, 1937.500) = 2 
    [1937.500, 1950.000) = 2 
    [1950.000, 1962.500) = 2 
    [1962.500, 1975.000) = 0 
    [1975.000, 1987.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1847.591 ms/op
     p(50.0000) =   1901.068 ms/op
     p(90.0000) =   1924.976 ms/op
     p(95.0000) =   1945.947 ms/op
     p(99.0000) =   1950.351 ms/op
     p(99.9000) =   1950.351 ms/op
     p(99.9900) =   1950.351 ms/op
     p(99.9990) =   1950.351 ms/op
     p(99.9999) =   1950.351 ms/op
    p(100.0000) =   1950.351 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 67.86% complete, ETA 02:57:44
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 20266.877 ms/op
# Warmup Iteration   2: 22246.588 ms/op
# Warmup Iteration   3: 20904.411 ms/op
# Warmup Iteration   4: 20803.748 ms/op
# Warmup Iteration   5: 20803.748 ms/op
Iteration   1: 21541.945 ms/op
                 executeQuery·p0.00:   21541.945 ms/op
                 executeQuery·p0.50:   21541.945 ms/op
                 executeQuery·p0.90:   21541.945 ms/op
                 executeQuery·p0.95:   21541.945 ms/op
                 executeQuery·p0.99:   21541.945 ms/op
                 executeQuery·p0.999:  21541.945 ms/op
                 executeQuery·p0.9999: 21541.945 ms/op
                 executeQuery·p1.00:   21541.945 ms/op

Iteration   2: 21575.500 ms/op
                 executeQuery·p0.00:   21575.500 ms/op
                 executeQuery·p0.50:   21575.500 ms/op
                 executeQuery·p0.90:   21575.500 ms/op
                 executeQuery·p0.95:   21575.500 ms/op
                 executeQuery·p0.99:   21575.500 ms/op
                 executeQuery·p0.999:  21575.500 ms/op
                 executeQuery·p0.9999: 21575.500 ms/op
                 executeQuery·p1.00:   21575.500 ms/op

Iteration   3: 21575.500 ms/op
                 executeQuery·p0.00:   21575.500 ms/op
                 executeQuery·p0.50:   21575.500 ms/op
                 executeQuery·p0.90:   21575.500 ms/op
                 executeQuery·p0.95:   21575.500 ms/op
                 executeQuery·p0.99:   21575.500 ms/op
                 executeQuery·p0.999:  21575.500 ms/op
                 executeQuery·p0.9999: 21575.500 ms/op
                 executeQuery·p1.00:   21575.500 ms/op

Iteration   4: 21575.500 ms/op
                 executeQuery·p0.00:   21575.500 ms/op
                 executeQuery·p0.50:   21575.500 ms/op
                 executeQuery·p0.90:   21575.500 ms/op
                 executeQuery·p0.95:   21575.500 ms/op
                 executeQuery·p0.99:   21575.500 ms/op
                 executeQuery·p0.999:  21575.500 ms/op
                 executeQuery·p0.9999: 21575.500 ms/op
                 executeQuery·p1.00:   21575.500 ms/op

Iteration   5: 21508.391 ms/op
                 executeQuery·p0.00:   21508.391 ms/op
                 executeQuery·p0.50:   21508.391 ms/op
                 executeQuery·p0.90:   21508.391 ms/op
                 executeQuery·p0.95:   21508.391 ms/op
                 executeQuery·p0.99:   21508.391 ms/op
                 executeQuery·p0.999:  21508.391 ms/op
                 executeQuery·p0.9999: 21508.391 ms/op
                 executeQuery·p1.00:   21508.391 ms/op


# Run progress: 68.45% complete, ETA 02:54:42
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 20065.550 ms/op
# Warmup Iteration   2: 22145.925 ms/op
# Warmup Iteration   3: 21239.955 ms/op
# Warmup Iteration   4: 21206.401 ms/op
# Warmup Iteration   5: 21239.955 ms/op
Iteration   1: 21239.955 ms/op
                 executeQuery·p0.00:   21239.955 ms/op
                 executeQuery·p0.50:   21239.955 ms/op
                 executeQuery·p0.90:   21239.955 ms/op
                 executeQuery·p0.95:   21239.955 ms/op
                 executeQuery·p0.99:   21239.955 ms/op
                 executeQuery·p0.999:  21239.955 ms/op
                 executeQuery·p0.9999: 21239.955 ms/op
                 executeQuery·p1.00:   21239.955 ms/op

Iteration   2: 21239.955 ms/op
                 executeQuery·p0.00:   21239.955 ms/op
                 executeQuery·p0.50:   21239.955 ms/op
                 executeQuery·p0.90:   21239.955 ms/op
                 executeQuery·p0.95:   21239.955 ms/op
                 executeQuery·p0.99:   21239.955 ms/op
                 executeQuery·p0.999:  21239.955 ms/op
                 executeQuery·p0.9999: 21239.955 ms/op
                 executeQuery·p1.00:   21239.955 ms/op

Iteration   3: 21239.955 ms/op
                 executeQuery·p0.00:   21239.955 ms/op
                 executeQuery·p0.50:   21239.955 ms/op
                 executeQuery·p0.90:   21239.955 ms/op
                 executeQuery·p0.95:   21239.955 ms/op
                 executeQuery·p0.99:   21239.955 ms/op
                 executeQuery·p0.999:  21239.955 ms/op
                 executeQuery·p0.9999: 21239.955 ms/op
                 executeQuery·p1.00:   21239.955 ms/op

Iteration   4: 21239.955 ms/op
                 executeQuery·p0.00:   21239.955 ms/op
                 executeQuery·p0.50:   21239.955 ms/op
                 executeQuery·p0.90:   21239.955 ms/op
                 executeQuery·p0.95:   21239.955 ms/op
                 executeQuery·p0.99:   21239.955 ms/op
                 executeQuery·p0.999:  21239.955 ms/op
                 executeQuery·p0.9999: 21239.955 ms/op
                 executeQuery·p1.00:   21239.955 ms/op

Iteration   5: 21273.510 ms/op
                 executeQuery·p0.00:   21273.510 ms/op
                 executeQuery·p0.50:   21273.510 ms/op
                 executeQuery·p0.90:   21273.510 ms/op
                 executeQuery·p0.95:   21273.510 ms/op
                 executeQuery·p0.99:   21273.510 ms/op
                 executeQuery·p0.999:  21273.510 ms/op
                 executeQuery·p0.9999: 21273.510 ms/op
                 executeQuery·p1.00:   21273.510 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  21401.017 ±(99.9%) 248.293 ms/op

  Histogram, ms/op:
    [21200.000, 21225.000) = 0 
    [21225.000, 21250.000) = 4 
    [21250.000, 21275.000) = 1 
    [21275.000, 21300.000) = 0 
    [21300.000, 21325.000) = 0 
    [21325.000, 21350.000) = 0 
    [21350.000, 21375.000) = 0 
    [21375.000, 21400.000) = 0 
    [21400.000, 21425.000) = 0 
    [21425.000, 21450.000) = 0 
    [21450.000, 21475.000) = 0 
    [21475.000, 21500.000) = 0 
    [21500.000, 21525.000) = 1 
    [21525.000, 21550.000) = 1 
    [21550.000, 21575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  21239.955 ms/op
     p(50.0000) =  21390.950 ms/op
     p(90.0000) =  21575.500 ms/op
     p(95.0000) =  21575.500 ms/op
     p(99.0000) =  21575.500 ms/op
     p(99.9000) =  21575.500 ms/op
     p(99.9900) =  21575.500 ms/op
     p(99.9990) =  21575.500 ms/op
     p(99.9999) =  21575.500 ms/op
    p(100.0000) =  21575.500 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 69.05% complete, ETA 02:51:40
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1016.385 ±(99.9%) 87.244 ms/op
# Warmup Iteration   2: 1009.674 ±(99.9%) 49.172 ms/op
# Warmup Iteration   3: 1005.794 ±(99.9%) 3.063 ms/op
# Warmup Iteration   4: 1006.423 ±(99.9%) 5.731 ms/op
# Warmup Iteration   5: 1003.382 ±(99.9%) 4.811 ms/op
Iteration   1: 1001.390 ±(99.9%) 2.242 ms/op
                 executeQuery·p0.00:   998.244 ms/op
                 executeQuery·p0.50:   1001.390 ms/op
                 executeQuery·p0.90:   1003.382 ms/op
                 executeQuery·p0.95:   1003.487 ms/op
                 executeQuery·p0.99:   1003.487 ms/op
                 executeQuery·p0.999:  1003.487 ms/op
                 executeQuery·p0.9999: 1003.487 ms/op
                 executeQuery·p1.00:   1003.487 ms/op

Iteration   2: 1005.794 ±(99.9%) 11.573 ms/op
                 executeQuery·p0.00:   998.244 ms/op
                 executeQuery·p0.50:   1004.012 ms/op
                 executeQuery·p0.90:   1023.830 ms/op
                 executeQuery·p0.95:   1025.507 ms/op
                 executeQuery·p0.99:   1025.507 ms/op
                 executeQuery·p0.999:  1025.507 ms/op
                 executeQuery·p0.9999: 1025.507 ms/op
                 executeQuery·p1.00:   1025.507 ms/op

Iteration   3: 1016.804 ±(99.9%) 9.972 ms/op
                 executeQuery·p0.00:   1005.584 ms/op
                 executeQuery·p0.50:   1017.643 ms/op
                 executeQuery·p0.90:   1026.136 ms/op
                 executeQuery·p0.95:   1026.556 ms/op
                 executeQuery·p0.99:   1026.556 ms/op
                 executeQuery·p0.999:  1026.556 ms/op
                 executeQuery·p0.9999: 1026.556 ms/op
                 executeQuery·p1.00:   1026.556 ms/op

Iteration   4: 1019.530 ±(99.9%) 5.694 ms/op
                 executeQuery·p0.00:   1013.973 ms/op
                 executeQuery·p0.50:   1020.264 ms/op
                 executeQuery·p0.90:   1025.402 ms/op
                 executeQuery·p0.95:   1025.507 ms/op
                 executeQuery·p0.99:   1025.507 ms/op
                 executeQuery·p0.999:  1025.507 ms/op
                 executeQuery·p0.9999: 1025.507 ms/op
                 executeQuery·p1.00:   1025.507 ms/op

Iteration   5: 1017.643 ±(99.9%) 5.402 ms/op
                 executeQuery·p0.00:   1011.876 ms/op
                 executeQuery·p0.50:   1017.643 ms/op
                 executeQuery·p0.90:   1022.362 ms/op
                 executeQuery·p0.95:   1022.362 ms/op
                 executeQuery·p0.99:   1022.362 ms/op
                 executeQuery·p0.999:  1022.362 ms/op
                 executeQuery·p0.9999: 1022.362 ms/op
                 executeQuery·p1.00:   1022.362 ms/op


# Run progress: 69.64% complete, ETA 02:47:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1134.676 ±(99.9%) 78.161 ms/op
# Warmup Iteration   2: 1084.962 ±(99.9%) 44.035 ms/op
# Warmup Iteration   3: 1124.540 ±(99.9%) 46.512 ms/op
# Warmup Iteration   4: 1143.647 ±(99.9%) 7.265 ms/op
# Warmup Iteration   5: 1142.715 ±(99.9%) 4.111 ms/op
Iteration   1: 1143.880 ±(99.9%) 2.560 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1145.045 ms/op
                 executeQuery·p0.90:   1145.045 ms/op
                 executeQuery·p0.95:   1145.045 ms/op
                 executeQuery·p0.99:   1145.045 ms/op
                 executeQuery·p0.999:  1145.045 ms/op
                 executeQuery·p0.9999: 1145.045 ms/op
                 executeQuery·p1.00:   1145.045 ms/op

Iteration   2: 1147.375 ±(99.9%) 14.998 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1145.045 ms/op
                 executeQuery·p0.90:   1170.211 ms/op
                 executeQuery·p0.95:   1170.211 ms/op
                 executeQuery·p0.99:   1170.211 ms/op
                 executeQuery·p0.999:  1170.211 ms/op
                 executeQuery·p0.9999: 1170.211 ms/op
                 executeQuery·p1.00:   1170.211 ms/op

Iteration   3: 1142.249 ±(99.9%) 6.593 ms/op
                 executeQuery·p0.00:   1134.559 ms/op
                 executeQuery·p0.50:   1142.948 ms/op
                 executeQuery·p0.90:   1145.045 ms/op
                 executeQuery·p0.95:   1145.045 ms/op
                 executeQuery·p0.99:   1145.045 ms/op
                 executeQuery·p0.999:  1145.045 ms/op
                 executeQuery·p0.9999: 1145.045 ms/op
                 executeQuery·p1.00:   1145.045 ms/op

Iteration   4: 1144.579 ±(99.9%) 2.937 ms/op
                 executeQuery·p0.00:   1142.948 ms/op
                 executeQuery·p0.50:   1145.045 ms/op
                 executeQuery·p0.90:   1147.142 ms/op
                 executeQuery·p0.95:   1147.142 ms/op
                 executeQuery·p0.99:   1147.142 ms/op
                 executeQuery·p0.999:  1147.142 ms/op
                 executeQuery·p0.9999: 1147.142 ms/op
                 executeQuery·p1.00:   1147.142 ms/op

Iteration   5: 1144.113 ±(99.9%) 4.699 ms/op
                 executeQuery·p0.00:   1138.754 ms/op
                 executeQuery·p0.50:   1145.045 ms/op
                 executeQuery·p0.90:   1147.142 ms/op
                 executeQuery·p0.95:   1147.142 ms/op
                 executeQuery·p0.99:   1147.142 ms/op
                 executeQuery·p0.999:  1147.142 ms/op
                 executeQuery·p0.9999: 1147.142 ms/op
                 executeQuery·p1.00:   1147.142 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 95
  mean =   1074.857 ±(99.9%) 23.263 ms/op

  Histogram, ms/op:
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 2 
    [1000.000, 1025.000) = 45 
    [1025.000, 1050.000) = 3 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 44 
    [1150.000, 1175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    998.244 ms/op
     p(50.0000) =   1025.507 ms/op
     p(90.0000) =   1145.045 ms/op
     p(95.0000) =   1147.142 ms/op
     p(99.0000) =   1170.211 ms/op
     p(99.9000) =   1170.211 ms/op
     p(99.9900) =   1170.211 ms/op
     p(99.9990) =   1170.211 ms/op
     p(99.9999) =   1170.211 ms/op
    p(100.0000) =   1170.211 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 70.24% complete, ETA 02:43:46
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 15703.474 ms/op
# Warmup Iteration   2: 16039.018 ms/op
# Warmup Iteration   3: 13488.882 ms/op
# Warmup Iteration   4: 16408.117 ms/op
# Warmup Iteration   5: 13706.985 ms/op
Iteration   1: 15334.375 ms/op
                 executeQuery·p0.00:   15334.375 ms/op
                 executeQuery·p0.50:   15334.375 ms/op
                 executeQuery·p0.90:   15334.375 ms/op
                 executeQuery·p0.95:   15334.375 ms/op
                 executeQuery·p0.99:   15334.375 ms/op
                 executeQuery·p0.999:  15334.375 ms/op
                 executeQuery·p0.9999: 15334.375 ms/op
                 executeQuery·p1.00:   15334.375 ms/op

Iteration   2: 12079.596 ms/op
                 executeQuery·p0.00:   12079.596 ms/op
                 executeQuery·p0.50:   12079.596 ms/op
                 executeQuery·p0.90:   12079.596 ms/op
                 executeQuery·p0.95:   12079.596 ms/op
                 executeQuery·p0.99:   12079.596 ms/op
                 executeQuery·p0.999:  12079.596 ms/op
                 executeQuery·p0.9999: 12079.596 ms/op
                 executeQuery·p1.00:   12079.596 ms/op

Iteration   3: 12062.818 ms/op
                 executeQuery·p0.00:   12062.818 ms/op
                 executeQuery·p0.50:   12062.818 ms/op
                 executeQuery·p0.90:   12062.818 ms/op
                 executeQuery·p0.95:   12062.818 ms/op
                 executeQuery·p0.99:   12062.818 ms/op
                 executeQuery·p0.999:  12062.818 ms/op
                 executeQuery·p0.9999: 12062.818 ms/op
                 executeQuery·p1.00:   12062.818 ms/op

Iteration   4: 12062.818 ms/op
                 executeQuery·p0.00:   12062.818 ms/op
                 executeQuery·p0.50:   12062.818 ms/op
                 executeQuery·p0.90:   12062.818 ms/op
                 executeQuery·p0.95:   12062.818 ms/op
                 executeQuery·p0.99:   12062.818 ms/op
                 executeQuery·p0.999:  12062.818 ms/op
                 executeQuery·p0.9999: 12062.818 ms/op
                 executeQuery·p1.00:   12062.818 ms/op

Iteration   5: 12096.373 ms/op
                 executeQuery·p0.00:   12096.373 ms/op
                 executeQuery·p0.50:   12096.373 ms/op
                 executeQuery·p0.90:   12096.373 ms/op
                 executeQuery·p0.95:   12096.373 ms/op
                 executeQuery·p0.99:   12096.373 ms/op
                 executeQuery·p0.999:  12096.373 ms/op
                 executeQuery·p0.9999: 12096.373 ms/op
                 executeQuery·p1.00:   12096.373 ms/op


# Run progress: 70.83% complete, ETA 02:40:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 14529.069 ms/op
# Warmup Iteration   2: 15586.034 ms/op
# Warmup Iteration   3: 13337.887 ms/op
# Warmup Iteration   4: 16273.900 ms/op
# Warmup Iteration   5: 13841.203 ms/op
Iteration   1: 15200.158 ms/op
                 executeQuery·p0.00:   15200.158 ms/op
                 executeQuery·p0.50:   15200.158 ms/op
                 executeQuery·p0.90:   15200.158 ms/op
                 executeQuery·p0.95:   15200.158 ms/op
                 executeQuery·p0.99:   15200.158 ms/op
                 executeQuery·p0.999:  15200.158 ms/op
                 executeQuery·p0.9999: 15200.158 ms/op
                 executeQuery·p1.00:   15200.158 ms/op

Iteration   2: 12213.813 ms/op
                 executeQuery·p0.00:   12213.813 ms/op
                 executeQuery·p0.50:   12213.813 ms/op
                 executeQuery·p0.90:   12213.813 ms/op
                 executeQuery·p0.95:   12213.813 ms/op
                 executeQuery·p0.99:   12213.813 ms/op
                 executeQuery·p0.999:  12213.813 ms/op
                 executeQuery·p0.9999: 12213.813 ms/op
                 executeQuery·p1.00:   12213.813 ms/op

Iteration   3: 12482.249 ms/op
                 executeQuery·p0.00:   12482.249 ms/op
                 executeQuery·p0.50:   12482.249 ms/op
                 executeQuery·p0.90:   12482.249 ms/op
                 executeQuery·p0.95:   12482.249 ms/op
                 executeQuery·p0.99:   12482.249 ms/op
                 executeQuery·p0.999:  12482.249 ms/op
                 executeQuery·p0.9999: 12482.249 ms/op
                 executeQuery·p1.00:   12482.249 ms/op

Iteration   4: 12499.026 ms/op
                 executeQuery·p0.00:   12499.026 ms/op
                 executeQuery·p0.50:   12499.026 ms/op
                 executeQuery·p0.90:   12499.026 ms/op
                 executeQuery·p0.95:   12499.026 ms/op
                 executeQuery·p0.99:   12499.026 ms/op
                 executeQuery·p0.999:  12499.026 ms/op
                 executeQuery·p0.9999: 12499.026 ms/op
                 executeQuery·p1.00:   12499.026 ms/op

Iteration   5: 12499.026 ms/op
                 executeQuery·p0.00:   12499.026 ms/op
                 executeQuery·p0.50:   12499.026 ms/op
                 executeQuery·p0.90:   12499.026 ms/op
                 executeQuery·p0.95:   12499.026 ms/op
                 executeQuery·p0.99:   12499.026 ms/op
                 executeQuery·p0.999:  12499.026 ms/op
                 executeQuery·p0.9999: 12499.026 ms/op
                 executeQuery·p1.00:   12499.026 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 10
  mean =  12853.025 ±(99.9%) 1944.133 ms/op

  Histogram, ms/op:
    [12000.000, 12250.000) = 5 
    [12250.000, 12500.000) = 3 
    [12500.000, 12750.000) = 0 
    [12750.000, 13000.000) = 0 
    [13000.000, 13250.000) = 0 
    [13250.000, 13500.000) = 0 
    [13500.000, 13750.000) = 0 
    [13750.000, 14000.000) = 0 
    [14000.000, 14250.000) = 0 
    [14250.000, 14500.000) = 0 
    [14500.000, 14750.000) = 0 
    [14750.000, 15000.000) = 0 
    [15000.000, 15250.000) = 1 
    [15250.000, 15500.000) = 1 
    [15500.000, 15750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12062.818 ms/op
     p(50.0000) =  12348.031 ms/op
     p(90.0000) =  15320.954 ms/op
     p(95.0000) =  15334.375 ms/op
     p(99.0000) =  15334.375 ms/op
     p(99.9000) =  15334.375 ms/op
     p(99.9900) =  15334.375 ms/op
     p(99.9990) =  15334.375 ms/op
     p(99.9999) =  15334.375 ms/op
    p(100.0000) =  15334.375 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 71.43% complete, ETA 02:36:35
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 312.522 ±(99.9%) 216.896 ms/op
# Warmup Iteration   2: 260.081 ±(99.9%) 18.612 ms/op
# Warmup Iteration   3: 297.184 ±(99.9%) 7.742 ms/op
# Warmup Iteration   4: 252.969 ±(99.9%) 13.450 ms/op
# Warmup Iteration   5: 254.519 ±(99.9%) 9.078 ms/op
Iteration   1: 239.032 ±(99.9%) 9.744 ms/op
                 executeQuery·p0.00:   225.444 ms/op
                 executeQuery·p0.50:   234.357 ms/op
                 executeQuery·p0.90:   257.819 ms/op
                 executeQuery·p0.95:   271.319 ms/op
                 executeQuery·p0.99:   275.251 ms/op
                 executeQuery·p0.999:  275.251 ms/op
                 executeQuery·p0.9999: 275.251 ms/op
                 executeQuery·p1.00:   275.251 ms/op

Iteration   2: 239.600 ±(99.9%) 8.548 ms/op
                 executeQuery·p0.00:   227.279 ms/op
                 executeQuery·p0.50:   236.716 ms/op
                 executeQuery·p0.90:   254.804 ms/op
                 executeQuery·p0.95:   265.093 ms/op
                 executeQuery·p0.99:   268.435 ms/op
                 executeQuery·p0.999:  268.435 ms/op
                 executeQuery·p0.9999: 268.435 ms/op
                 executeQuery·p1.00:   268.435 ms/op

Iteration   3: 247.988 ±(99.9%) 5.364 ms/op
                 executeQuery·p0.00:   231.997 ms/op
                 executeQuery·p0.50:   250.216 ms/op
                 executeQuery·p0.90:   256.377 ms/op
                 executeQuery·p0.95:   258.867 ms/op
                 executeQuery·p0.99:   258.998 ms/op
                 executeQuery·p0.999:  258.998 ms/op
                 executeQuery·p0.9999: 258.998 ms/op
                 executeQuery·p1.00:   258.998 ms/op

Iteration   4: 239.632 ±(99.9%) 5.435 ms/op
                 executeQuery·p0.00:   227.017 ms/op
                 executeQuery·p0.50:   241.435 ms/op
                 executeQuery·p0.90:   247.595 ms/op
                 executeQuery·p0.95:   249.889 ms/op
                 executeQuery·p0.99:   250.610 ms/op
                 executeQuery·p0.999:  250.610 ms/op
                 executeQuery·p0.9999: 250.610 ms/op
                 executeQuery·p1.00:   250.610 ms/op

Iteration   5: 237.655 ±(99.9%) 8.448 ms/op
                 executeQuery·p0.00:   226.230 ms/op
                 executeQuery·p0.50:   232.260 ms/op
                 executeQuery·p0.90:   256.901 ms/op
                 executeQuery·p0.95:   261.685 ms/op
                 executeQuery·p0.99:   262.930 ms/op
                 executeQuery·p0.999:  262.930 ms/op
                 executeQuery·p0.9999: 262.930 ms/op
                 executeQuery·p1.00:   262.930 ms/op


# Run progress: 72.02% complete, ETA 02:32:43
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 286.917 ±(99.9%) 111.824 ms/op
# Warmup Iteration   2: 257.562 ±(99.9%) 17.029 ms/op
# Warmup Iteration   3: 297.621 ±(99.9%) 3.779 ms/op
# Warmup Iteration   4: 255.123 ±(99.9%) 12.898 ms/op
# Warmup Iteration   5: 242.385 ±(99.9%) 7.827 ms/op
Iteration   1: 250.358 ±(99.9%) 8.634 ms/op
                 executeQuery·p0.00:   236.978 ms/op
                 executeQuery·p0.50:   249.954 ms/op
                 executeQuery·p0.90:   256.770 ms/op
                 executeQuery·p0.95:   284.951 ms/op
                 executeQuery·p0.99:   294.126 ms/op
                 executeQuery·p0.999:  294.126 ms/op
                 executeQuery·p0.9999: 294.126 ms/op
                 executeQuery·p1.00:   294.126 ms/op

Iteration   2: 245.258 ±(99.9%) 6.250 ms/op
                 executeQuery·p0.00:   234.881 ms/op
                 executeQuery·p0.50:   244.187 ms/op
                 executeQuery·p0.90:   253.231 ms/op
                 executeQuery·p0.95:   269.812 ms/op
                 executeQuery·p0.99:   275.251 ms/op
                 executeQuery·p0.999:  275.251 ms/op
                 executeQuery·p0.9999: 275.251 ms/op
                 executeQuery·p1.00:   275.251 ms/op

Iteration   3: 255.841 ±(99.9%) 10.269 ms/op
                 executeQuery·p0.00:   239.075 ms/op
                 executeQuery·p0.50:   254.804 ms/op
                 executeQuery·p0.90:   278.816 ms/op
                 executeQuery·p0.95:   293.811 ms/op
                 executeQuery·p0.99:   294.650 ms/op
                 executeQuery·p0.999:  294.650 ms/op
                 executeQuery·p0.9999: 294.650 ms/op
                 executeQuery·p1.00:   294.650 ms/op

Iteration   4: 250.337 ±(99.9%) 8.111 ms/op
                 executeQuery·p0.00:   236.978 ms/op
                 executeQuery·p0.50:   250.610 ms/op
                 executeQuery·p0.90:   259.523 ms/op
                 executeQuery·p0.95:   283.116 ms/op
                 executeQuery·p0.99:   289.931 ms/op
                 executeQuery·p0.999:  289.931 ms/op
                 executeQuery·p0.9999: 289.931 ms/op
                 executeQuery·p1.00:   289.931 ms/op

Iteration   5: 242.516 ±(99.9%) 4.202 ms/op
                 executeQuery·p0.00:   233.832 ms/op
                 executeQuery·p0.50:   242.352 ms/op
                 executeQuery·p0.90:   249.168 ms/op
                 executeQuery·p0.95:   256.836 ms/op
                 executeQuery·p0.99:   258.998 ms/op
                 executeQuery·p0.999:  258.998 ms/op
                 executeQuery·p0.9999: 258.998 ms/op
                 executeQuery·p1.00:   258.998 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 239
  mean =    244.776 ±(99.9%) 2.456 ms/op

  Histogram, ms/op:
    [220.000, 225.000) = 0 
    [225.000, 230.000) = 22 
    [230.000, 235.000) = 28 
    [235.000, 240.000) = 32 
    [240.000, 245.000) = 44 
    [245.000, 250.000) = 37 
    [250.000, 255.000) = 42 
    [255.000, 260.000) = 24 
    [260.000, 265.000) = 3 
    [265.000, 270.000) = 1 
    [270.000, 275.000) = 0 
    [275.000, 280.000) = 2 
    [280.000, 285.000) = 0 
    [285.000, 290.000) = 1 
    [290.000, 295.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    225.444 ms/op
     p(50.0000) =    244.318 ms/op
     p(90.0000) =    256.115 ms/op
     p(95.0000) =    259.260 ms/op
     p(99.0000) =    292.658 ms/op
     p(99.9000) =    294.650 ms/op
     p(99.9900) =    294.650 ms/op
     p(99.9990) =    294.650 ms/op
     p(99.9999) =    294.650 ms/op
    p(100.0000) =    294.650 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 72.62% complete, ETA 02:28:53
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 10200.547 ms/op
# Warmup Iteration   2: 3544.187 ms/op
# Warmup Iteration   3: 3942.646 ms/op
# Warmup Iteration   4: 3531.604 ms/op
# Warmup Iteration   5: 3552.575 ms/op
Iteration   1: 3636.462 ms/op
                 executeQuery·p0.00:   3636.462 ms/op
                 executeQuery·p0.50:   3636.462 ms/op
                 executeQuery·p0.90:   3636.462 ms/op
                 executeQuery·p0.95:   3636.462 ms/op
                 executeQuery·p0.99:   3636.462 ms/op
                 executeQuery·p0.999:  3636.462 ms/op
                 executeQuery·p0.9999: 3636.462 ms/op
                 executeQuery·p1.00:   3636.462 ms/op

Iteration   2: 3594.519 ms/op
                 executeQuery·p0.00:   3594.519 ms/op
                 executeQuery·p0.50:   3594.519 ms/op
                 executeQuery·p0.90:   3594.519 ms/op
                 executeQuery·p0.95:   3594.519 ms/op
                 executeQuery·p0.99:   3594.519 ms/op
                 executeQuery·p0.999:  3594.519 ms/op
                 executeQuery·p0.9999: 3594.519 ms/op
                 executeQuery·p1.00:   3594.519 ms/op

Iteration   3: 3489.661 ms/op
                 executeQuery·p0.00:   3489.661 ms/op
                 executeQuery·p0.50:   3489.661 ms/op
                 executeQuery·p0.90:   3489.661 ms/op
                 executeQuery·p0.95:   3489.661 ms/op
                 executeQuery·p0.99:   3489.661 ms/op
                 executeQuery·p0.999:  3489.661 ms/op
                 executeQuery·p0.9999: 3489.661 ms/op
                 executeQuery·p1.00:   3489.661 ms/op

Iteration   4: 3594.519 ms/op
                 executeQuery·p0.00:   3594.519 ms/op
                 executeQuery·p0.50:   3594.519 ms/op
                 executeQuery·p0.90:   3594.519 ms/op
                 executeQuery·p0.95:   3594.519 ms/op
                 executeQuery·p0.99:   3594.519 ms/op
                 executeQuery·p0.999:  3594.519 ms/op
                 executeQuery·p0.9999: 3594.519 ms/op
                 executeQuery·p1.00:   3594.519 ms/op

Iteration   5: 3602.907 ms/op
                 executeQuery·p0.00:   3602.907 ms/op
                 executeQuery·p0.50:   3602.907 ms/op
                 executeQuery·p0.90:   3602.907 ms/op
                 executeQuery·p0.95:   3602.907 ms/op
                 executeQuery·p0.99:   3602.907 ms/op
                 executeQuery·p0.999:  3602.907 ms/op
                 executeQuery·p0.9999: 3602.907 ms/op
                 executeQuery·p1.00:   3602.907 ms/op


# Run progress: 73.21% complete, ETA 02:26:25
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6157.238 ms/op
# Warmup Iteration   2: 3514.827 ms/op
# Warmup Iteration   3: 3946.840 ms/op
# Warmup Iteration   4: 3548.381 ms/op
# Warmup Iteration   5: 3594.519 ms/op
Iteration   1: 3586.130 ms/op
                 executeQuery·p0.00:   3586.130 ms/op
                 executeQuery·p0.50:   3586.130 ms/op
                 executeQuery·p0.90:   3586.130 ms/op
                 executeQuery·p0.95:   3586.130 ms/op
                 executeQuery·p0.99:   3586.130 ms/op
                 executeQuery·p0.999:  3586.130 ms/op
                 executeQuery·p0.9999: 3586.130 ms/op
                 executeQuery·p1.00:   3586.130 ms/op

Iteration   2: 3485.467 ms/op
                 executeQuery·p0.00:   3485.467 ms/op
                 executeQuery·p0.50:   3485.467 ms/op
                 executeQuery·p0.90:   3485.467 ms/op
                 executeQuery·p0.95:   3485.467 ms/op
                 executeQuery·p0.99:   3485.467 ms/op
                 executeQuery·p0.999:  3485.467 ms/op
                 executeQuery·p0.9999: 3485.467 ms/op
                 executeQuery·p1.00:   3485.467 ms/op

Iteration   3: 3460.301 ms/op
                 executeQuery·p0.00:   3460.301 ms/op
                 executeQuery·p0.50:   3460.301 ms/op
                 executeQuery·p0.90:   3460.301 ms/op
                 executeQuery·p0.95:   3460.301 ms/op
                 executeQuery·p0.99:   3460.301 ms/op
                 executeQuery·p0.999:  3460.301 ms/op
                 executeQuery·p0.9999: 3460.301 ms/op
                 executeQuery·p1.00:   3460.301 ms/op

Iteration   4: 3514.827 ms/op
                 executeQuery·p0.00:   3514.827 ms/op
                 executeQuery·p0.50:   3514.827 ms/op
                 executeQuery·p0.90:   3514.827 ms/op
                 executeQuery·p0.95:   3514.827 ms/op
                 executeQuery·p0.99:   3514.827 ms/op
                 executeQuery·p0.999:  3514.827 ms/op
                 executeQuery·p0.9999: 3514.827 ms/op
                 executeQuery·p1.00:   3514.827 ms/op

Iteration   5: 3661.627 ms/op
                 executeQuery·p0.00:   3661.627 ms/op
                 executeQuery·p0.50:   3661.627 ms/op
                 executeQuery·p0.90:   3661.627 ms/op
                 executeQuery·p0.95:   3661.627 ms/op
                 executeQuery·p0.99:   3661.627 ms/op
                 executeQuery·p0.999:  3661.627 ms/op
                 executeQuery·p0.9999: 3661.627 ms/op
                 executeQuery·p1.00:   3661.627 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   3562.642 ±(99.9%) 105.101 ms/op

  Histogram, ms/op:
    [3400.000, 3425.000) = 0 
    [3425.000, 3450.000) = 0 
    [3450.000, 3475.000) = 1 
    [3475.000, 3500.000) = 2 
    [3500.000, 3525.000) = 1 
    [3525.000, 3550.000) = 0 
    [3550.000, 3575.000) = 0 
    [3575.000, 3600.000) = 3 
    [3600.000, 3625.000) = 1 
    [3625.000, 3650.000) = 1 
    [3650.000, 3675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3460.301 ms/op
     p(50.0000) =   3590.324 ms/op
     p(90.0000) =   3659.111 ms/op
     p(95.0000) =   3661.627 ms/op
     p(99.0000) =   3661.627 ms/op
     p(99.9000) =   3661.627 ms/op
     p(99.9900) =   3661.627 ms/op
     p(99.9990) =   3661.627 ms/op
     p(99.9999) =   3661.627 ms/op
    p(100.0000) =   3661.627 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 73.81% complete, ETA 02:24:14
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 278.010 ±(99.9%) 101.161 ms/op
# Warmup Iteration   2: 236.659 ±(99.9%) 6.244 ms/op
# Warmup Iteration   3: 254.101 ±(99.9%) 12.658 ms/op
# Warmup Iteration   4: 264.441 ±(99.9%) 3.624 ms/op
# Warmup Iteration   5: 233.909 ±(99.9%) 14.358 ms/op
Iteration   1: 229.485 ±(99.9%) 6.913 ms/op
                 executeQuery·p0.00:   214.172 ms/op
                 executeQuery·p0.50:   230.687 ms/op
                 executeQuery·p0.90:   235.274 ms/op
                 executeQuery·p0.95:   255.853 ms/op
                 executeQuery·p0.99:   262.668 ms/op
                 executeQuery·p0.999:  262.668 ms/op
                 executeQuery·p0.9999: 262.668 ms/op
                 executeQuery·p1.00:   262.668 ms/op

Iteration   2: 229.278 ±(99.9%) 5.857 ms/op
                 executeQuery·p0.00:   213.910 ms/op
                 executeQuery·p0.50:   229.900 ms/op
                 executeQuery·p0.90:   241.041 ms/op
                 executeQuery·p0.95:   244.384 ms/op
                 executeQuery·p0.99:   244.842 ms/op
                 executeQuery·p0.999:  244.842 ms/op
                 executeQuery·p0.9999: 244.842 ms/op
                 executeQuery·p1.00:   244.842 ms/op

Iteration   3: 229.912 ±(99.9%) 4.363 ms/op
                 executeQuery·p0.00:   213.385 ms/op
                 executeQuery·p0.50:   231.735 ms/op
                 executeQuery·p0.90:   235.720 ms/op
                 executeQuery·p0.95:   239.285 ms/op
                 executeQuery·p0.99:   240.124 ms/op
                 executeQuery·p0.999:  240.124 ms/op
                 executeQuery·p0.9999: 240.124 ms/op
                 executeQuery·p1.00:   240.124 ms/op

Iteration   4: 225.455 ±(99.9%) 5.844 ms/op
                 executeQuery·p0.00:   215.220 ms/op
                 executeQuery·p0.50:   223.609 ms/op
                 executeQuery·p0.90:   231.080 ms/op
                 executeQuery·p0.95:   246.153 ms/op
                 executeQuery·p0.99:   251.134 ms/op
                 executeQuery·p0.999:  251.134 ms/op
                 executeQuery·p0.9999: 251.134 ms/op
                 executeQuery·p1.00:   251.134 ms/op

Iteration   5: 226.198 ±(99.9%) 4.993 ms/op
                 executeQuery·p0.00:   214.434 ms/op
                 executeQuery·p0.50:   227.279 ms/op
                 executeQuery·p0.90:   234.488 ms/op
                 executeQuery·p0.95:   234.881 ms/op
                 executeQuery·p0.99:   234.881 ms/op
                 executeQuery·p0.999:  234.881 ms/op
                 executeQuery·p0.9999: 234.881 ms/op
                 executeQuery·p1.00:   234.881 ms/op


# Run progress: 74.40% complete, ETA 02:20:25
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 276.242 ±(99.9%) 115.617 ms/op
# Warmup Iteration   2: 227.772 ±(99.9%) 8.012 ms/op
# Warmup Iteration   3: 243.947 ±(99.9%) 13.607 ms/op
# Warmup Iteration   4: 249.675 ±(99.9%) 6.037 ms/op
# Warmup Iteration   5: 232.423 ±(99.9%) 11.946 ms/op
Iteration   1: 222.319 ±(99.9%) 3.348 ms/op
                 executeQuery·p0.00:   216.007 ms/op
                 executeQuery·p0.50:   221.512 ms/op
                 executeQuery·p0.90:   228.852 ms/op
                 executeQuery·p0.95:   230.372 ms/op
                 executeQuery·p0.99:   230.687 ms/op
                 executeQuery·p0.999:  230.687 ms/op
                 executeQuery·p0.9999: 230.687 ms/op
                 executeQuery·p1.00:   230.687 ms/op

Iteration   2: 226.492 ±(99.9%) 4.017 ms/op
                 executeQuery·p0.00:   217.055 ms/op
                 executeQuery·p0.50:   226.755 ms/op
                 executeQuery·p0.90:   235.353 ms/op
                 executeQuery·p0.95:   239.364 ms/op
                 executeQuery·p0.99:   239.600 ms/op
                 executeQuery·p0.999:  239.600 ms/op
                 executeQuery·p0.9999: 239.600 ms/op
                 executeQuery·p1.00:   239.600 ms/op

Iteration   3: 224.825 ±(99.9%) 5.970 ms/op
                 executeQuery·p0.00:   215.745 ms/op
                 executeQuery·p0.50:   222.560 ms/op
                 executeQuery·p0.90:   237.345 ms/op
                 executeQuery·p0.95:   238.787 ms/op
                 executeQuery·p0.99:   239.337 ms/op
                 executeQuery·p0.999:  239.337 ms/op
                 executeQuery·p0.9999: 239.337 ms/op
                 executeQuery·p1.00:   239.337 ms/op

Iteration   4: 234.790 ±(99.9%) 6.407 ms/op
                 executeQuery·p0.00:   219.415 ms/op
                 executeQuery·p0.50:   237.765 ms/op
                 executeQuery·p0.90:   243.374 ms/op
                 executeQuery·p0.95:   245.891 ms/op
                 executeQuery·p0.99:   246.415 ms/op
                 executeQuery·p0.999:  246.415 ms/op
                 executeQuery·p0.9999: 246.415 ms/op
                 executeQuery·p1.00:   246.415 ms/op

Iteration   5: 233.753 ±(99.9%) 5.216 ms/op
                 executeQuery·p0.00:   224.657 ms/op
                 executeQuery·p0.50:   232.522 ms/op
                 executeQuery·p0.90:   242.850 ms/op
                 executeQuery·p0.95:   245.367 ms/op
                 executeQuery·p0.99:   245.891 ms/op
                 executeQuery·p0.999:  245.891 ms/op
                 executeQuery·p0.9999: 245.891 ms/op
                 executeQuery·p1.00:   245.891 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 240
  mean =    228.147 ±(99.9%) 1.681 ms/op

  Histogram, ms/op:
    [210.000, 215.000) = 5 
    [215.000, 220.000) = 35 
    [220.000, 225.000) = 44 
    [225.000, 230.000) = 69 
    [230.000, 235.000) = 46 
    [235.000, 240.000) = 22 
    [240.000, 245.000) = 15 
    [245.000, 250.000) = 2 
    [250.000, 255.000) = 1 
    [255.000, 260.000) = 0 
    [260.000, 265.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    213.385 ms/op
     p(50.0000) =    228.065 ms/op
     p(90.0000) =    239.049 ms/op
     p(95.0000) =    242.221 ms/op
     p(99.0000) =    249.199 ms/op
     p(99.9000) =    262.668 ms/op
     p(99.9900) =    262.668 ms/op
     p(99.9990) =    262.668 ms/op
     p(99.9999) =    262.668 ms/op
    p(100.0000) =    262.668 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 75.00% complete, ETA 02:16:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 5855.248 ms/op
# Warmup Iteration   2: 3326.083 ms/op
# Warmup Iteration   3: 3162.505 ms/op
# Warmup Iteration   4: 3317.694 ms/op
# Warmup Iteration   5: 3107.979 ms/op
Iteration   1: 3045.065 ms/op
                 executeQuery·p0.00:   3045.065 ms/op
                 executeQuery·p0.50:   3045.065 ms/op
                 executeQuery·p0.90:   3045.065 ms/op
                 executeQuery·p0.95:   3045.065 ms/op
                 executeQuery·p0.99:   3045.065 ms/op
                 executeQuery·p0.999:  3045.065 ms/op
                 executeQuery·p0.9999: 3045.065 ms/op
                 executeQuery·p1.00:   3045.065 ms/op

Iteration   2: 3003.122 ms/op
                 executeQuery·p0.00:   3003.122 ms/op
                 executeQuery·p0.50:   3003.122 ms/op
                 executeQuery·p0.90:   3003.122 ms/op
                 executeQuery·p0.95:   3003.122 ms/op
                 executeQuery·p0.99:   3003.122 ms/op
                 executeQuery·p0.999:  3003.122 ms/op
                 executeQuery·p0.9999: 3003.122 ms/op
                 executeQuery·p1.00:   3003.122 ms/op

Iteration   3: 3099.591 ms/op
                 executeQuery·p0.00:   3099.591 ms/op
                 executeQuery·p0.50:   3099.591 ms/op
                 executeQuery·p0.90:   3099.591 ms/op
                 executeQuery·p0.95:   3099.591 ms/op
                 executeQuery·p0.99:   3099.591 ms/op
                 executeQuery·p0.999:  3099.591 ms/op
                 executeQuery·p0.9999: 3099.591 ms/op
                 executeQuery·p1.00:   3099.591 ms/op

Iteration   4: 3103.785 ms/op
                 executeQuery·p0.00:   3103.785 ms/op
                 executeQuery·p0.50:   3103.785 ms/op
                 executeQuery·p0.90:   3103.785 ms/op
                 executeQuery·p0.95:   3103.785 ms/op
                 executeQuery·p0.99:   3103.785 ms/op
                 executeQuery·p0.999:  3103.785 ms/op
                 executeQuery·p0.9999: 3103.785 ms/op
                 executeQuery·p1.00:   3103.785 ms/op

Iteration   5: 3082.813 ms/op
                 executeQuery·p0.00:   3082.813 ms/op
                 executeQuery·p0.50:   3082.813 ms/op
                 executeQuery·p0.90:   3082.813 ms/op
                 executeQuery·p0.95:   3082.813 ms/op
                 executeQuery·p0.99:   3082.813 ms/op
                 executeQuery·p0.999:  3082.813 ms/op
                 executeQuery·p0.9999: 3082.813 ms/op
                 executeQuery·p1.00:   3082.813 ms/op


# Run progress: 75.60% complete, ETA 02:14:03
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 5838.471 ms/op
# Warmup Iteration   2: 3162.505 ms/op
# Warmup Iteration   3: 3187.671 ms/op
# Warmup Iteration   4: 3141.534 ms/op
# Warmup Iteration   5: 3107.979 ms/op
Iteration   1: 2952.790 ms/op
                 executeQuery·p0.00:   2952.790 ms/op
                 executeQuery·p0.50:   2952.790 ms/op
                 executeQuery·p0.90:   2952.790 ms/op
                 executeQuery·p0.95:   2952.790 ms/op
                 executeQuery·p0.99:   2952.790 ms/op
                 executeQuery·p0.999:  2952.790 ms/op
                 executeQuery·p0.9999: 2952.790 ms/op
                 executeQuery·p1.00:   2952.790 ms/op

Iteration   2: 3061.842 ms/op
                 executeQuery·p0.00:   3061.842 ms/op
                 executeQuery·p0.50:   3061.842 ms/op
                 executeQuery·p0.90:   3061.842 ms/op
                 executeQuery·p0.95:   3061.842 ms/op
                 executeQuery·p0.99:   3061.842 ms/op
                 executeQuery·p0.999:  3061.842 ms/op
                 executeQuery·p0.9999: 3061.842 ms/op
                 executeQuery·p1.00:   3061.842 ms/op

Iteration   3: 3078.619 ms/op
                 executeQuery·p0.00:   3078.619 ms/op
                 executeQuery·p0.50:   3078.619 ms/op
                 executeQuery·p0.90:   3078.619 ms/op
                 executeQuery·p0.95:   3078.619 ms/op
                 executeQuery·p0.99:   3078.619 ms/op
                 executeQuery·p0.999:  3078.619 ms/op
                 executeQuery·p0.9999: 3078.619 ms/op
                 executeQuery·p1.00:   3078.619 ms/op

Iteration   4: 3221.225 ms/op
                 executeQuery·p0.00:   3221.225 ms/op
                 executeQuery·p0.50:   3221.225 ms/op
                 executeQuery·p0.90:   3221.225 ms/op
                 executeQuery·p0.95:   3221.225 ms/op
                 executeQuery·p0.99:   3221.225 ms/op
                 executeQuery·p0.999:  3221.225 ms/op
                 executeQuery·p0.9999: 3221.225 ms/op
                 executeQuery·p1.00:   3221.225 ms/op

Iteration   5: 3070.231 ms/op
                 executeQuery·p0.00:   3070.231 ms/op
                 executeQuery·p0.50:   3070.231 ms/op
                 executeQuery·p0.90:   3070.231 ms/op
                 executeQuery·p0.95:   3070.231 ms/op
                 executeQuery·p0.99:   3070.231 ms/op
                 executeQuery·p0.999:  3070.231 ms/op
                 executeQuery·p0.9999: 3070.231 ms/op
                 executeQuery·p1.00:   3070.231 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   3071.908 ±(99.9%) 105.695 ms/op

  Histogram, ms/op:
    [2900.000, 2925.000) = 0 
    [2925.000, 2950.000) = 0 
    [2950.000, 2975.000) = 1 
    [2975.000, 3000.000) = 0 
    [3000.000, 3025.000) = 1 
    [3025.000, 3050.000) = 1 
    [3050.000, 3075.000) = 2 
    [3075.000, 3100.000) = 3 
    [3100.000, 3125.000) = 1 
    [3125.000, 3150.000) = 0 
    [3150.000, 3175.000) = 0 
    [3175.000, 3200.000) = 0 
    [3200.000, 3225.000) = 1 
    [3225.000, 3250.000) = 0 
    [3250.000, 3275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2952.790 ms/op
     p(50.0000) =   3074.425 ms/op
     p(90.0000) =   3209.481 ms/op
     p(95.0000) =   3221.225 ms/op
     p(99.0000) =   3221.225 ms/op
     p(99.9000) =   3221.225 ms/op
     p(99.9900) =   3221.225 ms/op
     p(99.9990) =   3221.225 ms/op
     p(99.9999) =   3221.225 ms/op
    p(100.0000) =   3221.225 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 76.19% complete, ETA 02:11:26
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 283.948 ±(99.9%) 100.459 ms/op
# Warmup Iteration   2: 245.652 ±(99.9%) 10.099 ms/op
# Warmup Iteration   3: 255.138 ±(99.9%) 10.965 ms/op
# Warmup Iteration   4: 267.852 ±(99.9%) 3.719 ms/op
# Warmup Iteration   5: 258.224 ±(99.9%) 11.893 ms/op
Iteration   1: 242.449 ±(99.9%) 4.134 ms/op
                 executeQuery·p0.00:   231.735 ms/op
                 executeQuery·p0.50:   244.842 ms/op
                 executeQuery·p0.90:   247.516 ms/op
                 executeQuery·p0.95:   250.662 ms/op
                 executeQuery·p0.99:   251.396 ms/op
                 executeQuery·p0.999:  251.396 ms/op
                 executeQuery·p0.9999: 251.396 ms/op
                 executeQuery·p1.00:   251.396 ms/op

Iteration   2: 240.956 ±(99.9%) 6.891 ms/op
                 executeQuery·p0.00:   226.755 ms/op
                 executeQuery·p0.50:   241.697 ms/op
                 executeQuery·p0.90:   247.254 ms/op
                 executeQuery·p0.95:   265.080 ms/op
                 executeQuery·p0.99:   269.484 ms/op
                 executeQuery·p0.999:  269.484 ms/op
                 executeQuery·p0.9999: 269.484 ms/op
                 executeQuery·p1.00:   269.484 ms/op

Iteration   3: 239.463 ±(99.9%) 4.375 ms/op
                 executeQuery·p0.00:   227.803 ms/op
                 executeQuery·p0.50:   240.386 ms/op
                 executeQuery·p0.90:   245.367 ms/op
                 executeQuery·p0.95:   246.415 ms/op
                 executeQuery·p0.99:   246.678 ms/op
                 executeQuery·p0.999:  246.678 ms/op
                 executeQuery·p0.9999: 246.678 ms/op
                 executeQuery·p1.00:   246.678 ms/op

Iteration   4: 242.609 ±(99.9%) 5.115 ms/op
                 executeQuery·p0.00:   228.065 ms/op
                 executeQuery·p0.50:   243.007 ms/op
                 executeQuery·p0.90:   250.400 ms/op
                 executeQuery·p0.95:   251.868 ms/op
                 executeQuery·p0.99:   252.183 ms/op
                 executeQuery·p0.999:  252.183 ms/op
                 executeQuery·p0.9999: 252.183 ms/op
                 executeQuery·p1.00:   252.183 ms/op

Iteration   5: 240.523 ±(99.9%) 5.668 ms/op
                 executeQuery·p0.00:   224.920 ms/op
                 executeQuery·p0.50:   240.648 ms/op
                 executeQuery·p0.90:   250.662 ms/op
                 executeQuery·p0.95:   252.235 ms/op
                 executeQuery·p0.99:   252.445 ms/op
                 executeQuery·p0.999:  252.445 ms/op
                 executeQuery·p0.9999: 252.445 ms/op
                 executeQuery·p1.00:   252.445 ms/op


# Run progress: 76.79% complete, ETA 02:07:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 286.923 ±(99.9%) 74.653 ms/op
# Warmup Iteration   2: 244.877 ±(99.9%) 9.505 ms/op
# Warmup Iteration   3: 263.073 ±(99.9%) 11.631 ms/op
# Warmup Iteration   4: 263.741 ±(99.9%) 6.835 ms/op
# Warmup Iteration   5: 253.434 ±(99.9%) 12.604 ms/op
Iteration   1: 248.011 ±(99.9%) 7.161 ms/op
                 executeQuery·p0.00:   227.541 ms/op
                 executeQuery·p0.50:   251.658 ms/op
                 executeQuery·p0.90:   256.639 ms/op
                 executeQuery·p0.95:   258.212 ms/op
                 executeQuery·p0.99:   258.474 ms/op
                 executeQuery·p0.999:  258.474 ms/op
                 executeQuery·p0.9999: 258.474 ms/op
                 executeQuery·p1.00:   258.474 ms/op

Iteration   2: 248.125 ±(99.9%) 8.720 ms/op
                 executeQuery·p0.00:   226.230 ms/op
                 executeQuery·p0.50:   249.037 ms/op
                 executeQuery·p0.90:   264.975 ms/op
                 executeQuery·p0.95:   273.154 ms/op
                 executeQuery·p0.99:   273.678 ms/op
                 executeQuery·p0.999:  273.678 ms/op
                 executeQuery·p0.9999: 273.678 ms/op
                 executeQuery·p1.00:   273.678 ms/op

Iteration   3: 235.838 ±(99.9%) 6.695 ms/op
                 executeQuery·p0.00:   224.395 ms/op
                 executeQuery·p0.50:   234.619 ms/op
                 executeQuery·p0.90:   250.662 ms/op
                 executeQuery·p0.95:   253.074 ms/op
                 executeQuery·p0.99:   253.493 ms/op
                 executeQuery·p0.999:  253.493 ms/op
                 executeQuery·p0.9999: 253.493 ms/op
                 executeQuery·p1.00:   253.493 ms/op

Iteration   4: 237.742 ±(99.9%) 8.587 ms/op
                 executeQuery·p0.00:   224.133 ms/op
                 executeQuery·p0.50:   231.735 ms/op
                 executeQuery·p0.90:   250.662 ms/op
                 executeQuery·p0.95:   264.713 ms/op
                 executeQuery·p0.99:   268.173 ms/op
                 executeQuery·p0.999:  268.173 ms/op
                 executeQuery·p0.9999: 268.173 ms/op
                 executeQuery·p1.00:   268.173 ms/op

Iteration   5: 236.534 ±(99.9%) 6.341 ms/op
                 executeQuery·p0.00:   223.347 ms/op
                 executeQuery·p0.50:   239.600 ms/op
                 executeQuery·p0.90:   248.984 ms/op
                 executeQuery·p0.95:   250.767 ms/op
                 executeQuery·p0.99:   250.872 ms/op
                 executeQuery·p0.999:  250.872 ms/op
                 executeQuery·p0.9999: 250.872 ms/op
                 executeQuery·p1.00:   250.872 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 230
  mean =    241.225 ±(99.9%) 1.993 ms/op

  Histogram, ms/op:
    [220.000, 225.000) = 6 
    [225.000, 230.000) = 22 
    [230.000, 235.000) = 33 
    [235.000, 240.000) = 35 
    [240.000, 245.000) = 51 
    [245.000, 250.000) = 45 
    [250.000, 255.000) = 29 
    [255.000, 260.000) = 5 
    [260.000, 265.000) = 0 
    [265.000, 270.000) = 2 
    [270.000, 275.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    223.347 ms/op
     p(50.0000) =    241.566 ms/op
     p(90.0000) =    251.396 ms/op
     p(95.0000) =    253.611 ms/op
     p(99.0000) =    270.569 ms/op
     p(99.9000) =    273.678 ms/op
     p(99.9900) =    273.678 ms/op
     p(99.9990) =    273.678 ms/op
     p(99.9999) =    273.678 ms/op
    p(100.0000) =    273.678 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 77.38% complete, ETA 02:03:57
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 5913.969 ms/op
# Warmup Iteration   2: 3263.169 ms/op
# Warmup Iteration   3: 3246.391 ms/op
# Warmup Iteration   4: 3267.363 ms/op
# Warmup Iteration   5: 3112.174 ms/op
Iteration   1: 3066.036 ms/op
                 executeQuery·p0.00:   3066.036 ms/op
                 executeQuery·p0.50:   3066.036 ms/op
                 executeQuery·p0.90:   3066.036 ms/op
                 executeQuery·p0.95:   3066.036 ms/op
                 executeQuery·p0.99:   3066.036 ms/op
                 executeQuery·p0.999:  3066.036 ms/op
                 executeQuery·p0.9999: 3066.036 ms/op
                 executeQuery·p1.00:   3066.036 ms/op

Iteration   2: 3133.145 ms/op
                 executeQuery·p0.00:   3133.145 ms/op
                 executeQuery·p0.50:   3133.145 ms/op
                 executeQuery·p0.90:   3133.145 ms/op
                 executeQuery·p0.95:   3133.145 ms/op
                 executeQuery·p0.99:   3133.145 ms/op
                 executeQuery·p0.999:  3133.145 ms/op
                 executeQuery·p0.9999: 3133.145 ms/op
                 executeQuery·p1.00:   3133.145 ms/op

Iteration   3: 3120.562 ms/op
                 executeQuery·p0.00:   3120.562 ms/op
                 executeQuery·p0.50:   3120.562 ms/op
                 executeQuery·p0.90:   3120.562 ms/op
                 executeQuery·p0.95:   3120.562 ms/op
                 executeQuery·p0.99:   3120.562 ms/op
                 executeQuery·p0.999:  3120.562 ms/op
                 executeQuery·p0.9999: 3120.562 ms/op
                 executeQuery·p1.00:   3120.562 ms/op

Iteration   4: 3091.202 ms/op
                 executeQuery·p0.00:   3091.202 ms/op
                 executeQuery·p0.50:   3091.202 ms/op
                 executeQuery·p0.90:   3091.202 ms/op
                 executeQuery·p0.95:   3091.202 ms/op
                 executeQuery·p0.99:   3091.202 ms/op
                 executeQuery·p0.999:  3091.202 ms/op
                 executeQuery·p0.9999: 3091.202 ms/op
                 executeQuery·p1.00:   3091.202 ms/op

Iteration   5: 3082.813 ms/op
                 executeQuery·p0.00:   3082.813 ms/op
                 executeQuery·p0.50:   3082.813 ms/op
                 executeQuery·p0.90:   3082.813 ms/op
                 executeQuery·p0.95:   3082.813 ms/op
                 executeQuery·p0.99:   3082.813 ms/op
                 executeQuery·p0.999:  3082.813 ms/op
                 executeQuery·p0.9999: 3082.813 ms/op
                 executeQuery·p1.00:   3082.813 ms/op


# Run progress: 77.98% complete, ETA 02:01:50
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 5897.191 ms/op
# Warmup Iteration   2: 3187.671 ms/op
# Warmup Iteration   3: 3397.386 ms/op
# Warmup Iteration   4: 3070.231 ms/op
# Warmup Iteration   5: 3212.837 ms/op
Iteration   1: 3057.648 ms/op
                 executeQuery·p0.00:   3057.648 ms/op
                 executeQuery·p0.50:   3057.648 ms/op
                 executeQuery·p0.90:   3057.648 ms/op
                 executeQuery·p0.95:   3057.648 ms/op
                 executeQuery·p0.99:   3057.648 ms/op
                 executeQuery·p0.999:  3057.648 ms/op
                 executeQuery·p0.9999: 3057.648 ms/op
                 executeQuery·p1.00:   3057.648 ms/op

Iteration   2: 3070.231 ms/op
                 executeQuery·p0.00:   3070.231 ms/op
                 executeQuery·p0.50:   3070.231 ms/op
                 executeQuery·p0.90:   3070.231 ms/op
                 executeQuery·p0.95:   3070.231 ms/op
                 executeQuery·p0.99:   3070.231 ms/op
                 executeQuery·p0.999:  3070.231 ms/op
                 executeQuery·p0.9999: 3070.231 ms/op
                 executeQuery·p1.00:   3070.231 ms/op

Iteration   3: 3078.619 ms/op
                 executeQuery·p0.00:   3078.619 ms/op
                 executeQuery·p0.50:   3078.619 ms/op
                 executeQuery·p0.90:   3078.619 ms/op
                 executeQuery·p0.95:   3078.619 ms/op
                 executeQuery·p0.99:   3078.619 ms/op
                 executeQuery·p0.999:  3078.619 ms/op
                 executeQuery·p0.9999: 3078.619 ms/op
                 executeQuery·p1.00:   3078.619 ms/op

Iteration   4: 3095.396 ms/op
                 executeQuery·p0.00:   3095.396 ms/op
                 executeQuery·p0.50:   3095.396 ms/op
                 executeQuery·p0.90:   3095.396 ms/op
                 executeQuery·p0.95:   3095.396 ms/op
                 executeQuery·p0.99:   3095.396 ms/op
                 executeQuery·p0.999:  3095.396 ms/op
                 executeQuery·p0.9999: 3095.396 ms/op
                 executeQuery·p1.00:   3095.396 ms/op

Iteration   5: 3074.425 ms/op
                 executeQuery·p0.00:   3074.425 ms/op
                 executeQuery·p0.50:   3074.425 ms/op
                 executeQuery·p0.90:   3074.425 ms/op
                 executeQuery·p0.95:   3074.425 ms/op
                 executeQuery·p0.99:   3074.425 ms/op
                 executeQuery·p0.999:  3074.425 ms/op
                 executeQuery·p0.9999: 3074.425 ms/op
                 executeQuery·p1.00:   3074.425 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 10
  mean =   3087.008 ±(99.9%) 36.243 ms/op

  Histogram, ms/op:
    [3050.000, 3055.000) = 0 
    [3055.000, 3060.000) = 1 
    [3060.000, 3065.000) = 0 
    [3065.000, 3070.000) = 1 
    [3070.000, 3075.000) = 2 
    [3075.000, 3080.000) = 1 
    [3080.000, 3085.000) = 1 
    [3085.000, 3090.000) = 0 
    [3090.000, 3095.000) = 1 
    [3095.000, 3100.000) = 1 
    [3100.000, 3105.000) = 0 
    [3105.000, 3110.000) = 0 
    [3110.000, 3115.000) = 0 
    [3115.000, 3120.000) = 0 
    [3120.000, 3125.000) = 1 
    [3125.000, 3130.000) = 0 
    [3130.000, 3135.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3057.648 ms/op
     p(50.0000) =   3080.716 ms/op
     p(90.0000) =   3131.887 ms/op
     p(95.0000) =   3133.145 ms/op
     p(99.0000) =   3133.145 ms/op
     p(99.9000) =   3133.145 ms/op
     p(99.9900) =   3133.145 ms/op
     p(99.9990) =   3133.145 ms/op
     p(99.9999) =   3133.145 ms/op
    p(100.0000) =   3133.145 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 78.57% complete, ETA 01:59:07
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 251.055 ±(99.9%) 9.744 ms/op
# Warmup Iteration   2: 238.588 ±(99.9%) 5.360 ms/op
# Warmup Iteration   3: 239.731 ±(99.9%) 2.541 ms/op
# Warmup Iteration   4: 239.581 ±(99.9%) 2.164 ms/op
# Warmup Iteration   5: 243.768 ±(99.9%) 0.514 ms/op
Iteration   1: 242.645 ±(99.9%) 2.327 ms/op
                 executeQuery·p0.00:   233.832 ms/op
                 executeQuery·p0.50:   243.532 ms/op
                 executeQuery·p0.90:   244.580 ms/op
                 executeQuery·p0.95:   245.105 ms/op
                 executeQuery·p0.99:   260.571 ms/op
                 executeQuery·p0.999:  260.571 ms/op
                 executeQuery·p0.9999: 260.571 ms/op
                 executeQuery·p1.00:   260.571 ms/op

Iteration   2: 242.464 ±(99.9%) 1.624 ms/op
                 executeQuery·p0.00:   234.357 ms/op
                 executeQuery·p0.50:   243.532 ms/op
                 executeQuery·p0.90:   244.764 ms/op
                 executeQuery·p0.95:   245.288 ms/op
                 executeQuery·p0.99:   246.153 ms/op
                 executeQuery·p0.999:  246.153 ms/op
                 executeQuery·p0.9999: 246.153 ms/op
                 executeQuery·p1.00:   246.153 ms/op

Iteration   3: 243.685 ±(99.9%) 1.021 ms/op
                 executeQuery·p0.00:   241.697 ms/op
                 executeQuery·p0.50:   243.007 ms/op
                 executeQuery·p0.90:   247.412 ms/op
                 executeQuery·p0.95:   248.460 ms/op
                 executeQuery·p0.99:   248.513 ms/op
                 executeQuery·p0.999:  248.513 ms/op
                 executeQuery·p0.9999: 248.513 ms/op
                 executeQuery·p1.00:   248.513 ms/op

Iteration   4: 246.371 ±(99.9%) 3.036 ms/op
                 executeQuery·p0.00:   236.716 ms/op
                 executeQuery·p0.50:   246.153 ms/op
                 executeQuery·p0.90:   256.115 ms/op
                 executeQuery·p0.95:   257.897 ms/op
                 executeQuery·p0.99:   258.474 ms/op
                 executeQuery·p0.999:  258.474 ms/op
                 executeQuery·p0.9999: 258.474 ms/op
                 executeQuery·p1.00:   258.474 ms/op

Iteration   5: 246.741 ±(99.9%) 4.358 ms/op
                 executeQuery·p0.00:   232.522 ms/op
                 executeQuery·p0.50:   250.085 ms/op
                 executeQuery·p0.90:   257.111 ms/op
                 executeQuery·p0.95:   258.369 ms/op
                 executeQuery·p0.99:   258.736 ms/op
                 executeQuery·p0.999:  258.736 ms/op
                 executeQuery·p0.9999: 258.736 ms/op
                 executeQuery·p1.00:   258.736 ms/op


# Run progress: 79.17% complete, ETA 01:55:23
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 250.190 ±(99.9%) 9.630 ms/op
# Warmup Iteration   2: 237.502 ±(99.9%) 5.301 ms/op
# Warmup Iteration   3: 242.340 ±(99.9%) 2.066 ms/op
# Warmup Iteration   4: 236.277 ±(99.9%) 2.483 ms/op
# Warmup Iteration   5: 234.143 ±(99.9%) 0.487 ms/op
Iteration   1: 232.985 ±(99.9%) 0.413 ms/op
                 executeQuery·p0.00:   232.260 ms/op
                 executeQuery·p0.50:   232.784 ms/op
                 executeQuery·p0.90:   234.095 ms/op
                 executeQuery·p0.95:   234.566 ms/op
                 executeQuery·p0.99:   236.192 ms/op
                 executeQuery·p0.999:  236.192 ms/op
                 executeQuery·p0.9999: 236.192 ms/op
                 executeQuery·p1.00:   236.192 ms/op

Iteration   2: 233.582 ±(99.9%) 0.534 ms/op
                 executeQuery·p0.00:   231.997 ms/op
                 executeQuery·p0.50:   233.832 ms/op
                 executeQuery·p0.90:   234.357 ms/op
                 executeQuery·p0.95:   235.930 ms/op
                 executeQuery·p0.99:   236.716 ms/op
                 executeQuery·p0.999:  236.716 ms/op
                 executeQuery·p0.9999: 236.716 ms/op
                 executeQuery·p1.00:   236.716 ms/op

Iteration   3: 233.582 ±(99.9%) 0.577 ms/op
                 executeQuery·p0.00:   231.997 ms/op
                 executeQuery·p0.50:   234.095 ms/op
                 executeQuery·p0.90:   234.619 ms/op
                 executeQuery·p0.95:   235.038 ms/op
                 executeQuery·p0.99:   236.716 ms/op
                 executeQuery·p0.999:  236.716 ms/op
                 executeQuery·p0.9999: 236.716 ms/op
                 executeQuery·p1.00:   236.716 ms/op

Iteration   4: 233.089 ±(99.9%) 0.504 ms/op
                 executeQuery·p0.00:   231.997 ms/op
                 executeQuery·p0.50:   233.046 ms/op
                 executeQuery·p0.90:   233.990 ms/op
                 executeQuery·p0.95:   234.514 ms/op
                 executeQuery·p0.99:   237.765 ms/op
                 executeQuery·p0.999:  237.765 ms/op
                 executeQuery·p0.9999: 237.765 ms/op
                 executeQuery·p1.00:   237.765 ms/op

Iteration   5: 233.631 ±(99.9%) 1.499 ms/op
                 executeQuery·p0.00:   231.997 ms/op
                 executeQuery·p0.50:   233.046 ms/op
                 executeQuery·p0.90:   234.566 ms/op
                 executeQuery·p0.95:   235.877 ms/op
                 executeQuery·p0.99:   250.610 ms/op
                 executeQuery·p0.999:  250.610 ms/op
                 executeQuery·p0.9999: 250.610 ms/op
                 executeQuery·p1.00:   250.610 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 422
  mean =    238.765 ±(99.9%) 1.079 ms/op

  Histogram, ms/op:
    [230.000, 232.500) = 25 
    [232.500, 235.000) = 195 
    [235.000, 237.500) = 15 
    [237.500, 240.000) = 6 
    [240.000, 242.500) = 23 
    [242.500, 245.000) = 91 
    [245.000, 247.500) = 26 
    [247.500, 250.000) = 7 
    [250.000, 252.500) = 23 
    [252.500, 255.000) = 1 
    [255.000, 257.500) = 5 
    [257.500, 260.000) = 4 
    [260.000, 262.500) = 1 
    [262.500, 265.000) = 0 
    [265.000, 267.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    231.997 ms/op
     p(50.0000) =    234.619 ms/op
     p(90.0000) =    247.464 ms/op
     p(95.0000) =    250.872 ms/op
     p(99.0000) =    258.353 ms/op
     p(99.9000) =    260.571 ms/op
     p(99.9900) =    260.571 ms/op
     p(99.9990) =    260.571 ms/op
     p(99.9999) =    260.571 ms/op
    p(100.0000) =    260.571 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 79.76% complete, ETA 01:51:41
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2335.388 ±(99.9%) 448.951 ms/op
# Warmup Iteration   2: 2127.351 ±(99.9%) 251.545 ms/op
# Warmup Iteration   3: 2243.114 ±(99.9%) 13.513 ms/op
# Warmup Iteration   4: 2256.536 ±(99.9%) 118.133 ms/op
# Warmup Iteration   5: 2242.275 ±(99.9%) 8.846 ms/op
Iteration   1: 2252.341 ±(99.9%) 22.841 ms/op
                 executeQuery·p0.00:   2248.147 ms/op
                 executeQuery·p0.50:   2248.147 ms/op
                 executeQuery·p0.90:   2260.730 ms/op
                 executeQuery·p0.95:   2260.730 ms/op
                 executeQuery·p0.99:   2260.730 ms/op
                 executeQuery·p0.999:  2260.730 ms/op
                 executeQuery·p0.9999: 2260.730 ms/op
                 executeQuery·p1.00:   2260.730 ms/op

Iteration   2: 2274.152 ±(99.9%) 62.967 ms/op
                 executeQuery·p0.00:   2252.341 ms/op
                 executeQuery·p0.50:   2269.118 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   3: 2275.829 ±(99.9%) 24.494 ms/op
                 executeQuery·p0.00:   2269.118 ms/op
                 executeQuery·p0.50:   2273.313 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op

Iteration   4: 2269.118 ±(99.9%) 32.302 ms/op
                 executeQuery·p0.00:   2260.730 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2281.701 ms/op
                 executeQuery·p0.95:   2281.701 ms/op
                 executeQuery·p0.99:   2281.701 ms/op
                 executeQuery·p0.999:  2281.701 ms/op
                 executeQuery·p0.9999: 2281.701 ms/op
                 executeQuery·p1.00:   2281.701 ms/op

Iteration   5: 2283.379 ±(99.9%) 56.643 ms/op
                 executeQuery·p0.00:   2260.730 ms/op
                 executeQuery·p0.50:   2290.090 ms/op
                 executeQuery·p0.90:   2298.479 ms/op
                 executeQuery·p0.95:   2298.479 ms/op
                 executeQuery·p0.99:   2298.479 ms/op
                 executeQuery·p0.999:  2298.479 ms/op
                 executeQuery·p0.9999: 2298.479 ms/op
                 executeQuery·p1.00:   2298.479 ms/op


# Run progress: 80.36% complete, ETA 01:48:03
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2363.071 ±(99.9%) 324.747 ms/op
# Warmup Iteration   2: 2134.481 ±(99.9%) 281.332 ms/op
# Warmup Iteration   3: 2264.924 ±(99.9%) 59.342 ms/op
# Warmup Iteration   4: 2282.540 ±(99.9%) 129.911 ms/op
# Warmup Iteration   5: 2290.929 ±(99.9%) 119.995 ms/op
Iteration   1: 2261.569 ±(99.9%) 137.708 ms/op
                 executeQuery·p0.00:   2235.564 ms/op
                 executeQuery·p0.50:   2239.758 ms/op
                 executeQuery·p0.90:   2315.256 ms/op
                 executeQuery·p0.95:   2315.256 ms/op
                 executeQuery·p0.99:   2315.256 ms/op
                 executeQuery·p0.999:  2315.256 ms/op
                 executeQuery·p0.9999: 2315.256 ms/op
                 executeQuery·p1.00:   2315.256 ms/op

Iteration   2: 2342.099 ±(99.9%) 339.089 ms/op
                 executeQuery·p0.00:   2252.341 ms/op
                 executeQuery·p0.50:   2323.644 ms/op
                 executeQuery·p0.90:   2487.222 ms/op
                 executeQuery·p0.95:   2487.222 ms/op
                 executeQuery·p0.99:   2487.222 ms/op
                 executeQuery·p0.999:  2487.222 ms/op
                 executeQuery·p0.9999: 2487.222 ms/op
                 executeQuery·p1.00:   2487.222 ms/op

Iteration   3: 2269.118 ±(99.9%) 37.877 ms/op
                 executeQuery·p0.00:   2260.730 ms/op
                 executeQuery·p0.50:   2264.924 ms/op
                 executeQuery·p0.90:   2285.896 ms/op
                 executeQuery·p0.95:   2285.896 ms/op
                 executeQuery·p0.99:   2285.896 ms/op
                 executeQuery·p0.999:  2285.896 ms/op
                 executeQuery·p0.9999: 2285.896 ms/op
                 executeQuery·p1.00:   2285.896 ms/op

Iteration   4: 2260.730 ±(99.9%) 19.781 ms/op
                 executeQuery·p0.00:   2256.536 ms/op
                 executeQuery·p0.50:   2260.730 ms/op
                 executeQuery·p0.90:   2269.118 ms/op
                 executeQuery·p0.95:   2269.118 ms/op
                 executeQuery·p0.99:   2269.118 ms/op
                 executeQuery·p0.999:  2269.118 ms/op
                 executeQuery·p0.9999: 2269.118 ms/op
                 executeQuery·p1.00:   2269.118 ms/op

Iteration   5: 2266.602 ±(99.9%) 77.960 ms/op
                 executeQuery·p0.00:   2235.564 ms/op
                 executeQuery·p0.50:   2273.313 ms/op
                 executeQuery·p0.90:   2290.090 ms/op
                 executeQuery·p0.95:   2290.090 ms/op
                 executeQuery·p0.99:   2290.090 ms/op
                 executeQuery·p0.999:  2290.090 ms/op
                 executeQuery·p0.9999: 2290.090 ms/op
                 executeQuery·p1.00:   2290.090 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 50
  mean =   2275.494 ±(99.9%) 18.554 ms/op

  Histogram, ms/op:
    [2200.000, 2225.000) = 0 
    [2225.000, 2250.000) = 7 
    [2250.000, 2275.000) = 26 
    [2275.000, 2300.000) = 12 
    [2300.000, 2325.000) = 3 
    [2325.000, 2350.000) = 1 
    [2350.000, 2375.000) = 0 
    [2375.000, 2400.000) = 0 
    [2400.000, 2425.000) = 0 
    [2425.000, 2450.000) = 0 
    [2450.000, 2475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2235.564 ms/op
     p(50.0000) =   2269.118 ms/op
     p(90.0000) =   2302.253 ms/op
     p(95.0000) =   2333.082 ms/op
     p(99.0000) =   2487.222 ms/op
     p(99.9000) =   2487.222 ms/op
     p(99.9900) =   2487.222 ms/op
     p(99.9990) =   2487.222 ms/op
     p(99.9999) =   2487.222 ms/op
    p(100.0000) =   2487.222 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 80.95% complete, ETA 01:44:27
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 470.453 ±(99.9%) 25.945 ms/op
# Warmup Iteration   2: 449.064 ±(99.9%) 11.169 ms/op
# Warmup Iteration   3: 443.730 ±(99.9%) 5.002 ms/op
# Warmup Iteration   4: 440.106 ±(99.9%) 2.552 ms/op
# Warmup Iteration   5: 439.376 ±(99.9%) 2.289 ms/op
Iteration   1: 439.946 ±(99.9%) 1.765 ms/op
                 executeQuery·p0.00:   437.256 ms/op
                 executeQuery·p0.50:   439.353 ms/op
                 executeQuery·p0.90:   443.548 ms/op
                 executeQuery·p0.95:   444.387 ms/op
                 executeQuery·p0.99:   444.596 ms/op
                 executeQuery·p0.999:  444.596 ms/op
                 executeQuery·p0.9999: 444.596 ms/op
                 executeQuery·p1.00:   444.596 ms/op

Iteration   2: 440.356 ±(99.9%) 2.253 ms/op
                 executeQuery·p0.00:   437.256 ms/op
                 executeQuery·p0.50:   438.829 ms/op
                 executeQuery·p0.90:   445.121 ms/op
                 executeQuery·p0.95:   445.959 ms/op
                 executeQuery·p0.99:   446.169 ms/op
                 executeQuery·p0.999:  446.169 ms/op
                 executeQuery·p0.9999: 446.169 ms/op
                 executeQuery·p1.00:   446.169 ms/op

Iteration   3: 443.707 ±(99.9%) 12.288 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   440.402 ms/op
                 executeQuery·p0.90:   444.911 ms/op
                 executeQuery·p0.95:   500.485 ms/op
                 executeQuery·p0.99:   514.327 ms/op
                 executeQuery·p0.999:  514.327 ms/op
                 executeQuery·p0.9999: 514.327 ms/op
                 executeQuery·p1.00:   514.327 ms/op

Iteration   4: 441.359 ±(99.9%) 9.662 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   438.305 ms/op
                 executeQuery·p0.90:   443.128 ms/op
                 executeQuery·p0.95:   486.539 ms/op
                 executeQuery·p0.99:   497.025 ms/op
                 executeQuery·p0.999:  497.025 ms/op
                 executeQuery·p0.9999: 497.025 ms/op
                 executeQuery·p1.00:   497.025 ms/op

Iteration   5: 438.806 ±(99.9%) 0.852 ms/op
                 executeQuery·p0.00:   437.780 ms/op
                 executeQuery·p0.50:   438.305 ms/op
                 executeQuery·p0.90:   441.031 ms/op
                 executeQuery·p0.95:   441.870 ms/op
                 executeQuery·p0.99:   441.975 ms/op
                 executeQuery·p0.999:  441.975 ms/op
                 executeQuery·p0.9999: 441.975 ms/op
                 executeQuery·p1.00:   441.975 ms/op


# Run progress: 81.55% complete, ETA 01:40:50
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 469.762 ±(99.9%) 22.456 ms/op
# Warmup Iteration   2: 443.456 ±(99.9%) 7.448 ms/op
# Warmup Iteration   3: 442.932 ±(99.9%) 1.757 ms/op
# Warmup Iteration   4: 447.719 ±(99.9%) 15.016 ms/op
# Warmup Iteration   5: 441.770 ±(99.9%) 1.832 ms/op
Iteration   1: 442.226 ±(99.9%) 1.643 ms/op
                 executeQuery·p0.00:   438.829 ms/op
                 executeQuery·p0.50:   441.975 ms/op
                 executeQuery·p0.90:   445.540 ms/op
                 executeQuery·p0.95:   446.589 ms/op
                 executeQuery·p0.99:   446.693 ms/op
                 executeQuery·p0.999:  446.693 ms/op
                 executeQuery·p0.9999: 446.693 ms/op
                 executeQuery·p1.00:   446.693 ms/op

Iteration   2: 437.826 ±(99.9%) 1.936 ms/op
                 executeQuery·p0.00:   434.635 ms/op
                 executeQuery·p0.50:   437.256 ms/op
                 executeQuery·p0.90:   441.765 ms/op
                 executeQuery·p0.95:   441.975 ms/op
                 executeQuery·p0.99:   441.975 ms/op
                 executeQuery·p0.999:  441.975 ms/op
                 executeQuery·p0.9999: 441.975 ms/op
                 executeQuery·p1.00:   441.975 ms/op

Iteration   3: 436.094 ±(99.9%) 0.984 ms/op
                 executeQuery·p0.00:   435.159 ms/op
                 executeQuery·p0.50:   435.683 ms/op
                 executeQuery·p0.90:   438.410 ms/op
                 executeQuery·p0.95:   439.668 ms/op
                 executeQuery·p0.99:   439.878 ms/op
                 executeQuery·p0.999:  439.878 ms/op
                 executeQuery·p0.9999: 439.878 ms/op
                 executeQuery·p1.00:   439.878 ms/op

Iteration   4: 437.689 ±(99.9%) 1.461 ms/op
                 executeQuery·p0.00:   435.159 ms/op
                 executeQuery·p0.50:   437.256 ms/op
                 executeQuery·p0.90:   441.450 ms/op
                 executeQuery·p0.95:   441.870 ms/op
                 executeQuery·p0.99:   441.975 ms/op
                 executeQuery·p0.999:  441.975 ms/op
                 executeQuery·p0.9999: 441.975 ms/op
                 executeQuery·p1.00:   441.975 ms/op

Iteration   5: 441.884 ±(99.9%) 3.707 ms/op
                 executeQuery·p0.00:   434.635 ms/op
                 executeQuery·p0.50:   442.499 ms/op
                 executeQuery·p0.90:   448.791 ms/op
                 executeQuery·p0.95:   448.791 ms/op
                 executeQuery·p0.99:   448.791 ms/op
                 executeQuery·p0.999:  448.791 ms/op
                 executeQuery·p0.9999: 448.791 ms/op
                 executeQuery·p1.00:   448.791 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 230
  mean =    439.989 ±(99.9%) 1.517 ms/op

  Histogram, ms/op:
    [430.000, 435.000) = 2 
    [435.000, 440.000) = 150 
    [440.000, 445.000) = 63 
    [445.000, 450.000) = 13 
    [450.000, 455.000) = 0 
    [455.000, 460.000) = 0 
    [460.000, 465.000) = 0 
    [465.000, 470.000) = 0 
    [470.000, 475.000) = 0 
    [475.000, 480.000) = 0 
    [480.000, 485.000) = 0 
    [485.000, 490.000) = 0 
    [490.000, 495.000) = 0 
    [495.000, 500.000) = 1 
    [500.000, 505.000) = 0 
    [505.000, 510.000) = 0 
    [510.000, 515.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    434.635 ms/op
     p(50.0000) =    438.829 ms/op
     p(90.0000) =    444.072 ms/op
     p(95.0000) =    445.356 ms/op
     p(99.0000) =    482.072 ms/op
     p(99.9000) =    514.327 ms/op
     p(99.9900) =    514.327 ms/op
     p(99.9990) =    514.327 ms/op
     p(99.9999) =    514.327 ms/op
    p(100.0000) =    514.327 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 82.14% complete, ETA 01:37:15
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4145.370 ±(99.9%) 3899.003 ms/op
# Warmup Iteration   2: 3920.276 ±(99.9%) 998.673 ms/op
# Warmup Iteration   3: 3914.684 ±(99.9%) 309.251 ms/op
# Warmup Iteration   4: 3920.276 ±(99.9%) 159.288 ms/op
# Warmup Iteration   5: 3920.276 ±(99.9%) 268.728 ms/op
Iteration   1: 3914.684 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3913.286 ms/op
                 executeQuery·p0.50:   3913.286 ms/op
                 executeQuery·p0.90:   3917.480 ms/op
                 executeQuery·p0.95:   3917.480 ms/op
                 executeQuery·p0.99:   3917.480 ms/op
                 executeQuery·p0.999:  3917.480 ms/op
                 executeQuery·p0.9999: 3917.480 ms/op
                 executeQuery·p1.00:   3917.480 ms/op

Iteration   2: 3909.091 ±(99.9%) 202.452 ms/op
                 executeQuery·p0.00:   3900.703 ms/op
                 executeQuery·p0.50:   3904.897 ms/op
                 executeQuery·p0.90:   3921.674 ms/op
                 executeQuery·p0.95:   3921.674 ms/op
                 executeQuery·p0.99:   3921.674 ms/op
                 executeQuery·p0.999:  3921.674 ms/op
                 executeQuery·p0.9999: 3921.674 ms/op
                 executeQuery·p1.00:   3921.674 ms/op

Iteration   3: 3917.480 ±(99.9%) 612.158 ms/op
                 executeQuery·p0.00:   3883.926 ms/op
                 executeQuery·p0.50:   3917.480 ms/op
                 executeQuery·p0.90:   3951.034 ms/op
                 executeQuery·p0.95:   3951.034 ms/op
                 executeQuery·p0.99:   3951.034 ms/op
                 executeQuery·p0.999:  3951.034 ms/op
                 executeQuery·p0.9999: 3951.034 ms/op
                 executeQuery·p1.00:   3951.034 ms/op

Iteration   4: 3934.257 ±(99.9%) 202.452 ms/op
                 executeQuery·p0.00:   3921.674 ms/op
                 executeQuery·p0.50:   3938.451 ms/op
                 executeQuery·p0.90:   3942.646 ms/op
                 executeQuery·p0.95:   3942.646 ms/op
                 executeQuery·p0.99:   3942.646 ms/op
                 executeQuery·p0.999:  3942.646 ms/op
                 executeQuery·p0.9999: 3942.646 ms/op
                 executeQuery·p1.00:   3942.646 ms/op

Iteration   5: 3918.878 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   3909.091 ms/op
                 executeQuery·p0.50:   3909.091 ms/op
                 executeQuery·p0.90:   3938.451 ms/op
                 executeQuery·p0.95:   3938.451 ms/op
                 executeQuery·p0.99:   3938.451 ms/op
                 executeQuery·p0.999:  3938.451 ms/op
                 executeQuery·p0.9999: 3938.451 ms/op
                 executeQuery·p1.00:   3938.451 ms/op


# Run progress: 82.74% complete, ETA 01:33:45
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4120.205 ±(99.9%) 2342.720 ms/op
# Warmup Iteration   2: 4149.565 ±(99.9%) 5554.580 ms/op
# Warmup Iteration   3: 3927.267 ±(99.9%) 159.288 ms/op
# Warmup Iteration   4: 3931.461 ±(99.9%) 233.772 ms/op
# Warmup Iteration   5: 3967.812 ±(99.9%) 202.452 ms/op
Iteration   1: 3966.413 ±(99.9%) 176.715 ms/op
                 executeQuery·p0.00:   3955.229 ms/op
                 executeQuery·p0.50:   3972.006 ms/op
                 executeQuery·p0.90:   3972.006 ms/op
                 executeQuery·p0.95:   3972.006 ms/op
                 executeQuery·p0.99:   3972.006 ms/op
                 executeQuery·p0.999:  3972.006 ms/op
                 executeQuery·p0.9999: 3972.006 ms/op
                 executeQuery·p1.00:   3972.006 ms/op

Iteration   2: 3960.821 ±(99.9%) 192.570 ms/op
                 executeQuery·p0.00:   3951.034 ms/op
                 executeQuery·p0.50:   3959.423 ms/op
                 executeQuery·p0.90:   3972.006 ms/op
                 executeQuery·p0.95:   3972.006 ms/op
                 executeQuery·p0.99:   3972.006 ms/op
                 executeQuery·p0.999:  3972.006 ms/op
                 executeQuery·p0.9999: 3972.006 ms/op
                 executeQuery·p1.00:   3972.006 ms/op

Iteration   3: 3973.404 ±(99.9%) 245.976 ms/op
                 executeQuery·p0.00:   3963.617 ms/op
                 executeQuery·p0.50:   3967.812 ms/op
                 executeQuery·p0.90:   3988.783 ms/op
                 executeQuery·p0.95:   3988.783 ms/op
                 executeQuery·p0.99:   3988.783 ms/op
                 executeQuery·p0.999:  3988.783 ms/op
                 executeQuery·p0.9999: 3988.783 ms/op
                 executeQuery·p1.00:   3988.783 ms/op

Iteration   4: 4029.328 ±(99.9%) 2346.466 ms/op
                 executeQuery·p0.00:   3946.840 ms/op
                 executeQuery·p0.50:   3963.617 ms/op
                 executeQuery·p0.90:   4177.527 ms/op
                 executeQuery·p0.95:   4177.527 ms/op
                 executeQuery·p0.99:   4177.527 ms/op
                 executeQuery·p0.999:  4177.527 ms/op
                 executeQuery·p0.9999: 4177.527 ms/op
                 executeQuery·p1.00:   4177.527 ms/op

Iteration   5: 3945.442 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   3930.063 ms/op
                 executeQuery·p0.50:   3942.646 ms/op
                 executeQuery·p0.90:   3963.617 ms/op
                 executeQuery·p0.95:   3963.617 ms/op
                 executeQuery·p0.99:   3963.617 ms/op
                 executeQuery·p0.999:  3963.617 ms/op
                 executeQuery·p0.9999: 3963.617 ms/op
                 executeQuery·p1.00:   3963.617 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   3946.980 ±(99.9%) 33.936 ms/op

  Histogram, ms/op:
    [3800.000, 3825.000) = 0 
    [3825.000, 3850.000) = 0 
    [3850.000, 3875.000) = 0 
    [3875.000, 3900.000) = 1 
    [3900.000, 3925.000) = 10 
    [3925.000, 3950.000) = 6 
    [3950.000, 3975.000) = 11 
    [3975.000, 4000.000) = 1 
    [4000.000, 4025.000) = 0 
    [4025.000, 4050.000) = 0 
    [4050.000, 4075.000) = 0 
    [4075.000, 4100.000) = 0 
    [4100.000, 4125.000) = 0 
    [4125.000, 4150.000) = 0 
    [4150.000, 4175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3883.926 ms/op
     p(50.0000) =   3942.646 ms/op
     p(90.0000) =   3972.006 ms/op
     p(95.0000) =   4073.718 ms/op
     p(99.0000) =   4177.527 ms/op
     p(99.9000) =   4177.527 ms/op
     p(99.9900) =   4177.527 ms/op
     p(99.9990) =   4177.527 ms/op
     p(99.9999) =   4177.527 ms/op
    p(100.0000) =   4177.527 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 83.33% complete, ETA 01:30:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 460.039 ±(99.9%) 29.094 ms/op
# Warmup Iteration   2: 441.542 ±(99.9%) 10.339 ms/op
# Warmup Iteration   3: 435.820 ±(99.9%) 2.233 ms/op
# Warmup Iteration   4: 434.680 ±(99.9%) 8.991 ms/op
# Warmup Iteration   5: 431.773 ±(99.9%) 1.961 ms/op
Iteration   1: 440.151 ±(99.9%) 16.771 ms/op
                 executeQuery·p0.00:   429.392 ms/op
                 executeQuery·p0.50:   433.062 ms/op
                 executeQuery·p0.90:   481.087 ms/op
                 executeQuery·p0.95:   508.769 ms/op
                 executeQuery·p0.99:   513.802 ms/op
                 executeQuery·p0.999:  513.802 ms/op
                 executeQuery·p0.9999: 513.802 ms/op
                 executeQuery·p1.00:   513.802 ms/op

Iteration   2: 436.413 ±(99.9%) 1.519 ms/op
                 executeQuery·p0.00:   429.916 ms/op
                 executeQuery·p0.50:   437.256 ms/op
                 executeQuery·p0.90:   437.780 ms/op
                 executeQuery·p0.95:   438.619 ms/op
                 executeQuery·p0.99:   438.829 ms/op
                 executeQuery·p0.999:  438.829 ms/op
                 executeQuery·p0.9999: 438.829 ms/op
                 executeQuery·p1.00:   438.829 ms/op

Iteration   3: 438.715 ±(99.9%) 15.014 ms/op
                 executeQuery·p0.00:   432.538 ms/op
                 executeQuery·p0.50:   434.110 ms/op
                 executeQuery·p0.90:   438.619 ms/op
                 executeQuery·p0.95:   508.035 ms/op
                 executeQuery·p0.99:   525.337 ms/op
                 executeQuery·p0.999:  525.337 ms/op
                 executeQuery·p0.9999: 525.337 ms/op
                 executeQuery·p1.00:   525.337 ms/op

Iteration   4: 438.487 ±(99.9%) 3.454 ms/op
                 executeQuery·p0.00:   433.586 ms/op
                 executeQuery·p0.50:   436.732 ms/op
                 executeQuery·p0.90:   444.387 ms/op
                 executeQuery·p0.95:   445.016 ms/op
                 executeQuery·p0.99:   445.121 ms/op
                 executeQuery·p0.999:  445.121 ms/op
                 executeQuery·p0.9999: 445.121 ms/op
                 executeQuery·p1.00:   445.121 ms/op

Iteration   5: 444.596 ±(99.9%) 1.008 ms/op
                 executeQuery·p0.00:   442.499 ms/op
                 executeQuery·p0.50:   445.121 ms/op
                 executeQuery·p0.90:   446.169 ms/op
                 executeQuery·p0.95:   446.589 ms/op
                 executeQuery·p0.99:   446.693 ms/op
                 executeQuery·p0.999:  446.693 ms/op
                 executeQuery·p0.9999: 446.693 ms/op
                 executeQuery·p1.00:   446.693 ms/op


# Run progress: 83.93% complete, ETA 01:26:45
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 413.265 ±(99.9%) 19.349 ms/op
# Warmup Iteration   2: 361.965 ±(99.9%) 1.657 ms/op
# Warmup Iteration   3: 362.508 ±(99.9%) 1.299 ms/op
# Warmup Iteration   4: 364.680 ±(99.9%) 1.878 ms/op
# Warmup Iteration   5: 368.855 ±(99.9%) 8.141 ms/op
Iteration   1: 363.463 ±(99.9%) 0.973 ms/op
                 executeQuery·p0.00:   361.759 ms/op
                 executeQuery·p0.50:   363.069 ms/op
                 executeQuery·p0.90:   365.586 ms/op
                 executeQuery·p0.95:   367.002 ms/op
                 executeQuery·p0.99:   367.002 ms/op
                 executeQuery·p0.999:  367.002 ms/op
                 executeQuery·p0.9999: 367.002 ms/op
                 executeQuery·p1.00:   367.002 ms/op

Iteration   2: 362.058 ±(99.9%) 0.841 ms/op
                 executeQuery·p0.00:   360.186 ms/op
                 executeQuery·p0.50:   361.759 ms/op
                 executeQuery·p0.90:   363.908 ms/op
                 executeQuery·p0.95:   364.669 ms/op
                 executeQuery·p0.99:   364.904 ms/op
                 executeQuery·p0.999:  364.904 ms/op
                 executeQuery·p0.9999: 364.904 ms/op
                 executeQuery·p1.00:   364.904 ms/op

Iteration   3: 362.489 ±(99.9%) 1.408 ms/op
                 executeQuery·p0.00:   360.710 ms/op
                 executeQuery·p0.50:   361.759 ms/op
                 executeQuery·p0.90:   364.433 ms/op
                 executeQuery·p0.95:   368.365 ms/op
                 executeQuery·p0.99:   371.196 ms/op
                 executeQuery·p0.999:  371.196 ms/op
                 executeQuery·p0.9999: 371.196 ms/op
                 executeQuery·p1.00:   371.196 ms/op

Iteration   4: 363.294 ±(99.9%) 3.561 ms/op
                 executeQuery·p0.00:   360.710 ms/op
                 executeQuery·p0.50:   362.283 ms/op
                 executeQuery·p0.90:   363.856 ms/op
                 executeQuery·p0.95:   377.697 ms/op
                 executeQuery·p0.99:   389.022 ms/op
                 executeQuery·p0.999:  389.022 ms/op
                 executeQuery·p0.9999: 389.022 ms/op
                 executeQuery·p1.00:   389.022 ms/op

Iteration   5: 363.257 ±(99.9%) 0.860 ms/op
                 executeQuery·p0.00:   360.710 ms/op
                 executeQuery·p0.50:   363.856 ms/op
                 executeQuery·p0.90:   364.904 ms/op
                 executeQuery·p0.95:   365.193 ms/op
                 executeQuery·p0.99:   365.429 ms/op
                 executeQuery·p0.999:  365.429 ms/op
                 executeQuery·p0.9999: 365.429 ms/op
                 executeQuery·p1.00:   365.429 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 255
  mean =    397.530 ±(99.9%) 8.193 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 139 
    [375.000, 400.000) = 1 
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 111 
    [450.000, 475.000) = 1 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 1 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    360.186 ms/op
     p(50.0000) =    364.380 ms/op
     p(90.0000) =    443.548 ms/op
     p(95.0000) =    445.121 ms/op
     p(99.0000) =    499.709 ms/op
     p(99.9000) =    525.337 ms/op
     p(99.9900) =    525.337 ms/op
     p(99.9990) =    525.337 ms/op
     p(99.9999) =    525.337 ms/op
    p(100.0000) =    525.337 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 84.52% complete, ETA 01:23:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3917.480 ±(99.9%) 4467.729 ms/op
# Warmup Iteration   2: 4044.707 ±(99.9%) 3789.336 ms/op
# Warmup Iteration   3: 4047.503 ±(99.9%) 132.536 ms/op
# Warmup Iteration   4: 4075.465 ±(99.9%) 220.893 ms/op
# Warmup Iteration   5: 4054.494 ±(99.9%) 116.886 ms/op
Iteration   1: 4060.086 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   4055.892 ms/op
                 executeQuery·p0.50:   4060.086 ms/op
                 executeQuery·p0.90:   4064.281 ms/op
                 executeQuery·p0.95:   4064.281 ms/op
                 executeQuery·p0.99:   4064.281 ms/op
                 executeQuery·p0.999:  4064.281 ms/op
                 executeQuery·p0.9999: 4064.281 ms/op
                 executeQuery·p1.00:   4064.281 ms/op

Iteration   2: 4072.669 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   4068.475 ms/op
                 executeQuery·p0.50:   4072.669 ms/op
                 executeQuery·p0.90:   4076.863 ms/op
                 executeQuery·p0.95:   4076.863 ms/op
                 executeQuery·p0.99:   4076.863 ms/op
                 executeQuery·p0.999:  4076.863 ms/op
                 executeQuery·p0.9999: 4076.863 ms/op
                 executeQuery·p1.00:   4076.863 ms/op

Iteration   3: 4054.494 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   4047.503 ms/op
                 executeQuery·p0.50:   4051.698 ms/op
                 executeQuery·p0.90:   4064.281 ms/op
                 executeQuery·p0.95:   4064.281 ms/op
                 executeQuery·p0.99:   4064.281 ms/op
                 executeQuery·p0.999:  4064.281 ms/op
                 executeQuery·p0.9999: 4064.281 ms/op
                 executeQuery·p1.00:   4064.281 ms/op

Iteration   4: 4057.290 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   4051.698 ms/op
                 executeQuery·p0.50:   4055.892 ms/op
                 executeQuery·p0.90:   4064.281 ms/op
                 executeQuery·p0.95:   4064.281 ms/op
                 executeQuery·p0.99:   4064.281 ms/op
                 executeQuery·p0.999:  4064.281 ms/op
                 executeQuery·p0.9999: 4064.281 ms/op
                 executeQuery·p1.00:   4064.281 ms/op

Iteration   5: 4057.290 ±(99.9%) 385.141 ms/op
                 executeQuery·p0.00:   4034.920 ms/op
                 executeQuery·p0.50:   4060.086 ms/op
                 executeQuery·p0.90:   4076.863 ms/op
                 executeQuery·p0.95:   4076.863 ms/op
                 executeQuery·p0.99:   4076.863 ms/op
                 executeQuery·p0.999:  4076.863 ms/op
                 executeQuery·p0.9999: 4076.863 ms/op
                 executeQuery·p1.00:   4076.863 ms/op


# Run progress: 85.12% complete, ETA 01:19:51
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4136.982 ±(99.9%) 7743.377 ms/op
# Warmup Iteration   2: 4163.546 ±(99.9%) 3954.177 ms/op
# Warmup Iteration   3: 4331.318 ±(99.9%) 723.236 ms/op
# Warmup Iteration   4: 4278.190 ±(99.9%) 76.520 ms/op
# Warmup Iteration   5: 4289.375 ±(99.9%) 233.772 ms/op
Iteration   1: 4331.318 ±(99.9%) 1158.796 ms/op
                 executeQuery·p0.00:   4286.579 ms/op
                 executeQuery·p0.50:   4303.356 ms/op
                 executeQuery·p0.90:   4404.019 ms/op
                 executeQuery·p0.95:   4404.019 ms/op
                 executeQuery·p0.99:   4404.019 ms/op
                 executeQuery·p0.999:  4404.019 ms/op
                 executeQuery·p0.9999: 4404.019 ms/op
                 executeQuery·p1.00:   4404.019 ms/op

Iteration   2: 4290.773 ±(99.9%) 132.536 ms/op
                 executeQuery·p0.00:   4282.384 ms/op
                 executeQuery·p0.50:   4294.967 ms/op
                 executeQuery·p0.90:   4294.967 ms/op
                 executeQuery·p0.95:   4294.967 ms/op
                 executeQuery·p0.99:   4294.967 ms/op
                 executeQuery·p0.999:  4294.967 ms/op
                 executeQuery·p0.9999: 4294.967 ms/op
                 executeQuery·p1.00:   4294.967 ms/op

Iteration   3: 4286.579 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   4282.384 ms/op
                 executeQuery·p0.50:   4286.579 ms/op
                 executeQuery·p0.90:   4290.773 ms/op
                 executeQuery·p0.95:   4290.773 ms/op
                 executeQuery·p0.99:   4290.773 ms/op
                 executeQuery·p0.999:  4290.773 ms/op
                 executeQuery·p0.9999: 4290.773 ms/op
                 executeQuery·p1.00:   4290.773 ms/op

Iteration   4: 4308.948 ±(99.9%) 974.938 ms/op
                 executeQuery·p0.00:   4273.996 ms/op
                 executeQuery·p0.50:   4282.384 ms/op
                 executeQuery·p0.90:   4370.465 ms/op
                 executeQuery·p0.95:   4370.465 ms/op
                 executeQuery·p0.99:   4370.465 ms/op
                 executeQuery·p0.999:  4370.465 ms/op
                 executeQuery·p0.9999: 4370.465 ms/op
                 executeQuery·p1.00:   4370.465 ms/op

Iteration   5: 4269.801 ±(99.9%) 132.536 ms/op
                 executeQuery·p0.00:   4261.413 ms/op
                 executeQuery·p0.50:   4273.996 ms/op
                 executeQuery·p0.90:   4273.996 ms/op
                 executeQuery·p0.95:   4273.996 ms/op
                 executeQuery·p0.99:   4273.996 ms/op
                 executeQuery·p0.999:  4273.996 ms/op
                 executeQuery·p0.9999: 4273.996 ms/op
                 executeQuery·p1.00:   4273.996 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 30
  mean =   4178.925 ±(99.9%) 82.682 ms/op

  Histogram, ms/op:
    [4000.000, 4050.000) = 2 
    [4050.000, 4100.000) = 13 
    [4100.000, 4150.000) = 0 
    [4150.000, 4200.000) = 0 
    [4200.000, 4250.000) = 0 
    [4250.000, 4300.000) = 12 
    [4300.000, 4350.000) = 1 
    [4350.000, 4400.000) = 1 
    [4400.000, 4450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4034.920 ms/op
     p(50.0000) =   4169.138 ms/op
     p(90.0000) =   4302.517 ms/op
     p(95.0000) =   4385.564 ms/op
     p(99.0000) =   4404.019 ms/op
     p(99.9000) =   4404.019 ms/op
     p(99.9900) =   4404.019 ms/op
     p(99.9990) =   4404.019 ms/op
     p(99.9999) =   4404.019 ms/op
    p(100.0000) =   4404.019 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 85.71% complete, ETA 01:16:29
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 197.531 ±(99.9%) 19.886 ms/op
# Warmup Iteration   2: 182.342 ±(99.9%) 3.197 ms/op
# Warmup Iteration   3: 179.537 ±(99.9%) 1.463 ms/op
# Warmup Iteration   4: 184.437 ±(99.9%) 2.362 ms/op
# Warmup Iteration   5: 188.361 ±(99.9%) 2.554 ms/op
Iteration   1: 186.133 ±(99.9%) 2.280 ms/op
                 executeQuery·p0.00:   175.112 ms/op
                 executeQuery·p0.50:   187.171 ms/op
                 executeQuery·p0.90:   191.103 ms/op
                 executeQuery·p0.95:   192.676 ms/op
                 executeQuery·p0.99:   194.773 ms/op
                 executeQuery·p0.999:  194.773 ms/op
                 executeQuery·p0.9999: 194.773 ms/op
                 executeQuery·p1.00:   194.773 ms/op

Iteration   2: 187.646 ±(99.9%) 1.864 ms/op
                 executeQuery·p0.00:   177.734 ms/op
                 executeQuery·p0.50:   188.482 ms/op
                 executeQuery·p0.90:   191.706 ms/op
                 executeQuery·p0.95:   192.676 ms/op
                 executeQuery·p0.99:   192.938 ms/op
                 executeQuery·p0.999:  192.938 ms/op
                 executeQuery·p0.9999: 192.938 ms/op
                 executeQuery·p1.00:   192.938 ms/op

Iteration   3: 188.050 ±(99.9%) 2.325 ms/op
                 executeQuery·p0.00:   177.471 ms/op
                 executeQuery·p0.50:   188.744 ms/op
                 executeQuery·p0.90:   193.724 ms/op
                 executeQuery·p0.95:   193.987 ms/op
                 executeQuery·p0.99:   195.035 ms/op
                 executeQuery·p0.999:  195.035 ms/op
                 executeQuery·p0.9999: 195.035 ms/op
                 executeQuery·p1.00:   195.035 ms/op

Iteration   4: 191.945 ±(99.9%) 2.000 ms/op
                 executeQuery·p0.00:   175.636 ms/op
                 executeQuery·p0.50:   192.152 ms/op
                 executeQuery·p0.90:   195.822 ms/op
                 executeQuery·p0.95:   195.979 ms/op
                 executeQuery·p0.99:   196.346 ms/op
                 executeQuery·p0.999:  196.346 ms/op
                 executeQuery·p0.9999: 196.346 ms/op
                 executeQuery·p1.00:   196.346 ms/op

Iteration   5: 187.235 ±(99.9%) 1.915 ms/op
                 executeQuery·p0.00:   180.355 ms/op
                 executeQuery·p0.50:   187.433 ms/op
                 executeQuery·p0.90:   192.152 ms/op
                 executeQuery·p0.95:   193.069 ms/op
                 executeQuery·p0.99:   193.462 ms/op
                 executeQuery·p0.999:  193.462 ms/op
                 executeQuery·p0.9999: 193.462 ms/op
                 executeQuery·p1.00:   193.462 ms/op


# Run progress: 86.31% complete, ETA 01:13:04
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 187.912 ±(99.9%) 15.940 ms/op
# Warmup Iteration   2: 179.502 ±(99.9%) 2.730 ms/op
# Warmup Iteration   3: 177.564 ±(99.9%) 1.759 ms/op
# Warmup Iteration   4: 178.135 ±(99.9%) 1.545 ms/op
# Warmup Iteration   5: 176.378 ±(99.9%) 1.432 ms/op
Iteration   1: 177.728 ±(99.9%) 1.831 ms/op
                 executeQuery·p0.00:   170.918 ms/op
                 executeQuery·p0.50:   177.471 ms/op
                 executeQuery·p0.90:   184.078 ms/op
                 executeQuery·p0.95:   184.654 ms/op
                 executeQuery·p0.99:   186.384 ms/op
                 executeQuery·p0.999:  186.384 ms/op
                 executeQuery·p0.9999: 186.384 ms/op
                 executeQuery·p1.00:   186.384 ms/op

Iteration   2: 175.606 ±(99.9%) 1.547 ms/op
                 executeQuery·p0.00:   169.869 ms/op
                 executeQuery·p0.50:   174.981 ms/op
                 executeQuery·p0.90:   182.111 ms/op
                 executeQuery·p0.95:   183.160 ms/op
                 executeQuery·p0.99:   183.763 ms/op
                 executeQuery·p0.999:  183.763 ms/op
                 executeQuery·p0.9999: 183.763 ms/op
                 executeQuery·p1.00:   183.763 ms/op

Iteration   3: 176.171 ±(99.9%) 1.985 ms/op
                 executeQuery·p0.00:   170.131 ms/op
                 executeQuery·p0.50:   175.243 ms/op
                 executeQuery·p0.90:   183.763 ms/op
                 executeQuery·p0.95:   184.576 ms/op
                 executeQuery·p0.99:   185.860 ms/op
                 executeQuery·p0.999:  185.860 ms/op
                 executeQuery·p0.9999: 185.860 ms/op
                 executeQuery·p1.00:   185.860 ms/op

Iteration   4: 175.384 ±(99.9%) 1.887 ms/op
                 executeQuery·p0.00:   168.821 ms/op
                 executeQuery·p0.50:   174.588 ms/op
                 executeQuery·p0.90:   183.239 ms/op
                 executeQuery·p0.95:   184.300 ms/op
                 executeQuery·p0.99:   185.074 ms/op
                 executeQuery·p0.999:  185.074 ms/op
                 executeQuery·p0.9999: 185.074 ms/op
                 executeQuery·p1.00:   185.074 ms/op

Iteration   5: 171.962 ±(99.9%) 0.827 ms/op
                 executeQuery·p0.00:   169.345 ms/op
                 executeQuery·p0.50:   171.704 ms/op
                 executeQuery·p0.90:   174.064 ms/op
                 executeQuery·p0.95:   174.142 ms/op
                 executeQuery·p0.99:   178.782 ms/op
                 executeQuery·p0.999:  178.782 ms/op
                 executeQuery·p0.9999: 178.782 ms/op
                 executeQuery·p1.00:   178.782 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 501
  mean =    181.518 ±(99.9%) 1.135 ms/op

  Histogram, ms/op:
    [160.000, 162.500) = 0 
    [162.500, 165.000) = 0 
    [165.000, 167.500) = 0 
    [167.500, 170.000) = 11 
    [170.000, 172.500) = 51 
    [172.500, 175.000) = 79 
    [175.000, 177.500) = 73 
    [177.500, 180.000) = 25 
    [180.000, 182.500) = 30 
    [182.500, 185.000) = 52 
    [185.000, 187.500) = 35 
    [187.500, 190.000) = 49 
    [190.000, 192.500) = 55 
    [192.500, 195.000) = 31 
    [195.000, 197.500) = 10 

  Percentiles, ms/op:
      p(0.0000) =    168.821 ms/op
     p(50.0000) =    181.404 ms/op
     p(90.0000) =    191.889 ms/op
     p(95.0000) =    193.698 ms/op
     p(99.0000) =    195.816 ms/op
     p(99.9000) =    196.346 ms/op
     p(99.9900) =    196.346 ms/op
     p(99.9990) =    196.346 ms/op
     p(99.9999) =    196.346 ms/op
    p(100.0000) =    196.346 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 86.90% complete, ETA 01:09:40
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3502.244 ms/op
# Warmup Iteration   2: 2462.056 ms/op
# Warmup Iteration   3: 2299.527 ms/op
# Warmup Iteration   4: 2153.775 ±(99.9%) 4937.301 ms/op
# Warmup Iteration   5: 1989.498 ±(99.9%) 588.174 ms/op
Iteration   1: 2016.062 ±(99.9%) 728.279 ms/op
                 executeQuery·p0.00:   1977.614 ms/op
                 executeQuery·p0.50:   2013.266 ms/op
                 executeQuery·p0.90:   2057.306 ms/op
                 executeQuery·p0.95:   2057.306 ms/op
                 executeQuery·p0.99:   2057.306 ms/op
                 executeQuery·p0.999:  2057.306 ms/op
                 executeQuery·p0.9999: 2057.306 ms/op
                 executeQuery·p1.00:   2057.306 ms/op

Iteration   2: 2030.043 ±(99.9%) 114.780 ms/op
                 executeQuery·p0.00:   2023.752 ms/op
                 executeQuery·p0.50:   2030.043 ms/op
                 executeQuery·p0.90:   2036.335 ms/op
                 executeQuery·p0.95:   2036.335 ms/op
                 executeQuery·p0.99:   2036.335 ms/op
                 executeQuery·p0.999:  2036.335 ms/op
                 executeQuery·p0.9999: 2036.335 ms/op
                 executeQuery·p1.00:   2036.335 ms/op

Iteration   3: 2036.335 ±(99.9%) 250.887 ms/op
                 executeQuery·p0.00:   2023.752 ms/op
                 executeQuery·p0.50:   2034.237 ms/op
                 executeQuery·p0.90:   2051.015 ms/op
                 executeQuery·p0.95:   2051.015 ms/op
                 executeQuery·p0.99:   2051.015 ms/op
                 executeQuery·p0.999:  2051.015 ms/op
                 executeQuery·p0.9999: 2051.015 ms/op
                 executeQuery·p1.00:   2051.015 ms/op

Iteration   4: 2036.335 ±(99.9%) 636.771 ms/op
                 executeQuery·p0.00:   2011.169 ms/op
                 executeQuery·p0.50:   2021.655 ms/op
                 executeQuery·p0.90:   2076.180 ms/op
                 executeQuery·p0.95:   2076.180 ms/op
                 executeQuery·p0.99:   2076.180 ms/op
                 executeQuery·p0.999:  2076.180 ms/op
                 executeQuery·p0.9999: 2076.180 ms/op
                 executeQuery·p1.00:   2076.180 ms/op

Iteration   5: 2029.344 ±(99.9%) 217.555 ms/op
                 executeQuery·p0.00:   2019.557 ms/op
                 executeQuery·p0.50:   2025.849 ms/op
                 executeQuery·p0.90:   2042.626 ms/op
                 executeQuery·p0.95:   2042.626 ms/op
                 executeQuery·p0.99:   2042.626 ms/op
                 executeQuery·p0.999:  2042.626 ms/op
                 executeQuery·p0.9999: 2042.626 ms/op
                 executeQuery·p1.00:   2042.626 ms/op


# Run progress: 87.50% complete, ETA 01:06:19
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3539.993 ms/op
# Warmup Iteration   2: 2470.445 ms/op
# Warmup Iteration   3: 2501.902 ms/op
# Warmup Iteration   4: 2148.183 ±(99.9%) 5887.089 ms/op
# Warmup Iteration   5: 1951.749 ±(99.9%) 650.793 ms/op
Iteration   1: 2000.683 ±(99.9%) 303.678 ms/op
                 executeQuery·p0.00:   1988.100 ms/op
                 executeQuery·p0.50:   1994.392 ms/op
                 executeQuery·p0.90:   2019.557 ms/op
                 executeQuery·p0.95:   2019.557 ms/op
                 executeQuery·p0.99:   2019.557 ms/op
                 executeQuery·p0.999:  2019.557 ms/op
                 executeQuery·p0.9999: 2019.557 ms/op
                 executeQuery·p1.00:   2019.557 ms/op

Iteration   2: 2006.275 ±(99.9%) 651.916 ms/op
                 executeQuery·p0.00:   1965.031 ms/op
                 executeQuery·p0.50:   2025.849 ms/op
                 executeQuery·p0.90:   2027.946 ms/op
                 executeQuery·p0.95:   2027.946 ms/op
                 executeQuery·p0.99:   2027.946 ms/op
                 executeQuery·p0.999:  2027.946 ms/op
                 executeQuery·p0.9999: 2027.946 ms/op
                 executeQuery·p1.00:   2027.946 ms/op

Iteration   3: 1976.915 ±(99.9%) 554.878 ms/op
                 executeQuery·p0.00:   1946.157 ms/op
                 executeQuery·p0.50:   1977.614 ms/op
                 executeQuery·p0.90:   2006.974 ms/op
                 executeQuery·p0.95:   2006.974 ms/op
                 executeQuery·p0.99:   2006.974 ms/op
                 executeQuery·p0.999:  2006.974 ms/op
                 executeQuery·p0.9999: 2006.974 ms/op
                 executeQuery·p1.00:   2006.974 ms/op

Iteration   4: 1970.624 ±(99.9%) 361.618 ms/op
                 executeQuery·p0.00:   1948.254 ms/op
                 executeQuery·p0.50:   1977.614 ms/op
                 executeQuery·p0.90:   1986.003 ms/op
                 executeQuery·p0.95:   1986.003 ms/op
                 executeQuery·p0.99:   1986.003 ms/op
                 executeQuery·p0.999:  1986.003 ms/op
                 executeQuery·p0.9999: 1986.003 ms/op
                 executeQuery·p1.00:   1986.003 ms/op

Iteration   5: 1962.934 ±(99.9%) 202.452 ms/op
                 executeQuery·p0.00:   1954.546 ms/op
                 executeQuery·p0.50:   1958.740 ms/op
                 executeQuery·p0.90:   1975.517 ms/op
                 executeQuery·p0.95:   1975.517 ms/op
                 executeQuery·p0.99:   1975.517 ms/op
                 executeQuery·p0.999:  1975.517 ms/op
                 executeQuery·p0.9999: 1975.517 ms/op
                 executeQuery·p1.00:   1975.517 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   2006.555 ±(99.9%) 22.701 ms/op

  Histogram, ms/op:
    [1900.000, 1912.500) = 0 
    [1912.500, 1925.000) = 0 
    [1925.000, 1937.500) = 0 
    [1937.500, 1950.000) = 2 
    [1950.000, 1962.500) = 2 
    [1962.500, 1975.000) = 1 
    [1975.000, 1987.500) = 5 
    [1987.500, 2000.000) = 2 
    [2000.000, 2012.500) = 2 
    [2012.500, 2025.000) = 6 
    [2025.000, 2037.500) = 6 
    [2037.500, 2050.000) = 1 
    [2050.000, 2062.500) = 2 
    [2062.500, 2075.000) = 0 
    [2075.000, 2087.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1946.157 ms/op
     p(50.0000) =   2016.412 ms/op
     p(90.0000) =   2050.176 ms/op
     p(95.0000) =   2065.800 ms/op
     p(99.0000) =   2076.180 ms/op
     p(99.9000) =   2076.180 ms/op
     p(99.9900) =   2076.180 ms/op
     p(99.9990) =   2076.180 ms/op
     p(99.9999) =   2076.180 ms/op
    p(100.0000) =   2076.180 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 88.10% complete, ETA 01:02:59
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 181.934 ±(99.9%) 16.231 ms/op
# Warmup Iteration   2: 170.290 ±(99.9%) 1.367 ms/op
# Warmup Iteration   3: 170.695 ±(99.9%) 1.596 ms/op
# Warmup Iteration   4: 170.967 ±(99.9%) 0.989 ms/op
# Warmup Iteration   5: 171.483 ±(99.9%) 1.501 ms/op
Iteration   1: 171.982 ±(99.9%) 1.070 ms/op
                 executeQuery·p0.00:   165.413 ms/op
                 executeQuery·p0.50:   172.491 ms/op
                 executeQuery·p0.90:   173.985 ms/op
                 executeQuery·p0.95:   174.601 ms/op
                 executeQuery·p0.99:   175.899 ms/op
                 executeQuery·p0.999:  175.899 ms/op
                 executeQuery·p0.9999: 175.899 ms/op
                 executeQuery·p1.00:   175.899 ms/op

Iteration   2: 171.407 ±(99.9%) 1.140 ms/op
                 executeQuery·p0.00:   165.413 ms/op
                 executeQuery·p0.50:   172.229 ms/op
                 executeQuery·p0.90:   173.723 ms/op
                 executeQuery·p0.95:   174.064 ms/op
                 executeQuery·p0.99:   174.850 ms/op
                 executeQuery·p0.999:  174.850 ms/op
                 executeQuery·p0.9999: 174.850 ms/op
                 executeQuery·p1.00:   174.850 ms/op

Iteration   3: 169.479 ±(99.9%) 1.380 ms/op
                 executeQuery·p0.00:   162.791 ms/op
                 executeQuery·p0.50:   169.345 ms/op
                 executeQuery·p0.90:   172.648 ms/op
                 executeQuery·p0.95:   173.172 ms/op
                 executeQuery·p0.99:   175.112 ms/op
                 executeQuery·p0.999:  175.112 ms/op
                 executeQuery·p0.9999: 175.112 ms/op
                 executeQuery·p1.00:   175.112 ms/op

Iteration   4: 167.296 ±(99.9%) 1.313 ms/op
                 executeQuery·p0.00:   162.791 ms/op
                 executeQuery·p0.50:   167.379 ms/op
                 executeQuery·p0.90:   170.525 ms/op
                 executeQuery·p0.95:   170.787 ms/op
                 executeQuery·p0.99:   178.782 ms/op
                 executeQuery·p0.999:  178.782 ms/op
                 executeQuery·p0.9999: 178.782 ms/op
                 executeQuery·p1.00:   178.782 ms/op

Iteration   5: 167.874 ±(99.9%) 0.985 ms/op
                 executeQuery·p0.00:   162.529 ms/op
                 executeQuery·p0.50:   167.772 ms/op
                 executeQuery·p0.90:   170.656 ms/op
                 executeQuery·p0.95:   170.983 ms/op
                 executeQuery·p0.99:   171.442 ms/op
                 executeQuery·p0.999:  171.442 ms/op
                 executeQuery·p0.9999: 171.442 ms/op
                 executeQuery·p1.00:   171.442 ms/op


# Run progress: 88.69% complete, ETA 00:59:38
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 186.430 ±(99.9%) 16.336 ms/op
# Warmup Iteration   2: 175.072 ±(99.9%) 1.288 ms/op
# Warmup Iteration   3: 177.991 ±(99.9%) 1.308 ms/op
# Warmup Iteration   4: 178.181 ±(99.9%) 2.081 ms/op
# Warmup Iteration   5: 180.554 ±(99.9%) 2.181 ms/op
Iteration   1: 184.555 ±(99.9%) 1.879 ms/op
                 executeQuery·p0.00:   173.801 ms/op
                 executeQuery·p0.50:   185.860 ms/op
                 executeQuery·p0.90:   187.695 ms/op
                 executeQuery·p0.95:   188.350 ms/op
                 executeQuery·p0.99:   188.744 ms/op
                 executeQuery·p0.999:  188.744 ms/op
                 executeQuery·p0.9999: 188.744 ms/op
                 executeQuery·p1.00:   188.744 ms/op

Iteration   2: 182.222 ±(99.9%) 2.126 ms/op
                 executeQuery·p0.00:   174.064 ms/op
                 executeQuery·p0.50:   183.108 ms/op
                 executeQuery·p0.90:   187.433 ms/op
                 executeQuery·p0.95:   188.337 ms/op
                 executeQuery·p0.99:   188.482 ms/op
                 executeQuery·p0.999:  188.482 ms/op
                 executeQuery·p0.9999: 188.482 ms/op
                 executeQuery·p1.00:   188.482 ms/op

Iteration   3: 179.034 ±(99.9%) 2.532 ms/op
                 executeQuery·p0.00:   169.345 ms/op
                 executeQuery·p0.50:   177.996 ms/op
                 executeQuery·p0.90:   185.074 ms/op
                 executeQuery·p0.95:   185.965 ms/op
                 executeQuery·p0.99:   198.181 ms/op
                 executeQuery·p0.999:  198.181 ms/op
                 executeQuery·p0.9999: 198.181 ms/op
                 executeQuery·p1.00:   198.181 ms/op

Iteration   4: 179.265 ±(99.9%) 2.195 ms/op
                 executeQuery·p0.00:   170.656 ms/op
                 executeQuery·p0.50:   178.782 ms/op
                 executeQuery·p0.90:   185.860 ms/op
                 executeQuery·p0.95:   186.227 ms/op
                 executeQuery·p0.99:   187.957 ms/op
                 executeQuery·p0.999:  187.957 ms/op
                 executeQuery·p0.9999: 187.957 ms/op
                 executeQuery·p1.00:   187.957 ms/op

Iteration   5: 182.164 ±(99.9%) 3.033 ms/op
                 executeQuery·p0.00:   169.869 ms/op
                 executeQuery·p0.50:   181.010 ms/op
                 executeQuery·p0.90:   190.788 ms/op
                 executeQuery·p0.95:   192.125 ms/op
                 executeQuery·p0.99:   192.676 ms/op
                 executeQuery·p0.999:  192.676 ms/op
                 executeQuery·p0.9999: 192.676 ms/op
                 executeQuery·p1.00:   192.676 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 516
  mean =    175.336 ±(99.9%) 1.063 ms/op

  Histogram, ms/op:
    [160.000, 162.500) = 0 
    [162.500, 165.000) = 24 
    [165.000, 167.500) = 42 
    [167.500, 170.000) = 78 
    [170.000, 172.500) = 80 
    [172.500, 175.000) = 67 
    [175.000, 177.500) = 38 
    [177.500, 180.000) = 49 
    [180.000, 182.500) = 23 
    [182.500, 185.000) = 30 
    [185.000, 187.500) = 62 
    [187.500, 190.000) = 15 
    [190.000, 192.500) = 6 
    [192.500, 195.000) = 1 
    [195.000, 197.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    162.529 ms/op
     p(50.0000) =    173.539 ms/op
     p(90.0000) =    186.384 ms/op
     p(95.0000) =    187.433 ms/op
     p(99.0000) =    191.276 ms/op
     p(99.9000) =    198.181 ms/op
     p(99.9900) =    198.181 ms/op
     p(99.9990) =    198.181 ms/op
     p(99.9999) =    198.181 ms/op
    p(100.0000) =    198.181 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 89.29% complete, ETA 00:56:20
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3342.860 ms/op
# Warmup Iteration   2: 2527.068 ms/op
# Warmup Iteration   3: 2100.298 ms/op
# Warmup Iteration   4: 2059.403 ±(99.9%) 1327.568 ms/op
# Warmup Iteration   5: 2097.152 ±(99.9%) 101.226 ms/op
Iteration   1: 2053.811 ±(99.9%) 585.680 ms/op
                 executeQuery·p0.00:   2017.460 ms/op
                 executeQuery·p0.50:   2065.695 ms/op
                 executeQuery·p0.90:   2078.278 ms/op
                 executeQuery·p0.95:   2078.278 ms/op
                 executeQuery·p0.99:   2078.278 ms/op
                 executeQuery·p0.999:  2078.278 ms/op
                 executeQuery·p0.9999: 2078.278 ms/op
                 executeQuery·p1.00:   2078.278 ms/op

Iteration   2: 2097.851 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   2082.472 ms/op
                 executeQuery·p0.50:   2095.055 ms/op
                 executeQuery·p0.90:   2116.026 ms/op
                 executeQuery·p0.95:   2116.026 ms/op
                 executeQuery·p0.99:   2116.026 ms/op
                 executeQuery·p0.999:  2116.026 ms/op
                 executeQuery·p0.9999: 2116.026 ms/op
                 executeQuery·p1.00:   2116.026 ms/op

Iteration   3: 2115.327 ±(99.9%) 1258.123 ms/op
                 executeQuery·p0.00:   2063.598 ms/op
                 executeQuery·p0.50:   2088.763 ms/op
                 executeQuery·p0.90:   2193.621 ms/op
                 executeQuery·p0.95:   2193.621 ms/op
                 executeQuery·p0.99:   2193.621 ms/op
                 executeQuery·p0.999:  2193.621 ms/op
                 executeQuery·p0.9999: 2193.621 ms/op
                 executeQuery·p1.00:   2193.621 ms/op

Iteration   4: 2046.820 ±(99.9%) 413.844 ms/op
                 executeQuery·p0.00:   2027.946 ms/op
                 executeQuery·p0.50:   2040.529 ms/op
                 executeQuery·p0.90:   2071.986 ms/op
                 executeQuery·p0.95:   2071.986 ms/op
                 executeQuery·p0.99:   2071.986 ms/op
                 executeQuery·p0.999:  2071.986 ms/op
                 executeQuery·p0.9999: 2071.986 ms/op
                 executeQuery·p1.00:   2071.986 ms/op

Iteration   5: 2075.481 ±(99.9%) 575.596 ms/op
                 executeQuery·p0.00:   2055.209 ms/op
                 executeQuery·p0.50:   2059.403 ms/op
                 executeQuery·p0.90:   2111.832 ms/op
                 executeQuery·p0.95:   2111.832 ms/op
                 executeQuery·p0.99:   2111.832 ms/op
                 executeQuery·p0.999:  2111.832 ms/op
                 executeQuery·p0.9999: 2111.832 ms/op
                 executeQuery·p1.00:   2111.832 ms/op


# Run progress: 89.88% complete, ETA 00:53:03
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3435.135 ms/op
# Warmup Iteration   2: 2271.216 ms/op
# Warmup Iteration   3: 2096.103 ms/op
# Warmup Iteration   4: 2096.453 ±(99.9%) 122.988 ms/op
# Warmup Iteration   5: 2071.986 ±(99.9%) 862.333 ms/op
Iteration   1: 2071.986 ±(99.9%) 696.077 ms/op
                 executeQuery·p0.00:   2048.918 ms/op
                 executeQuery·p0.50:   2051.015 ms/op
                 executeQuery·p0.90:   2116.026 ms/op
                 executeQuery·p0.95:   2116.026 ms/op
                 executeQuery·p0.99:   2116.026 ms/op
                 executeQuery·p0.999:  2116.026 ms/op
                 executeQuery·p0.9999: 2116.026 ms/op
                 executeQuery·p1.00:   2116.026 ms/op

Iteration   2: 2053.811 ±(99.9%) 289.699 ms/op
                 executeQuery·p0.00:   2042.626 ms/op
                 executeQuery·p0.50:   2046.820 ms/op
                 executeQuery·p0.90:   2071.986 ms/op
                 executeQuery·p0.95:   2071.986 ms/op
                 executeQuery·p0.99:   2071.986 ms/op
                 executeQuery·p0.999:  2071.986 ms/op
                 executeQuery·p0.9999: 2071.986 ms/op
                 executeQuery·p1.00:   2071.986 ms/op

Iteration   3: 2053.811 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   2038.432 ms/op
                 executeQuery·p0.50:   2051.015 ms/op
                 executeQuery·p0.90:   2071.986 ms/op
                 executeQuery·p0.95:   2071.986 ms/op
                 executeQuery·p0.99:   2071.986 ms/op
                 executeQuery·p0.999:  2071.986 ms/op
                 executeQuery·p0.9999: 2071.986 ms/op
                 executeQuery·p1.00:   2071.986 ms/op

Iteration   4: 2038.432 ±(99.9%) 689.739 ms/op
                 executeQuery·p0.00:   1996.489 ms/op
                 executeQuery·p0.50:   2048.918 ms/op
                 executeQuery·p0.90:   2069.889 ms/op
                 executeQuery·p0.95:   2069.889 ms/op
                 executeQuery·p0.99:   2069.889 ms/op
                 executeQuery·p0.999:  2069.889 ms/op
                 executeQuery·p0.9999: 2069.889 ms/op
                 executeQuery·p1.00:   2069.889 ms/op

Iteration   5: 2044.024 ±(99.9%) 754.926 ms/op
                 executeQuery·p0.00:   1996.489 ms/op
                 executeQuery·p0.50:   2063.598 ms/op
                 executeQuery·p0.90:   2071.986 ms/op
                 executeQuery·p0.95:   2071.986 ms/op
                 executeQuery·p0.99:   2071.986 ms/op
                 executeQuery·p0.999:  2071.986 ms/op
                 executeQuery·p0.9999: 2071.986 ms/op
                 executeQuery·p1.00:   2071.986 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   2065.135 ±(99.9%) 25.519 ms/op

  Histogram, ms/op:
    [1900.000, 1925.000) = 0 
    [1925.000, 1950.000) = 0 
    [1950.000, 1975.000) = 0 
    [1975.000, 2000.000) = 2 
    [2000.000, 2025.000) = 1 
    [2025.000, 2050.000) = 7 
    [2050.000, 2075.000) = 12 
    [2075.000, 2100.000) = 4 
    [2100.000, 2125.000) = 3 
    [2125.000, 2150.000) = 0 
    [2150.000, 2175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1996.489 ms/op
     p(50.0000) =   2063.598 ms/op
     p(90.0000) =   2115.607 ms/op
     p(95.0000) =   2150.944 ms/op
     p(99.0000) =   2193.621 ms/op
     p(99.9000) =   2193.621 ms/op
     p(99.9900) =   2193.621 ms/op
     p(99.9990) =   2193.621 ms/op
     p(99.9999) =   2193.621 ms/op
    p(100.0000) =   2193.621 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 90.48% complete, ETA 00:49:48
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 188.913 ±(99.9%) 17.788 ms/op
# Warmup Iteration   2: 179.432 ±(99.9%) 2.970 ms/op
# Warmup Iteration   3: 179.202 ±(99.9%) 0.889 ms/op
# Warmup Iteration   4: 185.304 ±(99.9%) 2.536 ms/op
# Warmup Iteration   5: 180.255 ±(99.9%) 2.092 ms/op
Iteration   1: 177.107 ±(99.9%) 2.440 ms/op
                 executeQuery·p0.00:   170.656 ms/op
                 executeQuery·p0.50:   176.423 ms/op
                 executeQuery·p0.90:   185.388 ms/op
                 executeQuery·p0.95:   186.489 ms/op
                 executeQuery·p0.99:   189.268 ms/op
                 executeQuery·p0.999:  189.268 ms/op
                 executeQuery·p0.9999: 189.268 ms/op
                 executeQuery·p1.00:   189.268 ms/op

Iteration   2: 177.358 ±(99.9%) 2.936 ms/op
                 executeQuery·p0.00:   170.394 ms/op
                 executeQuery·p0.50:   175.636 ms/op
                 executeQuery·p0.90:   187.276 ms/op
                 executeQuery·p0.95:   189.006 ms/op
                 executeQuery·p0.99:   189.792 ms/op
                 executeQuery·p0.999:  189.792 ms/op
                 executeQuery·p0.9999: 189.792 ms/op
                 executeQuery·p1.00:   189.792 ms/op

Iteration   3: 176.387 ±(99.9%) 2.031 ms/op
                 executeQuery·p0.00:   169.869 ms/op
                 executeQuery·p0.50:   176.423 ms/op
                 executeQuery·p0.90:   179.254 ms/op
                 executeQuery·p0.95:   187.748 ms/op
                 executeQuery·p0.99:   189.792 ms/op
                 executeQuery·p0.999:  189.792 ms/op
                 executeQuery·p0.9999: 189.792 ms/op
                 executeQuery·p1.00:   189.792 ms/op

Iteration   4: 178.719 ±(99.9%) 2.668 ms/op
                 executeQuery·p0.00:   170.131 ms/op
                 executeQuery·p0.50:   177.996 ms/op
                 executeQuery·p0.90:   187.643 ms/op
                 executeQuery·p0.95:   189.504 ms/op
                 executeQuery·p0.99:   190.317 ms/op
                 executeQuery·p0.999:  190.317 ms/op
                 executeQuery·p0.9999: 190.317 ms/op
                 executeQuery·p1.00:   190.317 ms/op

Iteration   5: 174.996 ±(99.9%) 2.193 ms/op
                 executeQuery·p0.00:   168.821 ms/op
                 executeQuery·p0.50:   173.408 ms/op
                 executeQuery·p0.90:   180.879 ms/op
                 executeQuery·p0.95:   181.862 ms/op
                 executeQuery·p0.99:   182.977 ms/op
                 executeQuery·p0.999:  182.977 ms/op
                 executeQuery·p0.9999: 182.977 ms/op
                 executeQuery·p1.00:   182.977 ms/op


# Run progress: 91.07% complete, ETA 00:46:33
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 189.664 ±(99.9%) 16.343 ms/op
# Warmup Iteration   2: 177.970 ±(99.9%) 1.166 ms/op
# Warmup Iteration   3: 176.916 ±(99.9%) 1.609 ms/op
# Warmup Iteration   4: 184.089 ±(99.9%) 2.314 ms/op
# Warmup Iteration   5: 182.725 ±(99.9%) 2.323 ms/op
Iteration   1: 177.707 ±(99.9%) 0.757 ms/op
                 executeQuery·p0.00:   174.588 ms/op
                 executeQuery·p0.50:   177.734 ms/op
                 executeQuery·p0.90:   179.542 ms/op
                 executeQuery·p0.95:   180.735 ms/op
                 executeQuery·p0.99:   180.879 ms/op
                 executeQuery·p0.999:  180.879 ms/op
                 executeQuery·p0.9999: 180.879 ms/op
                 executeQuery·p1.00:   180.879 ms/op

Iteration   2: 179.647 ±(99.9%) 1.215 ms/op
                 executeQuery·p0.00:   176.947 ms/op
                 executeQuery·p0.50:   178.913 ms/op
                 executeQuery·p0.90:   181.666 ms/op
                 executeQuery·p0.95:   182.950 ms/op
                 executeQuery·p0.99:   193.462 ms/op
                 executeQuery·p0.999:  193.462 ms/op
                 executeQuery·p0.9999: 193.462 ms/op
                 executeQuery·p1.00:   193.462 ms/op

Iteration   3: 177.137 ±(99.9%) 1.457 ms/op
                 executeQuery·p0.00:   172.229 ms/op
                 executeQuery·p0.50:   177.209 ms/op
                 executeQuery·p0.90:   179.306 ms/op
                 executeQuery·p0.95:   185.441 ms/op
                 executeQuery·p0.99:   186.647 ms/op
                 executeQuery·p0.999:  186.647 ms/op
                 executeQuery·p0.9999: 186.647 ms/op
                 executeQuery·p1.00:   186.647 ms/op

Iteration   4: 177.826 ±(99.9%) 1.139 ms/op
                 executeQuery·p0.00:   173.801 ms/op
                 executeQuery·p0.50:   177.996 ms/op
                 executeQuery·p0.90:   180.565 ms/op
                 executeQuery·p0.95:   181.613 ms/op
                 executeQuery·p0.99:   184.287 ms/op
                 executeQuery·p0.999:  184.287 ms/op
                 executeQuery·p0.9999: 184.287 ms/op
                 executeQuery·p1.00:   184.287 ms/op

Iteration   5: 178.798 ±(99.9%) 1.268 ms/op
                 executeQuery·p0.00:   172.753 ms/op
                 executeQuery·p0.50:   179.438 ms/op
                 executeQuery·p0.90:   181.404 ms/op
                 executeQuery·p0.95:   181.666 ms/op
                 executeQuery·p0.99:   186.384 ms/op
                 executeQuery·p0.999:  186.384 ms/op
                 executeQuery·p0.9999: 186.384 ms/op
                 executeQuery·p1.00:   186.384 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 507
  mean =    177.554 ±(99.9%) 0.607 ms/op

  Histogram, ms/op:
    [160.000, 162.500) = 0 
    [162.500, 165.000) = 0 
    [165.000, 167.500) = 0 
    [167.500, 170.000) = 7 
    [170.000, 172.500) = 65 
    [172.500, 175.000) = 58 
    [175.000, 177.500) = 111 
    [177.500, 180.000) = 155 
    [180.000, 182.500) = 65 
    [182.500, 185.000) = 17 
    [185.000, 187.500) = 15 
    [187.500, 190.000) = 12 
    [190.000, 192.500) = 1 
    [192.500, 195.000) = 1 
    [195.000, 197.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    168.821 ms/op
     p(50.0000) =    177.734 ms/op
     p(90.0000) =    181.980 ms/op
     p(95.0000) =    185.598 ms/op
     p(99.0000) =    189.792 ms/op
     p(99.9000) =    193.462 ms/op
     p(99.9900) =    193.462 ms/op
     p(99.9990) =    193.462 ms/op
     p(99.9999) =    193.462 ms/op
    p(100.0000) =    193.462 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 91.67% complete, ETA 00:43:19
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3405.775 ms/op
# Warmup Iteration   2: 2537.554 ms/op
# Warmup Iteration   3: 2079.326 ms/op
# Warmup Iteration   4: 2070.588 ±(99.9%) 282.018 ms/op
# Warmup Iteration   5: 2060.102 ±(99.9%) 311.608 ms/op
Iteration   1: 2059.403 ±(99.9%) 1195.276 ms/op
                 executeQuery·p0.00:   1983.906 ms/op
                 executeQuery·p0.50:   2092.958 ms/op
                 executeQuery·p0.90:   2101.346 ms/op
                 executeQuery·p0.95:   2101.346 ms/op
                 executeQuery·p0.99:   2101.346 ms/op
                 executeQuery·p0.999:  2101.346 ms/op
                 executeQuery·p0.9999: 2101.346 ms/op
                 executeQuery·p1.00:   2101.346 ms/op

Iteration   2: 2074.782 ±(99.9%) 1156.900 ms/op
                 executeQuery·p0.00:   2004.877 ms/op
                 executeQuery·p0.50:   2090.861 ms/op
                 executeQuery·p0.90:   2128.609 ms/op
                 executeQuery·p0.95:   2128.609 ms/op
                 executeQuery·p0.99:   2128.609 ms/op
                 executeQuery·p0.999:  2128.609 ms/op
                 executeQuery·p0.9999: 2128.609 ms/op
                 executeQuery·p1.00:   2128.609 ms/op

Iteration   3: 2070.588 ±(99.9%) 593.131 ms/op
                 executeQuery·p0.00:   2046.820 ms/op
                 executeQuery·p0.50:   2057.306 ms/op
                 executeQuery·p0.90:   2107.638 ms/op
                 executeQuery·p0.95:   2107.638 ms/op
                 executeQuery·p0.99:   2107.638 ms/op
                 executeQuery·p0.999:  2107.638 ms/op
                 executeQuery·p0.9999: 2107.638 ms/op
                 executeQuery·p1.00:   2107.638 ms/op

Iteration   4: 2222.282 ±(99.9%) 2166.445 ms/op
                 executeQuery·p0.00:   2099.249 ms/op
                 executeQuery·p0.50:   2231.370 ms/op
                 executeQuery·p0.90:   2336.227 ms/op
                 executeQuery·p0.95:   2336.227 ms/op
                 executeQuery·p0.99:   2336.227 ms/op
                 executeQuery·p0.999:  2336.227 ms/op
                 executeQuery·p0.9999: 2336.227 ms/op
                 executeQuery·p1.00:   2336.227 ms/op

Iteration   5: 2077.579 ±(99.9%) 220.893 ms/op
                 executeQuery·p0.00:   2063.598 ms/op
                 executeQuery·p0.50:   2084.569 ms/op
                 executeQuery·p0.90:   2084.569 ms/op
                 executeQuery·p0.95:   2084.569 ms/op
                 executeQuery·p0.99:   2084.569 ms/op
                 executeQuery·p0.999:  2084.569 ms/op
                 executeQuery·p0.9999: 2084.569 ms/op
                 executeQuery·p1.00:   2084.569 ms/op


# Run progress: 92.26% complete, ETA 00:40:08
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3443.524 ms/op
# Warmup Iteration   2: 2478.834 ms/op
# Warmup Iteration   3: 2147.484 ms/op
# Warmup Iteration   4: 2089.462 ±(99.9%) 499.336 ms/op
# Warmup Iteration   5: 2092.958 ±(99.9%) 615.734 ms/op
Iteration   1: 2123.716 ±(99.9%) 134.364 ms/op
                 executeQuery·p0.00:   2116.026 ms/op
                 executeQuery·p0.50:   2124.415 ms/op
                 executeQuery·p0.90:   2130.706 ms/op
                 executeQuery·p0.95:   2130.706 ms/op
                 executeQuery·p0.99:   2130.706 ms/op
                 executeQuery·p0.999:  2130.706 ms/op
                 executeQuery·p0.9999: 2130.706 ms/op
                 executeQuery·p1.00:   2130.706 ms/op

Iteration   2: 2112.531 ±(99.9%) 493.438 ms/op
                 executeQuery·p0.00:   2082.472 ms/op
                 executeQuery·p0.50:   2120.221 ms/op
                 executeQuery·p0.90:   2134.901 ms/op
                 executeQuery·p0.95:   2134.901 ms/op
                 executeQuery·p0.99:   2134.901 ms/op
                 executeQuery·p0.999:  2134.901 ms/op
                 executeQuery·p0.9999: 2134.901 ms/op
                 executeQuery·p1.00:   2134.901 ms/op

Iteration   3: 2098.550 ±(99.9%) 96.285 ms/op
                 executeQuery·p0.00:   2092.958 ms/op
                 executeQuery·p0.50:   2099.249 ms/op
                 executeQuery·p0.90:   2103.443 ms/op
                 executeQuery·p0.95:   2103.443 ms/op
                 executeQuery·p0.99:   2103.443 ms/op
                 executeQuery·p0.999:  2103.443 ms/op
                 executeQuery·p0.9999: 2103.443 ms/op
                 executeQuery·p1.00:   2103.443 ms/op

Iteration   4: 2091.560 ±(99.9%) 905.663 ms/op
                 executeQuery·p0.00:   2034.237 ms/op
                 executeQuery·p0.50:   2120.221 ms/op
                 executeQuery·p0.90:   2120.221 ms/op
                 executeQuery·p0.95:   2120.221 ms/op
                 executeQuery·p0.99:   2120.221 ms/op
                 executeQuery·p0.999:  2120.221 ms/op
                 executeQuery·p0.9999: 2120.221 ms/op
                 executeQuery·p1.00:   2120.221 ms/op

Iteration   5: 2051.015 ±(99.9%) 350.657 ms/op
                 executeQuery·p0.00:   2030.043 ms/op
                 executeQuery·p0.50:   2055.209 ms/op
                 executeQuery·p0.90:   2067.792 ms/op
                 executeQuery·p0.95:   2067.792 ms/op
                 executeQuery·p0.99:   2067.792 ms/op
                 executeQuery·p0.999:  2067.792 ms/op
                 executeQuery·p0.9999: 2067.792 ms/op
                 executeQuery·p1.00:   2067.792 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 30
  mean =   2098.201 ±(99.9%) 42.947 ms/op

  Histogram, ms/op:
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 4 
    [2050.000, 2100.000) = 12 
    [2100.000, 2150.000) = 11 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 1 
    [2250.000, 2300.000) = 0 
    [2300.000, 2350.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1983.906 ms/op
     p(50.0000) =   2096.103 ms/op
     p(90.0000) =   2134.481 ms/op
     p(95.0000) =   2278.556 ms/op
     p(99.0000) =   2336.227 ms/op
     p(99.9000) =   2336.227 ms/op
     p(99.9900) =   2336.227 ms/op
     p(99.9990) =   2336.227 ms/op
     p(99.9999) =   2336.227 ms/op
    p(100.0000) =   2336.227 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 92.86% complete, ETA 00:36:57
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 125.305 ±(99.9%) 3.691 ms/op
# Warmup Iteration   2: 122.348 ±(99.9%) 0.894 ms/op
# Warmup Iteration   3: 122.081 ±(99.9%) 0.668 ms/op
# Warmup Iteration   4: 121.374 ±(99.9%) 0.424 ms/op
# Warmup Iteration   5: 121.289 ±(99.9%) 0.505 ms/op
Iteration   1: 121.224 ±(99.9%) 0.674 ms/op
                 executeQuery·p0.00:   118.751 ms/op
                 executeQuery·p0.50:   120.717 ms/op
                 executeQuery·p0.90:   123.732 ms/op
                 executeQuery·p0.95:   125.462 ms/op
                 executeQuery·p0.99:   126.747 ms/op
                 executeQuery·p0.999:  126.747 ms/op
                 executeQuery·p0.9999: 126.747 ms/op
                 executeQuery·p1.00:   126.747 ms/op

Iteration   2: 121.831 ±(99.9%) 0.622 ms/op
                 executeQuery·p0.00:   119.276 ms/op
                 executeQuery·p0.50:   121.635 ms/op
                 executeQuery·p0.90:   123.693 ms/op
                 executeQuery·p0.95:   123.863 ms/op
                 executeQuery·p0.99:   124.387 ms/op
                 executeQuery·p0.999:  124.387 ms/op
                 executeQuery·p0.9999: 124.387 ms/op
                 executeQuery·p1.00:   124.387 ms/op

Iteration   3: 122.572 ±(99.9%) 1.092 ms/op
                 executeQuery·p0.00:   119.013 ms/op
                 executeQuery·p0.50:   121.307 ms/op
                 executeQuery·p0.90:   126.222 ms/op
                 executeQuery·p0.95:   126.334 ms/op
                 executeQuery·p0.99:   126.353 ms/op
                 executeQuery·p0.999:  126.353 ms/op
                 executeQuery·p0.9999: 126.353 ms/op
                 executeQuery·p1.00:   126.353 ms/op

Iteration   4: 122.928 ±(99.9%) 1.094 ms/op
                 executeQuery·p0.00:   119.276 ms/op
                 executeQuery·p0.50:   121.111 ms/op
                 executeQuery·p0.90:   126.222 ms/op
                 executeQuery·p0.95:   126.222 ms/op
                 executeQuery·p0.99:   126.353 ms/op
                 executeQuery·p0.999:  126.353 ms/op
                 executeQuery·p0.9999: 126.353 ms/op
                 executeQuery·p1.00:   126.353 ms/op

Iteration   5: 122.252 ±(99.9%) 0.696 ms/op
                 executeQuery·p0.00:   119.407 ms/op
                 executeQuery·p0.50:   121.111 ms/op
                 executeQuery·p0.90:   123.732 ms/op
                 executeQuery·p0.95:   126.203 ms/op
                 executeQuery·p0.99:   126.222 ms/op
                 executeQuery·p0.999:  126.222 ms/op
                 executeQuery·p0.9999: 126.222 ms/op
                 executeQuery·p1.00:   126.222 ms/op


# Run progress: 93.45% complete, ETA 00:33:46
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 127.407 ±(99.9%) 3.449 ms/op
# Warmup Iteration   2: 123.072 ±(99.9%) 0.989 ms/op
# Warmup Iteration   3: 124.528 ±(99.9%) 0.761 ms/op
# Warmup Iteration   4: 124.410 ±(99.9%) 0.929 ms/op
# Warmup Iteration   5: 123.475 ±(99.9%) 0.817 ms/op
Iteration   1: 121.243 ±(99.9%) 0.565 ms/op
                 executeQuery·p0.00:   119.013 ms/op
                 executeQuery·p0.50:   121.766 ms/op
                 executeQuery·p0.90:   123.077 ms/op
                 executeQuery·p0.95:   123.470 ms/op
                 executeQuery·p0.99:   124.256 ms/op
                 executeQuery·p0.999:  124.256 ms/op
                 executeQuery·p0.9999: 124.256 ms/op
                 executeQuery·p1.00:   124.256 ms/op

Iteration   2: 122.720 ±(99.9%) 0.779 ms/op
                 executeQuery·p0.00:   119.276 ms/op
                 executeQuery·p0.50:   122.618 ms/op
                 executeQuery·p0.90:   125.357 ms/op
                 executeQuery·p0.95:   125.941 ms/op
                 executeQuery·p0.99:   126.091 ms/op
                 executeQuery·p0.999:  126.091 ms/op
                 executeQuery·p0.9999: 126.091 ms/op
                 executeQuery·p1.00:   126.091 ms/op

Iteration   3: 123.491 ±(99.9%) 0.767 ms/op
                 executeQuery·p0.00:   119.538 ms/op
                 executeQuery·p0.50:   123.863 ms/op
                 executeQuery·p0.90:   125.829 ms/op
                 executeQuery·p0.95:   126.471 ms/op
                 executeQuery·p0.99:   126.484 ms/op
                 executeQuery·p0.999:  126.484 ms/op
                 executeQuery·p0.9999: 126.484 ms/op
                 executeQuery·p1.00:   126.484 ms/op

Iteration   4: 122.258 ±(99.9%) 0.937 ms/op
                 executeQuery·p0.00:   119.407 ms/op
                 executeQuery·p0.50:   120.914 ms/op
                 executeQuery·p0.90:   126.052 ms/op
                 executeQuery·p0.95:   126.557 ms/op
                 executeQuery·p0.99:   126.878 ms/op
                 executeQuery·p0.999:  126.878 ms/op
                 executeQuery·p0.9999: 126.878 ms/op
                 executeQuery·p1.00:   126.878 ms/op

Iteration   5: 123.128 ±(99.9%) 0.883 ms/op
                 executeQuery·p0.00:   119.669 ms/op
                 executeQuery·p0.50:   122.421 ms/op
                 executeQuery·p0.90:   125.960 ms/op
                 executeQuery·p0.95:   126.091 ms/op
                 executeQuery·p0.99:   126.353 ms/op
                 executeQuery·p0.999:  126.353 ms/op
                 executeQuery·p0.9999: 126.353 ms/op
                 executeQuery·p1.00:   126.353 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 821
  mean =    122.361 ±(99.9%) 0.266 ms/op

  Histogram, ms/op:
    [118.000, 118.500) = 0 
    [118.500, 119.000) = 2 
    [119.000, 119.500) = 51 
    [119.500, 120.000) = 96 
    [120.000, 120.500) = 48 
    [120.500, 121.000) = 167 
    [121.000, 121.500) = 31 
    [121.500, 122.000) = 21 
    [122.000, 122.500) = 58 
    [122.500, 123.000) = 36 
    [123.000, 123.500) = 31 
    [123.500, 124.000) = 63 
    [124.000, 124.500) = 12 
    [124.500, 125.000) = 49 
    [125.000, 125.500) = 24 
    [125.500, 126.000) = 46 
    [126.000, 126.500) = 81 

  Percentiles, ms/op:
      p(0.0000) =    118.751 ms/op
     p(50.0000) =    121.897 ms/op
     p(90.0000) =    126.091 ms/op
     p(95.0000) =    126.222 ms/op
     p(99.0000) =    126.484 ms/op
     p(99.9000) =    126.878 ms/op
     p(99.9900) =    126.878 ms/op
     p(99.9990) =    126.878 ms/op
     p(99.9999) =    126.878 ms/op
    p(100.0000) =    126.878 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 94.05% complete, ETA 00:30:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1197.707 ±(99.9%) 87.793 ms/op
# Warmup Iteration   2: 1165.317 ±(99.9%) 27.012 ms/op
# Warmup Iteration   3: 1179.531 ±(99.9%) 33.484 ms/op
# Warmup Iteration   4: 1167.648 ±(99.9%) 23.952 ms/op
# Warmup Iteration   5: 1167.881 ±(99.9%) 47.655 ms/op
Iteration   1: 1173.240 ±(99.9%) 45.580 ms/op
                 executeQuery·p0.00:   1138.754 ms/op
                 executeQuery·p0.50:   1191.182 ms/op
                 executeQuery·p0.90:   1205.862 ms/op
                 executeQuery·p0.95:   1205.862 ms/op
                 executeQuery·p0.99:   1205.862 ms/op
                 executeQuery·p0.999:  1205.862 ms/op
                 executeQuery·p0.9999: 1205.862 ms/op
                 executeQuery·p1.00:   1205.862 ms/op

Iteration   2: 1158.560 ±(99.9%) 44.196 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1147.142 ms/op
                 executeQuery·p0.90:   1205.862 ms/op
                 executeQuery·p0.95:   1205.862 ms/op
                 executeQuery·p0.99:   1205.862 ms/op
                 executeQuery·p0.999:  1205.862 ms/op
                 executeQuery·p0.9999: 1205.862 ms/op
                 executeQuery·p1.00:   1205.862 ms/op

Iteration   3: 1172.774 ±(99.9%) 34.922 ms/op
                 executeQuery·p0.00:   1145.045 ms/op
                 executeQuery·p0.50:   1174.405 ms/op
                 executeQuery·p0.90:   1197.474 ms/op
                 executeQuery·p0.95:   1197.474 ms/op
                 executeQuery·p0.99:   1197.474 ms/op
                 executeQuery·p0.999:  1197.474 ms/op
                 executeQuery·p0.9999: 1197.474 ms/op
                 executeQuery·p1.00:   1197.474 ms/op

Iteration   4: 1180.464 ±(99.9%) 22.527 ms/op
                 executeQuery·p0.00:   1170.211 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1201.668 ms/op
                 executeQuery·p0.95:   1201.668 ms/op
                 executeQuery·p0.99:   1201.668 ms/op
                 executeQuery·p0.999:  1201.668 ms/op
                 executeQuery·p0.9999: 1201.668 ms/op
                 executeQuery·p1.00:   1201.668 ms/op

Iteration   5: 1183.027 ±(99.9%) 23.072 ms/op
                 executeQuery·p0.00:   1170.211 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1197.474 ms/op
                 executeQuery·p0.95:   1197.474 ms/op
                 executeQuery·p0.99:   1197.474 ms/op
                 executeQuery·p0.999:  1197.474 ms/op
                 executeQuery·p0.9999: 1197.474 ms/op
                 executeQuery·p1.00:   1197.474 ms/op


# Run progress: 94.64% complete, ETA 00:27:29
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1196.309 ±(99.9%) 90.949 ms/op
# Warmup Iteration   2: 1179.065 ±(99.9%) 30.711 ms/op
# Warmup Iteration   3: 1161.356 ±(99.9%) 36.402 ms/op
# Warmup Iteration   4: 1173.706 ±(99.9%) 40.412 ms/op
# Warmup Iteration   5: 1165.317 ±(99.9%) 40.451 ms/op
Iteration   1: 1151.103 ±(99.9%) 31.885 ms/op
                 executeQuery·p0.00:   1138.754 ms/op
                 executeQuery·p0.50:   1145.045 ms/op
                 executeQuery·p0.90:   1195.377 ms/op
                 executeQuery·p0.95:   1195.377 ms/op
                 executeQuery·p0.99:   1195.377 ms/op
                 executeQuery·p0.999:  1195.377 ms/op
                 executeQuery·p0.9999: 1195.377 ms/op
                 executeQuery·p1.00:   1195.377 ms/op

Iteration   2: 1172.541 ±(99.9%) 39.576 ms/op
                 executeQuery·p0.00:   1151.336 ms/op
                 executeQuery·p0.50:   1157.628 ms/op
                 executeQuery·p0.90:   1203.765 ms/op
                 executeQuery·p0.95:   1203.765 ms/op
                 executeQuery·p0.99:   1203.765 ms/op
                 executeQuery·p0.999:  1203.765 ms/op
                 executeQuery·p0.9999: 1203.765 ms/op
                 executeQuery·p1.00:   1203.765 ms/op

Iteration   3: 1164.385 ±(99.9%) 37.618 ms/op
                 executeQuery·p0.00:   1151.336 ms/op
                 executeQuery·p0.50:   1153.434 ms/op
                 executeQuery·p0.90:   1203.765 ms/op
                 executeQuery·p0.95:   1203.765 ms/op
                 executeQuery·p0.99:   1203.765 ms/op
                 executeQuery·p0.999:  1203.765 ms/op
                 executeQuery·p0.9999: 1203.765 ms/op
                 executeQuery·p1.00:   1203.765 ms/op

Iteration   4: 1174.638 ±(99.9%) 44.313 ms/op
                 executeQuery·p0.00:   1151.336 ms/op
                 executeQuery·p0.50:   1157.628 ms/op
                 executeQuery·p0.90:   1205.862 ms/op
                 executeQuery·p0.95:   1205.862 ms/op
                 executeQuery·p0.99:   1205.862 ms/op
                 executeQuery·p0.999:  1205.862 ms/op
                 executeQuery·p0.9999: 1205.862 ms/op
                 executeQuery·p1.00:   1205.862 ms/op

Iteration   5: 1174.172 ±(99.9%) 39.849 ms/op
                 executeQuery·p0.00:   1153.434 ms/op
                 executeQuery·p0.50:   1157.628 ms/op
                 executeQuery·p0.90:   1203.765 ms/op
                 executeQuery·p0.95:   1203.765 ms/op
                 executeQuery·p0.99:   1203.765 ms/op
                 executeQuery·p0.999:  1203.765 ms/op
                 executeQuery·p0.9999: 1203.765 ms/op
                 executeQuery·p1.00:   1203.765 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 90
  mean =   1170.490 ±(99.9%) 8.239 ms/op

  Histogram, ms/op:
    [1130.000, 1135.000) = 0 
    [1135.000, 1140.000) = 5 
    [1140.000, 1145.000) = 3 
    [1145.000, 1150.000) = 11 
    [1150.000, 1155.000) = 16 
    [1155.000, 1160.000) = 7 
    [1160.000, 1165.000) = 0 
    [1165.000, 1170.000) = 2 
    [1170.000, 1175.000) = 13 
    [1175.000, 1180.000) = 1 
    [1180.000, 1185.000) = 1 
    [1185.000, 1190.000) = 1 
    [1190.000, 1195.000) = 4 
    [1195.000, 1200.000) = 13 
    [1200.000, 1205.000) = 10 

  Percentiles, ms/op:
      p(0.0000) =   1138.754 ms/op
     p(50.0000) =   1170.211 ms/op
     p(90.0000) =   1203.765 ms/op
     p(95.0000) =   1203.765 ms/op
     p(99.0000) =   1205.862 ms/op
     p(99.9000) =   1205.862 ms/op
     p(99.9900) =   1205.862 ms/op
     p(99.9990) =   1205.862 ms/op
     p(99.9999) =   1205.862 ms/op
    p(100.0000) =   1205.862 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 95.24% complete, ETA 00:24:22
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 126.433 ±(99.9%) 4.415 ms/op
# Warmup Iteration   2: 121.871 ±(99.9%) 0.933 ms/op
# Warmup Iteration   3: 123.044 ±(99.9%) 0.949 ms/op
# Warmup Iteration   4: 124.065 ±(99.9%) 0.916 ms/op
# Warmup Iteration   5: 123.031 ±(99.9%) 0.873 ms/op
Iteration   1: 123.572 ±(99.9%) 0.999 ms/op
                 executeQuery·p0.00:   119.800 ms/op
                 executeQuery·p0.50:   124.781 ms/op
                 executeQuery·p0.90:   126.353 ms/op
                 executeQuery·p0.95:   126.353 ms/op
                 executeQuery·p0.99:   126.616 ms/op
                 executeQuery·p0.999:  126.616 ms/op
                 executeQuery·p0.9999: 126.616 ms/op
                 executeQuery·p1.00:   126.616 ms/op

Iteration   2: 125.328 ±(99.9%) 0.798 ms/op
                 executeQuery·p0.00:   119.013 ms/op
                 executeQuery·p0.50:   126.026 ms/op
                 executeQuery·p0.90:   126.747 ms/op
                 executeQuery·p0.95:   126.878 ms/op
                 executeQuery·p0.99:   127.402 ms/op
                 executeQuery·p0.999:  127.402 ms/op
                 executeQuery·p0.9999: 127.402 ms/op
                 executeQuery·p1.00:   127.402 ms/op

Iteration   3: 122.471 ±(99.9%) 0.754 ms/op
                 executeQuery·p0.00:   119.669 ms/op
                 executeQuery·p0.50:   122.552 ms/op
                 executeQuery·p0.90:   125.436 ms/op
                 executeQuery·p0.95:   125.960 ms/op
                 executeQuery·p0.99:   127.533 ms/op
                 executeQuery·p0.999:  127.533 ms/op
                 executeQuery·p0.9999: 127.533 ms/op
                 executeQuery·p1.00:   127.533 ms/op

Iteration   4: 121.620 ±(99.9%) 0.577 ms/op
                 executeQuery·p0.00:   119.669 ms/op
                 executeQuery·p0.50:   121.242 ms/op
                 executeQuery·p0.90:   123.732 ms/op
                 executeQuery·p0.95:   123.843 ms/op
                 executeQuery·p0.99:   123.994 ms/op
                 executeQuery·p0.999:  123.994 ms/op
                 executeQuery·p0.9999: 123.994 ms/op
                 executeQuery·p1.00:   123.994 ms/op

Iteration   5: 122.486 ±(99.9%) 0.908 ms/op
                 executeQuery·p0.00:   119.669 ms/op
                 executeQuery·p0.50:   121.242 ms/op
                 executeQuery·p0.90:   126.065 ms/op
                 executeQuery·p0.95:   126.091 ms/op
                 executeQuery·p0.99:   126.222 ms/op
                 executeQuery·p0.999:  126.222 ms/op
                 executeQuery·p0.9999: 126.222 ms/op
                 executeQuery·p1.00:   126.222 ms/op


# Run progress: 95.83% complete, ETA 00:21:15
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 124.758 ±(99.9%) 4.192 ms/op
# Warmup Iteration   2: 120.600 ±(99.9%) 0.726 ms/op
# Warmup Iteration   3: 121.016 ±(99.9%) 1.004 ms/op
# Warmup Iteration   4: 121.986 ±(99.9%) 0.808 ms/op
# Warmup Iteration   5: 123.245 ±(99.9%) 0.993 ms/op
Iteration   1: 123.853 ±(99.9%) 0.739 ms/op
                 executeQuery·p0.00:   119.800 ms/op
                 executeQuery·p0.50:   124.125 ms/op
                 executeQuery·p0.90:   126.602 ms/op
                 executeQuery·p0.95:   126.747 ms/op
                 executeQuery·p0.99:   127.271 ms/op
                 executeQuery·p0.999:  127.271 ms/op
                 executeQuery·p0.9999: 127.271 ms/op
                 executeQuery·p1.00:   127.271 ms/op

Iteration   2: 122.413 ±(99.9%) 0.857 ms/op
                 executeQuery·p0.00:   119.800 ms/op
                 executeQuery·p0.50:   121.504 ms/op
                 executeQuery·p0.90:   125.882 ms/op
                 executeQuery·p0.95:   126.616 ms/op
                 executeQuery·p0.99:   126.747 ms/op
                 executeQuery·p0.999:  126.747 ms/op
                 executeQuery·p0.9999: 126.747 ms/op
                 executeQuery·p1.00:   126.747 ms/op

Iteration   3: 123.261 ±(99.9%) 0.444 ms/op
                 executeQuery·p0.00:   119.538 ms/op
                 executeQuery·p0.50:   123.470 ms/op
                 executeQuery·p0.90:   124.649 ms/op
                 executeQuery·p0.95:   124.649 ms/op
                 executeQuery·p0.99:   125.043 ms/op
                 executeQuery·p0.999:  125.043 ms/op
                 executeQuery·p0.9999: 125.043 ms/op
                 executeQuery·p1.00:   125.043 ms/op

Iteration   4: 123.963 ±(99.9%) 0.561 ms/op
                 executeQuery·p0.00:   120.848 ms/op
                 executeQuery·p0.50:   123.994 ms/op
                 executeQuery·p0.90:   126.471 ms/op
                 executeQuery·p0.95:   126.609 ms/op
                 executeQuery·p0.99:   126.616 ms/op
                 executeQuery·p0.999:  126.616 ms/op
                 executeQuery·p0.9999: 126.616 ms/op
                 executeQuery·p1.00:   126.616 ms/op

Iteration   5: 123.090 ±(99.9%) 0.758 ms/op
                 executeQuery·p0.00:   119.669 ms/op
                 executeQuery·p0.50:   123.863 ms/op
                 executeQuery·p0.90:   125.410 ms/op
                 executeQuery·p0.95:   126.484 ms/op
                 executeQuery·p0.99:   126.747 ms/op
                 executeQuery·p0.999:  126.747 ms/op
                 executeQuery·p0.9999: 126.747 ms/op
                 executeQuery·p1.00:   126.747 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 808
  mean =    123.199 ±(99.9%) 0.257 ms/op

  Histogram, ms/op:
    [119.000, 119.500) = 1 
    [119.500, 120.000) = 80 
    [120.000, 120.500) = 53 
    [120.500, 121.000) = 47 
    [121.000, 121.500) = 68 
    [121.500, 122.000) = 20 
    [122.000, 122.500) = 45 
    [122.500, 123.000) = 51 
    [123.000, 123.500) = 48 
    [123.500, 124.000) = 98 
    [124.000, 124.500) = 34 
    [124.500, 125.000) = 62 
    [125.000, 125.500) = 37 
    [125.500, 126.000) = 50 
    [126.000, 126.500) = 72 
    [126.500, 127.000) = 39 
    [127.000, 127.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    119.013 ms/op
     p(50.0000) =    123.470 ms/op
     p(90.0000) =    126.222 ms/op
     p(95.0000) =    126.616 ms/op
     p(99.0000) =    126.878 ms/op
     p(99.9000) =    127.533 ms/op
     p(99.9900) =    127.533 ms/op
     p(99.9990) =    127.533 ms/op
     p(99.9999) =    127.533 ms/op
    p(100.0000) =    127.533 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 96.43% complete, ETA 00:18:10
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1205.396 ±(99.9%) 84.648 ms/op
# Warmup Iteration   2: 1149.239 ±(99.9%) 33.526 ms/op
# Warmup Iteration   3: 1159.492 ±(99.9%) 39.023 ms/op
# Warmup Iteration   4: 1166.949 ±(99.9%) 44.893 ms/op
# Warmup Iteration   5: 1188.386 ±(99.9%) 33.572 ms/op
Iteration   1: 1174.405 ±(99.9%) 37.792 ms/op
                 executeQuery·p0.00:   1155.531 ms/op
                 executeQuery·p0.50:   1166.017 ms/op
                 executeQuery·p0.90:   1216.348 ms/op
                 executeQuery·p0.95:   1216.348 ms/op
                 executeQuery·p0.99:   1216.348 ms/op
                 executeQuery·p0.999:  1216.348 ms/op
                 executeQuery·p0.9999: 1216.348 ms/op
                 executeQuery·p1.00:   1216.348 ms/op

Iteration   2: 1166.949 ±(99.9%) 31.477 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1163.919 ms/op
                 executeQuery·p0.90:   1212.154 ms/op
                 executeQuery·p0.95:   1212.154 ms/op
                 executeQuery·p0.99:   1212.154 ms/op
                 executeQuery·p0.999:  1212.154 ms/op
                 executeQuery·p0.9999: 1212.154 ms/op
                 executeQuery·p1.00:   1212.154 ms/op

Iteration   3: 1188.386 ±(99.9%) 34.619 ms/op
                 executeQuery·p0.00:   1161.822 ms/op
                 executeQuery·p0.50:   1186.988 ms/op
                 executeQuery·p0.90:   1210.057 ms/op
                 executeQuery·p0.95:   1210.057 ms/op
                 executeQuery·p0.99:   1210.057 ms/op
                 executeQuery·p0.999:  1210.057 ms/op
                 executeQuery·p0.9999: 1210.057 ms/op
                 executeQuery·p1.00:   1210.057 ms/op

Iteration   4: 1188.386 ±(99.9%) 32.491 ms/op
                 executeQuery·p0.00:   1157.628 ms/op
                 executeQuery·p0.50:   1186.988 ms/op
                 executeQuery·p0.90:   1210.057 ms/op
                 executeQuery·p0.95:   1210.057 ms/op
                 executeQuery·p0.99:   1210.057 ms/op
                 executeQuery·p0.999:  1210.057 ms/op
                 executeQuery·p0.9999: 1210.057 ms/op
                 executeQuery·p1.00:   1210.057 ms/op

Iteration   5: 1183.726 ±(99.9%) 27.699 ms/op
                 executeQuery·p0.00:   1163.919 ms/op
                 executeQuery·p0.50:   1189.085 ms/op
                 executeQuery·p0.90:   1214.251 ms/op
                 executeQuery·p0.95:   1214.251 ms/op
                 executeQuery·p0.99:   1214.251 ms/op
                 executeQuery·p0.999:  1214.251 ms/op
                 executeQuery·p0.9999: 1214.251 ms/op
                 executeQuery·p1.00:   1214.251 ms/op


# Run progress: 97.02% complete, ETA 00:15:06
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1190.949 ±(99.9%) 102.842 ms/op
# Warmup Iteration   2: 1157.861 ±(99.9%) 42.925 ms/op
# Warmup Iteration   3: 1149.938 ±(99.9%) 38.725 ms/op
# Warmup Iteration   4: 1149.006 ±(99.9%) 31.395 ms/op
# Warmup Iteration   5: 1142.948 ±(99.9%) 21.218 ms/op
Iteration   1: 1162.288 ±(99.9%) 35.055 ms/op
                 executeQuery·p0.00:   1132.462 ms/op
                 executeQuery·p0.50:   1161.822 ms/op
                 executeQuery·p0.90:   1186.988 ms/op
                 executeQuery·p0.95:   1186.988 ms/op
                 executeQuery·p0.99:   1186.988 ms/op
                 executeQuery·p0.999:  1186.988 ms/op
                 executeQuery·p0.9999: 1186.988 ms/op
                 executeQuery·p1.00:   1186.988 ms/op

Iteration   2: 1147.841 ±(99.9%) 30.672 ms/op
                 executeQuery·p0.00:   1134.559 ms/op
                 executeQuery·p0.50:   1142.948 ms/op
                 executeQuery·p0.90:   1186.988 ms/op
                 executeQuery·p0.95:   1186.988 ms/op
                 executeQuery·p0.99:   1186.988 ms/op
                 executeQuery·p0.999:  1186.988 ms/op
                 executeQuery·p0.9999: 1186.988 ms/op
                 executeQuery·p1.00:   1186.988 ms/op

Iteration   3: 1166.017 ±(99.9%) 35.461 ms/op
                 executeQuery·p0.00:   1138.754 ms/op
                 executeQuery·p0.50:   1170.211 ms/op
                 executeQuery·p0.90:   1193.279 ms/op
                 executeQuery·p0.95:   1193.279 ms/op
                 executeQuery·p0.99:   1193.279 ms/op
                 executeQuery·p0.999:  1193.279 ms/op
                 executeQuery·p0.9999: 1193.279 ms/op
                 executeQuery·p1.00:   1193.279 ms/op

Iteration   4: 1175.570 ±(99.9%) 40.913 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1212.154 ms/op
                 executeQuery·p0.95:   1212.154 ms/op
                 executeQuery·p0.99:   1212.154 ms/op
                 executeQuery·p0.999:  1212.154 ms/op
                 executeQuery·p0.9999: 1212.154 ms/op
                 executeQuery·p1.00:   1212.154 ms/op

Iteration   5: 1168.347 ±(99.9%) 42.011 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1193.279 ms/op
                 executeQuery·p0.95:   1193.279 ms/op
                 executeQuery·p0.99:   1193.279 ms/op
                 executeQuery·p0.999:  1193.279 ms/op
                 executeQuery·p0.9999: 1193.279 ms/op
                 executeQuery·p1.00:   1193.279 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 90
  mean =   1172.191 ±(99.9%) 8.320 ms/op

  Histogram, ms/op:
    [1130.000, 1135.000) = 4 
    [1135.000, 1140.000) = 4 
    [1140.000, 1145.000) = 8 
    [1145.000, 1150.000) = 4 
    [1150.000, 1155.000) = 0 
    [1155.000, 1160.000) = 4 
    [1160.000, 1165.000) = 12 
    [1165.000, 1170.000) = 11 
    [1170.000, 1175.000) = 6 
    [1175.000, 1180.000) = 1 
    [1180.000, 1185.000) = 3 
    [1185.000, 1190.000) = 12 
    [1190.000, 1195.000) = 9 
    [1195.000, 1200.000) = 0 
    [1200.000, 1205.000) = 1 
    [1205.000, 1210.000) = 2 
    [1210.000, 1215.000) = 8 

  Percentiles, ms/op:
      p(0.0000) =   1132.462 ms/op
     p(50.0000) =   1168.114 ms/op
     p(90.0000) =   1209.847 ms/op
     p(95.0000) =   1211.000 ms/op
     p(99.0000) =   1216.348 ms/op
     p(99.9000) =   1216.348 ms/op
     p(99.9900) =   1216.348 ms/op
     p(99.9990) =   1216.348 ms/op
     p(99.9999) =   1216.348 ms/op
    p(100.0000) =   1216.348 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 97.62% complete, ETA 00:12:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 126.222 ±(99.9%) 4.387 ms/op
# Warmup Iteration   2: 122.821 ±(99.9%) 0.918 ms/op
# Warmup Iteration   3: 122.819 ±(99.9%) 1.203 ms/op
# Warmup Iteration   4: 125.095 ±(99.9%) 1.103 ms/op
# Warmup Iteration   5: 124.977 ±(99.9%) 1.011 ms/op
Iteration   1: 125.249 ±(99.9%) 1.215 ms/op
                 executeQuery·p0.00:   119.800 ms/op
                 executeQuery·p0.50:   126.419 ms/op
                 executeQuery·p0.90:   128.451 ms/op
                 executeQuery·p0.95:   128.451 ms/op
                 executeQuery·p0.99:   128.582 ms/op
                 executeQuery·p0.999:  128.582 ms/op
                 executeQuery·p0.9999: 128.582 ms/op
                 executeQuery·p1.00:   128.582 ms/op

Iteration   2: 122.467 ±(99.9%) 0.750 ms/op
                 executeQuery·p0.00:   119.800 ms/op
                 executeQuery·p0.50:   121.897 ms/op
                 executeQuery·p0.90:   125.960 ms/op
                 executeQuery·p0.95:   126.734 ms/op
                 executeQuery·p0.99:   128.451 ms/op
                 executeQuery·p0.999:  128.451 ms/op
                 executeQuery·p0.9999: 128.451 ms/op
                 executeQuery·p1.00:   128.451 ms/op

Iteration   3: 123.578 ±(99.9%) 0.956 ms/op
                 executeQuery·p0.00:   120.193 ms/op
                 executeQuery·p0.50:   122.290 ms/op
                 executeQuery·p0.90:   127.245 ms/op
                 executeQuery·p0.95:   127.389 ms/op
                 executeQuery·p0.99:   127.664 ms/op
                 executeQuery·p0.999:  127.664 ms/op
                 executeQuery·p0.9999: 127.664 ms/op
                 executeQuery·p1.00:   127.664 ms/op

Iteration   4: 124.702 ±(99.9%) 0.903 ms/op
                 executeQuery·p0.00:   120.455 ms/op
                 executeQuery·p0.50:   124.191 ms/op
                 executeQuery·p0.90:   127.271 ms/op
                 executeQuery·p0.95:   127.271 ms/op
                 executeQuery·p0.99:   131.858 ms/op
                 executeQuery·p0.999:  131.858 ms/op
                 executeQuery·p0.9999: 131.858 ms/op
                 executeQuery·p1.00:   131.858 ms/op

Iteration   5: 124.322 ±(99.9%) 1.018 ms/op
                 executeQuery·p0.00:   120.324 ms/op
                 executeQuery·p0.50:   124.912 ms/op
                 executeQuery·p0.90:   127.271 ms/op
                 executeQuery·p0.95:   127.271 ms/op
                 executeQuery·p0.99:   127.533 ms/op
                 executeQuery·p0.999:  127.533 ms/op
                 executeQuery·p0.9999: 127.533 ms/op
                 executeQuery·p1.00:   127.533 ms/op


# Run progress: 98.21% complete, ETA 00:09:01
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 128.361 ±(99.9%) 4.508 ms/op
# Warmup Iteration   2: 123.790 ±(99.9%) 0.794 ms/op
# Warmup Iteration   3: 124.279 ±(99.9%) 0.727 ms/op
# Warmup Iteration   4: 122.910 ±(99.9%) 0.424 ms/op
# Warmup Iteration   5: 123.798 ±(99.9%) 0.393 ms/op
Iteration   1: 122.840 ±(99.9%) 0.810 ms/op
                 executeQuery·p0.00:   119.800 ms/op
                 executeQuery·p0.50:   123.077 ms/op
                 executeQuery·p0.90:   125.829 ms/op
                 executeQuery·p0.95:   126.340 ms/op
                 executeQuery·p0.99:   127.140 ms/op
                 executeQuery·p0.999:  127.140 ms/op
                 executeQuery·p0.9999: 127.140 ms/op
                 executeQuery·p1.00:   127.140 ms/op

Iteration   2: 122.416 ±(99.9%) 0.696 ms/op
                 executeQuery·p0.00:   119.800 ms/op
                 executeQuery·p0.50:   122.683 ms/op
                 executeQuery·p0.90:   124.492 ms/op
                 executeQuery·p0.95:   125.357 ms/op
                 executeQuery·p0.99:   127.533 ms/op
                 executeQuery·p0.999:  127.533 ms/op
                 executeQuery·p0.9999: 127.533 ms/op
                 executeQuery·p1.00:   127.533 ms/op

Iteration   3: 121.612 ±(99.9%) 0.512 ms/op
                 executeQuery·p0.00:   119.931 ms/op
                 executeQuery·p0.50:   121.373 ms/op
                 executeQuery·p0.90:   124.348 ms/op
                 executeQuery·p0.95:   125.154 ms/op
                 executeQuery·p0.99:   125.305 ms/op
                 executeQuery·p0.999:  125.305 ms/op
                 executeQuery·p0.9999: 125.305 ms/op
                 executeQuery·p1.00:   125.305 ms/op

Iteration   4: 120.890 ±(99.9%) 0.185 ms/op
                 executeQuery·p0.00:   120.062 ms/op
                 executeQuery·p0.50:   120.848 ms/op
                 executeQuery·p0.90:   121.504 ms/op
                 executeQuery·p0.95:   121.969 ms/op
                 executeQuery·p0.99:   122.290 ms/op
                 executeQuery·p0.999:  122.290 ms/op
                 executeQuery·p0.9999: 122.290 ms/op
                 executeQuery·p1.00:   122.290 ms/op

Iteration   5: 121.700 ±(99.9%) 0.696 ms/op
                 executeQuery·p0.00:   119.931 ms/op
                 executeQuery·p0.50:   121.373 ms/op
                 executeQuery·p0.90:   126.144 ms/op
                 executeQuery·p0.95:   127.061 ms/op
                 executeQuery·p0.99:   127.271 ms/op
                 executeQuery·p0.999:  127.271 ms/op
                 executeQuery·p0.9999: 127.271 ms/op
                 executeQuery·p1.00:   127.271 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 810
  mean =    122.965 ±(99.9%) 0.295 ms/op

  Histogram, ms/op:
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 0 
    [117.500, 120.000) = 15 
    [120.000, 122.500) = 441 
    [122.500, 125.000) = 144 
    [125.000, 127.500) = 169 
    [127.500, 130.000) = 40 
    [130.000, 132.500) = 1 
    [132.500, 135.000) = 0 
    [135.000, 137.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    119.800 ms/op
     p(50.0000) =    121.766 ms/op
     p(90.0000) =    127.140 ms/op
     p(95.0000) =    127.533 ms/op
     p(99.0000) =    128.451 ms/op
     p(99.9000) =    131.858 ms/op
     p(99.9900) =    131.858 ms/op
     p(99.9990) =    131.858 ms/op
     p(99.9999) =    131.858 ms/op
    p(100.0000) =    131.858 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.2, OpenJDK 64-Bit Server VM, 20.0.2+9
# VM invoker: /usr/lib/jvm/java-20-openjdk/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 98.81% complete, ETA 00:05:59
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1200.037 ±(99.9%) 122.242 ms/op
# Warmup Iteration   2: 1173.473 ±(99.9%) 24.103 ms/op
# Warmup Iteration   3: 1161.356 ±(99.9%) 39.706 ms/op
# Warmup Iteration   4: 1152.035 ±(99.9%) 37.296 ms/op
# Warmup Iteration   5: 1153.667 ±(99.9%) 23.339 ms/op
Iteration   1: 1162.288 ±(99.9%) 26.942 ms/op
                 executeQuery·p0.00:   1138.754 ms/op
                 executeQuery·p0.50:   1170.211 ms/op
                 executeQuery·p0.90:   1180.697 ms/op
                 executeQuery·p0.95:   1180.697 ms/op
                 executeQuery·p0.99:   1180.697 ms/op
                 executeQuery·p0.999:  1180.697 ms/op
                 executeQuery·p0.9999: 1180.697 ms/op
                 executeQuery·p1.00:   1180.697 ms/op

Iteration   2: 1169.745 ±(99.9%) 22.063 ms/op
                 executeQuery·p0.00:   1149.239 ms/op
                 executeQuery·p0.50:   1174.405 ms/op
                 executeQuery·p0.90:   1182.794 ms/op
                 executeQuery·p0.95:   1182.794 ms/op
                 executeQuery·p0.99:   1182.794 ms/op
                 executeQuery·p0.999:  1182.794 ms/op
                 executeQuery·p0.9999: 1182.794 ms/op
                 executeQuery·p1.00:   1182.794 ms/op

Iteration   3: 1153.201 ±(99.9%) 24.508 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1145.045 ms/op
                 executeQuery·p0.90:   1176.502 ms/op
                 executeQuery·p0.95:   1176.502 ms/op
                 executeQuery·p0.99:   1176.502 ms/op
                 executeQuery·p0.999:  1176.502 ms/op
                 executeQuery·p0.9999: 1176.502 ms/op
                 executeQuery·p1.00:   1176.502 ms/op

Iteration   4: 1169.279 ±(99.9%) 29.648 ms/op
                 executeQuery·p0.00:   1145.045 ms/op
                 executeQuery·p0.50:   1172.308 ms/op
                 executeQuery·p0.90:   1199.571 ms/op
                 executeQuery·p0.95:   1199.571 ms/op
                 executeQuery·p0.99:   1199.571 ms/op
                 executeQuery·p0.999:  1199.571 ms/op
                 executeQuery·p0.9999: 1199.571 ms/op
                 executeQuery·p1.00:   1199.571 ms/op

Iteration   5: 1158.094 ±(99.9%) 28.726 ms/op
                 executeQuery·p0.00:   1142.948 ms/op
                 executeQuery·p0.50:   1149.239 ms/op
                 executeQuery·p0.90:   1180.697 ms/op
                 executeQuery·p0.95:   1180.697 ms/op
                 executeQuery·p0.99:   1180.697 ms/op
                 executeQuery·p0.999:  1180.697 ms/op
                 executeQuery·p0.9999: 1180.697 ms/op
                 executeQuery·p1.00:   1180.697 ms/op


# Run progress: 99.40% complete, ETA 00:02:59
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1203.299 ±(99.9%) 91.318 ms/op
# Warmup Iteration   2: 1166.716 ±(99.9%) 35.853 ms/op
# Warmup Iteration   3: 1157.395 ±(99.9%) 25.256 ms/op
# Warmup Iteration   4: 1157.162 ±(99.9%) 32.144 ms/op
# Warmup Iteration   5: 1155.298 ±(99.9%) 36.388 ms/op
Iteration   1: 1167.415 ±(99.9%) 47.445 ms/op
                 executeQuery·p0.00:   1140.851 ms/op
                 executeQuery·p0.50:   1147.142 ms/op
                 executeQuery·p0.90:   1203.765 ms/op
                 executeQuery·p0.95:   1203.765 ms/op
                 executeQuery·p0.99:   1203.765 ms/op
                 executeQuery·p0.999:  1203.765 ms/op
                 executeQuery·p0.9999: 1203.765 ms/op
                 executeQuery·p1.00:   1203.765 ms/op

Iteration   2: 1184.425 ±(99.9%) 40.134 ms/op
                 executeQuery·p0.00:   1142.948 ms/op
                 executeQuery·p0.50:   1191.182 ms/op
                 executeQuery·p0.90:   1212.154 ms/op
                 executeQuery·p0.95:   1212.154 ms/op
                 executeQuery·p0.99:   1212.154 ms/op
                 executeQuery·p0.999:  1212.154 ms/op
                 executeQuery·p0.9999: 1212.154 ms/op
                 executeQuery·p1.00:   1212.154 ms/op

Iteration   3: 1183.027 ±(99.9%) 35.437 ms/op
                 executeQuery·p0.00:   1145.045 ms/op
                 executeQuery·p0.50:   1178.599 ms/op
                 executeQuery·p0.90:   1222.640 ms/op
                 executeQuery·p0.95:   1222.640 ms/op
                 executeQuery·p0.99:   1222.640 ms/op
                 executeQuery·p0.999:  1222.640 ms/op
                 executeQuery·p0.9999: 1222.640 ms/op
                 executeQuery·p1.00:   1222.640 ms/op

Iteration   4: 1164.851 ±(99.9%) 27.643 ms/op
                 executeQuery·p0.00:   1145.045 ms/op
                 executeQuery·p0.50:   1176.502 ms/op
                 executeQuery·p0.90:   1180.697 ms/op
                 executeQuery·p0.95:   1180.697 ms/op
                 executeQuery·p0.99:   1180.697 ms/op
                 executeQuery·p0.999:  1180.697 ms/op
                 executeQuery·p0.9999: 1180.697 ms/op
                 executeQuery·p1.00:   1180.697 ms/op

Iteration   5: 1176.502 ±(99.9%) 30.418 ms/op
                 executeQuery·p0.00:   1147.142 ms/op
                 executeQuery·p0.50:   1178.599 ms/op
                 executeQuery·p0.90:   1203.765 ms/op
                 executeQuery·p0.95:   1203.765 ms/op
                 executeQuery·p0.99:   1203.765 ms/op
                 executeQuery·p0.999:  1203.765 ms/op
                 executeQuery·p0.9999: 1203.765 ms/op
                 executeQuery·p1.00:   1203.765 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 90
  mean =   1168.883 ±(99.9%) 7.371 ms/op

  Histogram, ms/op:
    [1130.000, 1140.000) = 1 
    [1140.000, 1150.000) = 29 
    [1150.000, 1160.000) = 6 
    [1160.000, 1170.000) = 0 
    [1170.000, 1180.000) = 28 
    [1180.000, 1190.000) = 9 
    [1190.000, 1200.000) = 13 
    [1200.000, 1210.000) = 2 
    [1210.000, 1220.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1138.754 ms/op
     p(50.0000) =   1174.405 ms/op
     p(90.0000) =   1197.264 ms/op
     p(95.0000) =   1201.458 ms/op
     p(99.0000) =   1222.640 ms/op
     p(99.9000) =   1222.640 ms/op
     p(99.9900) =   1222.640 ms/op
     p(99.9990) =   1222.640 ms/op
     p(99.9999) =   1222.640 ms/op
    p(100.0000) =   1222.640 ms/op


# Run complete. Total time: 08:21:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                    (tpchInstance)    Mode   Cnt      Score       Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample   305    331.953 ±     7.189  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          323.486              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          327.156              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          329.253              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          334.338              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          615.116              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          687.866              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          687.866              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          687.866              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample   228    451.483 ±     0.674  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          446.693              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          450.363              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          453.509              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          459.329              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          463.471              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          463.471              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          463.471              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          463.471              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample   156    652.120 ±     3.023  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          631.243              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          650.117              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          667.209              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          668.991              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          671.990              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          673.186              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          673.186              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          673.186              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample    20    892.548 ±    69.698  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          747.635              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          922.223              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          987.234              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          994.836              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          995.099              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          995.099              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          995.099              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          995.099              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample    10   2433.116 ±   135.426  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2323.644              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2455.765              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2537.134              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2537.554              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2537.554              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2537.554              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2537.554              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2537.554              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample    40   3243.141 ±    10.787  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3229.614              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3240.100              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3246.391              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3292.109              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3334.472              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3334.472              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3334.472              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3334.472              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample    29   4370.320 ±   388.874  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4223.664              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4265.607              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4311.745              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         5825.888              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         7331.643              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         7331.643              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         7331.643              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         7331.643              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample    20   7073.694 ±   279.233  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6434.062              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         7100.957              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         7408.819              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         7813.988              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         7834.960              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         7834.960              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         7834.960              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         7834.960              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample    10  13307.688 ±  3619.985  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         8975.811              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample        13497.270              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample        17317.442              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample        17515.414              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample        17515.414              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample        17515.414              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample        17515.414              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample        17515.414              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample    10  34242.298 ± 10777.982  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        23320.330              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        37379.637              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        41251.819              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        41271.951              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        41271.951              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        41271.951              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        41271.951              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        41271.951              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample    20   7100.118 ±    79.914  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         6987.710              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7084.179              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7293.895              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7306.058              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7306.478              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7306.478              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7306.478              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7306.478              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample    10  10774.328 ±   250.756  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10586.423              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10804.527              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        11015.920              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        11022.631              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        11022.631              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        11022.631              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        11022.631              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        11022.631              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample    10  14584.434 ±   985.138  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        13254.001              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        14671.675              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15262.233              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15267.267              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15267.267              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15267.267              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15267.267              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15267.267              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample    10  24746.394 ±  7579.277  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        17817.403              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        27128.758              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        30027.861              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        30098.326              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        30098.326              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        30098.326              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        30098.326              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        30098.326              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample    10  59263.838 ± 23688.864  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        47513.076              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        50465.866              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        82007.032              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        82007.032              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        82007.032              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        82007.032              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        82007.032              ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        82007.032              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample   297    339.843 ±     3.946  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          317.719              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          327.156              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          358.298              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          375.967              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          410.004              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          413.663              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          413.663              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample          413.663              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample   230    444.364 ±     0.881  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          438.305              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          443.548              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          449.839              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          453.457              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          457.378              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          457.703              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          457.703              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample          457.703              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample   150    664.056 ±     2.156  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          649.069              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          663.749              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          672.137              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          677.852              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          690.949              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          694.157              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          694.157              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample          694.157              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample    20   1215.562 ±   264.209  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          726.663              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample         1211.630              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample         1566.363              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample         1582.721              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample         1583.350              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample         1583.350              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample         1583.350              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample         1583.350              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample    10   3748.449 ±  1118.716  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         2499.805              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         4179.624              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         4258.057              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         4261.413              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         4261.413              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         4261.413              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         4261.413              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample         4261.413              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample    30   3497.350 ±    24.353  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3481.272              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3485.467              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3520.699              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3627.234              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3636.462              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3636.462              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3636.462              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample         3636.462              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample    30   4324.467 ±    17.577  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4290.773              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4320.133              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4375.498              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4393.953              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4412.408              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4412.408              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4412.408              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample         4412.408              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample    20   6494.880 ±    86.055  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6341.788              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6517.948              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6623.645              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6690.754              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6694.109              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6694.109              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6694.109              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample         6694.109              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample    10   8660.399 ±   758.760  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         7734.297              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         8766.095              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         9262.701              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         9277.800              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         9277.800              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         9277.800              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         9277.800              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         9277.800              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample    10  28427.315 ±  7830.288  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        24494.735              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        26877.100              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        41043.781              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        42278.584              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        42278.584              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        42278.584              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        42278.584              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample        42278.584              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample    20   7115.637 ±   102.849  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7004.488              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7088.374              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7221.753              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7517.451              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7532.970              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7532.970              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7532.970              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample         7532.970              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample    10  10482.405 ±   344.438  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10234.102              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10460.594              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10943.778              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10972.299              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10972.299              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10972.299              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10972.299              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample        10972.299              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample    10  14829.381 ±  1144.975  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        13002.342              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        14982.054              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15700.119              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15720.251              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15720.251              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15720.251              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15720.251              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample        15720.251              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample    10  27507.923 ±  8878.898  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        18354.274              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        30551.310              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        32155.212              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        32178.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        32178.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        32178.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        32178.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample        32178.700              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample    10  63760.132 ± 22794.685  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        49794.777              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        58183.385              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        86650.965              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        86704.652              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        86704.652              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        86704.652              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        86704.652              ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        86704.652              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample  1776     55.949 ±     2.551  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           47.186              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           49.480              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           53.432              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           54.723              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample          266.399              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample          276.767              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample          278.397              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample          278.397              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample  1938     51.097 ±     0.077  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           49.021              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           50.921              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           52.167              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           53.150              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           54.657              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           57.152              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           59.245              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           59.245              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample  2064     48.142 ±     0.103  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           45.875              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           47.907              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           50.266              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           51.036              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           52.101              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           61.373              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           64.291              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           64.291              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample   221    459.231 ±     3.709  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          431.489              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          456.131              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          483.918              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          489.161              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          496.564              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          500.695              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          500.695              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          500.695              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample   215    474.393 ±     4.133  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          441.450              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          470.286              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          499.646              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          504.889              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          515.816              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          515.899              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          515.899              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          515.899              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample   209    487.089 ±     2.497  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          468.713              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          483.918              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          503.316              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          505.414              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          517.472              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          535.298              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          535.298              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          535.298              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample   116    907.678 ±     9.059  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          864.027              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          899.678              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          956.616              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          963.799              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          978.814              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          980.419              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          980.419              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          980.419              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample   115    918.480 ±     9.886  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          877.658              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          909.115              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          963.641              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          970.562              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          979.202              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          979.370              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          979.370              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          979.370              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample   110    949.467 ±     6.124  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          917.504              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          943.718              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          979.160              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          984.036              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          988.461              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          988.807              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          988.807              ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          988.807              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample  2032     48.920 ±     0.087  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           46.727              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           48.693              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           50.397              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           51.511              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           52.756              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           53.667              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           53.805              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample           53.805              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample  1687     58.891 ±     0.126  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           57.147              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           58.130              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           61.814              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           62.063              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           62.660              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           64.348              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           64.618              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           64.618              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample  1003     99.489 ±     0.253  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           96.338              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample          100.532              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample          101.659              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample          102.892              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample          105.513              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample          117.802              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample          117.834              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample          117.834              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample   223    459.123 ±     3.298  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          436.732              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          453.509              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          484.232              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          488.636              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          496.375              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          499.122              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          499.122              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample          499.122              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample   172    597.432 ±    10.726  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          546.308              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          595.067              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          641.729              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          648.387              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          672.221              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          675.283              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          675.283              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample          675.283              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample   108    991.312 ±     4.998  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          968.884              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          986.710              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample         1017.224              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample         1020.841              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample         1025.319              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample         1025.507              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample         1025.507              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample         1025.507              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample   115    917.167 ±    10.961  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          870.318              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          902.824              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          966.787              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          972.240              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          977.105              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          977.273              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          977.273              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          977.273              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample    92   1117.326 ±     8.249  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample         1080.033              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample         1113.588              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample         1151.336              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample         1168.953              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample         1180.697              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample         1180.697              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample         1180.697              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample         1180.697              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample    57   1991.007 ±    27.330  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample         1954.546              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample         1973.420              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample         2059.403              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample         2117.494              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample         2323.644              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample         2323.644              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample         2323.644              ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample         2323.644              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    30   4115.171 ±   242.877  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         3640.656              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4043.309              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4753.824              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4966.895              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         5049.942              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         5049.942              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         5049.942              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         5049.942              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10  47217.797 ±  6073.471  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        41808.822              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        46439.334              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        52116.744              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        52143.587              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        52143.587              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        52143.587              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        52143.587              ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        52143.587              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    30   4148.027 ±    55.980  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         3951.034              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4154.458              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4255.960              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4274.625              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4290.773              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4290.773              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4290.773              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         4290.773              ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10  42171.210 ±  1862.970  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        40667.972              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        41909.486              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        44513.309              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        44627.395              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        44627.395              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        44627.395              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        44627.395              ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        44627.395              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    60   1753.499 ±    18.379  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1700.790              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1737.490              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1803.341              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1822.320              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1824.522              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1824.522              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1824.522              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1824.522              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10  21692.940 ±  3004.174  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        19327.353              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21659.386              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        24286.698              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        24293.409              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        24293.409              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        24293.409              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        24293.409              ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        24293.409              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    80   1252.445 ±     8.145  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1228.931              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1242.563              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1285.554              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1291.846              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1293.943              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1293.943              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1293.943              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1293.943              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10  15639.721 ±   562.592  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        15250.489              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        15653.143              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        16005.464              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        16005.464              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        16005.464              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        16005.464              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        16005.464              ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        16005.464              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    60   1898.796 ±    10.972  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1847.591              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1901.068              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1924.976              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1945.947              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1950.351              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1950.351              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1950.351              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1950.351              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10  21401.017 ±   248.293  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21239.955              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21390.950              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21575.500              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21575.500              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21575.500              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21575.500              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21575.500              ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        21575.500              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    95   1074.857 ±    23.263  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          998.244              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1025.507              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1145.045              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1147.142              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1170.211              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1170.211              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1170.211              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample         1170.211              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10  12853.025 ±  1944.133  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        12062.818              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        12348.031              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        15320.954              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        15334.375              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        15334.375              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        15334.375              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        15334.375              ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample        15334.375              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   239    244.776 ±     2.456  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          225.444              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          244.318              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          256.115              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          259.260              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          292.658              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          294.650              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          294.650              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          294.650              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    10   3562.642 ±   105.101  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3460.301              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3590.324              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3659.111              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3661.627              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3661.627              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3661.627              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3661.627              ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3661.627              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   240    228.147 ±     1.681  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          213.385              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          228.065              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          239.049              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          242.221              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          249.199              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          262.668              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          262.668              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          262.668              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    10   3071.908 ±   105.695  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2952.790              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3074.425              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3209.481              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3221.225              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3221.225              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3221.225              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3221.225              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3221.225              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   230    241.225 ±     1.993  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          223.347              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          241.566              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          251.396              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          253.611              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          270.569              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          273.678              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          273.678              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          273.678              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    10   3087.008 ±    36.243  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3057.648              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3080.716              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3131.887              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3133.145              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3133.145              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3133.145              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3133.145              ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3133.145              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   422    238.765 ±     1.079  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          231.997              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          234.619              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          247.464              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          250.872              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          258.353              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          260.571              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          260.571              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          260.571              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    50   2275.494 ±    18.554  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2235.564              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2269.118              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2302.253              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2333.082              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2487.222              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2487.222              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2487.222              ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2487.222              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   230    439.989 ±     1.517  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          434.635              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          438.829              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          444.072              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          445.356              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          482.072              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          514.327              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          514.327              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          514.327              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    30   3946.980 ±    33.936  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3883.926              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3942.646              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         3972.006              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4073.718              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4177.527              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4177.527              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4177.527              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4177.527              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   255    397.530 ±     8.193  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          360.186              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          364.380              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          443.548              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          445.121              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          499.709              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          525.337              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          525.337              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          525.337              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    30   4178.925 ±    82.682  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4034.920              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4169.138              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4302.517              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4385.564              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4404.019              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4404.019              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4404.019              ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         4404.019              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   501    181.518 ±     1.135  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          168.821              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          181.404              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          191.889              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          193.698              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          195.816              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          196.346              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          196.346              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          196.346              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    30   2006.555 ±    22.701  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1946.157              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2016.412              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2050.176              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2065.800              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2076.180              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2076.180              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2076.180              ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2076.180              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   516    175.336 ±     1.063  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          162.529              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          173.539              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          186.384              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          187.433              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          191.276              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          198.181              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          198.181              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          198.181              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    30   2065.135 ±    25.519  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1996.489              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2063.598              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2115.607              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2150.944              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2193.621              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2193.621              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2193.621              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2193.621              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   507    177.554 ±     0.607  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          168.821              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          177.734              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          181.980              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          185.598              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          189.792              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          193.462              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          193.462              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          193.462              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    30   2098.201 ±    42.947  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1983.906              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2096.103              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2134.481              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2278.556              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2336.227              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2336.227              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2336.227              ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         2336.227              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   821    122.361 ±     0.266  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          118.751              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          121.897              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.091              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.222              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.484              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.878              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.878              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.878              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    90   1170.490 ±     8.239  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1138.754              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1170.211              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1203.765              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1203.765              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1205.862              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1205.862              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1205.862              ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1205.862              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   808    123.199 ±     0.257  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          119.013              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          123.470              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.222              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.616              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          126.878              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          127.533              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          127.533              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          127.533              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    90   1172.191 ±     8.320  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1132.462              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1168.114              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1209.847              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1211.000              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1216.348              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1216.348              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1216.348              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1216.348              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   810    122.965 ±     0.295  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          119.800              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          121.766              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          127.140              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          127.533              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          128.451              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          131.858              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          131.858              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample          131.858              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    90   1168.883 ±     7.371  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1138.754              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1174.405              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1197.264              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1201.458              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1222.640              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1222.640              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1222.640              ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample         1222.640              ms/op

Benchmark result is saved to jmh-result.csv

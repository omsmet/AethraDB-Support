# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 0.00% complete, ETA 04:40:00
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

403.723 ±(99.9%) 81.086 ms/op
# Warmup Iteration   2: 372.982 ±(99.9%) 1.689 ms/op
# Warmup Iteration   3: 375.973 ±(99.9%) 3.814 ms/op
# Warmup Iteration   4: 373.779 ±(99.9%) 3.761 ms/op
# Warmup Iteration   5: 374.827 ±(99.9%) 3.607 ms/op
Iteration   1: 372.944 ±(99.9%) 2.799 ms/op
                 executeQuery·p0.00:   369.623 ms/op
                 executeQuery·p0.50:   371.720 ms/op
                 executeQuery·p0.90:   381.682 ms/op
                 executeQuery·p0.95:   382.625 ms/op
                 executeQuery·p0.99:   383.255 ms/op
                 executeQuery·p0.999:  383.255 ms/op
                 executeQuery·p0.9999: 383.255 ms/op
                 executeQuery·p1.00:   383.255 ms/op

Iteration   2: 371.798 ±(99.9%) 1.662 ms/op
                 executeQuery·p0.00:   370.672 ms/op
                 executeQuery·p0.50:   371.196 ms/op
                 executeQuery·p0.90:   372.349 ms/op
                 executeQuery·p0.95:   379.060 ms/op
                 executeQuery·p0.99:   383.255 ms/op
                 executeQuery·p0.999:  383.255 ms/op
                 executeQuery·p0.9999: 383.255 ms/op
                 executeQuery·p1.00:   383.255 ms/op

Iteration   3: 371.604 ±(99.9%) 1.075 ms/op
                 executeQuery·p0.00:   365.429 ms/op
                 executeQuery·p0.50:   371.720 ms/op
                 executeQuery·p0.90:   373.293 ms/op
                 executeQuery·p0.95:   373.293 ms/op
                 executeQuery·p0.99:   373.293 ms/op
                 executeQuery·p0.999:  373.293 ms/op
                 executeQuery·p0.9999: 373.293 ms/op
                 executeQuery·p1.00:   373.293 ms/op

Iteration   4: 373.177 ±(99.9%) 3.133 ms/op
                 executeQuery·p0.00:   370.672 ms/op
                 executeQuery·p0.50:   371.720 ms/op
                 executeQuery·p0.90:   384.198 ms/op
                 executeQuery·p0.95:   385.876 ms/op
                 executeQuery·p0.99:   385.876 ms/op
                 executeQuery·p0.999:  385.876 ms/op
                 executeQuery·p0.9999: 385.876 ms/op
                 executeQuery·p1.00:   385.876 ms/op

Iteration   5: 373.079 ±(99.9%) 1.736 ms/op
                 executeQuery·p0.00:   370.672 ms/op
                 executeQuery·p0.50:   372.769 ms/op
                 executeQuery·p0.90:   374.446 ms/op
                 executeQuery·p0.95:   381.053 ms/op
                 executeQuery·p0.99:   383.779 ms/op
                 executeQuery·p0.999:  383.779 ms/op
                 executeQuery·p0.9999: 383.779 ms/op
                 executeQuery·p1.00:   383.779 ms/op


# Run progress: 0.60% complete, ETA 04:46:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_483070260 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483070260() {
        this(4);
    }
    public KeyValueMap_483070260(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483070260 aggregation_state_map = new KeyValueMap_483070260();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

374.012 ±(99.9%) 24.841 ms/op
# Warmup Iteration   2: 369.002 ±(99.9%) 2.741 ms/op
# Warmup Iteration   3: 373.138 ±(99.9%) 6.863 ms/op
# Warmup Iteration   4: 372.749 ±(99.9%) 4.009 ms/op
# Warmup Iteration   5: 368.312 ±(99.9%) 3.678 ms/op
Iteration   1: 367.451 ±(99.9%) 1.458 ms/op
                 executeQuery·p0.00:   364.380 ms/op
                 executeQuery·p0.50:   367.526 ms/op
                 executeQuery·p0.90:   368.050 ms/op
                 executeQuery·p0.95:   372.952 ms/op
                 executeQuery·p0.99:   376.963 ms/op
                 executeQuery·p0.999:  376.963 ms/op
                 executeQuery·p0.9999: 376.963 ms/op
                 executeQuery·p1.00:   376.963 ms/op

Iteration   2: 367.339 ±(99.9%) 0.302 ms/op
                 executeQuery·p0.00:   366.477 ms/op
                 executeQuery·p0.50:   367.264 ms/op
                 executeQuery·p0.90:   368.050 ms/op
                 executeQuery·p0.95:   368.050 ms/op
                 executeQuery·p0.99:   368.050 ms/op
                 executeQuery·p0.999:  368.050 ms/op
                 executeQuery·p0.9999: 368.050 ms/op
                 executeQuery·p1.00:   368.050 ms/op

Iteration   3: 378.148 ±(99.9%) 39.222 ms/op
                 executeQuery·p0.00:   366.477 ms/op
                 executeQuery·p0.50:   367.526 ms/op
                 executeQuery·p0.90:   368.155 ms/op
                 executeQuery·p0.95:   539.387 ms/op
                 executeQuery·p0.99:   653.263 ms/op
                 executeQuery·p0.999:  653.263 ms/op
                 executeQuery·p0.9999: 653.263 ms/op
                 executeQuery·p1.00:   653.263 ms/op

Iteration   4: 367.264 ±(99.9%) 1.991 ms/op
                 executeQuery·p0.00:   359.137 ms/op
                 executeQuery·p0.50:   367.002 ms/op
                 executeQuery·p0.90:   368.050 ms/op
                 executeQuery·p0.95:   374.106 ms/op
                 executeQuery·p0.99:   379.060 ms/op
                 executeQuery·p0.999:  379.060 ms/op
                 executeQuery·p0.9999: 379.060 ms/op
                 executeQuery·p1.00:   379.060 ms/op

Iteration   5: 368.874 ±(99.9%) 5.272 ms/op
                 executeQuery·p0.00:   363.856 ms/op
                 executeQuery·p0.50:   367.002 ms/op
                 executeQuery·p0.90:   370.881 ms/op
                 executeQuery·p0.95:   393.059 ms/op
                 executeQuery·p0.99:   405.799 ms/op
                 executeQuery·p0.999:  405.799 ms/op
                 executeQuery·p0.9999: 405.799 ms/op
                 executeQuery·p1.00:   405.799 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 274
  mean =    371.117 ±(99.9%) 3.541 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 259 
    [375.000, 400.000) = 13 
    [400.000, 425.000) = 1 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 0 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    359.137 ms/op
     p(50.0000) =    370.409 ms/op
     p(90.0000) =    373.293 ms/op
     p(95.0000) =    377.094 ms/op
     p(99.0000) =    390.857 ms/op
     p(99.9000) =    653.263 ms/op
     p(99.9900) =    653.263 ms/op
     p(99.9990) =    653.263 ms/op
     p(99.9999) =    653.263 ms/op
    p(100.0000) =    653.263 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 1.19% complete, ETA 04:46:18
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

569.493 ±(99.9%) 77.004 ms/op
# Warmup Iteration   2: 541.893 ±(99.9%) 2.236 ms/op
# Warmup Iteration   3: 541.838 ±(99.9%) 3.758 ms/op
# Warmup Iteration   4: 540.900 ±(99.9%) 2.359 ms/op
# Warmup Iteration   5: 539.437 ±(99.9%) 3.401 ms/op
Iteration   1: 536.926 ±(99.9%) 2.727 ms/op
                 executeQuery·p0.00:   533.725 ms/op
                 executeQuery·p0.50:   535.298 ms/op
                 executeQuery·p0.90:   543.162 ms/op
                 executeQuery·p0.95:   543.162 ms/op
                 executeQuery·p0.99:   543.162 ms/op
                 executeQuery·p0.999:  543.162 ms/op
                 executeQuery·p0.9999: 543.162 ms/op
                 executeQuery·p1.00:   543.162 ms/op

Iteration   2: 538.195 ±(99.9%) 2.600 ms/op
                 executeQuery·p0.00:   534.249 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   540.017 ms/op
                 executeQuery·p0.95:   546.308 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op

Iteration   3: 536.926 ±(99.9%) 2.894 ms/op
                 executeQuery·p0.00:   533.725 ms/op
                 executeQuery·p0.50:   535.298 ms/op
                 executeQuery·p0.90:   544.211 ms/op
                 executeQuery·p0.95:   544.211 ms/op
                 executeQuery·p0.99:   544.211 ms/op
                 executeQuery·p0.999:  544.211 ms/op
                 executeQuery·p0.9999: 544.211 ms/op
                 executeQuery·p1.00:   544.211 ms/op

Iteration   4: 538.251 ±(99.9%) 3.001 ms/op
                 executeQuery·p0.00:   534.249 ms/op
                 executeQuery·p0.50:   537.919 ms/op
                 executeQuery·p0.90:   544.211 ms/op
                 executeQuery·p0.95:   544.211 ms/op
                 executeQuery·p0.99:   544.211 ms/op
                 executeQuery·p0.999:  544.211 ms/op
                 executeQuery·p0.9999: 544.211 ms/op
                 executeQuery·p1.00:   544.211 ms/op

Iteration   5: 540.789 ±(99.9%) 2.129 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   540.017 ms/op
                 executeQuery·p0.90:   544.211 ms/op
                 executeQuery·p0.95:   544.211 ms/op
                 executeQuery·p0.99:   544.211 ms/op
                 executeQuery·p0.999:  544.211 ms/op
                 executeQuery·p0.9999: 544.211 ms/op
                 executeQuery·p1.00:   544.211 ms/op


# Run progress: 1.79% complete, ETA 04:45:28
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

543.466 ±(99.9%) 12.709 ms/op
# Warmup Iteration   2: 541.838 ±(99.9%) 1.436 ms/op
# Warmup Iteration   3: 545.922 ±(99.9%) 6.804 ms/op
# Warmup Iteration   4: 543.162 ±(99.9%) 1.218 ms/op
# Warmup Iteration   5: 539.961 ±(99.9%) 3.052 ms/op
Iteration   1: 540.458 ±(99.9%) 2.046 ms/op
                 executeQuery·p0.00:   538.968 ms/op
                 executeQuery·p0.50:   540.017 ms/op
                 executeQuery·p0.90:   541.065 ms/op
                 executeQuery·p0.95:   549.454 ms/op
                 executeQuery·p0.99:   549.454 ms/op
                 executeQuery·p0.999:  549.454 ms/op
                 executeQuery·p0.9999: 549.454 ms/op
                 executeQuery·p1.00:   549.454 ms/op

Iteration   2: 540.624 ±(99.9%) 1.921 ms/op
                 executeQuery·p0.00:   538.968 ms/op
                 executeQuery·p0.50:   540.017 ms/op
                 executeQuery·p0.90:   543.162 ms/op
                 executeQuery·p0.95:   548.405 ms/op
                 executeQuery·p0.99:   548.405 ms/op
                 executeQuery·p0.999:  548.405 ms/op
                 executeQuery·p0.9999: 548.405 ms/op
                 executeQuery·p1.00:   548.405 ms/op

Iteration   3: 539.299 ±(99.9%) 1.045 ms/op
                 executeQuery·p0.00:   536.871 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   541.065 ms/op
                 executeQuery·p0.95:   541.065 ms/op
                 executeQuery·p0.99:   541.065 ms/op
                 executeQuery·p0.999:  541.065 ms/op
                 executeQuery·p0.9999: 541.065 ms/op
                 executeQuery·p1.00:   541.065 ms/op

Iteration   4: 539.961 ±(99.9%) 1.276 ms/op
                 executeQuery·p0.00:   537.919 ms/op
                 executeQuery·p0.50:   540.017 ms/op
                 executeQuery·p0.90:   542.114 ms/op
                 executeQuery·p0.95:   543.162 ms/op
                 executeQuery·p0.99:   543.162 ms/op
                 executeQuery·p0.999:  543.162 ms/op
                 executeQuery·p0.9999: 543.162 ms/op
                 executeQuery·p1.00:   543.162 ms/op

Iteration   5: 539.796 ±(99.9%) 2.642 ms/op
                 executeQuery·p0.00:   536.871 ms/op
                 executeQuery·p0.50:   538.968 ms/op
                 executeQuery·p0.90:   543.162 ms/op
                 executeQuery·p0.95:   550.502 ms/op
                 executeQuery·p0.99:   550.502 ms/op
                 executeQuery·p0.999:  550.502 ms/op
                 executeQuery·p0.9999: 550.502 ms/op
                 executeQuery·p1.00:   550.502 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 190
  mean =    539.123 ±(99.9%) 0.697 ms/op

  Histogram, ms/op:
    [530.000, 532.500) = 0 
    [532.500, 535.000) = 22 
    [535.000, 537.500) = 22 
    [537.500, 540.000) = 54 
    [540.000, 542.500) = 72 
    [542.500, 545.000) = 16 
    [545.000, 547.500) = 1 
    [547.500, 550.000) = 2 
    [550.000, 552.500) = 1 
    [552.500, 555.000) = 0 
    [555.000, 557.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    533.725 ms/op
     p(50.0000) =    538.968 ms/op
     p(90.0000) =    543.162 ms/op
     p(95.0000) =    544.211 ms/op
     p(99.0000) =    549.548 ms/op
     p(99.9000) =    550.502 ms/op
     p(99.9900) =    550.502 ms/op
     p(99.9990) =    550.502 ms/op
     p(99.9999) =    550.502 ms/op
    p(100.0000) =    550.502 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 2.38% complete, ETA 04:44:27
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

757.475 ±(99.9%) 55.551 ms/op
# Warmup Iteration   2: 751.829 ±(99.9%) 8.195 ms/op
# Warmup Iteration   3: 751.230 ±(99.9%) 13.500 ms/op
# Warmup Iteration   4: 753.627 ±(99.9%) 11.482 ms/op
# Warmup Iteration   5: 752.728 ±(99.9%) 15.990 ms/op
Iteration   1: 748.159 ±(99.9%) 7.760 ms/op
                 executeQuery·p0.00:   735.052 ms/op
                 executeQuery·p0.50:   748.159 ms/op
                 executeQuery·p0.90:   758.120 ms/op
                 executeQuery·p0.95:   760.218 ms/op
                 executeQuery·p0.99:   760.218 ms/op
                 executeQuery·p0.999:  760.218 ms/op
                 executeQuery·p0.9999: 760.218 ms/op
                 executeQuery·p1.00:   760.218 ms/op

Iteration   2: 746.886 ±(99.9%) 10.974 ms/op
                 executeQuery·p0.00:   732.955 ms/op
                 executeQuery·p0.50:   745.013 ms/op
                 executeQuery·p0.90:   762.315 ms/op
                 executeQuery·p0.95:   765.460 ms/op
                 executeQuery·p0.99:   765.460 ms/op
                 executeQuery·p0.999:  765.460 ms/op
                 executeQuery·p0.9999: 765.460 ms/op
                 executeQuery·p1.00:   765.460 ms/op

Iteration   3: 752.203 ±(99.9%) 6.287 ms/op
                 executeQuery·p0.00:   741.343 ms/op
                 executeQuery·p0.50:   750.780 ms/op
                 executeQuery·p0.90:   760.742 ms/op
                 executeQuery·p0.95:   761.266 ms/op
                 executeQuery·p0.99:   761.266 ms/op
                 executeQuery·p0.999:  761.266 ms/op
                 executeQuery·p0.9999: 761.266 ms/op
                 executeQuery·p1.00:   761.266 ms/op

Iteration   4: 749.133 ±(99.9%) 10.361 ms/op
                 executeQuery·p0.00:   726.663 ms/op
                 executeQuery·p0.50:   750.256 ms/op
                 executeQuery·p0.90:   760.742 ms/op
                 executeQuery·p0.95:   762.315 ms/op
                 executeQuery·p0.99:   762.315 ms/op
                 executeQuery·p0.999:  762.315 ms/op
                 executeQuery·p0.9999: 762.315 ms/op
                 executeQuery·p1.00:   762.315 ms/op

Iteration   5: 747.485 ±(99.9%) 11.259 ms/op
                 executeQuery·p0.00:   726.663 ms/op
                 executeQuery·p0.50:   747.635 ms/op
                 executeQuery·p0.90:   761.266 ms/op
                 executeQuery·p0.95:   764.412 ms/op
                 executeQuery·p0.99:   764.412 ms/op
                 executeQuery·p0.999:  764.412 ms/op
                 executeQuery·p0.9999: 764.412 ms/op
                 executeQuery·p1.00:   764.412 ms/op


# Run progress: 2.98% complete, ETA 04:44:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

742.542 ±(99.9%) 25.096 ms/op
# Warmup Iteration   2: 743.066 ±(99.9%) 8.786 ms/op
# Warmup Iteration   3: 736.849 ±(99.9%) 11.245 ms/op
# Warmup Iteration   4: 738.347 ±(99.9%) 8.995 ms/op
# Warmup Iteration   5: 734.677 ±(99.9%) 6.969 ms/op
Iteration   1: 731.457 ±(99.9%) 9.795 ms/op
                 executeQuery·p0.00:   719.323 ms/op
                 executeQuery·p0.50:   732.430 ms/op
                 executeQuery·p0.90:   747.635 ms/op
                 executeQuery·p0.95:   747.635 ms/op
                 executeQuery·p0.99:   747.635 ms/op
                 executeQuery·p0.999:  747.635 ms/op
                 executeQuery·p0.9999: 747.635 ms/op
                 executeQuery·p1.00:   747.635 ms/op

Iteration   2: 728.311 ±(99.9%) 6.830 ms/op
                 executeQuery·p0.00:   719.323 ms/op
                 executeQuery·p0.50:   728.236 ms/op
                 executeQuery·p0.90:   736.625 ms/op
                 executeQuery·p0.95:   738.198 ms/op
                 executeQuery·p0.99:   738.198 ms/op
                 executeQuery·p0.999:  738.198 ms/op
                 executeQuery·p0.9999: 738.198 ms/op
                 executeQuery·p1.00:   738.198 ms/op

Iteration   3: 736.625 ±(99.9%) 8.451 ms/op
                 executeQuery·p0.00:   717.226 ms/op
                 executeQuery·p0.50:   738.198 ms/op
                 executeQuery·p0.90:   745.013 ms/op
                 executeQuery·p0.95:   750.780 ms/op
                 executeQuery·p0.99:   750.780 ms/op
                 executeQuery·p0.999:  750.780 ms/op
                 executeQuery·p0.9999: 750.780 ms/op
                 executeQuery·p1.00:   750.780 ms/op

Iteration   4: 739.171 ±(99.9%) 11.312 ms/op
                 executeQuery·p0.00:   722.469 ms/op
                 executeQuery·p0.50:   737.673 ms/op
                 executeQuery·p0.90:   754.975 ms/op
                 executeQuery·p0.95:   758.120 ms/op
                 executeQuery·p0.99:   758.120 ms/op
                 executeQuery·p0.999:  758.120 ms/op
                 executeQuery·p0.9999: 758.120 ms/op
                 executeQuery·p1.00:   758.120 ms/op

Iteration   5: 731.532 ±(99.9%) 8.980 ms/op
                 executeQuery·p0.00:   721.420 ms/op
                 executeQuery·p0.50:   730.857 ms/op
                 executeQuery·p0.90:   743.965 ms/op
                 executeQuery·p0.95:   748.683 ms/op
                 executeQuery·p0.99:   748.683 ms/op
                 executeQuery·p0.999:  748.683 ms/op
                 executeQuery·p0.9999: 748.683 ms/op
                 executeQuery·p1.00:   748.683 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 140
  mean =    741.096 ±(99.9%) 3.281 ms/op

  Histogram, ms/op:
    [710.000, 715.000) = 0 
    [715.000, 720.000) = 3 
    [720.000, 725.000) = 12 
    [725.000, 730.000) = 10 
    [730.000, 735.000) = 16 
    [735.000, 740.000) = 31 
    [740.000, 745.000) = 13 
    [745.000, 750.000) = 21 
    [750.000, 755.000) = 16 
    [755.000, 760.000) = 12 
    [760.000, 765.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =    717.226 ms/op
     p(50.0000) =    739.246 ms/op
     p(90.0000) =    757.072 ms/op
     p(95.0000) =    759.169 ms/op
     p(99.0000) =    765.031 ms/op
     p(99.9000) =    765.460 ms/op
     p(99.9900) =    765.460 ms/op
     p(99.9990) =    765.460 ms/op
     p(99.9999) =    765.460 ms/op
    p(100.0000) =    765.460 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 3.57% complete, ETA 04:43:42
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3011.510 ms/op
# Warmup Iteration   2: 2206.204 ms/op
# Warmup Iteration   3: 2107.638 ms/op
# Warmup Iteration   4: 2290.090 ms/op
# Warmup Iteration   5: 2015.363 ms/op
Iteration   1: 2057.306 ms/op
                 executeQuery·p0.00:   2057.306 ms/op
                 executeQuery·p0.50:   2057.306 ms/op
                 executeQuery·p0.90:   2057.306 ms/op
                 executeQuery·p0.95:   2057.306 ms/op
                 executeQuery·p0.99:   2057.306 ms/op
                 executeQuery·p0.999:  2057.306 ms/op
                 executeQuery·p0.9999: 2057.306 ms/op
                 executeQuery·p1.00:   2057.306 ms/op

Iteration   2: 2021.655 ms/op
                 executeQuery·p0.00:   2021.655 ms/op
                 executeQuery·p0.50:   2021.655 ms/op
                 executeQuery·p0.90:   2021.655 ms/op
                 executeQuery·p0.95:   2021.655 ms/op
                 executeQuery·p0.99:   2021.655 ms/op
                 executeQuery·p0.999:  2021.655 ms/op
                 executeQuery·p0.9999: 2021.655 ms/op
                 executeQuery·p1.00:   2021.655 ms/op

Iteration   3: 2017.460 ms/op
                 executeQuery·p0.00:   2017.460 ms/op
                 executeQuery·p0.50:   2017.460 ms/op
                 executeQuery·p0.90:   2017.460 ms/op
                 executeQuery·p0.95:   2017.460 ms/op
                 executeQuery·p0.99:   2017.460 ms/op
                 executeQuery·p0.999:  2017.460 ms/op
                 executeQuery·p0.9999: 2017.460 ms/op
                 executeQuery·p1.00:   2017.460 ms/op

Iteration   4: 2030.043 ms/op
                 executeQuery·p0.00:   2030.043 ms/op
                 executeQuery·p0.50:   2030.043 ms/op
                 executeQuery·p0.90:   2030.043 ms/op
                 executeQuery·p0.95:   2030.043 ms/op
                 executeQuery·p0.99:   2030.043 ms/op
                 executeQuery·p0.999:  2030.043 ms/op
                 executeQuery·p0.9999: 2030.043 ms/op
                 executeQuery·p1.00:   2030.043 ms/op

Iteration   5: 2095.055 ms/op
                 executeQuery·p0.00:   2095.055 ms/op
                 executeQuery·p0.50:   2095.055 ms/op
                 executeQuery·p0.90:   2095.055 ms/op
                 executeQuery·p0.95:   2095.055 ms/op
                 executeQuery·p0.99:   2095.055 ms/op
                 executeQuery·p0.999:  2095.055 ms/op
                 executeQuery·p0.9999: 2095.055 ms/op
                 executeQuery·p1.00:   2095.055 ms/op


# Run progress: 4.17% complete, ETA 04:54:37
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

2428.502 ms/op
# Warmup Iteration   2: 2277.507 ms/op
# Warmup Iteration   3: 2202.010 ms/op
# Warmup Iteration   4: 2290.090 ms/op
# Warmup Iteration   5: 2172.649 ms/op
Iteration   1: 2122.318 ms/op
                 executeQuery·p0.00:   2122.318 ms/op
                 executeQuery·p0.50:   2122.318 ms/op
                 executeQuery·p0.90:   2122.318 ms/op
                 executeQuery·p0.95:   2122.318 ms/op
                 executeQuery·p0.99:   2122.318 ms/op
                 executeQuery·p0.999:  2122.318 ms/op
                 executeQuery·p0.9999: 2122.318 ms/op
                 executeQuery·p1.00:   2122.318 ms/op

Iteration   2: 2128.609 ms/op
                 executeQuery·p0.00:   2128.609 ms/op
                 executeQuery·p0.50:   2128.609 ms/op
                 executeQuery·p0.90:   2128.609 ms/op
                 executeQuery·p0.95:   2128.609 ms/op
                 executeQuery·p0.99:   2128.609 ms/op
                 executeQuery·p0.999:  2128.609 ms/op
                 executeQuery·p0.9999: 2128.609 ms/op
                 executeQuery·p1.00:   2128.609 ms/op

Iteration   3: 2120.221 ms/op
                 executeQuery·p0.00:   2120.221 ms/op
                 executeQuery·p0.50:   2120.221 ms/op
                 executeQuery·p0.90:   2120.221 ms/op
                 executeQuery·p0.95:   2120.221 ms/op
                 executeQuery·p0.99:   2120.221 ms/op
                 executeQuery·p0.999:  2120.221 ms/op
                 executeQuery·p0.9999: 2120.221 ms/op
                 executeQuery·p1.00:   2120.221 ms/op

Iteration   4: 2197.815 ms/op
                 executeQuery·p0.00:   2197.815 ms/op
                 executeQuery·p0.50:   2197.815 ms/op
                 executeQuery·p0.90:   2197.815 ms/op
                 executeQuery·p0.95:   2197.815 ms/op
                 executeQuery·p0.99:   2197.815 ms/op
                 executeQuery·p0.999:  2197.815 ms/op
                 executeQuery·p0.9999: 2197.815 ms/op
                 executeQuery·p1.00:   2197.815 ms/op

Iteration   5: 2086.666 ms/op
                 executeQuery·p0.00:   2086.666 ms/op
                 executeQuery·p0.50:   2086.666 ms/op
                 executeQuery·p0.90:   2086.666 ms/op
                 executeQuery·p0.95:   2086.666 ms/op
                 executeQuery·p0.99:   2086.666 ms/op
                 executeQuery·p0.999:  2086.666 ms/op
                 executeQuery·p0.9999: 2086.666 ms/op
                 executeQuery·p1.00:   2086.666 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   2087.715 ±(99.9%) 86.782 ms/op

  Histogram, ms/op:
    [2000.000, 2012.500) = 0 
    [2012.500, 2025.000) = 2 
    [2025.000, 2037.500) = 1 
    [2037.500, 2050.000) = 0 
    [2050.000, 2062.500) = 1 
    [2062.500, 2075.000) = 0 
    [2075.000, 2087.500) = 1 
    [2087.500, 2100.000) = 1 
    [2100.000, 2112.500) = 0 
    [2112.500, 2125.000) = 2 
    [2125.000, 2137.500) = 1 
    [2137.500, 2150.000) = 0 
    [2150.000, 2162.500) = 0 
    [2162.500, 2175.000) = 0 
    [2175.000, 2187.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2017.460 ms/op
     p(50.0000) =   2090.861 ms/op
     p(90.0000) =   2190.895 ms/op
     p(95.0000) =   2197.815 ms/op
     p(99.0000) =   2197.815 ms/op
     p(99.9000) =   2197.815 ms/op
     p(99.9900) =   2197.815 ms/op
     p(99.9990) =   2197.815 ms/op
     p(99.9999) =   2197.815 ms/op
    p(100.0000) =   2197.815 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 4.76% complete, ETA 04:57:38
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5721.031 ms/op
# Warmup Iteration   2: 4957.667 ms/op
# Warmup Iteration   3: 4991.222 ms/op
# Warmup Iteration   4: 5142.217 ms/op
# Warmup Iteration   5: 4890.558 ms/op
Iteration   1: 5133.828 ms/op
                 executeQuery·p0.00:   5133.828 ms/op
                 executeQuery·p0.50:   5133.828 ms/op
                 executeQuery·p0.90:   5133.828 ms/op
                 executeQuery·p0.95:   5133.828 ms/op
                 executeQuery·p0.99:   5133.828 ms/op
                 executeQuery·p0.999:  5133.828 ms/op
                 executeQuery·p0.9999: 5133.828 ms/op
                 executeQuery·p1.00:   5133.828 ms/op

Iteration   2: 5133.828 ms/op
                 executeQuery·p0.00:   5133.828 ms/op
                 executeQuery·p0.50:   5133.828 ms/op
                 executeQuery·p0.90:   5133.828 ms/op
                 executeQuery·p0.95:   5133.828 ms/op
                 executeQuery·p0.99:   5133.828 ms/op
                 executeQuery·p0.999:  5133.828 ms/op
                 executeQuery·p0.9999: 5133.828 ms/op
                 executeQuery·p1.00:   5133.828 ms/op

Iteration   3: 4882.170 ms/op
                 executeQuery·p0.00:   4882.170 ms/op
                 executeQuery·p0.50:   4882.170 ms/op
                 executeQuery·p0.90:   4882.170 ms/op
                 executeQuery·p0.95:   4882.170 ms/op
                 executeQuery·p0.99:   4882.170 ms/op
                 executeQuery·p0.999:  4882.170 ms/op
                 executeQuery·p0.9999: 4882.170 ms/op
                 executeQuery·p1.00:   4882.170 ms/op

Iteration   4: 4764.729 ms/op
                 executeQuery·p0.00:   4764.729 ms/op
                 executeQuery·p0.50:   4764.729 ms/op
                 executeQuery·p0.90:   4764.729 ms/op
                 executeQuery·p0.95:   4764.729 ms/op
                 executeQuery·p0.99:   4764.729 ms/op
                 executeQuery·p0.999:  4764.729 ms/op
                 executeQuery·p0.9999: 4764.729 ms/op
                 executeQuery·p1.00:   4764.729 ms/op

Iteration   5: 4764.729 ms/op
                 executeQuery·p0.00:   4764.729 ms/op
                 executeQuery·p0.50:   4764.729 ms/op
                 executeQuery·p0.90:   4764.729 ms/op
                 executeQuery·p0.95:   4764.729 ms/op
                 executeQuery·p0.99:   4764.729 ms/op
                 executeQuery·p0.999:  4764.729 ms/op
                 executeQuery·p0.9999: 4764.729 ms/op
                 executeQuery·p1.00:   4764.729 ms/op


# Run progress: 5.36% complete, ETA 06:42:34
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5427.429 ms/op
# Warmup Iteration   2: 4966.056 ms/op
# Warmup Iteration   3: 5007.999 ms/op
# Warmup Iteration   4: 5142.217 ms/op
# Warmup Iteration   5: 4890.558 ms/op
Iteration   1: 5142.217 ms/op
                 executeQuery·p0.00:   5142.217 ms/op
                 executeQuery·p0.50:   5142.217 ms/op
                 executeQuery·p0.90:   5142.217 ms/op
                 executeQuery·p0.95:   5142.217 ms/op
                 executeQuery·p0.99:   5142.217 ms/op
                 executeQuery·p0.999:  5142.217 ms/op
                 executeQuery·p0.9999: 5142.217 ms/op
                 executeQuery·p1.00:   5142.217 ms/op

Iteration   2: 4882.170 ms/op
                 executeQuery·p0.00:   4882.170 ms/op
                 executeQuery·p0.50:   4882.170 ms/op
                 executeQuery·p0.90:   4882.170 ms/op
                 executeQuery·p0.95:   4882.170 ms/op
                 executeQuery·p0.99:   4882.170 ms/op
                 executeQuery·p0.999:  4882.170 ms/op
                 executeQuery·p0.9999: 4882.170 ms/op
                 executeQuery·p1.00:   4882.170 ms/op

Iteration   3: 4924.113 ms/op
                 executeQuery·p0.00:   4924.113 ms/op
                 executeQuery·p0.50:   4924.113 ms/op
                 executeQuery·p0.90:   4924.113 ms/op
                 executeQuery·p0.95:   4924.113 ms/op
                 executeQuery·p0.99:   4924.113 ms/op
                 executeQuery·p0.999:  4924.113 ms/op
                 executeQuery·p0.9999: 4924.113 ms/op
                 executeQuery·p1.00:   4924.113 ms/op

Iteration   4: 4789.895 ms/op
                 executeQuery·p0.00:   4789.895 ms/op
                 executeQuery·p0.50:   4789.895 ms/op
                 executeQuery·p0.90:   4789.895 ms/op
                 executeQuery·p0.95:   4789.895 ms/op
                 executeQuery·p0.99:   4789.895 ms/op
                 executeQuery·p0.999:  4789.895 ms/op
                 executeQuery·p0.9999: 4789.895 ms/op
                 executeQuery·p1.00:   4789.895 ms/op

Iteration   5: 4739.564 ms/op
                 executeQuery·p0.00:   4739.564 ms/op
                 executeQuery·p0.50:   4739.564 ms/op
                 executeQuery·p0.90:   4739.564 ms/op
                 executeQuery·p0.95:   4739.564 ms/op
                 executeQuery·p0.99:   4739.564 ms/op
                 executeQuery·p0.999:  4739.564 ms/op
                 executeQuery·p0.9999: 4739.564 ms/op
                 executeQuery·p1.00:   4739.564 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   4915.724 ±(99.9%) 247.514 ms/op

  Histogram, ms/op:
    [4700.000, 4750.000) = 1 
    [4750.000, 4800.000) = 3 
    [4800.000, 4850.000) = 0 
    [4850.000, 4900.000) = 2 
    [4900.000, 4950.000) = 1 
    [4950.000, 5000.000) = 0 
    [5000.000, 5050.000) = 0 
    [5050.000, 5100.000) = 0 
    [5100.000, 5150.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   4739.564 ms/op
     p(50.0000) =   4882.170 ms/op
     p(90.0000) =   5141.378 ms/op
     p(95.0000) =   5142.217 ms/op
     p(99.0000) =   5142.217 ms/op
     p(99.9000) =   5142.217 ms/op
     p(99.9900) =   5142.217 ms/op
     p(99.9990) =   5142.217 ms/op
     p(99.9999) =   5142.217 ms/op
    p(100.0000) =   5142.217 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 5.95% complete, ETA 08:04:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6287.262 ms/op
# Warmup Iteration   2: 3822.409 ±(99.9%) 2688.373 ms/op
# Warmup Iteration   3: 3664.424 ±(99.9%) 159.288 ms/op
# Warmup Iteration   4: 3661.627 ±(99.9%) 76.520 ms/op
# Warmup Iteration   5: 3667.220 ±(99.9%) 116.886 ms/op
Iteration   1: 3693.784 ±(99.9%) 883.574 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3665.822 ms/op
                 executeQuery·p0.90:   3749.708 ms/op
                 executeQuery·p0.95:   3749.708 ms/op
                 executeQuery·p0.99:   3749.708 ms/op
                 executeQuery·p0.999:  3749.708 ms/op
                 executeQuery·p0.9999: 3749.708 ms/op
                 executeQuery·p1.00:   3749.708 ms/op

Iteration   2: 3664.424 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3661.627 ms/op
                 executeQuery·p0.50:   3665.822 ms/op
                 executeQuery·p0.90:   3665.822 ms/op
                 executeQuery·p0.95:   3665.822 ms/op
                 executeQuery·p0.99:   3665.822 ms/op
                 executeQuery·p0.999:  3665.822 ms/op
                 executeQuery·p0.9999: 3665.822 ms/op
                 executeQuery·p1.00:   3665.822 ms/op

Iteration   3: 3675.608 ±(99.9%) 377.463 ms/op
                 executeQuery·p0.00:   3661.627 ms/op
                 executeQuery·p0.50:   3665.822 ms/op
                 executeQuery·p0.90:   3699.376 ms/op
                 executeQuery·p0.95:   3699.376 ms/op
                 executeQuery·p0.99:   3699.376 ms/op
                 executeQuery·p0.999:  3699.376 ms/op
                 executeQuery·p0.9999: 3699.376 ms/op
                 executeQuery·p1.00:   3699.376 ms/op

Iteration   4: 3745.513 ±(99.9%) 2518.185 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3665.822 ms/op
                 executeQuery·p0.90:   3904.897 ms/op
                 executeQuery·p0.95:   3904.897 ms/op
                 executeQuery·p0.99:   3904.897 ms/op
                 executeQuery·p0.999:  3904.897 ms/op
                 executeQuery·p0.9999: 3904.897 ms/op
                 executeQuery·p1.00:   3904.897 ms/op

Iteration   5: 3711.959 ±(99.9%) 1392.154 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3670.016 ms/op
                 executeQuery·p0.90:   3800.039 ms/op
                 executeQuery·p0.95:   3800.039 ms/op
                 executeQuery·p0.99:   3800.039 ms/op
                 executeQuery·p0.999:  3800.039 ms/op
                 executeQuery·p0.9999: 3800.039 ms/op
                 executeQuery·p1.00:   3800.039 ms/op


# Run progress: 6.55% complete, ETA 07:45:08
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3441.426 ±(99.9%) 21263.087 ms/op
# Warmup Iteration   2: 3704.969 ±(99.9%) 1317.236 ms/op
# Warmup Iteration   3: 3665.822 ±(99.9%) 202.452 ms/op
# Warmup Iteration   4: 3670.016 ±(99.9%) 76.520 ms/op
# Warmup Iteration   5: 3688.191 ±(99.9%) 309.251 ms/op
Iteration   1: 3670.016 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3670.016 ms/op
                 executeQuery·p0.90:   3674.210 ms/op
                 executeQuery·p0.95:   3674.210 ms/op
                 executeQuery·p0.99:   3674.210 ms/op
                 executeQuery·p0.999:  3674.210 ms/op
                 executeQuery·p0.9999: 3674.210 ms/op
                 executeQuery·p1.00:   3674.210 ms/op

Iteration   2: 3670.016 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   3665.822 ms/op
                 executeQuery·p0.50:   3670.016 ms/op
                 executeQuery·p0.90:   3674.210 ms/op
                 executeQuery·p0.95:   3674.210 ms/op
                 executeQuery·p0.99:   3674.210 ms/op
                 executeQuery·p0.999:  3674.210 ms/op
                 executeQuery·p0.9999: 3674.210 ms/op
                 executeQuery·p1.00:   3674.210 ms/op

Iteration   3: 3707.765 ±(99.9%) 1063.046 ms/op
                 executeQuery·p0.00:   3670.016 ms/op
                 executeQuery·p0.50:   3678.405 ms/op
                 executeQuery·p0.90:   3774.874 ms/op
                 executeQuery·p0.95:   3774.874 ms/op
                 executeQuery·p0.99:   3774.874 ms/op
                 executeQuery·p0.999:  3774.874 ms/op
                 executeQuery·p0.9999: 3774.874 ms/op
                 executeQuery·p1.00:   3774.874 ms/op

Iteration   4: 3671.414 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   3670.016 ms/op
                 executeQuery·p0.50:   3670.016 ms/op
                 executeQuery·p0.90:   3674.210 ms/op
                 executeQuery·p0.95:   3674.210 ms/op
                 executeQuery·p0.99:   3674.210 ms/op
                 executeQuery·p0.999:  3674.210 ms/op
                 executeQuery·p0.9999: 3674.210 ms/op
                 executeQuery·p1.00:   3674.210 ms/op

Iteration   5: 3677.007 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   3670.016 ms/op
                 executeQuery·p0.50:   3678.405 ms/op
                 executeQuery·p0.90:   3682.599 ms/op
                 executeQuery·p0.95:   3682.599 ms/op
                 executeQuery·p0.99:   3682.599 ms/op
                 executeQuery·p0.999:  3682.599 ms/op
                 executeQuery·p0.9999: 3682.599 ms/op
                 executeQuery·p1.00:   3682.599 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 30
  mean =   3688.751 ±(99.9%) 35.183 ms/op

  Histogram, ms/op:
    [3600.000, 3625.000) = 0 
    [3625.000, 3650.000) = 0 
    [3650.000, 3675.000) = 22 
    [3675.000, 3700.000) = 4 
    [3700.000, 3725.000) = 0 
    [3725.000, 3750.000) = 1 
    [3750.000, 3775.000) = 1 
    [3775.000, 3800.000) = 0 
    [3800.000, 3825.000) = 1 
    [3825.000, 3850.000) = 0 
    [3850.000, 3875.000) = 0 
    [3875.000, 3900.000) = 0 
    [3900.000, 3925.000) = 1 
    [3925.000, 3950.000) = 0 
    [3950.000, 3975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3661.627 ms/op
     p(50.0000) =   3670.016 ms/op
     p(90.0000) =   3772.357 ms/op
     p(95.0000) =   3847.225 ms/op
     p(99.0000) =   3904.897 ms/op
     p(99.9000) =   3904.897 ms/op
     p(99.9900) =   3904.897 ms/op
     p(99.9990) =   3904.897 ms/op
     p(99.9999) =   3904.897 ms/op
    p(100.0000) =   3904.897 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 7.14% complete, ETA 07:27:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6710.886 ms/op
# Warmup Iteration   2: 5255.463 ms/op
# Warmup Iteration   3: 6232.736 ms/op
# Warmup Iteration   4: 5205.131 ms/op
# Warmup Iteration   5: 5158.994 ms/op
Iteration   1: 5154.800 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5154.800 ms/op
                 executeQuery·p0.90:   5158.994 ms/op
                 executeQuery·p0.95:   5158.994 ms/op
                 executeQuery·p0.99:   5158.994 ms/op
                 executeQuery·p0.999:  5158.994 ms/op
                 executeQuery·p0.9999: 5158.994 ms/op
                 executeQuery·p1.00:   5158.994 ms/op

Iteration   2: 5163.188 ms/op
                 executeQuery·p0.00:   5158.994 ms/op
                 executeQuery·p0.50:   5163.188 ms/op
                 executeQuery·p0.90:   5167.383 ms/op
                 executeQuery·p0.95:   5167.383 ms/op
                 executeQuery·p0.99:   5167.383 ms/op
                 executeQuery·p0.999:  5167.383 ms/op
                 executeQuery·p0.9999: 5167.383 ms/op
                 executeQuery·p1.00:   5167.383 ms/op

Iteration   3: 5163.188 ms/op
                 executeQuery·p0.00:   5142.217 ms/op
                 executeQuery·p0.50:   5163.188 ms/op
                 executeQuery·p0.90:   5184.160 ms/op
                 executeQuery·p0.95:   5184.160 ms/op
                 executeQuery·p0.99:   5184.160 ms/op
                 executeQuery·p0.999:  5184.160 ms/op
                 executeQuery·p0.9999: 5184.160 ms/op
                 executeQuery·p1.00:   5184.160 ms/op

Iteration   4: 5150.605 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5150.605 ms/op
                 executeQuery·p0.90:   5150.605 ms/op
                 executeQuery·p0.95:   5150.605 ms/op
                 executeQuery·p0.99:   5150.605 ms/op
                 executeQuery·p0.999:  5150.605 ms/op
                 executeQuery·p0.9999: 5150.605 ms/op
                 executeQuery·p1.00:   5150.605 ms/op

Iteration   5: 6811.550 ms/op
                 executeQuery·p0.00:   5158.994 ms/op
                 executeQuery·p0.50:   6811.550 ms/op
                 executeQuery·p0.90:   8464.105 ms/op
                 executeQuery·p0.95:   8464.105 ms/op
                 executeQuery·p0.99:   8464.105 ms/op
                 executeQuery·p0.999:  8464.105 ms/op
                 executeQuery·p0.9999: 8464.105 ms/op
                 executeQuery·p1.00:   8464.105 ms/op


# Run progress: 7.74% complete, ETA 07:13:20
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5013.591 ±(99.9%) 10296.192 ms/op
# Warmup Iteration   2: 5213.520 ms/op
# Warmup Iteration   3: 5158.994 ms/op
# Warmup Iteration   4: 5242.880 ms/op
# Warmup Iteration   5: 5154.800 ms/op
Iteration   1: 5188.354 ms/op
                 executeQuery·p0.00:   5158.994 ms/op
                 executeQuery·p0.50:   5188.354 ms/op
                 executeQuery·p0.90:   5217.714 ms/op
                 executeQuery·p0.95:   5217.714 ms/op
                 executeQuery·p0.99:   5217.714 ms/op
                 executeQuery·p0.999:  5217.714 ms/op
                 executeQuery·p0.9999: 5217.714 ms/op
                 executeQuery·p1.00:   5217.714 ms/op

Iteration   2: 5163.188 ms/op
                 executeQuery·p0.00:   5158.994 ms/op
                 executeQuery·p0.50:   5163.188 ms/op
                 executeQuery·p0.90:   5167.383 ms/op
                 executeQuery·p0.95:   5167.383 ms/op
                 executeQuery·p0.99:   5167.383 ms/op
                 executeQuery·p0.999:  5167.383 ms/op
                 executeQuery·p0.9999: 5167.383 ms/op
                 executeQuery·p1.00:   5167.383 ms/op

Iteration   3: 5184.160 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5184.160 ms/op
                 executeQuery·p0.90:   5217.714 ms/op
                 executeQuery·p0.95:   5217.714 ms/op
                 executeQuery·p0.99:   5217.714 ms/op
                 executeQuery·p0.999:  5217.714 ms/op
                 executeQuery·p0.9999: 5217.714 ms/op
                 executeQuery·p1.00:   5217.714 ms/op

Iteration   4: 5167.383 ms/op
                 executeQuery·p0.00:   5158.994 ms/op
                 executeQuery·p0.50:   5167.383 ms/op
                 executeQuery·p0.90:   5175.771 ms/op
                 executeQuery·p0.95:   5175.771 ms/op
                 executeQuery·p0.99:   5175.771 ms/op
                 executeQuery·p0.999:  5175.771 ms/op
                 executeQuery·p0.9999: 5175.771 ms/op
                 executeQuery·p1.00:   5175.771 ms/op

Iteration   5: 5163.188 ms/op
                 executeQuery·p0.00:   5158.994 ms/op
                 executeQuery·p0.50:   5163.188 ms/op
                 executeQuery·p0.90:   5167.383 ms/op
                 executeQuery·p0.95:   5167.383 ms/op
                 executeQuery·p0.99:   5167.383 ms/op
                 executeQuery·p0.999:  5167.383 ms/op
                 executeQuery·p0.9999: 5167.383 ms/op
                 executeQuery·p1.00:   5167.383 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   5330.960 ±(99.9%) 640.619 ms/op

  Histogram, ms/op:
    [5000.000, 5250.000) = 19 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 0 
    [5750.000, 6000.000) = 0 
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 0 
    [6750.000, 7000.000) = 0 
    [7000.000, 7250.000) = 0 
    [7250.000, 7500.000) = 0 
    [7500.000, 7750.000) = 0 
    [7750.000, 8000.000) = 0 
    [8000.000, 8250.000) = 0 
    [8250.000, 8500.000) = 1 
    [8500.000, 8750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5142.217 ms/op
     p(50.0000) =   5158.994 ms/op
     p(90.0000) =   5217.714 ms/op
     p(95.0000) =   8301.786 ms/op
     p(99.0000) =   8464.105 ms/op
     p(99.9000) =   8464.105 ms/op
     p(99.9900) =   8464.105 ms/op
     p(99.9990) =   8464.105 ms/op
     p(99.9999) =   8464.105 ms/op
    p(100.0000) =   8464.105 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 8.33% complete, ETA 06:59:58
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7788.823 ms/op
# Warmup Iteration   2: 7251.952 ms/op
# Warmup Iteration   3: 7520.387 ms/op
# Warmup Iteration   4: 7499.416 ms/op
# Warmup Iteration   5: 7474.250 ms/op
Iteration   1: 7373.586 ms/op
                 executeQuery·p0.00:   7331.643 ms/op
                 executeQuery·p0.50:   7373.586 ms/op
                 executeQuery·p0.90:   7415.529 ms/op
                 executeQuery·p0.95:   7415.529 ms/op
                 executeQuery·p0.99:   7415.529 ms/op
                 executeQuery·p0.999:  7415.529 ms/op
                 executeQuery·p0.9999: 7415.529 ms/op
                 executeQuery·p1.00:   7415.529 ms/op

Iteration   2: 7411.335 ms/op
                 executeQuery·p0.00:   7365.198 ms/op
                 executeQuery·p0.50:   7411.335 ms/op
                 executeQuery·p0.90:   7457.473 ms/op
                 executeQuery·p0.95:   7457.473 ms/op
                 executeQuery·p0.99:   7457.473 ms/op
                 executeQuery·p0.999:  7457.473 ms/op
                 executeQuery·p0.9999: 7457.473 ms/op
                 executeQuery·p1.00:   7457.473 ms/op

Iteration   3: 7478.444 ms/op
                 executeQuery·p0.00:   7407.141 ms/op
                 executeQuery·p0.50:   7478.444 ms/op
                 executeQuery·p0.90:   7549.747 ms/op
                 executeQuery·p0.95:   7549.747 ms/op
                 executeQuery·p0.99:   7549.747 ms/op
                 executeQuery·p0.999:  7549.747 ms/op
                 executeQuery·p0.9999: 7549.747 ms/op
                 executeQuery·p1.00:   7549.747 ms/op

Iteration   4: 7453.278 ms/op
                 executeQuery·p0.00:   7415.529 ms/op
                 executeQuery·p0.50:   7453.278 ms/op
                 executeQuery·p0.90:   7491.027 ms/op
                 executeQuery·p0.95:   7491.027 ms/op
                 executeQuery·p0.99:   7491.027 ms/op
                 executeQuery·p0.999:  7491.027 ms/op
                 executeQuery·p0.9999: 7491.027 ms/op
                 executeQuery·p1.00:   7491.027 ms/op

Iteration   5: 7482.638 ms/op
                 executeQuery·p0.00:   7432.307 ms/op
                 executeQuery·p0.50:   7482.638 ms/op
                 executeQuery·p0.90:   7532.970 ms/op
                 executeQuery·p0.95:   7532.970 ms/op
                 executeQuery·p0.99:   7532.970 ms/op
                 executeQuery·p0.999:  7532.970 ms/op
                 executeQuery·p0.9999: 7532.970 ms/op
                 executeQuery·p1.00:   7532.970 ms/op


# Run progress: 8.93% complete, ETA 06:55:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7931.429 ms/op
# Warmup Iteration   2: 7130.317 ms/op
# Warmup Iteration   3: 7621.050 ms/op
# Warmup Iteration   4: 7415.529 ms/op
# Warmup Iteration   5: 7524.581 ms/op
Iteration   1: 7524.581 ms/op
                 executeQuery·p0.00:   7507.804 ms/op
                 executeQuery·p0.50:   7524.581 ms/op
                 executeQuery·p0.90:   7541.359 ms/op
                 executeQuery·p0.95:   7541.359 ms/op
                 executeQuery·p0.99:   7541.359 ms/op
                 executeQuery·p0.999:  7541.359 ms/op
                 executeQuery·p0.9999: 7541.359 ms/op
                 executeQuery·p1.00:   7541.359 ms/op

Iteration   2: 7415.529 ms/op
                 executeQuery·p0.00:   7415.529 ms/op
                 executeQuery·p0.50:   7415.529 ms/op
                 executeQuery·p0.90:   7415.529 ms/op
                 executeQuery·p0.95:   7415.529 ms/op
                 executeQuery·p0.99:   7415.529 ms/op
                 executeQuery·p0.999:  7415.529 ms/op
                 executeQuery·p0.9999: 7415.529 ms/op
                 executeQuery·p1.00:   7415.529 ms/op

Iteration   3: 7713.325 ms/op
                 executeQuery·p0.00:   7532.970 ms/op
                 executeQuery·p0.50:   7713.325 ms/op
                 executeQuery·p0.90:   7893.680 ms/op
                 executeQuery·p0.95:   7893.680 ms/op
                 executeQuery·p0.99:   7893.680 ms/op
                 executeQuery·p0.999:  7893.680 ms/op
                 executeQuery·p0.9999: 7893.680 ms/op
                 executeQuery·p1.00:   7893.680 ms/op

Iteration   4: 7721.714 ms/op
                 executeQuery·p0.00:   7541.359 ms/op
                 executeQuery·p0.50:   7721.714 ms/op
                 executeQuery·p0.90:   7902.069 ms/op
                 executeQuery·p0.95:   7902.069 ms/op
                 executeQuery·p0.99:   7902.069 ms/op
                 executeQuery·p0.999:  7902.069 ms/op
                 executeQuery·p0.9999: 7902.069 ms/op
                 executeQuery·p1.00:   7902.069 ms/op

Iteration   5: 7432.307 ms/op
                 executeQuery·p0.00:   7407.141 ms/op
                 executeQuery·p0.50:   7432.307 ms/op
                 executeQuery·p0.90:   7457.473 ms/op
                 executeQuery·p0.95:   7457.473 ms/op
                 executeQuery·p0.99:   7457.473 ms/op
                 executeQuery·p0.999:  7457.473 ms/op
                 executeQuery·p0.9999: 7457.473 ms/op
                 executeQuery·p1.00:   7457.473 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   7500.674 ±(99.9%) 129.925 ms/op

  Histogram, ms/op:
    [7300.000, 7350.000) = 1 
    [7350.000, 7400.000) = 1 
    [7400.000, 7450.000) = 7 
    [7450.000, 7500.000) = 3 
    [7500.000, 7550.000) = 6 
    [7550.000, 7600.000) = 0 
    [7600.000, 7650.000) = 0 
    [7650.000, 7700.000) = 0 
    [7700.000, 7750.000) = 0 
    [7750.000, 7800.000) = 0 
    [7800.000, 7850.000) = 0 
    [7850.000, 7900.000) = 1 
    [7900.000, 7950.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   7331.643 ms/op
     p(50.0000) =   7457.473 ms/op
     p(90.0000) =   7859.287 ms/op
     p(95.0000) =   7901.649 ms/op
     p(99.0000) =   7902.069 ms/op
     p(99.9000) =   7902.069 ms/op
     p(99.9900) =   7902.069 ms/op
     p(99.9990) =   7902.069 ms/op
     p(99.9999) =   7902.069 ms/op
    p(100.0000) =   7902.069 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 9.52% complete, ETA 06:50:56
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

25836.913 ms/op
# Warmup Iteration   2: 21911.044 ms/op
# Warmup Iteration   3: 20535.312 ms/op
# Warmup Iteration   4: 20703.085 ms/op
# Warmup Iteration   5: 22213.034 ms/op
Iteration   1: 23186.113 ms/op
                 executeQuery·p0.00:   23186.113 ms/op
                 executeQuery·p0.50:   23186.113 ms/op
                 executeQuery·p0.90:   23186.113 ms/op
                 executeQuery·p0.95:   23186.113 ms/op
                 executeQuery·p0.99:   23186.113 ms/op
                 executeQuery·p0.999:  23186.113 ms/op
                 executeQuery·p0.9999: 23186.113 ms/op
                 executeQuery·p1.00:   23186.113 ms/op

Iteration   2: 21239.955 ms/op
                 executeQuery·p0.00:   21239.955 ms/op
                 executeQuery·p0.50:   21239.955 ms/op
                 executeQuery·p0.90:   21239.955 ms/op
                 executeQuery·p0.95:   21239.955 ms/op
                 executeQuery·p0.99:   21239.955 ms/op
                 executeQuery·p0.999:  21239.955 ms/op
                 executeQuery·p0.9999: 21239.955 ms/op
                 executeQuery·p1.00:   21239.955 ms/op

Iteration   3: 20669.530 ms/op
                 executeQuery·p0.00:   20669.530 ms/op
                 executeQuery·p0.50:   20669.530 ms/op
                 executeQuery·p0.90:   20669.530 ms/op
                 executeQuery·p0.95:   20669.530 ms/op
                 executeQuery·p0.99:   20669.530 ms/op
                 executeQuery·p0.999:  20669.530 ms/op
                 executeQuery·p0.9999: 20669.530 ms/op
                 executeQuery·p1.00:   20669.530 ms/op

Iteration   4: 21239.955 ms/op
                 executeQuery·p0.00:   21239.955 ms/op
                 executeQuery·p0.50:   21239.955 ms/op
                 executeQuery·p0.90:   21239.955 ms/op
                 executeQuery·p0.95:   21239.955 ms/op
                 executeQuery·p0.99:   21239.955 ms/op
                 executeQuery·p0.999:  21239.955 ms/op
                 executeQuery·p0.9999: 21239.955 ms/op
                 executeQuery·p1.00:   21239.955 ms/op

Iteration   5: 20635.976 ms/op
                 executeQuery·p0.00:   20635.976 ms/op
                 executeQuery·p0.50:   20635.976 ms/op
                 executeQuery·p0.90:   20635.976 ms/op
                 executeQuery·p0.95:   20635.976 ms/op
                 executeQuery·p0.99:   20635.976 ms/op
                 executeQuery·p0.999:  20635.976 ms/op
                 executeQuery·p0.9999: 20635.976 ms/op
                 executeQuery·p1.00:   20635.976 ms/op


# Run progress: 10.12% complete, ETA 07:14:08
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

25065.161 ms/op
# Warmup Iteration   2: 21105.738 ms/op
# Warmup Iteration   3: 19964.887 ms/op
# Warmup Iteration   4: 21206.401 ms/op
# Warmup Iteration   5: 20233.322 ms/op
Iteration   1: 24092.082 ms/op
                 executeQuery·p0.00:   24092.082 ms/op
                 executeQuery·p0.50:   24092.082 ms/op
                 executeQuery·p0.90:   24092.082 ms/op
                 executeQuery·p0.95:   24092.082 ms/op
                 executeQuery·p0.99:   24092.082 ms/op
                 executeQuery·p0.999:  24092.082 ms/op
                 executeQuery·p0.9999: 24092.082 ms/op
                 executeQuery·p1.00:   24092.082 ms/op

Iteration   2: 22246.588 ms/op
                 executeQuery·p0.00:   22246.588 ms/op
                 executeQuery·p0.50:   22246.588 ms/op
                 executeQuery·p0.90:   22246.588 ms/op
                 executeQuery·p0.95:   22246.588 ms/op
                 executeQuery·p0.99:   22246.588 ms/op
                 executeQuery·p0.999:  22246.588 ms/op
                 executeQuery·p0.9999: 22246.588 ms/op
                 executeQuery·p1.00:   22246.588 ms/op

Iteration   3: 22213.034 ms/op
                 executeQuery·p0.00:   22213.034 ms/op
                 executeQuery·p0.50:   22213.034 ms/op
                 executeQuery·p0.90:   22213.034 ms/op
                 executeQuery·p0.95:   22213.034 ms/op
                 executeQuery·p0.99:   22213.034 ms/op
                 executeQuery·p0.999:  22213.034 ms/op
                 executeQuery·p0.9999: 22213.034 ms/op
                 executeQuery·p1.00:   22213.034 ms/op

Iteration   4: 22716.350 ms/op
                 executeQuery·p0.00:   22716.350 ms/op
                 executeQuery·p0.50:   22716.350 ms/op
                 executeQuery·p0.90:   22716.350 ms/op
                 executeQuery·p0.95:   22716.350 ms/op
                 executeQuery·p0.99:   22716.350 ms/op
                 executeQuery·p0.999:  22716.350 ms/op
                 executeQuery·p0.9999: 22716.350 ms/op
                 executeQuery·p1.00:   22716.350 ms/op

Iteration   5: 22582.133 ms/op
                 executeQuery·p0.00:   22582.133 ms/op
                 executeQuery·p0.50:   22582.133 ms/op
                 executeQuery·p0.90:   22582.133 ms/op
                 executeQuery·p0.95:   22582.133 ms/op
                 executeQuery·p0.99:   22582.133 ms/op
                 executeQuery·p0.999:  22582.133 ms/op
                 executeQuery·p0.9999: 22582.133 ms/op
                 executeQuery·p1.00:   22582.133 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  22082.172 ±(99.9%) 1706.043 ms/op

  Histogram, ms/op:
    [20000.000, 20500.000) = 0 
    [20500.000, 21000.000) = 2 
    [21000.000, 21500.000) = 2 
    [21500.000, 22000.000) = 0 
    [22000.000, 22500.000) = 2 
    [22500.000, 23000.000) = 2 
    [23000.000, 23500.000) = 1 
    [23500.000, 24000.000) = 0 
    [24000.000, 24500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  20635.976 ms/op
     p(50.0000) =  22229.811 ms/op
     p(90.0000) =  24001.485 ms/op
     p(95.0000) =  24092.082 ms/op
     p(99.0000) =  24092.082 ms/op
     p(99.9000) =  24092.082 ms/op
     p(99.9900) =  24092.082 ms/op
     p(99.9990) =  24092.082 ms/op
     p(99.9999) =  24092.082 ms/op
    p(100.0000) =  24092.082 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 10.71% complete, ETA 07:33:25
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

52344.914 ms/op
# Warmup Iteration   2: 52479.132 ms/op
# Warmup Iteration   3: 48989.471 ms/op
# Warmup Iteration   4: 48452.600 ms/op
# Warmup Iteration   5: 50398.757 ms/op
Iteration   1: 49660.559 ms/op
                 executeQuery·p0.00:   49660.559 ms/op
                 executeQuery·p0.50:   49660.559 ms/op
                 executeQuery·p0.90:   49660.559 ms/op
                 executeQuery·p0.95:   49660.559 ms/op
                 executeQuery·p0.99:   49660.559 ms/op
                 executeQuery·p0.999:  49660.559 ms/op
                 executeQuery·p0.9999: 49660.559 ms/op
                 executeQuery·p1.00:   49660.559 ms/op

Iteration   2: 48721.035 ms/op
                 executeQuery·p0.00:   48721.035 ms/op
                 executeQuery·p0.50:   48721.035 ms/op
                 executeQuery·p0.90:   48721.035 ms/op
                 executeQuery·p0.95:   48721.035 ms/op
                 executeQuery·p0.99:   48721.035 ms/op
                 executeQuery·p0.999:  48721.035 ms/op
                 executeQuery·p0.9999: 48721.035 ms/op
                 executeQuery·p1.00:   48721.035 ms/op

Iteration   3: 50063.213 ms/op
                 executeQuery·p0.00:   50063.213 ms/op
                 executeQuery·p0.50:   50063.213 ms/op
                 executeQuery·p0.90:   50063.213 ms/op
                 executeQuery·p0.95:   50063.213 ms/op
                 executeQuery·p0.99:   50063.213 ms/op
                 executeQuery·p0.999:  50063.213 ms/op
                 executeQuery·p0.9999: 50063.213 ms/op
                 executeQuery·p1.00:   50063.213 ms/op

Iteration   4: 48855.253 ms/op
                 executeQuery·p0.00:   48855.253 ms/op
                 executeQuery·p0.50:   48855.253 ms/op
                 executeQuery·p0.90:   48855.253 ms/op
                 executeQuery·p0.95:   48855.253 ms/op
                 executeQuery·p0.99:   48855.253 ms/op
                 executeQuery·p0.999:  48855.253 ms/op
                 executeQuery·p0.9999: 48855.253 ms/op
                 executeQuery·p1.00:   48855.253 ms/op

Iteration   5: 51808.043 ms/op
                 executeQuery·p0.00:   51808.043 ms/op
                 executeQuery·p0.50:   51808.043 ms/op
                 executeQuery·p0.90:   51808.043 ms/op
                 executeQuery·p0.95:   51808.043 ms/op
                 executeQuery·p0.99:   51808.043 ms/op
                 executeQuery·p0.999:  51808.043 ms/op
                 executeQuery·p0.9999: 51808.043 ms/op
                 executeQuery·p1.00:   51808.043 ms/op


# Run progress: 11.31% complete, ETA 09:04:37
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

49861.886 ms/op
# Warmup Iteration   2: 48788.144 ms/op
# Warmup Iteration   3: 48452.600 ms/op
# Warmup Iteration   4: 47982.838 ms/op
# Warmup Iteration   5: 50935.628 ms/op
Iteration   1: 51338.281 ms/op
                 executeQuery·p0.00:   51338.281 ms/op
                 executeQuery·p0.50:   51338.281 ms/op
                 executeQuery·p0.90:   51338.281 ms/op
                 executeQuery·p0.95:   51338.281 ms/op
                 executeQuery·p0.99:   51338.281 ms/op
                 executeQuery·p0.999:  51338.281 ms/op
                 executeQuery·p0.9999: 51338.281 ms/op
                 executeQuery·p1.00:   51338.281 ms/op

Iteration   2: 49928.995 ms/op
                 executeQuery·p0.00:   49928.995 ms/op
                 executeQuery·p0.50:   49928.995 ms/op
                 executeQuery·p0.90:   49928.995 ms/op
                 executeQuery·p0.95:   49928.995 ms/op
                 executeQuery·p0.99:   49928.995 ms/op
                 executeQuery·p0.999:  49928.995 ms/op
                 executeQuery·p0.9999: 49928.995 ms/op
                 executeQuery·p1.00:   49928.995 ms/op

Iteration   3: 48989.471 ms/op
                 executeQuery·p0.00:   48989.471 ms/op
                 executeQuery·p0.50:   48989.471 ms/op
                 executeQuery·p0.90:   48989.471 ms/op
                 executeQuery·p0.95:   48989.471 ms/op
                 executeQuery·p0.99:   48989.471 ms/op
                 executeQuery·p0.999:  48989.471 ms/op
                 executeQuery·p0.9999: 48989.471 ms/op
                 executeQuery·p1.00:   48989.471 ms/op

Iteration   4: 47513.076 ms/op
                 executeQuery·p0.00:   47513.076 ms/op
                 executeQuery·p0.50:   47513.076 ms/op
                 executeQuery·p0.90:   47513.076 ms/op
                 executeQuery·p0.95:   47513.076 ms/op
                 executeQuery·p0.99:   47513.076 ms/op
                 executeQuery·p0.999:  47513.076 ms/op
                 executeQuery·p0.9999: 47513.076 ms/op
                 executeQuery·p1.00:   47513.076 ms/op

Iteration   5: 48519.709 ms/op
                 executeQuery·p0.00:   48519.709 ms/op
                 executeQuery·p0.50:   48519.709 ms/op
                 executeQuery·p0.90:   48519.709 ms/op
                 executeQuery·p0.95:   48519.709 ms/op
                 executeQuery·p0.99:   48519.709 ms/op
                 executeQuery·p0.999:  48519.709 ms/op
                 executeQuery·p0.9999: 48519.709 ms/op
                 executeQuery·p1.00:   48519.709 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  49539.763 ±(99.9%) 1978.263 ms/op

  Histogram, ms/op:
    [47000.000, 47500.000) = 0 
    [47500.000, 48000.000) = 1 
    [48000.000, 48500.000) = 0 
    [48500.000, 49000.000) = 4 
    [49000.000, 49500.000) = 0 
    [49500.000, 50000.000) = 2 
    [50000.000, 50500.000) = 1 
    [50500.000, 51000.000) = 0 
    [51000.000, 51500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  47513.076 ms/op
     p(50.0000) =  49325.015 ms/op
     p(90.0000) =  51761.067 ms/op
     p(95.0000) =  51808.043 ms/op
     p(99.0000) =  51808.043 ms/op
     p(99.9000) =  51808.043 ms/op
     p(99.9900) =  51808.043 ms/op
     p(99.9990) =  51808.043 ms/op
     p(99.9999) =  51808.043 ms/op
    p(100.0000) =  51808.043 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 11.90% complete, ETA 10:25:31
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16525.558 ms/op
# Warmup Iteration   2: 8082.424 ms/op
# Warmup Iteration   3: 7516.193 ms/op
# Warmup Iteration   4: 7155.483 ms/op
# Warmup Iteration   5: 7126.122 ms/op
Iteration   1: 7168.066 ms/op
                 executeQuery·p0.00:   7163.871 ms/op
                 executeQuery·p0.50:   7168.066 ms/op
                 executeQuery·p0.90:   7172.260 ms/op
                 executeQuery·p0.95:   7172.260 ms/op
                 executeQuery·p0.99:   7172.260 ms/op
                 executeQuery·p0.999:  7172.260 ms/op
                 executeQuery·p0.9999: 7172.260 ms/op
                 executeQuery·p1.00:   7172.260 ms/op

Iteration   2: 7092.568 ms/op
                 executeQuery·p0.00:   7088.374 ms/op
                 executeQuery·p0.50:   7092.568 ms/op
                 executeQuery·p0.90:   7096.762 ms/op
                 executeQuery·p0.95:   7096.762 ms/op
                 executeQuery·p0.99:   7096.762 ms/op
                 executeQuery·p0.999:  7096.762 ms/op
                 executeQuery·p0.9999: 7096.762 ms/op
                 executeQuery·p1.00:   7096.762 ms/op

Iteration   3: 7088.374 ms/op
                 executeQuery·p0.00:   7088.374 ms/op
                 executeQuery·p0.50:   7088.374 ms/op
                 executeQuery·p0.90:   7088.374 ms/op
                 executeQuery·p0.95:   7088.374 ms/op
                 executeQuery·p0.99:   7088.374 ms/op
                 executeQuery·p0.999:  7088.374 ms/op
                 executeQuery·p0.9999: 7088.374 ms/op
                 executeQuery·p1.00:   7088.374 ms/op

Iteration   4: 7176.454 ms/op
                 executeQuery·p0.00:   7172.260 ms/op
                 executeQuery·p0.50:   7176.454 ms/op
                 executeQuery·p0.90:   7180.648 ms/op
                 executeQuery·p0.95:   7180.648 ms/op
                 executeQuery·p0.99:   7180.648 ms/op
                 executeQuery·p0.999:  7180.648 ms/op
                 executeQuery·p0.9999: 7180.648 ms/op
                 executeQuery·p1.00:   7180.648 ms/op

Iteration   5: 7327.449 ms/op
                 executeQuery·p0.00:   7147.094 ms/op
                 executeQuery·p0.50:   7327.449 ms/op
                 executeQuery·p0.90:   7507.804 ms/op
                 executeQuery·p0.95:   7507.804 ms/op
                 executeQuery·p0.99:   7507.804 ms/op
                 executeQuery·p0.999:  7507.804 ms/op
                 executeQuery·p0.9999: 7507.804 ms/op
                 executeQuery·p1.00:   7507.804 ms/op


# Run progress: 12.50% complete, ETA 10:09:12
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6096.421 ms/op
# Warmup Iteration   2: 7667.188 ms/op
# Warmup Iteration   3: 7415.529 ms/op
# Warmup Iteration   4: 7474.250 ms/op
# Warmup Iteration   5: 7423.918 ms/op
Iteration   1: 7428.112 ms/op
                 executeQuery·p0.00:   7415.529 ms/op
                 executeQuery·p0.50:   7428.112 ms/op
                 executeQuery·p0.90:   7440.695 ms/op
                 executeQuery·p0.95:   7440.695 ms/op
                 executeQuery·p0.99:   7440.695 ms/op
                 executeQuery·p0.999:  7440.695 ms/op
                 executeQuery·p0.9999: 7440.695 ms/op
                 executeQuery·p1.00:   7440.695 ms/op

Iteration   2: 7453.278 ms/op
                 executeQuery·p0.00:   7423.918 ms/op
                 executeQuery·p0.50:   7453.278 ms/op
                 executeQuery·p0.90:   7482.638 ms/op
                 executeQuery·p0.95:   7482.638 ms/op
                 executeQuery·p0.99:   7482.638 ms/op
                 executeQuery·p0.999:  7482.638 ms/op
                 executeQuery·p0.9999: 7482.638 ms/op
                 executeQuery·p1.00:   7482.638 ms/op

Iteration   3: 7625.245 ms/op
                 executeQuery·p0.00:   7499.416 ms/op
                 executeQuery·p0.50:   7625.245 ms/op
                 executeQuery·p0.90:   7751.074 ms/op
                 executeQuery·p0.95:   7751.074 ms/op
                 executeQuery·p0.99:   7751.074 ms/op
                 executeQuery·p0.999:  7751.074 ms/op
                 executeQuery·p0.9999: 7751.074 ms/op
                 executeQuery·p1.00:   7751.074 ms/op

Iteration   4: 7491.027 ms/op
                 executeQuery·p0.00:   7415.529 ms/op
                 executeQuery·p0.50:   7491.027 ms/op
                 executeQuery·p0.90:   7566.524 ms/op
                 executeQuery·p0.95:   7566.524 ms/op
                 executeQuery·p0.99:   7566.524 ms/op
                 executeQuery·p0.999:  7566.524 ms/op
                 executeQuery·p0.9999: 7566.524 ms/op
                 executeQuery·p1.00:   7566.524 ms/op

Iteration   5: 7407.141 ms/op
                 executeQuery·p0.00:   7407.141 ms/op
                 executeQuery·p0.50:   7407.141 ms/op
                 executeQuery·p0.90:   7407.141 ms/op
                 executeQuery·p0.95:   7407.141 ms/op
                 executeQuery·p0.99:   7407.141 ms/op
                 executeQuery·p0.999:  7407.141 ms/op
                 executeQuery·p0.9999: 7407.141 ms/op
                 executeQuery·p1.00:   7407.141 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   7325.771 ±(99.9%) 169.833 ms/op

  Histogram, ms/op:
    [7000.000, 7050.000) = 0 
    [7050.000, 7100.000) = 4 
    [7100.000, 7150.000) = 1 
    [7150.000, 7200.000) = 4 
    [7200.000, 7250.000) = 0 
    [7250.000, 7300.000) = 0 
    [7300.000, 7350.000) = 0 
    [7350.000, 7400.000) = 0 
    [7400.000, 7450.000) = 6 
    [7450.000, 7500.000) = 2 
    [7500.000, 7550.000) = 1 
    [7550.000, 7600.000) = 1 
    [7600.000, 7650.000) = 0 
    [7650.000, 7700.000) = 0 
    [7700.000, 7750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7088.374 ms/op
     p(50.0000) =   7407.141 ms/op
     p(90.0000) =   7560.652 ms/op
     p(95.0000) =   7741.846 ms/op
     p(99.0000) =   7751.074 ms/op
     p(99.9000) =   7751.074 ms/op
     p(99.9900) =   7751.074 ms/op
     p(99.9990) =   7751.074 ms/op
     p(99.9999) =   7751.074 ms/op
    p(100.0000) =   7751.074 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 13.10% complete, ETA 09:54:00
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16324.231 ms/op
# Warmup Iteration   2: 13237.223 ms/op
# Warmup Iteration   3: 13270.778 ms/op
# Warmup Iteration   4: 13153.337 ms/op
# Warmup Iteration   5: 12968.788 ms/op
Iteration   1: 12952.011 ms/op
                 executeQuery·p0.00:   12952.011 ms/op
                 executeQuery·p0.50:   12952.011 ms/op
                 executeQuery·p0.90:   12952.011 ms/op
                 executeQuery·p0.95:   12952.011 ms/op
                 executeQuery·p0.99:   12952.011 ms/op
                 executeQuery·p0.999:  12952.011 ms/op
                 executeQuery·p0.9999: 12952.011 ms/op
                 executeQuery·p1.00:   12952.011 ms/op

Iteration   2: 12952.011 ms/op
                 executeQuery·p0.00:   12952.011 ms/op
                 executeQuery·p0.50:   12952.011 ms/op
                 executeQuery·p0.90:   12952.011 ms/op
                 executeQuery·p0.95:   12952.011 ms/op
                 executeQuery·p0.99:   12952.011 ms/op
                 executeQuery·p0.999:  12952.011 ms/op
                 executeQuery·p0.9999: 12952.011 ms/op
                 executeQuery·p1.00:   12952.011 ms/op

Iteration   3: 12985.565 ms/op
                 executeQuery·p0.00:   12985.565 ms/op
                 executeQuery·p0.50:   12985.565 ms/op
                 executeQuery·p0.90:   12985.565 ms/op
                 executeQuery·p0.95:   12985.565 ms/op
                 executeQuery·p0.99:   12985.565 ms/op
                 executeQuery·p0.999:  12985.565 ms/op
                 executeQuery·p0.9999: 12985.565 ms/op
                 executeQuery·p1.00:   12985.565 ms/op

Iteration   4: 12952.011 ms/op
                 executeQuery·p0.00:   12952.011 ms/op
                 executeQuery·p0.50:   12952.011 ms/op
                 executeQuery·p0.90:   12952.011 ms/op
                 executeQuery·p0.95:   12952.011 ms/op
                 executeQuery·p0.99:   12952.011 ms/op
                 executeQuery·p0.999:  12952.011 ms/op
                 executeQuery·p0.9999: 12952.011 ms/op
                 executeQuery·p1.00:   12952.011 ms/op

Iteration   5: 12952.011 ms/op
                 executeQuery·p0.00:   12952.011 ms/op
                 executeQuery·p0.50:   12952.011 ms/op
                 executeQuery·p0.90:   12952.011 ms/op
                 executeQuery·p0.95:   12952.011 ms/op
                 executeQuery·p0.99:   12952.011 ms/op
                 executeQuery·p0.999:  12952.011 ms/op
                 executeQuery·p0.9999: 12952.011 ms/op
                 executeQuery·p1.00:   12952.011 ms/op


# Run progress: 13.69% complete, ETA 09:38:32
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

11408.507 ms/op
# Warmup Iteration   2: 12935.234 ms/op
# Warmup Iteration   3: 13623.099 ms/op
# Warmup Iteration   4: 12683.575 ms/op
# Warmup Iteration   5: 12851.347 ms/op
Iteration   1: 12717.130 ms/op
                 executeQuery·p0.00:   12717.130 ms/op
                 executeQuery·p0.50:   12717.130 ms/op
                 executeQuery·p0.90:   12717.130 ms/op
                 executeQuery·p0.95:   12717.130 ms/op
                 executeQuery·p0.99:   12717.130 ms/op
                 executeQuery·p0.999:  12717.130 ms/op
                 executeQuery·p0.9999: 12717.130 ms/op
                 executeQuery·p1.00:   12717.130 ms/op

Iteration   2: 12717.130 ms/op
                 executeQuery·p0.00:   12717.130 ms/op
                 executeQuery·p0.50:   12717.130 ms/op
                 executeQuery·p0.90:   12717.130 ms/op
                 executeQuery·p0.95:   12717.130 ms/op
                 executeQuery·p0.99:   12717.130 ms/op
                 executeQuery·p0.999:  12717.130 ms/op
                 executeQuery·p0.9999: 12717.130 ms/op
                 executeQuery·p1.00:   12717.130 ms/op

Iteration   3: 12733.907 ms/op
                 executeQuery·p0.00:   12733.907 ms/op
                 executeQuery·p0.50:   12733.907 ms/op
                 executeQuery·p0.90:   12733.907 ms/op
                 executeQuery·p0.95:   12733.907 ms/op
                 executeQuery·p0.99:   12733.907 ms/op
                 executeQuery·p0.999:  12733.907 ms/op
                 executeQuery·p0.9999: 12733.907 ms/op
                 executeQuery·p1.00:   12733.907 ms/op

Iteration   4: 12851.347 ms/op
                 executeQuery·p0.00:   12851.347 ms/op
                 executeQuery·p0.50:   12851.347 ms/op
                 executeQuery·p0.90:   12851.347 ms/op
                 executeQuery·p0.95:   12851.347 ms/op
                 executeQuery·p0.99:   12851.347 ms/op
                 executeQuery·p0.999:  12851.347 ms/op
                 executeQuery·p0.9999: 12851.347 ms/op
                 executeQuery·p1.00:   12851.347 ms/op

Iteration   5: 13371.441 ms/op
                 executeQuery·p0.00:   13371.441 ms/op
                 executeQuery·p0.50:   13371.441 ms/op
                 executeQuery·p0.90:   13371.441 ms/op
                 executeQuery·p0.95:   13371.441 ms/op
                 executeQuery·p0.99:   13371.441 ms/op
                 executeQuery·p0.999:  13371.441 ms/op
                 executeQuery·p0.9999: 13371.441 ms/op
                 executeQuery·p1.00:   13371.441 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  12918.456 ±(99.9%) 291.173 ms/op

  Histogram, ms/op:
    [12700.000, 12750.000) = 3 
    [12750.000, 12800.000) = 0 
    [12800.000, 12850.000) = 0 
    [12850.000, 12900.000) = 1 
    [12900.000, 12950.000) = 0 
    [12950.000, 13000.000) = 5 
    [13000.000, 13050.000) = 0 
    [13050.000, 13100.000) = 0 
    [13100.000, 13150.000) = 0 
    [13150.000, 13200.000) = 0 
    [13200.000, 13250.000) = 0 
    [13250.000, 13300.000) = 0 
    [13300.000, 13350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12717.130 ms/op
     p(50.0000) =  12952.011 ms/op
     p(90.0000) =  13332.854 ms/op
     p(95.0000) =  13371.441 ms/op
     p(99.0000) =  13371.441 ms/op
     p(99.9000) =  13371.441 ms/op
     p(99.9900) =  13371.441 ms/op
     p(99.9990) =  13371.441 ms/op
     p(99.9999) =  13371.441 ms/op
    p(100.0000) =  13371.441 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 14.29% complete, ETA 09:23:34
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16089.350 ms/op
# Warmup Iteration   2: 14931.722 ms/op
# Warmup Iteration   3: 13656.654 ms/op
# Warmup Iteration   4: 14159.970 ms/op
# Warmup Iteration   5: 14629.732 ms/op
Iteration   1: 14965.277 ms/op
                 executeQuery·p0.00:   14965.277 ms/op
                 executeQuery·p0.50:   14965.277 ms/op
                 executeQuery·p0.90:   14965.277 ms/op
                 executeQuery·p0.95:   14965.277 ms/op
                 executeQuery·p0.99:   14965.277 ms/op
                 executeQuery·p0.999:  14965.277 ms/op
                 executeQuery·p0.9999: 14965.277 ms/op
                 executeQuery·p1.00:   14965.277 ms/op

Iteration   2: 15049.163 ms/op
                 executeQuery·p0.00:   15049.163 ms/op
                 executeQuery·p0.50:   15049.163 ms/op
                 executeQuery·p0.90:   15049.163 ms/op
                 executeQuery·p0.95:   15049.163 ms/op
                 executeQuery·p0.99:   15049.163 ms/op
                 executeQuery·p0.999:  15049.163 ms/op
                 executeQuery·p0.9999: 15049.163 ms/op
                 executeQuery·p1.00:   15049.163 ms/op

Iteration   3: 14461.960 ms/op
                 executeQuery·p0.00:   14461.960 ms/op
                 executeQuery·p0.50:   14461.960 ms/op
                 executeQuery·p0.90:   14461.960 ms/op
                 executeQuery·p0.95:   14461.960 ms/op
                 executeQuery·p0.99:   14461.960 ms/op
                 executeQuery·p0.999:  14461.960 ms/op
                 executeQuery·p0.9999: 14461.960 ms/op
                 executeQuery·p1.00:   14461.960 ms/op

Iteration   4: 15099.494 ms/op
                 executeQuery·p0.00:   15099.494 ms/op
                 executeQuery·p0.50:   15099.494 ms/op
                 executeQuery·p0.90:   15099.494 ms/op
                 executeQuery·p0.95:   15099.494 ms/op
                 executeQuery·p0.99:   15099.494 ms/op
                 executeQuery·p0.999:  15099.494 ms/op
                 executeQuery·p0.9999: 15099.494 ms/op
                 executeQuery·p1.00:   15099.494 ms/op

Iteration   5: 15065.940 ms/op
                 executeQuery·p0.00:   15065.940 ms/op
                 executeQuery·p0.50:   15065.940 ms/op
                 executeQuery·p0.90:   15065.940 ms/op
                 executeQuery·p0.95:   15065.940 ms/op
                 executeQuery·p0.99:   15065.940 ms/op
                 executeQuery·p0.999:  15065.940 ms/op
                 executeQuery·p0.9999: 15065.940 ms/op
                 executeQuery·p1.00:   15065.940 ms/op


# Run progress: 14.88% complete, ETA 09:11:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

14763.950 ms/op
# Warmup Iteration   2: 15200.158 ms/op
# Warmup Iteration   3: 13740.540 ms/op
# Warmup Iteration   4: 14713.618 ms/op
# Warmup Iteration   5: 14612.955 ms/op
Iteration   1: 14579.401 ms/op
                 executeQuery·p0.00:   14579.401 ms/op
                 executeQuery·p0.50:   14579.401 ms/op
                 executeQuery·p0.90:   14579.401 ms/op
                 executeQuery·p0.95:   14579.401 ms/op
                 executeQuery·p0.99:   14579.401 ms/op
                 executeQuery·p0.999:  14579.401 ms/op
                 executeQuery·p0.9999: 14579.401 ms/op
                 executeQuery·p1.00:   14579.401 ms/op

Iteration   2: 14864.613 ms/op
                 executeQuery·p0.00:   14864.613 ms/op
                 executeQuery·p0.50:   14864.613 ms/op
                 executeQuery·p0.90:   14864.613 ms/op
                 executeQuery·p0.95:   14864.613 ms/op
                 executeQuery·p0.99:   14864.613 ms/op
                 executeQuery·p0.999:  14864.613 ms/op
                 executeQuery·p0.9999: 14864.613 ms/op
                 executeQuery·p1.00:   14864.613 ms/op

Iteration   3: 14310.965 ms/op
                 executeQuery·p0.00:   14310.965 ms/op
                 executeQuery·p0.50:   14310.965 ms/op
                 executeQuery·p0.90:   14310.965 ms/op
                 executeQuery·p0.95:   14310.965 ms/op
                 executeQuery·p0.99:   14310.965 ms/op
                 executeQuery·p0.999:  14310.965 ms/op
                 executeQuery·p0.9999: 14310.965 ms/op
                 executeQuery·p1.00:   14310.965 ms/op

Iteration   4: 14847.836 ms/op
                 executeQuery·p0.00:   14847.836 ms/op
                 executeQuery·p0.50:   14847.836 ms/op
                 executeQuery·p0.90:   14847.836 ms/op
                 executeQuery·p0.95:   14847.836 ms/op
                 executeQuery·p0.99:   14847.836 ms/op
                 executeQuery·p0.999:  14847.836 ms/op
                 executeQuery·p0.9999: 14847.836 ms/op
                 executeQuery·p1.00:   14847.836 ms/op

Iteration   5: 14612.955 ms/op
                 executeQuery·p0.00:   14612.955 ms/op
                 executeQuery·p0.50:   14612.955 ms/op
                 executeQuery·p0.90:   14612.955 ms/op
                 executeQuery·p0.95:   14612.955 ms/op
                 executeQuery·p0.99:   14612.955 ms/op
                 executeQuery·p0.999:  14612.955 ms/op
                 executeQuery·p0.9999: 14612.955 ms/op
                 executeQuery·p1.00:   14612.955 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  14785.760 ±(99.9%) 419.018 ms/op

  Histogram, ms/op:
    [14300.000, 14350.000) = 1 
    [14350.000, 14400.000) = 0 
    [14400.000, 14450.000) = 0 
    [14450.000, 14500.000) = 1 
    [14500.000, 14550.000) = 0 
    [14550.000, 14600.000) = 1 
    [14600.000, 14650.000) = 1 
    [14650.000, 14700.000) = 0 
    [14700.000, 14750.000) = 0 
    [14750.000, 14800.000) = 0 
    [14800.000, 14850.000) = 1 
    [14850.000, 14900.000) = 1 
    [14900.000, 14950.000) = 0 
    [14950.000, 15000.000) = 1 
    [15000.000, 15050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  14310.965 ms/op
     p(50.0000) =  14856.225 ms/op
     p(90.0000) =  15096.139 ms/op
     p(95.0000) =  15099.494 ms/op
     p(99.0000) =  15099.494 ms/op
     p(99.9000) =  15099.494 ms/op
     p(99.9900) =  15099.494 ms/op
     p(99.9990) =  15099.494 ms/op
     p(99.9999) =  15099.494 ms/op
    p(100.0000) =  15099.494 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 15.48% complete, ETA 09:00:09
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

56035.901 ms/op
# Warmup Iteration   2: 55834.575 ms/op
# Warmup Iteration   3: 46976.205 ms/op
# Warmup Iteration   4: 49727.668 ms/op
# Warmup Iteration   5: 48117.055 ms/op
Iteration   1: 50398.757 ms/op
                 executeQuery·p0.00:   50398.757 ms/op
                 executeQuery·p0.50:   50398.757 ms/op
                 executeQuery·p0.90:   50398.757 ms/op
                 executeQuery·p0.95:   50398.757 ms/op
                 executeQuery·p0.99:   50398.757 ms/op
                 executeQuery·p0.999:  50398.757 ms/op
                 executeQuery·p0.9999: 50398.757 ms/op
                 executeQuery·p1.00:   50398.757 ms/op

Iteration   2: 48721.035 ms/op
                 executeQuery·p0.00:   48721.035 ms/op
                 executeQuery·p0.50:   48721.035 ms/op
                 executeQuery·p0.90:   48721.035 ms/op
                 executeQuery·p0.95:   48721.035 ms/op
                 executeQuery·p0.99:   48721.035 ms/op
                 executeQuery·p0.999:  48721.035 ms/op
                 executeQuery·p0.9999: 48721.035 ms/op
                 executeQuery·p1.00:   48721.035 ms/op

Iteration   3: 47378.858 ms/op
                 executeQuery·p0.00:   47378.858 ms/op
                 executeQuery·p0.50:   47378.858 ms/op
                 executeQuery·p0.90:   47378.858 ms/op
                 executeQuery·p0.95:   47378.858 ms/op
                 executeQuery·p0.99:   47378.858 ms/op
                 executeQuery·p0.999:  47378.858 ms/op
                 executeQuery·p0.9999: 47378.858 ms/op
                 executeQuery·p1.00:   47378.858 ms/op

Iteration   4: 49056.580 ms/op
                 executeQuery·p0.00:   49056.580 ms/op
                 executeQuery·p0.50:   49056.580 ms/op
                 executeQuery·p0.90:   49056.580 ms/op
                 executeQuery·p0.95:   49056.580 ms/op
                 executeQuery·p0.99:   49056.580 ms/op
                 executeQuery·p0.999:  49056.580 ms/op
                 executeQuery·p0.9999: 49056.580 ms/op
                 executeQuery·p1.00:   49056.580 ms/op

Iteration   5: 49056.580 ms/op
                 executeQuery·p0.00:   49056.580 ms/op
                 executeQuery·p0.50:   49056.580 ms/op
                 executeQuery·p0.90:   49056.580 ms/op
                 executeQuery·p0.95:   49056.580 ms/op
                 executeQuery·p0.99:   49056.580 ms/op
                 executeQuery·p0.999:  49056.580 ms/op
                 executeQuery·p0.9999: 49056.580 ms/op
                 executeQuery·p1.00:   49056.580 ms/op


# Run progress: 16.07% complete, ETA 09:29:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
private final class KeyValueMap_568139554 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_568139554() {
        this(4);
    }
    public KeyValueMap_568139554(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_568139554 aggregation_state_map = new KeyValueMap_568139554();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

53351.547 ms/op
# Warmup Iteration   2: 49257.906 ms/op
# Warmup Iteration   3: 42345.693 ms/op
# Warmup Iteration   4: 48184.164 ms/op
# Warmup Iteration   5: 46170.898 ms/op
Iteration   1: 47445.967 ms/op
                 executeQuery·p0.00:   47445.967 ms/op
                 executeQuery·p0.50:   47445.967 ms/op
                 executeQuery·p0.90:   47445.967 ms/op
                 executeQuery·p0.95:   47445.967 ms/op
                 executeQuery·p0.99:   47445.967 ms/op
                 executeQuery·p0.999:  47445.967 ms/op
                 executeQuery·p0.9999: 47445.967 ms/op
                 executeQuery·p1.00:   47445.967 ms/op

Iteration   2: 46976.205 ms/op
                 executeQuery·p0.00:   46976.205 ms/op
                 executeQuery·p0.50:   46976.205 ms/op
                 executeQuery·p0.90:   46976.205 ms/op
                 executeQuery·p0.95:   46976.205 ms/op
                 executeQuery·p0.99:   46976.205 ms/op
                 executeQuery·p0.999:  46976.205 ms/op
                 executeQuery·p0.9999: 46976.205 ms/op
                 executeQuery·p1.00:   46976.205 ms/op

Iteration   3: 46506.443 ms/op
                 executeQuery·p0.00:   46506.443 ms/op
                 executeQuery·p0.50:   46506.443 ms/op
                 executeQuery·p0.90:   46506.443 ms/op
                 executeQuery·p0.95:   46506.443 ms/op
                 executeQuery·p0.99:   46506.443 ms/op
                 executeQuery·p0.999:  46506.443 ms/op
                 executeQuery·p0.9999: 46506.443 ms/op
                 executeQuery·p1.00:   46506.443 ms/op

Iteration   4: 44023.415 ms/op
                 executeQuery·p0.00:   44023.415 ms/op
                 executeQuery·p0.50:   44023.415 ms/op
                 executeQuery·p0.90:   44023.415 ms/op
                 executeQuery·p0.95:   44023.415 ms/op
                 executeQuery·p0.99:   44023.415 ms/op
                 executeQuery·p0.999:  44023.415 ms/op
                 executeQuery·p0.9999: 44023.415 ms/op
                 executeQuery·p1.00:   44023.415 ms/op

Iteration   5: 45298.483 ms/op
                 executeQuery·p0.00:   45298.483 ms/op
                 executeQuery·p0.50:   45298.483 ms/op
                 executeQuery·p0.90:   45298.483 ms/op
                 executeQuery·p0.95:   45298.483 ms/op
                 executeQuery·p0.99:   45298.483 ms/op
                 executeQuery·p0.999:  45298.483 ms/op
                 executeQuery·p0.9999: 45298.483 ms/op
                 executeQuery·p1.00:   45298.483 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  47486.232 ±(99.9%) 2892.798 ms/op

  Histogram, ms/op:
    [44000.000, 44500.000) = 1 
    [44500.000, 45000.000) = 0 
    [45000.000, 45500.000) = 1 
    [45500.000, 46000.000) = 0 
    [46000.000, 46500.000) = 0 
    [46500.000, 47000.000) = 2 
    [47000.000, 47500.000) = 2 
    [47500.000, 48000.000) = 0 
    [48000.000, 48500.000) = 0 
    [48500.000, 49000.000) = 1 
    [49000.000, 49500.000) = 2 
    [49500.000, 50000.000) = 0 
    [50000.000, 50500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  44023.415 ms/op
     p(50.0000) =  47412.412 ms/op
     p(90.0000) =  50264.539 ms/op
     p(95.0000) =  50398.757 ms/op
     p(99.0000) =  50398.757 ms/op
     p(99.9000) =  50398.757 ms/op
     p(99.9900) =  50398.757 ms/op
     p(99.9990) =  50398.757 ms/op
     p(99.9999) =  50398.757 ms/op
    p(100.0000) =  50398.757 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 16.67% complete, ETA 09:53:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_568139554 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_568139554() {
        this(4);
    }
    public KeyValueMap_568139554(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_568139554 aggregation_state_map = new KeyValueMap_568139554();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

103750.304 ms/op
# Warmup Iteration   2: 98247.377 ms/op
# Warmup Iteration   3: 95965.676 ms/op
# Warmup Iteration   4: 98784.248 ms/op
# Warmup Iteration   5: 97978.941 ms/op
Iteration   1: 98650.030 ms/op
                 executeQuery·p0.00:   98650.030 ms/op
                 executeQuery·p0.50:   98650.030 ms/op
                 executeQuery·p0.90:   98650.030 ms/op
                 executeQuery·p0.95:   98650.030 ms/op
                 executeQuery·p0.99:   98650.030 ms/op
                 executeQuery·p0.999:  98650.030 ms/op
                 executeQuery·p0.9999: 98650.030 ms/op
                 executeQuery·p1.00:   98650.030 ms/op

Iteration   2: 99052.683 ms/op
                 executeQuery·p0.00:   99052.683 ms/op
                 executeQuery·p0.50:   99052.683 ms/op
                 executeQuery·p0.90:   99052.683 ms/op
                 executeQuery·p0.95:   99052.683 ms/op
                 executeQuery·p0.99:   99052.683 ms/op
                 executeQuery·p0.999:  99052.683 ms/op
                 executeQuery·p0.9999: 99052.683 ms/op
                 executeQuery·p1.00:   99052.683 ms/op

Iteration   3: 98515.812 ms/op
                 executeQuery·p0.00:   98515.812 ms/op
                 executeQuery·p0.50:   98515.812 ms/op
                 executeQuery·p0.90:   98515.812 ms/op
                 executeQuery·p0.95:   98515.812 ms/op
                 executeQuery·p0.99:   98515.812 ms/op
                 executeQuery·p0.999:  98515.812 ms/op
                 executeQuery·p0.9999: 98515.812 ms/op
                 executeQuery·p1.00:   98515.812 ms/op

Iteration   4: 98784.248 ms/op
                 executeQuery·p0.00:   98784.248 ms/op
                 executeQuery·p0.50:   98784.248 ms/op
                 executeQuery·p0.90:   98784.248 ms/op
                 executeQuery·p0.95:   98784.248 ms/op
                 executeQuery·p0.99:   98784.248 ms/op
                 executeQuery·p0.999:  98784.248 ms/op
                 executeQuery·p0.9999: 98784.248 ms/op
                 executeQuery·p1.00:   98784.248 ms/op

Iteration   5: 102273.909 ms/op
                 executeQuery·p0.00:   102273.909 ms/op
                 executeQuery·p0.50:   102273.909 ms/op
                 executeQuery·p0.90:   102273.909 ms/op
                 executeQuery·p0.95:   102273.909 ms/op
                 executeQuery·p0.99:   102273.909 ms/op
                 executeQuery·p0.999:  102273.909 ms/op
                 executeQuery·p0.9999: 102273.909 ms/op
                 executeQuery·p1.00:   102273.909 ms/op


# Run progress: 17.26% complete, ETA 11:20:29
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
private final class KeyValueMap_483357914 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_483357914() {
        this(4);
    }
    public KeyValueMap_483357914(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_483357914 aggregation_state_map = new KeyValueMap_483357914();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = aggregation_query_table_vc_0.get(aviv);
        long group_key_pre_hash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = aggregation_query_table_vc_1.get(aviv);
        int ordinal_value_1 = aggregation_query_table_vc_2.get(aviv);
        int ordinal_value_2 = aggregation_query_table_vc_3.get(aviv);
        aggregation_state_map.incrementForKey(ordinal_value, group_key_pre_hash, ordinal_value_0, ordinal_value_1, ordinal_value_2);
    }
}
for (int key_i = 0; key_i < aggregation_state_map.numberOfRecords; key_i++) {
    int groupKey_0 = aggregation_state_map.keys_ord_0[key_i];
    long aggregation_0_value = aggregation_state_map.values_ord_0[key_i];
    long aggregation_1_value = aggregation_state_map.values_ord_1[key_i];
    long aggregation_2_value = aggregation_state_map.values_ord_2[key_i];
    resultKeyArray[resultWritePtr] = groupKey_0;
    resultSum2Array[resultWritePtr] = aggregation_0_value;
    resultSum3Array[resultWritePtr] = aggregation_1_value;
    resultSum4Array[resultWritePtr++] = aggregation_2_value;
}
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

99321.119 ms/op
# Warmup Iteration   2: 102676.562 ms/op
# Warmup Iteration   3: 99052.683 ms/op
# Warmup Iteration   4: 99186.901 ms/op
# Warmup Iteration   5: 100394.861 ms/op
Iteration   1: 98515.812 ms/op
                 executeQuery·p0.00:   98515.812 ms/op
                 executeQuery·p0.50:   98515.812 ms/op
                 executeQuery·p0.90:   98515.812 ms/op
                 executeQuery·p0.95:   98515.812 ms/op
                 executeQuery·p0.99:   98515.812 ms/op
                 executeQuery·p0.999:  98515.812 ms/op
                 executeQuery·p0.9999: 98515.812 ms/op
                 executeQuery·p1.00:   98515.812 ms/op

Iteration   2: 97576.288 ms/op
                 executeQuery·p0.00:   97576.288 ms/op
                 executeQuery·p0.50:   97576.288 ms/op
                 executeQuery·p0.90:   97576.288 ms/op
                 executeQuery·p0.95:   97576.288 ms/op
                 executeQuery·p0.99:   97576.288 ms/op
                 executeQuery·p0.999:  97576.288 ms/op
                 executeQuery·p0.9999: 97576.288 ms/op
                 executeQuery·p1.00:   97576.288 ms/op

Iteration   3: 98113.159 ms/op
                 executeQuery·p0.00:   98113.159 ms/op
                 executeQuery·p0.50:   98113.159 ms/op
                 executeQuery·p0.90:   98113.159 ms/op
                 executeQuery·p0.95:   98113.159 ms/op
                 executeQuery·p0.99:   98113.159 ms/op
                 executeQuery·p0.999:  98113.159 ms/op
                 executeQuery·p0.9999: 98113.159 ms/op
                 executeQuery·p1.00:   98113.159 ms/op

Iteration   4: 95563.022 ms/op
                 executeQuery·p0.00:   95563.022 ms/op
                 executeQuery·p0.50:   95563.022 ms/op
                 executeQuery·p0.90:   95563.022 ms/op
                 executeQuery·p0.95:   95563.022 ms/op
                 executeQuery·p0.99:   95563.022 ms/op
                 executeQuery·p0.999:  95563.022 ms/op
                 executeQuery·p0.9999: 95563.022 ms/op
                 executeQuery·p1.00:   95563.022 ms/op

Iteration   5: 95160.369 ms/op
                 executeQuery·p0.00:   95160.369 ms/op
                 executeQuery·p0.50:   95160.369 ms/op
                 executeQuery·p0.90:   95160.369 ms/op
                 executeQuery·p0.95:   95160.369 ms/op
                 executeQuery·p0.99:   95160.369 ms/op
                 executeQuery·p0.999:  95160.369 ms/op
                 executeQuery·p0.9999: 95160.369 ms/op
                 executeQuery·p1.00:   95160.369 ms/op



Result "benchmarks.aggregation_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  98220.533 ±(99.9%) 2966.585 ms/op

  Histogram, ms/op:
    [ 95000.000,  95500.000) = 1 
    [ 95500.000,  96000.000) = 1 
    [ 96000.000,  96500.000) = 0 
    [ 96500.000,  97000.000) = 0 
    [ 97000.000,  97500.000) = 0 
    [ 97500.000,  98000.000) = 1 
    [ 98000.000,  98500.000) = 1 
    [ 98500.000,  99000.000) = 4 
    [ 99000.000,  99500.000) = 1 
    [ 99500.000, 100000.000) = 0 
    [100000.000, 100500.000) = 0 
    [100500.000, 101000.000) = 0 
    [101000.000, 101500.000) = 0 
    [101500.000, 102000.000) = 0 
    [102000.000, 102500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  95160.369 ms/op
     p(50.0000) =  98515.812 ms/op
     p(90.0000) = 101951.786 ms/op
     p(95.0000) = 102273.909 ms/op
     p(99.0000) = 102273.909 ms/op
     p(99.9000) = 102273.909 ms/op
     p(99.9900) = 102273.909 ms/op
     p(99.9990) = 102273.909 ms/op
     p(99.9999) = 102273.909 ms/op
    p(100.0000) = 102273.909 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2)

# Run progress: 17.86% complete, ETA 12:41:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

425.066 ±(99.9%) 89.631 ms/op
# Warmup Iteration   2: 388.034 ±(99.9%) 2.788 ms/op
# Warmup Iteration   3: 388.901 ±(99.9%) 2.168 ms/op
# Warmup Iteration   4: 388.639 ±(99.9%) 2.938 ms/op
# Warmup Iteration   5: 388.780 ±(99.9%) 2.630 ms/op
Iteration   1: 390.413 ±(99.9%) 6.185 ms/op
                 executeQuery·p0.00:   386.400 ms/op
                 executeQuery·p0.50:   387.449 ms/op
                 executeQuery·p0.90:   406.218 ms/op
                 executeQuery·p0.95:   417.805 ms/op
                 executeQuery·p0.99:   418.906 ms/op
                 executeQuery·p0.999:  418.906 ms/op
                 executeQuery·p0.9999: 418.906 ms/op
                 executeQuery·p1.00:   418.906 ms/op

Iteration   2: 388.215 ±(99.9%) 0.696 ms/op
                 executeQuery·p0.00:   386.925 ms/op
                 executeQuery·p0.50:   387.973 ms/op
                 executeQuery·p0.90:   389.546 ms/op
                 executeQuery·p0.95:   390.228 ms/op
                 executeQuery·p0.99:   390.595 ms/op
                 executeQuery·p0.999:  390.595 ms/op
                 executeQuery·p0.9999: 390.595 ms/op
                 executeQuery·p1.00:   390.595 ms/op

Iteration   3: 388.981 ±(99.9%) 0.781 ms/op
                 executeQuery·p0.00:   386.400 ms/op
                 executeQuery·p0.50:   389.022 ms/op
                 executeQuery·p0.90:   390.595 ms/op
                 executeQuery·p0.95:   390.595 ms/op
                 executeQuery·p0.99:   390.595 ms/op
                 executeQuery·p0.999:  390.595 ms/op
                 executeQuery·p0.9999: 390.595 ms/op
                 executeQuery·p1.00:   390.595 ms/op

Iteration   4: 387.771 ±(99.9%) 0.642 ms/op
                 executeQuery·p0.00:   385.876 ms/op
                 executeQuery·p0.50:   387.973 ms/op
                 executeQuery·p0.90:   389.022 ms/op
                 executeQuery·p0.95:   389.362 ms/op
                 executeQuery·p0.99:   389.546 ms/op
                 executeQuery·p0.999:  389.546 ms/op
                 executeQuery·p0.9999: 389.546 ms/op
                 executeQuery·p1.00:   389.546 ms/op

Iteration   5: 388.316 ±(99.9%) 4.235 ms/op
                 executeQuery·p0.00:   385.876 ms/op
                 executeQuery·p0.50:   386.925 ms/op
                 executeQuery·p0.90:   389.336 ms/op
                 executeQuery·p0.95:   407.110 ms/op
                 executeQuery·p0.99:   416.285 ms/op
                 executeQuery·p0.999:  416.285 ms/op
                 executeQuery·p0.9999: 416.285 ms/op
                 executeQuery·p1.00:   416.285 ms/op


# Run progress: 18.45% complete, ETA 12:18:47
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

432.674 ±(99.9%) 32.156 ms/op
# Warmup Iteration   2: 427.622 ±(99.9%) 3.989 ms/op
# Warmup Iteration   3: 430.004 ±(99.9%) 11.494 ms/op
# Warmup Iteration   4: 428.321 ±(99.9%) 5.011 ms/op
# Warmup Iteration   5: 432.035 ±(99.9%) 8.415 ms/op
Iteration   1: 436.846 ±(99.9%) 16.380 ms/op
                 executeQuery·p0.00:   424.673 ms/op
                 executeQuery·p0.50:   426.246 ms/op
                 executeQuery·p0.90:   459.591 ms/op
                 executeQuery·p0.95:   503.421 ms/op
                 executeQuery·p0.99:   514.327 ms/op
                 executeQuery·p0.999:  514.327 ms/op
                 executeQuery·p0.9999: 514.327 ms/op
                 executeQuery·p1.00:   514.327 ms/op

Iteration   2: 425.525 ±(99.9%) 0.787 ms/op
                 executeQuery·p0.00:   423.625 ms/op
                 executeQuery·p0.50:   425.722 ms/op
                 executeQuery·p0.90:   426.770 ms/op
                 executeQuery·p0.95:   426.770 ms/op
                 executeQuery·p0.99:   426.770 ms/op
                 executeQuery·p0.999:  426.770 ms/op
                 executeQuery·p0.9999: 426.770 ms/op
                 executeQuery·p1.00:   426.770 ms/op

Iteration   3: 424.804 ±(99.9%) 1.179 ms/op
                 executeQuery·p0.00:   421.528 ms/op
                 executeQuery·p0.50:   424.935 ms/op
                 executeQuery·p0.90:   426.508 ms/op
                 executeQuery·p0.95:   427.164 ms/op
                 executeQuery·p0.99:   427.295 ms/op
                 executeQuery·p0.999:  427.295 ms/op
                 executeQuery·p0.9999: 427.295 ms/op
                 executeQuery·p1.00:   427.295 ms/op

Iteration   4: 425.416 ±(99.9%) 0.751 ms/op
                 executeQuery·p0.00:   423.100 ms/op
                 executeQuery·p0.50:   425.722 ms/op
                 executeQuery·p0.90:   426.246 ms/op
                 executeQuery·p0.95:   426.639 ms/op
                 executeQuery·p0.99:   426.770 ms/op
                 executeQuery·p0.999:  426.770 ms/op
                 executeQuery·p0.9999: 426.770 ms/op
                 executeQuery·p1.00:   426.770 ms/op

Iteration   5: 425.569 ±(99.9%) 0.656 ms/op
                 executeQuery·p0.00:   423.625 ms/op
                 executeQuery·p0.50:   425.722 ms/op
                 executeQuery·p0.90:   426.770 ms/op
                 executeQuery·p0.95:   426.770 ms/op
                 executeQuery·p0.99:   426.770 ms/op
                 executeQuery·p0.999:  426.770 ms/op
                 executeQuery·p0.9999: 426.770 ms/op
                 executeQuery·p1.00:   426.770 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 249
  mean =    407.290 ±(99.9%) 4.413 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 
    [375.000, 400.000) = 126 
    [400.000, 425.000) = 39 
    [425.000, 450.000) = 80 
    [450.000, 475.000) = 3 
    [475.000, 500.000) = 0 
    [500.000, 525.000) = 1 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    385.876 ms/op
     p(50.0000) =    390.595 ms/op
     p(90.0000) =    426.246 ms/op
     p(95.0000) =    426.770 ms/op
     p(99.0000) =    459.538 ms/op
     p(99.9000) =    514.327 ms/op
     p(99.9900) =    514.327 ms/op
     p(99.9990) =    514.327 ms/op
     p(99.9999) =    514.327 ms/op
    p(100.0000) =    514.327 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16)

# Run progress: 19.05% complete, ETA 11:57:51
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

555.192 ±(99.9%) 93.265 ms/op
# Warmup Iteration   2: 522.034 ±(99.9%) 7.516 ms/op
# Warmup Iteration   3: 527.158 ±(99.9%) 9.667 ms/op
# Warmup Iteration   4: 546.418 ±(99.9%) 67.538 ms/op
# Warmup Iteration   5: 522.558 ±(99.9%) 3.404 ms/op
Iteration   1: 525.640 ±(99.9%) 2.468 ms/op
                 executeQuery·p0.00:   519.045 ms/op
                 executeQuery·p0.50:   526.385 ms/op
                 executeQuery·p0.90:   527.958 ms/op
                 executeQuery·p0.95:   529.531 ms/op
                 executeQuery·p0.99:   529.531 ms/op
                 executeQuery·p0.999:  529.531 ms/op
                 executeQuery·p0.9999: 529.531 ms/op
                 executeQuery·p1.00:   529.531 ms/op

Iteration   2: 526.744 ±(99.9%) 2.869 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   526.385 ms/op
                 executeQuery·p0.90:   527.958 ms/op
                 executeQuery·p0.95:   538.968 ms/op
                 executeQuery·p0.99:   538.968 ms/op
                 executeQuery·p0.999:  538.968 ms/op
                 executeQuery·p0.9999: 538.968 ms/op
                 executeQuery·p1.00:   538.968 ms/op

Iteration   3: 529.365 ±(99.9%) 9.211 ms/op
                 executeQuery·p0.00:   522.191 ms/op
                 executeQuery·p0.50:   526.385 ms/op
                 executeQuery·p0.90:   534.774 ms/op
                 executeQuery·p0.95:   569.377 ms/op
                 executeQuery·p0.99:   569.377 ms/op
                 executeQuery·p0.999:  569.377 ms/op
                 executeQuery·p0.9999: 569.377 ms/op
                 executeQuery·p1.00:   569.377 ms/op

Iteration   4: 555.994 ±(99.9%) 55.951 ms/op
                 executeQuery·p0.00:   524.288 ms/op
                 executeQuery·p0.50:   533.201 ms/op
                 executeQuery·p0.90:   725.615 ms/op
                 executeQuery·p0.95:   727.712 ms/op
                 executeQuery·p0.99:   727.712 ms/op
                 executeQuery·p0.999:  727.712 ms/op
                 executeQuery·p0.9999: 727.712 ms/op
                 executeQuery·p1.00:   727.712 ms/op

Iteration   5: 542.059 ±(99.9%) 34.884 ms/op
                 executeQuery·p0.00:   525.337 ms/op
                 executeQuery·p0.50:   532.152 ms/op
                 executeQuery·p0.90:   567.280 ms/op
                 executeQuery·p0.95:   697.303 ms/op
                 executeQuery·p0.99:   697.303 ms/op
                 executeQuery·p0.999:  697.303 ms/op
                 executeQuery·p0.9999: 697.303 ms/op
                 executeQuery·p1.00:   697.303 ms/op


# Run progress: 19.64% complete, ETA 11:38:05
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

535.684 ±(99.9%) 28.896 ms/op
# Warmup Iteration   2: 523.475 ±(99.9%) 1.674 ms/op
# Warmup Iteration   3: 525.861 ±(99.9%) 3.554 ms/op
# Warmup Iteration   4: 523.580 ±(99.9%) 3.920 ms/op
# Warmup Iteration   5: 522.191 ±(99.9%) 2.954 ms/op
Iteration   1: 528.841 ±(99.9%) 5.704 ms/op
                 executeQuery·p0.00:   523.764 ms/op
                 executeQuery·p0.50:   526.385 ms/op
                 executeQuery·p0.90:   542.114 ms/op
                 executeQuery·p0.95:   544.211 ms/op
                 executeQuery·p0.99:   544.211 ms/op
                 executeQuery·p0.999:  544.211 ms/op
                 executeQuery·p0.9999: 544.211 ms/op
                 executeQuery·p1.00:   544.211 ms/op

Iteration   2: 527.130 ±(99.9%) 4.644 ms/op
                 executeQuery·p0.00:   523.239 ms/op
                 executeQuery·p0.50:   525.861 ms/op
                 executeQuery·p0.90:   534.249 ms/op
                 executeQuery·p0.95:   546.308 ms/op
                 executeQuery·p0.99:   546.308 ms/op
                 executeQuery·p0.999:  546.308 ms/op
                 executeQuery·p0.9999: 546.308 ms/op
                 executeQuery·p1.00:   546.308 ms/op

Iteration   3: 521.326 ±(99.9%) 3.424 ms/op
                 executeQuery·p0.00:   516.948 ms/op
                 executeQuery·p0.50:   520.618 ms/op
                 executeQuery·p0.90:   530.003 ms/op
                 executeQuery·p0.95:   532.572 ms/op
                 executeQuery·p0.99:   532.677 ms/op
                 executeQuery·p0.999:  532.677 ms/op
                 executeQuery·p0.9999: 532.677 ms/op
                 executeQuery·p1.00:   532.677 ms/op

Iteration   4: 519.936 ±(99.9%) 0.662 ms/op
                 executeQuery·p0.00:   518.521 ms/op
                 executeQuery·p0.50:   520.094 ms/op
                 executeQuery·p0.90:   521.142 ms/op
                 executeQuery·p0.95:   521.142 ms/op
                 executeQuery·p0.99:   521.142 ms/op
                 executeQuery·p0.999:  521.142 ms/op
                 executeQuery·p0.9999: 521.142 ms/op
                 executeQuery·p1.00:   521.142 ms/op

Iteration   5: 521.273 ±(99.9%) 2.654 ms/op
                 executeQuery·p0.00:   518.521 ms/op
                 executeQuery·p0.50:   520.094 ms/op
                 executeQuery·p0.90:   528.273 ms/op
                 executeQuery·p0.95:   528.980 ms/op
                 executeQuery·p0.99:   529.007 ms/op
                 executeQuery·p0.999:  529.007 ms/op
                 executeQuery·p0.9999: 529.007 ms/op
                 executeQuery·p1.00:   529.007 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 193
  mean =    529.691 ±(99.9%) 6.063 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 81 
    [525.000, 550.000) = 106 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 2 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    516.948 ms/op
     p(50.0000) =    525.861 ms/op
     p(90.0000) =    534.249 ms/op
     p(95.0000) =    542.743 ms/op
     p(99.0000) =    725.740 ms/op
     p(99.9000) =    727.712 ms/op
     p(99.9900) =    727.712 ms/op
     p(99.9990) =    727.712 ms/op
     p(99.9999) =    727.712 ms/op
    p(100.0000) =    727.712 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192)

# Run progress: 20.24% complete, ETA 11:19:25
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

783.044 ±(99.9%) 62.574 ms/op
# Warmup Iteration   2: 744.938 ±(99.9%) 17.506 ms/op
# Warmup Iteration   3: 764.896 ±(99.9%) 19.559 ms/op
# Warmup Iteration   4: 760.298 ±(99.9%) 23.247 ms/op
# Warmup Iteration   5: 759.976 ±(99.9%) 18.704 ms/op
Iteration   1: 754.750 ±(99.9%) 17.016 ms/op
                 executeQuery·p0.00:   736.100 ms/op
                 executeQuery·p0.50:   763.363 ms/op
                 executeQuery·p0.90:   775.422 ms/op
                 executeQuery·p0.95:   785.383 ms/op
                 executeQuery·p0.99:   785.383 ms/op
                 executeQuery·p0.999:  785.383 ms/op
                 executeQuery·p0.9999: 785.383 ms/op
                 executeQuery·p1.00:   785.383 ms/op

Iteration   2: 754.600 ±(99.9%) 21.481 ms/op
                 executeQuery·p0.00:   736.100 ms/op
                 executeQuery·p0.50:   746.062 ms/op
                 executeQuery·p0.90:   788.005 ms/op
                 executeQuery·p0.95:   788.529 ms/op
                 executeQuery·p0.99:   788.529 ms/op
                 executeQuery·p0.999:  788.529 ms/op
                 executeQuery·p0.9999: 788.529 ms/op
                 executeQuery·p1.00:   788.529 ms/op

Iteration   3: 763.363 ±(99.9%) 21.750 ms/op
                 executeQuery·p0.00:   742.392 ms/op
                 executeQuery·p0.50:   751.829 ms/op
                 executeQuery·p0.90:   787.900 ms/op
                 executeQuery·p0.95:   789.578 ms/op
                 executeQuery·p0.99:   789.578 ms/op
                 executeQuery·p0.999:  789.578 ms/op
                 executeQuery·p0.9999: 789.578 ms/op
                 executeQuery·p1.00:   789.578 ms/op

Iteration   4: 764.735 ±(99.9%) 22.518 ms/op
                 executeQuery·p0.00:   738.198 ms/op
                 executeQuery·p0.50:   763.363 ms/op
                 executeQuery·p0.90:   788.739 ms/op
                 executeQuery·p0.95:   791.675 ms/op
                 executeQuery·p0.99:   791.675 ms/op
                 executeQuery·p0.999:  791.675 ms/op
                 executeQuery·p0.9999: 791.675 ms/op
                 executeQuery·p1.00:   791.675 ms/op

Iteration   5: 753.926 ±(99.9%) 21.261 ms/op
                 executeQuery·p0.00:   735.052 ms/op
                 executeQuery·p0.50:   749.732 ms/op
                 executeQuery·p0.90:   786.956 ms/op
                 executeQuery·p0.95:   787.481 ms/op
                 executeQuery·p0.99:   787.481 ms/op
                 executeQuery·p0.999:  787.481 ms/op
                 executeQuery·p0.9999: 787.481 ms/op
                 executeQuery·p1.00:   787.481 ms/op


# Run progress: 20.83% complete, ETA 11:01:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

764.331 ±(99.9%) 50.454 ms/op
# Warmup Iteration   2: 739.021 ±(99.9%) 14.577 ms/op
# Warmup Iteration   3: 736.175 ±(99.9%) 14.498 ms/op
# Warmup Iteration   4: 751.305 ±(99.9%) 17.835 ms/op
# Warmup Iteration   5: 748.159 ±(99.9%) 25.710 ms/op
Iteration   1: 739.995 ±(99.9%) 15.818 ms/op
                 executeQuery·p0.00:   719.323 ms/op
                 executeQuery·p0.50:   745.013 ms/op
                 executeQuery·p0.90:   757.596 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   2: 736.924 ±(99.9%) 17.850 ms/op
                 executeQuery·p0.00:   709.886 ms/op
                 executeQuery·p0.50:   741.343 ms/op
                 executeQuery·p0.90:   761.790 ms/op
                 executeQuery·p0.95:   766.509 ms/op
                 executeQuery·p0.99:   766.509 ms/op
                 executeQuery·p0.999:  766.509 ms/op
                 executeQuery·p0.9999: 766.509 ms/op
                 executeQuery·p1.00:   766.509 ms/op

Iteration   3: 751.380 ±(99.9%) 20.918 ms/op
                 executeQuery·p0.00:   726.663 ms/op
                 executeQuery·p0.50:   750.256 ms/op
                 executeQuery·p0.90:   783.811 ms/op
                 executeQuery·p0.95:   788.529 ms/op
                 executeQuery·p0.99:   788.529 ms/op
                 executeQuery·p0.999:  788.529 ms/op
                 executeQuery·p0.9999: 788.529 ms/op
                 executeQuery·p1.00:   788.529 ms/op

Iteration   4: 749.507 ±(99.9%) 10.438 ms/op
                 executeQuery·p0.00:   734.003 ms/op
                 executeQuery·p0.50:   749.208 ms/op
                 executeQuery·p0.90:   767.033 ms/op
                 executeQuery·p0.95:   767.558 ms/op
                 executeQuery·p0.99:   767.558 ms/op
                 executeQuery·p0.999:  767.558 ms/op
                 executeQuery·p0.9999: 767.558 ms/op
                 executeQuery·p1.00:   767.558 ms/op

Iteration   5: 738.123 ±(99.9%) 17.688 ms/op
                 executeQuery·p0.00:   714.080 ms/op
                 executeQuery·p0.50:   741.343 ms/op
                 executeQuery·p0.90:   759.693 ms/op
                 executeQuery·p0.95:   769.655 ms/op
                 executeQuery·p0.99:   769.655 ms/op
                 executeQuery·p0.999:  769.655 ms/op
                 executeQuery·p0.9999: 769.655 ms/op
                 executeQuery·p1.00:   769.655 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 138
  mean =    750.537 ±(99.9%) 5.292 ms/op

  Histogram, ms/op:
    [700.000, 710.000) = 1 
    [710.000, 720.000) = 4 
    [720.000, 730.000) = 10 
    [730.000, 740.000) = 27 
    [740.000, 750.000) = 43 
    [750.000, 760.000) = 10 
    [760.000, 770.000) = 24 
    [770.000, 780.000) = 4 
    [780.000, 790.000) = 14 

  Percentiles, ms/op:
      p(0.0000) =    709.886 ms/op
     p(50.0000) =    747.635 ms/op
     p(90.0000) =    782.343 ms/op
     p(95.0000) =    786.484 ms/op
     p(99.0000) =    790.857 ms/op
     p(99.9000) =    791.675 ms/op
     p(99.9900) =    791.675 ms/op
     p(99.9990) =    791.675 ms/op
     p(99.9999) =    791.675 ms/op
    p(100.0000) =    791.675 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144)

# Run progress: 21.43% complete, ETA 10:45:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3305.112 ms/op
# Warmup Iteration   2: 2478.834 ms/op
# Warmup Iteration   3: 2386.559 ms/op
# Warmup Iteration   4: 2415.919 ms/op
# Warmup Iteration   5: 2583.691 ms/op
Iteration   1: 2524.971 ms/op
                 executeQuery·p0.00:   2524.971 ms/op
                 executeQuery·p0.50:   2524.971 ms/op
                 executeQuery·p0.90:   2524.971 ms/op
                 executeQuery·p0.95:   2524.971 ms/op
                 executeQuery·p0.99:   2524.971 ms/op
                 executeQuery·p0.999:  2524.971 ms/op
                 executeQuery·p0.9999: 2524.971 ms/op
                 executeQuery·p1.00:   2524.971 ms/op

Iteration   2: 2571.108 ms/op
                 executeQuery·p0.00:   2571.108 ms/op
                 executeQuery·p0.50:   2571.108 ms/op
                 executeQuery·p0.90:   2571.108 ms/op
                 executeQuery·p0.95:   2571.108 ms/op
                 executeQuery·p0.99:   2571.108 ms/op
                 executeQuery·p0.999:  2571.108 ms/op
                 executeQuery·p0.9999: 2571.108 ms/op
                 executeQuery·p1.00:   2571.108 ms/op

Iteration   3: 2499.805 ms/op
                 executeQuery·p0.00:   2499.805 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2499.805 ms/op
                 executeQuery·p0.95:   2499.805 ms/op
                 executeQuery·p0.99:   2499.805 ms/op
                 executeQuery·p0.999:  2499.805 ms/op
                 executeQuery·p0.9999: 2499.805 ms/op
                 executeQuery·p1.00:   2499.805 ms/op

Iteration   4: 2696.937 ms/op
                 executeQuery·p0.00:   2696.937 ms/op
                 executeQuery·p0.50:   2696.937 ms/op
                 executeQuery·p0.90:   2696.937 ms/op
                 executeQuery·p0.95:   2696.937 ms/op
                 executeQuery·p0.99:   2696.937 ms/op
                 executeQuery·p0.999:  2696.937 ms/op
                 executeQuery·p0.9999: 2696.937 ms/op
                 executeQuery·p1.00:   2696.937 ms/op

Iteration   5: 2499.805 ms/op
                 executeQuery·p0.00:   2499.805 ms/op
                 executeQuery·p0.50:   2499.805 ms/op
                 executeQuery·p0.90:   2499.805 ms/op
                 executeQuery·p0.95:   2499.805 ms/op
                 executeQuery·p0.99:   2499.805 ms/op
                 executeQuery·p0.999:  2499.805 ms/op
                 executeQuery·p0.9999: 2499.805 ms/op
                 executeQuery·p1.00:   2499.805 ms/op


# Run progress: 22.02% complete, ETA 10:30:55
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3183.477 ms/op
# Warmup Iteration   2: 2764.046 ms/op
# Warmup Iteration   3: 2856.321 ms/op
# Warmup Iteration   4: 2805.989 ms/op
# Warmup Iteration   5: 2625.634 ms/op
Iteration   1: 2533.360 ms/op
                 executeQuery·p0.00:   2533.360 ms/op
                 executeQuery·p0.50:   2533.360 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op

Iteration   2: 2445.279 ms/op
                 executeQuery·p0.00:   2445.279 ms/op
                 executeQuery·p0.50:   2445.279 ms/op
                 executeQuery·p0.90:   2445.279 ms/op
                 executeQuery·p0.95:   2445.279 ms/op
                 executeQuery·p0.99:   2445.279 ms/op
                 executeQuery·p0.999:  2445.279 ms/op
                 executeQuery·p0.9999: 2445.279 ms/op
                 executeQuery·p1.00:   2445.279 ms/op

Iteration   3: 2533.360 ms/op
                 executeQuery·p0.00:   2533.360 ms/op
                 executeQuery·p0.50:   2533.360 ms/op
                 executeQuery·p0.90:   2533.360 ms/op
                 executeQuery·p0.95:   2533.360 ms/op
                 executeQuery·p0.99:   2533.360 ms/op
                 executeQuery·p0.999:  2533.360 ms/op
                 executeQuery·p0.9999: 2533.360 ms/op
                 executeQuery·p1.00:   2533.360 ms/op

Iteration   4: 2139.095 ms/op
                 executeQuery·p0.00:   2139.095 ms/op
                 executeQuery·p0.50:   2139.095 ms/op
                 executeQuery·p0.90:   2139.095 ms/op
                 executeQuery·p0.95:   2139.095 ms/op
                 executeQuery·p0.99:   2139.095 ms/op
                 executeQuery·p0.999:  2139.095 ms/op
                 executeQuery·p0.9999: 2139.095 ms/op
                 executeQuery·p1.00:   2139.095 ms/op

Iteration   5: 2160.067 ms/op
                 executeQuery·p0.00:   2160.067 ms/op
                 executeQuery·p0.50:   2160.067 ms/op
                 executeQuery·p0.90:   2160.067 ms/op
                 executeQuery·p0.95:   2160.067 ms/op
                 executeQuery·p0.99:   2160.067 ms/op
                 executeQuery·p0.999:  2160.067 ms/op
                 executeQuery·p0.9999: 2160.067 ms/op
                 executeQuery·p1.00:   2160.067 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   2460.379 ±(99.9%) 266.568 ms/op

  Histogram, ms/op:
    [2100.000, 2150.000) = 1 
    [2150.000, 2200.000) = 1 
    [2200.000, 2250.000) = 0 
    [2250.000, 2300.000) = 0 
    [2300.000, 2350.000) = 0 
    [2350.000, 2400.000) = 0 
    [2400.000, 2450.000) = 1 
    [2450.000, 2500.000) = 2 
    [2500.000, 2550.000) = 3 
    [2550.000, 2600.000) = 1 
    [2600.000, 2650.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2139.095 ms/op
     p(50.0000) =   2512.388 ms/op
     p(90.0000) =   2684.355 ms/op
     p(95.0000) =   2696.937 ms/op
     p(99.0000) =   2696.937 ms/op
     p(99.9000) =   2696.937 ms/op
     p(99.9900) =   2696.937 ms/op
     p(99.9990) =   2696.937 ms/op
     p(99.9999) =   2696.937 ms/op
    p(100.0000) =   2696.937 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288)

# Run progress: 22.62% complete, ETA 10:17:52
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5519.704 ms/op
# Warmup Iteration   2: 5175.771 ms/op
# Warmup Iteration   3: 5125.439 ms/op
# Warmup Iteration   4: 5276.434 ms/op
# Warmup Iteration   5: 5100.274 ms/op
Iteration   1: 5385.486 ms/op
                 executeQuery·p0.00:   5385.486 ms/op
                 executeQuery·p0.50:   5385.486 ms/op
                 executeQuery·p0.90:   5385.486 ms/op
                 executeQuery·p0.95:   5385.486 ms/op
                 executeQuery·p0.99:   5385.486 ms/op
                 executeQuery·p0.999:  5385.486 ms/op
                 executeQuery·p0.9999: 5385.486 ms/op
                 executeQuery·p1.00:   5385.486 ms/op

Iteration   2: 5125.439 ms/op
                 executeQuery·p0.00:   5125.439 ms/op
                 executeQuery·p0.50:   5125.439 ms/op
                 executeQuery·p0.90:   5125.439 ms/op
                 executeQuery·p0.95:   5125.439 ms/op
                 executeQuery·p0.99:   5125.439 ms/op
                 executeQuery·p0.999:  5125.439 ms/op
                 executeQuery·p0.9999: 5125.439 ms/op
                 executeQuery·p1.00:   5125.439 ms/op

Iteration   3: 5066.719 ms/op
                 executeQuery·p0.00:   5066.719 ms/op
                 executeQuery·p0.50:   5066.719 ms/op
                 executeQuery·p0.90:   5066.719 ms/op
                 executeQuery·p0.95:   5066.719 ms/op
                 executeQuery·p0.99:   5066.719 ms/op
                 executeQuery·p0.999:  5066.719 ms/op
                 executeQuery·p0.9999: 5066.719 ms/op
                 executeQuery·p1.00:   5066.719 ms/op

Iteration   4: 4848.615 ms/op
                 executeQuery·p0.00:   4848.615 ms/op
                 executeQuery·p0.50:   4848.615 ms/op
                 executeQuery·p0.90:   4848.615 ms/op
                 executeQuery·p0.95:   4848.615 ms/op
                 executeQuery·p0.99:   4848.615 ms/op
                 executeQuery·p0.999:  4848.615 ms/op
                 executeQuery·p0.9999: 4848.615 ms/op
                 executeQuery·p1.00:   4848.615 ms/op

Iteration   5: 4915.724 ms/op
                 executeQuery·p0.00:   4915.724 ms/op
                 executeQuery·p0.50:   4915.724 ms/op
                 executeQuery·p0.90:   4915.724 ms/op
                 executeQuery·p0.95:   4915.724 ms/op
                 executeQuery·p0.99:   4915.724 ms/op
                 executeQuery·p0.999:  4915.724 ms/op
                 executeQuery·p0.9999: 4915.724 ms/op
                 executeQuery·p1.00:   4915.724 ms/op


# Run progress: 23.21% complete, ETA 10:24:04
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5653.922 ms/op
# Warmup Iteration   2: 5217.714 ms/op
# Warmup Iteration   3: 5133.828 ms/op
# Warmup Iteration   4: 5494.538 ms/op
# Warmup Iteration   5: 5066.719 ms/op
Iteration   1: 5368.709 ms/op
                 executeQuery·p0.00:   5368.709 ms/op
                 executeQuery·p0.50:   5368.709 ms/op
                 executeQuery·p0.90:   5368.709 ms/op
                 executeQuery·p0.95:   5368.709 ms/op
                 executeQuery·p0.99:   5368.709 ms/op
                 executeQuery·p0.999:  5368.709 ms/op
                 executeQuery·p0.9999: 5368.709 ms/op
                 executeQuery·p1.00:   5368.709 ms/op

Iteration   2: 5377.098 ms/op
                 executeQuery·p0.00:   5377.098 ms/op
                 executeQuery·p0.50:   5377.098 ms/op
                 executeQuery·p0.90:   5377.098 ms/op
                 executeQuery·p0.95:   5377.098 ms/op
                 executeQuery·p0.99:   5377.098 ms/op
                 executeQuery·p0.999:  5377.098 ms/op
                 executeQuery·p0.9999: 5377.098 ms/op
                 executeQuery·p1.00:   5377.098 ms/op

Iteration   3: 5075.108 ms/op
                 executeQuery·p0.00:   5075.108 ms/op
                 executeQuery·p0.50:   5075.108 ms/op
                 executeQuery·p0.90:   5075.108 ms/op
                 executeQuery·p0.95:   5075.108 ms/op
                 executeQuery·p0.99:   5075.108 ms/op
                 executeQuery·p0.999:  5075.108 ms/op
                 executeQuery·p0.9999: 5075.108 ms/op
                 executeQuery·p1.00:   5075.108 ms/op

Iteration   4: 4932.502 ms/op
                 executeQuery·p0.00:   4932.502 ms/op
                 executeQuery·p0.50:   4932.502 ms/op
                 executeQuery·p0.90:   4932.502 ms/op
                 executeQuery·p0.95:   4932.502 ms/op
                 executeQuery·p0.99:   4932.502 ms/op
                 executeQuery·p0.999:  4932.502 ms/op
                 executeQuery·p0.9999: 4932.502 ms/op
                 executeQuery·p1.00:   4932.502 ms/op

Iteration   5: 4982.833 ms/op
                 executeQuery·p0.00:   4982.833 ms/op
                 executeQuery·p0.50:   4982.833 ms/op
                 executeQuery·p0.90:   4982.833 ms/op
                 executeQuery·p0.95:   4982.833 ms/op
                 executeQuery·p0.99:   4982.833 ms/op
                 executeQuery·p0.999:  4982.833 ms/op
                 executeQuery·p0.9999: 4982.833 ms/op
                 executeQuery·p1.00:   4982.833 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   5107.823 ±(99.9%) 307.034 ms/op

  Histogram, ms/op:
    [4800.000, 4850.000) = 1 
    [4850.000, 4900.000) = 0 
    [4900.000, 4950.000) = 2 
    [4950.000, 5000.000) = 1 
    [5000.000, 5050.000) = 0 
    [5050.000, 5100.000) = 2 
    [5100.000, 5150.000) = 1 
    [5150.000, 5200.000) = 0 
    [5200.000, 5250.000) = 0 
    [5250.000, 5300.000) = 0 
    [5300.000, 5350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4848.615 ms/op
     p(50.0000) =   5070.914 ms/op
     p(90.0000) =   5384.647 ms/op
     p(95.0000) =   5385.486 ms/op
     p(99.0000) =   5385.486 ms/op
     p(99.9000) =   5385.486 ms/op
     p(99.9900) =   5385.486 ms/op
     p(99.9990) =   5385.486 ms/op
     p(99.9999) =   5385.486 ms/op
    p(100.0000) =   5385.486 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2)

# Run progress: 23.81% complete, ETA 10:28:48
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6832.521 ms/op
# Warmup Iteration   2: 4345.299 ±(99.9%) 5731.833 ms/op
# Warmup Iteration   3: 4201.295 ±(99.9%) 88.357 ms/op
# Warmup Iteration   4: 4188.712 ±(99.9%) 289.699 ms/op
# Warmup Iteration   5: 4198.498 ±(99.9%) 0.001 ms/op
Iteration   1: 4201.295 ±(99.9%) 159.288 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4198.498 ms/op
                 executeQuery·p0.90:   4211.081 ms/op
                 executeQuery·p0.95:   4211.081 ms/op
                 executeQuery·p0.99:   4211.081 ms/op
                 executeQuery·p0.999:  4211.081 ms/op
                 executeQuery·p0.9999: 4211.081 ms/op
                 executeQuery·p1.00:   4211.081 ms/op

Iteration   2: 4194.304 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4194.304 ms/op
                 executeQuery·p0.90:   4194.304 ms/op
                 executeQuery·p0.95:   4194.304 ms/op
                 executeQuery·p0.99:   4194.304 ms/op
                 executeQuery·p0.999:  4194.304 ms/op
                 executeQuery·p0.9999: 4194.304 ms/op
                 executeQuery·p1.00:   4194.304 ms/op

Iteration   3: 4195.702 ±(99.9%) 192.570 ms/op
                 executeQuery·p0.00:   4185.915 ms/op
                 executeQuery·p0.50:   4194.304 ms/op
                 executeQuery·p0.90:   4206.887 ms/op
                 executeQuery·p0.95:   4206.887 ms/op
                 executeQuery·p0.99:   4206.887 ms/op
                 executeQuery·p0.999:  4206.887 ms/op
                 executeQuery·p0.9999: 4206.887 ms/op
                 executeQuery·p1.00:   4206.887 ms/op

Iteration   4: 4199.896 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   4198.498 ms/op
                 executeQuery·p0.50:   4198.498 ms/op
                 executeQuery·p0.90:   4202.693 ms/op
                 executeQuery·p0.95:   4202.693 ms/op
                 executeQuery·p0.99:   4202.693 ms/op
                 executeQuery·p0.999:  4202.693 ms/op
                 executeQuery·p0.9999: 4202.693 ms/op
                 executeQuery·p1.00:   4202.693 ms/op

Iteration   5: 4197.100 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4194.304 ms/op
                 executeQuery·p0.90:   4202.693 ms/op
                 executeQuery·p0.95:   4202.693 ms/op
                 executeQuery·p0.99:   4202.693 ms/op
                 executeQuery·p0.999:  4202.693 ms/op
                 executeQuery·p0.9999: 4202.693 ms/op
                 executeQuery·p1.00:   4202.693 ms/op


# Run progress: 24.40% complete, ETA 10:15:20
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

3625.976 ±(99.9%) 23565.434 ms/op
# Warmup Iteration   2: 4409.612 ±(99.9%) 5467.458 ms/op
# Warmup Iteration   3: 4571.791 ±(99.9%) 930.903 ms/op
# Warmup Iteration   4: 5268.046 ±(99.9%) 23326.343 ms/op
# Warmup Iteration   5: 6731.858 ms/op
Iteration   1: 6736.052 ms/op
                 executeQuery·p0.00:   6727.664 ms/op
                 executeQuery·p0.50:   6736.052 ms/op
                 executeQuery·p0.90:   6744.441 ms/op
                 executeQuery·p0.95:   6744.441 ms/op
                 executeQuery·p0.99:   6744.441 ms/op
                 executeQuery·p0.999:  6744.441 ms/op
                 executeQuery·p0.9999: 6744.441 ms/op
                 executeQuery·p1.00:   6744.441 ms/op

Iteration   2: 6723.469 ms/op
                 executeQuery·p0.00:   6719.275 ms/op
                 executeQuery·p0.50:   6723.469 ms/op
                 executeQuery·p0.90:   6727.664 ms/op
                 executeQuery·p0.95:   6727.664 ms/op
                 executeQuery·p0.99:   6727.664 ms/op
                 executeQuery·p0.999:  6727.664 ms/op
                 executeQuery·p0.9999: 6727.664 ms/op
                 executeQuery·p1.00:   6727.664 ms/op

Iteration   3: 6744.441 ms/op
                 executeQuery·p0.00:   6719.275 ms/op
                 executeQuery·p0.50:   6744.441 ms/op
                 executeQuery·p0.90:   6769.607 ms/op
                 executeQuery·p0.95:   6769.607 ms/op
                 executeQuery·p0.99:   6769.607 ms/op
                 executeQuery·p0.999:  6769.607 ms/op
                 executeQuery·p0.9999: 6769.607 ms/op
                 executeQuery·p1.00:   6769.607 ms/op

Iteration   4: 6731.858 ms/op
                 executeQuery·p0.00:   6727.664 ms/op
                 executeQuery·p0.50:   6731.858 ms/op
                 executeQuery·p0.90:   6736.052 ms/op
                 executeQuery·p0.95:   6736.052 ms/op
                 executeQuery·p0.99:   6736.052 ms/op
                 executeQuery·p0.999:  6736.052 ms/op
                 executeQuery·p0.9999: 6736.052 ms/op
                 executeQuery·p1.00:   6736.052 ms/op

Iteration   5: 6824.133 ms/op
                 executeQuery·p0.00:   6736.052 ms/op
                 executeQuery·p0.50:   6824.133 ms/op
                 executeQuery·p0.90:   6912.213 ms/op
                 executeQuery·p0.95:   6912.213 ms/op
                 executeQuery·p0.99:   6912.213 ms/op
                 executeQuery·p0.999:  6912.213 ms/op
                 executeQuery·p0.9999: 6912.213 ms/op
                 executeQuery·p1.00:   6912.213 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 25
  mean =   5219.392 ±(99.9%) 957.078 ms/op

  Histogram, ms/op:
    [4000.000, 4250.000) = 15 
    [4250.000, 4500.000) = 0 
    [4500.000, 4750.000) = 0 
    [4750.000, 5000.000) = 0 
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 0 
    [5750.000, 6000.000) = 0 
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 0 
    [6500.000, 6750.000) = 8 

  Percentiles, ms/op:
      p(0.0000) =   4185.915 ms/op
     p(50.0000) =   4202.693 ms/op
     p(90.0000) =   6754.507 ms/op
     p(95.0000) =   6869.431 ms/op
     p(99.0000) =   6912.213 ms/op
     p(99.9000) =   6912.213 ms/op
     p(99.9900) =   6912.213 ms/op
     p(99.9990) =   6912.213 ms/op
     p(99.9999) =   6912.213 ms/op
    p(100.0000) =   6912.213 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16)

# Run progress: 25.00% complete, ETA 10:02:47
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7134.511 ms/op
# Warmup Iteration   2: 5968.495 ms/op
# Warmup Iteration   3: 5280.629 ms/op
# Warmup Iteration   4: 5268.046 ms/op
# Warmup Iteration   5: 5263.852 ms/op
Iteration   1: 5364.515 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5364.515 ms/op
                 executeQuery·p0.90:   5469.372 ms/op
                 executeQuery·p0.95:   5469.372 ms/op
                 executeQuery·p0.99:   5469.372 ms/op
                 executeQuery·p0.999:  5469.372 ms/op
                 executeQuery·p0.9999: 5469.372 ms/op
                 executeQuery·p1.00:   5469.372 ms/op

Iteration   2: 5268.046 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5268.046 ms/op
                 executeQuery·p0.90:   5276.434 ms/op
                 executeQuery·p0.95:   5276.434 ms/op
                 executeQuery·p0.99:   5276.434 ms/op
                 executeQuery·p0.999:  5276.434 ms/op
                 executeQuery·p0.9999: 5276.434 ms/op
                 executeQuery·p1.00:   5276.434 ms/op

Iteration   3: 5263.852 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5263.852 ms/op
                 executeQuery·p0.90:   5268.046 ms/op
                 executeQuery·p0.95:   5268.046 ms/op
                 executeQuery·p0.99:   5268.046 ms/op
                 executeQuery·p0.999:  5268.046 ms/op
                 executeQuery·p0.9999: 5268.046 ms/op
                 executeQuery·p1.00:   5268.046 ms/op

Iteration   4: 5280.629 ms/op
                 executeQuery·p0.00:   5268.046 ms/op
                 executeQuery·p0.50:   5280.629 ms/op
                 executeQuery·p0.90:   5293.212 ms/op
                 executeQuery·p0.95:   5293.212 ms/op
                 executeQuery·p0.99:   5293.212 ms/op
                 executeQuery·p0.999:  5293.212 ms/op
                 executeQuery·p0.9999: 5293.212 ms/op
                 executeQuery·p1.00:   5293.212 ms/op

Iteration   5: 5272.240 ms/op
                 executeQuery·p0.00:   5268.046 ms/op
                 executeQuery·p0.50:   5272.240 ms/op
                 executeQuery·p0.90:   5276.434 ms/op
                 executeQuery·p0.95:   5276.434 ms/op
                 executeQuery·p0.99:   5276.434 ms/op
                 executeQuery·p0.999:  5276.434 ms/op
                 executeQuery·p0.9999: 5276.434 ms/op
                 executeQuery·p1.00:   5276.434 ms/op


# Run progress: 25.60% complete, ETA 09:49:33
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

5158.994 ms/op
# Warmup Iteration   2: 5444.207 ms/op
# Warmup Iteration   3: 5263.852 ms/op
# Warmup Iteration   4: 5389.681 ms/op
# Warmup Iteration   5: 5360.321 ms/op
Iteration   1: 5284.823 ms/op
                 executeQuery·p0.00:   5268.046 ms/op
                 executeQuery·p0.50:   5284.823 ms/op
                 executeQuery·p0.90:   5301.600 ms/op
                 executeQuery·p0.95:   5301.600 ms/op
                 executeQuery·p0.99:   5301.600 ms/op
                 executeQuery·p0.999:  5301.600 ms/op
                 executeQuery·p0.9999: 5301.600 ms/op
                 executeQuery·p1.00:   5301.600 ms/op

Iteration   2: 5268.046 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5268.046 ms/op
                 executeQuery·p0.90:   5276.434 ms/op
                 executeQuery·p0.95:   5276.434 ms/op
                 executeQuery·p0.99:   5276.434 ms/op
                 executeQuery·p0.999:  5276.434 ms/op
                 executeQuery·p0.9999: 5276.434 ms/op
                 executeQuery·p1.00:   5276.434 ms/op

Iteration   3: 5263.852 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5263.852 ms/op
                 executeQuery·p0.90:   5268.046 ms/op
                 executeQuery·p0.95:   5268.046 ms/op
                 executeQuery·p0.99:   5268.046 ms/op
                 executeQuery·p0.999:  5268.046 ms/op
                 executeQuery·p0.9999: 5268.046 ms/op
                 executeQuery·p1.00:   5268.046 ms/op

Iteration   4: 5284.823 ms/op
                 executeQuery·p0.00:   5268.046 ms/op
                 executeQuery·p0.50:   5284.823 ms/op
                 executeQuery·p0.90:   5301.600 ms/op
                 executeQuery·p0.95:   5301.600 ms/op
                 executeQuery·p0.99:   5301.600 ms/op
                 executeQuery·p0.999:  5301.600 ms/op
                 executeQuery·p0.9999: 5301.600 ms/op
                 executeQuery·p1.00:   5301.600 ms/op

Iteration   5: 5263.852 ms/op
                 executeQuery·p0.00:   5259.657 ms/op
                 executeQuery·p0.50:   5263.852 ms/op
                 executeQuery·p0.90:   5268.046 ms/op
                 executeQuery·p0.95:   5268.046 ms/op
                 executeQuery·p0.99:   5268.046 ms/op
                 executeQuery·p0.999:  5268.046 ms/op
                 executeQuery·p0.9999: 5268.046 ms/op
                 executeQuery·p1.00:   5268.046 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   5281.468 ±(99.9%) 40.065 ms/op

  Histogram, ms/op:
    [5200.000, 5225.000) = 0 
    [5225.000, 5250.000) = 0 
    [5250.000, 5275.000) = 13 
    [5275.000, 5300.000) = 4 
    [5300.000, 5325.000) = 2 
    [5325.000, 5350.000) = 0 
    [5350.000, 5375.000) = 0 
    [5375.000, 5400.000) = 0 
    [5400.000, 5425.000) = 0 
    [5425.000, 5450.000) = 0 
    [5450.000, 5475.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   5259.657 ms/op
     p(50.0000) =   5268.046 ms/op
     p(90.0000) =   5301.600 ms/op
     p(95.0000) =   5460.984 ms/op
     p(99.0000) =   5469.372 ms/op
     p(99.9000) =   5469.372 ms/op
     p(99.9900) =   5469.372 ms/op
     p(99.9990) =   5469.372 ms/op
     p(99.9999) =   5469.372 ms/op
    p(100.0000) =   5469.372 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192)

# Run progress: 26.19% complete, ETA 09:36:36
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

8669.626 ms/op
# Warmup Iteration   2: 7772.045 ms/op
# Warmup Iteration   3: 7545.553 ms/op
# Warmup Iteration   4: 7327.449 ms/op
# Warmup Iteration   5: 7289.700 ms/op
Iteration   1: 7646.216 ms/op
                 executeQuery·p0.00:   7625.245 ms/op
                 executeQuery·p0.50:   7646.216 ms/op
                 executeQuery·p0.90:   7667.188 ms/op
                 executeQuery·p0.95:   7667.188 ms/op
                 executeQuery·p0.99:   7667.188 ms/op
                 executeQuery·p0.999:  7667.188 ms/op
                 executeQuery·p0.9999: 7667.188 ms/op
                 executeQuery·p1.00:   7667.188 ms/op

Iteration   2: 7625.245 ms/op
                 executeQuery·p0.00:   7616.856 ms/op
                 executeQuery·p0.50:   7625.245 ms/op
                 executeQuery·p0.90:   7633.633 ms/op
                 executeQuery·p0.95:   7633.633 ms/op
                 executeQuery·p0.99:   7633.633 ms/op
                 executeQuery·p0.999:  7633.633 ms/op
                 executeQuery·p0.9999: 7633.633 ms/op
                 executeQuery·p1.00:   7633.633 ms/op

Iteration   3: 7491.027 ms/op
                 executeQuery·p0.00:   7289.700 ms/op
                 executeQuery·p0.50:   7491.027 ms/op
                 executeQuery·p0.90:   7692.354 ms/op
                 executeQuery·p0.95:   7692.354 ms/op
                 executeQuery·p0.99:   7692.354 ms/op
                 executeQuery·p0.999:  7692.354 ms/op
                 executeQuery·p0.9999: 7692.354 ms/op
                 executeQuery·p1.00:   7692.354 ms/op

Iteration   4: 7541.359 ms/op
                 executeQuery·p0.00:   7432.307 ms/op
                 executeQuery·p0.50:   7541.359 ms/op
                 executeQuery·p0.90:   7650.410 ms/op
                 executeQuery·p0.95:   7650.410 ms/op
                 executeQuery·p0.99:   7650.410 ms/op
                 executeQuery·p0.999:  7650.410 ms/op
                 executeQuery·p0.9999: 7650.410 ms/op
                 executeQuery·p1.00:   7650.410 ms/op

Iteration   5: 7511.998 ms/op
                 executeQuery·p0.00:   7398.752 ms/op
                 executeQuery·p0.50:   7511.998 ms/op
                 executeQuery·p0.90:   7625.245 ms/op
                 executeQuery·p0.95:   7625.245 ms/op
                 executeQuery·p0.99:   7625.245 ms/op
                 executeQuery·p0.999:  7625.245 ms/op
                 executeQuery·p0.9999: 7625.245 ms/op
                 executeQuery·p1.00:   7625.245 ms/op


# Run progress: 26.79% complete, ETA 09:26:18
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

7985.955 ms/op
# Warmup Iteration   2: 7742.685 ms/op
# Warmup Iteration   3: 7604.273 ms/op
# Warmup Iteration   4: 7709.131 ms/op
# Warmup Iteration   5: 7679.771 ms/op
Iteration   1: 7675.576 ms/op
                 executeQuery·p0.00:   7558.136 ms/op
                 executeQuery·p0.50:   7675.576 ms/op
                 executeQuery·p0.90:   7793.017 ms/op
                 executeQuery·p0.95:   7793.017 ms/op
                 executeQuery·p0.99:   7793.017 ms/op
                 executeQuery·p0.999:  7793.017 ms/op
                 executeQuery·p0.9999: 7793.017 ms/op
                 executeQuery·p1.00:   7793.017 ms/op

Iteration   2: 7679.771 ms/op
                 executeQuery·p0.00:   7541.359 ms/op
                 executeQuery·p0.50:   7679.771 ms/op
                 executeQuery·p0.90:   7818.183 ms/op
                 executeQuery·p0.95:   7818.183 ms/op
                 executeQuery·p0.99:   7818.183 ms/op
                 executeQuery·p0.999:  7818.183 ms/op
                 executeQuery·p0.9999: 7818.183 ms/op
                 executeQuery·p1.00:   7818.183 ms/op

Iteration   3: 7780.434 ms/op
                 executeQuery·p0.00:   7776.240 ms/op
                 executeQuery·p0.50:   7780.434 ms/op
                 executeQuery·p0.90:   7784.628 ms/op
                 executeQuery·p0.95:   7784.628 ms/op
                 executeQuery·p0.99:   7784.628 ms/op
                 executeQuery·p0.999:  7784.628 ms/op
                 executeQuery·p0.9999: 7784.628 ms/op
                 executeQuery·p1.00:   7784.628 ms/op

Iteration   4: 7658.799 ms/op
                 executeQuery·p0.00:   7524.581 ms/op
                 executeQuery·p0.50:   7658.799 ms/op
                 executeQuery·p0.90:   7793.017 ms/op
                 executeQuery·p0.95:   7793.017 ms/op
                 executeQuery·p0.99:   7793.017 ms/op
                 executeQuery·p0.999:  7793.017 ms/op
                 executeQuery·p0.9999: 7793.017 ms/op
                 executeQuery·p1.00:   7793.017 ms/op

Iteration   5: 7662.993 ms/op
                 executeQuery·p0.00:   7549.747 ms/op
                 executeQuery·p0.50:   7662.993 ms/op
                 executeQuery·p0.90:   7776.240 ms/op
                 executeQuery·p0.95:   7776.240 ms/op
                 executeQuery·p0.99:   7776.240 ms/op
                 executeQuery·p0.999:  7776.240 ms/op
                 executeQuery·p0.9999: 7776.240 ms/op
                 executeQuery·p1.00:   7776.240 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   7627.342 ±(99.9%) 125.988 ms/op

  Histogram, ms/op:
    [7200.000, 7250.000) = 0 
    [7250.000, 7300.000) = 1 
    [7300.000, 7350.000) = 0 
    [7350.000, 7400.000) = 1 
    [7400.000, 7450.000) = 1 
    [7450.000, 7500.000) = 0 
    [7500.000, 7550.000) = 3 
    [7550.000, 7600.000) = 1 
    [7600.000, 7650.000) = 4 
    [7650.000, 7700.000) = 3 
    [7700.000, 7750.000) = 0 
    [7750.000, 7800.000) = 5 
    [7800.000, 7850.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   7289.700 ms/op
     p(50.0000) =   7629.439 ms/op
     p(90.0000) =   7793.017 ms/op
     p(95.0000) =   7816.924 ms/op
     p(99.0000) =   7818.183 ms/op
     p(99.9000) =   7818.183 ms/op
     p(99.9900) =   7818.183 ms/op
     p(99.9990) =   7818.183 ms/op
     p(99.9999) =   7818.183 ms/op
    p(100.0000) =   7818.183 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144)

# Run progress: 27.38% complete, ETA 09:16:23
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

31943.819 ms/op
# Warmup Iteration   2: 25266.487 ms/op
# Warmup Iteration   3: 24494.735 ms/op
# Warmup Iteration   4: 25870.467 ms/op
# Warmup Iteration   5: 25904.022 ms/op
Iteration   1: 26440.892 ms/op
                 executeQuery·p0.00:   26440.892 ms/op
                 executeQuery·p0.50:   26440.892 ms/op
                 executeQuery·p0.90:   26440.892 ms/op
                 executeQuery·p0.95:   26440.892 ms/op
                 executeQuery·p0.99:   26440.892 ms/op
                 executeQuery·p0.999:  26440.892 ms/op
                 executeQuery·p0.9999: 26440.892 ms/op
                 executeQuery·p1.00:   26440.892 ms/op

Iteration   2: 26038.239 ms/op
                 executeQuery·p0.00:   26038.239 ms/op
                 executeQuery·p0.50:   26038.239 ms/op
                 executeQuery·p0.90:   26038.239 ms/op
                 executeQuery·p0.95:   26038.239 ms/op
                 executeQuery·p0.99:   26038.239 ms/op
                 executeQuery·p0.999:  26038.239 ms/op
                 executeQuery·p0.9999: 26038.239 ms/op
                 executeQuery·p1.00:   26038.239 ms/op

Iteration   3: 24696.062 ms/op
                 executeQuery·p0.00:   24696.062 ms/op
                 executeQuery·p0.50:   24696.062 ms/op
                 executeQuery·p0.90:   24696.062 ms/op
                 executeQuery·p0.95:   24696.062 ms/op
                 executeQuery·p0.99:   24696.062 ms/op
                 executeQuery·p0.999:  24696.062 ms/op
                 executeQuery·p0.9999: 24696.062 ms/op
                 executeQuery·p1.00:   24696.062 ms/op

Iteration   4: 24192.745 ms/op
                 executeQuery·p0.00:   24192.745 ms/op
                 executeQuery·p0.50:   24192.745 ms/op
                 executeQuery·p0.90:   24192.745 ms/op
                 executeQuery·p0.95:   24192.745 ms/op
                 executeQuery·p0.99:   24192.745 ms/op
                 executeQuery·p0.999:  24192.745 ms/op
                 executeQuery·p0.9999: 24192.745 ms/op
                 executeQuery·p1.00:   24192.745 ms/op

Iteration   5: 26105.348 ms/op
                 executeQuery·p0.00:   26105.348 ms/op
                 executeQuery·p0.50:   26105.348 ms/op
                 executeQuery·p0.90:   26105.348 ms/op
                 executeQuery·p0.95:   26105.348 ms/op
                 executeQuery·p0.99:   26105.348 ms/op
                 executeQuery·p0.999:  26105.348 ms/op
                 executeQuery·p0.9999: 26105.348 ms/op
                 executeQuery·p1.00:   26105.348 ms/op


# Run progress: 27.98% complete, ETA 09:15:53
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

26407.338 ms/op
# Warmup Iteration   2: 26138.903 ms/op
# Warmup Iteration   3: 24863.834 ms/op
# Warmup Iteration   4: 26541.556 ms/op
# Warmup Iteration   5: 22481.469 ms/op
Iteration   1: 23857.201 ms/op
                 executeQuery·p0.00:   23857.201 ms/op
                 executeQuery·p0.50:   23857.201 ms/op
                 executeQuery·p0.90:   23857.201 ms/op
                 executeQuery·p0.95:   23857.201 ms/op
                 executeQuery·p0.99:   23857.201 ms/op
                 executeQuery·p0.999:  23857.201 ms/op
                 executeQuery·p0.9999: 23857.201 ms/op
                 executeQuery·p1.00:   23857.201 ms/op

Iteration   2: 24897.389 ms/op
                 executeQuery·p0.00:   24897.389 ms/op
                 executeQuery·p0.50:   24897.389 ms/op
                 executeQuery·p0.90:   24897.389 ms/op
                 executeQuery·p0.95:   24897.389 ms/op
                 executeQuery·p0.99:   24897.389 ms/op
                 executeQuery·p0.999:  24897.389 ms/op
                 executeQuery·p0.9999: 24897.389 ms/op
                 executeQuery·p1.00:   24897.389 ms/op

Iteration   3: 24763.171 ms/op
                 executeQuery·p0.00:   24763.171 ms/op
                 executeQuery·p0.50:   24763.171 ms/op
                 executeQuery·p0.90:   24763.171 ms/op
                 executeQuery·p0.95:   24763.171 ms/op
                 executeQuery·p0.99:   24763.171 ms/op
                 executeQuery·p0.999:  24763.171 ms/op
                 executeQuery·p0.9999: 24763.171 ms/op
                 executeQuery·p1.00:   24763.171 ms/op

Iteration   4: 25132.270 ms/op
                 executeQuery·p0.00:   25132.270 ms/op
                 executeQuery·p0.50:   25132.270 ms/op
                 executeQuery·p0.90:   25132.270 ms/op
                 executeQuery·p0.95:   25132.270 ms/op
                 executeQuery·p0.99:   25132.270 ms/op
                 executeQuery·p0.999:  25132.270 ms/op
                 executeQuery·p0.9999: 25132.270 ms/op
                 executeQuery·p1.00:   25132.270 ms/op

Iteration   5: 24326.963 ms/op
                 executeQuery·p0.00:   24326.963 ms/op
                 executeQuery·p0.50:   24326.963 ms/op
                 executeQuery·p0.90:   24326.963 ms/op
                 executeQuery·p0.95:   24326.963 ms/op
                 executeQuery·p0.99:   24326.963 ms/op
                 executeQuery·p0.999:  24326.963 ms/op
                 executeQuery·p0.9999: 24326.963 ms/op
                 executeQuery·p1.00:   24326.963 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  25045.028 ±(99.9%) 1327.869 ms/op

  Histogram, ms/op:
    [23000.000, 23250.000) = 0 
    [23250.000, 23500.000) = 0 
    [23500.000, 23750.000) = 0 
    [23750.000, 24000.000) = 1 
    [24000.000, 24250.000) = 1 
    [24250.000, 24500.000) = 1 
    [24500.000, 24750.000) = 1 
    [24750.000, 25000.000) = 2 
    [25000.000, 25250.000) = 1 
    [25250.000, 25500.000) = 0 
    [25500.000, 25750.000) = 0 
    [25750.000, 26000.000) = 0 
    [26000.000, 26250.000) = 2 
    [26250.000, 26500.000) = 1 
    [26500.000, 26750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  23857.201 ms/op
     p(50.0000) =  24830.280 ms/op
     p(90.0000) =  26407.338 ms/op
     p(95.0000) =  26440.892 ms/op
     p(99.0000) =  26440.892 ms/op
     p(99.9000) =  26440.892 ms/op
     p(99.9900) =  26440.892 ms/op
     p(99.9990) =  26440.892 ms/op
     p(99.9999) =  26440.892 ms/op
    p(100.0000) =  26440.892 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288)

# Run progress: 28.57% complete, ETA 09:14:34
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

54089.744 ms/op
# Warmup Iteration   2: 51606.716 ms/op
# Warmup Iteration   3: 51271.172 ms/op
# Warmup Iteration   4: 50197.430 ms/op
# Warmup Iteration   5: 51808.043 ms/op
Iteration   1: 50331.648 ms/op
                 executeQuery·p0.00:   50331.648 ms/op
                 executeQuery·p0.50:   50331.648 ms/op
                 executeQuery·p0.90:   50331.648 ms/op
                 executeQuery·p0.95:   50331.648 ms/op
                 executeQuery·p0.99:   50331.648 ms/op
                 executeQuery·p0.999:  50331.648 ms/op
                 executeQuery·p0.9999: 50331.648 ms/op
                 executeQuery·p1.00:   50331.648 ms/op

Iteration   2: 51539.608 ms/op
                 executeQuery·p0.00:   51539.608 ms/op
                 executeQuery·p0.50:   51539.608 ms/op
                 executeQuery·p0.90:   51539.608 ms/op
                 executeQuery·p0.95:   51539.608 ms/op
                 executeQuery·p0.99:   51539.608 ms/op
                 executeQuery·p0.999:  51539.608 ms/op
                 executeQuery·p0.9999: 51539.608 ms/op
                 executeQuery·p1.00:   51539.608 ms/op

Iteration   3: 51606.716 ms/op
                 executeQuery·p0.00:   51606.716 ms/op
                 executeQuery·p0.50:   51606.716 ms/op
                 executeQuery·p0.90:   51606.716 ms/op
                 executeQuery·p0.95:   51606.716 ms/op
                 executeQuery·p0.99:   51606.716 ms/op
                 executeQuery·p0.999:  51606.716 ms/op
                 executeQuery·p0.9999: 51606.716 ms/op
                 executeQuery·p1.00:   51606.716 ms/op

Iteration   4: 50667.192 ms/op
                 executeQuery·p0.00:   50667.192 ms/op
                 executeQuery·p0.50:   50667.192 ms/op
                 executeQuery·p0.90:   50667.192 ms/op
                 executeQuery·p0.95:   50667.192 ms/op
                 executeQuery·p0.99:   50667.192 ms/op
                 executeQuery·p0.999:  50667.192 ms/op
                 executeQuery·p0.9999: 50667.192 ms/op
                 executeQuery·p1.00:   50667.192 ms/op

Iteration   5: 51875.152 ms/op
                 executeQuery·p0.00:   51875.152 ms/op
                 executeQuery·p0.50:   51875.152 ms/op
                 executeQuery·p0.90:   51875.152 ms/op
                 executeQuery·p0.95:   51875.152 ms/op
                 executeQuery·p0.99:   51875.152 ms/op
                 executeQuery·p0.999:  51875.152 ms/op
                 executeQuery·p0.9999: 51875.152 ms/op
                 executeQuery·p1.00:   51875.152 ms/op


# Run progress: 29.17% complete, ETA 09:36:27
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

51405.390 ms/op
# Warmup Iteration   2: 51338.281 ms/op
# Warmup Iteration   3: 53016.003 ms/op
# Warmup Iteration   4: 50197.430 ms/op
# Warmup Iteration   5: 51808.043 ms/op
Iteration   1: 50600.083 ms/op
                 executeQuery·p0.00:   50600.083 ms/op
                 executeQuery·p0.50:   50600.083 ms/op
                 executeQuery·p0.90:   50600.083 ms/op
                 executeQuery·p0.95:   50600.083 ms/op
                 executeQuery·p0.99:   50600.083 ms/op
                 executeQuery·p0.999:  50600.083 ms/op
                 executeQuery·p0.9999: 50600.083 ms/op
                 executeQuery·p1.00:   50600.083 ms/op

Iteration   2: 51875.152 ms/op
                 executeQuery·p0.00:   51875.152 ms/op
                 executeQuery·p0.50:   51875.152 ms/op
                 executeQuery·p0.90:   51875.152 ms/op
                 executeQuery·p0.95:   51875.152 ms/op
                 executeQuery·p0.99:   51875.152 ms/op
                 executeQuery·p0.999:  51875.152 ms/op
                 executeQuery·p0.9999: 51875.152 ms/op
                 executeQuery·p1.00:   51875.152 ms/op

Iteration   3: 53016.003 ms/op
                 executeQuery·p0.00:   53016.003 ms/op
                 executeQuery·p0.50:   53016.003 ms/op
                 executeQuery·p0.90:   53016.003 ms/op
                 executeQuery·p0.95:   53016.003 ms/op
                 executeQuery·p0.99:   53016.003 ms/op
                 executeQuery·p0.999:  53016.003 ms/op
                 executeQuery·p0.9999: 53016.003 ms/op
                 executeQuery·p1.00:   53016.003 ms/op

Iteration   4: 49325.015 ms/op
                 executeQuery·p0.00:   49325.015 ms/op
                 executeQuery·p0.50:   49325.015 ms/op
                 executeQuery·p0.90:   49325.015 ms/op
                 executeQuery·p0.95:   49325.015 ms/op
                 executeQuery·p0.99:   49325.015 ms/op
                 executeQuery·p0.999:  49325.015 ms/op
                 executeQuery·p0.9999: 49325.015 ms/op
                 executeQuery·p1.00:   49325.015 ms/op

Iteration   5: 51875.152 ms/op
                 executeQuery·p0.00:   51875.152 ms/op
                 executeQuery·p0.50:   51875.152 ms/op
                 executeQuery·p0.90:   51875.152 ms/op
                 executeQuery·p0.95:   51875.152 ms/op
                 executeQuery·p0.99:   51875.152 ms/op
                 executeQuery·p0.999:  51875.152 ms/op
                 executeQuery·p0.9999: 51875.152 ms/op
                 executeQuery·p1.00:   51875.152 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  51271.172 ±(99.9%) 1578.332 ms/op

  Histogram, ms/op:
    [49000.000, 49500.000) = 1 
    [49500.000, 50000.000) = 0 
    [50000.000, 50500.000) = 1 
    [50500.000, 51000.000) = 2 
    [51000.000, 51500.000) = 0 
    [51500.000, 52000.000) = 5 
    [52000.000, 52500.000) = 0 
    [52500.000, 53000.000) = 0 
    [53000.000, 53500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  49325.015 ms/op
     p(50.0000) =  51573.162 ms/op
     p(90.0000) =  52901.917 ms/op
     p(95.0000) =  53016.003 ms/op
     p(99.0000) =  53016.003 ms/op
     p(99.9000) =  53016.003 ms/op
     p(99.9900) =  53016.003 ms/op
     p(99.9990) =  53016.003 ms/op
     p(99.9999) =  53016.003 ms/op
    p(100.0000) =  53016.003 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2)

# Run progress: 29.76% complete, ETA 09:57:05
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

17179.869 ms/op
# Warmup Iteration   2: 8585.740 ms/op
# Warmup Iteration   3: 8497.660 ms/op
# Warmup Iteration   4: 7658.799 ms/op
# Warmup Iteration   5: 7679.771 ms/op
Iteration   1: 8464.105 ms/op
                 executeQuery·p0.00:   7683.965 ms/op
                 executeQuery·p0.50:   8464.105 ms/op
                 executeQuery·p0.90:   9244.246 ms/op
                 executeQuery·p0.95:   9244.246 ms/op
                 executeQuery·p0.99:   9244.246 ms/op
                 executeQuery·p0.999:  9244.246 ms/op
                 executeQuery·p0.9999: 9244.246 ms/op
                 executeQuery·p1.00:   9244.246 ms/op

Iteration   2: 7662.993 ms/op
                 executeQuery·p0.00:   7658.799 ms/op
                 executeQuery·p0.50:   7662.993 ms/op
                 executeQuery·p0.90:   7667.188 ms/op
                 executeQuery·p0.95:   7667.188 ms/op
                 executeQuery·p0.99:   7667.188 ms/op
                 executeQuery·p0.999:  7667.188 ms/op
                 executeQuery·p0.9999: 7667.188 ms/op
                 executeQuery·p1.00:   7667.188 ms/op

Iteration   3: 7667.188 ms/op
                 executeQuery·p0.00:   7667.188 ms/op
                 executeQuery·p0.50:   7667.188 ms/op
                 executeQuery·p0.90:   7667.188 ms/op
                 executeQuery·p0.95:   7667.188 ms/op
                 executeQuery·p0.99:   7667.188 ms/op
                 executeQuery·p0.999:  7667.188 ms/op
                 executeQuery·p0.9999: 7667.188 ms/op
                 executeQuery·p1.00:   7667.188 ms/op

Iteration   4: 8644.461 ms/op
                 executeQuery·p0.00:   8212.447 ms/op
                 executeQuery·p0.50:   8644.461 ms/op
                 executeQuery·p0.90:   9076.474 ms/op
                 executeQuery·p0.95:   9076.474 ms/op
                 executeQuery·p0.99:   9076.474 ms/op
                 executeQuery·p0.999:  9076.474 ms/op
                 executeQuery·p0.9999: 9076.474 ms/op
                 executeQuery·p1.00:   9076.474 ms/op

Iteration   5: 7658.799 ms/op
                 executeQuery·p0.00:   7658.799 ms/op
                 executeQuery·p0.50:   7658.799 ms/op
                 executeQuery·p0.90:   7658.799 ms/op
                 executeQuery·p0.95:   7658.799 ms/op
                 executeQuery·p0.99:   7658.799 ms/op
                 executeQuery·p0.999:  7658.799 ms/op
                 executeQuery·p0.9999: 7658.799 ms/op
                 executeQuery·p1.00:   7658.799 ms/op


# Run progress: 30.36% complete, ETA 09:46:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[8];
long[] resultSum2Array = new long[8];
long[] resultSum3Array = new long[8];
long[] resultSum4Array = new long[8];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

6505.366 ms/op
# Warmup Iteration   2: 8849.981 ms/op
# Warmup Iteration   3: 7784.628 ms/op
# Warmup Iteration   4: 7780.434 ms/op
# Warmup Iteration   5: 7776.240 ms/op
Iteration   1: 7772.045 ms/op
                 executeQuery·p0.00:   7767.851 ms/op
                 executeQuery·p0.50:   7772.045 ms/op
                 executeQuery·p0.90:   7776.240 ms/op
                 executeQuery·p0.95:   7776.240 ms/op
                 executeQuery·p0.99:   7776.240 ms/op
                 executeQuery·p0.999:  7776.240 ms/op
                 executeQuery·p0.9999: 7776.240 ms/op
                 executeQuery·p1.00:   7776.240 ms/op

Iteration   2: 7780.434 ms/op
                 executeQuery·p0.00:   7776.240 ms/op
                 executeQuery·p0.50:   7780.434 ms/op
                 executeQuery·p0.90:   7784.628 ms/op
                 executeQuery·p0.95:   7784.628 ms/op
                 executeQuery·p0.99:   7784.628 ms/op
                 executeQuery·p0.999:  7784.628 ms/op
                 executeQuery·p0.9999: 7784.628 ms/op
                 executeQuery·p1.00:   7784.628 ms/op

Iteration   3: 7860.126 ms/op
                 executeQuery·p0.00:   7776.240 ms/op
                 executeQuery·p0.50:   7860.126 ms/op
                 executeQuery·p0.90:   7944.012 ms/op
                 executeQuery·p0.95:   7944.012 ms/op
                 executeQuery·p0.99:   7944.012 ms/op
                 executeQuery·p0.999:  7944.012 ms/op
                 executeQuery·p0.9999: 7944.012 ms/op
                 executeQuery·p1.00:   7944.012 ms/op

Iteration   4: 7809.794 ms/op
                 executeQuery·p0.00:   7809.794 ms/op
                 executeQuery·p0.50:   7809.794 ms/op
                 executeQuery·p0.90:   7809.794 ms/op
                 executeQuery·p0.95:   7809.794 ms/op
                 executeQuery·p0.99:   7809.794 ms/op
                 executeQuery·p0.999:  7809.794 ms/op
                 executeQuery·p0.9999: 7809.794 ms/op
                 executeQuery·p1.00:   7809.794 ms/op

Iteration   5: 7788.823 ms/op
                 executeQuery·p0.00:   7784.628 ms/op
                 executeQuery·p0.50:   7788.823 ms/op
                 executeQuery·p0.90:   7793.017 ms/op
                 executeQuery·p0.95:   7793.017 ms/op
                 executeQuery·p0.99:   7793.017 ms/op
                 executeQuery·p0.999:  7793.017 ms/op
                 executeQuery·p0.9999: 7793.017 ms/op
                 executeQuery·p1.00:   7793.017 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   7910.877 ±(99.9%) 387.821 ms/op

  Histogram, ms/op:
    [ 7000.000,  7250.000) = 0 
    [ 7250.000,  7500.000) = 0 
    [ 7500.000,  7750.000) = 7 
    [ 7750.000,  8000.000) = 10 
    [ 8000.000,  8250.000) = 1 
    [ 8250.000,  8500.000) = 0 
    [ 8500.000,  8750.000) = 0 
    [ 8750.000,  9000.000) = 0 
    [ 9000.000,  9250.000) = 2 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7658.799 ms/op
     p(50.0000) =   7776.240 ms/op
     p(90.0000) =   8990.071 ms/op
     p(95.0000) =   9235.857 ms/op
     p(99.0000) =   9244.246 ms/op
     p(99.9000) =   9244.246 ms/op
     p(99.9900) =   9244.246 ms/op
     p(99.9990) =   9244.246 ms/op
     p(99.9999) =   9244.246 ms/op
    p(100.0000) =   9244.246 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16)

# Run progress: 30.95% complete, ETA 09:36:20
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16961.765 ms/op
# Warmup Iteration   2: 13136.560 ms/op
# Warmup Iteration   3: 12163.482 ms/op
# Warmup Iteration   4: 13421.773 ms/op
# Warmup Iteration   5: 11945.378 ms/op
Iteration   1: 13354.664 ms/op
                 executeQuery·p0.00:   13354.664 ms/op
                 executeQuery·p0.50:   13354.664 ms/op
                 executeQuery·p0.90:   13354.664 ms/op
                 executeQuery·p0.95:   13354.664 ms/op
                 executeQuery·p0.99:   13354.664 ms/op
                 executeQuery·p0.999:  13354.664 ms/op
                 executeQuery·p0.9999: 13354.664 ms/op
                 executeQuery·p1.00:   13354.664 ms/op

Iteration   2: 13220.446 ms/op
                 executeQuery·p0.00:   13220.446 ms/op
                 executeQuery·p0.50:   13220.446 ms/op
                 executeQuery·p0.90:   13220.446 ms/op
                 executeQuery·p0.95:   13220.446 ms/op
                 executeQuery·p0.99:   13220.446 ms/op
                 executeQuery·p0.999:  13220.446 ms/op
                 executeQuery·p0.9999: 13220.446 ms/op
                 executeQuery·p1.00:   13220.446 ms/op

Iteration   3: 13254.001 ms/op
                 executeQuery·p0.00:   13254.001 ms/op
                 executeQuery·p0.50:   13254.001 ms/op
                 executeQuery·p0.90:   13254.001 ms/op
                 executeQuery·p0.95:   13254.001 ms/op
                 executeQuery·p0.99:   13254.001 ms/op
                 executeQuery·p0.999:  13254.001 ms/op
                 executeQuery·p0.9999: 13254.001 ms/op
                 executeQuery·p1.00:   13254.001 ms/op

Iteration   4: 13237.223 ms/op
                 executeQuery·p0.00:   13237.223 ms/op
                 executeQuery·p0.50:   13237.223 ms/op
                 executeQuery·p0.90:   13237.223 ms/op
                 executeQuery·p0.95:   13237.223 ms/op
                 executeQuery·p0.99:   13237.223 ms/op
                 executeQuery·p0.999:  13237.223 ms/op
                 executeQuery·p0.9999: 13237.223 ms/op
                 executeQuery·p1.00:   13237.223 ms/op

Iteration   5: 13388.218 ms/op
                 executeQuery·p0.00:   13388.218 ms/op
                 executeQuery·p0.50:   13388.218 ms/op
                 executeQuery·p0.90:   13388.218 ms/op
                 executeQuery·p0.95:   13388.218 ms/op
                 executeQuery·p0.99:   13388.218 ms/op
                 executeQuery·p0.999:  13388.218 ms/op
                 executeQuery·p0.9999: 13388.218 ms/op
                 executeQuery·p1.00:   13388.218 ms/op


# Run progress: 31.55% complete, ETA 09:25:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[64];
long[] resultSum2Array = new long[64];
long[] resultSum3Array = new long[64];
long[] resultSum4Array = new long[64];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

11173.626 ms/op
# Warmup Iteration   2: 12784.239 ms/op
# Warmup Iteration   3: 12331.254 ms/op
# Warmup Iteration   4: 13690.208 ms/op
# Warmup Iteration   5: 12884.902 ms/op
Iteration   1: 12146.704 ms/op
                 executeQuery·p0.00:   12146.704 ms/op
                 executeQuery·p0.50:   12146.704 ms/op
                 executeQuery·p0.90:   12146.704 ms/op
                 executeQuery·p0.95:   12146.704 ms/op
                 executeQuery·p0.99:   12146.704 ms/op
                 executeQuery·p0.999:  12146.704 ms/op
                 executeQuery·p0.9999: 12146.704 ms/op
                 executeQuery·p1.00:   12146.704 ms/op

Iteration   2: 12180.259 ms/op
                 executeQuery·p0.00:   12180.259 ms/op
                 executeQuery·p0.50:   12180.259 ms/op
                 executeQuery·p0.90:   12180.259 ms/op
                 executeQuery·p0.95:   12180.259 ms/op
                 executeQuery·p0.99:   12180.259 ms/op
                 executeQuery·p0.999:  12180.259 ms/op
                 executeQuery·p0.9999: 12180.259 ms/op
                 executeQuery·p1.00:   12180.259 ms/op

Iteration   3: 12566.135 ms/op
                 executeQuery·p0.00:   12566.135 ms/op
                 executeQuery·p0.50:   12566.135 ms/op
                 executeQuery·p0.90:   12566.135 ms/op
                 executeQuery·p0.95:   12566.135 ms/op
                 executeQuery·p0.99:   12566.135 ms/op
                 executeQuery·p0.999:  12566.135 ms/op
                 executeQuery·p0.9999: 12566.135 ms/op
                 executeQuery·p1.00:   12566.135 ms/op

Iteration   4: 12230.590 ms/op
                 executeQuery·p0.00:   12230.590 ms/op
                 executeQuery·p0.50:   12230.590 ms/op
                 executeQuery·p0.90:   12230.590 ms/op
                 executeQuery·p0.95:   12230.590 ms/op
                 executeQuery·p0.99:   12230.590 ms/op
                 executeQuery·p0.999:  12230.590 ms/op
                 executeQuery·p0.9999: 12230.590 ms/op
                 executeQuery·p1.00:   12230.590 ms/op

Iteration   5: 12297.699 ms/op
                 executeQuery·p0.00:   12297.699 ms/op
                 executeQuery·p0.50:   12297.699 ms/op
                 executeQuery·p0.90:   12297.699 ms/op
                 executeQuery·p0.95:   12297.699 ms/op
                 executeQuery·p0.99:   12297.699 ms/op
                 executeQuery·p0.999:  12297.699 ms/op
                 executeQuery·p0.9999: 12297.699 ms/op
                 executeQuery·p1.00:   12297.699 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  12787.594 ±(99.9%) 823.198 ms/op

  Histogram, ms/op:
    [12000.000, 12125.000) = 0 
    [12125.000, 12250.000) = 3 
    [12250.000, 12375.000) = 1 
    [12375.000, 12500.000) = 0 
    [12500.000, 12625.000) = 1 
    [12625.000, 12750.000) = 0 
    [12750.000, 12875.000) = 0 
    [12875.000, 13000.000) = 0 
    [13000.000, 13125.000) = 0 
    [13125.000, 13250.000) = 2 
    [13250.000, 13375.000) = 2 
    [13375.000, 13500.000) = 1 
    [13500.000, 13625.000) = 0 
    [13625.000, 13750.000) = 0 
    [13750.000, 13875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  12146.704 ms/op
     p(50.0000) =  12893.290 ms/op
     p(90.0000) =  13384.863 ms/op
     p(95.0000) =  13388.218 ms/op
     p(99.0000) =  13388.218 ms/op
     p(99.9000) =  13388.218 ms/op
     p(99.9900) =  13388.218 ms/op
     p(99.9990) =  13388.218 ms/op
     p(99.9999) =  13388.218 ms/op
    p(100.0000) =  13388.218 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192)

# Run progress: 32.14% complete, ETA 09:14:39
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

16726.884 ms/op
# Warmup Iteration   2: 16458.449 ms/op
# Warmup Iteration   3: 13992.198 ms/op
# Warmup Iteration   4: 15300.821 ms/op
# Warmup Iteration   5: 14646.510 ms/op
Iteration   1: 14914.945 ms/op
                 executeQuery·p0.00:   14914.945 ms/op
                 executeQuery·p0.50:   14914.945 ms/op
                 executeQuery·p0.90:   14914.945 ms/op
                 executeQuery·p0.95:   14914.945 ms/op
                 executeQuery·p0.99:   14914.945 ms/op
                 executeQuery·p0.999:  14914.945 ms/op
                 executeQuery·p0.9999: 14914.945 ms/op
                 executeQuery·p1.00:   14914.945 ms/op

Iteration   2: 14948.499 ms/op
                 executeQuery·p0.00:   14948.499 ms/op
                 executeQuery·p0.50:   14948.499 ms/op
                 executeQuery·p0.90:   14948.499 ms/op
                 executeQuery·p0.95:   14948.499 ms/op
                 executeQuery·p0.99:   14948.499 ms/op
                 executeQuery·p0.999:  14948.499 ms/op
                 executeQuery·p0.9999: 14948.499 ms/op
                 executeQuery·p1.00:   14948.499 ms/op

Iteration   3: 14495.515 ms/op
                 executeQuery·p0.00:   14495.515 ms/op
                 executeQuery·p0.50:   14495.515 ms/op
                 executeQuery·p0.90:   14495.515 ms/op
                 executeQuery·p0.95:   14495.515 ms/op
                 executeQuery·p0.99:   14495.515 ms/op
                 executeQuery·p0.999:  14495.515 ms/op
                 executeQuery·p0.9999: 14495.515 ms/op
                 executeQuery·p1.00:   14495.515 ms/op

Iteration   4: 14428.406 ms/op
                 executeQuery·p0.00:   14428.406 ms/op
                 executeQuery·p0.50:   14428.406 ms/op
                 executeQuery·p0.90:   14428.406 ms/op
                 executeQuery·p0.95:   14428.406 ms/op
                 executeQuery·p0.99:   14428.406 ms/op
                 executeQuery·p0.999:  14428.406 ms/op
                 executeQuery·p0.9999: 14428.406 ms/op
                 executeQuery·p1.00:   14428.406 ms/op

Iteration   5: 14512.292 ms/op
                 executeQuery·p0.00:   14512.292 ms/op
                 executeQuery·p0.50:   14512.292 ms/op
                 executeQuery·p0.90:   14512.292 ms/op
                 executeQuery·p0.95:   14512.292 ms/op
                 executeQuery·p0.99:   14512.292 ms/op
                 executeQuery·p0.999:  14512.292 ms/op
                 executeQuery·p0.9999: 14512.292 ms/op
                 executeQuery·p1.00:   14512.292 ms/op


# Run progress: 32.74% complete, ETA 09:05:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[32768];
long[] resultSum2Array = new long[32768];
long[] resultSum3Array = new long[32768];
long[] resultSum4Array = new long[32768];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_959767503 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_959767503() {
        this(4);
    }
    public KeyValueMap_959767503(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_959767503 aggregation_state_map = new KeyValueMap_959767503();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

15200.158 ms/op
# Warmup Iteration   2: 16374.563 ms/op
# Warmup Iteration   3: 14143.193 ms/op
# Warmup Iteration   4: 14277.411 ms/op
# Warmup Iteration   5: 14126.416 ms/op
Iteration   1: 14092.861 ms/op
                 executeQuery·p0.00:   14092.861 ms/op
                 executeQuery·p0.50:   14092.861 ms/op
                 executeQuery·p0.90:   14092.861 ms/op
                 executeQuery·p0.95:   14092.861 ms/op
                 executeQuery·p0.99:   14092.861 ms/op
                 executeQuery·p0.999:  14092.861 ms/op
                 executeQuery·p0.9999: 14092.861 ms/op
                 executeQuery·p1.00:   14092.861 ms/op

Iteration   2: 14092.861 ms/op
                 executeQuery·p0.00:   14092.861 ms/op
                 executeQuery·p0.50:   14092.861 ms/op
                 executeQuery·p0.90:   14092.861 ms/op
                 executeQuery·p0.95:   14092.861 ms/op
                 executeQuery·p0.99:   14092.861 ms/op
                 executeQuery·p0.999:  14092.861 ms/op
                 executeQuery·p0.9999: 14092.861 ms/op
                 executeQuery·p1.00:   14092.861 ms/op

Iteration   3: 13186.892 ms/op
                 executeQuery·p0.00:   13186.892 ms/op
                 executeQuery·p0.50:   13186.892 ms/op
                 executeQuery·p0.90:   13186.892 ms/op
                 executeQuery·p0.95:   13186.892 ms/op
                 executeQuery·p0.99:   13186.892 ms/op
                 executeQuery·p0.999:  13186.892 ms/op
                 executeQuery·p0.9999: 13186.892 ms/op
                 executeQuery·p1.00:   13186.892 ms/op

Iteration   4: 13639.877 ms/op
                 executeQuery·p0.00:   13639.877 ms/op
                 executeQuery·p0.50:   13639.877 ms/op
                 executeQuery·p0.90:   13639.877 ms/op
                 executeQuery·p0.95:   13639.877 ms/op
                 executeQuery·p0.99:   13639.877 ms/op
                 executeQuery·p0.999:  13639.877 ms/op
                 executeQuery·p0.9999: 13639.877 ms/op
                 executeQuery·p1.00:   13639.877 ms/op

Iteration   5: 14864.613 ms/op
                 executeQuery·p0.00:   14864.613 ms/op
                 executeQuery·p0.50:   14864.613 ms/op
                 executeQuery·p0.90:   14864.613 ms/op
                 executeQuery·p0.95:   14864.613 ms/op
                 executeQuery·p0.99:   14864.613 ms/op
                 executeQuery·p0.999:  14864.613 ms/op
                 executeQuery·p0.9999: 14864.613 ms/op
                 executeQuery·p1.00:   14864.613 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  14317.676 ±(99.9%) 869.189 ms/op

  Histogram, ms/op:
    [13000.000, 13125.000) = 0 
    [13125.000, 13250.000) = 1 
    [13250.000, 13375.000) = 0 
    [13375.000, 13500.000) = 0 
    [13500.000, 13625.000) = 0 
    [13625.000, 13750.000) = 1 
    [13750.000, 13875.000) = 0 
    [13875.000, 14000.000) = 0 
    [14000.000, 14125.000) = 2 
    [14125.000, 14250.000) = 0 
    [14250.000, 14375.000) = 0 
    [14375.000, 14500.000) = 2 
    [14500.000, 14625.000) = 1 
    [14625.000, 14750.000) = 0 
    [14750.000, 14875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  13186.892 ms/op
     p(50.0000) =  14461.960 ms/op
     p(90.0000) =  14945.144 ms/op
     p(95.0000) =  14948.499 ms/op
     p(99.0000) =  14948.499 ms/op
     p(99.9000) =  14948.499 ms/op
     p(99.9900) =  14948.499 ms/op
     p(99.9990) =  14948.499 ms/op
     p(99.9999) =  14948.499 ms/op
    p(100.0000) =  14948.499 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144)

# Run progress: 33.33% complete, ETA 08:55:24
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

60062.433 ms/op
# Warmup Iteration   2: 58384.712 ms/op
# Warmup Iteration   3: 51875.152 ms/op
# Warmup Iteration   4: 60397.978 ms/op
# Warmup Iteration   5: 50063.213 ms/op
Iteration   1: 49861.886 ms/op
                 executeQuery·p0.00:   49861.886 ms/op
                 executeQuery·p0.50:   49861.886 ms/op
                 executeQuery·p0.90:   49861.886 ms/op
                 executeQuery·p0.95:   49861.886 ms/op
                 executeQuery·p0.99:   49861.886 ms/op
                 executeQuery·p0.999:  49861.886 ms/op
                 executeQuery·p0.9999: 49861.886 ms/op
                 executeQuery·p1.00:   49861.886 ms/op

Iteration   2: 51942.261 ms/op
                 executeQuery·p0.00:   51942.261 ms/op
                 executeQuery·p0.50:   51942.261 ms/op
                 executeQuery·p0.90:   51942.261 ms/op
                 executeQuery·p0.95:   51942.261 ms/op
                 executeQuery·p0.99:   51942.261 ms/op
                 executeQuery·p0.999:  51942.261 ms/op
                 executeQuery·p0.9999: 51942.261 ms/op
                 executeQuery·p1.00:   51942.261 ms/op

Iteration   3: 51606.716 ms/op
                 executeQuery·p0.00:   51606.716 ms/op
                 executeQuery·p0.50:   51606.716 ms/op
                 executeQuery·p0.90:   51606.716 ms/op
                 executeQuery·p0.95:   51606.716 ms/op
                 executeQuery·p0.99:   51606.716 ms/op
                 executeQuery·p0.999:  51606.716 ms/op
                 executeQuery·p0.9999: 51606.716 ms/op
                 executeQuery·p1.00:   51606.716 ms/op

Iteration   4: 51539.608 ms/op
                 executeQuery·p0.00:   51539.608 ms/op
                 executeQuery·p0.50:   51539.608 ms/op
                 executeQuery·p0.90:   51539.608 ms/op
                 executeQuery·p0.95:   51539.608 ms/op
                 executeQuery·p0.99:   51539.608 ms/op
                 executeQuery·p0.999:  51539.608 ms/op
                 executeQuery·p0.9999: 51539.608 ms/op
                 executeQuery·p1.00:   51539.608 ms/op

Iteration   5: 49727.668 ms/op
                 executeQuery·p0.00:   49727.668 ms/op
                 executeQuery·p0.50:   49727.668 ms/op
                 executeQuery·p0.90:   49727.668 ms/op
                 executeQuery·p0.95:   49727.668 ms/op
                 executeQuery·p0.99:   49727.668 ms/op
                 executeQuery·p0.999:  49727.668 ms/op
                 executeQuery·p0.9999: 49727.668 ms/op
                 executeQuery·p1.00:   49727.668 ms/op


# Run progress: 33.93% complete, ETA 09:02:09
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[1048576];
long[] resultSum2Array = new long[1048576];
long[] resultSum3Array = new long[1048576];
long[] resultSum4Array = new long[1048576];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

52948.894 ms/op
# Warmup Iteration   2: 50331.648 ms/op
# Warmup Iteration   3: 47513.076 ms/op
# Warmup Iteration   4: 51539.608 ms/op
# Warmup Iteration   5: 49928.995 ms/op
Iteration   1: 50935.628 ms/op
                 executeQuery·p0.00:   50935.628 ms/op
                 executeQuery·p0.50:   50935.628 ms/op
                 executeQuery·p0.90:   50935.628 ms/op
                 executeQuery·p0.95:   50935.628 ms/op
                 executeQuery·p0.99:   50935.628 ms/op
                 executeQuery·p0.999:  50935.628 ms/op
                 executeQuery·p0.9999: 50935.628 ms/op
                 executeQuery·p1.00:   50935.628 ms/op

Iteration   2: 50801.410 ms/op
                 executeQuery·p0.00:   50801.410 ms/op
                 executeQuery·p0.50:   50801.410 ms/op
                 executeQuery·p0.90:   50801.410 ms/op
                 executeQuery·p0.95:   50801.410 ms/op
                 executeQuery·p0.99:   50801.410 ms/op
                 executeQuery·p0.999:  50801.410 ms/op
                 executeQuery·p0.9999: 50801.410 ms/op
                 executeQuery·p1.00:   50801.410 ms/op

Iteration   3: 51069.846 ms/op
                 executeQuery·p0.00:   51069.846 ms/op
                 executeQuery·p0.50:   51069.846 ms/op
                 executeQuery·p0.90:   51069.846 ms/op
                 executeQuery·p0.95:   51069.846 ms/op
                 executeQuery·p0.99:   51069.846 ms/op
                 executeQuery·p0.999:  51069.846 ms/op
                 executeQuery·p0.9999: 51069.846 ms/op
                 executeQuery·p1.00:   51069.846 ms/op

Iteration   4: 49593.450 ms/op
                 executeQuery·p0.00:   49593.450 ms/op
                 executeQuery·p0.50:   49593.450 ms/op
                 executeQuery·p0.90:   49593.450 ms/op
                 executeQuery·p0.95:   49593.450 ms/op
                 executeQuery·p0.99:   49593.450 ms/op
                 executeQuery·p0.999:  49593.450 ms/op
                 executeQuery·p0.9999: 49593.450 ms/op
                 executeQuery·p1.00:   49593.450 ms/op

Iteration   5: 47110.423 ms/op
                 executeQuery·p0.00:   47110.423 ms/op
                 executeQuery·p0.50:   47110.423 ms/op
                 executeQuery·p0.90:   47110.423 ms/op
                 executeQuery·p0.95:   47110.423 ms/op
                 executeQuery·p0.99:   47110.423 ms/op
                 executeQuery·p0.999:  47110.423 ms/op
                 executeQuery·p0.9999: 47110.423 ms/op
                 executeQuery·p1.00:   47110.423 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  50418.890 ±(99.9%) 2152.298 ms/op

  Histogram, ms/op:
    [47000.000, 47500.000) = 1 
    [47500.000, 48000.000) = 0 
    [48000.000, 48500.000) = 0 
    [48500.000, 49000.000) = 0 
    [49000.000, 49500.000) = 0 
    [49500.000, 50000.000) = 3 
    [50000.000, 50500.000) = 0 
    [50500.000, 51000.000) = 2 
    [51000.000, 51500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  47110.423 ms/op
     p(50.0000) =  50868.519 ms/op
     p(90.0000) =  51908.706 ms/op
     p(95.0000) =  51942.261 ms/op
     p(99.0000) =  51942.261 ms/op
     p(99.9000) =  51942.261 ms/op
     p(99.9900) =  51942.261 ms/op
     p(99.9990) =  51942.261 ms/op
     p(99.9999) =  51942.261 ms/op
    p(100.0000) =  51942.261 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.aggregation_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288)

# Run progress: 34.52% complete, ETA 09:07:07
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

113682.416 ms/op
# Warmup Iteration   2: 108179.489 ms/op
# Warmup Iteration   3: 101468.602 ms/op
# Warmup Iteration   4: 103884.521 ms/op
# Warmup Iteration   5: 103079.215 ms/op
Iteration   1: 103213.433 ms/op
                 executeQuery·p0.00:   103213.433 ms/op
                 executeQuery·p0.50:   103213.433 ms/op
                 executeQuery·p0.90:   103213.433 ms/op
                 executeQuery·p0.95:   103213.433 ms/op
                 executeQuery·p0.99:   103213.433 ms/op
                 executeQuery·p0.999:  103213.433 ms/op
                 executeQuery·p0.9999: 103213.433 ms/op
                 executeQuery·p1.00:   103213.433 ms/op

Iteration   2: 103347.651 ms/op
                 executeQuery·p0.00:   103347.651 ms/op
                 executeQuery·p0.50:   103347.651 ms/op
                 executeQuery·p0.90:   103347.651 ms/op
                 executeQuery·p0.95:   103347.651 ms/op
                 executeQuery·p0.99:   103347.651 ms/op
                 executeQuery·p0.999:  103347.651 ms/op
                 executeQuery·p0.9999: 103347.651 ms/op
                 executeQuery·p1.00:   103347.651 ms/op

Iteration   3: 102944.997 ms/op
                 executeQuery·p0.00:   102944.997 ms/op
                 executeQuery·p0.50:   102944.997 ms/op
                 executeQuery·p0.90:   102944.997 ms/op
                 executeQuery·p0.95:   102944.997 ms/op
                 executeQuery·p0.99:   102944.997 ms/op
                 executeQuery·p0.999:  102944.997 ms/op
                 executeQuery·p0.9999: 102944.997 ms/op
                 executeQuery·p1.00:   102944.997 ms/op

Iteration   4: 103616.086 ms/op
                 executeQuery·p0.00:   103616.086 ms/op
                 executeQuery·p0.50:   103616.086 ms/op
                 executeQuery·p0.90:   103616.086 ms/op
                 executeQuery·p0.95:   103616.086 ms/op
                 executeQuery·p0.99:   103616.086 ms/op
                 executeQuery·p0.999:  103616.086 ms/op
                 executeQuery·p0.9999: 103616.086 ms/op
                 executeQuery·p1.00:   103616.086 ms/op

Iteration   5: 103616.086 ms/op
                 executeQuery·p0.00:   103616.086 ms/op
                 executeQuery·p0.50:   103616.086 ms/op
                 executeQuery·p0.90:   103616.086 ms/op
                 executeQuery·p0.95:   103616.086 ms/op
                 executeQuery·p0.99:   103616.086 ms/op
                 executeQuery·p0.999:  103616.086 ms/op
                 executeQuery·p0.9999: 103616.086 ms/op
                 executeQuery·p1.00:   103616.086 ms/op


# Run progress: 35.12% complete, ETA 09:38:14
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2, 3]
Finished query code generation!

[Generated query code]
int[] resultKeyArray = new int[2097152];
long[] resultSum2Array = new long[2097152];
long[] resultSum3Array = new long[2097152];
long[] resultSum4Array = new long[2097152];
int resultWritePtr = 0;
long[] groupKeyPreHashVector = cCtx.getAllocationManager().getLongVector();
private final class KeyValueMap_841153704 {
    public int numberOfRecords;
    public int[] keys_ord_0;
    public long[] values_ord_0;
    public long[] values_ord_1;
    public long[] values_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyValueMap_841153704() {
        this(4);
    }
    public KeyValueMap_841153704(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys_ord_0 = new int[capacity];
        Arrays.fill(this.keys_ord_0, -1);
        this.values_ord_0 = new long[capacity];
        this.values_ord_1 = new long[capacity];
        this.values_ord_2 = new long[capacity];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void incrementForKey(int key_ord_0, long preHash, long value_ord_0, long value_ord_1, long value_ord_2) {
        if ((key_ord_0 < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects the first key ordinal to be non-negative");
        }
        int index = this.find(key_ord_0, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys_ord_0.length == index)) {
                this.growArrays();
            }
            this.keys_ord_0[index] = key_ord_0;
        }
        this.values_ord_0[index] += value_ord_0;
        this.values_ord_1[index] += value_ord_1;
        this.values_ord_2[index] += value_ord_2;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key_ord_0, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key_ord_0, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys_ord_0[currentIndex] != key_ord_0)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys_ord_0.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] keys_ord_0_new = new int[newSize];
        System.arraycopy(this.keys_ord_0, 0, keys_ord_0_new, 0, currentSize);
        Arrays.fill(keys_ord_0_new, currentSize, newSize, -1);
        this.keys_ord_0 = keys_ord_0_new;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        long[] new_values_ord_0 = new long[newSize];
        System.arraycopy(this.values_ord_0, 0, new_values_ord_0, 0, currentSize);
        this.values_ord_0 = new_values_ord_0;
        long[] new_values_ord_1 = new long[newSize];
        System.arraycopy(this.values_ord_1, 0, new_values_ord_1, 0, currentSize);
        this.values_ord_1 = new_values_ord_1;
        long[] new_values_ord_2 = new long[newSize];
        System.arraycopy(this.values_ord_2, 0, new_values_ord_2, 0, currentSize);
        this.values_ord_2 = new_values_ord_2;
    }
    private void putHashEntry(int key_ord_0, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys_ord_0[currentIndex] != key_ord_0) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key_ord_0 = this.keys_ord_0[i];
            long preHash = Int_Hash_Function.preHash(key_ord_0);
            this.putHashEntry(key_ord_0, preHash, i, false);
        }
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys_ord_0, -1);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        Arrays.fill(this.values_ord_0, 0);
        Arrays.fill(this.values_ord_1, 0);
        Arrays.fill(this.values_ord_2, 0);
    }
}

KeyValueMap_841153704 aggregation_state_map = new KeyValueMap_841153704();
ArrowTableReader aggregation_query_table = cCtx.getArrowReader(0);
while (aggregation_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(0));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(1));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(2));
    org.apache.arrow.vector.IntVector aggregation_query_table_vc_3 = ((org.apache.arrow.vector.IntVector) aggregation_query_table.getVector(3));
    VectorisedHashOperators.constructPreHashKeyVector(groupKeyPreHashVector, aggregation_query_table_vc_0, false);
    int recordCount = aggregation_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        aggregation_state_map.incrementForKey(aggregation_query_table_vc_0.get(aviv), groupKeyPreHashVector[aviv], aggregation_query_table_vc_1.get(aviv), aggregation_query_table_vc_2.get(aviv), aggregation_query_table_vc_3.get(aviv));
    }
}
int aggregationResultVectorLength;
int[] groupKeyVector_0 = cCtx.getAllocationManager().getIntVector();
long[] agg_G_SUM_0_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_1_vector = cCtx.getAllocationManager().getLongVector();
long[] agg_G_SUM_2_vector = cCtx.getAllocationManager().getLongVector();
int current_key_offset = 0;
int number_of_records = aggregation_state_map.numberOfRecords;
while ((current_key_offset < number_of_records)) {
    aggregationResultVectorLength = VectorisedAggregationOperators.constructVector(groupKeyVector_0, aggregation_state_map.keys_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_0_vector, aggregation_state_map.values_ord_0, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_1_vector, aggregation_state_map.values_ord_1, number_of_records, current_key_offset);
    VectorisedAggregationOperators.constructVector(agg_G_SUM_2_vector, aggregation_state_map.values_ord_2, number_of_records, current_key_offset);
    current_key_offset += aggregationResultVectorLength;
    System.arraycopy(groupKeyVector_0, 0, resultKeyArray, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_0_vector, 0, resultSum2Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_1_vector, 0, resultSum3Array, resultWritePtr, aggregationResultVectorLength);
    System.arraycopy(agg_G_SUM_2_vector, 0, resultSum4Array, resultWritePtr, aggregationResultVectorLength);
    resultWritePtr += aggregationResultVectorLength;
}
cCtx.getAllocationManager().release(groupKeyVector_0);
cCtx.getAllocationManager().release(agg_G_SUM_0_vector);
cCtx.getAllocationManager().release(agg_G_SUM_1_vector);
cCtx.getAllocationManager().release(agg_G_SUM_2_vector);
cCtx.getAllocationManager().release(groupKeyPreHashVector);
cCtx.getResultConsumptionTarget().consumeResultItem(resultKeyArray);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum2Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum3Array);
cCtx.getResultConsumptionTarget().consumeResultItem(resultSum4Array);

100529.078 ms/op
# Warmup Iteration   2: 106837.311 ms/op
# Warmup Iteration   3: 100797.514 ms/op
# Warmup Iteration   4: 103079.215 ms/op
# Warmup Iteration   5: 102005.473 ms/op
Iteration   1: 100529.078 ms/op
                 executeQuery·p0.00:   100529.078 ms/op
                 executeQuery·p0.50:   100529.078 ms/op
                 executeQuery·p0.90:   100529.078 ms/op
                 executeQuery·p0.95:   100529.078 ms/op
                 executeQuery·p0.99:   100529.078 ms/op
                 executeQuery·p0.999:  100529.078 ms/op
                 executeQuery·p0.9999: 100529.078 ms/op
                 executeQuery·p1.00:   100529.078 ms/op

Iteration   2: 101468.602 ms/op
                 executeQuery·p0.00:   101468.602 ms/op
                 executeQuery·p0.50:   101468.602 ms/op
                 executeQuery·p0.90:   101468.602 ms/op
                 executeQuery·p0.95:   101468.602 ms/op
                 executeQuery·p0.99:   101468.602 ms/op
                 executeQuery·p0.999:  101468.602 ms/op
                 executeQuery·p0.9999: 101468.602 ms/op
                 executeQuery·p1.00:   101468.602 ms/op

Iteration   3: 106971.529 ms/op
                 executeQuery·p0.00:   106971.529 ms/op
                 executeQuery·p0.50:   106971.529 ms/op
                 executeQuery·p0.90:   106971.529 ms/op
                 executeQuery·p0.95:   106971.529 ms/op
                 executeQuery·p0.99:   106971.529 ms/op
                 executeQuery·p0.999:  106971.529 ms/op
                 executeQuery·p0.9999: 106971.529 ms/op
                 executeQuery·p1.00:   106971.529 ms/op

Iteration   4: 99723.772 ms/op
                 executeQuery·p0.00:   99723.772 ms/op
                 executeQuery·p0.50:   99723.772 ms/op
                 executeQuery·p0.90:   99723.772 ms/op
                 executeQuery·p0.95:   99723.772 ms/op
                 executeQuery·p0.99:   99723.772 ms/op
                 executeQuery·p0.999:  99723.772 ms/op
                 executeQuery·p0.9999: 99723.772 ms/op
                 executeQuery·p1.00:   99723.772 ms/op

Iteration   5: 99723.772 ms/op
                 executeQuery·p0.00:   99723.772 ms/op
                 executeQuery·p0.50:   99723.772 ms/op
                 executeQuery·p0.90:   99723.772 ms/op
                 executeQuery·p0.95:   99723.772 ms/op
                 executeQuery·p0.99:   99723.772 ms/op
                 executeQuery·p0.999:  99723.772 ms/op
                 executeQuery·p0.9999: 99723.772 ms/op
                 executeQuery·p1.00:   99723.772 ms/op



Result "benchmarks.aggregation_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean = 102515.501 ±(99.9%) 3353.166 ms/op

  Histogram, ms/op:
    [ 99000.000,  99500.000) = 0 
    [ 99500.000, 100000.000) = 2 
    [100000.000, 100500.000) = 0 
    [100500.000, 101000.000) = 1 
    [101000.000, 101500.000) = 1 
    [101500.000, 102000.000) = 0 
    [102000.000, 102500.000) = 0 
    [102500.000, 103000.000) = 1 
    [103000.000, 103500.000) = 2 
    [103500.000, 104000.000) = 2 
    [104000.000, 104500.000) = 0 
    [104500.000, 105000.000) = 0 
    [105000.000, 105500.000) = 0 
    [105500.000, 106000.000) = 0 
    [106000.000, 106500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  99723.772 ms/op
     p(50.0000) = 103079.215 ms/op
     p(90.0000) = 106635.985 ms/op
     p(95.0000) = 106971.529 ms/op
     p(99.0000) = 106971.529 ms/op
     p(99.9000) = 106971.529 ms/op
     p(99.9900) = 106971.529 ms/op
     p(99.9990) = 106971.529 ms/op
     p(99.9999) = 106971.529 ms/op
    p(100.0000) = 106971.529 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 35.71% complete, ETA 10:06:45
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

82.918 ±(99.9%) 17.494 ms/op
# Warmup Iteration   2: 75.605 ±(99.9%) 0.492 ms/op
# Warmup Iteration   3: 76.396 ±(99.9%) 0.560 ms/op
# Warmup Iteration   4: 77.287 ±(99.9%) 0.318 ms/op
# Warmup Iteration   5: 76.800 ±(99.9%) 0.279 ms/op
Iteration   1: 77.775 ±(99.9%) 0.484 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   77.791 ms/op
                 executeFilterQuery·p0.90:   78.814 ms/op
                 executeFilterQuery·p0.95:   79.692 ms/op
                 executeFilterQuery·p0.99:   87.906 ms/op
                 executeFilterQuery·p0.999:  90.702 ms/op
                 executeFilterQuery·p0.9999: 90.702 ms/op
                 executeFilterQuery·p1.00:   90.702 ms/op

Iteration   2: 75.640 ±(99.9%) 0.512 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   75.629 ms/op
                 executeFilterQuery·p0.90:   77.949 ms/op
                 executeFilterQuery·p0.95:   78.650 ms/op
                 executeFilterQuery·p0.99:   79.605 ms/op
                 executeFilterQuery·p0.999:  79.692 ms/op
                 executeFilterQuery·p0.9999: 79.692 ms/op
                 executeFilterQuery·p1.00:   79.692 ms/op

Iteration   3: 78.281 ±(99.9%) 0.333 ms/op
                 executeFilterQuery·p0.00:   74.187 ms/op
                 executeFilterQuery·p0.50:   78.381 ms/op
                 executeFilterQuery·p0.90:   79.692 ms/op
                 executeFilterQuery·p0.95:   79.823 ms/op
                 executeFilterQuery·p0.99:   80.085 ms/op
                 executeFilterQuery·p0.999:  80.085 ms/op
                 executeFilterQuery·p0.9999: 80.085 ms/op
                 executeFilterQuery·p1.00:   80.085 ms/op

Iteration   4: 77.531 ±(99.9%) 0.326 ms/op
                 executeFilterQuery·p0.00:   74.318 ms/op
                 executeFilterQuery·p0.50:   77.332 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   79.299 ms/op
                 executeFilterQuery·p0.99:   80.923 ms/op
                 executeFilterQuery·p0.999:  81.265 ms/op
                 executeFilterQuery·p0.9999: 81.265 ms/op
                 executeFilterQuery·p1.00:   81.265 ms/op

Iteration   5: 77.205 ±(99.9%) 0.512 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   77.332 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   79.299 ms/op
                 executeFilterQuery·p0.99:   84.188 ms/op
                 executeFilterQuery·p0.999:  86.114 ms/op
                 executeFilterQuery·p0.9999: 86.114 ms/op
                 executeFilterQuery·p1.00:   86.114 ms/op


# Run progress: 36.31% complete, ETA 09:54:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

78.810 ±(99.9%) 2.766 ms/op
# Warmup Iteration   2: 75.780 ±(99.9%) 0.492 ms/op
# Warmup Iteration   3: 76.489 ±(99.9%) 0.526 ms/op
# Warmup Iteration   4: 78.635 ±(99.9%) 0.306 ms/op
# Warmup Iteration   5: 78.742 ±(99.9%) 0.327 ms/op
Iteration   1: 78.440 ±(99.9%) 0.268 ms/op
                 executeFilterQuery·p0.00:   76.808 ms/op
                 executeFilterQuery·p0.50:   78.119 ms/op
                 executeFilterQuery·p0.90:   79.692 ms/op
                 executeFilterQuery·p0.95:   79.954 ms/op
                 executeFilterQuery·p0.99:   80.803 ms/op
                 executeFilterQuery·p0.999:  80.871 ms/op
                 executeFilterQuery·p0.9999: 80.871 ms/op
                 executeFilterQuery·p1.00:   80.871 ms/op

Iteration   2: 78.380 ±(99.9%) 0.310 ms/op
                 executeFilterQuery·p0.00:   76.677 ms/op
                 executeFilterQuery·p0.50:   78.119 ms/op
                 executeFilterQuery·p0.90:   79.823 ms/op
                 executeFilterQuery·p0.95:   80.478 ms/op
                 executeFilterQuery·p0.99:   80.837 ms/op
                 executeFilterQuery·p0.999:  80.871 ms/op
                 executeFilterQuery·p0.9999: 80.871 ms/op
                 executeFilterQuery·p1.00:   80.871 ms/op

Iteration   3: 76.027 ±(99.9%) 0.642 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   75.366 ms/op
                 executeFilterQuery·p0.90:   78.879 ms/op
                 executeFilterQuery·p0.95:   79.561 ms/op
                 executeFilterQuery·p0.99:   86.764 ms/op
                 executeFilterQuery·p0.999:  89.784 ms/op
                 executeFilterQuery·p0.9999: 89.784 ms/op
                 executeFilterQuery·p1.00:   89.784 ms/op

Iteration   4: 75.320 ±(99.9%) 0.382 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   75.104 ms/op
                 executeFilterQuery·p0.90:   77.070 ms/op
                 executeFilterQuery·p0.95:   77.509 ms/op
                 executeFilterQuery·p0.99:   79.388 ms/op
                 executeFilterQuery·p0.999:  79.561 ms/op
                 executeFilterQuery·p0.9999: 79.561 ms/op
                 executeFilterQuery·p1.00:   79.561 ms/op

Iteration   5: 75.903 ±(99.9%) 0.314 ms/op
                 executeFilterQuery·p0.00:   73.925 ms/op
                 executeFilterQuery·p0.50:   75.760 ms/op
                 executeFilterQuery·p0.90:   77.332 ms/op
                 executeFilterQuery·p0.95:   77.595 ms/op
                 executeFilterQuery·p0.99:   79.972 ms/op
                 executeFilterQuery·p0.999:  80.216 ms/op
                 executeFilterQuery·p0.9999: 80.216 ms/op
                 executeFilterQuery·p1.00:   80.216 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1285
  mean =     77.028 ±(99.9%) 0.169 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 231 
    [ 75.000,  77.500) = 508 
    [ 77.500,  80.000) = 521 
    [ 80.000,  82.500) = 22 
    [ 82.500,  85.000) = 0 
    [ 85.000,  87.500) = 1 
    [ 87.500,  90.000) = 1 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     73.138 ms/op
     p(50.0000) =     77.201 ms/op
     p(90.0000) =     79.299 ms/op
     p(95.0000) =     79.692 ms/op
     p(99.0000) =     80.478 ms/op
     p(99.9000) =     90.439 ms/op
     p(99.9900) =     90.702 ms/op
     p(99.9990) =     90.702 ms/op
     p(99.9999) =     90.702 ms/op
    p(100.0000) =     90.702 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 36.90% complete, ETA 09:42:08
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

84.077 ±(99.9%) 17.368 ms/op
# Warmup Iteration   2: 75.986 ±(99.9%) 0.514 ms/op
# Warmup Iteration   3: 76.569 ±(99.9%) 0.616 ms/op
# Warmup Iteration   4: 78.062 ±(99.9%) 0.294 ms/op
# Warmup Iteration   5: 78.050 ±(99.9%) 0.287 ms/op
Iteration   1: 77.964 ±(99.9%) 0.427 ms/op
                 executeFilterQuery·p0.00:   75.235 ms/op
                 executeFilterQuery·p0.50:   77.857 ms/op
                 executeFilterQuery·p0.90:   79.338 ms/op
                 executeFilterQuery·p0.95:   79.862 ms/op
                 executeFilterQuery·p0.99:   86.818 ms/op
                 executeFilterQuery·p0.999:  89.260 ms/op
                 executeFilterQuery·p0.9999: 89.260 ms/op
                 executeFilterQuery·p1.00:   89.260 ms/op

Iteration   2: 76.624 ±(99.9%) 0.567 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   76.218 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   79.692 ms/op
                 executeFilterQuery·p0.99:   80.225 ms/op
                 executeFilterQuery·p0.999:  80.347 ms/op
                 executeFilterQuery·p0.9999: 80.347 ms/op
                 executeFilterQuery·p1.00:   80.347 ms/op

Iteration   3: 78.561 ±(99.9%) 0.298 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   78.774 ms/op
                 executeFilterQuery·p0.90:   79.692 ms/op
                 executeFilterQuery·p0.95:   79.954 ms/op
                 executeFilterQuery·p0.99:   80.405 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op

Iteration   4: 78.300 ±(99.9%) 0.331 ms/op
                 executeFilterQuery·p0.00:   74.842 ms/op
                 executeFilterQuery·p0.50:   77.988 ms/op
                 executeFilterQuery·p0.90:   79.718 ms/op
                 executeFilterQuery·p0.95:   79.954 ms/op
                 executeFilterQuery·p0.99:   80.499 ms/op
                 executeFilterQuery·p0.999:  80.609 ms/op
                 executeFilterQuery·p0.9999: 80.609 ms/op
                 executeFilterQuery·p1.00:   80.609 ms/op

Iteration   5: 78.201 ±(99.9%) 0.551 ms/op
                 executeFilterQuery·p0.00:   74.580 ms/op
                 executeFilterQuery·p0.50:   78.119 ms/op
                 executeFilterQuery·p0.90:   79.980 ms/op
                 executeFilterQuery·p0.95:   80.347 ms/op
                 executeFilterQuery·p0.99:   86.633 ms/op
                 executeFilterQuery·p0.999:  88.211 ms/op
                 executeFilterQuery·p0.9999: 88.211 ms/op
                 executeFilterQuery·p1.00:   88.211 ms/op


# Run progress: 37.50% complete, ETA 09:30:20
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

79.404 ±(99.9%) 2.872 ms/op
# Warmup Iteration   2: 76.860 ±(99.9%) 0.554 ms/op
# Warmup Iteration   3: 77.703 ±(99.9%) 0.550 ms/op
# Warmup Iteration   4: 78.827 ±(99.9%) 0.288 ms/op
# Warmup Iteration   5: 78.548 ±(99.9%) 0.313 ms/op
Iteration   1: 78.345 ±(99.9%) 0.432 ms/op
                 executeFilterQuery·p0.00:   73.794 ms/op
                 executeFilterQuery·p0.50:   78.250 ms/op
                 executeFilterQuery·p0.90:   79.823 ms/op
                 executeFilterQuery·p0.95:   80.563 ms/op
                 executeFilterQuery·p0.99:   86.456 ms/op
                 executeFilterQuery·p0.999:  88.474 ms/op
                 executeFilterQuery·p0.9999: 88.474 ms/op
                 executeFilterQuery·p1.00:   88.474 ms/op

Iteration   2: 75.366 ±(99.9%) 0.368 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   75.497 ms/op
                 executeFilterQuery·p0.90:   77.031 ms/op
                 executeFilterQuery·p0.95:   77.332 ms/op
                 executeFilterQuery·p0.99:   78.600 ms/op
                 executeFilterQuery·p0.999:  78.643 ms/op
                 executeFilterQuery·p0.9999: 78.643 ms/op
                 executeFilterQuery·p1.00:   78.643 ms/op

Iteration   3: 74.932 ±(99.9%) 0.356 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   74.711 ms/op
                 executeFilterQuery·p0.90:   76.284 ms/op
                 executeFilterQuery·p0.95:   76.861 ms/op
                 executeFilterQuery·p0.99:   79.036 ms/op
                 executeFilterQuery·p0.999:  79.036 ms/op
                 executeFilterQuery·p0.9999: 79.036 ms/op
                 executeFilterQuery·p1.00:   79.036 ms/op

Iteration   4: 74.738 ±(99.9%) 0.340 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   74.449 ms/op
                 executeFilterQuery·p0.90:   76.153 ms/op
                 executeFilterQuery·p0.95:   76.415 ms/op
                 executeFilterQuery·p0.99:   79.126 ms/op
                 executeFilterQuery·p0.999:  79.299 ms/op
                 executeFilterQuery·p0.9999: 79.299 ms/op
                 executeFilterQuery·p1.00:   79.299 ms/op

Iteration   5: 74.659 ±(99.9%) 0.457 ms/op
                 executeFilterQuery·p0.00:   73.138 ms/op
                 executeFilterQuery·p0.50:   74.318 ms/op
                 executeFilterQuery·p0.90:   76.245 ms/op
                 executeFilterQuery·p0.95:   76.723 ms/op
                 executeFilterQuery·p0.99:   84.396 ms/op
                 executeFilterQuery·p0.999:  87.294 ms/op
                 executeFilterQuery·p0.9999: 87.294 ms/op
                 executeFilterQuery·p1.00:   87.294 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1290
  mean =     76.739 ±(99.9%) 0.196 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 0 
    [71.250, 72.500) = 0 
    [72.500, 73.750) = 147 
    [73.750, 75.000) = 198 
    [75.000, 76.250) = 199 
    [76.250, 77.500) = 226 
    [77.500, 78.750) = 256 
    [78.750, 80.000) = 227 
    [80.000, 81.250) = 32 
    [81.250, 82.500) = 0 
    [82.500, 83.750) = 1 
    [83.750, 85.000) = 0 
    [85.000, 86.250) = 0 
    [86.250, 87.500) = 1 
    [87.500, 88.750) = 2 

  Percentiles, ms/op:
      p(0.0000) =     73.138 ms/op
     p(50.0000) =     76.808 ms/op
     p(90.0000) =     79.430 ms/op
     p(95.0000) =     79.823 ms/op
     p(99.0000) =     80.490 ms/op
     p(99.9000) =     89.031 ms/op
     p(99.9900) =     89.260 ms/op
     p(99.9990) =     89.260 ms/op
     p(99.9999) =     89.260 ms/op
    p(100.0000) =     89.260 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 38.10% complete, ETA 09:18:51
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

86.047 ±(99.9%) 18.168 ms/op
# Warmup Iteration   2: 77.599 ±(99.9%) 0.523 ms/op
# Warmup Iteration   3: 78.355 ±(99.9%) 0.590 ms/op
# Warmup Iteration   4: 79.924 ±(99.9%) 0.330 ms/op
# Warmup Iteration   5: 80.285 ±(99.9%) 0.325 ms/op
Iteration   1: 79.972 ±(99.9%) 0.351 ms/op
                 executeFilterQuery·p0.00:   77.857 ms/op
                 executeFilterQuery·p0.50:   79.823 ms/op
                 executeFilterQuery·p0.90:   81.605 ms/op
                 executeFilterQuery·p0.95:   82.156 ms/op
                 executeFilterQuery·p0.99:   82.806 ms/op
                 executeFilterQuery·p0.999:  82.838 ms/op
                 executeFilterQuery·p0.9999: 82.838 ms/op
                 executeFilterQuery·p1.00:   82.838 ms/op

Iteration   2: 77.474 ±(99.9%) 0.561 ms/op
                 executeFilterQuery·p0.00:   74.842 ms/op
                 executeFilterQuery·p0.50:   77.070 ms/op
                 executeFilterQuery·p0.90:   80.216 ms/op
                 executeFilterQuery·p0.95:   80.609 ms/op
                 executeFilterQuery·p0.99:   87.076 ms/op
                 executeFilterQuery·p0.999:  89.129 ms/op
                 executeFilterQuery·p0.9999: 89.129 ms/op
                 executeFilterQuery·p1.00:   89.129 ms/op

Iteration   3: 77.564 ±(99.9%) 0.468 ms/op
                 executeFilterQuery·p0.00:   74.187 ms/op
                 executeFilterQuery·p0.50:   77.332 ms/op
                 executeFilterQuery·p0.90:   79.574 ms/op
                 executeFilterQuery·p0.95:   80.229 ms/op
                 executeFilterQuery·p0.99:   80.740 ms/op
                 executeFilterQuery·p0.999:  80.740 ms/op
                 executeFilterQuery·p0.9999: 80.740 ms/op
                 executeFilterQuery·p1.00:   80.740 ms/op

Iteration   4: 77.048 ±(99.9%) 0.505 ms/op
                 executeFilterQuery·p0.00:   74.187 ms/op
                 executeFilterQuery·p0.50:   76.939 ms/op
                 executeFilterQuery·p0.90:   79.430 ms/op
                 executeFilterQuery·p0.95:   80.019 ms/op
                 executeFilterQuery·p0.99:   80.570 ms/op
                 executeFilterQuery·p0.999:  80.609 ms/op
                 executeFilterQuery·p0.9999: 80.609 ms/op
                 executeFilterQuery·p1.00:   80.609 ms/op

Iteration   5: 77.191 ±(99.9%) 0.537 ms/op
                 executeFilterQuery·p0.00:   74.187 ms/op
                 executeFilterQuery·p0.50:   76.939 ms/op
                 executeFilterQuery·p0.90:   79.167 ms/op
                 executeFilterQuery·p0.95:   79.954 ms/op
                 executeFilterQuery·p0.99:   85.131 ms/op
                 executeFilterQuery·p0.999:  86.508 ms/op
                 executeFilterQuery·p0.9999: 86.508 ms/op
                 executeFilterQuery·p1.00:   86.508 ms/op


# Run progress: 38.69% complete, ETA 09:07:40
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

79.592 ±(99.9%) 3.035 ms/op
# Warmup Iteration   2: 78.160 ±(99.9%) 0.603 ms/op
# Warmup Iteration   3: 78.043 ±(99.9%) 0.535 ms/op
# Warmup Iteration   4: 79.195 ±(99.9%) 0.666 ms/op
# Warmup Iteration   5: 79.049 ±(99.9%) 0.309 ms/op
Iteration   1: 78.882 ±(99.9%) 0.350 ms/op
                 executeFilterQuery·p0.00:   77.070 ms/op
                 executeFilterQuery·p0.50:   78.512 ms/op
                 executeFilterQuery·p0.90:   80.347 ms/op
                 executeFilterQuery·p0.95:   80.740 ms/op
                 executeFilterQuery·p0.99:   82.143 ms/op
                 executeFilterQuery·p0.999:  82.313 ms/op
                 executeFilterQuery·p0.9999: 82.313 ms/op
                 executeFilterQuery·p1.00:   82.313 ms/op

Iteration   2: 76.537 ±(99.9%) 0.511 ms/op
                 executeFilterQuery·p0.00:   74.187 ms/op
                 executeFilterQuery·p0.50:   76.546 ms/op
                 executeFilterQuery·p0.90:   77.726 ms/op
                 executeFilterQuery·p0.95:   78.964 ms/op
                 executeFilterQuery·p0.99:   87.601 ms/op
                 executeFilterQuery·p0.999:  91.095 ms/op
                 executeFilterQuery·p0.9999: 91.095 ms/op
                 executeFilterQuery·p1.00:   91.095 ms/op

Iteration   3: 78.853 ±(99.9%) 0.281 ms/op
                 executeFilterQuery·p0.00:   74.973 ms/op
                 executeFilterQuery·p0.50:   78.905 ms/op
                 executeFilterQuery·p0.90:   79.954 ms/op
                 executeFilterQuery·p0.95:   80.478 ms/op
                 executeFilterQuery·p0.99:   81.410 ms/op
                 executeFilterQuery·p0.999:  81.658 ms/op
                 executeFilterQuery·p0.9999: 81.658 ms/op
                 executeFilterQuery·p1.00:   81.658 ms/op

Iteration   4: 79.410 ±(99.9%) 0.199 ms/op
                 executeFilterQuery·p0.00:   77.726 ms/op
                 executeFilterQuery·p0.50:   79.561 ms/op
                 executeFilterQuery·p0.90:   80.085 ms/op
                 executeFilterQuery·p0.95:   80.347 ms/op
                 executeFilterQuery·p0.99:   80.705 ms/op
                 executeFilterQuery·p0.999:  80.740 ms/op
                 executeFilterQuery·p0.9999: 80.740 ms/op
                 executeFilterQuery·p1.00:   80.740 ms/op

Iteration   5: 78.305 ±(99.9%) 0.485 ms/op
                 executeFilterQuery·p0.00:   74.842 ms/op
                 executeFilterQuery·p0.50:   77.988 ms/op
                 executeFilterQuery·p0.90:   79.954 ms/op
                 executeFilterQuery·p0.95:   80.557 ms/op
                 executeFilterQuery·p0.99:   87.273 ms/op
                 executeFilterQuery·p0.999:  88.998 ms/op
                 executeFilterQuery·p0.9999: 88.998 ms/op
                 executeFilterQuery·p1.00:   88.998 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 1271
  mean =     78.107 ±(99.9%) 0.169 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 0 
    [ 72.500,  75.000) = 57 
    [ 75.000,  77.500) = 408 
    [ 77.500,  80.000) = 653 
    [ 80.000,  82.500) = 146 
    [ 82.500,  85.000) = 3 
    [ 85.000,  87.500) = 1 
    [ 87.500,  90.000) = 2 
    [ 90.000,  92.500) = 1 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     74.187 ms/op
     p(50.0000) =     78.119 ms/op
     p(90.0000) =     80.216 ms/op
     p(95.0000) =     80.609 ms/op
     p(99.0000) =     82.088 ms/op
     p(99.9000) =     90.560 ms/op
     p(99.9900) =     91.095 ms/op
     p(99.9990) =     91.095 ms/op
     p(99.9999) =     91.095 ms/op
    p(100.0000) =     91.095 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 39.29% complete, ETA 08:56:46
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1754.792 ±(99.9%) 6443.667 ms/op
# Warmup Iteration   2: 739.546 ±(99.9%) 14.438 ms/op
# Warmup Iteration   3: 727.936 ±(99.9%) 9.712 ms/op
# Warmup Iteration   4: 740.070 ±(99.9%) 20.520 ms/op
# Warmup Iteration   5: 746.961 ±(99.9%) 14.558 ms/op
Iteration   1: 754.376 ±(99.9%) 4.491 ms/op
                 executeFilterQuery·p0.00:   751.829 ms/op
                 executeFilterQuery·p0.50:   752.878 ms/op
                 executeFilterQuery·p0.90:   763.363 ms/op
                 executeFilterQuery·p0.95:   765.460 ms/op
                 executeFilterQuery·p0.99:   765.460 ms/op
                 executeFilterQuery·p0.999:  765.460 ms/op
                 executeFilterQuery·p0.9999: 765.460 ms/op
                 executeFilterQuery·p1.00:   765.460 ms/op

Iteration   2: 756.248 ±(99.9%) 5.065 ms/op
                 executeFilterQuery·p0.00:   745.538 ms/op
                 executeFilterQuery·p0.50:   756.548 ms/op
                 executeFilterQuery·p0.90:   762.315 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   3: 756.922 ±(99.9%) 4.705 ms/op
                 executeFilterQuery·p0.00:   750.780 ms/op
                 executeFilterQuery·p0.50:   758.120 ms/op
                 executeFilterQuery·p0.90:   762.315 ms/op
                 executeFilterQuery·p0.95:   763.363 ms/op
                 executeFilterQuery·p0.99:   763.363 ms/op
                 executeFilterQuery·p0.999:  763.363 ms/op
                 executeFilterQuery·p0.9999: 763.363 ms/op
                 executeFilterQuery·p1.00:   763.363 ms/op

Iteration   4: 756.697 ±(99.9%) 4.988 ms/op
                 executeFilterQuery·p0.00:   749.732 ms/op
                 executeFilterQuery·p0.50:   756.023 ms/op
                 executeFilterQuery·p0.90:   761.790 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op

Iteration   5: 758.046 ±(99.9%) 5.113 ms/op
                 executeFilterQuery·p0.00:   750.780 ms/op
                 executeFilterQuery·p0.50:   759.169 ms/op
                 executeFilterQuery·p0.90:   763.363 ms/op
                 executeFilterQuery·p0.95:   763.363 ms/op
                 executeFilterQuery·p0.99:   763.363 ms/op
                 executeFilterQuery·p0.999:  763.363 ms/op
                 executeFilterQuery·p0.9999: 763.363 ms/op
                 executeFilterQuery·p1.00:   763.363 ms/op


# Run progress: 39.88% complete, ETA 08:46:16
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

772.639 ±(99.9%) 68.216 ms/op
# Warmup Iteration   2: 721.196 ±(99.9%) 6.758 ms/op
# Warmup Iteration   3: 744.489 ±(99.9%) 22.304 ms/op
# Warmup Iteration   4: 733.404 ±(99.9%) 9.740 ms/op
# Warmup Iteration   5: 759.244 ±(99.9%) 9.480 ms/op
Iteration   1: 761.191 ±(99.9%) 8.227 ms/op
                 executeFilterQuery·p0.00:   745.538 ms/op
                 executeFilterQuery·p0.50:   763.363 ms/op
                 executeFilterQuery·p0.90:   768.606 ms/op
                 executeFilterQuery·p0.95:   768.606 ms/op
                 executeFilterQuery·p0.99:   768.606 ms/op
                 executeFilterQuery·p0.999:  768.606 ms/op
                 executeFilterQuery·p0.9999: 768.606 ms/op
                 executeFilterQuery·p1.00:   768.606 ms/op

Iteration   2: 762.315 ±(99.9%) 7.969 ms/op
                 executeFilterQuery·p0.00:   749.732 ms/op
                 executeFilterQuery·p0.50:   764.936 ms/op
                 executeFilterQuery·p0.90:   769.655 ms/op
                 executeFilterQuery·p0.95:   769.655 ms/op
                 executeFilterQuery·p0.99:   769.655 ms/op
                 executeFilterQuery·p0.999:  769.655 ms/op
                 executeFilterQuery·p0.9999: 769.655 ms/op
                 executeFilterQuery·p1.00:   769.655 ms/op

Iteration   3: 756.248 ±(99.9%) 3.539 ms/op
                 executeFilterQuery·p0.00:   749.732 ms/op
                 executeFilterQuery·p0.50:   756.548 ms/op
                 executeFilterQuery·p0.90:   760.742 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op

Iteration   4: 758.195 ±(99.9%) 4.083 ms/op
                 executeFilterQuery·p0.00:   750.780 ms/op
                 executeFilterQuery·p0.50:   759.693 ms/op
                 executeFilterQuery·p0.90:   761.790 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op

Iteration   5: 755.873 ±(99.9%) 3.498 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   756.548 ms/op
                 executeFilterQuery·p0.90:   759.693 ms/op
                 executeFilterQuery·p0.95:   760.218 ms/op
                 executeFilterQuery·p0.99:   760.218 ms/op
                 executeFilterQuery·p0.999:  760.218 ms/op
                 executeFilterQuery·p0.9999: 760.218 ms/op
                 executeFilterQuery·p1.00:   760.218 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 140
  mean =    757.611 ±(99.9%) 1.473 ms/op

  Histogram, ms/op:
    [740.000, 742.500) = 0 
    [742.500, 745.000) = 0 
    [745.000, 747.500) = 2 
    [747.500, 750.000) = 5 
    [750.000, 752.500) = 15 
    [752.500, 755.000) = 29 
    [755.000, 757.500) = 19 
    [757.500, 760.000) = 19 
    [760.000, 762.500) = 30 
    [762.500, 765.000) = 8 
    [765.000, 767.500) = 6 

  Percentiles, ms/op:
      p(0.0000) =    745.538 ms/op
     p(50.0000) =    757.596 ms/op
     p(90.0000) =    764.412 ms/op
     p(95.0000) =    767.505 ms/op
     p(99.0000) =    769.655 ms/op
     p(99.9000) =    769.655 ms/op
     p(99.9900) =    769.655 ms/op
     p(99.9990) =    769.655 ms/op
     p(99.9999) =    769.655 ms/op
    p(100.0000) =    769.655 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 40.48% complete, ETA 08:36:01
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

2010.540 ±(99.9%) 9825.448 ms/op
# Warmup Iteration   2: 725.465 ±(99.9%) 14.656 ms/op
# Warmup Iteration   3: 719.024 ±(99.9%) 8.548 ms/op
# Warmup Iteration   4: 729.584 ±(99.9%) 17.136 ms/op
# Warmup Iteration   5: 739.321 ±(99.9%) 20.516 ms/op
Iteration   1: 755.799 ±(99.9%) 7.411 ms/op
                 executeFilterQuery·p0.00:   746.586 ms/op
                 executeFilterQuery·p0.50:   757.596 ms/op
                 executeFilterQuery·p0.90:   764.412 ms/op
                 executeFilterQuery·p0.95:   766.509 ms/op
                 executeFilterQuery·p0.99:   766.509 ms/op
                 executeFilterQuery·p0.999:  766.509 ms/op
                 executeFilterQuery·p0.9999: 766.509 ms/op
                 executeFilterQuery·p1.00:   766.509 ms/op

Iteration   2: 752.353 ±(99.9%) 6.475 ms/op
                 executeFilterQuery·p0.00:   744.489 ms/op
                 executeFilterQuery·p0.50:   754.450 ms/op
                 executeFilterQuery·p0.90:   758.645 ms/op
                 executeFilterQuery·p0.95:   759.169 ms/op
                 executeFilterQuery·p0.99:   759.169 ms/op
                 executeFilterQuery·p0.999:  759.169 ms/op
                 executeFilterQuery·p0.9999: 759.169 ms/op
                 executeFilterQuery·p1.00:   759.169 ms/op

Iteration   3: 760.068 ±(99.9%) 6.205 ms/op
                 executeFilterQuery·p0.00:   744.489 ms/op
                 executeFilterQuery·p0.50:   762.315 ms/op
                 executeFilterQuery·p0.90:   764.412 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   4: 755.499 ±(99.9%) 6.340 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   754.450 ms/op
                 executeFilterQuery·p0.90:   764.412 ms/op
                 executeFilterQuery·p0.95:   764.412 ms/op
                 executeFilterQuery·p0.99:   764.412 ms/op
                 executeFilterQuery·p0.999:  764.412 ms/op
                 executeFilterQuery·p0.9999: 764.412 ms/op
                 executeFilterQuery·p1.00:   764.412 ms/op

Iteration   5: 751.979 ±(99.9%) 4.324 ms/op
                 executeFilterQuery·p0.00:   745.538 ms/op
                 executeFilterQuery·p0.50:   753.926 ms/op
                 executeFilterQuery·p0.90:   756.023 ms/op
                 executeFilterQuery·p0.95:   756.023 ms/op
                 executeFilterQuery·p0.99:   756.023 ms/op
                 executeFilterQuery·p0.999:  756.023 ms/op
                 executeFilterQuery·p0.9999: 756.023 ms/op
                 executeFilterQuery·p1.00:   756.023 ms/op


# Run progress: 41.07% complete, ETA 08:26:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

773.042 ±(99.9%) 102.557 ms/op
# Warmup Iteration   2: 724.117 ±(99.9%) 5.808 ms/op
# Warmup Iteration   3: 733.030 ±(99.9%) 18.345 ms/op
# Warmup Iteration   4: 729.884 ±(99.9%) 15.947 ms/op
# Warmup Iteration   5: 754.600 ±(99.9%) 2.001 ms/op
Iteration   1: 753.776 ±(99.9%) 3.002 ms/op
                 executeFilterQuery·p0.00:   751.829 ms/op
                 executeFilterQuery·p0.50:   753.402 ms/op
                 executeFilterQuery·p0.90:   758.645 ms/op
                 executeFilterQuery·p0.95:   762.315 ms/op
                 executeFilterQuery·p0.99:   762.315 ms/op
                 executeFilterQuery·p0.999:  762.315 ms/op
                 executeFilterQuery·p0.9999: 762.315 ms/op
                 executeFilterQuery·p1.00:   762.315 ms/op

Iteration   2: 753.027 ±(99.9%) 2.929 ms/op
                 executeFilterQuery·p0.00:   747.635 ms/op
                 executeFilterQuery·p0.50:   753.926 ms/op
                 executeFilterQuery·p0.90:   755.499 ms/op
                 executeFilterQuery·p0.95:   756.023 ms/op
                 executeFilterQuery·p0.99:   756.023 ms/op
                 executeFilterQuery·p0.999:  756.023 ms/op
                 executeFilterQuery·p0.9999: 756.023 ms/op
                 executeFilterQuery·p1.00:   756.023 ms/op

Iteration   3: 754.001 ±(99.9%) 2.684 ms/op
                 executeFilterQuery·p0.00:   751.829 ms/op
                 executeFilterQuery·p0.50:   753.926 ms/op
                 executeFilterQuery·p0.90:   758.120 ms/op
                 executeFilterQuery·p0.95:   761.266 ms/op
                 executeFilterQuery·p0.99:   761.266 ms/op
                 executeFilterQuery·p0.999:  761.266 ms/op
                 executeFilterQuery·p0.9999: 761.266 ms/op
                 executeFilterQuery·p1.00:   761.266 ms/op

Iteration   4: 753.177 ±(99.9%) 4.532 ms/op
                 executeFilterQuery·p0.00:   747.635 ms/op
                 executeFilterQuery·p0.50:   752.878 ms/op
                 executeFilterQuery·p0.90:   759.693 ms/op
                 executeFilterQuery·p0.95:   763.363 ms/op
                 executeFilterQuery·p0.99:   763.363 ms/op
                 executeFilterQuery·p0.999:  763.363 ms/op
                 executeFilterQuery·p0.9999: 763.363 ms/op
                 executeFilterQuery·p1.00:   763.363 ms/op

Iteration   5: 756.023 ±(99.9%) 7.097 ms/op
                 executeFilterQuery·p0.00:   743.440 ms/op
                 executeFilterQuery·p0.50:   755.499 ms/op
                 executeFilterQuery·p0.90:   764.936 ms/op
                 executeFilterQuery·p0.95:   765.460 ms/op
                 executeFilterQuery·p0.99:   765.460 ms/op
                 executeFilterQuery·p0.999:  765.460 ms/op
                 executeFilterQuery·p0.9999: 765.460 ms/op
                 executeFilterQuery·p1.00:   765.460 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 140
  mean =    754.570 ±(99.9%) 1.463 ms/op

  Histogram, ms/op:
    [740.000, 742.500) = 0 
    [742.500, 745.000) = 3 
    [745.000, 747.500) = 7 
    [747.500, 750.000) = 18 
    [750.000, 752.500) = 13 
    [752.500, 755.000) = 53 
    [755.000, 757.500) = 13 
    [757.500, 760.000) = 8 
    [760.000, 762.500) = 13 
    [762.500, 765.000) = 10 
    [765.000, 767.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    743.440 ms/op
     p(50.0000) =    753.926 ms/op
     p(90.0000) =    762.315 ms/op
     p(95.0000) =    764.412 ms/op
     p(99.0000) =    766.079 ms/op
     p(99.9000) =    766.509 ms/op
     p(99.9900) =    766.509 ms/op
     p(99.9990) =    766.509 ms/op
     p(99.9999) =    766.509 ms/op
    p(100.0000) =    766.509 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 41.67% complete, ETA 08:16:13
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1782.230 ±(99.9%) 6293.576 ms/op
# Warmup Iteration   2: 745.163 ±(99.9%) 16.109 ms/op
# Warmup Iteration   3: 738.722 ±(99.9%) 13.525 ms/op
# Warmup Iteration   4: 750.706 ±(99.9%) 20.818 ms/op
# Warmup Iteration   5: 754.376 ±(99.9%) 19.190 ms/op
Iteration   1: 769.413 ±(99.9%) 4.647 ms/op
                 executeFilterQuery·p0.00:   762.315 ms/op
                 executeFilterQuery·p0.50:   768.606 ms/op
                 executeFilterQuery·p0.90:   776.156 ms/op
                 executeFilterQuery·p0.95:   776.995 ms/op
                 executeFilterQuery·p0.99:   776.995 ms/op
                 executeFilterQuery·p0.999:  776.995 ms/op
                 executeFilterQuery·p0.9999: 776.995 ms/op
                 executeFilterQuery·p1.00:   776.995 ms/op

Iteration   2: 771.107 ±(99.9%) 4.713 ms/op
                 executeFilterQuery·p0.00:   762.315 ms/op
                 executeFilterQuery·p0.50:   771.752 ms/op
                 executeFilterQuery·p0.90:   775.946 ms/op
                 executeFilterQuery·p0.95:   775.946 ms/op
                 executeFilterQuery·p0.99:   775.946 ms/op
                 executeFilterQuery·p0.999:  775.946 ms/op
                 executeFilterQuery·p0.9999: 775.946 ms/op
                 executeFilterQuery·p1.00:   775.946 ms/op

Iteration   3: 770.300 ±(99.9%) 7.884 ms/op
                 executeFilterQuery·p0.00:   759.169 ms/op
                 executeFilterQuery·p0.50:   769.655 ms/op
                 executeFilterQuery·p0.90:   782.238 ms/op
                 executeFilterQuery·p0.95:   786.432 ms/op
                 executeFilterQuery·p0.99:   786.432 ms/op
                 executeFilterQuery·p0.999:  786.432 ms/op
                 executeFilterQuery·p0.9999: 786.432 ms/op
                 executeFilterQuery·p1.00:   786.432 ms/op

Iteration   4: 770.623 ±(99.9%) 4.541 ms/op
                 executeFilterQuery·p0.00:   765.460 ms/op
                 executeFilterQuery·p0.50:   770.703 ms/op
                 executeFilterQuery·p0.90:   776.995 ms/op
                 executeFilterQuery·p0.95:   776.995 ms/op
                 executeFilterQuery·p0.99:   776.995 ms/op
                 executeFilterQuery·p0.999:  776.995 ms/op
                 executeFilterQuery·p0.9999: 776.995 ms/op
                 executeFilterQuery·p1.00:   776.995 ms/op

Iteration   5: 769.735 ±(99.9%) 6.791 ms/op
                 executeFilterQuery·p0.00:   757.072 ms/op
                 executeFilterQuery·p0.50:   769.655 ms/op
                 executeFilterQuery·p0.90:   778.253 ms/op
                 executeFilterQuery·p0.95:   779.092 ms/op
                 executeFilterQuery·p0.99:   779.092 ms/op
                 executeFilterQuery·p0.999:  779.092 ms/op
                 executeFilterQuery·p0.9999: 779.092 ms/op
                 executeFilterQuery·p1.00:   779.092 ms/op


# Run progress: 42.26% complete, ETA 08:06:37
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

803.209 ±(99.9%) 113.310 ms/op
# Warmup Iteration   2: 738.722 ±(99.9%) 10.557 ms/op
# Warmup Iteration   3: 750.706 ±(99.9%) 19.199 ms/op
# Warmup Iteration   4: 732.655 ±(99.9%) 8.135 ms/op
# Warmup Iteration   5: 766.348 ±(99.9%) 8.022 ms/op
Iteration   1: 765.386 ±(99.9%) 5.576 ms/op
                 executeFilterQuery·p0.00:   752.878 ms/op
                 executeFilterQuery·p0.50:   765.985 ms/op
                 executeFilterQuery·p0.90:   770.703 ms/op
                 executeFilterQuery·p0.95:   770.703 ms/op
                 executeFilterQuery·p0.99:   770.703 ms/op
                 executeFilterQuery·p0.999:  770.703 ms/op
                 executeFilterQuery·p0.9999: 770.703 ms/op
                 executeFilterQuery·p1.00:   770.703 ms/op

Iteration   2: 763.888 ±(99.9%) 4.610 ms/op
                 executeFilterQuery·p0.00:   760.218 ms/op
                 executeFilterQuery·p0.50:   762.315 ms/op
                 executeFilterQuery·p0.90:   771.228 ms/op
                 executeFilterQuery·p0.95:   771.752 ms/op
                 executeFilterQuery·p0.99:   771.752 ms/op
                 executeFilterQuery·p0.999:  771.752 ms/op
                 executeFilterQuery·p0.9999: 771.752 ms/op
                 executeFilterQuery·p1.00:   771.752 ms/op

Iteration   3: 763.663 ±(99.9%) 5.537 ms/op
                 executeFilterQuery·p0.00:   759.169 ms/op
                 executeFilterQuery·p0.50:   761.266 ms/op
                 executeFilterQuery·p0.90:   771.752 ms/op
                 executeFilterQuery·p0.95:   772.801 ms/op
                 executeFilterQuery·p0.99:   772.801 ms/op
                 executeFilterQuery·p0.999:  772.801 ms/op
                 executeFilterQuery·p0.9999: 772.801 ms/op
                 executeFilterQuery·p1.00:   772.801 ms/op

Iteration   4: 764.487 ±(99.9%) 6.585 ms/op
                 executeFilterQuery·p0.00:   758.120 ms/op
                 executeFilterQuery·p0.50:   761.790 ms/op
                 executeFilterQuery·p0.90:   773.325 ms/op
                 executeFilterQuery·p0.95:   774.898 ms/op
                 executeFilterQuery·p0.99:   774.898 ms/op
                 executeFilterQuery·p0.999:  774.898 ms/op
                 executeFilterQuery·p0.9999: 774.898 ms/op
                 executeFilterQuery·p1.00:   774.898 ms/op

Iteration   5: 766.912 ±(99.9%) 5.390 ms/op
                 executeFilterQuery·p0.00:   761.266 ms/op
                 executeFilterQuery·p0.50:   766.509 ms/op
                 executeFilterQuery·p0.90:   773.430 ms/op
                 executeFilterQuery·p0.95:   773.849 ms/op
                 executeFilterQuery·p0.99:   773.849 ms/op
                 executeFilterQuery·p0.999:  773.849 ms/op
                 executeFilterQuery·p0.9999: 773.849 ms/op
                 executeFilterQuery·p1.00:   773.849 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 134
  mean =    767.456 ±(99.9%) 1.609 ms/op

  Histogram, ms/op:
    [750.000, 752.500) = 0 
    [752.500, 755.000) = 1 
    [755.000, 757.500) = 1 
    [757.500, 760.000) = 5 
    [760.000, 762.500) = 35 
    [762.500, 765.000) = 6 
    [765.000, 767.500) = 10 
    [767.500, 770.000) = 33 
    [770.000, 772.500) = 20 
    [772.500, 775.000) = 14 
    [775.000, 777.500) = 7 
    [777.500, 780.000) = 1 
    [780.000, 782.500) = 0 
    [782.500, 785.000) = 0 
    [785.000, 787.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    752.878 ms/op
     p(50.0000) =    768.606 ms/op
     p(90.0000) =    774.898 ms/op
     p(95.0000) =    776.208 ms/op
     p(99.0000) =    783.863 ms/op
     p(99.9000) =    786.432 ms/op
     p(99.9900) =    786.432 ms/op
     p(99.9990) =    786.432 ms/op
     p(99.9999) =    786.432 ms/op
    p(100.0000) =    786.432 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 42.86% complete, ETA 07:57:17
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12851.347 ms/op
# Warmup Iteration   2: 1477.593 ±(99.9%) 396.639 ms/op
# Warmup Iteration   3: 1399.325 ±(99.9%) 18.777 ms/op
# Warmup Iteration   4: 1415.578 ±(99.9%) 57.069 ms/op
# Warmup Iteration   5: 1432.654 ±(99.9%) 60.144 ms/op
Iteration   1: 1444.339 ±(99.9%) 18.438 ms/op
                 executeFilterQuery·p0.00:   1438.646 ms/op
                 executeFilterQuery·p0.50:   1440.743 ms/op
                 executeFilterQuery·p0.90:   1461.715 ms/op
                 executeFilterQuery·p0.95:   1461.715 ms/op
                 executeFilterQuery·p0.99:   1461.715 ms/op
                 executeFilterQuery·p0.999:  1461.715 ms/op
                 executeFilterQuery·p0.9999: 1461.715 ms/op
                 executeFilterQuery·p1.00:   1461.715 ms/op

Iteration   2: 1460.816 ±(99.9%) 6.600 ms/op
                 executeFilterQuery·p0.00:   1455.423 ms/op
                 executeFilterQuery·p0.50:   1461.715 ms/op
                 executeFilterQuery·p0.90:   1463.812 ms/op
                 executeFilterQuery·p0.95:   1463.812 ms/op
                 executeFilterQuery·p0.99:   1463.812 ms/op
                 executeFilterQuery·p0.999:  1463.812 ms/op
                 executeFilterQuery·p0.9999: 1463.812 ms/op
                 executeFilterQuery·p1.00:   1463.812 ms/op

Iteration   3: 1456.622 ±(99.9%) 20.381 ms/op
                 executeFilterQuery·p0.00:   1442.841 ms/op
                 executeFilterQuery·p0.50:   1459.618 ms/op
                 executeFilterQuery·p0.90:   1468.006 ms/op
                 executeFilterQuery·p0.95:   1468.006 ms/op
                 executeFilterQuery·p0.99:   1468.006 ms/op
                 executeFilterQuery·p0.999:  1468.006 ms/op
                 executeFilterQuery·p0.9999: 1468.006 ms/op
                 executeFilterQuery·p1.00:   1468.006 ms/op

Iteration   4: 1447.934 ±(99.9%) 18.059 ms/op
                 executeFilterQuery·p0.00:   1440.743 ms/op
                 executeFilterQuery·p0.50:   1444.938 ms/op
                 executeFilterQuery·p0.90:   1463.812 ms/op
                 executeFilterQuery·p0.95:   1463.812 ms/op
                 executeFilterQuery·p0.99:   1463.812 ms/op
                 executeFilterQuery·p0.999:  1463.812 ms/op
                 executeFilterQuery·p0.9999: 1463.812 ms/op
                 executeFilterQuery·p1.00:   1463.812 ms/op

Iteration   5: 1461.116 ±(99.9%) 11.797 ms/op
                 executeFilterQuery·p0.00:   1451.229 ms/op
                 executeFilterQuery·p0.50:   1461.715 ms/op
                 executeFilterQuery·p0.90:   1465.909 ms/op
                 executeFilterQuery·p0.95:   1465.909 ms/op
                 executeFilterQuery·p0.99:   1465.909 ms/op
                 executeFilterQuery·p0.999:  1465.909 ms/op
                 executeFilterQuery·p0.9999: 1465.909 ms/op
                 executeFilterQuery·p1.00:   1465.909 ms/op


# Run progress: 43.45% complete, ETA 07:48:13
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1496.468 ±(99.9%) 256.043 ms/op
# Warmup Iteration   2: 1400.898 ±(99.9%) 18.561 ms/op
# Warmup Iteration   3: 1415.315 ±(99.9%) 54.197 ms/op
# Warmup Iteration   4: 1430.258 ±(99.9%) 62.602 ms/op
# Warmup Iteration   5: 1453.326 ±(99.9%) 11.887 ms/op
Iteration   1: 1449.731 ±(99.9%) 9.724 ms/op
                 executeFilterQuery·p0.00:   1444.938 ms/op
                 executeFilterQuery·p0.50:   1449.132 ms/op
                 executeFilterQuery·p0.90:   1457.521 ms/op
                 executeFilterQuery·p0.95:   1457.521 ms/op
                 executeFilterQuery·p0.99:   1457.521 ms/op
                 executeFilterQuery·p0.999:  1457.521 ms/op
                 executeFilterQuery·p0.9999: 1457.521 ms/op
                 executeFilterQuery·p1.00:   1457.521 ms/op

Iteration   2: 1450.930 ±(99.9%) 16.001 ms/op
                 executeFilterQuery·p0.00:   1444.938 ms/op
                 executeFilterQuery·p0.50:   1447.035 ms/op
                 executeFilterQuery·p0.90:   1461.715 ms/op
                 executeFilterQuery·p0.95:   1461.715 ms/op
                 executeFilterQuery·p0.99:   1461.715 ms/op
                 executeFilterQuery·p0.999:  1461.715 ms/op
                 executeFilterQuery·p0.9999: 1461.715 ms/op
                 executeFilterQuery·p1.00:   1461.715 ms/op

Iteration   3: 1452.428 ±(99.9%) 13.037 ms/op
                 executeFilterQuery·p0.00:   1444.938 ms/op
                 executeFilterQuery·p0.50:   1451.229 ms/op
                 executeFilterQuery·p0.90:   1461.715 ms/op
                 executeFilterQuery·p0.95:   1461.715 ms/op
                 executeFilterQuery·p0.99:   1461.715 ms/op
                 executeFilterQuery·p0.999:  1461.715 ms/op
                 executeFilterQuery·p0.9999: 1461.715 ms/op
                 executeFilterQuery·p1.00:   1461.715 ms/op

Iteration   4: 1454.525 ±(99.9%) 16.999 ms/op
                 executeFilterQuery·p0.00:   1447.035 ms/op
                 executeFilterQuery·p0.50:   1453.326 ms/op
                 executeFilterQuery·p0.90:   1465.909 ms/op
                 executeFilterQuery·p0.95:   1465.909 ms/op
                 executeFilterQuery·p0.99:   1465.909 ms/op
                 executeFilterQuery·p0.999:  1465.909 ms/op
                 executeFilterQuery·p0.9999: 1465.909 ms/op
                 executeFilterQuery·p1.00:   1465.909 ms/op

Iteration   5: 1453.326 ±(99.9%) 8.181 ms/op
                 executeFilterQuery·p0.00:   1449.132 ms/op
                 executeFilterQuery·p0.50:   1453.326 ms/op
                 executeFilterQuery·p0.90:   1457.521 ms/op
                 executeFilterQuery·p0.95:   1457.521 ms/op
                 executeFilterQuery·p0.99:   1457.521 ms/op
                 executeFilterQuery·p0.999:  1457.521 ms/op
                 executeFilterQuery·p0.9999: 1457.521 ms/op
                 executeFilterQuery·p1.00:   1457.521 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =   1453.177 ±(99.9%) 3.258 ms/op

  Histogram, ms/op:
    [1430.000, 1432.500) = 0 
    [1432.500, 1435.000) = 0 
    [1435.000, 1437.500) = 0 
    [1437.500, 1440.000) = 2 
    [1440.000, 1442.500) = 4 
    [1442.500, 1445.000) = 10 
    [1445.000, 1447.500) = 5 
    [1447.500, 1450.000) = 6 
    [1450.000, 1452.500) = 9 
    [1452.500, 1455.000) = 4 
    [1455.000, 1457.500) = 3 
    [1457.500, 1460.000) = 9 
    [1460.000, 1462.500) = 8 
    [1462.500, 1465.000) = 6 
    [1465.000, 1467.500) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1438.646 ms/op
     p(50.0000) =   1451.229 ms/op
     p(90.0000) =   1463.812 ms/op
     p(95.0000) =   1465.909 ms/op
     p(99.0000) =   1468.006 ms/op
     p(99.9000) =   1468.006 ms/op
     p(99.9900) =   1468.006 ms/op
     p(99.9990) =   1468.006 ms/op
     p(99.9999) =   1468.006 ms/op
    p(100.0000) =   1468.006 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 44.05% complete, ETA 07:39:17
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12717.130 ms/op
# Warmup Iteration   2: 1554.888 ±(99.9%) 429.390 ms/op
# Warmup Iteration   3: 1411.908 ±(99.9%) 11.290 ms/op
# Warmup Iteration   4: 1442.241 ±(99.9%) 91.128 ms/op
# Warmup Iteration   5: 1474.897 ±(99.9%) 78.739 ms/op
Iteration   1: 1498.265 ±(99.9%) 42.145 ms/op
                 executeFilterQuery·p0.00:   1468.006 ms/op
                 executeFilterQuery·p0.50:   1507.852 ms/op
                 executeFilterQuery·p0.90:   1512.047 ms/op
                 executeFilterQuery·p0.95:   1512.047 ms/op
                 executeFilterQuery·p0.99:   1512.047 ms/op
                 executeFilterQuery·p0.999:  1512.047 ms/op
                 executeFilterQuery·p0.9999: 1512.047 ms/op
                 executeFilterQuery·p1.00:   1512.047 ms/op

Iteration   2: 1504.856 ±(99.9%) 19.447 ms/op
                 executeFilterQuery·p0.00:   1493.172 ms/op
                 executeFilterQuery·p0.50:   1507.852 ms/op
                 executeFilterQuery·p0.90:   1516.241 ms/op
                 executeFilterQuery·p0.95:   1516.241 ms/op
                 executeFilterQuery·p0.99:   1516.241 ms/op
                 executeFilterQuery·p0.999:  1516.241 ms/op
                 executeFilterQuery·p0.9999: 1516.241 ms/op
                 executeFilterQuery·p1.00:   1516.241 ms/op

Iteration   3: 1494.071 ±(99.9%) 20.197 ms/op
                 executeFilterQuery·p0.00:   1482.686 ms/op
                 executeFilterQuery·p0.50:   1491.075 ms/op
                 executeFilterQuery·p0.90:   1509.949 ms/op
                 executeFilterQuery·p0.95:   1509.949 ms/op
                 executeFilterQuery·p0.99:   1509.949 ms/op
                 executeFilterQuery·p0.999:  1509.949 ms/op
                 executeFilterQuery·p0.9999: 1509.949 ms/op
                 executeFilterQuery·p1.00:   1509.949 ms/op

Iteration   4: 1501.860 ±(99.9%) 20.302 ms/op
                 executeFilterQuery·p0.00:   1491.075 ms/op
                 executeFilterQuery·p0.50:   1501.561 ms/op
                 executeFilterQuery·p0.90:   1514.144 ms/op
                 executeFilterQuery·p0.95:   1514.144 ms/op
                 executeFilterQuery·p0.99:   1514.144 ms/op
                 executeFilterQuery·p0.999:  1514.144 ms/op
                 executeFilterQuery·p0.9999: 1514.144 ms/op
                 executeFilterQuery·p1.00:   1514.144 ms/op

Iteration   5: 3374.318 ±(99.9%) 59078.191 ms/op
                 executeFilterQuery·p0.00:   1495.269 ms/op
                 executeFilterQuery·p0.50:   1514.144 ms/op
                 executeFilterQuery·p0.90:   7113.540 ms/op
                 executeFilterQuery·p0.95:   7113.540 ms/op
                 executeFilterQuery·p0.99:   7113.540 ms/op
                 executeFilterQuery·p0.999:  7113.540 ms/op
                 executeFilterQuery·p0.9999: 7113.540 ms/op
                 executeFilterQuery·p1.00:   7113.540 ms/op


# Run progress: 44.64% complete, ETA 07:30:36
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1530.022 ±(99.9%) 223.875 ms/op
# Warmup Iteration   2: 1444.339 ±(99.9%) 23.728 ms/op
# Warmup Iteration   3: 1462.913 ±(99.9%) 83.200 ms/op
# Warmup Iteration   4: 1452.727 ±(99.9%) 58.596 ms/op
# Warmup Iteration   5: 1504.257 ±(99.9%) 12.411 ms/op
Iteration   1: 1503.658 ±(99.9%) 9.044 ms/op
                 executeFilterQuery·p0.00:   1495.269 ms/op
                 executeFilterQuery·p0.50:   1503.658 ms/op
                 executeFilterQuery·p0.90:   1507.852 ms/op
                 executeFilterQuery·p0.95:   1507.852 ms/op
                 executeFilterQuery·p0.99:   1507.852 ms/op
                 executeFilterQuery·p0.999:  1507.852 ms/op
                 executeFilterQuery·p0.9999: 1507.852 ms/op
                 executeFilterQuery·p1.00:   1507.852 ms/op

Iteration   2: 1499.763 ±(99.9%) 11.053 ms/op
                 executeFilterQuery·p0.00:   1493.172 ms/op
                 executeFilterQuery·p0.50:   1503.658 ms/op
                 executeFilterQuery·p0.90:   1503.658 ms/op
                 executeFilterQuery·p0.95:   1503.658 ms/op
                 executeFilterQuery·p0.99:   1503.658 ms/op
                 executeFilterQuery·p0.999:  1503.658 ms/op
                 executeFilterQuery·p0.9999: 1503.658 ms/op
                 executeFilterQuery·p1.00:   1503.658 ms/op

Iteration   3: 1495.869 ±(99.9%) 12.411 ms/op
                 executeFilterQuery·p0.00:   1491.075 ms/op
                 executeFilterQuery·p0.50:   1493.172 ms/op
                 executeFilterQuery·p0.90:   1503.658 ms/op
                 executeFilterQuery·p0.95:   1503.658 ms/op
                 executeFilterQuery·p0.99:   1503.658 ms/op
                 executeFilterQuery·p0.999:  1503.658 ms/op
                 executeFilterQuery·p0.9999: 1503.658 ms/op
                 executeFilterQuery·p1.00:   1503.658 ms/op

Iteration   4: 1506.354 ±(99.9%) 33.367 ms/op
                 executeFilterQuery·p0.00:   1491.075 ms/op
                 executeFilterQuery·p0.50:   1505.755 ms/op
                 executeFilterQuery·p0.90:   1537.212 ms/op
                 executeFilterQuery·p0.95:   1537.212 ms/op
                 executeFilterQuery·p0.99:   1537.212 ms/op
                 executeFilterQuery·p0.999:  1537.212 ms/op
                 executeFilterQuery·p0.9999: 1537.212 ms/op
                 executeFilterQuery·p1.00:   1537.212 ms/op

Iteration   5: 1503.958 ±(99.9%) 14.282 ms/op
                 executeFilterQuery·p0.00:   1495.269 ms/op
                 executeFilterQuery·p0.50:   1507.852 ms/op
                 executeFilterQuery·p0.90:   1509.949 ms/op
                 executeFilterQuery·p0.95:   1509.949 ms/op
                 executeFilterQuery·p0.99:   1509.949 ms/op
                 executeFilterQuery·p0.999:  1509.949 ms/op
                 executeFilterQuery·p0.9999: 1509.949 ms/op
                 executeFilterQuery·p1.00:   1509.949 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 66
  mean =   1586.114 ±(99.9%) 293.121 ms/op

  Histogram, ms/op:
    [1000.000, 1500.000) = 28 
    [1500.000, 2000.000) = 37 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 0 
    [6000.000, 6500.000) = 0 
    [6500.000, 7000.000) = 0 
    [7000.000, 7500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1468.006 ms/op
     p(50.0000) =   1503.658 ms/op
     p(90.0000) =   1510.579 ms/op
     p(95.0000) =   1515.507 ms/op
     p(99.0000) =   7113.540 ms/op
     p(99.9000) =   7113.540 ms/op
     p(99.9900) =   7113.540 ms/op
     p(99.9990) =   7113.540 ms/op
     p(99.9999) =   7113.540 ms/op
    p(100.0000) =   7113.540 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 45.24% complete, ETA 07:22:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

12633.244 ms/op
# Warmup Iteration   2: 1607.317 ±(99.9%) 514.949 ms/op
# Warmup Iteration   3: 1450.930 ±(99.9%) 29.676 ms/op
# Warmup Iteration   4: 1475.197 ±(99.9%) 71.728 ms/op
# Warmup Iteration   5: 1462.913 ±(99.9%) 77.604 ms/op
Iteration   1: 1511.447 ±(99.9%) 14.095 ms/op
                 executeFilterQuery·p0.00:   1505.755 ms/op
                 executeFilterQuery·p0.50:   1507.852 ms/op
                 executeFilterQuery·p0.90:   1520.435 ms/op
                 executeFilterQuery·p0.95:   1520.435 ms/op
                 executeFilterQuery·p0.99:   1520.435 ms/op
                 executeFilterQuery·p0.999:  1520.435 ms/op
                 executeFilterQuery·p0.9999: 1520.435 ms/op
                 executeFilterQuery·p1.00:   1520.435 ms/op

Iteration   2: 1512.646 ±(99.9%) 18.638 ms/op
                 executeFilterQuery·p0.00:   1503.658 ms/op
                 executeFilterQuery·p0.50:   1507.852 ms/op
                 executeFilterQuery·p0.90:   1524.630 ms/op
                 executeFilterQuery·p0.95:   1524.630 ms/op
                 executeFilterQuery·p0.99:   1524.630 ms/op
                 executeFilterQuery·p0.999:  1524.630 ms/op
                 executeFilterQuery·p0.9999: 1524.630 ms/op
                 executeFilterQuery·p1.00:   1524.630 ms/op

Iteration   3: 1517.140 ±(99.9%) 15.148 ms/op
                 executeFilterQuery·p0.00:   1507.852 ms/op
                 executeFilterQuery·p0.50:   1518.338 ms/op
                 executeFilterQuery·p0.90:   1524.630 ms/op
                 executeFilterQuery·p0.95:   1524.630 ms/op
                 executeFilterQuery·p0.99:   1524.630 ms/op
                 executeFilterQuery·p0.999:  1524.630 ms/op
                 executeFilterQuery·p0.9999: 1524.630 ms/op
                 executeFilterQuery·p1.00:   1524.630 ms/op

Iteration   4: 1509.650 ±(99.9%) 20.665 ms/op
                 executeFilterQuery·p0.00:   1499.464 ms/op
                 executeFilterQuery·p0.50:   1505.755 ms/op
                 executeFilterQuery·p0.90:   1522.532 ms/op
                 executeFilterQuery·p0.95:   1522.532 ms/op
                 executeFilterQuery·p0.99:   1522.532 ms/op
                 executeFilterQuery·p0.999:  1522.532 ms/op
                 executeFilterQuery·p0.9999: 1522.532 ms/op
                 executeFilterQuery·p1.00:   1522.532 ms/op

Iteration   5: 1510.249 ±(99.9%) 20.485 ms/op
                 executeFilterQuery·p0.00:   1501.561 ms/op
                 executeFilterQuery·p0.50:   1503.658 ms/op
                 executeFilterQuery·p0.90:   1522.532 ms/op
                 executeFilterQuery·p0.95:   1522.532 ms/op
                 executeFilterQuery·p0.99:   1522.532 ms/op
                 executeFilterQuery·p0.999:  1522.532 ms/op
                 executeFilterQuery·p0.9999: 1522.532 ms/op
                 executeFilterQuery·p1.00:   1522.532 ms/op


# Run progress: 45.83% complete, ETA 07:13:43
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int recordCount = filter_query_table_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = filter_query_table_vc_0.get(aviv);
        if (!((ordinal_value < 3000))) {
            continue;
        }
        int ordinal_value_0 = filter_query_table_vc_1.get(aviv);
        if (!((ordinal_value_0 < 3000))) {
            continue;
        }
        int ordinal_value_1 = filter_query_table_vc_2.get(aviv);
        if (!((ordinal_value_1 < 3000))) {
            continue;
        }
        count++;
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

1674.576 ±(99.9%) 572.185 ms/op
# Warmup Iteration   2: 1476.994 ±(99.9%) 10.099 ms/op
# Warmup Iteration   3: 1484.784 ±(99.9%) 72.406 ms/op
# Warmup Iteration   4: 1468.606 ±(99.9%) 19.227 ms/op
# Warmup Iteration   5: 1522.532 ±(99.9%) 59.245 ms/op
Iteration   1: 1528.824 ±(99.9%) 18.695 ms/op
                 executeFilterQuery·p0.00:   1518.338 ms/op
                 executeFilterQuery·p0.50:   1528.824 ms/op
                 executeFilterQuery·p0.90:   1541.407 ms/op
                 executeFilterQuery·p0.95:   1541.407 ms/op
                 executeFilterQuery·p0.99:   1541.407 ms/op
                 executeFilterQuery·p0.999:  1541.407 ms/op
                 executeFilterQuery·p0.9999: 1541.407 ms/op
                 executeFilterQuery·p1.00:   1541.407 ms/op

Iteration   2: 1541.107 ±(99.9%) 19.745 ms/op
                 executeFilterQuery·p0.00:   1526.727 ms/op
                 executeFilterQuery·p0.50:   1545.601 ms/op
                 executeFilterQuery·p0.90:   1547.698 ms/op
                 executeFilterQuery·p0.95:   1547.698 ms/op
                 executeFilterQuery·p0.99:   1547.698 ms/op
                 executeFilterQuery·p0.999:  1547.698 ms/op
                 executeFilterQuery·p0.9999: 1547.698 ms/op
                 executeFilterQuery·p1.00:   1547.698 ms/op

Iteration   3: 1529.723 ±(99.9%) 24.672 ms/op
                 executeFilterQuery·p0.00:   1514.144 ms/op
                 executeFilterQuery·p0.50:   1528.824 ms/op
                 executeFilterQuery·p0.90:   1547.698 ms/op
                 executeFilterQuery·p0.95:   1547.698 ms/op
                 executeFilterQuery·p0.99:   1547.698 ms/op
                 executeFilterQuery·p0.999:  1547.698 ms/op
                 executeFilterQuery·p0.9999: 1547.698 ms/op
                 executeFilterQuery·p1.00:   1547.698 ms/op

Iteration   4: 1528.524 ±(99.9%) 17.552 ms/op
                 executeFilterQuery·p0.00:   1520.435 ms/op
                 executeFilterQuery·p0.50:   1528.824 ms/op
                 executeFilterQuery·p0.90:   1539.310 ms/op
                 executeFilterQuery·p0.95:   1539.310 ms/op
                 executeFilterQuery·p0.99:   1539.310 ms/op
                 executeFilterQuery·p0.999:  1539.310 ms/op
                 executeFilterQuery·p0.9999: 1539.310 ms/op
                 executeFilterQuery·p1.00:   1539.310 ms/op

Iteration   5: 2199.313 ±(99.9%) 4030.758 ms/op
                 executeFilterQuery·p0.00:   1516.241 ms/op
                 executeFilterQuery·p0.50:   1528.824 ms/op
                 executeFilterQuery·p0.90:   6257.902 ms/op
                 executeFilterQuery·p0.95:   6257.902 ms/op
                 executeFilterQuery·p0.99:   6257.902 ms/op
                 executeFilterQuery·p0.999:  6257.902 ms/op
                 executeFilterQuery·p0.9999: 6257.902 ms/op
                 executeFilterQuery·p1.00:   6257.902 ms/op



Result "benchmarks.filter_query.NonVectorisedNonSimd.executeFilterQuery":
  N = 70
  mean =   1588.862 ±(99.9%) 232.645 ms/op

  Histogram, ms/op:
    [1000.000, 1500.000) = 1 
    [1500.000, 2000.000) = 68 
    [2000.000, 2500.000) = 0 
    [2500.000, 3000.000) = 0 
    [3000.000, 3500.000) = 0 
    [3500.000, 4000.000) = 0 
    [4000.000, 4500.000) = 0 
    [4500.000, 5000.000) = 0 
    [5000.000, 5500.000) = 0 
    [5500.000, 6000.000) = 0 
    [6000.000, 6500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1499.464 ms/op
     p(50.0000) =   1520.435 ms/op
     p(90.0000) =   1541.407 ms/op
     p(95.0000) =   1547.698 ms/op
     p(99.0000) =   6257.902 ms/op
     p(99.9000) =   6257.902 ms/op
     p(99.9900) =   6257.902 ms/op
     p(99.9990) =   6257.902 ms/op
     p(99.9999) =   6257.902 ms/op
    p(100.0000) =   6257.902 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/)

# Run progress: 46.43% complete, ETA 07:05:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

81.918 ±(99.9%) 11.394 ms/op
# Warmup Iteration   2: 76.120 ±(99.9%) 0.526 ms/op
# Warmup Iteration   3: 78.198 ±(99.9%) 0.401 ms/op
# Warmup Iteration   4: 78.680 ±(99.9%) 0.390 ms/op
# Warmup Iteration   5: 79.141 ±(99.9%) 0.311 ms/op
Iteration   1: 77.055 ±(99.9%) 0.652 ms/op
                 executeFilterQuery·p0.00:   73.269 ms/op
                 executeFilterQuery·p0.50:   76.939 ms/op
                 executeFilterQuery·p0.90:   79.954 ms/op
                 executeFilterQuery·p0.95:   80.681 ms/op
                 executeFilterQuery·p0.99:   87.127 ms/op
                 executeFilterQuery·p0.999:  89.522 ms/op
                 executeFilterQuery·p0.9999: 89.522 ms/op
                 executeFilterQuery·p1.00:   89.522 ms/op

Iteration   2: 75.856 ±(99.9%) 0.372 ms/op
                 executeFilterQuery·p0.00:   71.172 ms/op
                 executeFilterQuery·p0.50:   76.022 ms/op
                 executeFilterQuery·p0.90:   77.332 ms/op
                 executeFilterQuery·p0.95:   77.516 ms/op
                 executeFilterQuery·p0.99:   77.857 ms/op
                 executeFilterQuery·p0.999:  77.857 ms/op
                 executeFilterQuery·p0.9999: 77.857 ms/op
                 executeFilterQuery·p1.00:   77.857 ms/op

Iteration   3: 74.835 ±(99.9%) 0.496 ms/op
                 executeFilterQuery·p0.00:   72.090 ms/op
                 executeFilterQuery·p0.50:   75.104 ms/op
                 executeFilterQuery·p0.90:   77.018 ms/op
                 executeFilterQuery·p0.95:   77.542 ms/op
                 executeFilterQuery·p0.99:   77.857 ms/op
                 executeFilterQuery·p0.999:  77.857 ms/op
                 executeFilterQuery·p0.9999: 77.857 ms/op
                 executeFilterQuery·p1.00:   77.857 ms/op

Iteration   4: 74.555 ±(99.9%) 0.391 ms/op
                 executeFilterQuery·p0.00:   71.041 ms/op
                 executeFilterQuery·p0.50:   74.187 ms/op
                 executeFilterQuery·p0.90:   75.891 ms/op
                 executeFilterQuery·p0.95:   76.716 ms/op
                 executeFilterQuery·p0.99:   82.177 ms/op
                 executeFilterQuery·p0.999:  84.673 ms/op
                 executeFilterQuery·p0.9999: 84.673 ms/op
                 executeFilterQuery·p1.00:   84.673 ms/op

Iteration   5: 75.975 ±(99.9%) 0.457 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   75.760 ms/op
                 executeFilterQuery·p0.90:   77.988 ms/op
                 executeFilterQuery·p0.95:   78.696 ms/op
                 executeFilterQuery·p0.99:   79.692 ms/op
                 executeFilterQuery·p0.999:  79.692 ms/op
                 executeFilterQuery·p0.9999: 79.692 ms/op
                 executeFilterQuery·p1.00:   79.692 ms/op


# Run progress: 47.02% complete, ETA 06:57:29
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

78.984 ±(99.9%) 3.240 ms/op
# Warmup Iteration   2: 76.919 ±(99.9%) 0.639 ms/op
# Warmup Iteration   3: 77.763 ±(99.9%) 0.371 ms/op
# Warmup Iteration   4: 77.748 ±(99.9%) 0.451 ms/op
# Warmup Iteration   5: 77.960 ±(99.9%) 0.552 ms/op
Iteration   1: 73.826 ±(99.9%) 0.553 ms/op
                 executeFilterQuery·p0.00:   71.696 ms/op
                 executeFilterQuery·p0.50:   73.400 ms/op
                 executeFilterQuery·p0.90:   76.022 ms/op
                 executeFilterQuery·p0.95:   77.627 ms/op
                 executeFilterQuery·p0.99:   81.514 ms/op
                 executeFilterQuery·p0.999:  81.789 ms/op
                 executeFilterQuery·p0.9999: 81.789 ms/op
                 executeFilterQuery·p1.00:   81.789 ms/op

Iteration   2: 73.803 ±(99.9%) 0.552 ms/op
                 executeFilterQuery·p0.00:   71.827 ms/op
                 executeFilterQuery·p0.50:   73.138 ms/op
                 executeFilterQuery·p0.90:   76.756 ms/op
                 executeFilterQuery·p0.95:   77.726 ms/op
                 executeFilterQuery·p0.99:   78.811 ms/op
                 executeFilterQuery·p0.999:  79.167 ms/op
                 executeFilterQuery·p0.9999: 79.167 ms/op
                 executeFilterQuery·p1.00:   79.167 ms/op

Iteration   3: 75.825 ±(99.9%) 0.482 ms/op
                 executeFilterQuery·p0.00:   72.745 ms/op
                 executeFilterQuery·p0.50:   76.415 ms/op
                 executeFilterQuery·p0.90:   77.857 ms/op
                 executeFilterQuery·p0.95:   78.433 ms/op
                 executeFilterQuery·p0.99:   79.036 ms/op
                 executeFilterQuery·p0.999:  79.036 ms/op
                 executeFilterQuery·p0.9999: 79.036 ms/op
                 executeFilterQuery·p1.00:   79.036 ms/op

Iteration   4: 75.920 ±(99.9%) 0.545 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   75.891 ms/op
                 executeFilterQuery·p0.90:   77.988 ms/op
                 executeFilterQuery·p0.95:   79.167 ms/op
                 executeFilterQuery·p0.99:   84.232 ms/op
                 executeFilterQuery·p0.999:  86.245 ms/op
                 executeFilterQuery·p0.9999: 86.245 ms/op
                 executeFilterQuery·p1.00:   86.245 ms/op

Iteration   5: 75.882 ±(99.9%) 0.492 ms/op
                 executeFilterQuery·p0.00:   72.876 ms/op
                 executeFilterQuery·p0.50:   75.760 ms/op
                 executeFilterQuery·p0.90:   77.857 ms/op
                 executeFilterQuery·p0.95:   78.905 ms/op
                 executeFilterQuery·p0.99:   80.221 ms/op
                 executeFilterQuery·p0.999:  80.347 ms/op
                 executeFilterQuery·p0.9999: 80.347 ms/op
                 executeFilterQuery·p1.00:   80.347 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1316
  mean =     75.341 ±(99.9%) 0.180 ms/op

  Histogram, ms/op:
    [70.000, 71.250) = 2 
    [71.250, 72.500) = 108 
    [72.500, 73.750) = 185 
    [73.750, 75.000) = 304 
    [75.000, 76.250) = 282 
    [76.250, 77.500) = 270 
    [77.500, 78.750) = 111 
    [78.750, 80.000) = 38 
    [80.000, 81.250) = 11 
    [81.250, 82.500) = 2 
    [82.500, 83.750) = 0 
    [83.750, 85.000) = 1 
    [85.000, 86.250) = 1 
    [86.250, 87.500) = 0 
    [87.500, 88.750) = 0 

  Percentiles, ms/op:
      p(0.0000) =     71.041 ms/op
     p(50.0000) =     75.235 ms/op
     p(90.0000) =     77.726 ms/op
     p(95.0000) =     78.512 ms/op
     p(99.0000) =     80.456 ms/op
     p(99.9000) =     88.483 ms/op
     p(99.9900) =     89.522 ms/op
     p(99.9990) =     89.522 ms/op
     p(99.9999) =     89.522 ms/op
    p(100.0000) =     89.522 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/)

# Run progress: 47.62% complete, ETA 06:49:31
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

82.040 ±(99.9%) 11.701 ms/op
# Warmup Iteration   2: 77.644 ±(99.9%) 0.609 ms/op
# Warmup Iteration   3: 79.169 ±(99.9%) 0.295 ms/op
# Warmup Iteration   4: 78.371 ±(99.9%) 0.279 ms/op
# Warmup Iteration   5: 78.568 ±(99.9%) 0.736 ms/op
Iteration   1: 76.545 ±(99.9%) 0.536 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   76.153 ms/op
                 executeFilterQuery·p0.90:   79.154 ms/op
                 executeFilterQuery·p0.95:   79.489 ms/op
                 executeFilterQuery·p0.99:   83.083 ms/op
                 executeFilterQuery·p0.999:  84.017 ms/op
                 executeFilterQuery·p0.9999: 84.017 ms/op
                 executeFilterQuery·p1.00:   84.017 ms/op

Iteration   2: 76.635 ±(99.9%) 0.551 ms/op
                 executeFilterQuery·p0.00:   73.794 ms/op
                 executeFilterQuery·p0.50:   76.153 ms/op
                 executeFilterQuery·p0.90:   79.561 ms/op
                 executeFilterQuery·p0.95:   79.954 ms/op
                 executeFilterQuery·p0.99:   80.478 ms/op
                 executeFilterQuery·p0.999:  80.478 ms/op
                 executeFilterQuery·p0.9999: 80.478 ms/op
                 executeFilterQuery·p1.00:   80.478 ms/op

Iteration   3: 76.606 ±(99.9%) 0.604 ms/op
                 executeFilterQuery·p0.00:   72.352 ms/op
                 executeFilterQuery·p0.50:   76.481 ms/op
                 executeFilterQuery·p0.90:   79.561 ms/op
                 executeFilterQuery·p0.95:   79.882 ms/op
                 executeFilterQuery·p0.99:   80.659 ms/op
                 executeFilterQuery·p0.999:  80.740 ms/op
                 executeFilterQuery·p0.9999: 80.740 ms/op
                 executeFilterQuery·p1.00:   80.740 ms/op

Iteration   4: 76.894 ±(99.9%) 0.559 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   76.546 ms/op
                 executeFilterQuery·p0.90:   79.285 ms/op
                 executeFilterQuery·p0.95:   80.085 ms/op
                 executeFilterQuery·p0.99:   84.349 ms/op
                 executeFilterQuery·p0.999:  85.852 ms/op
                 executeFilterQuery·p0.9999: 85.852 ms/op
                 executeFilterQuery·p1.00:   85.852 ms/op

Iteration   5: 75.469 ±(99.9%) 0.314 ms/op
                 executeFilterQuery·p0.00:   73.662 ms/op
                 executeFilterQuery·p0.50:   75.563 ms/op
                 executeFilterQuery·p0.90:   76.677 ms/op
                 executeFilterQuery·p0.95:   77.339 ms/op
                 executeFilterQuery·p0.99:   78.207 ms/op
                 executeFilterQuery·p0.999:  78.250 ms/op
                 executeFilterQuery·p0.9999: 78.250 ms/op
                 executeFilterQuery·p1.00:   78.250 ms/op


# Run progress: 48.21% complete, ETA 06:41:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

79.361 ±(99.9%) 3.969 ms/op
# Warmup Iteration   2: 77.010 ±(99.9%) 0.566 ms/op
# Warmup Iteration   3: 78.579 ±(99.9%) 0.265 ms/op
# Warmup Iteration   4: 78.110 ±(99.9%) 0.274 ms/op
# Warmup Iteration   5: 78.105 ±(99.9%) 0.320 ms/op
Iteration   1: 75.374 ±(99.9%) 0.520 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   74.711 ms/op
                 executeFilterQuery·p0.90:   76.900 ms/op
                 executeFilterQuery·p0.95:   77.817 ms/op
                 executeFilterQuery·p0.99:   86.844 ms/op
                 executeFilterQuery·p0.999:  89.915 ms/op
                 executeFilterQuery·p0.9999: 89.915 ms/op
                 executeFilterQuery·p1.00:   89.915 ms/op

Iteration   2: 76.342 ±(99.9%) 0.555 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   76.415 ms/op
                 executeFilterQuery·p0.90:   79.023 ms/op
                 executeFilterQuery·p0.95:   79.489 ms/op
                 executeFilterQuery·p0.99:   80.004 ms/op
                 executeFilterQuery·p0.999:  80.085 ms/op
                 executeFilterQuery·p0.9999: 80.085 ms/op
                 executeFilterQuery·p1.00:   80.085 ms/op

Iteration   3: 75.123 ±(99.9%) 0.357 ms/op
                 executeFilterQuery·p0.00:   72.090 ms/op
                 executeFilterQuery·p0.50:   74.973 ms/op
                 executeFilterQuery·p0.90:   76.520 ms/op
                 executeFilterQuery·p0.95:   76.782 ms/op
                 executeFilterQuery·p0.99:   79.749 ms/op
                 executeFilterQuery·p0.999:  80.085 ms/op
                 executeFilterQuery·p0.9999: 80.085 ms/op
                 executeFilterQuery·p1.00:   80.085 ms/op

Iteration   4: 75.225 ±(99.9%) 0.497 ms/op
                 executeFilterQuery·p0.00:   72.090 ms/op
                 executeFilterQuery·p0.50:   74.711 ms/op
                 executeFilterQuery·p0.90:   77.044 ms/op
                 executeFilterQuery·p0.95:   77.962 ms/op
                 executeFilterQuery·p0.99:   83.629 ms/op
                 executeFilterQuery·p0.999:  85.852 ms/op
                 executeFilterQuery·p0.9999: 85.852 ms/op
                 executeFilterQuery·p1.00:   85.852 ms/op

Iteration   5: 75.710 ±(99.9%) 0.869 ms/op
                 executeFilterQuery·p0.00:   73.531 ms/op
                 executeFilterQuery·p0.50:   75.104 ms/op
                 executeFilterQuery·p0.90:   77.464 ms/op
                 executeFilterQuery·p0.95:   79.482 ms/op
                 executeFilterQuery·p0.99:   97.161 ms/op
                 executeFilterQuery·p0.999:  100.794 ms/op
                 executeFilterQuery·p0.9999: 100.794 ms/op
                 executeFilterQuery·p1.00:   100.794 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 1307
  mean =     75.988 ±(99.9%) 0.181 ms/op

  Histogram, ms/op:
    [ 70.000,  72.500) = 3 
    [ 72.500,  75.000) = 462 
    [ 75.000,  77.500) = 600 
    [ 77.500,  80.000) = 212 
    [ 80.000,  82.500) = 24 
    [ 82.500,  85.000) = 1 
    [ 85.000,  87.500) = 2 
    [ 87.500,  90.000) = 2 
    [ 90.000,  92.500) = 0 
    [ 92.500,  95.000) = 0 
    [ 95.000,  97.500) = 0 
    [ 97.500, 100.000) = 0 
    [100.000, 102.500) = 1 
    [102.500, 105.000) = 0 
    [105.000, 107.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     72.090 ms/op
     p(50.0000) =     75.760 ms/op
     p(90.0000) =     78.643 ms/op
     p(95.0000) =     79.430 ms/op
     p(99.0000) =     80.609 ms/op
     p(99.9000) =     97.444 ms/op
     p(99.9900) =    100.794 ms/op
     p(99.9990) =    100.794 ms/op
     p(99.9999) =    100.794 ms/op
    p(100.0000) =    100.794 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/)

# Run progress: 48.81% complete, ETA 06:34:01
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

116.284 ±(99.9%) 15.135 ms/op
# Warmup Iteration   2: 123.088 ±(99.9%) 0.274 ms/op
# Warmup Iteration   3: 123.161 ±(99.9%) 0.429 ms/op
# Warmup Iteration   4: 122.861 ±(99.9%) 0.131 ms/op
# Warmup Iteration   5: 122.871 ±(99.9%) 0.199 ms/op
Iteration   1: 122.950 ±(99.9%) 0.115 ms/op
                 executeFilterQuery·p0.00:   122.290 ms/op
                 executeFilterQuery·p0.50:   122.814 ms/op
                 executeFilterQuery·p0.90:   123.444 ms/op
                 executeFilterQuery·p0.95:   123.601 ms/op
                 executeFilterQuery·p0.99:   123.732 ms/op
                 executeFilterQuery·p0.999:  123.732 ms/op
                 executeFilterQuery·p0.9999: 123.732 ms/op
                 executeFilterQuery·p1.00:   123.732 ms/op

Iteration   2: 123.007 ±(99.9%) 0.092 ms/op
                 executeFilterQuery·p0.00:   122.421 ms/op
                 executeFilterQuery·p0.50:   122.946 ms/op
                 executeFilterQuery·p0.90:   123.339 ms/op
                 executeFilterQuery·p0.95:   123.470 ms/op
                 executeFilterQuery·p0.99:   123.732 ms/op
                 executeFilterQuery·p0.999:  123.732 ms/op
                 executeFilterQuery·p0.9999: 123.732 ms/op
                 executeFilterQuery·p1.00:   123.732 ms/op

Iteration   3: 122.869 ±(99.9%) 0.083 ms/op
                 executeFilterQuery·p0.00:   122.290 ms/op
                 executeFilterQuery·p0.50:   122.946 ms/op
                 executeFilterQuery·p0.90:   123.077 ms/op
                 executeFilterQuery·p0.95:   123.208 ms/op
                 executeFilterQuery·p0.99:   123.339 ms/op
                 executeFilterQuery·p0.999:  123.339 ms/op
                 executeFilterQuery·p0.9999: 123.339 ms/op
                 executeFilterQuery·p1.00:   123.339 ms/op

Iteration   4: 123.455 ±(99.9%) 0.859 ms/op
                 executeFilterQuery·p0.00:   122.552 ms/op
                 executeFilterQuery·p0.50:   123.077 ms/op
                 executeFilterQuery·p0.90:   123.470 ms/op
                 executeFilterQuery·p0.95:   123.601 ms/op
                 executeFilterQuery·p0.99:   139.985 ms/op
                 executeFilterQuery·p0.999:  139.985 ms/op
                 executeFilterQuery·p0.9999: 139.985 ms/op
                 executeFilterQuery·p1.00:   139.985 ms/op

Iteration   5: 123.109 ±(99.9%) 0.109 ms/op
                 executeFilterQuery·p0.00:   122.421 ms/op
                 executeFilterQuery·p0.50:   123.077 ms/op
                 executeFilterQuery·p0.90:   123.444 ms/op
                 executeFilterQuery·p0.95:   123.601 ms/op
                 executeFilterQuery·p0.99:   124.125 ms/op
                 executeFilterQuery·p0.999:  124.125 ms/op
                 executeFilterQuery·p0.9999: 124.125 ms/op
                 executeFilterQuery·p1.00:   124.125 ms/op


# Run progress: 49.40% complete, ETA 06:26:30
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

109.069 ±(99.9%) 5.278 ms/op
# Warmup Iteration   2: 117.633 ±(99.9%) 0.440 ms/op
# Warmup Iteration   3: 117.473 ±(99.9%) 0.148 ms/op
# Warmup Iteration   4: 117.154 ±(99.9%) 0.085 ms/op
# Warmup Iteration   5: 117.007 ±(99.9%) 0.118 ms/op
Iteration   1: 117.083 ±(99.9%) 0.107 ms/op
                 executeFilterQuery·p0.00:   116.261 ms/op
                 executeFilterQuery·p0.50:   117.047 ms/op
                 executeFilterQuery·p0.90:   117.441 ms/op
                 executeFilterQuery·p0.95:   117.663 ms/op
                 executeFilterQuery·p0.99:   117.834 ms/op
                 executeFilterQuery·p0.999:  117.834 ms/op
                 executeFilterQuery·p0.9999: 117.834 ms/op
                 executeFilterQuery·p1.00:   117.834 ms/op

Iteration   2: 116.961 ±(99.9%) 0.113 ms/op
                 executeFilterQuery·p0.00:   116.523 ms/op
                 executeFilterQuery·p0.50:   116.916 ms/op
                 executeFilterQuery·p0.90:   117.309 ms/op
                 executeFilterQuery·p0.95:   117.663 ms/op
                 executeFilterQuery·p0.99:   117.834 ms/op
                 executeFilterQuery·p0.999:  117.834 ms/op
                 executeFilterQuery·p0.9999: 117.834 ms/op
                 executeFilterQuery·p1.00:   117.834 ms/op

Iteration   3: 117.177 ±(99.9%) 0.540 ms/op
                 executeFilterQuery·p0.00:   116.392 ms/op
                 executeFilterQuery·p0.50:   116.916 ms/op
                 executeFilterQuery·p0.90:   117.441 ms/op
                 executeFilterQuery·p0.95:   117.703 ms/op
                 executeFilterQuery·p0.99:   126.616 ms/op
                 executeFilterQuery·p0.999:  126.616 ms/op
                 executeFilterQuery·p0.9999: 126.616 ms/op
                 executeFilterQuery·p1.00:   126.616 ms/op

Iteration   4: 116.839 ±(99.9%) 0.081 ms/op
                 executeFilterQuery·p0.00:   116.392 ms/op
                 executeFilterQuery·p0.50:   116.785 ms/op
                 executeFilterQuery·p0.90:   117.178 ms/op
                 executeFilterQuery·p0.95:   117.178 ms/op
                 executeFilterQuery·p0.99:   117.703 ms/op
                 executeFilterQuery·p0.999:  117.703 ms/op
                 executeFilterQuery·p0.9999: 117.703 ms/op
                 executeFilterQuery·p1.00:   117.703 ms/op

Iteration   5: 116.970 ±(99.9%) 0.065 ms/op
                 executeFilterQuery·p0.00:   116.523 ms/op
                 executeFilterQuery·p0.50:   116.916 ms/op
                 executeFilterQuery·p0.90:   117.178 ms/op
                 executeFilterQuery·p0.95:   117.270 ms/op
                 executeFilterQuery·p0.99:   117.572 ms/op
                 executeFilterQuery·p0.999:  117.572 ms/op
                 executeFilterQuery·p0.9999: 117.572 ms/op
                 executeFilterQuery·p1.00:   117.572 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 830
  mean =    119.969 ±(99.9%) 0.363 ms/op

  Histogram, ms/op:
    [110.000, 112.500) = 0 
    [112.500, 115.000) = 0 
    [115.000, 117.500) = 405 
    [117.500, 120.000) = 18 
    [120.000, 122.500) = 10 
    [122.500, 125.000) = 393 
    [125.000, 127.500) = 2 
    [127.500, 130.000) = 0 
    [130.000, 132.500) = 0 
    [132.500, 135.000) = 1 
    [135.000, 137.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    116.261 ms/op
     p(50.0000) =    117.703 ms/op
     p(90.0000) =    123.208 ms/op
     p(95.0000) =    123.339 ms/op
     p(99.0000) =    123.732 ms/op
     p(99.9000) =    139.985 ms/op
     p(99.9900) =    139.985 ms/op
     p(99.9990) =    139.985 ms/op
     p(99.9999) =    139.985 ms/op
    p(100.0000) =    139.985 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/)

# Run progress: 50.00% complete, ETA 06:19:07
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1108.811 ±(99.9%) 1706.676 ms/op
# Warmup Iteration   2: 729.210 ±(99.9%) 12.627 ms/op
# Warmup Iteration   3: 756.922 ±(99.9%) 12.370 ms/op
# Warmup Iteration   4: 757.147 ±(99.9%) 8.990 ms/op
# Warmup Iteration   5: 763.588 ±(99.9%) 4.526 ms/op
Iteration   1: 761.790 ±(99.9%) 9.916 ms/op
                 executeFilterQuery·p0.00:   731.906 ms/op
                 executeFilterQuery·p0.50:   764.412 ms/op
                 executeFilterQuery·p0.90:   765.985 ms/op
                 executeFilterQuery·p0.95:   766.509 ms/op
                 executeFilterQuery·p0.99:   766.509 ms/op
                 executeFilterQuery·p0.999:  766.509 ms/op
                 executeFilterQuery·p0.9999: 766.509 ms/op
                 executeFilterQuery·p1.00:   766.509 ms/op

Iteration   2: 726.888 ±(99.9%) 9.963 ms/op
                 executeFilterQuery·p0.00:   709.886 ms/op
                 executeFilterQuery·p0.50:   728.236 ms/op
                 executeFilterQuery·p0.90:   737.673 ms/op
                 executeFilterQuery·p0.95:   738.198 ms/op
                 executeFilterQuery·p0.99:   738.198 ms/op
                 executeFilterQuery·p0.999:  738.198 ms/op
                 executeFilterQuery·p0.9999: 738.198 ms/op
                 executeFilterQuery·p1.00:   738.198 ms/op

Iteration   3: 730.708 ±(99.9%) 8.477 ms/op
                 executeFilterQuery·p0.00:   716.177 ms/op
                 executeFilterQuery·p0.50:   730.857 ms/op
                 executeFilterQuery·p0.90:   740.819 ms/op
                 executeFilterQuery·p0.95:   741.343 ms/op
                 executeFilterQuery·p0.99:   741.343 ms/op
                 executeFilterQuery·p0.999:  741.343 ms/op
                 executeFilterQuery·p0.9999: 741.343 ms/op
                 executeFilterQuery·p1.00:   741.343 ms/op

Iteration   4: 729.809 ±(99.9%) 15.897 ms/op
                 executeFilterQuery·p0.00:   707.789 ms/op
                 executeFilterQuery·p0.50:   735.052 ms/op
                 executeFilterQuery·p0.90:   745.013 ms/op
                 executeFilterQuery·p0.95:   745.538 ms/op
                 executeFilterQuery·p0.99:   745.538 ms/op
                 executeFilterQuery·p0.999:  745.538 ms/op
                 executeFilterQuery·p0.9999: 745.538 ms/op
                 executeFilterQuery·p1.00:   745.538 ms/op

Iteration   5: 736.325 ±(99.9%) 4.667 ms/op
                 executeFilterQuery·p0.00:   726.663 ms/op
                 executeFilterQuery·p0.50:   736.625 ms/op
                 executeFilterQuery·p0.90:   740.819 ms/op
                 executeFilterQuery·p0.95:   741.343 ms/op
                 executeFilterQuery·p0.99:   741.343 ms/op
                 executeFilterQuery·p0.999:  741.343 ms/op
                 executeFilterQuery·p0.9999: 741.343 ms/op
                 executeFilterQuery·p1.00:   741.343 ms/op


# Run progress: 50.60% complete, ETA 06:11:55
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

778.043 ±(99.9%) 61.564 ms/op
# Warmup Iteration   2: 749.432 ±(99.9%) 17.670 ms/op
# Warmup Iteration   3: 760.742 ±(99.9%) 16.263 ms/op
# Warmup Iteration   4: 771.268 ±(99.9%) 4.024 ms/op
# Warmup Iteration   5: 770.300 ±(99.9%) 4.275 ms/op
Iteration   1: 774.091 ±(99.9%) 4.474 ms/op
                 executeFilterQuery·p0.00:   767.558 ms/op
                 executeFilterQuery·p0.50:   774.898 ms/op
                 executeFilterQuery·p0.90:   780.770 ms/op
                 executeFilterQuery·p0.95:   783.286 ms/op
                 executeFilterQuery·p0.99:   783.286 ms/op
                 executeFilterQuery·p0.999:  783.286 ms/op
                 executeFilterQuery·p0.9999: 783.286 ms/op
                 executeFilterQuery·p1.00:   783.286 ms/op

Iteration   2: 772.236 ±(99.9%) 4.153 ms/op
                 executeFilterQuery·p0.00:   766.509 ms/op
                 executeFilterQuery·p0.50:   773.849 ms/op
                 executeFilterQuery·p0.90:   776.575 ms/op
                 executeFilterQuery·p0.95:   776.995 ms/op
                 executeFilterQuery·p0.99:   776.995 ms/op
                 executeFilterQuery·p0.999:  776.995 ms/op
                 executeFilterQuery·p0.9999: 776.995 ms/op
                 executeFilterQuery·p1.00:   776.995 ms/op

Iteration   3: 773.284 ±(99.9%) 3.500 ms/op
                 executeFilterQuery·p0.00:   768.606 ms/op
                 executeFilterQuery·p0.50:   773.849 ms/op
                 executeFilterQuery·p0.90:   776.995 ms/op
                 executeFilterQuery·p0.95:   776.995 ms/op
                 executeFilterQuery·p0.99:   776.995 ms/op
                 executeFilterQuery·p0.999:  776.995 ms/op
                 executeFilterQuery·p0.9999: 776.995 ms/op
                 executeFilterQuery·p1.00:   776.995 ms/op

Iteration   4: 769.735 ±(99.9%) 5.061 ms/op
                 executeFilterQuery·p0.00:   764.412 ms/op
                 executeFilterQuery·p0.50:   768.606 ms/op
                 executeFilterQuery·p0.90:   776.785 ms/op
                 executeFilterQuery·p0.95:   778.043 ms/op
                 executeFilterQuery·p0.99:   778.043 ms/op
                 executeFilterQuery·p0.999:  778.043 ms/op
                 executeFilterQuery·p0.9999: 778.043 ms/op
                 executeFilterQuery·p1.00:   778.043 ms/op

Iteration   5: 769.816 ±(99.9%) 12.639 ms/op
                 executeFilterQuery·p0.00:   738.198 ms/op
                 executeFilterQuery·p0.50:   772.801 ms/op
                 executeFilterQuery·p0.90:   777.624 ms/op
                 executeFilterQuery·p0.95:   778.043 ms/op
                 executeFilterQuery·p0.99:   778.043 ms/op
                 executeFilterQuery·p0.999:  778.043 ms/op
                 executeFilterQuery·p0.9999: 778.043 ms/op
                 executeFilterQuery·p1.00:   778.043 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 135
  mean =    753.825 ±(99.9%) 6.112 ms/op

  Histogram, ms/op:
    [700.000, 705.000) = 0 
    [705.000, 710.000) = 3 
    [710.000, 715.000) = 2 
    [715.000, 720.000) = 3 
    [720.000, 725.000) = 7 
    [725.000, 730.000) = 9 
    [730.000, 735.000) = 6 
    [735.000, 740.000) = 18 
    [740.000, 745.000) = 9 
    [745.000, 750.000) = 1 
    [750.000, 755.000) = 0 
    [755.000, 760.000) = 0 
    [760.000, 765.000) = 12 
    [765.000, 770.000) = 23 
    [770.000, 775.000) = 29 
    [775.000, 780.000) = 12 
    [780.000, 785.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    707.789 ms/op
     p(50.0000) =    764.412 ms/op
     p(90.0000) =    775.317 ms/op
     p(95.0000) =    776.995 ms/op
     p(99.0000) =    781.399 ms/op
     p(99.9000) =    783.286 ms/op
     p(99.9900) =    783.286 ms/op
     p(99.9990) =    783.286 ms/op
     p(99.9999) =    783.286 ms/op
    p(100.0000) =    783.286 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/)

# Run progress: 51.19% complete, ETA 06:04:50
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1051.302 ±(99.9%) 1420.557 ms/op
# Warmup Iteration   2: 718.349 ±(99.9%) 5.050 ms/op
# Warmup Iteration   3: 749.957 ±(99.9%) 13.804 ms/op
# Warmup Iteration   4: 752.653 ±(99.9%) 3.996 ms/op
# Warmup Iteration   5: 755.873 ±(99.9%) 5.184 ms/op
Iteration   1: 732.355 ±(99.9%) 22.074 ms/op
                 executeFilterQuery·p0.00:   709.886 ms/op
                 executeFilterQuery·p0.50:   721.945 ms/op
                 executeFilterQuery·p0.90:   758.120 ms/op
                 executeFilterQuery·p0.95:   758.120 ms/op
                 executeFilterQuery·p0.99:   758.120 ms/op
                 executeFilterQuery·p0.999:  758.120 ms/op
                 executeFilterQuery·p0.9999: 758.120 ms/op
                 executeFilterQuery·p1.00:   758.120 ms/op

Iteration   2: 722.544 ±(99.9%) 3.782 ms/op
                 executeFilterQuery·p0.00:   716.177 ms/op
                 executeFilterQuery·p0.50:   724.042 ms/op
                 executeFilterQuery·p0.90:   726.139 ms/op
                 executeFilterQuery·p0.95:   726.663 ms/op
                 executeFilterQuery·p0.99:   726.663 ms/op
                 executeFilterQuery·p0.999:  726.663 ms/op
                 executeFilterQuery·p0.9999: 726.663 ms/op
                 executeFilterQuery·p1.00:   726.663 ms/op

Iteration   3: 722.244 ±(99.9%) 4.049 ms/op
                 executeFilterQuery·p0.00:   715.129 ms/op
                 executeFilterQuery·p0.50:   722.469 ms/op
                 executeFilterQuery·p0.90:   726.663 ms/op
                 executeFilterQuery·p0.95:   726.663 ms/op
                 executeFilterQuery·p0.99:   726.663 ms/op
                 executeFilterQuery·p0.999:  726.663 ms/op
                 executeFilterQuery·p0.9999: 726.663 ms/op
                 executeFilterQuery·p1.00:   726.663 ms/op

Iteration   4: 719.698 ±(99.9%) 4.537 ms/op
                 executeFilterQuery·p0.00:   714.080 ms/op
                 executeFilterQuery·p0.50:   720.372 ms/op
                 executeFilterQuery·p0.90:   725.090 ms/op
                 executeFilterQuery·p0.95:   725.615 ms/op
                 executeFilterQuery·p0.99:   725.615 ms/op
                 executeFilterQuery·p0.999:  725.615 ms/op
                 executeFilterQuery·p0.9999: 725.615 ms/op
                 executeFilterQuery·p1.00:   725.615 ms/op

Iteration   5: 748.309 ±(99.9%) 14.894 ms/op
                 executeFilterQuery·p0.00:   711.983 ms/op
                 executeFilterQuery·p0.50:   752.353 ms/op
                 executeFilterQuery·p0.90:   757.596 ms/op
                 executeFilterQuery·p0.95:   759.169 ms/op
                 executeFilterQuery·p0.99:   759.169 ms/op
                 executeFilterQuery·p0.999:  759.169 ms/op
                 executeFilterQuery·p0.9999: 759.169 ms/op
                 executeFilterQuery·p1.00:   759.169 ms/op


# Run progress: 51.79% complete, ETA 05:57:52
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

760.517 ±(99.9%) 60.639 ms/op
# Warmup Iteration   2: 725.764 ±(99.9%) 12.998 ms/op
# Warmup Iteration   3: 754.675 ±(99.9%) 10.845 ms/op
# Warmup Iteration   4: 758.570 ±(99.9%) 10.193 ms/op
# Warmup Iteration   5: 756.023 ±(99.9%) 2.705 ms/op
Iteration   1: 754.975 ±(99.9%) 2.897 ms/op
                 executeFilterQuery·p0.00:   750.780 ms/op
                 executeFilterQuery·p0.50:   754.450 ms/op
                 executeFilterQuery·p0.90:   759.169 ms/op
                 executeFilterQuery·p0.95:   759.169 ms/op
                 executeFilterQuery·p0.99:   759.169 ms/op
                 executeFilterQuery·p0.999:  759.169 ms/op
                 executeFilterQuery·p0.9999: 759.169 ms/op
                 executeFilterQuery·p1.00:   759.169 ms/op

Iteration   2: 755.349 ±(99.9%) 3.521 ms/op
                 executeFilterQuery·p0.00:   749.732 ms/op
                 executeFilterQuery·p0.50:   757.072 ms/op
                 executeFilterQuery·p0.90:   758.645 ms/op
                 executeFilterQuery·p0.95:   759.169 ms/op
                 executeFilterQuery·p0.99:   759.169 ms/op
                 executeFilterQuery·p0.999:  759.169 ms/op
                 executeFilterQuery·p0.9999: 759.169 ms/op
                 executeFilterQuery·p1.00:   759.169 ms/op

Iteration   3: 751.979 ±(99.9%) 1.905 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   751.829 ms/op
                 executeFilterQuery·p0.90:   754.450 ms/op
                 executeFilterQuery·p0.95:   754.975 ms/op
                 executeFilterQuery·p0.99:   754.975 ms/op
                 executeFilterQuery·p0.999:  754.975 ms/op
                 executeFilterQuery·p0.9999: 754.975 ms/op
                 executeFilterQuery·p1.00:   754.975 ms/op

Iteration   4: 754.001 ±(99.9%) 2.561 ms/op
                 executeFilterQuery·p0.00:   748.683 ms/op
                 executeFilterQuery·p0.50:   753.926 ms/op
                 executeFilterQuery·p0.90:   757.072 ms/op
                 executeFilterQuery·p0.95:   757.072 ms/op
                 executeFilterQuery·p0.99:   757.072 ms/op
                 executeFilterQuery·p0.999:  757.072 ms/op
                 executeFilterQuery·p0.9999: 757.072 ms/op
                 executeFilterQuery·p1.00:   757.072 ms/op

Iteration   5: 726.813 ±(99.9%) 19.408 ms/op
                 executeFilterQuery·p0.00:   714.080 ms/op
                 executeFilterQuery·p0.50:   716.177 ms/op
                 executeFilterQuery·p0.90:   754.450 ms/op
                 executeFilterQuery·p0.95:   754.975 ms/op
                 executeFilterQuery·p0.99:   754.975 ms/op
                 executeFilterQuery·p0.999:  754.975 ms/op
                 executeFilterQuery·p0.9999: 754.975 ms/op
                 executeFilterQuery·p1.00:   754.975 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 140
  mean =    738.827 ±(99.9%) 4.915 ms/op

  Histogram, ms/op:
    [700.000, 705.000) = 0 
    [705.000, 710.000) = 1 
    [710.000, 715.000) = 7 
    [715.000, 720.000) = 22 
    [720.000, 725.000) = 24 
    [725.000, 730.000) = 9 
    [730.000, 735.000) = 0 
    [735.000, 740.000) = 0 
    [740.000, 745.000) = 0 
    [745.000, 750.000) = 6 
    [750.000, 755.000) = 47 

  Percentiles, ms/op:
      p(0.0000) =    709.886 ms/op
     p(50.0000) =    750.780 ms/op
     p(90.0000) =    757.072 ms/op
     p(95.0000) =    758.120 ms/op
     p(99.0000) =    759.169 ms/op
     p(99.9000) =    759.169 ms/op
     p(99.9900) =    759.169 ms/op
     p(99.9990) =    759.169 ms/op
     p(99.9999) =    759.169 ms/op
    p(100.0000) =    759.169 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/)

# Run progress: 52.38% complete, ETA 05:51:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1382.285 ±(99.9%) 1753.757 ms/op
# Warmup Iteration   2: 1171.376 ±(99.9%) 7.073 ms/op
# Warmup Iteration   3: 1169.279 ±(99.9%) 8.096 ms/op
# Warmup Iteration   4: 1170.444 ±(99.9%) 4.473 ms/op
# Warmup Iteration   5: 1174.405 ±(99.9%) 18.896 ms/op
Iteration   1: 1191.648 ±(99.9%) 88.433 ms/op
                 executeFilterQuery·p0.00:   1168.114 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1331.692 ms/op
                 executeFilterQuery·p0.95:   1331.692 ms/op
                 executeFilterQuery·p0.99:   1331.692 ms/op
                 executeFilterQuery·p0.999:  1331.692 ms/op
                 executeFilterQuery·p0.9999: 1331.692 ms/op
                 executeFilterQuery·p1.00:   1331.692 ms/op

Iteration   2: 1173.007 ±(99.9%) 9.156 ms/op
                 executeFilterQuery·p0.00:   1166.017 ms/op
                 executeFilterQuery·p0.50:   1174.405 ms/op
                 executeFilterQuery·p0.90:   1184.891 ms/op
                 executeFilterQuery·p0.95:   1184.891 ms/op
                 executeFilterQuery·p0.99:   1184.891 ms/op
                 executeFilterQuery·p0.999:  1184.891 ms/op
                 executeFilterQuery·p0.9999: 1184.891 ms/op
                 executeFilterQuery·p1.00:   1184.891 ms/op

Iteration   3: 1177.667 ±(99.9%) 24.039 ms/op
                 executeFilterQuery·p0.00:   1168.114 ms/op
                 executeFilterQuery·p0.50:   1172.308 ms/op
                 executeFilterQuery·p0.90:   1214.251 ms/op
                 executeFilterQuery·p0.95:   1214.251 ms/op
                 executeFilterQuery·p0.99:   1214.251 ms/op
                 executeFilterQuery·p0.999:  1214.251 ms/op
                 executeFilterQuery·p0.9999: 1214.251 ms/op
                 executeFilterQuery·p1.00:   1214.251 ms/op

Iteration   4: 1172.075 ±(99.9%) 7.360 ms/op
                 executeFilterQuery·p0.00:   1166.017 ms/op
                 executeFilterQuery·p0.50:   1172.308 ms/op
                 executeFilterQuery·p0.90:   1180.697 ms/op
                 executeFilterQuery·p0.95:   1180.697 ms/op
                 executeFilterQuery·p0.99:   1180.697 ms/op
                 executeFilterQuery·p0.999:  1180.697 ms/op
                 executeFilterQuery·p0.9999: 1180.697 ms/op
                 executeFilterQuery·p1.00:   1180.697 ms/op

Iteration   5: 1178.366 ±(99.9%) 28.272 ms/op
                 executeFilterQuery·p0.00:   1168.114 ms/op
                 executeFilterQuery·p0.50:   1172.308 ms/op
                 executeFilterQuery·p0.90:   1222.640 ms/op
                 executeFilterQuery·p0.95:   1222.640 ms/op
                 executeFilterQuery·p0.99:   1222.640 ms/op
                 executeFilterQuery·p0.999:  1222.640 ms/op
                 executeFilterQuery·p0.9999: 1222.640 ms/op
                 executeFilterQuery·p1.00:   1222.640 ms/op


# Run progress: 52.98% complete, ETA 05:44:23
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1110.652 ±(99.9%) 173.961 ms/op
# Warmup Iteration   2: 1238.485 ±(99.9%) 39.445 ms/op
# Warmup Iteration   3: 1224.970 ±(99.9%) 3.270 ms/op
# Warmup Iteration   4: 1223.572 ±(99.9%) 2.560 ms/op
# Warmup Iteration   5: 1223.106 ±(99.9%) 2.937 ms/op
Iteration   1: 1225.436 ±(99.9%) 5.844 ms/op
                 executeFilterQuery·p0.00:   1220.542 ms/op
                 executeFilterQuery·p0.50:   1224.737 ms/op
                 executeFilterQuery·p0.90:   1233.125 ms/op
                 executeFilterQuery·p0.95:   1233.125 ms/op
                 executeFilterQuery·p0.99:   1233.125 ms/op
                 executeFilterQuery·p0.999:  1233.125 ms/op
                 executeFilterQuery·p0.9999: 1233.125 ms/op
                 executeFilterQuery·p1.00:   1233.125 ms/op

Iteration   2: 1222.873 ±(99.9%) 3.715 ms/op
                 executeFilterQuery·p0.00:   1220.542 ms/op
                 executeFilterQuery·p0.50:   1222.640 ms/op
                 executeFilterQuery·p0.90:   1226.834 ms/op
                 executeFilterQuery·p0.95:   1226.834 ms/op
                 executeFilterQuery·p0.99:   1226.834 ms/op
                 executeFilterQuery·p0.999:  1226.834 ms/op
                 executeFilterQuery·p0.9999: 1226.834 ms/op
                 executeFilterQuery·p1.00:   1226.834 ms/op

Iteration   3: 1223.106 ±(99.9%) 2.937 ms/op
                 executeFilterQuery·p0.00:   1220.542 ms/op
                 executeFilterQuery·p0.50:   1222.640 ms/op
                 executeFilterQuery·p0.90:   1224.737 ms/op
                 executeFilterQuery·p0.95:   1224.737 ms/op
                 executeFilterQuery·p0.99:   1224.737 ms/op
                 executeFilterQuery·p0.999:  1224.737 ms/op
                 executeFilterQuery·p0.9999: 1224.737 ms/op
                 executeFilterQuery·p1.00:   1224.737 ms/op

Iteration   4: 1224.737 ±(99.9%) 9.651 ms/op
                 executeFilterQuery·p0.00:   1218.445 ms/op
                 executeFilterQuery·p0.50:   1222.640 ms/op
                 executeFilterQuery·p0.90:   1235.223 ms/op
                 executeFilterQuery·p0.95:   1235.223 ms/op
                 executeFilterQuery·p0.99:   1235.223 ms/op
                 executeFilterQuery·p0.999:  1235.223 ms/op
                 executeFilterQuery·p0.9999: 1235.223 ms/op
                 executeFilterQuery·p1.00:   1235.223 ms/op

Iteration   5: 1222.873 ±(99.9%) 3.270 ms/op
                 executeFilterQuery·p0.00:   1220.542 ms/op
                 executeFilterQuery·p0.50:   1222.640 ms/op
                 executeFilterQuery·p0.90:   1226.834 ms/op
                 executeFilterQuery·p0.95:   1226.834 ms/op
                 executeFilterQuery·p0.99:   1226.834 ms/op
                 executeFilterQuery·p0.999:  1226.834 ms/op
                 executeFilterQuery·p0.9999: 1226.834 ms/op
                 executeFilterQuery·p1.00:   1226.834 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 90
  mean =   1201.179 ±(99.9%) 10.430 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 32 
    [1175.000, 1200.000) = 10 
    [1200.000, 1225.000) = 40 
    [1225.000, 1250.000) = 7 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1166.017 ms/op
     p(50.0000) =   1220.542 ms/op
     p(90.0000) =   1224.737 ms/op
     p(95.0000) =   1229.665 ms/op
     p(99.0000) =   1331.692 ms/op
     p(99.9000) =   1331.692 ms/op
     p(99.9900) =   1331.692 ms/op
     p(99.9990) =   1331.692 ms/op
     p(99.9999) =   1331.692 ms/op
    p(100.0000) =   1331.692 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/)

# Run progress: 53.57% complete, ETA 05:37:53
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

3509.933 ±(99.9%) 63430.028 ms/op
# Warmup Iteration   2: 1416.626 ±(99.9%) 66.614 ms/op
# Warmup Iteration   3: 1427.861 ±(99.9%) 56.114 ms/op
# Warmup Iteration   4: 1456.023 ±(99.9%) 22.932 ms/op
# Warmup Iteration   5: 1470.403 ±(99.9%) 42.895 ms/op
Iteration   1: 1455.124 ±(99.9%) 84.379 ms/op
                 executeFilterQuery·p0.00:   1407.189 ms/op
                 executeFilterQuery·p0.50:   1457.521 ms/op
                 executeFilterQuery·p0.90:   1493.172 ms/op
                 executeFilterQuery·p0.95:   1493.172 ms/op
                 executeFilterQuery·p0.99:   1493.172 ms/op
                 executeFilterQuery·p0.999:  1493.172 ms/op
                 executeFilterQuery·p0.9999: 1493.172 ms/op
                 executeFilterQuery·p1.00:   1493.172 ms/op

Iteration   2: 1405.616 ±(99.9%) 40.311 ms/op
                 executeFilterQuery·p0.00:   1373.635 ms/op
                 executeFilterQuery·p0.50:   1413.480 ms/op
                 executeFilterQuery·p0.90:   1426.063 ms/op
                 executeFilterQuery·p0.95:   1426.063 ms/op
                 executeFilterQuery·p0.99:   1426.063 ms/op
                 executeFilterQuery·p0.999:  1426.063 ms/op
                 executeFilterQuery·p0.9999: 1426.063 ms/op
                 executeFilterQuery·p1.00:   1426.063 ms/op

Iteration   3: 1399.325 ±(99.9%) 40.652 ms/op
                 executeFilterQuery·p0.00:   1373.635 ms/op
                 executeFilterQuery·p0.50:   1394.606 ms/op
                 executeFilterQuery·p0.90:   1430.258 ms/op
                 executeFilterQuery·p0.95:   1430.258 ms/op
                 executeFilterQuery·p0.99:   1430.258 ms/op
                 executeFilterQuery·p0.999:  1430.258 ms/op
                 executeFilterQuery·p0.9999: 1430.258 ms/op
                 executeFilterQuery·p1.00:   1430.258 ms/op

Iteration   4: 1428.685 ±(99.9%) 25.697 ms/op
                 executeFilterQuery·p0.00:   1415.578 ms/op
                 executeFilterQuery·p0.50:   1427.112 ms/op
                 executeFilterQuery·p0.90:   1459.618 ms/op
                 executeFilterQuery·p0.95:   1459.618 ms/op
                 executeFilterQuery·p0.99:   1459.618 ms/op
                 executeFilterQuery·p0.999:  1459.618 ms/op
                 executeFilterQuery·p0.9999: 1459.618 ms/op
                 executeFilterQuery·p1.00:   1459.618 ms/op

Iteration   5: 1467.108 ±(99.9%) 43.019 ms/op
                 executeFilterQuery·p0.00:   1432.355 ms/op
                 executeFilterQuery·p0.50:   1472.201 ms/op
                 executeFilterQuery·p0.90:   1493.172 ms/op
                 executeFilterQuery·p0.95:   1493.172 ms/op
                 executeFilterQuery·p0.99:   1493.172 ms/op
                 executeFilterQuery·p0.999:  1493.172 ms/op
                 executeFilterQuery·p0.9999: 1493.172 ms/op
                 executeFilterQuery·p1.00:   1493.172 ms/op


# Run progress: 54.17% complete, ETA 05:31:25
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1469.804 ±(99.9%) 211.290 ms/op
# Warmup Iteration   2: 1403.519 ±(99.9%) 57.859 ms/op
# Warmup Iteration   3: 1491.075 ±(99.9%) 44.974 ms/op
# Warmup Iteration   4: 1463.213 ±(99.9%) 64.688 ms/op
# Warmup Iteration   5: 1477.294 ±(99.9%) 35.540 ms/op
Iteration   1: 1482.686 ±(99.9%) 76.306 ms/op
                 executeFilterQuery·p0.00:   1407.189 ms/op
                 executeFilterQuery·p0.50:   1495.269 ms/op
                 executeFilterQuery·p0.90:   1501.561 ms/op
                 executeFilterQuery·p0.95:   1501.561 ms/op
                 executeFilterQuery·p0.99:   1501.561 ms/op
                 executeFilterQuery·p0.999:  1501.561 ms/op
                 executeFilterQuery·p0.9999: 1501.561 ms/op
                 executeFilterQuery·p1.00:   1501.561 ms/op

Iteration   2: 1417.937 ±(99.9%) 35.764 ms/op
                 executeFilterQuery·p0.00:   1384.120 ms/op
                 executeFilterQuery·p0.50:   1422.918 ms/op
                 executeFilterQuery·p0.90:   1436.549 ms/op
                 executeFilterQuery·p0.95:   1436.549 ms/op
                 executeFilterQuery·p0.99:   1436.549 ms/op
                 executeFilterQuery·p0.999:  1436.549 ms/op
                 executeFilterQuery·p0.9999: 1436.549 ms/op
                 executeFilterQuery·p1.00:   1436.549 ms/op

Iteration   3: 1428.161 ±(99.9%) 21.298 ms/op
                 executeFilterQuery·p0.00:   1409.286 ms/op
                 executeFilterQuery·p0.50:   1432.355 ms/op
                 executeFilterQuery·p0.90:   1436.549 ms/op
                 executeFilterQuery·p0.95:   1436.549 ms/op
                 executeFilterQuery·p0.99:   1436.549 ms/op
                 executeFilterQuery·p0.999:  1436.549 ms/op
                 executeFilterQuery·p0.9999: 1436.549 ms/op
                 executeFilterQuery·p1.00:   1436.549 ms/op

Iteration   4: 1418.461 ±(99.9%) 12.848 ms/op
                 executeFilterQuery·p0.00:   1407.189 ms/op
                 executeFilterQuery·p0.50:   1417.675 ms/op
                 executeFilterQuery·p0.90:   1430.258 ms/op
                 executeFilterQuery·p0.95:   1430.258 ms/op
                 executeFilterQuery·p0.99:   1430.258 ms/op
                 executeFilterQuery·p0.999:  1430.258 ms/op
                 executeFilterQuery·p0.9999: 1430.258 ms/op
                 executeFilterQuery·p1.00:   1430.258 ms/op

Iteration   5: 1425.539 ±(99.9%) 18.530 ms/op
                 executeFilterQuery·p0.00:   1407.189 ms/op
                 executeFilterQuery·p0.50:   1423.966 ms/op
                 executeFilterQuery·p0.90:   1436.549 ms/op
                 executeFilterQuery·p0.95:   1436.549 ms/op
                 executeFilterQuery·p0.99:   1436.549 ms/op
                 executeFilterQuery·p0.999:  1436.549 ms/op
                 executeFilterQuery·p0.9999: 1436.549 ms/op
                 executeFilterQuery·p1.00:   1436.549 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 76
  mean =   1431.527 ±(99.9%) 12.590 ms/op

  Histogram, ms/op:
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 2 
    [1375.000, 1400.000) = 7 
    [1400.000, 1425.000) = 29 
    [1425.000, 1450.000) = 21 
    [1450.000, 1475.000) = 6 
    [1475.000, 1500.000) = 10 
    [1500.000, 1525.000) = 1 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1373.635 ms/op
     p(50.0000) =   1425.015 ms/op
     p(90.0000) =   1493.172 ms/op
     p(95.0000) =   1495.899 ms/op
     p(99.0000) =   1501.561 ms/op
     p(99.9000) =   1501.561 ms/op
     p(99.9900) =   1501.561 ms/op
     p(99.9990) =   1501.561 ms/op
     p(99.9999) =   1501.561 ms/op
    p(100.0000) =   1501.561 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/)

# Run progress: 54.76% complete, ETA 05:25:04
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1497.666 ±(99.9%) 217.892 ms/op
# Warmup Iteration   2: 1419.772 ±(99.9%) 39.867 ms/op
# Warmup Iteration   3: 1477.294 ±(99.9%) 20.197 ms/op
# Warmup Iteration   4: 1468.905 ±(99.9%) 4.609 ms/op
# Warmup Iteration   5: 1482.986 ±(99.9%) 33.446 ms/op
Iteration   1: 1479.691 ±(99.9%) 22.792 ms/op
                 executeFilterQuery·p0.00:   1470.104 ms/op
                 executeFilterQuery·p0.50:   1474.298 ms/op
                 executeFilterQuery·p0.90:   1495.269 ms/op
                 executeFilterQuery·p0.95:   1495.269 ms/op
                 executeFilterQuery·p0.99:   1495.269 ms/op
                 executeFilterQuery·p0.999:  1495.269 ms/op
                 executeFilterQuery·p0.9999: 1495.269 ms/op
                 executeFilterQuery·p1.00:   1495.269 ms/op

Iteration   2: 1471.901 ±(99.9%) 4.250 ms/op
                 executeFilterQuery·p0.00:   1470.104 ms/op
                 executeFilterQuery·p0.50:   1472.201 ms/op
                 executeFilterQuery·p0.90:   1474.298 ms/op
                 executeFilterQuery·p0.95:   1474.298 ms/op
                 executeFilterQuery·p0.99:   1474.298 ms/op
                 executeFilterQuery·p0.999:  1474.298 ms/op
                 executeFilterQuery·p0.9999: 1474.298 ms/op
                 executeFilterQuery·p1.00:   1474.298 ms/op

Iteration   3: 1475.197 ±(99.9%) 22.955 ms/op
                 executeFilterQuery·p0.00:   1463.812 ms/op
                 executeFilterQuery·p0.50:   1476.395 ms/op
                 executeFilterQuery·p0.90:   1488.978 ms/op
                 executeFilterQuery·p0.95:   1488.978 ms/op
                 executeFilterQuery·p0.99:   1488.978 ms/op
                 executeFilterQuery·p0.999:  1488.978 ms/op
                 executeFilterQuery·p0.9999: 1488.978 ms/op
                 executeFilterQuery·p1.00:   1488.978 ms/op

Iteration   4: 1445.537 ±(99.9%) 79.631 ms/op
                 executeFilterQuery·p0.00:   1400.898 ms/op
                 executeFilterQuery·p0.50:   1440.743 ms/op
                 executeFilterQuery·p0.90:   1493.172 ms/op
                 executeFilterQuery·p0.95:   1493.172 ms/op
                 executeFilterQuery·p0.99:   1493.172 ms/op
                 executeFilterQuery·p0.999:  1493.172 ms/op
                 executeFilterQuery·p0.9999: 1493.172 ms/op
                 executeFilterQuery·p1.00:   1493.172 ms/op

Iteration   5: 1402.208 ±(99.9%) 22.060 ms/op
                 executeFilterQuery·p0.00:   1392.509 ms/op
                 executeFilterQuery·p0.50:   1395.655 ms/op
                 executeFilterQuery·p0.90:   1421.869 ms/op
                 executeFilterQuery·p0.95:   1421.869 ms/op
                 executeFilterQuery·p0.99:   1421.869 ms/op
                 executeFilterQuery·p0.999:  1421.869 ms/op
                 executeFilterQuery·p0.9999: 1421.869 ms/op
                 executeFilterQuery·p1.00:   1421.869 ms/op


# Run progress: 55.36% complete, ETA 05:18:47
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

1509.650 ±(99.9%) 182.736 ms/op
# Warmup Iteration   2: 1429.359 ±(99.9%) 46.106 ms/op
# Warmup Iteration   3: 1492.273 ±(99.9%) 21.273 ms/op
# Warmup Iteration   4: 1494.970 ±(99.9%) 23.208 ms/op
# Warmup Iteration   5: 1485.383 ±(99.9%) 42.397 ms/op
Iteration   1: 1494.371 ±(99.9%) 23.907 ms/op
                 executeFilterQuery·p0.00:   1472.201 ms/op
                 executeFilterQuery·p0.50:   1499.464 ms/op
                 executeFilterQuery·p0.90:   1501.561 ms/op
                 executeFilterQuery·p0.95:   1501.561 ms/op
                 executeFilterQuery·p0.99:   1501.561 ms/op
                 executeFilterQuery·p0.999:  1501.561 ms/op
                 executeFilterQuery·p0.9999: 1501.561 ms/op
                 executeFilterQuery·p1.00:   1501.561 ms/op

Iteration   2: 1434.452 ±(99.9%) 66.294 ms/op
                 executeFilterQuery·p0.00:   1415.578 ms/op
                 executeFilterQuery·p0.50:   1421.869 ms/op
                 executeFilterQuery·p0.90:   1497.367 ms/op
                 executeFilterQuery·p0.95:   1497.367 ms/op
                 executeFilterQuery·p0.99:   1497.367 ms/op
                 executeFilterQuery·p0.999:  1497.367 ms/op
                 executeFilterQuery·p0.9999: 1497.367 ms/op
                 executeFilterQuery·p1.00:   1497.367 ms/op

Iteration   3: 1419.510 ±(99.9%) 16.243 ms/op
                 executeFilterQuery·p0.00:   1411.383 ms/op
                 executeFilterQuery·p0.50:   1414.529 ms/op
                 executeFilterQuery·p0.90:   1432.355 ms/op
                 executeFilterQuery·p0.95:   1432.355 ms/op
                 executeFilterQuery·p0.99:   1432.355 ms/op
                 executeFilterQuery·p0.999:  1432.355 ms/op
                 executeFilterQuery·p0.9999: 1432.355 ms/op
                 executeFilterQuery·p1.00:   1432.355 ms/op

Iteration   4: 1419.772 ±(99.9%) 17.932 ms/op
                 executeFilterQuery·p0.00:   1411.383 ms/op
                 executeFilterQuery·p0.50:   1414.529 ms/op
                 executeFilterQuery·p0.90:   1432.355 ms/op
                 executeFilterQuery·p0.95:   1432.355 ms/op
                 executeFilterQuery·p0.99:   1432.355 ms/op
                 executeFilterQuery·p0.999:  1432.355 ms/op
                 executeFilterQuery·p0.9999: 1432.355 ms/op
                 executeFilterQuery·p1.00:   1432.355 ms/op

Iteration   5: 1422.131 ±(99.9%) 15.520 ms/op
                 executeFilterQuery·p0.00:   1415.578 ms/op
                 executeFilterQuery·p0.50:   1417.675 ms/op
                 executeFilterQuery·p0.90:   1434.452 ms/op
                 executeFilterQuery·p0.95:   1434.452 ms/op
                 executeFilterQuery·p0.99:   1434.452 ms/op
                 executeFilterQuery·p0.999:  1434.452 ms/op
                 executeFilterQuery·p0.9999: 1434.452 ms/op
                 executeFilterQuery·p1.00:   1434.452 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 74
  mean =   1444.824 ±(99.9%) 13.520 ms/op

  Histogram, ms/op:
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 5 
    [1400.000, 1425.000) = 25 
    [1425.000, 1450.000) = 12 
    [1450.000, 1475.000) = 16 
    [1475.000, 1500.000) = 15 
    [1500.000, 1525.000) = 1 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1392.509 ms/op
     p(50.0000) =   1431.306 ms/op
     p(90.0000) =   1494.221 ms/op
     p(95.0000) =   1499.464 ms/op
     p(99.0000) =   1501.561 ms/op
     p(99.9000) =   1501.561 ms/op
     p(99.9900) =   1501.561 ms/op
     p(99.9990) =   1501.561 ms/op
     p(99.9999) =   1501.561 ms/op
    p(100.0000) =   1501.561 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/)

# Run progress: 55.95% complete, ETA 05:12:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

2359.296 ±(99.9%) 1667.464 ms/op
# Warmup Iteration   2: 2370.621 ±(99.9%) 71.685 ms/op
# Warmup Iteration   3: 2359.715 ±(99.9%) 18.415 ms/op
# Warmup Iteration   4: 2359.715 ±(99.9%) 8.846 ms/op
# Warmup Iteration   5: 2365.587 ±(99.9%) 72.228 ms/op
Iteration   1: 2355.521 ±(99.9%) 24.494 ms/op
                 executeFilterQuery·p0.00:   2348.810 ms/op
                 executeFilterQuery·p0.50:   2353.005 ms/op
                 executeFilterQuery·p0.90:   2365.587 ms/op
                 executeFilterQuery·p0.95:   2365.587 ms/op
                 executeFilterQuery·p0.99:   2365.587 ms/op
                 executeFilterQuery·p0.999:  2365.587 ms/op
                 executeFilterQuery·p0.9999: 2365.587 ms/op
                 executeFilterQuery·p1.00:   2365.587 ms/op

Iteration   2: 2365.587 ±(99.9%) 118.133 ms/op
                 executeFilterQuery·p0.00:   2348.810 ms/op
                 executeFilterQuery·p0.50:   2353.005 ms/op
                 executeFilterQuery·p0.90:   2420.113 ms/op
                 executeFilterQuery·p0.95:   2420.113 ms/op
                 executeFilterQuery·p0.99:   2420.113 ms/op
                 executeFilterQuery·p0.999:  2420.113 ms/op
                 executeFilterQuery·p0.9999: 2420.113 ms/op
                 executeFilterQuery·p1.00:   2420.113 ms/op

Iteration   3: 2351.327 ±(99.9%) 14.446 ms/op
                 executeFilterQuery·p0.00:   2348.810 ms/op
                 executeFilterQuery·p0.50:   2348.810 ms/op
                 executeFilterQuery·p0.90:   2357.199 ms/op
                 executeFilterQuery·p0.95:   2357.199 ms/op
                 executeFilterQuery·p0.99:   2357.199 ms/op
                 executeFilterQuery·p0.999:  2357.199 ms/op
                 executeFilterQuery·p0.9999: 2357.199 ms/op
                 executeFilterQuery·p1.00:   2357.199 ms/op

Iteration   4: 2368.943 ±(99.9%) 112.129 ms/op
                 executeFilterQuery·p0.00:   2353.005 ms/op
                 executeFilterQuery·p0.50:   2353.005 ms/op
                 executeFilterQuery·p0.90:   2420.113 ms/op
                 executeFilterQuery·p0.95:   2420.113 ms/op
                 executeFilterQuery·p0.99:   2420.113 ms/op
                 executeFilterQuery·p0.999:  2420.113 ms/op
                 executeFilterQuery·p0.9999: 2420.113 ms/op
                 executeFilterQuery·p1.00:   2420.113 ms/op

Iteration   5: 2359.715 ±(99.9%) 8.846 ms/op
                 executeFilterQuery·p0.00:   2357.199 ms/op
                 executeFilterQuery·p0.50:   2361.393 ms/op
                 executeFilterQuery·p0.90:   2361.393 ms/op
                 executeFilterQuery·p0.95:   2361.393 ms/op
                 executeFilterQuery·p0.99:   2361.393 ms/op
                 executeFilterQuery·p0.999:  2361.393 ms/op
                 executeFilterQuery·p0.9999: 2361.393 ms/op
                 executeFilterQuery·p1.00:   2361.393 ms/op


# Run progress: 56.55% complete, ETA 05:06:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
int[] ordinal_0_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_1_sel_vec = cCtx.getAllocationManager().getIntVector();
int[] ordinal_2_sel_vec = cCtx.getAllocationManager().getIntVector();
long count = 0;
ArrowTableReader filter_query_table = cCtx.getArrowReader(0);
while (filter_query_table.loadNextBatch()) {
    org.apache.arrow.vector.IntVector filter_query_table_vc_0 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(0));
    org.apache.arrow.vector.IntVector filter_query_table_vc_1 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(1));
    org.apache.arrow.vector.IntVector filter_query_table_vc_2 = ((org.apache.arrow.vector.IntVector) filter_query_table.getVector(2));
    int ordinal_0_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_0, 3000, ordinal_0_sel_vec);
    int ordinal_1_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_1, 3000, ordinal_1_sel_vec, ordinal_0_sel_vec, ordinal_0_sel_vec_length);
    int ordinal_2_sel_vec_length = VectorisedFilterOperators.lt(filter_query_table_vc_2, 3000, ordinal_2_sel_vec, ordinal_1_sel_vec, ordinal_1_sel_vec_length);
    count += ordinal_2_sel_vec_length;
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);
cCtx.getAllocationManager().release(ordinal_0_sel_vec);
cCtx.getAllocationManager().release(ordinal_1_sel_vec);
cCtx.getAllocationManager().release(ordinal_2_sel_vec);

2165.519 ±(99.9%) 681.512 ms/op
# Warmup Iteration   2: 2351.327 ±(99.9%) 18.415 ms/op
# Warmup Iteration   3: 2379.848 ±(99.9%) 249.842 ms/op
# Warmup Iteration   4: 2340.422 ±(99.9%) 16.151 ms/op
# Warmup Iteration   5: 2339.583 ±(99.9%) 13.513 ms/op
Iteration   1: 2340.422 ±(99.9%) 25.537 ms/op
                 executeFilterQuery·p0.00:   2332.033 ms/op
                 executeFilterQuery·p0.50:   2340.422 ms/op
                 executeFilterQuery·p0.90:   2348.810 ms/op
                 executeFilterQuery·p0.95:   2348.810 ms/op
                 executeFilterQuery·p0.99:   2348.810 ms/op
                 executeFilterQuery·p0.999:  2348.810 ms/op
                 executeFilterQuery·p0.9999: 2348.810 ms/op
                 executeFilterQuery·p1.00:   2348.810 ms/op

Iteration   2: 2338.744 ±(99.9%) 14.446 ms/op
                 executeFilterQuery·p0.00:   2332.033 ms/op
                 executeFilterQuery·p0.50:   2340.422 ms/op
                 executeFilterQuery·p0.90:   2340.422 ms/op
                 executeFilterQuery·p0.95:   2340.422 ms/op
                 executeFilterQuery·p0.99:   2340.422 ms/op
                 executeFilterQuery·p0.999:  2340.422 ms/op
                 executeFilterQuery·p0.9999: 2340.422 ms/op
                 executeFilterQuery·p1.00:   2340.422 ms/op

Iteration   3: 2349.649 ±(99.9%) 79.451 ms/op
                 executeFilterQuery·p0.00:   2340.422 ms/op
                 executeFilterQuery·p0.50:   2340.422 ms/op
                 executeFilterQuery·p0.90:   2386.559 ms/op
                 executeFilterQuery·p0.95:   2386.559 ms/op
                 executeFilterQuery·p0.99:   2386.559 ms/op
                 executeFilterQuery·p0.999:  2386.559 ms/op
                 executeFilterQuery·p0.9999: 2386.559 ms/op
                 executeFilterQuery·p1.00:   2386.559 ms/op

Iteration   4: 2342.099 ±(99.9%) 18.415 ms/op
                 executeFilterQuery·p0.00:   2336.227 ms/op
                 executeFilterQuery·p0.50:   2340.422 ms/op
                 executeFilterQuery·p0.90:   2348.810 ms/op
                 executeFilterQuery·p0.95:   2348.810 ms/op
                 executeFilterQuery·p0.99:   2348.810 ms/op
                 executeFilterQuery·p0.999:  2348.810 ms/op
                 executeFilterQuery·p0.9999: 2348.810 ms/op
                 executeFilterQuery·p1.00:   2348.810 ms/op

Iteration   5: 2363.910 ±(99.9%) 194.347 ms/op
                 executeFilterQuery·p0.00:   2336.227 ms/op
                 executeFilterQuery·p0.50:   2344.616 ms/op
                 executeFilterQuery·p0.90:   2453.668 ms/op
                 executeFilterQuery·p0.95:   2453.668 ms/op
                 executeFilterQuery·p0.99:   2453.668 ms/op
                 executeFilterQuery·p0.999:  2453.668 ms/op
                 executeFilterQuery·p0.9999: 2453.668 ms/op
                 executeFilterQuery·p1.00:   2453.668 ms/op



Result "benchmarks.filter_query.VectorisedNonSimd.executeFilterQuery":
  N = 50
  mean =   2353.592 ±(99.9%) 11.178 ms/op

  Histogram, ms/op:
    [2300.000, 2312.500) = 0 
    [2312.500, 2325.000) = 0 
    [2325.000, 2337.500) = 6 
    [2337.500, 2350.000) = 23 
    [2350.000, 2362.500) = 15 
    [2362.500, 2375.000) = 2 
    [2375.000, 2387.500) = 1 
    [2387.500, 2400.000) = 0 
    [2400.000, 2412.500) = 0 
    [2412.500, 2425.000) = 2 
    [2425.000, 2437.500) = 0 
    [2437.500, 2450.000) = 0 
    [2450.000, 2462.500) = 1 
    [2462.500, 2475.000) = 0 
    [2475.000, 2487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2332.033 ms/op
     p(50.0000) =   2348.810 ms/op
     p(90.0000) =   2365.587 ms/op
     p(95.0000) =   2420.113 ms/op
     p(99.0000) =   2453.668 ms/op
     p(99.9000) =   2453.668 ms/op
     p(99.9900) =   2453.668 ms/op
     p(99.9990) =   2453.668 ms/op
     p(99.9999) =   2453.668 ms/op
    p(100.0000) =   2453.668 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 57.14% complete, ETA 05:00:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1063912960 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1063912960() {
        this(4);
    }
    public KeyMultiRecordMap_1063912960(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1063912960 join_map = new KeyMultiRecordMap_1063912960();
private final class KeyMultiRecordMap_1689671149 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1689671149() {
        this(4);
    }
    public KeyMultiRecordMap_1689671149(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1689671149 join_map_0 = new KeyMultiRecordMap_1689671149();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map_0.values_record_ord_2[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            join_map.associate(left_join_ord_1, left_join_key_prehash, left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            int left_join_ord_5 = join_map.values_record_ord_5[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

5653.922 ms/op
# Warmup Iteration   2: 5406.458 ms/op
# Warmup Iteration   3: 5318.377 ms/op
# Warmup Iteration   4: 5259.657 ms/op
# Warmup Iteration   5: 5209.326 ms/op
Iteration   1: 5125.439 ms/op
                 executeQuery·p0.00:   5117.051 ms/op
                 executeQuery·p0.50:   5125.439 ms/op
                 executeQuery·p0.90:   5133.828 ms/op
                 executeQuery·p0.95:   5133.828 ms/op
                 executeQuery·p0.99:   5133.828 ms/op
                 executeQuery·p0.999:  5133.828 ms/op
                 executeQuery·p0.9999: 5133.828 ms/op
                 executeQuery·p1.00:   5133.828 ms/op

Iteration   2: 5200.937 ms/op
                 executeQuery·p0.00:   5167.383 ms/op
                 executeQuery·p0.50:   5200.937 ms/op
                 executeQuery·p0.90:   5234.491 ms/op
                 executeQuery·p0.95:   5234.491 ms/op
                 executeQuery·p0.99:   5234.491 ms/op
                 executeQuery·p0.999:  5234.491 ms/op
                 executeQuery·p0.9999: 5234.491 ms/op
                 executeQuery·p1.00:   5234.491 ms/op

Iteration   3: 5125.439 ms/op
                 executeQuery·p0.00:   5041.553 ms/op
                 executeQuery·p0.50:   5125.439 ms/op
                 executeQuery·p0.90:   5209.326 ms/op
                 executeQuery·p0.95:   5209.326 ms/op
                 executeQuery·p0.99:   5209.326 ms/op
                 executeQuery·p0.999:  5209.326 ms/op
                 executeQuery·p0.9999: 5209.326 ms/op
                 executeQuery·p1.00:   5209.326 ms/op

Iteration   4: 5112.857 ms/op
                 executeQuery·p0.00:   5007.999 ms/op
                 executeQuery·p0.50:   5112.857 ms/op
                 executeQuery·p0.90:   5217.714 ms/op
                 executeQuery·p0.95:   5217.714 ms/op
                 executeQuery·p0.99:   5217.714 ms/op
                 executeQuery·p0.999:  5217.714 ms/op
                 executeQuery·p0.9999: 5217.714 ms/op
                 executeQuery·p1.00:   5217.714 ms/op

Iteration   5: 5238.686 ms/op
                 executeQuery·p0.00:   5184.160 ms/op
                 executeQuery·p0.50:   5238.686 ms/op
                 executeQuery·p0.90:   5293.212 ms/op
                 executeQuery·p0.95:   5293.212 ms/op
                 executeQuery·p0.99:   5293.212 ms/op
                 executeQuery·p0.999:  5293.212 ms/op
                 executeQuery·p0.9999: 5293.212 ms/op
                 executeQuery·p1.00:   5293.212 ms/op


# Run progress: 57.74% complete, ETA 04:54:53
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1063912960 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1063912960() {
        this(4);
    }
    public KeyMultiRecordMap_1063912960(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1063912960 join_map = new KeyMultiRecordMap_1063912960();
private final class KeyMultiRecordMap_1689671149 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1689671149() {
        this(4);
    }
    public KeyMultiRecordMap_1689671149(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1689671149 join_map_0 = new KeyMultiRecordMap_1689671149();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map_0.values_record_ord_2[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            join_map.associate(left_join_ord_1, left_join_key_prehash, left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            int left_join_ord_5 = join_map.values_record_ord_5[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

5649.727 ms/op
# Warmup Iteration   2: 5490.344 ms/op
# Warmup Iteration   3: 5360.321 ms/op
# Warmup Iteration   4: 5289.017 ms/op
# Warmup Iteration   5: 5184.160 ms/op
Iteration   1: 5167.383 ms/op
                 executeQuery·p0.00:   5150.605 ms/op
                 executeQuery·p0.50:   5167.383 ms/op
                 executeQuery·p0.90:   5184.160 ms/op
                 executeQuery·p0.95:   5184.160 ms/op
                 executeQuery·p0.99:   5184.160 ms/op
                 executeQuery·p0.999:  5184.160 ms/op
                 executeQuery·p0.9999: 5184.160 ms/op
                 executeQuery·p1.00:   5184.160 ms/op

Iteration   2: 5276.434 ms/op
                 executeQuery·p0.00:   5117.051 ms/op
                 executeQuery·p0.50:   5276.434 ms/op
                 executeQuery·p0.90:   5435.818 ms/op
                 executeQuery·p0.95:   5435.818 ms/op
                 executeQuery·p0.99:   5435.818 ms/op
                 executeQuery·p0.999:  5435.818 ms/op
                 executeQuery·p0.9999: 5435.818 ms/op
                 executeQuery·p1.00:   5435.818 ms/op

Iteration   3: 5121.245 ms/op
                 executeQuery·p0.00:   5083.496 ms/op
                 executeQuery·p0.50:   5121.245 ms/op
                 executeQuery·p0.90:   5158.994 ms/op
                 executeQuery·p0.95:   5158.994 ms/op
                 executeQuery·p0.99:   5158.994 ms/op
                 executeQuery·p0.999:  5158.994 ms/op
                 executeQuery·p0.9999: 5158.994 ms/op
                 executeQuery·p1.00:   5158.994 ms/op

Iteration   4: 5104.468 ms/op
                 executeQuery·p0.00:   5075.108 ms/op
                 executeQuery·p0.50:   5104.468 ms/op
                 executeQuery·p0.90:   5133.828 ms/op
                 executeQuery·p0.95:   5133.828 ms/op
                 executeQuery·p0.99:   5133.828 ms/op
                 executeQuery·p0.999:  5133.828 ms/op
                 executeQuery·p0.9999: 5133.828 ms/op
                 executeQuery·p1.00:   5133.828 ms/op

Iteration   5: 5230.297 ms/op
                 executeQuery·p0.00:   5058.331 ms/op
                 executeQuery·p0.50:   5230.297 ms/op
                 executeQuery·p0.90:   5402.264 ms/op
                 executeQuery·p0.95:   5402.264 ms/op
                 executeQuery·p0.99:   5402.264 ms/op
                 executeQuery·p0.999:  5402.264 ms/op
                 executeQuery·p0.9999: 5402.264 ms/op
                 executeQuery·p1.00:   5402.264 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 20
  mean =   5170.319 ±(99.9%) 95.248 ms/op

  Histogram, ms/op:
    [5000.000, 5050.000) = 2 
    [5050.000, 5100.000) = 3 
    [5100.000, 5150.000) = 4 
    [5150.000, 5200.000) = 5 
    [5200.000, 5250.000) = 3 
    [5250.000, 5300.000) = 1 
    [5300.000, 5350.000) = 0 
    [5350.000, 5400.000) = 0 
    [5400.000, 5450.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   5007.999 ms/op
     p(50.0000) =   5154.800 ms/op
     p(90.0000) =   5391.358 ms/op
     p(95.0000) =   5434.140 ms/op
     p(99.0000) =   5435.818 ms/op
     p(99.9000) =   5435.818 ms/op
     p(99.9900) =   5435.818 ms/op
     p(99.9990) =   5435.818 ms/op
     p(99.9999) =   5435.818 ms/op
    p(100.0000) =   5435.818 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 58.33% complete, ETA 04:49:03
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_1063912960 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1063912960() {
        this(4);
    }
    public KeyMultiRecordMap_1063912960(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1063912960 join_map = new KeyMultiRecordMap_1063912960();
private final class KeyMultiRecordMap_1689671149 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1689671149() {
        this(4);
    }
    public KeyMultiRecordMap_1689671149(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1689671149 join_map_0 = new KeyMultiRecordMap_1689671149();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map_0.values_record_ord_2[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            join_map.associate(left_join_ord_1, left_join_key_prehash, left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            int left_join_ord_5 = join_map.values_record_ord_5[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

61538.828 ms/op
# Warmup Iteration   2: 60397.978 ms/op
# Warmup Iteration   3: 58586.038 ms/op
# Warmup Iteration   4: 57243.861 ms/op
# Warmup Iteration   5: 58183.385 ms/op
Iteration   1: 58653.147 ms/op
                 executeQuery·p0.00:   58653.147 ms/op
                 executeQuery·p0.50:   58653.147 ms/op
                 executeQuery·p0.90:   58653.147 ms/op
                 executeQuery·p0.95:   58653.147 ms/op
                 executeQuery·p0.99:   58653.147 ms/op
                 executeQuery·p0.999:  58653.147 ms/op
                 executeQuery·p0.9999: 58653.147 ms/op
                 executeQuery·p1.00:   58653.147 ms/op

Iteration   2: 58183.385 ms/op
                 executeQuery·p0.00:   58183.385 ms/op
                 executeQuery·p0.50:   58183.385 ms/op
                 executeQuery·p0.90:   58183.385 ms/op
                 executeQuery·p0.95:   58183.385 ms/op
                 executeQuery·p0.99:   58183.385 ms/op
                 executeQuery·p0.999:  58183.385 ms/op
                 executeQuery·p0.9999: 58183.385 ms/op
                 executeQuery·p1.00:   58183.385 ms/op

Iteration   3: 58451.821 ms/op
                 executeQuery·p0.00:   58451.821 ms/op
                 executeQuery·p0.50:   58451.821 ms/op
                 executeQuery·p0.90:   58451.821 ms/op
                 executeQuery·p0.95:   58451.821 ms/op
                 executeQuery·p0.99:   58451.821 ms/op
                 executeQuery·p0.999:  58451.821 ms/op
                 executeQuery·p0.9999: 58451.821 ms/op
                 executeQuery·p1.00:   58451.821 ms/op

Iteration   4: 58451.821 ms/op
                 executeQuery·p0.00:   58451.821 ms/op
                 executeQuery·p0.50:   58451.821 ms/op
                 executeQuery·p0.90:   58451.821 ms/op
                 executeQuery·p0.95:   58451.821 ms/op
                 executeQuery·p0.99:   58451.821 ms/op
                 executeQuery·p0.999:  58451.821 ms/op
                 executeQuery·p0.9999: 58451.821 ms/op
                 executeQuery·p1.00:   58451.821 ms/op

Iteration   5: 56908.317 ms/op
                 executeQuery·p0.00:   56908.317 ms/op
                 executeQuery·p0.50:   56908.317 ms/op
                 executeQuery·p0.90:   56908.317 ms/op
                 executeQuery·p0.95:   56908.317 ms/op
                 executeQuery·p0.99:   56908.317 ms/op
                 executeQuery·p0.999:  56908.317 ms/op
                 executeQuery·p0.9999: 56908.317 ms/op
                 executeQuery·p1.00:   56908.317 ms/op


# Run progress: 58.93% complete, ETA 04:48:54
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
private final class KeyMultiRecordMap_219636399 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_219636399() {
        this(4);
    }
    public KeyMultiRecordMap_219636399(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_219636399 join_map = new KeyMultiRecordMap_219636399();
private final class KeyMultiRecordMap_1036336358 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1036336358() {
        this(4);
    }
    public KeyMultiRecordMap_1036336358(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1036336358 join_map_0 = new KeyMultiRecordMap_1036336358();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    int recordCount = table_A_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_A_vc_0.get(aviv);
        long left_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int ordinal_value_0 = table_A_vc_1.get(aviv);
        int ordinal_value_1 = table_A_vc_2.get(aviv);
        join_map_0.associate(ordinal_value, left_join_key_prehash, ordinal_value, ordinal_value_0, ordinal_value_1);
    }
}
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    int recordCount = table_B_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_B_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map_0.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_B_vc_1.get(aviv);
        int ordinal_value_1 = table_B_vc_2.get(aviv);
        int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map_0.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map_0.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map_0.values_record_ord_2[records_to_join_index][i];
            long left_join_key_prehash = Int_Hash_Function.preHash(left_join_ord_1);
            join_map.associate(left_join_ord_1, left_join_key_prehash, left_join_ord_0, left_join_ord_1, left_join_ord_2, ordinal_value, ordinal_value_0, ordinal_value_1);
        }
    }
}
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    int recordCount = table_C_vc_0.getValueCount();
    for (int aviv = 0; aviv < recordCount; aviv++) {
        int ordinal_value = table_C_vc_0.get(aviv);
        long right_join_key_prehash = Int_Hash_Function.preHash(ordinal_value);
        int records_to_join_index = join_map.getIndex(ordinal_value, right_join_key_prehash);
        if ((records_to_join_index == -1)) {
            continue;
        }
        int ordinal_value_0 = table_C_vc_1.get(aviv);
        int ordinal_value_1 = table_C_vc_2.get(aviv);
        int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
        for (int i = 0; i < left_join_record_count; i++) {
            int left_join_ord_0 = join_map.values_record_ord_0[records_to_join_index][i];
            int left_join_ord_1 = join_map.values_record_ord_1[records_to_join_index][i];
            int left_join_ord_2 = join_map.values_record_ord_2[records_to_join_index][i];
            int left_join_ord_3 = join_map.values_record_ord_3[records_to_join_index][i];
            int left_join_ord_4 = join_map.values_record_ord_4[records_to_join_index][i];
            int left_join_ord_5 = join_map.values_record_ord_5[records_to_join_index][i];
            count++;
        }
    }
}
cCtx.getResultConsumptionTarget().consumeResultItem(count);

60934.849 ms/op
# Warmup Iteration   2: 58787.365 ms/op
# Warmup Iteration   3: 58854.474 ms/op
# Warmup Iteration   4: 57713.623 ms/op
# Warmup Iteration   5: 59055.800 ms/op
Iteration   1: 58250.494 ms/op
                 executeQuery·p0.00:   58250.494 ms/op
                 executeQuery·p0.50:   58250.494 ms/op
                 executeQuery·p0.90:   58250.494 ms/op
                 executeQuery·p0.95:   58250.494 ms/op
                 executeQuery·p0.99:   58250.494 ms/op
                 executeQuery·p0.999:  58250.494 ms/op
                 executeQuery·p0.9999: 58250.494 ms/op
                 executeQuery·p1.00:   58250.494 ms/op

Iteration   2: 59190.018 ms/op
                 executeQuery·p0.00:   59190.018 ms/op
                 executeQuery·p0.50:   59190.018 ms/op
                 executeQuery·p0.90:   59190.018 ms/op
                 executeQuery·p0.95:   59190.018 ms/op
                 executeQuery·p0.99:   59190.018 ms/op
                 executeQuery·p0.999:  59190.018 ms/op
                 executeQuery·p0.9999: 59190.018 ms/op
                 executeQuery·p1.00:   59190.018 ms/op

Iteration   3: 58116.276 ms/op
                 executeQuery·p0.00:   58116.276 ms/op
                 executeQuery·p0.50:   58116.276 ms/op
                 executeQuery·p0.90:   58116.276 ms/op
                 executeQuery·p0.95:   58116.276 ms/op
                 executeQuery·p0.99:   58116.276 ms/op
                 executeQuery·p0.999:  58116.276 ms/op
                 executeQuery·p0.9999: 58116.276 ms/op
                 executeQuery·p1.00:   58116.276 ms/op

Iteration   4: 58653.147 ms/op
                 executeQuery·p0.00:   58653.147 ms/op
                 executeQuery·p0.50:   58653.147 ms/op
                 executeQuery·p0.90:   58653.147 ms/op
                 executeQuery·p0.95:   58653.147 ms/op
                 executeQuery·p0.99:   58653.147 ms/op
                 executeQuery·p0.999:  58653.147 ms/op
                 executeQuery·p0.9999: 58653.147 ms/op
                 executeQuery·p1.00:   58653.147 ms/op

Iteration   5: 58049.167 ms/op
                 executeQuery·p0.00:   58049.167 ms/op
                 executeQuery·p0.50:   58049.167 ms/op
                 executeQuery·p0.90:   58049.167 ms/op
                 executeQuery·p0.95:   58049.167 ms/op
                 executeQuery·p0.99:   58049.167 ms/op
                 executeQuery·p0.999:  58049.167 ms/op
                 executeQuery·p0.9999: 58049.167 ms/op
                 executeQuery·p1.00:   58049.167 ms/op



Result "benchmarks.join_query.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  58290.759 ±(99.9%) 892.481 ms/op

  Histogram, ms/op:
    [56000.000, 56250.000) = 0 
    [56250.000, 56500.000) = 0 
    [56500.000, 56750.000) = 0 
    [56750.000, 57000.000) = 1 
    [57000.000, 57250.000) = 0 
    [57250.000, 57500.000) = 0 
    [57500.000, 57750.000) = 0 
    [57750.000, 58000.000) = 0 
    [58000.000, 58250.000) = 3 
    [58250.000, 58500.000) = 3 
    [58500.000, 58750.000) = 2 
    [58750.000, 59000.000) = 0 
    [59000.000, 59250.000) = 1 
    [59250.000, 59500.000) = 0 
    [59500.000, 59750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  56908.317 ms/op
     p(50.0000) =  58351.157 ms/op
     p(90.0000) =  59136.331 ms/op
     p(95.0000) =  59190.018 ms/op
     p(99.0000) =  59190.018 ms/op
     p(99.9000) =  59190.018 ms/op
     p(99.9900) =  59190.018 ms/op
     p(99.9990) =  59190.018 ms/op
     p(99.9999) =  59190.018 ms/op
    p(100.0000) =  59190.018 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 59.52% complete, ETA 04:48:34
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_746096849 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_746096849() {
        this(4);
    }
    public KeyMultiRecordMap_746096849(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_746096849 join_map = new KeyMultiRecordMap_746096849();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1109923465 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1109923465() {
        this(4);
    }
    public KeyMultiRecordMap_1109923465(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1109923465 join_map_0 = new KeyMultiRecordMap_1109923465();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_0_0[i_0], left_join_record_key, join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_5[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

5595.202 ms/op
# Warmup Iteration   2: 5448.401 ms/op
# Warmup Iteration   3: 5234.491 ms/op
# Warmup Iteration   4: 5167.383 ms/op
# Warmup Iteration   5: 5326.766 ms/op
Iteration   1: 5314.183 ms/op
                 executeQuery·p0.00:   5309.989 ms/op
                 executeQuery·p0.50:   5314.183 ms/op
                 executeQuery·p0.90:   5318.377 ms/op
                 executeQuery·p0.95:   5318.377 ms/op
                 executeQuery·p0.99:   5318.377 ms/op
                 executeQuery·p0.999:  5318.377 ms/op
                 executeQuery·p0.9999: 5318.377 ms/op
                 executeQuery·p1.00:   5318.377 ms/op

Iteration   2: 5477.761 ms/op
                 executeQuery·p0.00:   5284.823 ms/op
                 executeQuery·p0.50:   5477.761 ms/op
                 executeQuery·p0.90:   5670.699 ms/op
                 executeQuery·p0.95:   5670.699 ms/op
                 executeQuery·p0.99:   5670.699 ms/op
                 executeQuery·p0.999:  5670.699 ms/op
                 executeQuery·p0.9999: 5670.699 ms/op
                 executeQuery·p1.00:   5670.699 ms/op

Iteration   3: 5444.207 ms/op
                 executeQuery·p0.00:   5309.989 ms/op
                 executeQuery·p0.50:   5444.207 ms/op
                 executeQuery·p0.90:   5578.424 ms/op
                 executeQuery·p0.95:   5578.424 ms/op
                 executeQuery·p0.99:   5578.424 ms/op
                 executeQuery·p0.999:  5578.424 ms/op
                 executeQuery·p0.9999: 5578.424 ms/op
                 executeQuery·p1.00:   5578.424 ms/op

Iteration   4: 5330.960 ms/op
                 executeQuery·p0.00:   5301.600 ms/op
                 executeQuery·p0.50:   5330.960 ms/op
                 executeQuery·p0.90:   5360.321 ms/op
                 executeQuery·p0.95:   5360.321 ms/op
                 executeQuery·p0.99:   5360.321 ms/op
                 executeQuery·p0.999:  5360.321 ms/op
                 executeQuery·p0.9999: 5360.321 ms/op
                 executeQuery·p1.00:   5360.321 ms/op

Iteration   5: 5301.600 ms/op
                 executeQuery·p0.00:   5184.160 ms/op
                 executeQuery·p0.50:   5301.600 ms/op
                 executeQuery·p0.90:   5419.041 ms/op
                 executeQuery·p0.95:   5419.041 ms/op
                 executeQuery·p0.99:   5419.041 ms/op
                 executeQuery·p0.999:  5419.041 ms/op
                 executeQuery·p0.9999: 5419.041 ms/op
                 executeQuery·p1.00:   5419.041 ms/op


# Run progress: 60.12% complete, ETA 04:42:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_746096849 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_746096849() {
        this(4);
    }
    public KeyMultiRecordMap_746096849(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_746096849 join_map = new KeyMultiRecordMap_746096849();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1109923465 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1109923465() {
        this(4);
    }
    public KeyMultiRecordMap_1109923465(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1109923465 join_map_0 = new KeyMultiRecordMap_1109923465();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_0_0[i_0], left_join_record_key, join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_5[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

5486.150 ms/op
# Warmup Iteration   2: 5536.481 ms/op
# Warmup Iteration   3: 5477.761 ms/op
# Warmup Iteration   4: 5377.098 ms/op
# Warmup Iteration   5: 5364.515 ms/op
Iteration   1: 5305.795 ms/op
                 executeQuery·p0.00:   5301.600 ms/op
                 executeQuery·p0.50:   5305.795 ms/op
                 executeQuery·p0.90:   5309.989 ms/op
                 executeQuery·p0.95:   5309.989 ms/op
                 executeQuery·p0.99:   5309.989 ms/op
                 executeQuery·p0.999:  5309.989 ms/op
                 executeQuery·p0.9999: 5309.989 ms/op
                 executeQuery·p1.00:   5309.989 ms/op

Iteration   2: 5419.041 ms/op
                 executeQuery·p0.00:   5368.709 ms/op
                 executeQuery·p0.50:   5419.041 ms/op
                 executeQuery·p0.90:   5469.372 ms/op
                 executeQuery·p0.95:   5469.372 ms/op
                 executeQuery·p0.99:   5469.372 ms/op
                 executeQuery·p0.999:  5469.372 ms/op
                 executeQuery·p0.9999: 5469.372 ms/op
                 executeQuery·p1.00:   5469.372 ms/op

Iteration   3: 5452.595 ms/op
                 executeQuery·p0.00:   5251.269 ms/op
                 executeQuery·p0.50:   5452.595 ms/op
                 executeQuery·p0.90:   5653.922 ms/op
                 executeQuery·p0.95:   5653.922 ms/op
                 executeQuery·p0.99:   5653.922 ms/op
                 executeQuery·p0.999:  5653.922 ms/op
                 executeQuery·p0.9999: 5653.922 ms/op
                 executeQuery·p1.00:   5653.922 ms/op

Iteration   4: 5582.619 ms/op
                 executeQuery·p0.00:   5528.093 ms/op
                 executeQuery·p0.50:   5582.619 ms/op
                 executeQuery·p0.90:   5637.145 ms/op
                 executeQuery·p0.95:   5637.145 ms/op
                 executeQuery·p0.99:   5637.145 ms/op
                 executeQuery·p0.999:  5637.145 ms/op
                 executeQuery·p0.9999: 5637.145 ms/op
                 executeQuery·p1.00:   5637.145 ms/op

Iteration   5: 5226.103 ms/op
                 executeQuery·p0.00:   5209.326 ms/op
                 executeQuery·p0.50:   5226.103 ms/op
                 executeQuery·p0.90:   5242.880 ms/op
                 executeQuery·p0.95:   5242.880 ms/op
                 executeQuery·p0.99:   5242.880 ms/op
                 executeQuery·p0.999:  5242.880 ms/op
                 executeQuery·p0.9999: 5242.880 ms/op
                 executeQuery·p1.00:   5242.880 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 20
  mean =   5385.486 ±(99.9%) 132.009 ms/op

  Histogram, ms/op:
    [5100.000, 5150.000) = 0 
    [5150.000, 5200.000) = 1 
    [5200.000, 5250.000) = 2 
    [5250.000, 5300.000) = 2 
    [5300.000, 5350.000) = 6 
    [5350.000, 5400.000) = 2 
    [5400.000, 5450.000) = 1 
    [5450.000, 5500.000) = 1 
    [5500.000, 5550.000) = 1 
    [5550.000, 5600.000) = 1 
    [5600.000, 5650.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   5184.160 ms/op
     p(50.0000) =   5314.183 ms/op
     p(90.0000) =   5652.244 ms/op
     p(95.0000) =   5669.860 ms/op
     p(99.0000) =   5670.699 ms/op
     p(99.9000) =   5670.699 ms/op
     p(99.9900) =   5670.699 ms/op
     p(99.9990) =   5670.699 ms/op
     p(99.9999) =   5670.699 ms/op
    p(100.0000) =   5670.699 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 60.71% complete, ETA 04:36:59
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_746096849 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_746096849() {
        this(4);
    }
    public KeyMultiRecordMap_746096849(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_746096849 join_map = new KeyMultiRecordMap_746096849();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1109923465 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1109923465() {
        this(4);
    }
    public KeyMultiRecordMap_1109923465(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1109923465 join_map_0 = new KeyMultiRecordMap_1109923465();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_0_0[i_0], left_join_record_key, join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_5[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

61740.155 ms/op
# Warmup Iteration   2: 57780.732 ms/op
# Warmup Iteration   3: 58317.603 ms/op
# Warmup Iteration   4: 60532.195 ms/op
# Warmup Iteration   5: 56371.446 ms/op
Iteration   1: 56908.317 ms/op
                 executeQuery·p0.00:   56908.317 ms/op
                 executeQuery·p0.50:   56908.317 ms/op
                 executeQuery·p0.90:   56908.317 ms/op
                 executeQuery·p0.95:   56908.317 ms/op
                 executeQuery·p0.99:   56908.317 ms/op
                 executeQuery·p0.999:  56908.317 ms/op
                 executeQuery·p0.9999: 56908.317 ms/op
                 executeQuery·p1.00:   56908.317 ms/op

Iteration   2: 57042.534 ms/op
                 executeQuery·p0.00:   57042.534 ms/op
                 executeQuery·p0.50:   57042.534 ms/op
                 executeQuery·p0.90:   57042.534 ms/op
                 executeQuery·p0.95:   57042.534 ms/op
                 executeQuery·p0.99:   57042.534 ms/op
                 executeQuery·p0.999:  57042.534 ms/op
                 executeQuery·p0.9999: 57042.534 ms/op
                 executeQuery·p1.00:   57042.534 ms/op

Iteration   3: 56304.337 ms/op
                 executeQuery·p0.00:   56304.337 ms/op
                 executeQuery·p0.50:   56304.337 ms/op
                 executeQuery·p0.90:   56304.337 ms/op
                 executeQuery·p0.95:   56304.337 ms/op
                 executeQuery·p0.99:   56304.337 ms/op
                 executeQuery·p0.999:  56304.337 ms/op
                 executeQuery·p0.9999: 56304.337 ms/op
                 executeQuery·p1.00:   56304.337 ms/op

Iteration   4: 56841.208 ms/op
                 executeQuery·p0.00:   56841.208 ms/op
                 executeQuery·p0.50:   56841.208 ms/op
                 executeQuery·p0.90:   56841.208 ms/op
                 executeQuery·p0.95:   56841.208 ms/op
                 executeQuery·p0.99:   56841.208 ms/op
                 executeQuery·p0.999:  56841.208 ms/op
                 executeQuery·p0.9999: 56841.208 ms/op
                 executeQuery·p1.00:   56841.208 ms/op

Iteration   5: 56170.119 ms/op
                 executeQuery·p0.00:   56170.119 ms/op
                 executeQuery·p0.50:   56170.119 ms/op
                 executeQuery·p0.90:   56170.119 ms/op
                 executeQuery·p0.95:   56170.119 ms/op
                 executeQuery·p0.99:   56170.119 ms/op
                 executeQuery·p0.999:  56170.119 ms/op
                 executeQuery·p0.9999: 56170.119 ms/op
                 executeQuery·p1.00:   56170.119 ms/op


# Run progress: 61.31% complete, ETA 04:36:15
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: Generating query code ...
Arrow reader 0 projects columns  [0, 1, 2]
Arrow reader 1 projects columns  [0, 1, 2]
Arrow reader 2 projects columns  [0, 1, 2]
Finished query code generation!

[Generated query code]
long count = 0;
long[] pre_hash_vector = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_746096849 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    public int[][] values_record_ord_3;
    public int[][] values_record_ord_4;
    public int[][] values_record_ord_5;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_746096849() {
        this(4);
    }
    public KeyMultiRecordMap_746096849(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.values_record_ord_3 = new int[capacity][8];
        this.values_record_ord_4 = new int[capacity][8];
        this.values_record_ord_5 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2, int record_ord_3, int record_ord_4, int record_ord_5) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
            int[] temp_values_record_ord_3 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_3[index], 0, temp_values_record_ord_3, 0, currentValueArraysSize);
            this.values_record_ord_3[index] = temp_values_record_ord_3;
            int[] temp_values_record_ord_4 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_4[index], 0, temp_values_record_ord_4, 0, currentValueArraysSize);
            this.values_record_ord_4[index] = temp_values_record_ord_4;
            int[] temp_values_record_ord_5 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_5[index], 0, temp_values_record_ord_5, 0, currentValueArraysSize);
            this.values_record_ord_5[index] = temp_values_record_ord_5;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.values_record_ord_3[index][insertionIndex] = record_ord_3;
        this.values_record_ord_4[index][insertionIndex] = record_ord_4;
        this.values_record_ord_5[index][insertionIndex] = record_ord_5;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
        int[][] new_values_record_ord_3 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_3, 0, new_values_record_ord_3, 0, currentSize);
        this.values_record_ord_3 = new_values_record_ord_3;
        int[][] new_values_record_ord_4 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_4, 0, new_values_record_ord_4, 0, currentSize);
        this.values_record_ord_4 = new_values_record_ord_4;
        int[][] new_values_record_ord_5 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_5, 0, new_values_record_ord_5, 0, currentSize);
        this.values_record_ord_5 = new_values_record_ord_5;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_746096849 join_map = new KeyMultiRecordMap_746096849();
long[] pre_hash_vector_0 = cCtx.getAllocationManager().getLongVector();
private final class KeyMultiRecordMap_1109923465 {
    private int numberOfRecords;
    private int[] keys;
    public int[] keysRecordCount;
    public int[][] values_record_ord_0;
    public int[][] values_record_ord_1;
    public int[][] values_record_ord_2;
    private int[] hashTable;
    private int[] next;

    public KeyMultiRecordMap_1109923465() {
        this(4);
    }
    public KeyMultiRecordMap_1109923465(int capacity) {
        if (!(((capacity > 1) && ((capacity & (capacity - 1)) == 0)))) {
            throw new java.lang.IllegalArgumentException("The map capacity is required to be a power of two");
        }
        this.numberOfRecords = 0;
        this.keys = new int[capacity];
        Arrays.fill(this.keys, -1);
        this.keysRecordCount = new int[capacity];
        this.values_record_ord_0 = new int[capacity][8];
        this.values_record_ord_1 = new int[capacity][8];
        this.values_record_ord_2 = new int[capacity][8];
        this.hashTable = new int[capacity];
        Arrays.fill(this.hashTable, -1);
        this.next = new int[capacity];
        Arrays.fill(this.next, -1);
    }

    public void associate(int key, long preHash, int record_ord_0, int record_ord_1, int record_ord_2) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        int index = this.find(key, preHash);
        boolean newEntry = false;
        if ((index == -1)) {
            newEntry = true;
            index = this.numberOfRecords++;
            if ((this.keys.length == index)) {
                this.growArrays();
            }
            this.keys[index] = key;
        }
        int insertionIndex = this.keysRecordCount[index];
        if (!((insertionIndex < this.values_record_ord_0[index].length))) {
            int currentValueArraysSize = this.values_record_ord_0[index].length;
            int newValueArraysSize = (2 * currentValueArraysSize);
            int[] temp_values_record_ord_0 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_0[index], 0, temp_values_record_ord_0, 0, currentValueArraysSize);
            this.values_record_ord_0[index] = temp_values_record_ord_0;
            int[] temp_values_record_ord_1 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_1[index], 0, temp_values_record_ord_1, 0, currentValueArraysSize);
            this.values_record_ord_1[index] = temp_values_record_ord_1;
            int[] temp_values_record_ord_2 = new int[newValueArraysSize];
            System.arraycopy(this.values_record_ord_2[index], 0, temp_values_record_ord_2, 0, currentValueArraysSize);
            this.values_record_ord_2[index] = temp_values_record_ord_2;
        }
        this.values_record_ord_0[index][insertionIndex] = record_ord_0;
        this.values_record_ord_1[index][insertionIndex] = record_ord_1;
        this.values_record_ord_2[index][insertionIndex] = record_ord_2;
        this.keysRecordCount[index]++;
        if (newEntry) {
            boolean rehashOnCollision = (this.numberOfRecords > ((3 * this.hashTable.length) / 4));
            this.putHashEntry(key, preHash, index, rehashOnCollision);
        }
    }
    private int find(int key, long preHash) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            return -1;
        }
        int currentIndex = initialIndex;
        while ((this.keys[currentIndex] != key)) {
            int potentialNextIndex = this.next[currentIndex];
            if ((potentialNextIndex == -1)) {
                return -1;
            } else {
                currentIndex = potentialNextIndex;
            }
        }
        return currentIndex;
    }
    private void growArrays() {
        int currentSize = this.keys.length;
        int newSize = (currentSize << 1);
        if ((newSize > (Integer.MAX_VALUE - 1))) {
            throw new java.lang.UnsupportedOperationException("Map has grown too large");
        }
        int[] newKeys = new int[newSize];
        System.arraycopy(this.keys, 0, newKeys, 0, currentSize);
        Arrays.fill(newKeys, currentSize, newSize, -1);
        this.keys = newKeys;
        int[] newKeysRecordCount = new int[newSize];
        System.arraycopy(this.keysRecordCount, 0, newKeysRecordCount, 0, currentSize);
        this.keysRecordCount = newKeysRecordCount;
        int[] newNext = new int[newSize];
        System.arraycopy(this.next, 0, newNext, 0, currentSize);
        Arrays.fill(newNext, currentSize, newSize, -1);
        this.next = newNext;
        int[][] new_values_record_ord_0 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_0, 0, new_values_record_ord_0, 0, currentSize);
        this.values_record_ord_0 = new_values_record_ord_0;
        int[][] new_values_record_ord_1 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_1, 0, new_values_record_ord_1, 0, currentSize);
        this.values_record_ord_1 = new_values_record_ord_1;
        int[][] new_values_record_ord_2 = new int[newSize][8];
        System.arraycopy(this.values_record_ord_2, 0, new_values_record_ord_2, 0, currentSize);
        this.values_record_ord_2 = new_values_record_ord_2;
    }
    private void putHashEntry(int key, long preHash, int index, boolean rehashOnCollision) {
        int htIndex = ((int) (preHash & (this.hashTable.length - 1)));
        int initialIndex = this.hashTable[htIndex];
        if ((initialIndex == -1)) {
            this.hashTable[htIndex] = index;
            return;
        }
        if (rehashOnCollision) {
            this.rehash();
            return;
        }
        int currentIndex = initialIndex;
        while (((this.keys[currentIndex] != key) && (this.next[currentIndex] != -1))) {
            currentIndex = this.next[currentIndex];
        }
        this.next[currentIndex] = index;
    }
    private void rehash() {
        int size = this.hashTable.length;
        while ((size <= this.numberOfRecords)) {
            size = (size << 1);
        }
        size = (size << 1);
        this.hashTable = new int[size];
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
        for (int i = 0; i < this.numberOfRecords; i++) {
            int key = this.keys[i];
            long preHash = Int_Hash_Function.preHash(key);
            this.putHashEntry(key, preHash, i, false);
        }
    }
    public int getIndex(int key, long preHash) {
        if ((key < 0)) {
            throw new java.lang.IllegalArgumentException("The map expects non-negative keys");
        }
        return this.find(key, preHash);
    }
    public void reset() {
        this.numberOfRecords = 0;
        Arrays.fill(this.keys, -1);
        Arrays.fill(this.keysRecordCount, 0);
        Arrays.fill(this.hashTable, -1);
        Arrays.fill(this.next, -1);
    }
}

KeyMultiRecordMap_1109923465 join_map_0 = new KeyMultiRecordMap_1109923465();
ArrowTableReader table_A = cCtx.getArrowReader(0);
while (table_A.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_A_vc_0 = ((org.apache.arrow.vector.IntVector) table_A.getVector(0));
    org.apache.arrow.vector.IntVector table_A_vc_1 = ((org.apache.arrow.vector.IntVector) table_A.getVector(1));
    org.apache.arrow.vector.IntVector table_A_vc_2 = ((org.apache.arrow.vector.IntVector) table_A.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_A_vc_0, false);
    int recordCount = table_A_vc_0.getValueCount();
    for (int i = 0; i < recordCount; i++) {
        int left_join_record_key = table_A_vc_0.get(i);
        join_map_0.associate(left_join_record_key, pre_hash_vector_0[i], left_join_record_key, table_A_vc_1.get(i), table_A_vc_2.get(i));
    }
}
int[] join_result_vector_ord_0_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5_0 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_B = cCtx.getArrowReader(1);
while (table_B.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_B_vc_0 = ((org.apache.arrow.vector.IntVector) table_B.getVector(0));
    org.apache.arrow.vector.IntVector table_B_vc_1 = ((org.apache.arrow.vector.IntVector) table_B.getVector(1));
    org.apache.arrow.vector.IntVector table_B_vc_2 = ((org.apache.arrow.vector.IntVector) table_B.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector_0, table_B_vc_0, false);
    int recordCount = table_B_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_B_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector_0[currentLoopIndex];
            int records_to_join_index = join_map_0.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map_0.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_B_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_B_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0_0[currentResultIndex] = join_map_0.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1_0[currentResultIndex] = join_map_0.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2_0[currentResultIndex] = join_map_0.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3_0[currentResultIndex] = right_join_key;
                join_result_vector_ord_4_0[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_5_0[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, join_result_vector_ord_1_0, currentResultIndex, false);
        for (int i_0 = 0; i_0 < currentResultIndex; i_0++) {
            int left_join_record_key = join_result_vector_ord_1_0[i_0];
            join_map.associate(left_join_record_key, pre_hash_vector[i_0], join_result_vector_ord_0_0[i_0], left_join_record_key, join_result_vector_ord_2_0[i_0], join_result_vector_ord_3_0[i_0], join_result_vector_ord_4_0[i_0], join_result_vector_ord_5_0[i_0]);
        }
    }
}
cCtx.getAllocationManager().release(pre_hash_vector_0);
cCtx.getAllocationManager().release(join_result_vector_ord_0_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1_0);
cCtx.getAllocationManager().release(join_result_vector_ord_2_0);
cCtx.getAllocationManager().release(join_result_vector_ord_3_0);
cCtx.getAllocationManager().release(join_result_vector_ord_4_0);
cCtx.getAllocationManager().release(join_result_vector_ord_5_0);
int[] join_result_vector_ord_0 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_1 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_2 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_3 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_4 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_5 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_6 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_7 = cCtx.getAllocationManager().getIntVector();
int[] join_result_vector_ord_8 = cCtx.getAllocationManager().getIntVector();
ArrowTableReader table_C = cCtx.getArrowReader(2);
while (table_C.loadNextBatch()) {
    org.apache.arrow.vector.IntVector table_C_vc_0 = ((org.apache.arrow.vector.IntVector) table_C.getVector(0));
    org.apache.arrow.vector.IntVector table_C_vc_1 = ((org.apache.arrow.vector.IntVector) table_C.getVector(1));
    org.apache.arrow.vector.IntVector table_C_vc_2 = ((org.apache.arrow.vector.IntVector) table_C.getVector(2));
    VectorisedHashOperators.constructPreHashKeyVector(pre_hash_vector, table_C_vc_0, false);
    int recordCount = table_C_vc_0.getValueCount();
    int currentLoopIndex = 0;
    while ((currentLoopIndex < recordCount)) {
        int currentResultIndex = 0;
        while ((currentLoopIndex < recordCount)) {
            int right_join_key = table_C_vc_0.get(currentLoopIndex);
            long right_join_key_pre_hash = pre_hash_vector[currentLoopIndex];
            int records_to_join_index = join_map.getIndex(right_join_key, right_join_key_pre_hash);
            if ((records_to_join_index == -1)) {
                currentLoopIndex++;
                continue;
            }
            int left_join_record_count = join_map.keysRecordCount[records_to_join_index];
            if ((left_join_record_count > (VectorisedOperators.VECTOR_LENGTH - currentResultIndex))) {
                break;
            }
            int right_join_ord_1 = table_C_vc_1.get(currentLoopIndex);
            int right_join_ord_2 = table_C_vc_2.get(currentLoopIndex);
            for (int i = 0; i < left_join_record_count; i++) {
                join_result_vector_ord_0[currentResultIndex] = join_map.values_record_ord_0[records_to_join_index][i];
                join_result_vector_ord_1[currentResultIndex] = join_map.values_record_ord_1[records_to_join_index][i];
                join_result_vector_ord_2[currentResultIndex] = join_map.values_record_ord_2[records_to_join_index][i];
                join_result_vector_ord_3[currentResultIndex] = join_map.values_record_ord_3[records_to_join_index][i];
                join_result_vector_ord_4[currentResultIndex] = join_map.values_record_ord_4[records_to_join_index][i];
                join_result_vector_ord_5[currentResultIndex] = join_map.values_record_ord_5[records_to_join_index][i];
                join_result_vector_ord_6[currentResultIndex] = right_join_key;
                join_result_vector_ord_7[currentResultIndex] = right_join_ord_1;
                join_result_vector_ord_8[currentResultIndex] = right_join_ord_2;
                currentResultIndex++;
            }
            currentLoopIndex++;
        }
        count += currentResultIndex;
    }
}
cCtx.getAllocationManager().release(pre_hash_vector);
cCtx.getAllocationManager().release(join_result_vector_ord_0);
cCtx.getAllocationManager().release(join_result_vector_ord_1);
cCtx.getAllocationManager().release(join_result_vector_ord_2);
cCtx.getAllocationManager().release(join_result_vector_ord_3);
cCtx.getAllocationManager().release(join_result_vector_ord_4);
cCtx.getAllocationManager().release(join_result_vector_ord_5);
cCtx.getAllocationManager().release(join_result_vector_ord_6);
cCtx.getAllocationManager().release(join_result_vector_ord_7);
cCtx.getAllocationManager().release(join_result_vector_ord_8);
cCtx.getResultConsumptionTarget().consumeResultItem(count);

61605.937 ms/op
# Warmup Iteration   2: 57914.950 ms/op
# Warmup Iteration   3: 58183.385 ms/op
# Warmup Iteration   4: 57176.752 ms/op
# Warmup Iteration   5: 56706.990 ms/op
Iteration   1: 58049.167 ms/op
                 executeQuery·p0.00:   58049.167 ms/op
                 executeQuery·p0.50:   58049.167 ms/op
                 executeQuery·p0.90:   58049.167 ms/op
                 executeQuery·p0.95:   58049.167 ms/op
                 executeQuery·p0.99:   58049.167 ms/op
                 executeQuery·p0.999:  58049.167 ms/op
                 executeQuery·p0.9999: 58049.167 ms/op
                 executeQuery·p1.00:   58049.167 ms/op

Iteration   2: 57310.970 ms/op
                 executeQuery·p0.00:   57310.970 ms/op
                 executeQuery·p0.50:   57310.970 ms/op
                 executeQuery·p0.90:   57310.970 ms/op
                 executeQuery·p0.95:   57310.970 ms/op
                 executeQuery·p0.99:   57310.970 ms/op
                 executeQuery·p0.999:  57310.970 ms/op
                 executeQuery·p0.9999: 57310.970 ms/op
                 executeQuery·p1.00:   57310.970 ms/op

Iteration   3: 58250.494 ms/op
                 executeQuery·p0.00:   58250.494 ms/op
                 executeQuery·p0.50:   58250.494 ms/op
                 executeQuery·p0.90:   58250.494 ms/op
                 executeQuery·p0.95:   58250.494 ms/op
                 executeQuery·p0.99:   58250.494 ms/op
                 executeQuery·p0.999:  58250.494 ms/op
                 executeQuery·p0.9999: 58250.494 ms/op
                 executeQuery·p1.00:   58250.494 ms/op

Iteration   4: 57914.950 ms/op
                 executeQuery·p0.00:   57914.950 ms/op
                 executeQuery·p0.50:   57914.950 ms/op
                 executeQuery·p0.90:   57914.950 ms/op
                 executeQuery·p0.95:   57914.950 ms/op
                 executeQuery·p0.99:   57914.950 ms/op
                 executeQuery·p0.999:  57914.950 ms/op
                 executeQuery·p0.9999: 57914.950 ms/op
                 executeQuery·p1.00:   57914.950 ms/op

Iteration   5: 60465.086 ms/op
                 executeQuery·p0.00:   60465.086 ms/op
                 executeQuery·p0.50:   60465.086 ms/op
                 executeQuery·p0.90:   60465.086 ms/op
                 executeQuery·p0.95:   60465.086 ms/op
                 executeQuery·p0.99:   60465.086 ms/op
                 executeQuery·p0.999:  60465.086 ms/op
                 executeQuery·p0.9999: 60465.086 ms/op
                 executeQuery·p1.00:   60465.086 ms/op



Result "benchmarks.join_query.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  57525.718 ±(99.9%) 1888.943 ms/op

  Histogram, ms/op:
    [56000.000, 56500.000) = 2 
    [56500.000, 57000.000) = 2 
    [57000.000, 57500.000) = 2 
    [57500.000, 58000.000) = 1 
    [58000.000, 58500.000) = 2 
    [58500.000, 59000.000) = 0 
    [59000.000, 59500.000) = 0 
    [59500.000, 60000.000) = 0 
    [60000.000, 60500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  56170.119 ms/op
     p(50.0000) =  57176.752 ms/op
     p(90.0000) =  60243.627 ms/op
     p(95.0000) =  60465.086 ms/op
     p(99.0000) =  60465.086 ms/op
     p(99.9000) =  60465.086 ms/op
     p(99.9900) =  60465.086 ms/op
     p(99.9990) =  60465.086 ms/op
     p(99.9999) =  60465.086 ms/op
    p(100.0000) =  60465.086 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 61.90% complete, ETA 04:35:24
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2259.891 ±(99.9%) 568.544 ms/op
# Warmup Iteration   2: 2163.422 ±(99.9%) 21.058 ms/op
# Warmup Iteration   3: 2155.033 ±(99.9%) 13.513 ms/op
# Warmup Iteration   4: 2152.517 ±(99.9%) 7.223 ms/op
# Warmup Iteration   5: 2153.356 ±(99.9%) 8.846 ms/op
Iteration   1: 2150.839 ±(99.9%) 7.223 ms/op
                 executeQuery·p0.00:   2147.484 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2151.678 ms/op
                 executeQuery·p0.95:   2151.678 ms/op
                 executeQuery·p0.99:   2151.678 ms/op
                 executeQuery·p0.999:  2151.678 ms/op
                 executeQuery·p0.9999: 2151.678 ms/op
                 executeQuery·p1.00:   2151.678 ms/op

Iteration   2: 2150.839 ±(99.9%) 7.223 ms/op
                 executeQuery·p0.00:   2147.484 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2151.678 ms/op
                 executeQuery·p0.95:   2151.678 ms/op
                 executeQuery·p0.99:   2151.678 ms/op
                 executeQuery·p0.999:  2151.678 ms/op
                 executeQuery·p0.9999: 2151.678 ms/op
                 executeQuery·p1.00:   2151.678 ms/op

Iteration   3: 2151.678 ±(99.9%) 11.420 ms/op
                 executeQuery·p0.00:   2147.484 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2155.872 ms/op
                 executeQuery·p0.95:   2155.872 ms/op
                 executeQuery·p0.99:   2155.872 ms/op
                 executeQuery·p0.999:  2155.872 ms/op
                 executeQuery·p0.9999: 2155.872 ms/op
                 executeQuery·p1.00:   2155.872 ms/op

Iteration   4: 2163.422 ±(99.9%) 101.763 ms/op
                 executeQuery·p0.00:   2147.484 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2210.398 ms/op
                 executeQuery·p0.95:   2210.398 ms/op
                 executeQuery·p0.99:   2210.398 ms/op
                 executeQuery·p0.999:  2210.398 ms/op
                 executeQuery·p0.9999: 2210.398 ms/op
                 executeQuery·p1.00:   2210.398 ms/op

Iteration   5: 2150.000 ±(99.9%) 8.846 ms/op
                 executeQuery·p0.00:   2147.484 ms/op
                 executeQuery·p0.50:   2151.678 ms/op
                 executeQuery·p0.90:   2151.678 ms/op
                 executeQuery·p0.95:   2151.678 ms/op
                 executeQuery·p0.99:   2151.678 ms/op
                 executeQuery·p0.999:  2151.678 ms/op
                 executeQuery·p0.9999: 2151.678 ms/op
                 executeQuery·p1.00:   2151.678 ms/op


# Run progress: 62.50% complete, ETA 04:29:39
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2604.663 ±(99.9%) 825.361 ms/op
# Warmup Iteration   2: 2478.834 ±(99.9%) 38.330 ms/op
# Warmup Iteration   3: 2477.785 ±(99.9%) 25.950 ms/op
# Warmup Iteration   4: 2472.962 ±(99.9%) 8.846 ms/op
# Warmup Iteration   5: 2473.591 ±(99.9%) 13.552 ms/op
Iteration   1: 2476.317 ±(99.9%) 42.116 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2470.445 ms/op
                 executeQuery·p0.90:   2495.611 ms/op
                 executeQuery·p0.95:   2495.611 ms/op
                 executeQuery·p0.99:   2495.611 ms/op
                 executeQuery·p0.999:  2495.611 ms/op
                 executeQuery·p0.9999: 2495.611 ms/op
                 executeQuery·p1.00:   2495.611 ms/op

Iteration   2: 2513.437 ±(99.9%) 13.552 ms/op
                 executeQuery·p0.00:   2512.388 ms/op
                 executeQuery·p0.50:   2512.388 ms/op
                 executeQuery·p0.90:   2516.582 ms/op
                 executeQuery·p0.95:   2516.582 ms/op
                 executeQuery·p0.99:   2516.582 ms/op
                 executeQuery·p0.999:  2516.582 ms/op
                 executeQuery·p0.9999: 2516.582 ms/op
                 executeQuery·p1.00:   2516.582 ms/op

Iteration   3: 2472.123 ±(99.9%) 8.846 ms/op
                 executeQuery·p0.00:   2470.445 ms/op
                 executeQuery·p0.50:   2470.445 ms/op
                 executeQuery·p0.90:   2474.639 ms/op
                 executeQuery·p0.95:   2474.639 ms/op
                 executeQuery·p0.99:   2474.639 ms/op
                 executeQuery·p0.999:  2474.639 ms/op
                 executeQuery·p0.9999: 2474.639 ms/op
                 executeQuery·p1.00:   2474.639 ms/op

Iteration   4: 2467.090 ±(99.9%) 7.223 ms/op
                 executeQuery·p0.00:   2466.251 ms/op
                 executeQuery·p0.50:   2466.251 ms/op
                 executeQuery·p0.90:   2470.445 ms/op
                 executeQuery·p0.95:   2470.445 ms/op
                 executeQuery·p0.99:   2470.445 ms/op
                 executeQuery·p0.999:  2470.445 ms/op
                 executeQuery·p0.9999: 2470.445 ms/op
                 executeQuery·p1.00:   2470.445 ms/op

Iteration   5: 2488.271 ±(99.9%) 266.824 ms/op
                 executeQuery·p0.00:   2466.251 ms/op
                 executeQuery·p0.50:   2468.348 ms/op
                 executeQuery·p0.90:   2550.137 ms/op
                 executeQuery·p0.95:   2550.137 ms/op
                 executeQuery·p0.99:   2550.137 ms/op
                 executeQuery·p0.999:  2550.137 ms/op
                 executeQuery·p0.9999: 2550.137 ms/op
                 executeQuery·p1.00:   2550.137 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 48
  mean =   2310.799 ±(99.9%) 84.525 ms/op

  Histogram, ms/op:
    [2100.000, 2150.000) = 6 
    [2150.000, 2200.000) = 18 
    [2200.000, 2250.000) = 1 
    [2250.000, 2300.000) = 0 
    [2300.000, 2350.000) = 0 
    [2350.000, 2400.000) = 0 
    [2400.000, 2450.000) = 0 
    [2450.000, 2500.000) = 18 
    [2500.000, 2550.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =   2147.484 ms/op
     p(50.0000) =   2183.135 ms/op
     p(90.0000) =   2512.388 ms/op
     p(95.0000) =   2514.695 ms/op
     p(99.0000) =   2550.137 ms/op
     p(99.9000) =   2550.137 ms/op
     p(99.9900) =   2550.137 ms/op
     p(99.9990) =   2550.137 ms/op
     p(99.9999) =   2550.137 ms/op
    p(100.0000) =   2550.137 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 63.10% complete, ETA 04:23:59
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 33655.095 ms/op
# Warmup Iteration   2: 34359.738 ms/op
# Warmup Iteration   3: 32514.245 ms/op
# Warmup Iteration   4: 28454.158 ms/op
# Warmup Iteration   5: 34292.630 ms/op
Iteration   1: 28185.723 ms/op
                 executeQuery·p0.00:   28185.723 ms/op
                 executeQuery·p0.50:   28185.723 ms/op
                 executeQuery·p0.90:   28185.723 ms/op
                 executeQuery·p0.95:   28185.723 ms/op
                 executeQuery·p0.99:   28185.723 ms/op
                 executeQuery·p0.999:  28185.723 ms/op
                 executeQuery·p0.9999: 28185.723 ms/op
                 executeQuery·p1.00:   28185.723 ms/op

Iteration   2: 28185.723 ms/op
                 executeQuery·p0.00:   28185.723 ms/op
                 executeQuery·p0.50:   28185.723 ms/op
                 executeQuery·p0.90:   28185.723 ms/op
                 executeQuery·p0.95:   28185.723 ms/op
                 executeQuery·p0.99:   28185.723 ms/op
                 executeQuery·p0.999:  28185.723 ms/op
                 executeQuery·p0.9999: 28185.723 ms/op
                 executeQuery·p1.00:   28185.723 ms/op

Iteration   3: 28185.723 ms/op
                 executeQuery·p0.00:   28185.723 ms/op
                 executeQuery·p0.50:   28185.723 ms/op
                 executeQuery·p0.90:   28185.723 ms/op
                 executeQuery·p0.95:   28185.723 ms/op
                 executeQuery·p0.99:   28185.723 ms/op
                 executeQuery·p0.999:  28185.723 ms/op
                 executeQuery·p0.9999: 28185.723 ms/op
                 executeQuery·p1.00:   28185.723 ms/op

Iteration   4: 28185.723 ms/op
                 executeQuery·p0.00:   28185.723 ms/op
                 executeQuery·p0.50:   28185.723 ms/op
                 executeQuery·p0.90:   28185.723 ms/op
                 executeQuery·p0.95:   28185.723 ms/op
                 executeQuery·p0.99:   28185.723 ms/op
                 executeQuery·p0.999:  28185.723 ms/op
                 executeQuery·p0.9999: 28185.723 ms/op
                 executeQuery·p1.00:   28185.723 ms/op

Iteration   5: 28185.723 ms/op
                 executeQuery·p0.00:   28185.723 ms/op
                 executeQuery·p0.50:   28185.723 ms/op
                 executeQuery·p0.90:   28185.723 ms/op
                 executeQuery·p0.95:   28185.723 ms/op
                 executeQuery·p0.99:   28185.723 ms/op
                 executeQuery·p0.999:  28185.723 ms/op
                 executeQuery·p0.9999: 28185.723 ms/op
                 executeQuery·p1.00:   28185.723 ms/op


# Run progress: 63.69% complete, ETA 04:20:27
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 33822.867 ms/op
# Warmup Iteration   2: 34493.956 ms/op
# Warmup Iteration   3: 32514.245 ms/op
# Warmup Iteration   4: 28487.713 ms/op
# Warmup Iteration   5: 34493.956 ms/op
Iteration   1: 28252.832 ms/op
                 executeQuery·p0.00:   28252.832 ms/op
                 executeQuery·p0.50:   28252.832 ms/op
                 executeQuery·p0.90:   28252.832 ms/op
                 executeQuery·p0.95:   28252.832 ms/op
                 executeQuery·p0.99:   28252.832 ms/op
                 executeQuery·p0.999:  28252.832 ms/op
                 executeQuery·p0.9999: 28252.832 ms/op
                 executeQuery·p1.00:   28252.832 ms/op

Iteration   2: 28051.505 ms/op
                 executeQuery·p0.00:   28051.505 ms/op
                 executeQuery·p0.50:   28051.505 ms/op
                 executeQuery·p0.90:   28051.505 ms/op
                 executeQuery·p0.95:   28051.505 ms/op
                 executeQuery·p0.99:   28051.505 ms/op
                 executeQuery·p0.999:  28051.505 ms/op
                 executeQuery·p0.9999: 28051.505 ms/op
                 executeQuery·p1.00:   28051.505 ms/op

Iteration   3: 28051.505 ms/op
                 executeQuery·p0.00:   28051.505 ms/op
                 executeQuery·p0.50:   28051.505 ms/op
                 executeQuery·p0.90:   28051.505 ms/op
                 executeQuery·p0.95:   28051.505 ms/op
                 executeQuery·p0.99:   28051.505 ms/op
                 executeQuery·p0.999:  28051.505 ms/op
                 executeQuery·p0.9999: 28051.505 ms/op
                 executeQuery·p1.00:   28051.505 ms/op

Iteration   4: 28051.505 ms/op
                 executeQuery·p0.00:   28051.505 ms/op
                 executeQuery·p0.50:   28051.505 ms/op
                 executeQuery·p0.90:   28051.505 ms/op
                 executeQuery·p0.95:   28051.505 ms/op
                 executeQuery·p0.99:   28051.505 ms/op
                 executeQuery·p0.999:  28051.505 ms/op
                 executeQuery·p0.9999: 28051.505 ms/op
                 executeQuery·p1.00:   28051.505 ms/op

Iteration   5: 28051.505 ms/op
                 executeQuery·p0.00:   28051.505 ms/op
                 executeQuery·p0.50:   28051.505 ms/op
                 executeQuery·p0.90:   28051.505 ms/op
                 executeQuery·p0.95:   28051.505 ms/op
                 executeQuery·p0.99:   28051.505 ms/op
                 executeQuery·p0.999:  28051.505 ms/op
                 executeQuery·p0.9999: 28051.505 ms/op
                 executeQuery·p1.00:   28051.505 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =  28138.747 ±(99.9%) 117.642 ms/op

  Histogram, ms/op:
    [28000.000, 28025.000) = 0 
    [28025.000, 28050.000) = 0 
    [28050.000, 28075.000) = 4 
    [28075.000, 28100.000) = 0 
    [28100.000, 28125.000) = 0 
    [28125.000, 28150.000) = 0 
    [28150.000, 28175.000) = 0 
    [28175.000, 28200.000) = 5 
    [28200.000, 28225.000) = 0 
    [28225.000, 28250.000) = 0 
    [28250.000, 28275.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  28051.505 ms/op
     p(50.0000) =  28185.723 ms/op
     p(90.0000) =  28246.121 ms/op
     p(95.0000) =  28252.832 ms/op
     p(99.0000) =  28252.832 ms/op
     p(99.9000) =  28252.832 ms/op
     p(99.9900) =  28252.832 ms/op
     p(99.9990) =  28252.832 ms/op
     p(99.9999) =  28252.832 ms/op
    p(100.0000) =  28252.832 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 64.29% complete, ETA 04:16:52
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1736.442 ±(99.9%) 188.369 ms/op
# Warmup Iteration   2: 1649.760 ±(99.9%) 18.094 ms/op
# Warmup Iteration   3: 1647.313 ±(99.9%) 8.919 ms/op
# Warmup Iteration   4: 1646.614 ±(99.9%) 6.875 ms/op
# Warmup Iteration   5: 1648.711 ±(99.9%) 10.790 ms/op
Iteration   1: 1668.284 ±(99.9%) 118.714 ms/op
                 executeQuery·p0.00:   1642.070 ms/op
                 executeQuery·p0.50:   1653.604 ms/op
                 executeQuery·p0.90:   1753.219 ms/op
                 executeQuery·p0.95:   1753.219 ms/op
                 executeQuery·p0.99:   1753.219 ms/op
                 executeQuery·p0.999:  1753.219 ms/op
                 executeQuery·p0.9999: 1753.219 ms/op
                 executeQuery·p1.00:   1753.219 ms/op

Iteration   2: 1655.702 ±(99.9%) 27.771 ms/op
                 executeQuery·p0.00:   1642.070 ms/op
                 executeQuery·p0.50:   1660.944 ms/op
                 executeQuery·p0.90:   1665.139 ms/op
                 executeQuery·p0.95:   1665.139 ms/op
                 executeQuery·p0.99:   1665.139 ms/op
                 executeQuery·p0.999:  1665.139 ms/op
                 executeQuery·p0.9999: 1665.139 ms/op
                 executeQuery·p1.00:   1665.139 ms/op

Iteration   3: 1641.371 ±(99.9%) 3.037 ms/op
                 executeQuery·p0.00:   1639.973 ms/op
                 executeQuery·p0.50:   1642.070 ms/op
                 executeQuery·p0.90:   1642.070 ms/op
                 executeQuery·p0.95:   1642.070 ms/op
                 executeQuery·p0.99:   1642.070 ms/op
                 executeQuery·p0.999:  1642.070 ms/op
                 executeQuery·p0.9999: 1642.070 ms/op
                 executeQuery·p1.00:   1642.070 ms/op

Iteration   4: 1640.672 ±(99.9%) 4.802 ms/op
                 executeQuery·p0.00:   1637.876 ms/op
                 executeQuery·p0.50:   1641.021 ms/op
                 executeQuery·p0.90:   1642.070 ms/op
                 executeQuery·p0.95:   1642.070 ms/op
                 executeQuery·p0.99:   1642.070 ms/op
                 executeQuery·p0.999:  1642.070 ms/op
                 executeQuery·p0.9999: 1642.070 ms/op
                 executeQuery·p1.00:   1642.070 ms/op

Iteration   5: 1639.374 ±(99.9%) 2.305 ms/op
                 executeQuery·p0.00:   1637.876 ms/op
                 executeQuery·p0.50:   1639.973 ms/op
                 executeQuery·p0.90:   1639.973 ms/op
                 executeQuery·p0.95:   1639.973 ms/op
                 executeQuery·p0.99:   1639.973 ms/op
                 executeQuery·p0.999:  1639.973 ms/op
                 executeQuery·p0.9999: 1639.973 ms/op
                 executeQuery·p1.00:   1639.973 ms/op


# Run progress: 64.88% complete, ETA 04:11:13
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1714.072 ±(99.9%) 197.044 ms/op
# Warmup Iteration   2: 1648.361 ±(99.9%) 8.317 ms/op
# Warmup Iteration   3: 1644.167 ±(99.9%) 5.260 ms/op
# Warmup Iteration   4: 1644.866 ±(99.9%) 8.035 ms/op
# Warmup Iteration   5: 1661.294 ±(99.9%) 126.371 ms/op
Iteration   1: 1649.760 ±(99.9%) 4.802 ms/op
                 executeQuery·p0.00:   1648.361 ms/op
                 executeQuery·p0.50:   1649.410 ms/op
                 executeQuery·p0.90:   1652.556 ms/op
                 executeQuery·p0.95:   1652.556 ms/op
                 executeQuery·p0.99:   1652.556 ms/op
                 executeQuery·p0.999:  1652.556 ms/op
                 executeQuery·p0.9999: 1652.556 ms/op
                 executeQuery·p1.00:   1652.556 ms/op

Iteration   2: 1645.565 ±(99.9%) 13.750 ms/op
                 executeQuery·p0.00:   1635.779 ms/op
                 executeQuery·p0.50:   1647.313 ms/op
                 executeQuery·p0.90:   1648.361 ms/op
                 executeQuery·p0.95:   1648.361 ms/op
                 executeQuery·p0.99:   1648.361 ms/op
                 executeQuery·p0.999:  1648.361 ms/op
                 executeQuery·p0.9999: 1648.361 ms/op
                 executeQuery·p1.00:   1648.361 ms/op

Iteration   3: 1639.074 ±(99.9%) 4.609 ms/op
                 executeQuery·p0.00:   1635.779 ms/op
                 executeQuery·p0.50:   1639.973 ms/op
                 executeQuery·p0.90:   1642.070 ms/op
                 executeQuery·p0.95:   1642.070 ms/op
                 executeQuery·p0.99:   1642.070 ms/op
                 executeQuery·p0.999:  1642.070 ms/op
                 executeQuery·p0.9999: 1642.070 ms/op
                 executeQuery·p1.00:   1642.070 ms/op

Iteration   4: 1640.322 ±(99.9%) 10.790 ms/op
                 executeQuery·p0.00:   1635.779 ms/op
                 executeQuery·p0.50:   1641.021 ms/op
                 executeQuery·p0.90:   1644.167 ms/op
                 executeQuery·p0.95:   1644.167 ms/op
                 executeQuery·p0.99:   1644.167 ms/op
                 executeQuery·p0.999:  1644.167 ms/op
                 executeQuery·p0.9999: 1644.167 ms/op
                 executeQuery·p1.00:   1644.167 ms/op

Iteration   5: 1639.673 ±(99.9%) 5.049 ms/op
                 executeQuery·p0.00:   1635.779 ms/op
                 executeQuery·p0.50:   1639.973 ms/op
                 executeQuery·p0.90:   1642.070 ms/op
                 executeQuery·p0.95:   1642.070 ms/op
                 executeQuery·p0.99:   1642.070 ms/op
                 executeQuery·p0.999:  1642.070 ms/op
                 executeQuery·p0.9999: 1642.070 ms/op
                 executeQuery·p1.00:   1642.070 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 63
  mean =   1645.665 ±(99.9%) 6.720 ms/op

  Histogram, ms/op:
    [1600.000, 1612.500) = 0 
    [1612.500, 1625.000) = 0 
    [1625.000, 1637.500) = 5 
    [1637.500, 1650.000) = 47 
    [1650.000, 1662.500) = 8 
    [1662.500, 1675.000) = 2 
    [1675.000, 1687.500) = 0 
    [1687.500, 1700.000) = 0 
    [1700.000, 1712.500) = 0 
    [1712.500, 1725.000) = 0 
    [1725.000, 1737.500) = 0 
    [1737.500, 1750.000) = 0 
    [1750.000, 1762.500) = 1 
    [1762.500, 1775.000) = 0 
    [1775.000, 1787.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1635.779 ms/op
     p(50.0000) =   1642.070 ms/op
     p(90.0000) =   1659.267 ms/op
     p(95.0000) =   1662.622 ms/op
     p(99.0000) =   1753.219 ms/op
     p(99.9000) =   1753.219 ms/op
     p(99.9900) =   1753.219 ms/op
     p(99.9990) =   1753.219 ms/op
     p(99.9999) =   1753.219 ms/op
    p(100.0000) =   1753.219 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 65.48% complete, ETA 04:05:39
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 22112.371 ms/op
# Warmup Iteration   2: 21911.044 ms/op
# Warmup Iteration   3: 20971.520 ms/op
# Warmup Iteration   4: 20535.312 ms/op
# Warmup Iteration   5: 20535.312 ms/op
Iteration   1: 20468.204 ms/op
                 executeQuery·p0.00:   20468.204 ms/op
                 executeQuery·p0.50:   20468.204 ms/op
                 executeQuery·p0.90:   20468.204 ms/op
                 executeQuery·p0.95:   20468.204 ms/op
                 executeQuery·p0.99:   20468.204 ms/op
                 executeQuery·p0.999:  20468.204 ms/op
                 executeQuery·p0.9999: 20468.204 ms/op
                 executeQuery·p1.00:   20468.204 ms/op

Iteration   2: 20501.758 ms/op
                 executeQuery·p0.00:   20501.758 ms/op
                 executeQuery·p0.50:   20501.758 ms/op
                 executeQuery·p0.90:   20501.758 ms/op
                 executeQuery·p0.95:   20501.758 ms/op
                 executeQuery·p0.99:   20501.758 ms/op
                 executeQuery·p0.999:  20501.758 ms/op
                 executeQuery·p0.9999: 20501.758 ms/op
                 executeQuery·p1.00:   20501.758 ms/op

Iteration   3: 20501.758 ms/op
                 executeQuery·p0.00:   20501.758 ms/op
                 executeQuery·p0.50:   20501.758 ms/op
                 executeQuery·p0.90:   20501.758 ms/op
                 executeQuery·p0.95:   20501.758 ms/op
                 executeQuery·p0.99:   20501.758 ms/op
                 executeQuery·p0.999:  20501.758 ms/op
                 executeQuery·p0.9999: 20501.758 ms/op
                 executeQuery·p1.00:   20501.758 ms/op

Iteration   4: 20468.204 ms/op
                 executeQuery·p0.00:   20468.204 ms/op
                 executeQuery·p0.50:   20468.204 ms/op
                 executeQuery·p0.90:   20468.204 ms/op
                 executeQuery·p0.95:   20468.204 ms/op
                 executeQuery·p0.99:   20468.204 ms/op
                 executeQuery·p0.999:  20468.204 ms/op
                 executeQuery·p0.9999: 20468.204 ms/op
                 executeQuery·p1.00:   20468.204 ms/op

Iteration   5: 20602.421 ms/op
                 executeQuery·p0.00:   20602.421 ms/op
                 executeQuery·p0.50:   20602.421 ms/op
                 executeQuery·p0.90:   20602.421 ms/op
                 executeQuery·p0.95:   20602.421 ms/op
                 executeQuery·p0.99:   20602.421 ms/op
                 executeQuery·p0.999:  20602.421 ms/op
                 executeQuery·p0.9999: 20602.421 ms/op
                 executeQuery·p1.00:   20602.421 ms/op


# Run progress: 66.07% complete, ETA 04:01:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 22145.925 ms/op
# Warmup Iteration   2: 21911.044 ms/op
# Warmup Iteration   3: 20837.302 ms/op
# Warmup Iteration   4: 20401.095 ms/op
# Warmup Iteration   5: 20401.095 ms/op
Iteration   1: 20401.095 ms/op
                 executeQuery·p0.00:   20401.095 ms/op
                 executeQuery·p0.50:   20401.095 ms/op
                 executeQuery·p0.90:   20401.095 ms/op
                 executeQuery·p0.95:   20401.095 ms/op
                 executeQuery·p0.99:   20401.095 ms/op
                 executeQuery·p0.999:  20401.095 ms/op
                 executeQuery·p0.9999: 20401.095 ms/op
                 executeQuery·p1.00:   20401.095 ms/op

Iteration   2: 20401.095 ms/op
                 executeQuery·p0.00:   20401.095 ms/op
                 executeQuery·p0.50:   20401.095 ms/op
                 executeQuery·p0.90:   20401.095 ms/op
                 executeQuery·p0.95:   20401.095 ms/op
                 executeQuery·p0.99:   20401.095 ms/op
                 executeQuery·p0.999:  20401.095 ms/op
                 executeQuery·p0.9999: 20401.095 ms/op
                 executeQuery·p1.00:   20401.095 ms/op

Iteration   3: 20468.204 ms/op
                 executeQuery·p0.00:   20468.204 ms/op
                 executeQuery·p0.50:   20468.204 ms/op
                 executeQuery·p0.90:   20468.204 ms/op
                 executeQuery·p0.95:   20468.204 ms/op
                 executeQuery·p0.99:   20468.204 ms/op
                 executeQuery·p0.999:  20468.204 ms/op
                 executeQuery·p0.9999: 20468.204 ms/op
                 executeQuery·p1.00:   20468.204 ms/op

Iteration   4: 20568.867 ms/op
                 executeQuery·p0.00:   20568.867 ms/op
                 executeQuery·p0.50:   20568.867 ms/op
                 executeQuery·p0.90:   20568.867 ms/op
                 executeQuery·p0.95:   20568.867 ms/op
                 executeQuery·p0.99:   20568.867 ms/op
                 executeQuery·p0.999:  20568.867 ms/op
                 executeQuery·p0.9999: 20568.867 ms/op
                 executeQuery·p1.00:   20568.867 ms/op

Iteration   5: 20568.867 ms/op
                 executeQuery·p0.00:   20568.867 ms/op
                 executeQuery·p0.50:   20568.867 ms/op
                 executeQuery·p0.90:   20568.867 ms/op
                 executeQuery·p0.95:   20568.867 ms/op
                 executeQuery·p0.99:   20568.867 ms/op
                 executeQuery·p0.999:  20568.867 ms/op
                 executeQuery·p0.9999: 20568.867 ms/op
                 executeQuery·p1.00:   20568.867 ms/op



Result "benchmarks.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery":
  N = 10
  mean =  20495.047 ±(99.9%) 103.689 ms/op

  Histogram, ms/op:
    [20400.000, 20425.000) = 2 
    [20425.000, 20450.000) = 0 
    [20450.000, 20475.000) = 3 
    [20475.000, 20500.000) = 0 
    [20500.000, 20525.000) = 2 
    [20525.000, 20550.000) = 0 
    [20550.000, 20575.000) = 2 
    [20575.000, 20600.000) = 0 
    [20600.000, 20625.000) = 1 
    [20625.000, 20650.000) = 0 
    [20650.000, 20675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  20401.095 ms/op
     p(50.0000) =  20484.981 ms/op
     p(90.0000) =  20599.066 ms/op
     p(95.0000) =  20602.421 ms/op
     p(99.0000) =  20602.421 ms/op
     p(99.9000) =  20602.421 ms/op
     p(99.9900) =  20602.421 ms/op
     p(99.9990) =  20602.421 ms/op
     p(99.9999) =  20602.421 ms/op
    p(100.0000) =  20602.421 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 66.67% complete, ETA 03:56:41
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2344.616 ±(99.9%) 176.184 ms/op
# Warmup Iteration   2: 2303.512 ±(99.9%) 21.058 ms/op
# Warmup Iteration   3: 2295.123 ±(99.9%) 7.223 ms/op
# Warmup Iteration   4: 2293.445 ±(99.9%) 7.223 ms/op
# Warmup Iteration   5: 2293.445 ±(99.9%) 7.223 ms/op
Iteration   1: 2302.673 ±(99.9%) 99.560 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2290.090 ms/op
                 executeQuery·p0.90:   2348.810 ms/op
                 executeQuery·p0.95:   2348.810 ms/op
                 executeQuery·p0.99:   2348.810 ms/op
                 executeQuery·p0.999:  2348.810 ms/op
                 executeQuery·p0.9999: 2348.810 ms/op
                 executeQuery·p1.00:   2348.810 ms/op

Iteration   2: 2293.445 ±(99.9%) 7.223 ms/op
                 executeQuery·p0.00:   2290.090 ms/op
                 executeQuery·p0.50:   2294.284 ms/op
                 executeQuery·p0.90:   2294.284 ms/op
                 executeQuery·p0.95:   2294.284 ms/op
                 executeQuery·p0.99:   2294.284 ms/op
                 executeQuery·p0.999:  2294.284 ms/op
                 executeQuery·p0.9999: 2294.284 ms/op
                 executeQuery·p1.00:   2294.284 ms/op

Iteration   3: 2298.479 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2298.479 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2298.479 ms/op
                 executeQuery·p0.95:   2298.479 ms/op
                 executeQuery·p0.99:   2298.479 ms/op
                 executeQuery·p0.999:  2298.479 ms/op
                 executeQuery·p0.9999: 2298.479 ms/op
                 executeQuery·p1.00:   2298.479 ms/op

Iteration   4: 2300.995 ±(99.9%) 8.846 ms/op
                 executeQuery·p0.00:   2298.479 ms/op
                 executeQuery·p0.50:   2302.673 ms/op
                 executeQuery·p0.90:   2302.673 ms/op
                 executeQuery·p0.95:   2302.673 ms/op
                 executeQuery·p0.99:   2302.673 ms/op
                 executeQuery·p0.999:  2302.673 ms/op
                 executeQuery·p0.9999: 2302.673 ms/op
                 executeQuery·p1.00:   2302.673 ms/op

Iteration   5: 2298.479 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2298.479 ms/op
                 executeQuery·p0.50:   2298.479 ms/op
                 executeQuery·p0.90:   2298.479 ms/op
                 executeQuery·p0.95:   2298.479 ms/op
                 executeQuery·p0.99:   2298.479 ms/op
                 executeQuery·p0.999:  2298.479 ms/op
                 executeQuery·p0.9999: 2298.479 ms/op
                 executeQuery·p1.00:   2298.479 ms/op


# Run progress: 67.26% complete, ETA 03:51:23
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2351.327 ±(99.9%) 167.299 ms/op
# Warmup Iteration   2: 2323.644 ±(99.9%) 16.151 ms/op
# Warmup Iteration   3: 2312.739 ±(99.9%) 8.846 ms/op
# Warmup Iteration   4: 2312.739 ±(99.9%) 8.846 ms/op
# Warmup Iteration   5: 2312.739 ±(99.9%) 8.846 ms/op
Iteration   1: 2322.806 ±(99.9%) 101.120 ms/op
                 executeQuery·p0.00:   2311.062 ms/op
                 executeQuery·p0.50:   2311.062 ms/op
                 executeQuery·p0.90:   2369.782 ms/op
                 executeQuery·p0.95:   2369.782 ms/op
                 executeQuery·p0.99:   2369.782 ms/op
                 executeQuery·p0.999:  2369.782 ms/op
                 executeQuery·p0.9999: 2369.782 ms/op
                 executeQuery·p1.00:   2369.782 ms/op

Iteration   2: 2310.223 ±(99.9%) 7.223 ms/op
                 executeQuery·p0.00:   2306.867 ms/op
                 executeQuery·p0.50:   2311.062 ms/op
                 executeQuery·p0.90:   2311.062 ms/op
                 executeQuery·p0.95:   2311.062 ms/op
                 executeQuery·p0.99:   2311.062 ms/op
                 executeQuery·p0.999:  2311.062 ms/op
                 executeQuery·p0.9999: 2311.062 ms/op
                 executeQuery·p1.00:   2311.062 ms/op

Iteration   3: 2315.256 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2315.256 ms/op
                 executeQuery·p0.50:   2315.256 ms/op
                 executeQuery·p0.90:   2315.256 ms/op
                 executeQuery·p0.95:   2315.256 ms/op
                 executeQuery·p0.99:   2315.256 ms/op
                 executeQuery·p0.999:  2315.256 ms/op
                 executeQuery·p0.9999: 2315.256 ms/op
                 executeQuery·p1.00:   2315.256 ms/op

Iteration   4: 2316.095 ±(99.9%) 17.692 ms/op
                 executeQuery·p0.00:   2311.062 ms/op
                 executeQuery·p0.50:   2315.256 ms/op
                 executeQuery·p0.90:   2323.644 ms/op
                 executeQuery·p0.95:   2323.644 ms/op
                 executeQuery·p0.99:   2323.644 ms/op
                 executeQuery·p0.999:  2323.644 ms/op
                 executeQuery·p0.9999: 2323.644 ms/op
                 executeQuery·p1.00:   2323.644 ms/op

Iteration   5: 2314.417 ±(99.9%) 7.223 ms/op
                 executeQuery·p0.00:   2311.062 ms/op
                 executeQuery·p0.50:   2315.256 ms/op
                 executeQuery·p0.90:   2315.256 ms/op
                 executeQuery·p0.95:   2315.256 ms/op
                 executeQuery·p0.99:   2315.256 ms/op
                 executeQuery·p0.999:  2315.256 ms/op
                 executeQuery·p0.9999: 2315.256 ms/op
                 executeQuery·p1.00:   2315.256 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 50
  mean =   2307.287 ±(99.9%) 7.010 ms/op

  Histogram, ms/op:
    [2290.000, 2295.000) = 9 
    [2295.000, 2300.000) = 12 
    [2300.000, 2305.000) = 3 
    [2305.000, 2310.000) = 1 
    [2310.000, 2315.000) = 10 
    [2315.000, 2320.000) = 12 
    [2320.000, 2325.000) = 1 
    [2325.000, 2330.000) = 0 
    [2330.000, 2335.000) = 0 
    [2335.000, 2340.000) = 0 
    [2340.000, 2345.000) = 0 
    [2345.000, 2350.000) = 1 
    [2350.000, 2355.000) = 0 
    [2355.000, 2360.000) = 0 
    [2360.000, 2365.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2290.090 ms/op
     p(50.0000) =   2308.964 ms/op
     p(90.0000) =   2315.256 ms/op
     p(95.0000) =   2334.969 ms/op
     p(99.0000) =   2369.782 ms/op
     p(99.9000) =   2369.782 ms/op
     p(99.9900) =   2369.782 ms/op
     p(99.9990) =   2369.782 ms/op
     p(99.9999) =   2369.782 ms/op
    p(100.0000) =   2369.782 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 67.86% complete, ETA 03:46:08
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 29896.999 ms/op
# Warmup Iteration   2: 31574.721 ms/op
# Warmup Iteration   3: 30635.196 ms/op
# Warmup Iteration   4: 30635.196 ms/op
# Warmup Iteration   5: 30668.751 ms/op
Iteration   1: 30635.196 ms/op
                 executeQuery·p0.00:   30635.196 ms/op
                 executeQuery·p0.50:   30635.196 ms/op
                 executeQuery·p0.90:   30635.196 ms/op
                 executeQuery·p0.95:   30635.196 ms/op
                 executeQuery·p0.99:   30635.196 ms/op
                 executeQuery·p0.999:  30635.196 ms/op
                 executeQuery·p0.9999: 30635.196 ms/op
                 executeQuery·p1.00:   30635.196 ms/op

Iteration   2: 30635.196 ms/op
                 executeQuery·p0.00:   30635.196 ms/op
                 executeQuery·p0.50:   30635.196 ms/op
                 executeQuery·p0.90:   30635.196 ms/op
                 executeQuery·p0.95:   30635.196 ms/op
                 executeQuery·p0.99:   30635.196 ms/op
                 executeQuery·p0.999:  30635.196 ms/op
                 executeQuery·p0.9999: 30635.196 ms/op
                 executeQuery·p1.00:   30635.196 ms/op

Iteration   3: 30635.196 ms/op
                 executeQuery·p0.00:   30635.196 ms/op
                 executeQuery·p0.50:   30635.196 ms/op
                 executeQuery·p0.90:   30635.196 ms/op
                 executeQuery·p0.95:   30635.196 ms/op
                 executeQuery·p0.99:   30635.196 ms/op
                 executeQuery·p0.999:  30635.196 ms/op
                 executeQuery·p0.9999: 30635.196 ms/op
                 executeQuery·p1.00:   30635.196 ms/op

Iteration   4: 30635.196 ms/op
                 executeQuery·p0.00:   30635.196 ms/op
                 executeQuery·p0.50:   30635.196 ms/op
                 executeQuery·p0.90:   30635.196 ms/op
                 executeQuery·p0.95:   30635.196 ms/op
                 executeQuery·p0.99:   30635.196 ms/op
                 executeQuery·p0.999:  30635.196 ms/op
                 executeQuery·p0.9999: 30635.196 ms/op
                 executeQuery·p1.00:   30635.196 ms/op

Iteration   5: 30635.196 ms/op
                 executeQuery·p0.00:   30635.196 ms/op
                 executeQuery·p0.50:   30635.196 ms/op
                 executeQuery·p0.90:   30635.196 ms/op
                 executeQuery·p0.95:   30635.196 ms/op
                 executeQuery·p0.99:   30635.196 ms/op
                 executeQuery·p0.999:  30635.196 ms/op
                 executeQuery·p0.9999: 30635.196 ms/op
                 executeQuery·p1.00:   30635.196 ms/op


# Run progress: 68.45% complete, ETA 03:42:35
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 29326.574 ms/op
# Warmup Iteration   2: 32044.483 ms/op
# Warmup Iteration   3: 31104.958 ms/op
# Warmup Iteration   4: 31306.285 ms/op
# Warmup Iteration   5: 31104.958 ms/op
Iteration   1: 31104.958 ms/op
                 executeQuery·p0.00:   31104.958 ms/op
                 executeQuery·p0.50:   31104.958 ms/op
                 executeQuery·p0.90:   31104.958 ms/op
                 executeQuery·p0.95:   31104.958 ms/op
                 executeQuery·p0.99:   31104.958 ms/op
                 executeQuery·p0.999:  31104.958 ms/op
                 executeQuery·p0.9999: 31104.958 ms/op
                 executeQuery·p1.00:   31104.958 ms/op

Iteration   2: 31104.958 ms/op
                 executeQuery·p0.00:   31104.958 ms/op
                 executeQuery·p0.50:   31104.958 ms/op
                 executeQuery·p0.90:   31104.958 ms/op
                 executeQuery·p0.95:   31104.958 ms/op
                 executeQuery·p0.99:   31104.958 ms/op
                 executeQuery·p0.999:  31104.958 ms/op
                 executeQuery·p0.9999: 31104.958 ms/op
                 executeQuery·p1.00:   31104.958 ms/op

Iteration   3: 30534.533 ms/op
                 executeQuery·p0.00:   30534.533 ms/op
                 executeQuery·p0.50:   30534.533 ms/op
                 executeQuery·p0.90:   30534.533 ms/op
                 executeQuery·p0.95:   30534.533 ms/op
                 executeQuery·p0.99:   30534.533 ms/op
                 executeQuery·p0.999:  30534.533 ms/op
                 executeQuery·p0.9999: 30534.533 ms/op
                 executeQuery·p1.00:   30534.533 ms/op

Iteration   4: 30568.088 ms/op
                 executeQuery·p0.00:   30568.088 ms/op
                 executeQuery·p0.50:   30568.088 ms/op
                 executeQuery·p0.90:   30568.088 ms/op
                 executeQuery·p0.95:   30568.088 ms/op
                 executeQuery·p0.99:   30568.088 ms/op
                 executeQuery·p0.999:  30568.088 ms/op
                 executeQuery·p0.9999: 30568.088 ms/op
                 executeQuery·p1.00:   30568.088 ms/op

Iteration   5: 30601.642 ms/op
                 executeQuery·p0.00:   30601.642 ms/op
                 executeQuery·p0.50:   30601.642 ms/op
                 executeQuery·p0.90:   30601.642 ms/op
                 executeQuery·p0.95:   30601.642 ms/op
                 executeQuery·p0.99:   30601.642 ms/op
                 executeQuery·p0.999:  30601.642 ms/op
                 executeQuery·p0.9999: 30601.642 ms/op
                 executeQuery·p1.00:   30601.642 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =  30709.016 ±(99.9%) 319.770 ms/op

  Histogram, ms/op:
    [30500.000, 30550.000) = 1 
    [30550.000, 30600.000) = 1 
    [30600.000, 30650.000) = 6 
    [30650.000, 30700.000) = 0 
    [30700.000, 30750.000) = 0 
    [30750.000, 30800.000) = 0 
    [30800.000, 30850.000) = 0 
    [30850.000, 30900.000) = 0 
    [30900.000, 30950.000) = 0 
    [30950.000, 31000.000) = 0 
    [31000.000, 31050.000) = 0 
    [31050.000, 31100.000) = 0 
    [31100.000, 31150.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  30534.533 ms/op
     p(50.0000) =  30635.196 ms/op
     p(90.0000) =  31104.958 ms/op
     p(95.0000) =  31104.958 ms/op
     p(99.0000) =  31104.958 ms/op
     p(99.9000) =  31104.958 ms/op
     p(99.9900) =  31104.958 ms/op
     p(99.9990) =  31104.958 ms/op
     p(99.9999) =  31104.958 ms/op
    p(100.0000) =  31104.958 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8)

# Run progress: 69.05% complete, ETA 03:39:01
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1269.039 ±(99.9%) 161.706 ms/op
# Warmup Iteration   2: 1219.843 ±(99.9%) 57.881 ms/op
# Warmup Iteration   3: 1209.591 ±(99.9%) 2.937 ms/op
# Warmup Iteration   4: 1209.824 ±(99.9%) 6.216 ms/op
# Warmup Iteration   5: 1209.358 ±(99.9%) 5.286 ms/op
Iteration   1: 1209.358 ±(99.9%) 2.492 ms/op
                 executeQuery·p0.00:   1207.960 ms/op
                 executeQuery·p0.50:   1210.057 ms/op
                 executeQuery·p0.90:   1212.154 ms/op
                 executeQuery·p0.95:   1212.154 ms/op
                 executeQuery·p0.99:   1212.154 ms/op
                 executeQuery·p0.999:  1212.154 ms/op
                 executeQuery·p0.9999: 1212.154 ms/op
                 executeQuery·p1.00:   1212.154 ms/op

Iteration   2: 1211.921 ±(99.9%) 16.192 ms/op
                 executeQuery·p0.00:   1207.960 ms/op
                 executeQuery·p0.50:   1207.960 ms/op
                 executeQuery·p0.90:   1237.320 ms/op
                 executeQuery·p0.95:   1237.320 ms/op
                 executeQuery·p0.99:   1237.320 ms/op
                 executeQuery·p0.999:  1237.320 ms/op
                 executeQuery·p0.9999: 1237.320 ms/op
                 executeQuery·p1.00:   1237.320 ms/op

Iteration   3: 1209.591 ±(99.9%) 6.299 ms/op
                 executeQuery·p0.00:   1203.765 ms/op
                 executeQuery·p0.50:   1207.960 ms/op
                 executeQuery·p0.90:   1216.348 ms/op
                 executeQuery·p0.95:   1216.348 ms/op
                 executeQuery·p0.99:   1216.348 ms/op
                 executeQuery·p0.999:  1216.348 ms/op
                 executeQuery·p0.9999: 1216.348 ms/op
                 executeQuery·p1.00:   1216.348 ms/op

Iteration   4: 1208.659 ±(99.9%) 5.286 ms/op
                 executeQuery·p0.00:   1205.862 ms/op
                 executeQuery·p0.50:   1207.960 ms/op
                 executeQuery·p0.90:   1216.348 ms/op
                 executeQuery·p0.95:   1216.348 ms/op
                 executeQuery·p0.99:   1216.348 ms/op
                 executeQuery·p0.999:  1216.348 ms/op
                 executeQuery·p0.9999: 1216.348 ms/op
                 executeQuery·p1.00:   1216.348 ms/op

Iteration   5: 1207.727 ±(99.9%) 2.755 ms/op
                 executeQuery·p0.00:   1203.765 ms/op
                 executeQuery·p0.50:   1207.960 ms/op
                 executeQuery·p0.90:   1210.057 ms/op
                 executeQuery·p0.95:   1210.057 ms/op
                 executeQuery·p0.99:   1210.057 ms/op
                 executeQuery·p0.999:  1210.057 ms/op
                 executeQuery·p0.9999: 1210.057 ms/op
                 executeQuery·p1.00:   1210.057 ms/op


# Run progress: 69.64% complete, ETA 03:33:47
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1404.792 ±(99.9%) 146.508 ms/op
# Warmup Iteration   2: 1379.926 ±(99.9%) 4.287 ms/op
# Warmup Iteration   3: 1381.499 ±(99.9%) 4.671 ms/op
# Warmup Iteration   4: 1383.334 ±(99.9%) 2.075 ms/op
# Warmup Iteration   5: 1382.810 ±(99.9%) 2.075 ms/op
Iteration   1: 1376.256 ±(99.9%) 2.835 ms/op
                 executeQuery·p0.00:   1373.635 ms/op
                 executeQuery·p0.50:   1375.732 ms/op
                 executeQuery·p0.90:   1377.829 ms/op
                 executeQuery·p0.95:   1377.829 ms/op
                 executeQuery·p0.99:   1377.829 ms/op
                 executeQuery·p0.999:  1377.829 ms/op
                 executeQuery·p0.9999: 1377.829 ms/op
                 executeQuery·p1.00:   1377.829 ms/op

Iteration   2: 1374.945 ±(99.9%) 2.075 ms/op
                 executeQuery·p0.00:   1373.635 ms/op
                 executeQuery·p0.50:   1375.732 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op

Iteration   3: 1375.732 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   1375.732 ms/op
                 executeQuery·p0.50:   1375.732 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op

Iteration   4: 1375.470 ±(99.9%) 3.346 ms/op
                 executeQuery·p0.00:   1371.537 ms/op
                 executeQuery·p0.50:   1375.732 ms/op
                 executeQuery·p0.90:   1377.829 ms/op
                 executeQuery·p0.95:   1377.829 ms/op
                 executeQuery·p0.99:   1377.829 ms/op
                 executeQuery·p0.999:  1377.829 ms/op
                 executeQuery·p0.9999: 1377.829 ms/op
                 executeQuery·p1.00:   1377.829 ms/op

Iteration   5: 1374.683 ±(99.9%) 2.143 ms/op
                 executeQuery·p0.00:   1373.635 ms/op
                 executeQuery·p0.50:   1374.683 ms/op
                 executeQuery·p0.90:   1375.732 ms/op
                 executeQuery·p0.95:   1375.732 ms/op
                 executeQuery·p0.99:   1375.732 ms/op
                 executeQuery·p0.999:  1375.732 ms/op
                 executeQuery·p0.9999: 1375.732 ms/op
                 executeQuery·p1.00:   1375.732 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 85
  mean =   1287.553 ±(99.9%) 30.853 ms/op

  Histogram, ms/op:
    [1200.000, 1212.500) = 41 
    [1212.500, 1225.000) = 3 
    [1225.000, 1237.500) = 1 
    [1237.500, 1250.000) = 0 
    [1250.000, 1262.500) = 0 
    [1262.500, 1275.000) = 0 
    [1275.000, 1287.500) = 0 
    [1287.500, 1300.000) = 0 
    [1300.000, 1312.500) = 0 
    [1312.500, 1325.000) = 0 
    [1325.000, 1337.500) = 0 
    [1337.500, 1350.000) = 0 
    [1350.000, 1362.500) = 0 
    [1362.500, 1375.000) = 9 
    [1375.000, 1387.500) = 31 

  Percentiles, ms/op:
      p(0.0000) =   1203.765 ms/op
     p(50.0000) =   1216.348 ms/op
     p(90.0000) =   1375.732 ms/op
     p(95.0000) =   1377.200 ms/op
     p(99.0000) =   1377.829 ms/op
     p(99.9000) =   1377.829 ms/op
     p(99.9900) =   1377.829 ms/op
     p(99.9990) =   1377.829 ms/op
     p(99.9999) =   1377.829 ms/op
    p(100.0000) =   1377.829 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery
# Parameters: (tableFilePath = /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8)

# Run progress: 70.24% complete, ETA 03:28:37
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 17314.087 ms/op
# Warmup Iteration   2: 17213.424 ms/op
# Warmup Iteration   3: 16827.548 ms/op
# Warmup Iteration   4: 18253.611 ms/op
# Warmup Iteration   5: 18052.284 ms/op
Iteration   1: 17062.429 ms/op
                 executeQuery·p0.00:   17062.429 ms/op
                 executeQuery·p0.50:   17062.429 ms/op
                 executeQuery·p0.90:   17062.429 ms/op
                 executeQuery·p0.95:   17062.429 ms/op
                 executeQuery·p0.99:   17062.429 ms/op
                 executeQuery·p0.999:  17062.429 ms/op
                 executeQuery·p0.9999: 17062.429 ms/op
                 executeQuery·p1.00:   17062.429 ms/op

Iteration   2: 16156.459 ms/op
                 executeQuery·p0.00:   16156.459 ms/op
                 executeQuery·p0.50:   16156.459 ms/op
                 executeQuery·p0.90:   16156.459 ms/op
                 executeQuery·p0.95:   16156.459 ms/op
                 executeQuery·p0.99:   16156.459 ms/op
                 executeQuery·p0.999:  16156.459 ms/op
                 executeQuery·p0.9999: 16156.459 ms/op
                 executeQuery·p1.00:   16156.459 ms/op

Iteration   3: 16156.459 ms/op
                 executeQuery·p0.00:   16156.459 ms/op
                 executeQuery·p0.50:   16156.459 ms/op
                 executeQuery·p0.90:   16156.459 ms/op
                 executeQuery·p0.95:   16156.459 ms/op
                 executeQuery·p0.99:   16156.459 ms/op
                 executeQuery·p0.999:  16156.459 ms/op
                 executeQuery·p0.9999: 16156.459 ms/op
                 executeQuery·p1.00:   16156.459 ms/op

Iteration   4: 16156.459 ms/op
                 executeQuery·p0.00:   16156.459 ms/op
                 executeQuery·p0.50:   16156.459 ms/op
                 executeQuery·p0.90:   16156.459 ms/op
                 executeQuery·p0.95:   16156.459 ms/op
                 executeQuery·p0.99:   16156.459 ms/op
                 executeQuery·p0.999:  16156.459 ms/op
                 executeQuery·p0.9999: 16156.459 ms/op
                 executeQuery·p1.00:   16156.459 ms/op

Iteration   5: 16156.459 ms/op
                 executeQuery·p0.00:   16156.459 ms/op
                 executeQuery·p0.50:   16156.459 ms/op
                 executeQuery·p0.90:   16156.459 ms/op
                 executeQuery·p0.95:   16156.459 ms/op
                 executeQuery·p0.99:   16156.459 ms/op
                 executeQuery·p0.999:  16156.459 ms/op
                 executeQuery·p0.9999: 16156.459 ms/op
                 executeQuery·p1.00:   16156.459 ms/op


# Run progress: 70.83% complete, ETA 03:24:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 17163.092 ms/op
# Warmup Iteration   2: 16928.211 ms/op
# Warmup Iteration   3: 16542.335 ms/op
# Warmup Iteration   4: 17918.067 ms/op
# Warmup Iteration   5: 17582.522 ms/op
Iteration   1: 16710.107 ms/op
                 executeQuery·p0.00:   16710.107 ms/op
                 executeQuery·p0.50:   16710.107 ms/op
                 executeQuery·p0.90:   16710.107 ms/op
                 executeQuery·p0.95:   16710.107 ms/op
                 executeQuery·p0.99:   16710.107 ms/op
                 executeQuery·p0.999:  16710.107 ms/op
                 executeQuery·p0.9999: 16710.107 ms/op
                 executeQuery·p1.00:   16710.107 ms/op

Iteration   2: 15921.578 ms/op
                 executeQuery·p0.00:   15921.578 ms/op
                 executeQuery·p0.50:   15921.578 ms/op
                 executeQuery·p0.90:   15921.578 ms/op
                 executeQuery·p0.95:   15921.578 ms/op
                 executeQuery·p0.99:   15921.578 ms/op
                 executeQuery·p0.999:  15921.578 ms/op
                 executeQuery·p0.9999: 15921.578 ms/op
                 executeQuery·p1.00:   15921.578 ms/op

Iteration   3: 15921.578 ms/op
                 executeQuery·p0.00:   15921.578 ms/op
                 executeQuery·p0.50:   15921.578 ms/op
                 executeQuery·p0.90:   15921.578 ms/op
                 executeQuery·p0.95:   15921.578 ms/op
                 executeQuery·p0.99:   15921.578 ms/op
                 executeQuery·p0.999:  15921.578 ms/op
                 executeQuery·p0.9999: 15921.578 ms/op
                 executeQuery·p1.00:   15921.578 ms/op

Iteration   4: 15921.578 ms/op
                 executeQuery·p0.00:   15921.578 ms/op
                 executeQuery·p0.50:   15921.578 ms/op
                 executeQuery·p0.90:   15921.578 ms/op
                 executeQuery·p0.95:   15921.578 ms/op
                 executeQuery·p0.99:   15921.578 ms/op
                 executeQuery·p0.999:  15921.578 ms/op
                 executeQuery·p0.9999: 15921.578 ms/op
                 executeQuery·p1.00:   15921.578 ms/op

Iteration   5: 15921.578 ms/op
                 executeQuery·p0.00:   15921.578 ms/op
                 executeQuery·p0.50:   15921.578 ms/op
                 executeQuery·p0.90:   15921.578 ms/op
                 executeQuery·p0.95:   15921.578 ms/op
                 executeQuery·p0.99:   15921.578 ms/op
                 executeQuery·p0.999:  15921.578 ms/op
                 executeQuery·p0.9999: 15921.578 ms/op
                 executeQuery·p1.00:   15921.578 ms/op



Result "benchmarks.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery":
  N = 10
  mean =  16208.468 ±(99.9%) 579.202 ms/op

  Histogram, ms/op:
    [15000.000, 15250.000) = 0 
    [15250.000, 15500.000) = 0 
    [15500.000, 15750.000) = 0 
    [15750.000, 16000.000) = 4 
    [16000.000, 16250.000) = 4 
    [16250.000, 16500.000) = 0 
    [16500.000, 16750.000) = 1 
    [16750.000, 17000.000) = 0 
    [17000.000, 17250.000) = 1 
    [17250.000, 17500.000) = 0 
    [17500.000, 17750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  15921.578 ms/op
     p(50.0000) =  16156.459 ms/op
     p(90.0000) =  17027.197 ms/op
     p(95.0000) =  17062.429 ms/op
     p(99.0000) =  17062.429 ms/op
     p(99.9000) =  17062.429 ms/op
     p(99.9900) =  17062.429 ms/op
     p(99.9990) =  17062.429 ms/op
     p(99.9999) =  17062.429 ms/op
    p(100.0000) =  17062.429 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 71.43% complete, ETA 03:19:23
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 519.855 ±(99.9%) 624.390 ms/op
# Warmup Iteration   2: 372.584 ±(99.9%) 22.294 ms/op
# Warmup Iteration   3: 428.868 ±(99.9%) 61.696 ms/op
# Warmup Iteration   4: 484.629 ±(99.9%) 9.844 ms/op
# Warmup Iteration   5: 390.286 ±(99.9%) 50.754 ms/op
Iteration   1: 375.575 ±(99.9%) 13.104 ms/op
                 executeQuery·p0.00:   352.846 ms/op
                 executeQuery·p0.50:   378.012 ms/op
                 executeQuery·p0.90:   402.339 ms/op
                 executeQuery·p0.95:   403.177 ms/op
                 executeQuery·p0.99:   403.177 ms/op
                 executeQuery·p0.999:  403.177 ms/op
                 executeQuery·p0.9999: 403.177 ms/op
                 executeQuery·p1.00:   403.177 ms/op

Iteration   2: 347.574 ±(99.9%) 3.730 ms/op
                 executeQuery·p0.00:   342.884 ms/op
                 executeQuery·p0.50:   346.554 ms/op
                 executeQuery·p0.90:   353.423 ms/op
                 executeQuery·p0.95:   358.613 ms/op
                 executeQuery·p0.99:   358.613 ms/op
                 executeQuery·p0.999:  358.613 ms/op
                 executeQuery·p0.9999: 358.613 ms/op
                 executeQuery·p1.00:   358.613 ms/op

Iteration   3: 347.341 ±(99.9%) 8.537 ms/op
                 executeQuery·p0.00:   342.884 ms/op
                 executeQuery·p0.50:   344.457 ms/op
                 executeQuery·p0.90:   354.891 ms/op
                 executeQuery·p0.95:   382.730 ms/op
                 executeQuery·p0.99:   382.730 ms/op
                 executeQuery·p0.999:  382.730 ms/op
                 executeQuery·p0.9999: 382.730 ms/op
                 executeQuery·p1.00:   382.730 ms/op

Iteration   4: 344.486 ±(99.9%) 0.897 ms/op
                 executeQuery·p0.00:   342.884 ms/op
                 executeQuery·p0.50:   344.457 ms/op
                 executeQuery·p0.90:   346.083 ms/op
                 executeQuery·p0.95:   346.554 ms/op
                 executeQuery·p0.99:   346.554 ms/op
                 executeQuery·p0.999:  346.554 ms/op
                 executeQuery·p0.9999: 346.554 ms/op
                 executeQuery·p1.00:   346.554 ms/op

Iteration   5: 346.496 ±(99.9%) 5.775 ms/op
                 executeQuery·p0.00:   342.884 ms/op
                 executeQuery·p0.50:   344.457 ms/op
                 executeQuery·p0.90:   353.108 ms/op
                 executeQuery·p0.95:   369.623 ms/op
                 executeQuery·p0.99:   369.623 ms/op
                 executeQuery·p0.999:  369.623 ms/op
                 executeQuery·p0.9999: 369.623 ms/op
                 executeQuery·p1.00:   369.623 ms/op


# Run progress: 72.02% complete, ETA 03:14:18
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 446.256 ±(99.9%) 239.103 ms/op
# Warmup Iteration   2: 373.817 ±(99.9%) 16.041 ms/op
# Warmup Iteration   3: 455.082 ±(99.9%) 63.230 ms/op
# Warmup Iteration   4: 495.602 ±(99.9%) 7.278 ms/op
# Warmup Iteration   5: 391.643 ±(99.9%) 46.844 ms/op
Iteration   1: 371.134 ±(99.9%) 16.637 ms/op
                 executeQuery·p0.00:   348.127 ms/op
                 executeQuery·p0.50:   363.856 ms/op
                 executeQuery·p0.90:   404.750 ms/op
                 executeQuery·p0.95:   413.139 ms/op
                 executeQuery·p0.99:   413.139 ms/op
                 executeQuery·p0.999:  413.139 ms/op
                 executeQuery·p0.9999: 413.139 ms/op
                 executeQuery·p1.00:   413.139 ms/op

Iteration   2: 362.561 ±(99.9%) 4.585 ms/op
                 executeQuery·p0.00:   351.273 ms/op
                 executeQuery·p0.50:   362.807 ms/op
                 executeQuery·p0.90:   367.106 ms/op
                 executeQuery·p0.95:   369.623 ms/op
                 executeQuery·p0.99:   369.623 ms/op
                 executeQuery·p0.999:  369.623 ms/op
                 executeQuery·p0.9999: 369.623 ms/op
                 executeQuery·p1.00:   369.623 ms/op

Iteration   3: 357.856 ±(99.9%) 11.113 ms/op
                 executeQuery·p0.00:   348.652 ms/op
                 executeQuery·p0.50:   353.108 ms/op
                 executeQuery·p0.90:   370.357 ms/op
                 executeQuery·p0.95:   400.556 ms/op
                 executeQuery·p0.99:   400.556 ms/op
                 executeQuery·p0.999:  400.556 ms/op
                 executeQuery·p0.9999: 400.556 ms/op
                 executeQuery·p1.00:   400.556 ms/op

Iteration   4: 357.128 ±(99.9%) 5.129 ms/op
                 executeQuery·p0.00:   348.127 ms/op
                 executeQuery·p0.50:   358.613 ms/op
                 executeQuery·p0.90:   364.066 ms/op
                 executeQuery·p0.95:   365.953 ms/op
                 executeQuery·p0.99:   365.953 ms/op
                 executeQuery·p0.999:  365.953 ms/op
                 executeQuery·p0.9999: 365.953 ms/op
                 executeQuery·p1.00:   365.953 ms/op

Iteration   5: 357.331 ±(99.9%) 7.669 ms/op
                 executeQuery·p0.00:   348.652 ms/op
                 executeQuery·p0.50:   356.516 ms/op
                 executeQuery·p0.90:   370.357 ms/op
                 executeQuery·p0.95:   381.682 ms/op
                 executeQuery·p0.99:   381.682 ms/op
                 executeQuery·p0.999:  381.682 ms/op
                 executeQuery·p0.9999: 381.682 ms/op
                 executeQuery·p1.00:   381.682 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 177
  mean =    356.528 ±(99.9%) 3.402 ms/op

  Histogram, ms/op:
    [340.000, 345.000) = 42 
    [345.000, 350.000) = 28 
    [350.000, 355.000) = 30 
    [355.000, 360.000) = 15 
    [360.000, 365.000) = 29 
    [365.000, 370.000) = 14 
    [370.000, 375.000) = 1 
    [375.000, 380.000) = 3 
    [380.000, 385.000) = 10 
    [385.000, 390.000) = 0 
    [390.000, 395.000) = 0 
    [395.000, 400.000) = 0 
    [400.000, 405.000) = 4 
    [405.000, 410.000) = 0 
    [410.000, 415.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    342.884 ms/op
     p(50.0000) =    352.322 ms/op
     p(90.0000) =    378.012 ms/op
     p(95.0000) =    381.787 ms/op
     p(99.0000) =    405.369 ms/op
     p(99.9000) =    413.139 ms/op
     p(99.9900) =    413.139 ms/op
     p(99.9990) =    413.139 ms/op
     p(99.9999) =    413.139 ms/op
    p(100.0000) =    413.139 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 72.62% complete, ETA 03:09:16
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 17246.978 ms/op
# Warmup Iteration   2: 4739.564 ms/op
# Warmup Iteration   3: 4907.336 ms/op
# Warmup Iteration   4: 4940.890 ms/op
# Warmup Iteration   5: 5083.496 ms/op
Iteration   1: 4907.336 ms/op
                 executeQuery·p0.00:   4907.336 ms/op
                 executeQuery·p0.50:   4907.336 ms/op
                 executeQuery·p0.90:   4907.336 ms/op
                 executeQuery·p0.95:   4907.336 ms/op
                 executeQuery·p0.99:   4907.336 ms/op
                 executeQuery·p0.999:  4907.336 ms/op
                 executeQuery·p0.9999: 4907.336 ms/op
                 executeQuery·p1.00:   4907.336 ms/op

Iteration   2: 4924.113 ms/op
                 executeQuery·p0.00:   4924.113 ms/op
                 executeQuery·p0.50:   4924.113 ms/op
                 executeQuery·p0.90:   4924.113 ms/op
                 executeQuery·p0.95:   4924.113 ms/op
                 executeQuery·p0.99:   4924.113 ms/op
                 executeQuery·p0.999:  4924.113 ms/op
                 executeQuery·p0.9999: 4924.113 ms/op
                 executeQuery·p1.00:   4924.113 ms/op

Iteration   3: 4915.724 ms/op
                 executeQuery·p0.00:   4915.724 ms/op
                 executeQuery·p0.50:   4915.724 ms/op
                 executeQuery·p0.90:   4915.724 ms/op
                 executeQuery·p0.95:   4915.724 ms/op
                 executeQuery·p0.99:   4915.724 ms/op
                 executeQuery·p0.999:  4915.724 ms/op
                 executeQuery·p0.9999: 4915.724 ms/op
                 executeQuery·p1.00:   4915.724 ms/op

Iteration   4: 5007.999 ms/op
                 executeQuery·p0.00:   5007.999 ms/op
                 executeQuery·p0.50:   5007.999 ms/op
                 executeQuery·p0.90:   5007.999 ms/op
                 executeQuery·p0.95:   5007.999 ms/op
                 executeQuery·p0.99:   5007.999 ms/op
                 executeQuery·p0.999:  5007.999 ms/op
                 executeQuery·p0.9999: 5007.999 ms/op
                 executeQuery·p1.00:   5007.999 ms/op

Iteration   5: 4907.336 ms/op
                 executeQuery·p0.00:   4907.336 ms/op
                 executeQuery·p0.50:   4907.336 ms/op
                 executeQuery·p0.90:   4907.336 ms/op
                 executeQuery·p0.95:   4907.336 ms/op
                 executeQuery·p0.99:   4907.336 ms/op
                 executeQuery·p0.999:  4907.336 ms/op
                 executeQuery·p0.9999: 4907.336 ms/op
                 executeQuery·p1.00:   4907.336 ms/op


# Run progress: 73.21% complete, ETA 03:06:41
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 8195.670 ms/op
# Warmup Iteration   2: 4596.957 ms/op
# Warmup Iteration   3: 5066.719 ms/op
# Warmup Iteration   4: 4370.465 ms/op
# Warmup Iteration   5: 4538.237 ms/op
Iteration   1: 4320.133 ms/op
                 executeQuery·p0.00:   4320.133 ms/op
                 executeQuery·p0.50:   4320.133 ms/op
                 executeQuery·p0.90:   4320.133 ms/op
                 executeQuery·p0.95:   4320.133 ms/op
                 executeQuery·p0.99:   4320.133 ms/op
                 executeQuery·p0.999:  4320.133 ms/op
                 executeQuery·p0.9999: 4320.133 ms/op
                 executeQuery·p1.00:   4320.133 ms/op

Iteration   2: 4370.465 ms/op
                 executeQuery·p0.00:   4370.465 ms/op
                 executeQuery·p0.50:   4370.465 ms/op
                 executeQuery·p0.90:   4370.465 ms/op
                 executeQuery·p0.95:   4370.465 ms/op
                 executeQuery·p0.99:   4370.465 ms/op
                 executeQuery·p0.999:  4370.465 ms/op
                 executeQuery·p0.9999: 4370.465 ms/op
                 executeQuery·p1.00:   4370.465 ms/op

Iteration   3: 4706.009 ms/op
                 executeQuery·p0.00:   4706.009 ms/op
                 executeQuery·p0.50:   4706.009 ms/op
                 executeQuery·p0.90:   4706.009 ms/op
                 executeQuery·p0.95:   4706.009 ms/op
                 executeQuery·p0.99:   4706.009 ms/op
                 executeQuery·p0.999:  4706.009 ms/op
                 executeQuery·p0.9999: 4706.009 ms/op
                 executeQuery·p1.00:   4706.009 ms/op

Iteration   4: 4630.512 ms/op
                 executeQuery·p0.00:   4630.512 ms/op
                 executeQuery·p0.50:   4630.512 ms/op
                 executeQuery·p0.90:   4630.512 ms/op
                 executeQuery·p0.95:   4630.512 ms/op
                 executeQuery·p0.99:   4630.512 ms/op
                 executeQuery·p0.999:  4630.512 ms/op
                 executeQuery·p0.9999: 4630.512 ms/op
                 executeQuery·p1.00:   4630.512 ms/op

Iteration   5: 4303.356 ms/op
                 executeQuery·p0.00:   4303.356 ms/op
                 executeQuery·p0.50:   4303.356 ms/op
                 executeQuery·p0.90:   4303.356 ms/op
                 executeQuery·p0.95:   4303.356 ms/op
                 executeQuery·p0.99:   4303.356 ms/op
                 executeQuery·p0.999:  4303.356 ms/op
                 executeQuery·p0.9999: 4303.356 ms/op
                 executeQuery·p1.00:   4303.356 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   4699.298 ±(99.9%) 419.427 ms/op

  Histogram, ms/op:
    [4300.000, 4350.000) = 2 
    [4350.000, 4400.000) = 1 
    [4400.000, 4450.000) = 0 
    [4450.000, 4500.000) = 0 
    [4500.000, 4550.000) = 0 
    [4550.000, 4600.000) = 0 
    [4600.000, 4650.000) = 1 
    [4650.000, 4700.000) = 0 
    [4700.000, 4750.000) = 1 
    [4750.000, 4800.000) = 0 
    [4800.000, 4850.000) = 0 
    [4850.000, 4900.000) = 0 
    [4900.000, 4950.000) = 4 
    [4950.000, 5000.000) = 0 
    [5000.000, 5050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4303.356 ms/op
     p(50.0000) =   4806.672 ms/op
     p(90.0000) =   4999.610 ms/op
     p(95.0000) =   5007.999 ms/op
     p(99.0000) =   5007.999 ms/op
     p(99.9000) =   5007.999 ms/op
     p(99.9900) =   5007.999 ms/op
     p(99.9990) =   5007.999 ms/op
     p(99.9999) =   5007.999 ms/op
    p(100.0000) =   5007.999 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 73.81% complete, ETA 03:03:57
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 425.238 ±(99.9%) 312.613 ms/op
# Warmup Iteration   2: 317.912 ±(99.9%) 11.116 ms/op
# Warmup Iteration   3: 327.913 ±(99.9%) 29.083 ms/op
# Warmup Iteration   4: 385.259 ±(99.9%) 30.263 ms/op
# Warmup Iteration   5: 396.263 ±(99.9%) 8.382 ms/op
Iteration   1: 371.566 ±(99.9%) 35.444 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   391.119 ms/op
                 executeQuery·p0.90:   408.525 ms/op
                 executeQuery·p0.95:   408.945 ms/op
                 executeQuery·p0.99:   408.945 ms/op
                 executeQuery·p0.999:  408.945 ms/op
                 executeQuery·p0.9999: 408.945 ms/op
                 executeQuery·p1.00:   408.945 ms/op

Iteration   2: 334.991 ±(99.9%) 6.414 ms/op
                 executeQuery·p0.00:   328.204 ms/op
                 executeQuery·p0.50:   332.399 ms/op
                 executeQuery·p0.90:   342.884 ms/op
                 executeQuery·p0.95:   357.040 ms/op
                 executeQuery·p0.99:   357.040 ms/op
                 executeQuery·p0.999:  357.040 ms/op
                 executeQuery·p0.9999: 357.040 ms/op
                 executeQuery·p1.00:   357.040 ms/op

Iteration   3: 333.651 ±(99.9%) 4.097 ms/op
                 executeQuery·p0.00:   327.156 ms/op
                 executeQuery·p0.50:   334.496 ms/op
                 executeQuery·p0.90:   339.319 ms/op
                 executeQuery·p0.95:   340.263 ms/op
                 executeQuery·p0.99:   340.263 ms/op
                 executeQuery·p0.999:  340.263 ms/op
                 executeQuery·p0.9999: 340.263 ms/op
                 executeQuery·p1.00:   340.263 ms/op

Iteration   4: 318.270 ±(99.9%) 9.667 ms/op
                 executeQuery·p0.00:   309.330 ms/op
                 executeQuery·p0.50:   312.476 ms/op
                 executeQuery·p0.90:   336.069 ms/op
                 executeQuery·p0.95:   337.117 ms/op
                 executeQuery·p0.99:   337.117 ms/op
                 executeQuery·p0.999:  337.117 ms/op
                 executeQuery·p0.9999: 337.117 ms/op
                 executeQuery·p1.00:   337.117 ms/op

Iteration   5: 313.800 ±(99.9%) 6.789 ms/op
                 executeQuery·p0.00:   307.757 ms/op
                 executeQuery·p0.50:   310.903 ms/op
                 executeQuery·p0.90:   327.680 ms/op
                 executeQuery·p0.95:   332.399 ms/op
                 executeQuery·p0.99:   332.399 ms/op
                 executeQuery·p0.999:  332.399 ms/op
                 executeQuery·p0.9999: 332.399 ms/op
                 executeQuery·p1.00:   332.399 ms/op


# Run progress: 74.40% complete, ETA 02:58:55
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 412.178 ±(99.9%) 254.552 ms/op
# Warmup Iteration   2: 331.583 ±(99.9%) 11.156 ms/op
# Warmup Iteration   3: 338.719 ±(99.9%) 16.857 ms/op
# Warmup Iteration   4: 392.102 ±(99.9%) 33.190 ms/op
# Warmup Iteration   5: 405.930 ±(99.9%) 5.668 ms/op
Iteration   1: 383.517 ±(99.9%) 37.775 ms/op
                 executeQuery·p0.00:   309.854 ms/op
                 executeQuery·p0.50:   401.080 ms/op
                 executeQuery·p0.90:   412.457 ms/op
                 executeQuery·p0.95:   423.100 ms/op
                 executeQuery·p0.99:   423.100 ms/op
                 executeQuery·p0.999:  423.100 ms/op
                 executeQuery·p0.9999: 423.100 ms/op
                 executeQuery·p1.00:   423.100 ms/op

Iteration   2: 333.535 ±(99.9%) 7.667 ms/op
                 executeQuery·p0.00:   319.291 ms/op
                 executeQuery·p0.50:   335.020 ms/op
                 executeQuery·p0.90:   346.659 ms/op
                 executeQuery·p0.95:   347.603 ms/op
                 executeQuery·p0.99:   347.603 ms/op
                 executeQuery·p0.999:  347.603 ms/op
                 executeQuery·p0.9999: 347.603 ms/op
                 executeQuery·p1.00:   347.603 ms/op

Iteration   3: 340.386 ±(99.9%) 5.911 ms/op
                 executeQuery·p0.00:   330.826 ms/op
                 executeQuery·p0.50:   340.787 ms/op
                 executeQuery·p0.90:   350.224 ms/op
                 executeQuery·p0.95:   350.224 ms/op
                 executeQuery·p0.99:   350.224 ms/op
                 executeQuery·p0.999:  350.224 ms/op
                 executeQuery·p0.9999: 350.224 ms/op
                 executeQuery·p1.00:   350.224 ms/op

Iteration   4: 335.981 ±(99.9%) 8.261 ms/op
                 executeQuery·p0.00:   321.389 ms/op
                 executeQuery·p0.50:   335.020 ms/op
                 executeQuery·p0.90:   348.180 ms/op
                 executeQuery·p0.95:   348.652 ms/op
                 executeQuery·p0.99:   348.652 ms/op
                 executeQuery·p0.999:  348.652 ms/op
                 executeQuery·p0.9999: 348.652 ms/op
                 executeQuery·p1.00:   348.652 ms/op

Iteration   5: 327.738 ±(99.9%) 7.585 ms/op
                 executeQuery·p0.00:   317.719 ms/op
                 executeQuery·p0.50:   325.059 ms/op
                 executeQuery·p0.90:   343.513 ms/op
                 executeQuery·p0.95:   344.457 ms/op
                 executeQuery·p0.99:   344.457 ms/op
                 executeQuery·p0.999:  344.457 ms/op
                 executeQuery·p0.9999: 344.457 ms/op
                 executeQuery·p1.00:   344.457 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 178
  mean =    338.398 ±(99.9%) 6.638 ms/op

  Histogram, ms/op:
    [300.000, 312.500) = 25 
    [312.500, 325.000) = 21 
    [325.000, 337.500) = 71 
    [337.500, 350.000) = 35 
    [350.000, 362.500) = 4 
    [362.500, 375.000) = 0 
    [375.000, 387.500) = 1 
    [387.500, 400.000) = 6 
    [400.000, 412.500) = 14 
    [412.500, 425.000) = 1 
    [425.000, 437.500) = 0 
    [437.500, 450.000) = 0 
    [450.000, 462.500) = 0 
    [462.500, 475.000) = 0 
    [475.000, 487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    307.757 ms/op
     p(50.0000) =    331.874 ms/op
     p(90.0000) =    395.103 ms/op
     p(95.0000) =    404.226 ms/op
     p(99.0000) =    411.917 ms/op
     p(99.9000) =    423.100 ms/op
     p(99.9900) =    423.100 ms/op
     p(99.9990) =    423.100 ms/op
     p(99.9999) =    423.100 ms/op
    p(100.0000) =    423.100 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 75.00% complete, ETA 02:53:58
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 7860.126 ms/op
# Warmup Iteration   2: 3829.400 ms/op
# Warmup Iteration   3: 3745.513 ms/op
# Warmup Iteration   4: 3825.205 ms/op
# Warmup Iteration   5: 3804.234 ms/op
Iteration   1: 4047.503 ms/op
                 executeQuery·p0.00:   4047.503 ms/op
                 executeQuery·p0.50:   4047.503 ms/op
                 executeQuery·p0.90:   4047.503 ms/op
                 executeQuery·p0.95:   4047.503 ms/op
                 executeQuery·p0.99:   4047.503 ms/op
                 executeQuery·p0.999:  4047.503 ms/op
                 executeQuery·p0.9999: 4047.503 ms/op
                 executeQuery·p1.00:   4047.503 ms/op

Iteration   2: 3867.148 ms/op
                 executeQuery·p0.00:   3867.148 ms/op
                 executeQuery·p0.50:   3867.148 ms/op
                 executeQuery·p0.90:   3867.148 ms/op
                 executeQuery·p0.95:   3867.148 ms/op
                 executeQuery·p0.99:   3867.148 ms/op
                 executeQuery·p0.999:  3867.148 ms/op
                 executeQuery·p0.9999: 3867.148 ms/op
                 executeQuery·p1.00:   3867.148 ms/op

Iteration   3: 3812.622 ms/op
                 executeQuery·p0.00:   3812.622 ms/op
                 executeQuery·p0.50:   3812.622 ms/op
                 executeQuery·p0.90:   3812.622 ms/op
                 executeQuery·p0.95:   3812.622 ms/op
                 executeQuery·p0.99:   3812.622 ms/op
                 executeQuery·p0.999:  3812.622 ms/op
                 executeQuery·p0.9999: 3812.622 ms/op
                 executeQuery·p1.00:   3812.622 ms/op

Iteration   4: 3766.485 ms/op
                 executeQuery·p0.00:   3766.485 ms/op
                 executeQuery·p0.50:   3766.485 ms/op
                 executeQuery·p0.90:   3766.485 ms/op
                 executeQuery·p0.95:   3766.485 ms/op
                 executeQuery·p0.99:   3766.485 ms/op
                 executeQuery·p0.999:  3766.485 ms/op
                 executeQuery·p0.9999: 3766.485 ms/op
                 executeQuery·p1.00:   3766.485 ms/op

Iteration   5: 3833.594 ms/op
                 executeQuery·p0.00:   3833.594 ms/op
                 executeQuery·p0.50:   3833.594 ms/op
                 executeQuery·p0.90:   3833.594 ms/op
                 executeQuery·p0.95:   3833.594 ms/op
                 executeQuery·p0.99:   3833.594 ms/op
                 executeQuery·p0.999:  3833.594 ms/op
                 executeQuery·p0.9999: 3833.594 ms/op
                 executeQuery·p1.00:   3833.594 ms/op


# Run progress: 75.60% complete, ETA 02:50:27
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 7809.794 ms/op
# Warmup Iteration   2: 3867.148 ms/op
# Warmup Iteration   3: 4055.892 ms/op
# Warmup Iteration   4: 3846.177 ms/op
# Warmup Iteration   5: 3825.205 ms/op
Iteration   1: 4013.949 ms/op
                 executeQuery·p0.00:   4013.949 ms/op
                 executeQuery·p0.50:   4013.949 ms/op
                 executeQuery·p0.90:   4013.949 ms/op
                 executeQuery·p0.95:   4013.949 ms/op
                 executeQuery·p0.99:   4013.949 ms/op
                 executeQuery·p0.999:  4013.949 ms/op
                 executeQuery·p0.9999: 4013.949 ms/op
                 executeQuery·p1.00:   4013.949 ms/op

Iteration   2: 3942.646 ms/op
                 executeQuery·p0.00:   3942.646 ms/op
                 executeQuery·p0.50:   3942.646 ms/op
                 executeQuery·p0.90:   3942.646 ms/op
                 executeQuery·p0.95:   3942.646 ms/op
                 executeQuery·p0.99:   3942.646 ms/op
                 executeQuery·p0.999:  3942.646 ms/op
                 executeQuery·p0.9999: 3942.646 ms/op
                 executeQuery·p1.00:   3942.646 ms/op

Iteration   3: 3774.874 ms/op
                 executeQuery·p0.00:   3774.874 ms/op
                 executeQuery·p0.50:   3774.874 ms/op
                 executeQuery·p0.90:   3774.874 ms/op
                 executeQuery·p0.95:   3774.874 ms/op
                 executeQuery·p0.99:   3774.874 ms/op
                 executeQuery·p0.999:  3774.874 ms/op
                 executeQuery·p0.9999: 3774.874 ms/op
                 executeQuery·p1.00:   3774.874 ms/op

Iteration   4: 3804.234 ms/op
                 executeQuery·p0.00:   3804.234 ms/op
                 executeQuery·p0.50:   3804.234 ms/op
                 executeQuery·p0.90:   3804.234 ms/op
                 executeQuery·p0.95:   3804.234 ms/op
                 executeQuery·p0.99:   3804.234 ms/op
                 executeQuery·p0.999:  3804.234 ms/op
                 executeQuery·p0.9999: 3804.234 ms/op
                 executeQuery·p1.00:   3804.234 ms/op

Iteration   5: 3800.039 ms/op
                 executeQuery·p0.00:   3800.039 ms/op
                 executeQuery·p0.50:   3800.039 ms/op
                 executeQuery·p0.90:   3800.039 ms/op
                 executeQuery·p0.95:   3800.039 ms/op
                 executeQuery·p0.99:   3800.039 ms/op
                 executeQuery·p0.999:  3800.039 ms/op
                 executeQuery·p0.9999: 3800.039 ms/op
                 executeQuery·p1.00:   3800.039 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 10
  mean =   3866.309 ±(99.9%) 152.006 ms/op

  Histogram, ms/op:
    [3700.000, 3725.000) = 0 
    [3725.000, 3750.000) = 0 
    [3750.000, 3775.000) = 2 
    [3775.000, 3800.000) = 0 
    [3800.000, 3825.000) = 3 
    [3825.000, 3850.000) = 1 
    [3850.000, 3875.000) = 1 
    [3875.000, 3900.000) = 0 
    [3900.000, 3925.000) = 0 
    [3925.000, 3950.000) = 1 
    [3950.000, 3975.000) = 0 
    [3975.000, 4000.000) = 0 
    [4000.000, 4025.000) = 1 
    [4025.000, 4050.000) = 1 
    [4050.000, 4075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3766.485 ms/op
     p(50.0000) =   3823.108 ms/op
     p(90.0000) =   4044.148 ms/op
     p(95.0000) =   4047.503 ms/op
     p(99.0000) =   4047.503 ms/op
     p(99.9000) =   4047.503 ms/op
     p(99.9900) =   4047.503 ms/op
     p(99.9990) =   4047.503 ms/op
     p(99.9999) =   4047.503 ms/op
    p(100.0000) =   4047.503 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 76.19% complete, ETA 02:47:27
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 432.494 ±(99.9%) 240.275 ms/op
# Warmup Iteration   2: 366.446 ±(99.9%) 15.666 ms/op
# Warmup Iteration   3: 367.742 ±(99.9%) 18.257 ms/op
# Warmup Iteration   4: 410.223 ±(99.9%) 28.568 ms/op
# Warmup Iteration   5: 370.610 ±(99.9%) 17.463 ms/op
Iteration   1: 425.624 ±(99.9%) 13.574 ms/op
                 executeQuery·p0.00:   380.109 ms/op
                 executeQuery·p0.50:   429.130 ms/op
                 executeQuery·p0.90:   434.530 ms/op
                 executeQuery·p0.95:   436.732 ms/op
                 executeQuery·p0.99:   436.732 ms/op
                 executeQuery·p0.999:  436.732 ms/op
                 executeQuery·p0.9999: 436.732 ms/op
                 executeQuery·p1.00:   436.732 ms/op

Iteration   2: 410.714 ±(99.9%) 29.792 ms/op
                 executeQuery·p0.00:   339.214 ms/op
                 executeQuery·p0.50:   414.188 ms/op
                 executeQuery·p0.90:   434.215 ms/op
                 executeQuery·p0.95:   435.683 ms/op
                 executeQuery·p0.99:   435.683 ms/op
                 executeQuery·p0.999:  435.683 ms/op
                 executeQuery·p0.9999: 435.683 ms/op
                 executeQuery·p1.00:   435.683 ms/op

Iteration   3: 345.011 ±(99.9%) 9.433 ms/op
                 executeQuery·p0.00:   335.020 ms/op
                 executeQuery·p0.50:   339.214 ms/op
                 executeQuery·p0.90:   360.291 ms/op
                 executeQuery·p0.95:   361.234 ms/op
                 executeQuery·p0.99:   361.234 ms/op
                 executeQuery·p0.999:  361.234 ms/op
                 executeQuery·p0.9999: 361.234 ms/op
                 executeQuery·p1.00:   361.234 ms/op

Iteration   4: 366.107 ±(99.9%) 10.400 ms/op
                 executeQuery·p0.00:   350.749 ms/op
                 executeQuery·p0.50:   369.099 ms/op
                 executeQuery·p0.90:   379.794 ms/op
                 executeQuery·p0.95:   382.730 ms/op
                 executeQuery·p0.99:   382.730 ms/op
                 executeQuery·p0.999:  382.730 ms/op
                 executeQuery·p0.9999: 382.730 ms/op
                 executeQuery·p1.00:   382.730 ms/op

Iteration   5: 350.894 ±(99.9%) 8.792 ms/op
                 executeQuery·p0.00:   338.690 ms/op
                 executeQuery·p0.50:   347.865 ms/op
                 executeQuery·p0.90:   365.324 ms/op
                 executeQuery·p0.95:   373.817 ms/op
                 executeQuery·p0.99:   373.817 ms/op
                 executeQuery·p0.999:  373.817 ms/op
                 executeQuery·p0.9999: 373.817 ms/op
                 executeQuery·p1.00:   373.817 ms/op


# Run progress: 76.79% complete, ETA 02:42:32
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 440.402 ±(99.9%) 274.405 ms/op
# Warmup Iteration   2: 348.158 ±(99.9%) 10.992 ms/op
# Warmup Iteration   3: 347.819 ±(99.9%) 13.020 ms/op
# Warmup Iteration   4: 390.791 ±(99.9%) 34.790 ms/op
# Warmup Iteration   5: 419.815 ±(99.9%) 3.490 ms/op
Iteration   1: 418.347 ±(99.9%) 3.153 ms/op
                 executeQuery·p0.00:   413.663 ms/op
                 executeQuery·p0.50:   417.858 ms/op
                 executeQuery·p0.90:   423.520 ms/op
                 executeQuery·p0.95:   424.149 ms/op
                 executeQuery·p0.99:   424.149 ms/op
                 executeQuery·p0.999:  424.149 ms/op
                 executeQuery·p0.9999: 424.149 ms/op
                 executeQuery·p1.00:   424.149 ms/op

Iteration   2: 363.301 ±(99.9%) 26.645 ms/op
                 executeQuery·p0.00:   337.641 ms/op
                 executeQuery·p0.50:   358.613 ms/op
                 executeQuery·p0.90:   418.801 ms/op
                 executeQuery·p0.95:   430.965 ms/op
                 executeQuery·p0.99:   430.965 ms/op
                 executeQuery·p0.999:  430.965 ms/op
                 executeQuery·p0.9999: 430.965 ms/op
                 executeQuery·p1.00:   430.965 ms/op

Iteration   3: 360.710 ±(99.9%) 2.597 ms/op
                 executeQuery·p0.00:   354.419 ms/op
                 executeQuery·p0.50:   360.710 ms/op
                 executeQuery·p0.90:   364.066 ms/op
                 executeQuery·p0.95:   364.904 ms/op
                 executeQuery·p0.99:   364.904 ms/op
                 executeQuery·p0.999:  364.904 ms/op
                 executeQuery·p0.9999: 364.904 ms/op
                 executeQuery·p1.00:   364.904 ms/op

Iteration   4: 357.996 ±(99.9%) 12.506 ms/op
                 executeQuery·p0.00:   336.069 ms/op
                 executeQuery·p0.50:   358.089 ms/op
                 executeQuery·p0.90:   371.301 ms/op
                 executeQuery·p0.95:   394.789 ms/op
                 executeQuery·p0.99:   394.789 ms/op
                 executeQuery·p0.999:  394.789 ms/op
                 executeQuery·p0.9999: 394.789 ms/op
                 executeQuery·p1.00:   394.789 ms/op

Iteration   5: 349.392 ±(99.9%) 7.558 ms/op
                 executeQuery·p0.00:   339.739 ms/op
                 executeQuery·p0.50:   348.127 ms/op
                 executeQuery·p0.90:   361.234 ms/op
                 executeQuery·p0.95:   369.623 ms/op
                 executeQuery·p0.99:   369.623 ms/op
                 executeQuery·p0.999:  369.623 ms/op
                 executeQuery·p0.9999: 369.623 ms/op
                 executeQuery·p1.00:   369.623 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 168
  mean =    373.455 ±(99.9%) 8.376 ms/op

  Histogram, ms/op:
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 5 
    [337.500, 350.000) = 41 
    [350.000, 362.500) = 51 
    [362.500, 375.000) = 18 
    [375.000, 387.500) = 5 
    [387.500, 400.000) = 1 
    [400.000, 412.500) = 5 
    [412.500, 425.000) = 23 
    [425.000, 437.500) = 19 
    [437.500, 450.000) = 0 
    [450.000, 462.500) = 0 
    [462.500, 475.000) = 0 
    [475.000, 487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    335.020 ms/op
     p(50.0000) =    360.448 ms/op
     p(90.0000) =    428.868 ms/op
     p(95.0000) =    431.489 ms/op
     p(99.0000) =    436.008 ms/op
     p(99.9000) =    436.732 ms/op
     p(99.9900) =    436.732 ms/op
     p(99.9990) =    436.732 ms/op
     p(99.9999) =    436.732 ms/op
    p(100.0000) =    436.732 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 77.38% complete, ETA 02:37:39
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 8111.784 ms/op
# Warmup Iteration   2: 4143.972 ms/op
# Warmup Iteration   3: 4097.835 ms/op
# Warmup Iteration   4: 4462.739 ms/op
# Warmup Iteration   5: 4215.276 ms/op
Iteration   1: 4412.408 ms/op
                 executeQuery·p0.00:   4412.408 ms/op
                 executeQuery·p0.50:   4412.408 ms/op
                 executeQuery·p0.90:   4412.408 ms/op
                 executeQuery·p0.95:   4412.408 ms/op
                 executeQuery·p0.99:   4412.408 ms/op
                 executeQuery·p0.999:  4412.408 ms/op
                 executeQuery·p0.9999: 4412.408 ms/op
                 executeQuery·p1.00:   4412.408 ms/op

Iteration   2: 4303.356 ms/op
                 executeQuery·p0.00:   4303.356 ms/op
                 executeQuery·p0.50:   4303.356 ms/op
                 executeQuery·p0.90:   4303.356 ms/op
                 executeQuery·p0.95:   4303.356 ms/op
                 executeQuery·p0.99:   4303.356 ms/op
                 executeQuery·p0.999:  4303.356 ms/op
                 executeQuery·p0.9999: 4303.356 ms/op
                 executeQuery·p1.00:   4303.356 ms/op

Iteration   3: 4060.086 ms/op
                 executeQuery·p0.00:   4060.086 ms/op
                 executeQuery·p0.50:   4060.086 ms/op
                 executeQuery·p0.90:   4060.086 ms/op
                 executeQuery·p0.95:   4060.086 ms/op
                 executeQuery·p0.99:   4060.086 ms/op
                 executeQuery·p0.999:  4060.086 ms/op
                 executeQuery·p0.9999: 4060.086 ms/op
                 executeQuery·p1.00:   4060.086 ms/op

Iteration   4: 4068.475 ms/op
                 executeQuery·p0.00:   4068.475 ms/op
                 executeQuery·p0.50:   4068.475 ms/op
                 executeQuery·p0.90:   4068.475 ms/op
                 executeQuery·p0.95:   4068.475 ms/op
                 executeQuery·p0.99:   4068.475 ms/op
                 executeQuery·p0.999:  4068.475 ms/op
                 executeQuery·p0.9999: 4068.475 ms/op
                 executeQuery·p1.00:   4068.475 ms/op

Iteration   5: 4093.641 ms/op
                 executeQuery·p0.00:   4093.641 ms/op
                 executeQuery·p0.50:   4093.641 ms/op
                 executeQuery·p0.90:   4093.641 ms/op
                 executeQuery·p0.95:   4093.641 ms/op
                 executeQuery·p0.99:   4093.641 ms/op
                 executeQuery·p0.999:  4093.641 ms/op
                 executeQuery·p0.9999: 4093.641 ms/op
                 executeQuery·p1.00:   4093.641 ms/op


# Run progress: 77.98% complete, ETA 02:34:04
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 8069.841 ms/op
# Warmup Iteration   2: 4123.001 ms/op
# Warmup Iteration   3: 4269.801 ms/op
# Warmup Iteration   4: 4714.398 ms/op
# Warmup Iteration   5: 4110.418 ms/op
Iteration   1: 4336.910 ms/op
                 executeQuery·p0.00:   4336.910 ms/op
                 executeQuery·p0.50:   4336.910 ms/op
                 executeQuery·p0.90:   4336.910 ms/op
                 executeQuery·p0.95:   4336.910 ms/op
                 executeQuery·p0.99:   4336.910 ms/op
                 executeQuery·p0.999:  4336.910 ms/op
                 executeQuery·p0.9999: 4336.910 ms/op
                 executeQuery·p1.00:   4336.910 ms/op

Iteration   2: 4311.745 ms/op
                 executeQuery·p0.00:   4311.745 ms/op
                 executeQuery·p0.50:   4311.745 ms/op
                 executeQuery·p0.90:   4311.745 ms/op
                 executeQuery·p0.95:   4311.745 ms/op
                 executeQuery·p0.99:   4311.745 ms/op
                 executeQuery·p0.999:  4311.745 ms/op
                 executeQuery·p0.9999: 4311.745 ms/op
                 executeQuery·p1.00:   4311.745 ms/op

Iteration   3: 4336.910 ms/op
                 executeQuery·p0.00:   4336.910 ms/op
                 executeQuery·p0.50:   4336.910 ms/op
                 executeQuery·p0.90:   4336.910 ms/op
                 executeQuery·p0.95:   4336.910 ms/op
                 executeQuery·p0.99:   4336.910 ms/op
                 executeQuery·p0.999:  4336.910 ms/op
                 executeQuery·p0.9999: 4336.910 ms/op
                 executeQuery·p1.00:   4336.910 ms/op

Iteration   4: 4278.190 ms/op
                 executeQuery·p0.00:   4278.190 ms/op
                 executeQuery·p0.50:   4278.190 ms/op
                 executeQuery·p0.90:   4278.190 ms/op
                 executeQuery·p0.95:   4278.190 ms/op
                 executeQuery·p0.99:   4278.190 ms/op
                 executeQuery·p0.999:  4278.190 ms/op
                 executeQuery·p0.9999: 4278.190 ms/op
                 executeQuery·p1.00:   4278.190 ms/op

Iteration   5: 4194.304 ms/op
                 executeQuery·p0.00:   4194.304 ms/op
                 executeQuery·p0.50:   4194.304 ms/op
                 executeQuery·p0.90:   4194.304 ms/op
                 executeQuery·p0.95:   4194.304 ms/op
                 executeQuery·p0.99:   4194.304 ms/op
                 executeQuery·p0.999:  4194.304 ms/op
                 executeQuery·p0.9999: 4194.304 ms/op
                 executeQuery·p1.00:   4194.304 ms/op



Result "benchmarks.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 10
  mean =   4239.602 ±(99.9%) 191.518 ms/op

  Histogram, ms/op:
    [4000.000, 4050.000) = 0 
    [4050.000, 4100.000) = 3 
    [4100.000, 4150.000) = 0 
    [4150.000, 4200.000) = 1 
    [4200.000, 4250.000) = 0 
    [4250.000, 4300.000) = 1 
    [4300.000, 4350.000) = 4 
    [4350.000, 4400.000) = 0 
    [4400.000, 4450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4060.086 ms/op
     p(50.0000) =   4290.773 ms/op
     p(90.0000) =   4404.858 ms/op
     p(95.0000) =   4412.408 ms/op
     p(99.0000) =   4412.408 ms/op
     p(99.9000) =   4412.408 ms/op
     p(99.9900) =   4412.408 ms/op
     p(99.9990) =   4412.408 ms/op
     p(99.9999) =   4412.408 ms/op
    p(100.0000) =   4412.408 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 78.57% complete, ETA 02:30:43
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 369.436 ±(99.9%) 49.569 ms/op
# Warmup Iteration   2: 385.372 ±(99.9%) 37.656 ms/op
# Warmup Iteration   3: 303.753 ±(99.9%) 1.436 ms/op
# Warmup Iteration   4: 302.895 ±(99.9%) 3.970 ms/op
# Warmup Iteration   5: 300.016 ±(99.9%) 0.894 ms/op
Iteration   1: 298.705 ±(99.9%) 0.801 ms/op
                 executeQuery·p0.00:   297.271 ms/op
                 executeQuery·p0.50:   298.320 ms/op
                 executeQuery·p0.90:   299.631 ms/op
                 executeQuery·p0.95:   301.203 ms/op
                 executeQuery·p0.99:   305.136 ms/op
                 executeQuery·p0.999:  305.136 ms/op
                 executeQuery·p0.9999: 305.136 ms/op
                 executeQuery·p1.00:   305.136 ms/op

Iteration   2: 298.705 ±(99.9%) 0.461 ms/op
                 executeQuery·p0.00:   297.271 ms/op
                 executeQuery·p0.50:   298.582 ms/op
                 executeQuery·p0.90:   299.893 ms/op
                 executeQuery·p0.95:   300.024 ms/op
                 executeQuery·p0.99:   300.417 ms/op
                 executeQuery·p0.999:  300.417 ms/op
                 executeQuery·p0.9999: 300.417 ms/op
                 executeQuery·p1.00:   300.417 ms/op

Iteration   3: 300.833 ±(99.9%) 8.424 ms/op
                 executeQuery·p0.00:   297.271 ms/op
                 executeQuery·p0.50:   298.320 ms/op
                 executeQuery·p0.90:   299.106 ms/op
                 executeQuery·p0.95:   323.224 ms/op
                 executeQuery·p0.99:   377.487 ms/op
                 executeQuery·p0.999:  377.487 ms/op
                 executeQuery·p0.9999: 377.487 ms/op
                 executeQuery·p1.00:   377.487 ms/op

Iteration   4: 298.983 ±(99.9%) 0.926 ms/op
                 executeQuery·p0.00:   297.271 ms/op
                 executeQuery·p0.50:   298.844 ms/op
                 executeQuery·p0.90:   299.631 ms/op
                 executeQuery·p0.95:   301.990 ms/op
                 executeQuery·p0.99:   306.708 ms/op
                 executeQuery·p0.999:  306.708 ms/op
                 executeQuery·p0.9999: 306.708 ms/op
                 executeQuery·p1.00:   306.708 ms/op

Iteration   5: 298.690 ±(99.9%) 0.671 ms/op
                 executeQuery·p0.00:   297.796 ms/op
                 executeQuery·p0.50:   298.320 ms/op
                 executeQuery·p0.90:   300.155 ms/op
                 executeQuery·p0.95:   301.072 ms/op
                 executeQuery·p0.99:   303.038 ms/op
                 executeQuery·p0.999:  303.038 ms/op
                 executeQuery·p0.9999: 303.038 ms/op
                 executeQuery·p1.00:   303.038 ms/op


# Run progress: 79.17% complete, ETA 02:25:53
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 380.944 ±(99.9%) 48.046 ms/op
# Warmup Iteration   2: 405.421 ±(99.9%) 35.494 ms/op
# Warmup Iteration   3: 315.015 ±(99.9%) 1.839 ms/op
# Warmup Iteration   4: 312.918 ±(99.9%) 1.012 ms/op
# Warmup Iteration   5: 312.295 ±(99.9%) 3.156 ms/op
Iteration   1: 313.311 ±(99.9%) 1.188 ms/op
                 executeQuery·p0.00:   310.903 ms/op
                 executeQuery·p0.50:   313.524 ms/op
                 executeQuery·p0.90:   315.988 ms/op
                 executeQuery·p0.95:   317.561 ms/op
                 executeQuery·p0.99:   318.243 ms/op
                 executeQuery·p0.999:  318.243 ms/op
                 executeQuery·p0.9999: 318.243 ms/op
                 executeQuery·p1.00:   318.243 ms/op

Iteration   2: 313.115 ±(99.9%) 1.172 ms/op
                 executeQuery·p0.00:   310.903 ms/op
                 executeQuery·p0.50:   312.738 ms/op
                 executeQuery·p0.90:   315.621 ms/op
                 executeQuery·p0.95:   317.220 ms/op
                 executeQuery·p0.99:   318.243 ms/op
                 executeQuery·p0.999:  318.243 ms/op
                 executeQuery·p0.9999: 318.243 ms/op
                 executeQuery·p1.00:   318.243 ms/op

Iteration   3: 313.803 ±(99.9%) 0.990 ms/op
                 executeQuery·p0.00:   310.903 ms/op
                 executeQuery·p0.50:   314.049 ms/op
                 executeQuery·p0.90:   315.621 ms/op
                 executeQuery·p0.95:   316.355 ms/op
                 executeQuery·p0.99:   317.719 ms/op
                 executeQuery·p0.999:  317.719 ms/op
                 executeQuery·p0.9999: 317.719 ms/op
                 executeQuery·p1.00:   317.719 ms/op

Iteration   4: 313.049 ±(99.9%) 1.406 ms/op
                 executeQuery·p0.00:   310.378 ms/op
                 executeQuery·p0.50:   313.000 ms/op
                 executeQuery·p0.90:   314.573 ms/op
                 executeQuery·p0.95:   318.007 ms/op
                 executeQuery·p0.99:   322.437 ms/op
                 executeQuery·p0.999:  322.437 ms/op
                 executeQuery·p0.9999: 322.437 ms/op
                 executeQuery·p1.00:   322.437 ms/op

Iteration   5: 313.278 ±(99.9%) 1.322 ms/op
                 executeQuery·p0.00:   310.903 ms/op
                 executeQuery·p0.50:   313.000 ms/op
                 executeQuery·p0.90:   314.940 ms/op
                 executeQuery·p0.95:   319.003 ms/op
                 executeQuery·p0.99:   321.389 ms/op
                 executeQuery·p0.999:  321.389 ms/op
                 executeQuery·p0.9999: 321.389 ms/op
                 executeQuery·p1.00:   321.389 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 330
  mean =    306.033 ±(99.9%) 1.543 ms/op

  Histogram, ms/op:
    [290.000, 295.000) = 0 
    [295.000, 300.000) = 161 
    [300.000, 305.000) = 5 
    [305.000, 310.000) = 3 
    [310.000, 315.000) = 134 
    [315.000, 320.000) = 24 
    [320.000, 325.000) = 2 
    [325.000, 330.000) = 0 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 0 
    [340.000, 345.000) = 0 
    [345.000, 350.000) = 0 
    [350.000, 355.000) = 0 
    [355.000, 360.000) = 0 
    [360.000, 365.000) = 0 
    [365.000, 370.000) = 0 
    [370.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    297.271 ms/op
     p(50.0000) =    301.728 ms/op
     p(90.0000) =    314.573 ms/op
     p(95.0000) =    315.621 ms/op
     p(99.0000) =    320.413 ms/op
     p(99.9000) =    377.487 ms/op
     p(99.9900) =    377.487 ms/op
     p(99.9990) =    377.487 ms/op
     p(99.9999) =    377.487 ms/op
    p(100.0000) =    377.487 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 79.76% complete, ETA 02:21:06
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3461.699 ±(99.9%) 9362.128 ms/op
# Warmup Iteration   2: 3074.425 ±(99.9%) 4150.119 ms/op
# Warmup Iteration   3: 2695.889 ±(99.9%) 1197.142 ms/op
# Warmup Iteration   4: 2857.370 ±(99.9%) 13.552 ms/op
# Warmup Iteration   5: 2857.370 ±(99.9%) 25.950 ms/op
Iteration   1: 2865.758 ±(99.9%) 86.774 ms/op
                 executeQuery·p0.00:   2856.321 ms/op
                 executeQuery·p0.50:   2860.515 ms/op
                 executeQuery·p0.90:   2885.681 ms/op
                 executeQuery·p0.95:   2885.681 ms/op
                 executeQuery·p0.99:   2885.681 ms/op
                 executeQuery·p0.999:  2885.681 ms/op
                 executeQuery·p0.9999: 2885.681 ms/op
                 executeQuery·p1.00:   2885.681 ms/op

Iteration   2: 2902.458 ±(99.9%) 110.650 ms/op
                 executeQuery·p0.00:   2877.293 ms/op
                 executeQuery·p0.50:   2908.750 ms/op
                 executeQuery·p0.90:   2915.041 ms/op
                 executeQuery·p0.95:   2915.041 ms/op
                 executeQuery·p0.99:   2915.041 ms/op
                 executeQuery·p0.999:  2915.041 ms/op
                 executeQuery·p0.9999: 2915.041 ms/op
                 executeQuery·p1.00:   2915.041 ms/op

Iteration   3: 2881.487 ±(99.9%) 22.130 ms/op
                 executeQuery·p0.00:   2877.293 ms/op
                 executeQuery·p0.50:   2881.487 ms/op
                 executeQuery·p0.90:   2885.681 ms/op
                 executeQuery·p0.95:   2885.681 ms/op
                 executeQuery·p0.99:   2885.681 ms/op
                 executeQuery·p0.999:  2885.681 ms/op
                 executeQuery·p0.9999: 2885.681 ms/op
                 executeQuery·p1.00:   2885.681 ms/op

Iteration   4: 2954.887 ±(99.9%) 967.031 ms/op
                 executeQuery·p0.00:   2877.293 ms/op
                 executeQuery·p0.50:   2881.487 ms/op
                 executeQuery·p0.90:   3179.282 ms/op
                 executeQuery·p0.95:   3179.282 ms/op
                 executeQuery·p0.99:   3179.282 ms/op
                 executeQuery·p0.999:  3179.282 ms/op
                 executeQuery·p0.9999: 3179.282 ms/op
                 executeQuery·p1.00:   3179.282 ms/op

Iteration   5: 2880.438 ±(99.9%) 34.105 ms/op
                 executeQuery·p0.00:   2873.098 ms/op
                 executeQuery·p0.50:   2881.487 ms/op
                 executeQuery·p0.90:   2885.681 ms/op
                 executeQuery·p0.95:   2885.681 ms/op
                 executeQuery·p0.99:   2885.681 ms/op
                 executeQuery·p0.999:  2885.681 ms/op
                 executeQuery·p0.9999: 2885.681 ms/op
                 executeQuery·p1.00:   2885.681 ms/op


# Run progress: 80.36% complete, ETA 02:16:24
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3488.263 ±(99.9%) 8596.926 ms/op
# Warmup Iteration   2: 3153.068 ±(99.9%) 3964.992 ms/op
# Warmup Iteration   3: 2812.281 ±(99.9%) 1244.109 ms/op
# Warmup Iteration   4: 2918.187 ±(99.9%) 113.652 ms/op
# Warmup Iteration   5: 2915.041 ±(99.9%) 22.130 ms/op
Iteration   1: 2928.673 ±(99.9%) 104.680 ms/op
                 executeQuery·p0.00:   2919.236 ms/op
                 executeQuery·p0.50:   2921.333 ms/op
                 executeQuery·p0.90:   2952.790 ms/op
                 executeQuery·p0.95:   2952.790 ms/op
                 executeQuery·p0.99:   2952.790 ms/op
                 executeQuery·p0.999:  2952.790 ms/op
                 executeQuery·p0.9999: 2952.790 ms/op
                 executeQuery·p1.00:   2952.790 ms/op

Iteration   2: 2943.353 ±(99.9%) 180.295 ms/op
                 executeQuery·p0.00:   2902.458 ms/op
                 executeQuery·p0.50:   2954.887 ms/op
                 executeQuery·p0.90:   2961.179 ms/op
                 executeQuery·p0.95:   2961.179 ms/op
                 executeQuery·p0.99:   2961.179 ms/op
                 executeQuery·p0.999:  2961.179 ms/op
                 executeQuery·p0.9999: 2961.179 ms/op
                 executeQuery·p1.00:   2961.179 ms/op

Iteration   3: 2902.458 ±(99.9%) 58.550 ms/op
                 executeQuery·p0.00:   2894.070 ms/op
                 executeQuery·p0.50:   2900.361 ms/op
                 executeQuery·p0.90:   2915.041 ms/op
                 executeQuery·p0.95:   2915.041 ms/op
                 executeQuery·p0.99:   2915.041 ms/op
                 executeQuery·p0.999:  2915.041 ms/op
                 executeQuery·p0.9999: 2915.041 ms/op
                 executeQuery·p1.00:   2915.041 ms/op

Iteration   4: 2913.993 ±(99.9%) 25.950 ms/op
                 executeQuery·p0.00:   2910.847 ms/op
                 executeQuery·p0.50:   2912.944 ms/op
                 executeQuery·p0.90:   2919.236 ms/op
                 executeQuery·p0.95:   2919.236 ms/op
                 executeQuery·p0.99:   2919.236 ms/op
                 executeQuery·p0.999:  2919.236 ms/op
                 executeQuery·p0.9999: 2919.236 ms/op
                 executeQuery·p1.00:   2919.236 ms/op

Iteration   5: 2913.993 ±(99.9%) 40.655 ms/op
                 executeQuery·p0.00:   2910.847 ms/op
                 executeQuery·p0.50:   2910.847 ms/op
                 executeQuery·p0.90:   2923.430 ms/op
                 executeQuery·p0.95:   2923.430 ms/op
                 executeQuery·p0.99:   2923.430 ms/op
                 executeQuery·p0.999:  2923.430 ms/op
                 executeQuery·p0.9999: 2923.430 ms/op
                 executeQuery·p1.00:   2923.430 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 40
  mean =   2908.750 ±(99.9%) 28.667 ms/op

  Histogram, ms/op:
    [2800.000, 2825.000) = 0 
    [2825.000, 2850.000) = 0 
    [2850.000, 2875.000) = 4 
    [2875.000, 2900.000) = 14 
    [2900.000, 2925.000) = 17 
    [2925.000, 2950.000) = 1 
    [2950.000, 2975.000) = 3 
    [2975.000, 3000.000) = 0 
    [3000.000, 3025.000) = 0 
    [3025.000, 3050.000) = 0 
    [3050.000, 3075.000) = 0 
    [3075.000, 3100.000) = 0 
    [3100.000, 3125.000) = 0 
    [3125.000, 3150.000) = 0 
    [3150.000, 3175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2856.321 ms/op
     p(50.0000) =   2904.556 ms/op
     p(90.0000) =   2952.371 ms/op
     p(95.0000) =   2961.179 ms/op
     p(99.0000) =   3179.282 ms/op
     p(99.9000) =   3179.282 ms/op
     p(99.9900) =   3179.282 ms/op
     p(99.9990) =   3179.282 ms/op
     p(99.9999) =   3179.282 ms/op
    p(100.0000) =   3179.282 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 80.95% complete, ETA 02:11:45
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 648.675 ±(99.9%) 112.557 ms/op
# Warmup Iteration   2: 639.271 ±(99.9%) 107.120 ms/op
# Warmup Iteration   3: 527.737 ±(99.9%) 8.151 ms/op
# Warmup Iteration   4: 524.426 ±(99.9%) 4.303 ms/op
# Warmup Iteration   5: 525.447 ±(99.9%) 1.463 ms/op
Iteration   1: 525.005 ±(99.9%) 1.566 ms/op
                 executeQuery·p0.00:   522.715 ms/op
                 executeQuery·p0.50:   524.812 ms/op
                 executeQuery·p0.90:   527.434 ms/op
                 executeQuery·p0.95:   530.579 ms/op
                 executeQuery·p0.99:   530.579 ms/op
                 executeQuery·p0.999:  530.579 ms/op
                 executeQuery·p0.9999: 530.579 ms/op
                 executeQuery·p1.00:   530.579 ms/op

Iteration   2: 524.481 ±(99.9%) 1.408 ms/op
                 executeQuery·p0.00:   523.239 ms/op
                 executeQuery·p0.50:   524.288 ms/op
                 executeQuery·p0.90:   525.337 ms/op
                 executeQuery·p0.95:   530.579 ms/op
                 executeQuery·p0.99:   530.579 ms/op
                 executeQuery·p0.999:  530.579 ms/op
                 executeQuery·p0.9999: 530.579 ms/op
                 executeQuery·p1.00:   530.579 ms/op

Iteration   3: 524.702 ±(99.9%) 1.026 ms/op
                 executeQuery·p0.00:   523.239 ms/op
                 executeQuery·p0.50:   524.288 ms/op
                 executeQuery·p0.90:   525.861 ms/op
                 executeQuery·p0.95:   528.482 ms/op
                 executeQuery·p0.99:   528.482 ms/op
                 executeQuery·p0.999:  528.482 ms/op
                 executeQuery·p0.9999: 528.482 ms/op
                 executeQuery·p1.00:   528.482 ms/op

Iteration   4: 524.702 ±(99.9%) 1.455 ms/op
                 executeQuery·p0.00:   521.142 ms/op
                 executeQuery·p0.50:   524.812 ms/op
                 executeQuery·p0.90:   526.909 ms/op
                 executeQuery·p0.95:   529.007 ms/op
                 executeQuery·p0.99:   529.007 ms/op
                 executeQuery·p0.999:  529.007 ms/op
                 executeQuery·p0.9999: 529.007 ms/op
                 executeQuery·p1.00:   529.007 ms/op

Iteration   5: 525.668 ±(99.9%) 1.927 ms/op
                 executeQuery·p0.00:   523.239 ms/op
                 executeQuery·p0.50:   525.337 ms/op
                 executeQuery·p0.90:   530.055 ms/op
                 executeQuery·p0.95:   531.628 ms/op
                 executeQuery·p0.99:   531.628 ms/op
                 executeQuery·p0.999:  531.628 ms/op
                 executeQuery·p0.9999: 531.628 ms/op
                 executeQuery·p1.00:   531.628 ms/op


# Run progress: 81.55% complete, ETA 02:07:06
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 642.384 ±(99.9%) 113.694 ms/op
# Warmup Iteration   2: 633.012 ±(99.9%) 107.758 ms/op
# Warmup Iteration   3: 509.477 ±(99.9%) 6.958 ms/op
# Warmup Iteration   4: 505.781 ±(99.9%) 3.293 ms/op
# Warmup Iteration   5: 504.811 ±(99.9%) 1.298 ms/op
Iteration   1: 505.912 ±(99.9%) 2.310 ms/op
                 executeQuery·p0.00:   503.316 ms/op
                 executeQuery·p0.50:   505.151 ms/op
                 executeQuery·p0.90:   509.293 ms/op
                 executeQuery·p0.95:   515.585 ms/op
                 executeQuery·p0.99:   515.899 ms/op
                 executeQuery·p0.999:  515.899 ms/op
                 executeQuery·p0.9999: 515.899 ms/op
                 executeQuery·p1.00:   515.899 ms/op

Iteration   2: 506.986 ±(99.9%) 2.181 ms/op
                 executeQuery·p0.00:   504.889 ms/op
                 executeQuery·p0.50:   505.938 ms/op
                 executeQuery·p0.90:   511.024 ms/op
                 executeQuery·p0.95:   514.169 ms/op
                 executeQuery·p0.99:   514.327 ms/op
                 executeQuery·p0.999:  514.327 ms/op
                 executeQuery·p0.9999: 514.327 ms/op
                 executeQuery·p1.00:   514.327 ms/op

Iteration   3: 504.758 ±(99.9%) 1.270 ms/op
                 executeQuery·p0.00:   503.316 ms/op
                 executeQuery·p0.50:   504.365 ms/op
                 executeQuery·p0.90:   506.357 ms/op
                 executeQuery·p0.95:   509.949 ms/op
                 executeQuery·p0.99:   510.132 ms/op
                 executeQuery·p0.999:  510.132 ms/op
                 executeQuery·p0.9999: 510.132 ms/op
                 executeQuery·p1.00:   510.132 ms/op

Iteration   4: 505.387 ±(99.9%) 1.451 ms/op
                 executeQuery·p0.00:   502.792 ms/op
                 executeQuery·p0.50:   504.889 ms/op
                 executeQuery·p0.90:   508.874 ms/op
                 executeQuery·p0.95:   510.080 ms/op
                 executeQuery·p0.99:   510.132 ms/op
                 executeQuery·p0.999:  510.132 ms/op
                 executeQuery·p0.9999: 510.132 ms/op
                 executeQuery·p1.00:   510.132 ms/op

Iteration   5: 504.863 ±(99.9%) 1.350 ms/op
                 executeQuery·p0.00:   503.316 ms/op
                 executeQuery·p0.50:   504.365 ms/op
                 executeQuery·p0.90:   506.410 ms/op
                 executeQuery·p0.95:   509.949 ms/op
                 executeQuery·p0.99:   510.132 ms/op
                 executeQuery·p0.999:  510.132 ms/op
                 executeQuery·p0.9999: 510.132 ms/op
                 executeQuery·p1.00:   510.132 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 195
  mean =    514.999 ±(99.9%) 2.364 ms/op

  Histogram, ms/op:
    [500.000, 502.500) = 0 
    [502.500, 505.000) = 58 
    [505.000, 507.500) = 30 
    [507.500, 510.000) = 6 
    [510.000, 512.500) = 4 
    [512.500, 515.000) = 1 
    [515.000, 517.500) = 1 
    [517.500, 520.000) = 0 
    [520.000, 522.500) = 1 
    [522.500, 525.000) = 64 
    [525.000, 527.500) = 24 
    [527.500, 530.000) = 2 
    [530.000, 532.500) = 4 
    [532.500, 535.000) = 0 
    [535.000, 537.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    502.792 ms/op
     p(50.0000) =    511.181 ms/op
     p(90.0000) =    525.337 ms/op
     p(95.0000) =    526.909 ms/op
     p(99.0000) =    530.621 ms/op
     p(99.9000) =    531.628 ms/op
     p(99.9900) =    531.628 ms/op
     p(99.9990) =    531.628 ms/op
     p(99.9999) =    531.628 ms/op
    p(100.0000) =    531.628 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 82.14% complete, ETA 02:02:28
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6501.171 ms/op
# Warmup Iteration   2: 5444.207 ms/op
# Warmup Iteration   3: 4991.222 ±(99.9%) 153.039 ms/op
# Warmup Iteration   4: 4995.416 ms/op
# Warmup Iteration   5: 4991.222 ±(99.9%) 153.039 ms/op
Iteration   1: 4991.222 ±(99.9%) 265.072 ms/op
                 executeQuery·p0.00:   4974.445 ms/op
                 executeQuery·p0.50:   4999.610 ms/op
                 executeQuery·p0.90:   4999.610 ms/op
                 executeQuery·p0.95:   4999.610 ms/op
                 executeQuery·p0.99:   4999.610 ms/op
                 executeQuery·p0.999:  4999.610 ms/op
                 executeQuery·p0.9999: 4999.610 ms/op
                 executeQuery·p1.00:   4999.610 ms/op

Iteration   2: 5003.805 ms/op
                 executeQuery·p0.00:   4999.610 ms/op
                 executeQuery·p0.50:   5003.805 ms/op
                 executeQuery·p0.90:   5007.999 ms/op
                 executeQuery·p0.95:   5007.999 ms/op
                 executeQuery·p0.99:   5007.999 ms/op
                 executeQuery·p0.999:  5007.999 ms/op
                 executeQuery·p0.9999: 5007.999 ms/op
                 executeQuery·p1.00:   5007.999 ms/op

Iteration   3: 4999.610 ms/op
                 executeQuery·p0.00:   4991.222 ms/op
                 executeQuery·p0.50:   4999.610 ms/op
                 executeQuery·p0.90:   5007.999 ms/op
                 executeQuery·p0.95:   5007.999 ms/op
                 executeQuery·p0.99:   5007.999 ms/op
                 executeQuery·p0.999:  5007.999 ms/op
                 executeQuery·p0.9999: 5007.999 ms/op
                 executeQuery·p1.00:   5007.999 ms/op

Iteration   4: 4996.814 ±(99.9%) 385.141 ms/op
                 executeQuery·p0.00:   4974.445 ms/op
                 executeQuery·p0.50:   4999.610 ms/op
                 executeQuery·p0.90:   5016.388 ms/op
                 executeQuery·p0.95:   5016.388 ms/op
                 executeQuery·p0.99:   5016.388 ms/op
                 executeQuery·p0.999:  5016.388 ms/op
                 executeQuery·p0.9999: 5016.388 ms/op
                 executeQuery·p1.00:   5016.388 ms/op

Iteration   5: 4991.222 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   4991.222 ms/op
                 executeQuery·p0.50:   4991.222 ms/op
                 executeQuery·p0.90:   4991.222 ms/op
                 executeQuery·p0.95:   4991.222 ms/op
                 executeQuery·p0.99:   4991.222 ms/op
                 executeQuery·p0.999:  4991.222 ms/op
                 executeQuery·p0.9999: 4991.222 ms/op
                 executeQuery·p1.00:   4991.222 ms/op


# Run progress: 82.74% complete, ETA 01:57:59
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6538.920 ms/op
# Warmup Iteration   2: 5456.790 ms/op
# Warmup Iteration   3: 5049.942 ms/op
# Warmup Iteration   4: 5037.359 ms/op
# Warmup Iteration   5: 5037.359 ms/op
Iteration   1: 5037.359 ms/op
                 executeQuery·p0.00:   5024.776 ms/op
                 executeQuery·p0.50:   5037.359 ms/op
                 executeQuery·p0.90:   5049.942 ms/op
                 executeQuery·p0.95:   5049.942 ms/op
                 executeQuery·p0.99:   5049.942 ms/op
                 executeQuery·p0.999:  5049.942 ms/op
                 executeQuery·p0.9999: 5049.942 ms/op
                 executeQuery·p1.00:   5049.942 ms/op

Iteration   2: 5028.970 ms/op
                 executeQuery·p0.00:   5024.776 ms/op
                 executeQuery·p0.50:   5028.970 ms/op
                 executeQuery·p0.90:   5033.165 ms/op
                 executeQuery·p0.95:   5033.165 ms/op
                 executeQuery·p0.99:   5033.165 ms/op
                 executeQuery·p0.999:  5033.165 ms/op
                 executeQuery·p0.9999: 5033.165 ms/op
                 executeQuery·p1.00:   5033.165 ms/op

Iteration   3: 5037.359 ms/op
                 executeQuery·p0.00:   5033.165 ms/op
                 executeQuery·p0.50:   5037.359 ms/op
                 executeQuery·p0.90:   5041.553 ms/op
                 executeQuery·p0.95:   5041.553 ms/op
                 executeQuery·p0.99:   5041.553 ms/op
                 executeQuery·p0.999:  5041.553 ms/op
                 executeQuery·p0.9999: 5041.553 ms/op
                 executeQuery·p1.00:   5041.553 ms/op

Iteration   4: 5041.553 ms/op
                 executeQuery·p0.00:   5041.553 ms/op
                 executeQuery·p0.50:   5041.553 ms/op
                 executeQuery·p0.90:   5041.553 ms/op
                 executeQuery·p0.95:   5041.553 ms/op
                 executeQuery·p0.99:   5041.553 ms/op
                 executeQuery·p0.999:  5041.553 ms/op
                 executeQuery·p0.9999: 5041.553 ms/op
                 executeQuery·p1.00:   5041.553 ms/op

Iteration   5: 5033.165 ms/op
                 executeQuery·p0.00:   5033.165 ms/op
                 executeQuery·p0.50:   5033.165 ms/op
                 executeQuery·p0.90:   5033.165 ms/op
                 executeQuery·p0.95:   5033.165 ms/op
                 executeQuery·p0.99:   5033.165 ms/op
                 executeQuery·p0.999:  5033.165 ms/op
                 executeQuery·p0.9999: 5033.165 ms/op
                 executeQuery·p1.00:   5033.165 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 23
  mean =   5013.105 ±(99.9%) 17.970 ms/op

  Histogram, ms/op:
    [4970.000, 4975.000) = 2 
    [4975.000, 4980.000) = 0 
    [4980.000, 4985.000) = 0 
    [4985.000, 4990.000) = 0 
    [4990.000, 4995.000) = 4 
    [4995.000, 5000.000) = 4 
    [5000.000, 5005.000) = 0 
    [5005.000, 5010.000) = 2 
    [5010.000, 5015.000) = 0 
    [5015.000, 5020.000) = 1 
    [5020.000, 5025.000) = 2 
    [5025.000, 5030.000) = 0 
    [5030.000, 5035.000) = 4 
    [5035.000, 5040.000) = 0 
    [5040.000, 5045.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   4974.445 ms/op
     p(50.0000) =   5007.999 ms/op
     p(90.0000) =   5041.553 ms/op
     p(95.0000) =   5048.264 ms/op
     p(99.0000) =   5049.942 ms/op
     p(99.9000) =   5049.942 ms/op
     p(99.9900) =   5049.942 ms/op
     p(99.9990) =   5049.942 ms/op
     p(99.9999) =   5049.942 ms/op
    p(100.0000) =   5049.942 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 83.33% complete, ETA 01:53:28
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 622.592 ±(99.9%) 115.843 ms/op
# Warmup Iteration   2: 608.976 ±(99.9%) 106.945 ms/op
# Warmup Iteration   3: 483.493 ±(99.9%) 5.128 ms/op
# Warmup Iteration   4: 496.226 ±(99.9%) 8.285 ms/op
# Warmup Iteration   5: 498.493 ±(99.9%) 3.995 ms/op
Iteration   1: 481.921 ±(99.9%) 4.128 ms/op
                 executeQuery·p0.00:   476.578 ms/op
                 executeQuery·p0.50:   479.724 ms/op
                 executeQuery·p0.90:   490.629 ms/op
                 executeQuery·p0.95:   493.565 ms/op
                 executeQuery·p0.99:   493.879 ms/op
                 executeQuery·p0.999:  493.879 ms/op
                 executeQuery·p0.9999: 493.879 ms/op
                 executeQuery·p1.00:   493.879 ms/op

Iteration   2: 488.412 ±(99.9%) 5.708 ms/op
                 executeQuery·p0.00:   476.578 ms/op
                 executeQuery·p0.50:   488.112 ms/op
                 executeQuery·p0.90:   497.340 ms/op
                 executeQuery·p0.95:   501.796 ms/op
                 executeQuery·p0.99:   502.268 ms/op
                 executeQuery·p0.999:  502.268 ms/op
                 executeQuery·p0.9999: 502.268 ms/op
                 executeQuery·p1.00:   502.268 ms/op

Iteration   3: 500.118 ±(99.9%) 4.101 ms/op
                 executeQuery·p0.00:   491.258 ms/op
                 executeQuery·p0.50:   499.384 ms/op
                 executeQuery·p0.90:   507.720 ms/op
                 executeQuery·p0.95:   510.027 ms/op
                 executeQuery·p0.99:   510.132 ms/op
                 executeQuery·p0.999:  510.132 ms/op
                 executeQuery·p0.9999: 510.132 ms/op
                 executeQuery·p1.00:   510.132 ms/op

Iteration   4: 500.643 ±(99.9%) 5.989 ms/op
                 executeQuery·p0.00:   491.258 ms/op
                 executeQuery·p0.50:   499.122 ms/op
                 executeQuery·p0.90:   510.499 ms/op
                 executeQuery·p0.95:   514.143 ms/op
                 executeQuery·p0.99:   514.327 ms/op
                 executeQuery·p0.999:  514.327 ms/op
                 executeQuery·p0.9999: 514.327 ms/op
                 executeQuery·p1.00:   514.327 ms/op

Iteration   5: 501.246 ±(99.9%) 5.017 ms/op
                 executeQuery·p0.00:   493.879 ms/op
                 executeQuery·p0.50:   500.957 ms/op
                 executeQuery·p0.90:   510.499 ms/op
                 executeQuery·p0.95:   511.653 ms/op
                 executeQuery·p0.99:   511.705 ms/op
                 executeQuery·p0.999:  511.705 ms/op
                 executeQuery·p0.9999: 511.705 ms/op
                 executeQuery·p1.00:   511.705 ms/op


# Run progress: 83.93% complete, ETA 01:48:58
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 622.237 ±(99.9%) 102.727 ms/op
# Warmup Iteration   2: 584.951 ±(99.9%) 104.019 ms/op
# Warmup Iteration   3: 489.810 ±(99.9%) 5.940 ms/op
# Warmup Iteration   4: 484.767 ±(99.9%) 8.753 ms/op
# Warmup Iteration   5: 482.095 ±(99.9%) 9.428 ms/op
Iteration   1: 489.960 ±(99.9%) 4.447 ms/op
                 executeQuery·p0.00:   482.345 ms/op
                 executeQuery·p0.50:   488.112 ms/op
                 executeQuery·p0.90:   497.654 ms/op
                 executeQuery·p0.95:   499.961 ms/op
                 executeQuery·p0.99:   500.171 ms/op
                 executeQuery·p0.999:  500.171 ms/op
                 executeQuery·p0.9999: 500.171 ms/op
                 executeQuery·p1.00:   500.171 ms/op

Iteration   2: 490.634 ±(99.9%) 5.631 ms/op
                 executeQuery·p0.00:   482.345 ms/op
                 executeQuery·p0.50:   488.636 ms/op
                 executeQuery·p0.90:   499.646 ms/op
                 executeQuery·p0.95:   505.781 ms/op
                 executeQuery·p0.99:   506.462 ms/op
                 executeQuery·p0.999:  506.462 ms/op
                 executeQuery·p0.9999: 506.462 ms/op
                 executeQuery·p1.00:   506.462 ms/op

Iteration   3: 486.464 ±(99.9%) 11.784 ms/op
                 executeQuery·p0.00:   464.519 ms/op
                 executeQuery·p0.50:   488.636 ms/op
                 executeQuery·p0.90:   503.316 ms/op
                 executeQuery·p0.95:   510.447 ms/op
                 executeQuery·p0.99:   511.181 ms/op
                 executeQuery·p0.999:  511.181 ms/op
                 executeQuery·p0.9999: 511.181 ms/op
                 executeQuery·p1.00:   511.181 ms/op

Iteration   4: 489.585 ±(99.9%) 5.619 ms/op
                 executeQuery·p0.00:   481.296 ms/op
                 executeQuery·p0.50:   487.064 ms/op
                 executeQuery·p0.90:   500.276 ms/op
                 executeQuery·p0.95:   503.998 ms/op
                 executeQuery·p0.99:   504.365 ms/op
                 executeQuery·p0.999:  504.365 ms/op
                 executeQuery·p0.9999: 504.365 ms/op
                 executeQuery·p1.00:   504.365 ms/op

Iteration   5: 489.435 ±(99.9%) 4.465 ms/op
                 executeQuery·p0.00:   481.296 ms/op
                 executeQuery·p0.50:   490.209 ms/op
                 executeQuery·p0.90:   495.976 ms/op
                 executeQuery·p0.95:   499.279 ms/op
                 executeQuery·p0.99:   499.646 ms/op
                 executeQuery·p0.999:  499.646 ms/op
                 executeQuery·p0.9999: 499.646 ms/op
                 executeQuery·p1.00:   499.646 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 207
  mean =    491.714 ±(99.9%) 2.179 ms/op

  Histogram, ms/op:
    [460.000, 465.000) = 1 
    [465.000, 470.000) = 4 
    [470.000, 475.000) = 1 
    [475.000, 480.000) = 13 
    [480.000, 485.000) = 33 
    [485.000, 490.000) = 34 
    [490.000, 495.000) = 46 
    [495.000, 500.000) = 35 
    [500.000, 505.000) = 24 
    [505.000, 510.000) = 10 
    [510.000, 515.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =    464.519 ms/op
     p(50.0000) =    492.306 ms/op
     p(90.0000) =    503.946 ms/op
     p(95.0000) =    508.035 ms/op
     p(99.0000) =    511.663 ms/op
     p(99.9000) =    514.327 ms/op
     p(99.9900) =    514.327 ms/op
     p(99.9990) =    514.327 ms/op
     p(99.9999) =    514.327 ms/op
    p(100.0000) =    514.327 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 84.52% complete, ETA 01:44:30
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6064.964 ms/op
# Warmup Iteration   2: 5280.629 ms/op
# Warmup Iteration   3: 4767.526 ±(99.9%) 2921.143 ms/op
# Warmup Iteration   4: 4728.379 ±(99.9%) 1237.003 ms/op
# Warmup Iteration   5: 4675.251 ±(99.9%) 88.357 ms/op
Iteration   1: 4736.767 ±(99.9%) 1773.762 ms/op
                 executeQuery·p0.00:   4672.455 ms/op
                 executeQuery·p0.50:   4689.232 ms/op
                 executeQuery·p0.90:   4848.615 ms/op
                 executeQuery·p0.95:   4848.615 ms/op
                 executeQuery·p0.99:   4848.615 ms/op
                 executeQuery·p0.999:  4848.615 ms/op
                 executeQuery·p0.9999: 4848.615 ms/op
                 executeQuery·p1.00:   4848.615 ms/op

Iteration   2: 4717.194 ±(99.9%) 1943.862 ms/op
                 executeQuery·p0.00:   4655.677 ms/op
                 executeQuery·p0.50:   4655.677 ms/op
                 executeQuery·p0.90:   4840.227 ms/op
                 executeQuery·p0.95:   4840.227 ms/op
                 executeQuery·p0.99:   4840.227 ms/op
                 executeQuery·p0.999:  4840.227 ms/op
                 executeQuery·p0.9999: 4840.227 ms/op
                 executeQuery·p1.00:   4840.227 ms/op

Iteration   3: 4719.990 ±(99.9%) 1901.224 ms/op
                 executeQuery·p0.00:   4655.677 ms/op
                 executeQuery·p0.50:   4664.066 ms/op
                 executeQuery·p0.90:   4840.227 ms/op
                 executeQuery·p0.95:   4840.227 ms/op
                 executeQuery·p0.99:   4840.227 ms/op
                 executeQuery·p0.999:  4840.227 ms/op
                 executeQuery·p0.9999: 4840.227 ms/op
                 executeQuery·p1.00:   4840.227 ms/op

Iteration   4: 4647.289 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   4638.900 ms/op
                 executeQuery·p0.50:   4647.289 ms/op
                 executeQuery·p0.90:   4655.677 ms/op
                 executeQuery·p0.95:   4655.677 ms/op
                 executeQuery·p0.99:   4655.677 ms/op
                 executeQuery·p0.999:  4655.677 ms/op
                 executeQuery·p0.9999: 4655.677 ms/op
                 executeQuery·p1.00:   4655.677 ms/op

Iteration   5: 4664.066 ±(99.9%) 153.039 ms/op
                 executeQuery·p0.00:   4655.677 ms/op
                 executeQuery·p0.50:   4664.066 ms/op
                 executeQuery·p0.90:   4672.455 ms/op
                 executeQuery·p0.95:   4672.455 ms/op
                 executeQuery·p0.99:   4672.455 ms/op
                 executeQuery·p0.999:  4672.455 ms/op
                 executeQuery·p0.9999: 4672.455 ms/op
                 executeQuery·p1.00:   4672.455 ms/op


# Run progress: 85.12% complete, ETA 01:40:11
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 6006.243 ms/op
# Warmup Iteration   2: 5322.572 ms/op
# Warmup Iteration   3: 5469.372 ms/op
# Warmup Iteration   4: 5435.818 ms/op
# Warmup Iteration   5: 5414.846 ms/op
Iteration   1: 5435.818 ms/op
                 executeQuery·p0.00:   5419.041 ms/op
                 executeQuery·p0.50:   5435.818 ms/op
                 executeQuery·p0.90:   5452.595 ms/op
                 executeQuery·p0.95:   5452.595 ms/op
                 executeQuery·p0.99:   5452.595 ms/op
                 executeQuery·p0.999:  5452.595 ms/op
                 executeQuery·p0.9999: 5452.595 ms/op
                 executeQuery·p1.00:   5452.595 ms/op

Iteration   2: 5448.401 ms/op
                 executeQuery·p0.00:   5435.818 ms/op
                 executeQuery·p0.50:   5448.401 ms/op
                 executeQuery·p0.90:   5460.984 ms/op
                 executeQuery·p0.95:   5460.984 ms/op
                 executeQuery·p0.99:   5460.984 ms/op
                 executeQuery·p0.999:  5460.984 ms/op
                 executeQuery·p0.9999: 5460.984 ms/op
                 executeQuery·p1.00:   5460.984 ms/op

Iteration   3: 5460.984 ms/op
                 executeQuery·p0.00:   5393.875 ms/op
                 executeQuery·p0.50:   5460.984 ms/op
                 executeQuery·p0.90:   5528.093 ms/op
                 executeQuery·p0.95:   5528.093 ms/op
                 executeQuery·p0.99:   5528.093 ms/op
                 executeQuery·p0.999:  5528.093 ms/op
                 executeQuery·p0.9999: 5528.093 ms/op
                 executeQuery·p1.00:   5528.093 ms/op

Iteration   4: 5423.235 ms/op
                 executeQuery·p0.00:   5393.875 ms/op
                 executeQuery·p0.50:   5423.235 ms/op
                 executeQuery·p0.90:   5452.595 ms/op
                 executeQuery·p0.95:   5452.595 ms/op
                 executeQuery·p0.99:   5452.595 ms/op
                 executeQuery·p0.999:  5452.595 ms/op
                 executeQuery·p0.9999: 5452.595 ms/op
                 executeQuery·p1.00:   5452.595 ms/op

Iteration   5: 5481.955 ms/op
                 executeQuery·p0.00:   5444.207 ms/op
                 executeQuery·p0.50:   5481.955 ms/op
                 executeQuery·p0.90:   5519.704 ms/op
                 executeQuery·p0.95:   5519.704 ms/op
                 executeQuery·p0.99:   5519.704 ms/op
                 executeQuery·p0.999:  5519.704 ms/op
                 executeQuery·p0.9999: 5519.704 ms/op
                 executeQuery·p1.00:   5519.704 ms/op



Result "benchmarks.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 25
  mean =   4998.268 ±(99.9%) 286.167 ms/op

  Histogram, ms/op:
    [4600.000, 4700.000) = 12 
    [4700.000, 4800.000) = 0 
    [4800.000, 4900.000) = 3 
    [4900.000, 5000.000) = 0 
    [5000.000, 5100.000) = 0 
    [5100.000, 5200.000) = 0 
    [5200.000, 5300.000) = 0 
    [5300.000, 5400.000) = 2 
    [5400.000, 5500.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =   4638.900 ms/op
     p(50.0000) =   4840.227 ms/op
     p(90.0000) =   5484.472 ms/op
     p(95.0000) =   5525.576 ms/op
     p(99.0000) =   5528.093 ms/op
     p(99.9000) =   5528.093 ms/op
     p(99.9900) =   5528.093 ms/op
     p(99.9990) =   5528.093 ms/op
     p(99.9999) =   5528.093 ms/op
    p(100.0000) =   5528.093 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 85.71% complete, ETA 01:35:49
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 306.727 ±(99.9%) 48.248 ms/op
# Warmup Iteration   2: 284.514 ±(99.9%) 3.665 ms/op
# Warmup Iteration   3: 280.208 ±(99.9%) 3.674 ms/op
# Warmup Iteration   4: 275.914 ±(99.9%) 3.721 ms/op
# Warmup Iteration   5: 277.950 ±(99.9%) 8.624 ms/op
Iteration   1: 281.638 ±(99.9%) 4.229 ms/op
                 executeQuery·p0.00:   270.533 ms/op
                 executeQuery·p0.50:   279.446 ms/op
                 executeQuery·p0.90:   289.722 ms/op
                 executeQuery·p0.95:   291.242 ms/op
                 executeQuery·p0.99:   293.077 ms/op
                 executeQuery·p0.999:  293.077 ms/op
                 executeQuery·p0.9999: 293.077 ms/op
                 executeQuery·p1.00:   293.077 ms/op

Iteration   2: 279.461 ±(99.9%) 3.925 ms/op
                 executeQuery·p0.00:   272.630 ms/op
                 executeQuery·p0.50:   276.824 ms/op
                 executeQuery·p0.90:   289.197 ms/op
                 executeQuery·p0.95:   292.081 ms/op
                 executeQuery·p0.99:   298.320 ms/op
                 executeQuery·p0.999:  298.320 ms/op
                 executeQuery·p0.9999: 298.320 ms/op
                 executeQuery·p1.00:   298.320 ms/op

Iteration   3: 279.160 ±(99.9%) 2.737 ms/op
                 executeQuery·p0.00:   273.678 ms/op
                 executeQuery·p0.50:   277.873 ms/op
                 executeQuery·p0.90:   285.842 ms/op
                 executeQuery·p0.95:   287.729 ms/op
                 executeQuery·p0.99:   289.931 ms/op
                 executeQuery·p0.999:  289.931 ms/op
                 executeQuery·p0.9999: 289.931 ms/op
                 executeQuery·p1.00:   289.931 ms/op

Iteration   4: 280.717 ±(99.9%) 2.392 ms/op
                 executeQuery·p0.00:   274.203 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   285.632 ms/op
                 executeQuery·p0.95:   286.419 ms/op
                 executeQuery·p0.99:   286.786 ms/op
                 executeQuery·p0.999:  286.786 ms/op
                 executeQuery·p0.9999: 286.786 ms/op
                 executeQuery·p1.00:   286.786 ms/op

Iteration   5: 276.978 ±(99.9%) 2.082 ms/op
                 executeQuery·p0.00:   273.154 ms/op
                 executeQuery·p0.50:   275.775 ms/op
                 executeQuery·p0.90:   283.902 ms/op
                 executeQuery·p0.95:   284.688 ms/op
                 executeQuery·p0.99:   286.261 ms/op
                 executeQuery·p0.999:  286.261 ms/op
                 executeQuery·p0.9999: 286.261 ms/op
                 executeQuery·p1.00:   286.261 ms/op


# Run progress: 86.31% complete, ETA 01:31:28
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 293.683 ±(99.9%) 33.615 ms/op
# Warmup Iteration   2: 270.421 ±(99.9%) 2.861 ms/op
# Warmup Iteration   3: 270.556 ±(99.9%) 2.335 ms/op
# Warmup Iteration   4: 271.804 ±(99.9%) 2.717 ms/op
# Warmup Iteration   5: 270.564 ±(99.9%) 2.414 ms/op
Iteration   1: 275.736 ±(99.9%) 3.733 ms/op
                 executeQuery·p0.00:   268.173 ms/op
                 executeQuery·p0.50:   274.203 ms/op
                 executeQuery·p0.90:   284.898 ms/op
                 executeQuery·p0.95:   286.576 ms/op
                 executeQuery·p0.99:   287.310 ms/op
                 executeQuery·p0.999:  287.310 ms/op
                 executeQuery·p0.9999: 287.310 ms/op
                 executeQuery·p1.00:   287.310 ms/op

Iteration   2: 274.385 ±(99.9%) 3.290 ms/op
                 executeQuery·p0.00:   267.649 ms/op
                 executeQuery·p0.50:   272.105 ms/op
                 executeQuery·p0.90:   282.591 ms/op
                 executeQuery·p0.95:   286.366 ms/op
                 executeQuery·p0.99:   287.834 ms/op
                 executeQuery·p0.999:  287.834 ms/op
                 executeQuery·p0.9999: 287.834 ms/op
                 executeQuery·p1.00:   287.834 ms/op

Iteration   3: 273.043 ±(99.9%) 2.148 ms/op
                 executeQuery·p0.00:   268.435 ms/op
                 executeQuery·p0.50:   272.105 ms/op
                 executeQuery·p0.90:   278.292 ms/op
                 executeQuery·p0.95:   280.966 ms/op
                 executeQuery·p0.99:   282.067 ms/op
                 executeQuery·p0.999:  282.067 ms/op
                 executeQuery·p0.9999: 282.067 ms/op
                 executeQuery·p1.00:   282.067 ms/op

Iteration   4: 276.761 ±(99.9%) 3.217 ms/op
                 executeQuery·p0.00:   269.484 ms/op
                 executeQuery·p0.50:   276.824 ms/op
                 executeQuery·p0.90:   282.906 ms/op
                 executeQuery·p0.95:   283.797 ms/op
                 executeQuery·p0.99:   284.164 ms/op
                 executeQuery·p0.999:  284.164 ms/op
                 executeQuery·p0.9999: 284.164 ms/op
                 executeQuery·p1.00:   284.164 ms/op

Iteration   5: 273.877 ±(99.9%) 2.872 ms/op
                 executeQuery·p0.00:   265.814 ms/op
                 executeQuery·p0.50:   272.105 ms/op
                 executeQuery·p0.90:   281.333 ms/op
                 executeQuery·p0.95:   282.067 ms/op
                 executeQuery·p0.99:   282.067 ms/op
                 executeQuery·p0.999:  282.067 ms/op
                 executeQuery·p0.9999: 282.067 ms/op
                 executeQuery·p1.00:   282.067 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 331
  mean =    277.175 ±(99.9%) 1.035 ms/op

  Histogram, ms/op:
    [260.000, 262.500) = 0 
    [262.500, 265.000) = 0 
    [265.000, 267.500) = 1 
    [267.500, 270.000) = 21 
    [270.000, 272.500) = 55 
    [272.500, 275.000) = 48 
    [275.000, 277.500) = 78 
    [277.500, 280.000) = 31 
    [280.000, 282.500) = 29 
    [282.500, 285.000) = 33 
    [285.000, 287.500) = 15 
    [287.500, 290.000) = 17 
    [290.000, 292.500) = 1 
    [292.500, 295.000) = 1 
    [295.000, 297.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    265.814 ms/op
     p(50.0000) =    275.775 ms/op
     p(90.0000) =    285.737 ms/op
     p(95.0000) =    288.044 ms/op
     p(99.0000) =    290.288 ms/op
     p(99.9000) =    298.320 ms/op
     p(99.9900) =    298.320 ms/op
     p(99.9990) =    298.320 ms/op
     p(99.9999) =    298.320 ms/op
    p(100.0000) =    298.320 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 86.90% complete, ETA 01:27:08
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4588.569 ms/op
# Warmup Iteration   2: 3477.078 ms/op
# Warmup Iteration   3: 3300.917 ms/op
# Warmup Iteration   4: 3351.249 ms/op
# Warmup Iteration   5: 2764.046 ms/op
Iteration   1: 3401.581 ms/op
                 executeQuery·p0.00:   3401.581 ms/op
                 executeQuery·p0.50:   3401.581 ms/op
                 executeQuery·p0.90:   3401.581 ms/op
                 executeQuery·p0.95:   3401.581 ms/op
                 executeQuery·p0.99:   3401.581 ms/op
                 executeQuery·p0.999:  3401.581 ms/op
                 executeQuery·p0.9999: 3401.581 ms/op
                 executeQuery·p1.00:   3401.581 ms/op

Iteration   2: 2793.406 ms/op
                 executeQuery·p0.00:   2793.406 ms/op
                 executeQuery·p0.50:   2793.406 ms/op
                 executeQuery·p0.90:   2793.406 ms/op
                 executeQuery·p0.95:   2793.406 ms/op
                 executeQuery·p0.99:   2793.406 ms/op
                 executeQuery·p0.999:  2793.406 ms/op
                 executeQuery·p0.9999: 2793.406 ms/op
                 executeQuery·p1.00:   2793.406 ms/op

Iteration   3: 2931.818 ms/op
                 executeQuery·p0.00:   2931.818 ms/op
                 executeQuery·p0.50:   2931.818 ms/op
                 executeQuery·p0.90:   2931.818 ms/op
                 executeQuery·p0.95:   2931.818 ms/op
                 executeQuery·p0.99:   2931.818 ms/op
                 executeQuery·p0.999:  2931.818 ms/op
                 executeQuery·p0.9999: 2931.818 ms/op
                 executeQuery·p1.00:   2931.818 ms/op

Iteration   4: 2768.241 ms/op
                 executeQuery·p0.00:   2768.241 ms/op
                 executeQuery·p0.50:   2768.241 ms/op
                 executeQuery·p0.90:   2768.241 ms/op
                 executeQuery·p0.95:   2768.241 ms/op
                 executeQuery·p0.99:   2768.241 ms/op
                 executeQuery·p0.999:  2768.241 ms/op
                 executeQuery·p0.9999: 2768.241 ms/op
                 executeQuery·p1.00:   2768.241 ms/op

Iteration   5: 2776.629 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   2776.629 ms/op
                 executeQuery·p0.95:   2776.629 ms/op
                 executeQuery·p0.99:   2776.629 ms/op
                 executeQuery·p0.999:  2776.629 ms/op
                 executeQuery·p0.9999: 2776.629 ms/op
                 executeQuery·p1.00:   2776.629 ms/op


# Run progress: 87.50% complete, ETA 01:22:54
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4041.212 ms/op
# Warmup Iteration   2: 3418.358 ms/op
# Warmup Iteration   3: 3284.140 ms/op
# Warmup Iteration   4: 2755.658 ms/op
# Warmup Iteration   5: 3560.964 ms/op
Iteration   1: 2793.406 ms/op
                 executeQuery·p0.00:   2793.406 ms/op
                 executeQuery·p0.50:   2793.406 ms/op
                 executeQuery·p0.90:   2793.406 ms/op
                 executeQuery·p0.95:   2793.406 ms/op
                 executeQuery·p0.99:   2793.406 ms/op
                 executeQuery·p0.999:  2793.406 ms/op
                 executeQuery·p0.9999: 2793.406 ms/op
                 executeQuery·p1.00:   2793.406 ms/op

Iteration   2: 2780.824 ms/op
                 executeQuery·p0.00:   2780.824 ms/op
                 executeQuery·p0.50:   2780.824 ms/op
                 executeQuery·p0.90:   2780.824 ms/op
                 executeQuery·p0.95:   2780.824 ms/op
                 executeQuery·p0.99:   2780.824 ms/op
                 executeQuery·p0.999:  2780.824 ms/op
                 executeQuery·p0.9999: 2780.824 ms/op
                 executeQuery·p1.00:   2780.824 ms/op

Iteration   3: 2755.658 ms/op
                 executeQuery·p0.00:   2755.658 ms/op
                 executeQuery·p0.50:   2755.658 ms/op
                 executeQuery·p0.90:   2755.658 ms/op
                 executeQuery·p0.95:   2755.658 ms/op
                 executeQuery·p0.99:   2755.658 ms/op
                 executeQuery·p0.999:  2755.658 ms/op
                 executeQuery·p0.9999: 2755.658 ms/op
                 executeQuery·p1.00:   2755.658 ms/op

Iteration   4: 2776.629 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2776.629 ms/op
                 executeQuery·p0.90:   2776.629 ms/op
                 executeQuery·p0.95:   2776.629 ms/op
                 executeQuery·p0.99:   2776.629 ms/op
                 executeQuery·p0.999:  2776.629 ms/op
                 executeQuery·p0.9999: 2776.629 ms/op
                 executeQuery·p1.00:   2776.629 ms/op

Iteration   5: 2751.463 ms/op
                 executeQuery·p0.00:   2751.463 ms/op
                 executeQuery·p0.50:   2751.463 ms/op
                 executeQuery·p0.90:   2751.463 ms/op
                 executeQuery·p0.95:   2751.463 ms/op
                 executeQuery·p0.99:   2751.463 ms/op
                 executeQuery·p0.999:  2751.463 ms/op
                 executeQuery·p0.9999: 2751.463 ms/op
                 executeQuery·p1.00:   2751.463 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 10
  mean =   2852.966 ±(99.9%) 301.572 ms/op

  Histogram, ms/op:
    [2700.000, 2750.000) = 0 
    [2750.000, 2800.000) = 8 
    [2800.000, 2850.000) = 0 
    [2850.000, 2900.000) = 0 
    [2900.000, 2950.000) = 1 
    [2950.000, 3000.000) = 0 
    [3000.000, 3050.000) = 0 
    [3050.000, 3100.000) = 0 
    [3100.000, 3150.000) = 0 
    [3150.000, 3200.000) = 0 
    [3200.000, 3250.000) = 0 
    [3250.000, 3300.000) = 0 
    [3300.000, 3350.000) = 0 
    [3350.000, 3400.000) = 0 
    [3400.000, 3450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2751.463 ms/op
     p(50.0000) =   2778.726 ms/op
     p(90.0000) =   3354.604 ms/op
     p(95.0000) =   3401.581 ms/op
     p(99.0000) =   3401.581 ms/op
     p(99.9000) =   3401.581 ms/op
     p(99.9900) =   3401.581 ms/op
     p(99.9990) =   3401.581 ms/op
     p(99.9999) =   3401.581 ms/op
    p(100.0000) =   3401.581 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 88.10% complete, ETA 01:18:42
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 288.738 ±(99.9%) 40.123 ms/op
# Warmup Iteration   2: 266.994 ±(99.9%) 4.160 ms/op
# Warmup Iteration   3: 265.482 ±(99.9%) 4.008 ms/op
# Warmup Iteration   4: 265.876 ±(99.9%) 2.852 ms/op
# Warmup Iteration   5: 268.817 ±(99.9%) 3.481 ms/op
Iteration   1: 265.846 ±(99.9%) 1.210 ms/op
                 executeQuery·p0.00:   260.571 ms/op
                 executeQuery·p0.50:   265.814 ms/op
                 executeQuery·p0.90:   268.750 ms/op
                 executeQuery·p0.95:   269.641 ms/op
                 executeQuery·p0.99:   270.008 ms/op
                 executeQuery·p0.999:  270.008 ms/op
                 executeQuery·p0.9999: 270.008 ms/op
                 executeQuery·p1.00:   270.008 ms/op

Iteration   2: 265.220 ±(99.9%) 1.468 ms/op
                 executeQuery·p0.00:   259.260 ms/op
                 executeQuery·p0.50:   265.945 ms/op
                 executeQuery·p0.90:   267.911 ms/op
                 executeQuery·p0.95:   268.370 ms/op
                 executeQuery·p0.99:   268.960 ms/op
                 executeQuery·p0.999:  268.960 ms/op
                 executeQuery·p0.9999: 268.960 ms/op
                 executeQuery·p1.00:   268.960 ms/op

Iteration   3: 262.699 ±(99.9%) 1.928 ms/op
                 executeQuery·p0.00:   257.425 ms/op
                 executeQuery·p0.50:   261.620 ms/op
                 executeQuery·p0.90:   267.649 ms/op
                 executeQuery·p0.95:   268.501 ms/op
                 executeQuery·p0.99:   269.484 ms/op
                 executeQuery·p0.999:  269.484 ms/op
                 executeQuery·p0.9999: 269.484 ms/op
                 executeQuery·p1.00:   269.484 ms/op

Iteration   4: 261.396 ±(99.9%) 1.293 ms/op
                 executeQuery·p0.00:   257.425 ms/op
                 executeQuery·p0.50:   261.226 ms/op
                 executeQuery·p0.90:   263.586 ms/op
                 executeQuery·p0.95:   265.945 ms/op
                 executeQuery·p0.99:   269.484 ms/op
                 executeQuery·p0.999:  269.484 ms/op
                 executeQuery·p0.9999: 269.484 ms/op
                 executeQuery·p1.00:   269.484 ms/op

Iteration   5: 261.797 ±(99.9%) 1.778 ms/op
                 executeQuery·p0.00:   257.950 ms/op
                 executeQuery·p0.50:   261.358 ms/op
                 executeQuery·p0.90:   265.290 ms/op
                 executeQuery·p0.95:   268.501 ms/op
                 executeQuery·p0.99:   272.630 ms/op
                 executeQuery·p0.999:  272.630 ms/op
                 executeQuery·p0.9999: 272.630 ms/op
                 executeQuery·p1.00:   272.630 ms/op


# Run progress: 88.69% complete, ETA 01:14:29
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 303.619 ±(99.9%) 43.527 ms/op
# Warmup Iteration   2: 284.770 ±(99.9%) 4.830 ms/op
# Warmup Iteration   3: 274.790 ±(99.9%) 3.723 ms/op
# Warmup Iteration   4: 273.694 ±(99.9%) 3.389 ms/op
# Warmup Iteration   5: 278.349 ±(99.9%) 8.230 ms/op
Iteration   1: 277.491 ±(99.9%) 8.324 ms/op
                 executeQuery·p0.00:   269.484 ms/op
                 executeQuery·p0.50:   273.678 ms/op
                 executeQuery·p0.90:   283.116 ms/op
                 executeQuery·p0.95:   305.240 ms/op
                 executeQuery·p0.99:   347.079 ms/op
                 executeQuery·p0.999:  347.079 ms/op
                 executeQuery·p0.9999: 347.079 ms/op
                 executeQuery·p1.00:   347.079 ms/op

Iteration   2: 276.411 ±(99.9%) 1.687 ms/op
                 executeQuery·p0.00:   272.105 ms/op
                 executeQuery·p0.50:   276.824 ms/op
                 executeQuery·p0.90:   279.970 ms/op
                 executeQuery·p0.95:   280.756 ms/op
                 executeQuery·p0.99:   282.591 ms/op
                 executeQuery·p0.999:  282.591 ms/op
                 executeQuery·p0.9999: 282.591 ms/op
                 executeQuery·p1.00:   282.591 ms/op

Iteration   3: 276.618 ±(99.9%) 3.125 ms/op
                 executeQuery·p0.00:   270.008 ms/op
                 executeQuery·p0.50:   274.727 ms/op
                 executeQuery·p0.90:   286.576 ms/op
                 executeQuery·p0.95:   287.834 ms/op
                 executeQuery·p0.99:   287.834 ms/op
                 executeQuery·p0.999:  287.834 ms/op
                 executeQuery·p0.9999: 287.834 ms/op
                 executeQuery·p1.00:   287.834 ms/op

Iteration   4: 273.567 ±(99.9%) 1.375 ms/op
                 executeQuery·p0.00:   270.533 ms/op
                 executeQuery·p0.50:   273.154 ms/op
                 executeQuery·p0.90:   277.558 ms/op
                 executeQuery·p0.95:   279.393 ms/op
                 executeQuery·p0.99:   280.494 ms/op
                 executeQuery·p0.999:  280.494 ms/op
                 executeQuery·p0.9999: 280.494 ms/op
                 executeQuery·p1.00:   280.494 ms/op

Iteration   5: 275.331 ±(99.9%) 2.332 ms/op
                 executeQuery·p0.00:   270.008 ms/op
                 executeQuery·p0.50:   274.203 ms/op
                 executeQuery·p0.90:   279.760 ms/op
                 executeQuery·p0.95:   287.310 ms/op
                 executeQuery·p0.99:   287.310 ms/op
                 executeQuery·p0.999:  287.310 ms/op
                 executeQuery·p0.9999: 287.310 ms/op
                 executeQuery·p1.00:   287.310 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 334
  mean =    269.555 ±(99.9%) 1.481 ms/op

  Histogram, ms/op:
    [250.000, 260.000) = 18 
    [260.000, 270.000) = 150 
    [270.000, 280.000) = 151 
    [280.000, 290.000) = 14 
    [290.000, 300.000) = 0 
    [300.000, 310.000) = 0 
    [310.000, 320.000) = 0 
    [320.000, 330.000) = 0 
    [330.000, 340.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    257.425 ms/op
     p(50.0000) =    269.484 ms/op
     p(90.0000) =    278.397 ms/op
     p(95.0000) =    279.970 ms/op
     p(99.0000) =    287.651 ms/op
     p(99.9000) =    347.079 ms/op
     p(99.9900) =    347.079 ms/op
     p(99.9990) =    347.079 ms/op
     p(99.9999) =    347.079 ms/op
    p(100.0000) =    347.079 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 89.29% complete, ETA 01:10:18
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3927.966 ms/op
# Warmup Iteration   2: 2903.856 ±(99.9%) 659.728 ms/op
# Warmup Iteration   3: 2845.136 ±(99.9%) 618.502 ms/op
# Warmup Iteration   4: 2871.700 ±(99.9%) 159.288 ms/op
# Warmup Iteration   5: 2856.321 ±(99.9%) 404.904 ms/op
Iteration   1: 2864.710 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   2860.515 ms/op
                 executeQuery·p0.50:   2864.710 ms/op
                 executeQuery·p0.90:   2868.904 ms/op
                 executeQuery·p0.95:   2868.904 ms/op
                 executeQuery·p0.99:   2868.904 ms/op
                 executeQuery·p0.999:  2868.904 ms/op
                 executeQuery·p0.9999: 2868.904 ms/op
                 executeQuery·p1.00:   2868.904 ms/op

Iteration   2: 2866.108 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   2860.515 ms/op
                 executeQuery·p0.50:   2868.904 ms/op
                 executeQuery·p0.90:   2868.904 ms/op
                 executeQuery·p0.95:   2868.904 ms/op
                 executeQuery·p0.99:   2868.904 ms/op
                 executeQuery·p0.999:  2868.904 ms/op
                 executeQuery·p0.9999: 2868.904 ms/op
                 executeQuery·p1.00:   2868.904 ms/op

Iteration   3: 2842.340 ±(99.9%) 781.601 ms/op
                 executeQuery·p0.00:   2793.406 ms/op
                 executeQuery·p0.50:   2860.515 ms/op
                 executeQuery·p0.90:   2873.098 ms/op
                 executeQuery·p0.95:   2873.098 ms/op
                 executeQuery·p0.99:   2873.098 ms/op
                 executeQuery·p0.999:  2873.098 ms/op
                 executeQuery·p0.9999: 2873.098 ms/op
                 executeQuery·p1.00:   2873.098 ms/op

Iteration   4: 2867.506 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2864.710 ms/op
                 executeQuery·p0.50:   2868.904 ms/op
                 executeQuery·p0.90:   2868.904 ms/op
                 executeQuery·p0.95:   2868.904 ms/op
                 executeQuery·p0.99:   2868.904 ms/op
                 executeQuery·p0.999:  2868.904 ms/op
                 executeQuery·p0.9999: 2868.904 ms/op
                 executeQuery·p1.00:   2868.904 ms/op

Iteration   5: 2863.312 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   2860.515 ms/op
                 executeQuery·p0.50:   2860.515 ms/op
                 executeQuery·p0.90:   2868.904 ms/op
                 executeQuery·p0.95:   2868.904 ms/op
                 executeQuery·p0.99:   2868.904 ms/op
                 executeQuery·p0.999:  2868.904 ms/op
                 executeQuery·p0.9999: 2868.904 ms/op
                 executeQuery·p1.00:   2868.904 ms/op


# Run progress: 89.88% complete, ETA 01:06:13
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 4412.408 ms/op
# Warmup Iteration   2: 3183.477 ms/op
# Warmup Iteration   3: 2818.572 ±(99.9%) 667.083 ms/op
# Warmup Iteration   4: 2807.387 ±(99.9%) 309.251 ms/op
# Warmup Iteration   5: 2796.203 ±(99.9%) 116.886 ms/op
Iteration   1: 2794.805 ±(99.9%) 309.251 ms/op
                 executeQuery·p0.00:   2776.629 ms/op
                 executeQuery·p0.50:   2797.601 ms/op
                 executeQuery·p0.90:   2810.184 ms/op
                 executeQuery·p0.95:   2810.184 ms/op
                 executeQuery·p0.99:   2810.184 ms/op
                 executeQuery·p0.999:  2810.184 ms/op
                 executeQuery·p0.9999: 2810.184 ms/op
                 executeQuery·p1.00:   2810.184 ms/op

Iteration   2: 2819.970 ±(99.9%) 710.989 ms/op
                 executeQuery·p0.00:   2793.406 ms/op
                 executeQuery·p0.50:   2801.795 ms/op
                 executeQuery·p0.90:   2864.710 ms/op
                 executeQuery·p0.95:   2864.710 ms/op
                 executeQuery·p0.99:   2864.710 ms/op
                 executeQuery·p0.999:  2864.710 ms/op
                 executeQuery·p0.9999: 2864.710 ms/op
                 executeQuery·p1.00:   2864.710 ms/op

Iteration   3: 2794.805 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   2789.212 ms/op
                 executeQuery·p0.50:   2793.406 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   4: 2805.989 ±(99.9%) 132.536 ms/op
                 executeQuery·p0.00:   2801.795 ms/op
                 executeQuery·p0.50:   2801.795 ms/op
                 executeQuery·p0.90:   2814.378 ms/op
                 executeQuery·p0.95:   2814.378 ms/op
                 executeQuery·p0.99:   2814.378 ms/op
                 executeQuery·p0.999:  2814.378 ms/op
                 executeQuery·p0.9999: 2814.378 ms/op
                 executeQuery·p1.00:   2814.378 ms/op

Iteration   5: 2818.572 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   2814.378 ms/op
                 executeQuery·p0.50:   2818.572 ms/op
                 executeQuery·p0.90:   2822.767 ms/op
                 executeQuery·p0.95:   2822.767 ms/op
                 executeQuery·p0.99:   2822.767 ms/op
                 executeQuery·p0.999:  2822.767 ms/op
                 executeQuery·p0.9999: 2822.767 ms/op
                 executeQuery·p1.00:   2822.767 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery":
  N = 30
  mean =   2833.812 ±(99.9%) 22.400 ms/op

  Histogram, ms/op:
    [2770.000, 2780.000) = 1 
    [2780.000, 2790.000) = 1 
    [2790.000, 2800.000) = 4 
    [2800.000, 2810.000) = 4 
    [2810.000, 2820.000) = 4 
    [2820.000, 2830.000) = 1 
    [2830.000, 2840.000) = 0 
    [2840.000, 2850.000) = 0 
    [2850.000, 2860.000) = 0 
    [2860.000, 2870.000) = 14 

  Percentiles, ms/op:
      p(0.0000) =   2776.629 ms/op
     p(50.0000) =   2841.641 ms/op
     p(90.0000) =   2868.904 ms/op
     p(95.0000) =   2870.791 ms/op
     p(99.0000) =   2873.098 ms/op
     p(99.9000) =   2873.098 ms/op
     p(99.9900) =   2873.098 ms/op
     p(99.9990) =   2873.098 ms/op
     p(99.9999) =   2873.098 ms/op
    p(100.0000) =   2873.098 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 90.48% complete, ETA 01:02:10
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 301.297 ±(99.9%) 40.341 ms/op
# Warmup Iteration   2: 276.347 ±(99.9%) 4.455 ms/op
# Warmup Iteration   3: 272.506 ±(99.9%) 3.017 ms/op
# Warmup Iteration   4: 271.782 ±(99.9%) 2.786 ms/op
# Warmup Iteration   5: 287.719 ±(99.9%) 20.350 ms/op
Iteration   1: 281.035 ±(99.9%) 1.073 ms/op
                 executeQuery·p0.00:   277.873 ms/op
                 executeQuery·p0.50:   280.756 ms/op
                 executeQuery·p0.90:   283.483 ms/op
                 executeQuery·p0.95:   284.007 ms/op
                 executeQuery·p0.99:   284.688 ms/op
                 executeQuery·p0.999:  284.688 ms/op
                 executeQuery·p0.9999: 284.688 ms/op
                 executeQuery·p1.00:   284.688 ms/op

Iteration   2: 273.586 ±(99.9%) 2.243 ms/op
                 executeQuery·p0.00:   268.960 ms/op
                 executeQuery·p0.50:   273.678 ms/op
                 executeQuery·p0.90:   275.251 ms/op
                 executeQuery·p0.95:   280.625 ms/op
                 executeQuery·p0.99:   292.028 ms/op
                 executeQuery·p0.999:  292.028 ms/op
                 executeQuery·p0.9999: 292.028 ms/op
                 executeQuery·p1.00:   292.028 ms/op

Iteration   3: 280.288 ±(99.9%) 6.995 ms/op
                 executeQuery·p0.00:   272.105 ms/op
                 executeQuery·p0.50:   279.446 ms/op
                 executeQuery·p0.90:   281.648 ms/op
                 executeQuery·p0.95:   300.469 ms/op
                 executeQuery·p0.99:   339.739 ms/op
                 executeQuery·p0.999:  339.739 ms/op
                 executeQuery·p0.9999: 339.739 ms/op
                 executeQuery·p1.00:   339.739 ms/op

Iteration   4: 282.837 ±(99.9%) 6.875 ms/op
                 executeQuery·p0.00:   277.873 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   283.850 ms/op
                 executeQuery·p0.95:   303.982 ms/op
                 executeQuery·p0.99:   340.787 ms/op
                 executeQuery·p0.999:  340.787 ms/op
                 executeQuery·p0.9999: 340.787 ms/op
                 executeQuery·p1.00:   340.787 ms/op

Iteration   5: 282.673 ±(99.9%) 6.952 ms/op
                 executeQuery·p0.00:   276.824 ms/op
                 executeQuery·p0.50:   281.018 ms/op
                 executeQuery·p0.90:   282.958 ms/op
                 executeQuery·p0.95:   304.847 ms/op
                 executeQuery·p0.99:   341.311 ms/op
                 executeQuery·p0.999:  341.311 ms/op
                 executeQuery·p0.9999: 341.311 ms/op
                 executeQuery·p1.00:   341.311 ms/op


# Run progress: 91.07% complete, ETA 00:58:04
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 299.152 ±(99.9%) 35.392 ms/op
# Warmup Iteration   2: 280.462 ±(99.9%) 2.528 ms/op
# Warmup Iteration   3: 278.111 ±(99.9%) 2.440 ms/op
# Warmup Iteration   4: 278.572 ±(99.9%) 2.338 ms/op
# Warmup Iteration   5: 281.903 ±(99.9%) 1.409 ms/op
Iteration   1: 281.592 ±(99.9%) 1.090 ms/op
                 executeQuery·p0.00:   278.921 ms/op
                 executeQuery·p0.50:   281.543 ms/op
                 executeQuery·p0.90:   284.531 ms/op
                 executeQuery·p0.95:   284.688 ms/op
                 executeQuery·p0.99:   284.688 ms/op
                 executeQuery·p0.999:  284.688 ms/op
                 executeQuery·p0.9999: 284.688 ms/op
                 executeQuery·p1.00:   284.688 ms/op

Iteration   2: 280.822 ±(99.9%) 1.593 ms/op
                 executeQuery·p0.00:   274.203 ms/op
                 executeQuery·p0.50:   280.756 ms/op
                 executeQuery·p0.90:   284.164 ms/op
                 executeQuery·p0.95:   285.396 ms/op
                 executeQuery·p0.99:   285.737 ms/op
                 executeQuery·p0.999:  285.737 ms/op
                 executeQuery·p0.9999: 285.737 ms/op
                 executeQuery·p1.00:   285.737 ms/op

Iteration   3: 281.068 ±(99.9%) 1.113 ms/op
                 executeQuery·p0.00:   277.348 ms/op
                 executeQuery·p0.50:   280.494 ms/op
                 executeQuery·p0.90:   283.325 ms/op
                 executeQuery·p0.95:   285.737 ms/op
                 executeQuery·p0.99:   285.737 ms/op
                 executeQuery·p0.999:  285.737 ms/op
                 executeQuery·p0.9999: 285.737 ms/op
                 executeQuery·p1.00:   285.737 ms/op

Iteration   4: 281.084 ±(99.9%) 1.124 ms/op
                 executeQuery·p0.00:   277.873 ms/op
                 executeQuery·p0.50:   281.281 ms/op
                 executeQuery·p0.90:   283.640 ms/op
                 executeQuery·p0.95:   283.823 ms/op
                 executeQuery·p0.99:   284.164 ms/op
                 executeQuery·p0.999:  284.164 ms/op
                 executeQuery·p0.9999: 284.164 ms/op
                 executeQuery·p1.00:   284.164 ms/op

Iteration   5: 282.034 ±(99.9%) 1.451 ms/op
                 executeQuery·p0.00:   276.300 ms/op
                 executeQuery·p0.50:   282.329 ms/op
                 executeQuery·p0.90:   284.531 ms/op
                 executeQuery·p0.95:   285.422 ms/op
                 executeQuery·p0.99:   286.786 ms/op
                 executeQuery·p0.999:  286.786 ms/op
                 executeQuery·p0.9999: 286.786 ms/op
                 executeQuery·p1.00:   286.786 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 323
  mean =    280.656 ±(99.9%) 1.234 ms/op

  Histogram, ms/op:
    [260.000, 265.000) = 0 
    [265.000, 270.000) = 1 
    [270.000, 275.000) = 37 
    [275.000, 280.000) = 96 
    [280.000, 285.000) = 179 
    [285.000, 290.000) = 6 
    [290.000, 295.000) = 1 
    [295.000, 300.000) = 0 
    [300.000, 305.000) = 0 
    [305.000, 310.000) = 0 
    [310.000, 315.000) = 0 
    [315.000, 320.000) = 0 
    [320.000, 325.000) = 0 
    [325.000, 330.000) = 0 
    [330.000, 335.000) = 0 
    [335.000, 340.000) = 1 
    [340.000, 345.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    268.960 ms/op
     p(50.0000) =    280.494 ms/op
     p(90.0000) =    283.640 ms/op
     p(95.0000) =    284.584 ms/op
     p(99.0000) =    328.288 ms/op
     p(99.9000) =    341.311 ms/op
     p(99.9900) =    341.311 ms/op
     p(99.9990) =    341.311 ms/op
     p(99.9999) =    341.311 ms/op
    p(100.0000) =    341.311 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 91.67% complete, ETA 00:54:00
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3923.771 ms/op
# Warmup Iteration   2: 3072.328 ms/op
# Warmup Iteration   3: 2836.748 ±(99.9%) 44.179 ms/op
# Warmup Iteration   4: 2856.321 ms/op
# Warmup Iteration   5: 2856.321 ms/op
Iteration   1: 2843.738 ±(99.9%) 202.452 ms/op
                 executeQuery·p0.00:   2835.350 ms/op
                 executeQuery·p0.50:   2839.544 ms/op
                 executeQuery·p0.90:   2856.321 ms/op
                 executeQuery·p0.95:   2856.321 ms/op
                 executeQuery·p0.99:   2856.321 ms/op
                 executeQuery·p0.999:  2856.321 ms/op
                 executeQuery·p0.9999: 2856.321 ms/op
                 executeQuery·p1.00:   2856.321 ms/op

Iteration   2: 2852.127 ±(99.9%) 729.952 ms/op
                 executeQuery·p0.00:   2826.961 ms/op
                 executeQuery·p0.50:   2831.155 ms/op
                 executeQuery·p0.90:   2898.264 ms/op
                 executeQuery·p0.95:   2898.264 ms/op
                 executeQuery·p0.99:   2898.264 ms/op
                 executeQuery·p0.999:  2898.264 ms/op
                 executeQuery·p0.9999: 2898.264 ms/op
                 executeQuery·p1.00:   2898.264 ms/op

Iteration   3: 2839.544 ±(99.9%) 275.896 ms/op
                 executeQuery·p0.00:   2826.961 ms/op
                 executeQuery·p0.50:   2835.350 ms/op
                 executeQuery·p0.90:   2856.321 ms/op
                 executeQuery·p0.95:   2856.321 ms/op
                 executeQuery·p0.99:   2856.321 ms/op
                 executeQuery·p0.999:  2856.321 ms/op
                 executeQuery·p0.9999: 2856.321 ms/op
                 executeQuery·p1.00:   2856.321 ms/op

Iteration   4: 2829.757 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   2822.767 ms/op
                 executeQuery·p0.50:   2831.155 ms/op
                 executeQuery·p0.90:   2835.350 ms/op
                 executeQuery·p0.95:   2835.350 ms/op
                 executeQuery·p0.99:   2835.350 ms/op
                 executeQuery·p0.999:  2835.350 ms/op
                 executeQuery·p0.9999: 2835.350 ms/op
                 executeQuery·p1.00:   2835.350 ms/op

Iteration   5: 2860.515 ms/op
                 executeQuery·p0.00:   2839.544 ms/op
                 executeQuery·p0.50:   2860.515 ms/op
                 executeQuery·p0.90:   2881.487 ms/op
                 executeQuery·p0.95:   2881.487 ms/op
                 executeQuery·p0.99:   2881.487 ms/op
                 executeQuery·p0.999:  2881.487 ms/op
                 executeQuery·p0.9999: 2881.487 ms/op
                 executeQuery·p1.00:   2881.487 ms/op


# Run progress: 92.26% complete, ETA 00:50:00
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 3902.800 ms/op
# Warmup Iteration   2: 3070.231 ms/op
# Warmup Iteration   3: 2804.591 ±(99.9%) 44.179 ms/op
# Warmup Iteration   4: 2805.989 ±(99.9%) 333.542 ms/op
# Warmup Iteration   5: 2798.999 ±(99.9%) 44.179 ms/op
Iteration   1: 2800.397 ±(99.9%) 88.357 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2797.601 ms/op
                 executeQuery·p0.90:   2805.989 ms/op
                 executeQuery·p0.95:   2805.989 ms/op
                 executeQuery·p0.99:   2805.989 ms/op
                 executeQuery·p0.999:  2805.989 ms/op
                 executeQuery·p0.9999: 2805.989 ms/op
                 executeQuery·p1.00:   2805.989 ms/op

Iteration   2: 2800.397 ±(99.9%) 116.886 ms/op
                 executeQuery·p0.00:   2793.406 ms/op
                 executeQuery·p0.50:   2801.795 ms/op
                 executeQuery·p0.90:   2805.989 ms/op
                 executeQuery·p0.95:   2805.989 ms/op
                 executeQuery·p0.99:   2805.989 ms/op
                 executeQuery·p0.999:  2805.989 ms/op
                 executeQuery·p0.9999: 2805.989 ms/op
                 executeQuery·p1.00:   2805.989 ms/op

Iteration   3: 2797.601 ±(99.9%) 76.520 ms/op
                 executeQuery·p0.00:   2793.406 ms/op
                 executeQuery·p0.50:   2797.601 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   4: 2800.397 ±(99.9%) 44.179 ms/op
                 executeQuery·p0.00:   2797.601 ms/op
                 executeQuery·p0.50:   2801.795 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op

Iteration   5: 2801.795 ±(99.9%) 0.001 ms/op
                 executeQuery·p0.00:   2801.795 ms/op
                 executeQuery·p0.50:   2801.795 ms/op
                 executeQuery·p0.90:   2801.795 ms/op
                 executeQuery·p0.95:   2801.795 ms/op
                 executeQuery·p0.99:   2801.795 ms/op
                 executeQuery·p0.999:  2801.795 ms/op
                 executeQuery·p0.9999: 2801.795 ms/op
                 executeQuery·p1.00:   2801.795 ms/op



Result "benchmarks.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 29
  mean =   2821.320 ±(99.9%) 18.438 ms/op

  Histogram, ms/op:
    [2700.000, 2712.500) = 0 
    [2712.500, 2725.000) = 0 
    [2725.000, 2737.500) = 0 
    [2737.500, 2750.000) = 0 
    [2750.000, 2762.500) = 0 
    [2762.500, 2775.000) = 0 
    [2775.000, 2787.500) = 0 
    [2787.500, 2800.000) = 6 
    [2800.000, 2812.500) = 9 
    [2812.500, 2825.000) = 1 
    [2825.000, 2837.500) = 7 
    [2837.500, 2850.000) = 2 
    [2850.000, 2862.500) = 2 
    [2862.500, 2875.000) = 0 
    [2875.000, 2887.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2793.406 ms/op
     p(50.0000) =   2805.989 ms/op
     p(90.0000) =   2856.321 ms/op
     p(95.0000) =   2889.875 ms/op
     p(99.0000) =   2898.264 ms/op
     p(99.9000) =   2898.264 ms/op
     p(99.9900) =   2898.264 ms/op
     p(99.9990) =   2898.264 ms/op
     p(99.9999) =   2898.264 ms/op
    p(100.0000) =   2898.264 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 92.86% complete, ETA 00:46:02
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 212.325 ±(99.9%) 8.829 ms/op
# Warmup Iteration   2: 205.430 ±(99.9%) 0.812 ms/op
# Warmup Iteration   3: 202.789 ±(99.9%) 0.853 ms/op
# Warmup Iteration   4: 202.637 ±(99.9%) 0.794 ms/op
# Warmup Iteration   5: 201.573 ±(99.9%) 1.064 ms/op
Iteration   1: 200.126 ±(99.9%) 1.674 ms/op
                 executeQuery·p0.00:   195.297 ms/op
                 executeQuery·p0.50:   201.327 ms/op
                 executeQuery·p0.90:   204.472 ms/op
                 executeQuery·p0.95:   204.734 ms/op
                 executeQuery·p0.99:   210.502 ms/op
                 executeQuery·p0.999:  210.502 ms/op
                 executeQuery·p0.9999: 210.502 ms/op
                 executeQuery·p1.00:   210.502 ms/op

Iteration   2: 200.273 ±(99.9%) 1.660 ms/op
                 executeQuery·p0.00:   195.035 ms/op
                 executeQuery·p0.50:   201.327 ms/op
                 executeQuery·p0.90:   203.922 ms/op
                 executeQuery·p0.95:   204.066 ms/op
                 executeQuery·p0.99:   204.734 ms/op
                 executeQuery·p0.999:  204.734 ms/op
                 executeQuery·p0.9999: 204.734 ms/op
                 executeQuery·p1.00:   204.734 ms/op

Iteration   3: 200.095 ±(99.9%) 1.614 ms/op
                 executeQuery·p0.00:   195.297 ms/op
                 executeQuery·p0.50:   201.064 ms/op
                 executeQuery·p0.90:   204.446 ms/op
                 executeQuery·p0.95:   205.678 ms/op
                 executeQuery·p0.99:   207.094 ms/op
                 executeQuery·p0.999:  207.094 ms/op
                 executeQuery·p0.9999: 207.094 ms/op
                 executeQuery·p1.00:   207.094 ms/op

Iteration   4: 199.450 ±(99.9%) 1.759 ms/op
                 executeQuery·p0.00:   194.773 ms/op
                 executeQuery·p0.50:   200.540 ms/op
                 executeQuery·p0.90:   203.581 ms/op
                 executeQuery·p0.95:   204.210 ms/op
                 executeQuery·p0.99:   208.667 ms/op
                 executeQuery·p0.999:  208.667 ms/op
                 executeQuery·p0.9999: 208.667 ms/op
                 executeQuery·p1.00:   208.667 ms/op

Iteration   5: 201.473 ±(99.9%) 1.665 ms/op
                 executeQuery·p0.00:   194.773 ms/op
                 executeQuery·p0.50:   202.244 ms/op
                 executeQuery·p0.90:   205.967 ms/op
                 executeQuery·p0.95:   206.923 ms/op
                 executeQuery·p0.99:   207.356 ms/op
                 executeQuery·p0.999:  207.356 ms/op
                 executeQuery·p0.9999: 207.356 ms/op
                 executeQuery·p1.00:   207.356 ms/op


# Run progress: 93.45% complete, ETA 00:42:03
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 209.874 ±(99.9%) 8.049 ms/op
# Warmup Iteration   2: 203.825 ±(99.9%) 1.490 ms/op
# Warmup Iteration   3: 201.101 ±(99.9%) 1.705 ms/op
# Warmup Iteration   4: 202.328 ±(99.9%) 1.212 ms/op
# Warmup Iteration   5: 201.180 ±(99.9%) 1.133 ms/op
Iteration   1: 202.365 ±(99.9%) 0.962 ms/op
                 executeQuery·p0.00:   198.443 ms/op
                 executeQuery·p0.50:   201.982 ms/op
                 executeQuery·p0.90:   204.446 ms/op
                 executeQuery·p0.95:   206.701 ms/op
                 executeQuery·p0.99:   209.191 ms/op
                 executeQuery·p0.999:  209.191 ms/op
                 executeQuery·p0.9999: 209.191 ms/op
                 executeQuery·p1.00:   209.191 ms/op

Iteration   2: 201.730 ±(99.9%) 1.291 ms/op
                 executeQuery·p0.00:   196.346 ms/op
                 executeQuery·p0.50:   202.637 ms/op
                 executeQuery·p0.90:   204.420 ms/op
                 executeQuery·p0.95:   205.351 ms/op
                 executeQuery·p0.99:   207.618 ms/op
                 executeQuery·p0.999:  207.618 ms/op
                 executeQuery·p0.9999: 207.618 ms/op
                 executeQuery·p1.00:   207.618 ms/op

Iteration   3: 200.881 ±(99.9%) 1.647 ms/op
                 executeQuery·p0.00:   196.608 ms/op
                 executeQuery·p0.50:   200.802 ms/op
                 executeQuery·p0.90:   204.446 ms/op
                 executeQuery·p0.95:   207.186 ms/op
                 executeQuery·p0.99:   210.764 ms/op
                 executeQuery·p0.999:  210.764 ms/op
                 executeQuery·p0.9999: 210.764 ms/op
                 executeQuery·p1.00:   210.764 ms/op

Iteration   4: 200.713 ±(99.9%) 1.207 ms/op
                 executeQuery·p0.00:   193.462 ms/op
                 executeQuery·p0.50:   201.064 ms/op
                 executeQuery·p0.90:   203.686 ms/op
                 executeQuery·p0.95:   204.066 ms/op
                 executeQuery·p0.99:   204.472 ms/op
                 executeQuery·p0.999:  204.472 ms/op
                 executeQuery·p0.9999: 204.472 ms/op
                 executeQuery·p1.00:   204.472 ms/op

Iteration   5: 203.188 ±(99.9%) 0.863 ms/op
                 executeQuery·p0.00:   200.278 ms/op
                 executeQuery·p0.50:   203.162 ms/op
                 executeQuery·p0.90:   205.521 ms/op
                 executeQuery·p0.95:   205.757 ms/op
                 executeQuery·p0.99:   206.307 ms/op
                 executeQuery·p0.999:  206.307 ms/op
                 executeQuery·p0.9999: 206.307 ms/op
                 executeQuery·p1.00:   206.307 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 501
  mean =    201.026 ±(99.9%) 0.465 ms/op

  Histogram, ms/op:
    [190.000, 192.500) = 0 
    [192.500, 195.000) = 10 
    [195.000, 197.500) = 80 
    [197.500, 200.000) = 64 
    [200.000, 202.500) = 159 
    [202.500, 205.000) = 159 
    [205.000, 207.500) = 22 
    [207.500, 210.000) = 5 
    [210.000, 212.500) = 2 
    [212.500, 215.000) = 0 
    [215.000, 217.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    193.462 ms/op
     p(50.0000) =    201.327 ms/op
     p(90.0000) =    204.210 ms/op
     p(95.0000) =    205.495 ms/op
     p(99.0000) =    208.132 ms/op
     p(99.9000) =    210.764 ms/op
     p(99.9900) =    210.764 ms/op
     p(99.9990) =    210.764 ms/op
     p(99.9999) =    210.764 ms/op
    p(100.0000) =    210.764 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 94.05% complete, ETA 00:38:06
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2008.233 ±(99.9%) 489.664 ms/op
# Warmup Iteration   2: 1964.332 ±(99.9%) 53.469 ms/op
# Warmup Iteration   3: 1898.971 ±(99.9%) 53.480 ms/op
# Warmup Iteration   4: 1946.157 ±(99.9%) 12.336 ms/op
# Warmup Iteration   5: 1949.652 ±(99.9%) 7.122 ms/op
Iteration   1: 1950.351 ±(99.9%) 12.884 ms/op
                 executeQuery·p0.00:   1946.157 ms/op
                 executeQuery·p0.50:   1950.351 ms/op
                 executeQuery·p0.90:   1958.740 ms/op
                 executeQuery·p0.95:   1958.740 ms/op
                 executeQuery·p0.99:   1958.740 ms/op
                 executeQuery·p0.999:  1958.740 ms/op
                 executeQuery·p0.9999: 1958.740 ms/op
                 executeQuery·p1.00:   1958.740 ms/op

Iteration   2: 1946.856 ±(99.9%) 12.704 ms/op
                 executeQuery·p0.00:   1941.963 ms/op
                 executeQuery·p0.50:   1946.157 ms/op
                 executeQuery·p0.90:   1954.546 ms/op
                 executeQuery·p0.95:   1954.546 ms/op
                 executeQuery·p0.99:   1954.546 ms/op
                 executeQuery·p0.999:  1954.546 ms/op
                 executeQuery·p0.9999: 1954.546 ms/op
                 executeQuery·p1.00:   1954.546 ms/op

Iteration   3: 1953.497 ±(99.9%) 28.750 ms/op
                 executeQuery·p0.00:   1939.866 ms/op
                 executeQuery·p0.50:   1952.449 ms/op
                 executeQuery·p0.90:   1971.323 ms/op
                 executeQuery·p0.95:   1971.323 ms/op
                 executeQuery·p0.99:   1971.323 ms/op
                 executeQuery·p0.999:  1971.323 ms/op
                 executeQuery·p0.9999: 1971.323 ms/op
                 executeQuery·p1.00:   1971.323 ms/op

Iteration   4: 1950.002 ±(99.9%) 10.790 ms/op
                 executeQuery·p0.00:   1944.060 ms/op
                 executeQuery·p0.50:   1950.351 ms/op
                 executeQuery·p0.90:   1954.546 ms/op
                 executeQuery·p0.95:   1954.546 ms/op
                 executeQuery·p0.99:   1954.546 ms/op
                 executeQuery·p0.999:  1954.546 ms/op
                 executeQuery·p0.9999: 1954.546 ms/op
                 executeQuery·p1.00:   1954.546 ms/op

Iteration   5: 1972.371 ±(99.9%) 69.855 ms/op
                 executeQuery·p0.00:   1923.088 ms/op
                 executeQuery·p0.50:   1982.857 ms/op
                 executeQuery·p0.90:   1990.197 ms/op
                 executeQuery·p0.95:   1990.197 ms/op
                 executeQuery·p0.99:   1990.197 ms/op
                 executeQuery·p0.999:  1990.197 ms/op
                 executeQuery·p0.9999: 1990.197 ms/op
                 executeQuery·p1.00:   1990.197 ms/op


# Run progress: 94.64% complete, ETA 00:34:11
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2020.396 ±(99.9%) 420.913 ms/op
# Warmup Iteration   2: 1970.274 ±(99.9%) 61.650 ms/op
# Warmup Iteration   3: 1951.749 ±(99.9%) 8.854 ms/op
# Warmup Iteration   4: 1950.701 ±(99.9%) 19.475 ms/op
# Warmup Iteration   5: 1930.428 ±(99.9%) 78.614 ms/op
Iteration   1: 1941.264 ±(99.9%) 67.634 ms/op
                 executeQuery·p0.00:   1893.728 ms/op
                 executeQuery·p0.50:   1950.351 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   2: 1932.526 ±(99.9%) 116.300 ms/op
                 executeQuery·p0.00:   1853.882 ms/op
                 executeQuery·p0.50:   1943.011 ms/op
                 executeQuery·p0.90:   1975.517 ms/op
                 executeQuery·p0.95:   1975.517 ms/op
                 executeQuery·p0.99:   1975.517 ms/op
                 executeQuery·p0.999:  1975.517 ms/op
                 executeQuery·p0.9999: 1975.517 ms/op
                 executeQuery·p1.00:   1975.517 ms/op

Iteration   3: 1950.351 ±(99.9%) 24.104 ms/op
                 executeQuery·p0.00:   1941.963 ms/op
                 executeQuery·p0.50:   1950.351 ms/op
                 executeQuery·p0.90:   1965.031 ms/op
                 executeQuery·p0.95:   1965.031 ms/op
                 executeQuery·p0.99:   1965.031 ms/op
                 executeQuery·p0.999:  1965.031 ms/op
                 executeQuery·p0.9999: 1965.031 ms/op
                 executeQuery·p1.00:   1965.031 ms/op

Iteration   4: 1947.555 ±(99.9%) 21.899 ms/op
                 executeQuery·p0.00:   1939.866 ms/op
                 executeQuery·p0.50:   1947.206 ms/op
                 executeQuery·p0.90:   1960.837 ms/op
                 executeQuery·p0.95:   1960.837 ms/op
                 executeQuery·p0.99:   1960.837 ms/op
                 executeQuery·p0.999:  1960.837 ms/op
                 executeQuery·p0.9999: 1960.837 ms/op
                 executeQuery·p1.00:   1960.837 ms/op

Iteration   5: 2002.361 ±(99.9%) 222.506 ms/op
                 executeQuery·p0.00:   1973.420 ms/op
                 executeQuery·p0.50:   1977.614 ms/op
                 executeQuery·p0.90:   2105.541 ms/op
                 executeQuery·p0.95:   2105.541 ms/op
                 executeQuery·p0.99:   2105.541 ms/op
                 executeQuery·p0.999:  2105.541 ms/op
                 executeQuery·p0.9999: 2105.541 ms/op
                 executeQuery·p1.00:   2105.541 ms/op



Result "benchmarks.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery":
  N = 59
  mean =   1953.906 ±(99.9%) 12.944 ms/op

  Histogram, ms/op:
    [1800.000, 1825.000) = 0 
    [1825.000, 1850.000) = 0 
    [1850.000, 1875.000) = 1 
    [1875.000, 1900.000) = 1 
    [1900.000, 1925.000) = 1 
    [1925.000, 1950.000) = 23 
    [1950.000, 1975.000) = 25 
    [1975.000, 2000.000) = 7 
    [2000.000, 2025.000) = 0 
    [2025.000, 2050.000) = 0 
    [2050.000, 2075.000) = 0 
    [2075.000, 2100.000) = 0 
    [2100.000, 2125.000) = 1 
    [2125.000, 2150.000) = 0 
    [2150.000, 2175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1853.882 ms/op
     p(50.0000) =   1950.351 ms/op
     p(90.0000) =   1981.809 ms/op
     p(95.0000) =   1983.906 ms/op
     p(99.0000) =   2105.541 ms/op
     p(99.9000) =   2105.541 ms/op
     p(99.9900) =   2105.541 ms/op
     p(99.9990) =   2105.541 ms/op
     p(99.9999) =   2105.541 ms/op
    p(100.0000) =   2105.541 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 95.24% complete, ETA 00:30:17
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 209.880 ±(99.9%) 10.299 ms/op
# Warmup Iteration   2: 198.045 ±(99.9%) 1.395 ms/op
# Warmup Iteration   3: 198.113 ±(99.9%) 1.187 ms/op
# Warmup Iteration   4: 196.778 ±(99.9%) 1.413 ms/op
# Warmup Iteration   5: 195.061 ±(99.9%) 0.990 ms/op
Iteration   1: 196.104 ±(99.9%) 1.174 ms/op
                 executeQuery·p0.00:   193.724 ms/op
                 executeQuery·p0.50:   195.822 ms/op
                 executeQuery·p0.90:   199.492 ms/op
                 executeQuery·p0.95:   201.589 ms/op
                 executeQuery·p0.99:   202.375 ms/op
                 executeQuery·p0.999:  202.375 ms/op
                 executeQuery·p0.9999: 202.375 ms/op
                 executeQuery·p1.00:   202.375 ms/op

Iteration   2: 197.845 ±(99.9%) 1.096 ms/op
                 executeQuery·p0.00:   193.724 ms/op
                 executeQuery·p0.50:   196.870 ms/op
                 executeQuery·p0.90:   201.327 ms/op
                 executeQuery·p0.95:   202.755 ms/op
                 executeQuery·p0.99:   203.162 ms/op
                 executeQuery·p0.999:  203.162 ms/op
                 executeQuery·p0.9999: 203.162 ms/op
                 executeQuery·p1.00:   203.162 ms/op

Iteration   3: 197.635 ±(99.9%) 1.166 ms/op
                 executeQuery·p0.00:   196.346 ms/op
                 executeQuery·p0.50:   196.608 ms/op
                 executeQuery·p0.90:   201.327 ms/op
                 executeQuery·p0.95:   202.768 ms/op
                 executeQuery·p0.99:   207.880 ms/op
                 executeQuery·p0.999:  207.880 ms/op
                 executeQuery·p0.9999: 207.880 ms/op
                 executeQuery·p1.00:   207.880 ms/op

Iteration   4: 197.004 ±(99.9%) 0.582 ms/op
                 executeQuery·p0.00:   196.346 ms/op
                 executeQuery·p0.50:   196.608 ms/op
                 executeQuery·p0.90:   198.443 ms/op
                 executeQuery·p0.95:   200.933 ms/op
                 executeQuery·p0.99:   201.327 ms/op
                 executeQuery·p0.999:  201.327 ms/op
                 executeQuery·p0.9999: 201.327 ms/op
                 executeQuery·p1.00:   201.327 ms/op

Iteration   5: 202.129 ±(99.9%) 0.767 ms/op
                 executeQuery·p0.00:   197.919 ms/op
                 executeQuery·p0.50:   202.375 ms/op
                 executeQuery·p0.90:   202.664 ms/op
                 executeQuery·p0.95:   204.525 ms/op
                 executeQuery·p0.99:   205.783 ms/op
                 executeQuery·p0.999:  205.783 ms/op
                 executeQuery·p0.9999: 205.783 ms/op
                 executeQuery·p1.00:   205.783 ms/op


# Run progress: 95.83% complete, ETA 00:26:24
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 210.268 ±(99.9%) 10.329 ms/op
# Warmup Iteration   2: 199.271 ±(99.9%) 1.573 ms/op
# Warmup Iteration   3: 199.885 ±(99.9%) 0.758 ms/op
# Warmup Iteration   4: 198.957 ±(99.9%) 1.076 ms/op
# Warmup Iteration   5: 199.035 ±(99.9%) 1.498 ms/op
Iteration   1: 199.625 ±(99.9%) 1.069 ms/op
                 executeQuery·p0.00:   195.035 ms/op
                 executeQuery·p0.50:   198.443 ms/op
                 executeQuery·p0.90:   202.899 ms/op
                 executeQuery·p0.95:   203.948 ms/op
                 executeQuery·p0.99:   204.472 ms/op
                 executeQuery·p0.999:  204.472 ms/op
                 executeQuery·p0.9999: 204.472 ms/op
                 executeQuery·p1.00:   204.472 ms/op

Iteration   2: 198.604 ±(99.9%) 0.869 ms/op
                 executeQuery·p0.00:   197.657 ms/op
                 executeQuery·p0.50:   197.919 ms/op
                 executeQuery·p0.90:   200.802 ms/op
                 executeQuery·p0.95:   204.341 ms/op
                 executeQuery·p0.99:   204.734 ms/op
                 executeQuery·p0.999:  204.734 ms/op
                 executeQuery·p0.9999: 204.734 ms/op
                 executeQuery·p1.00:   204.734 ms/op

Iteration   3: 199.187 ±(99.9%) 1.739 ms/op
                 executeQuery·p0.00:   197.657 ms/op
                 executeQuery·p0.50:   197.919 ms/op
                 executeQuery·p0.90:   203.948 ms/op
                 executeQuery·p0.95:   204.341 ms/op
                 executeQuery·p0.99:   219.152 ms/op
                 executeQuery·p0.999:  219.152 ms/op
                 executeQuery·p0.9999: 219.152 ms/op
                 executeQuery·p1.00:   219.152 ms/op

Iteration   4: 199.497 ±(99.9%) 1.196 ms/op
                 executeQuery·p0.00:   197.394 ms/op
                 executeQuery·p0.50:   198.181 ms/op
                 executeQuery·p0.90:   202.375 ms/op
                 executeQuery·p0.95:   204.210 ms/op
                 executeQuery·p0.99:   204.997 ms/op
                 executeQuery·p0.999:  204.997 ms/op
                 executeQuery·p0.9999: 204.997 ms/op
                 executeQuery·p1.00:   204.997 ms/op

Iteration   5: 199.422 ±(99.9%) 1.114 ms/op
                 executeQuery·p0.00:   197.657 ms/op
                 executeQuery·p0.50:   198.181 ms/op
                 executeQuery·p0.90:   203.686 ms/op
                 executeQuery·p0.95:   204.472 ms/op
                 executeQuery·p0.99:   206.569 ms/op
                 executeQuery·p0.999:  206.569 ms/op
                 executeQuery·p0.9999: 206.569 ms/op
                 executeQuery·p1.00:   206.569 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 492
  mean =    198.686 ±(99.9%) 0.408 ms/op

  Histogram, ms/op:
    [190.000, 192.500) = 0 
    [192.500, 195.000) = 21 
    [195.000, 197.500) = 145 
    [197.500, 200.000) = 195 
    [200.000, 202.500) = 79 
    [202.500, 205.000) = 48 
    [205.000, 207.500) = 2 
    [207.500, 210.000) = 1 
    [210.000, 212.500) = 0 
    [212.500, 215.000) = 0 
    [215.000, 217.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    193.724 ms/op
     p(50.0000) =    197.919 ms/op
     p(90.0000) =    202.637 ms/op
     p(95.0000) =    203.515 ms/op
     p(99.0000) =    205.052 ms/op
     p(99.9000) =    219.152 ms/op
     p(99.9900) =    219.152 ms/op
     p(99.9990) =    219.152 ms/op
     p(99.9999) =    219.152 ms/op
    p(100.0000) =    219.152 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 96.43% complete, ETA 00:22:33
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2009.910 ±(99.9%) 467.139 ms/op
# Warmup Iteration   2: 1926.933 ±(99.9%) 68.016 ms/op
# Warmup Iteration   3: 1898.971 ±(99.9%) 84.303 ms/op
# Warmup Iteration   4: 1918.195 ±(99.9%) 97.959 ms/op
# Warmup Iteration   5: 1917.146 ±(99.9%) 89.914 ms/op
Iteration   1: 1906.311 ±(99.9%) 95.262 ms/op
                 executeQuery·p0.00:   1872.757 ms/op
                 executeQuery·p0.50:   1906.311 ms/op
                 executeQuery·p0.90:   1944.060 ms/op
                 executeQuery·p0.95:   1944.060 ms/op
                 executeQuery·p0.99:   1944.060 ms/op
                 executeQuery·p0.999:  1944.060 ms/op
                 executeQuery·p0.9999: 1944.060 ms/op
                 executeQuery·p1.00:   1944.060 ms/op

Iteration   2: 1905.263 ±(99.9%) 91.692 ms/op
                 executeQuery·p0.00:   1872.757 ms/op
                 executeQuery·p0.50:   1907.360 ms/op
                 executeQuery·p0.90:   1935.671 ms/op
                 executeQuery·p0.95:   1935.671 ms/op
                 executeQuery·p0.99:   1935.671 ms/op
                 executeQuery·p0.999:  1935.671 ms/op
                 executeQuery·p0.9999: 1935.671 ms/op
                 executeQuery·p1.00:   1935.671 ms/op

Iteration   3: 1911.904 ±(99.9%) 71.317 ms/op
                 executeQuery·p0.00:   1881.145 ms/op
                 executeQuery·p0.50:   1919.943 ms/op
                 executeQuery·p0.90:   1935.671 ms/op
                 executeQuery·p0.95:   1935.671 ms/op
                 executeQuery·p0.99:   1935.671 ms/op
                 executeQuery·p0.999:  1935.671 ms/op
                 executeQuery·p0.9999: 1935.671 ms/op
                 executeQuery·p1.00:   1935.671 ms/op

Iteration   4: 1917.146 ±(99.9%) 86.062 ms/op
                 executeQuery·p0.00:   1872.757 ms/op
                 executeQuery·p0.50:   1933.574 ms/op
                 executeQuery·p0.90:   1941.963 ms/op
                 executeQuery·p0.95:   1941.963 ms/op
                 executeQuery·p0.99:   1941.963 ms/op
                 executeQuery·p0.999:  1941.963 ms/op
                 executeQuery·p0.9999: 1941.963 ms/op
                 executeQuery·p1.00:   1941.963 ms/op

Iteration   5: 1910.855 ±(99.9%) 112.900 ms/op
                 executeQuery·p0.00:   1872.757 ms/op
                 executeQuery·p0.50:   1908.408 ms/op
                 executeQuery·p0.90:   1969.226 ms/op
                 executeQuery·p0.95:   1969.226 ms/op
                 executeQuery·p0.99:   1969.226 ms/op
                 executeQuery·p0.999:  1969.226 ms/op
                 executeQuery·p0.9999: 1969.226 ms/op
                 executeQuery·p1.00:   1969.226 ms/op


# Run progress: 97.02% complete, ETA 00:18:44
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 1989.358 ±(99.9%) 531.370 ms/op
# Warmup Iteration   2: 1912.952 ±(99.9%) 86.223 ms/op
# Warmup Iteration   3: 1887.786 ±(99.9%) 38.006 ms/op
# Warmup Iteration   4: 1858.426 ±(99.9%) 49.541 ms/op
# Warmup Iteration   5: 1908.408 ±(99.9%) 108.500 ms/op
Iteration   1: 1907.360 ±(99.9%) 95.895 ms/op
                 executeQuery·p0.00:   1872.757 ms/op
                 executeQuery·p0.50:   1909.457 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op

Iteration   2: 1869.961 ±(99.9%) 35.219 ms/op
                 executeQuery·p0.00:   1853.882 ms/op
                 executeQuery·p0.50:   1873.805 ms/op
                 executeQuery·p0.90:   1885.340 ms/op
                 executeQuery·p0.95:   1885.340 ms/op
                 executeQuery·p0.99:   1885.340 ms/op
                 executeQuery·p0.999:  1885.340 ms/op
                 executeQuery·p0.9999: 1885.340 ms/op
                 executeQuery·p1.00:   1885.340 ms/op

Iteration   3: 1881.145 ±(99.9%) 99.245 ms/op
                 executeQuery·p0.00:   1851.785 ms/op
                 executeQuery·p0.50:   1868.562 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op

Iteration   4: 1922.389 ±(99.9%) 128.124 ms/op
                 executeQuery·p0.00:   1879.048 ms/op
                 executeQuery·p0.50:   1917.846 ms/op
                 executeQuery·p0.90:   1994.392 ms/op
                 executeQuery·p0.95:   1994.392 ms/op
                 executeQuery·p0.99:   1994.392 ms/op
                 executeQuery·p0.999:  1994.392 ms/op
                 executeQuery·p0.9999: 1994.392 ms/op
                 executeQuery·p1.00:   1994.392 ms/op

Iteration   5: 1910.156 ±(99.9%) 70.414 ms/op
                 executeQuery·p0.00:   1879.048 ms/op
                 executeQuery·p0.50:   1910.505 ms/op
                 executeQuery·p0.90:   1939.866 ms/op
                 executeQuery·p0.95:   1939.866 ms/op
                 executeQuery·p0.99:   1939.866 ms/op
                 executeQuery·p0.999:  1939.866 ms/op
                 executeQuery·p0.9999: 1939.866 ms/op
                 executeQuery·p1.00:   1939.866 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery":
  N = 60
  mean =   1904.249 ±(99.9%) 15.156 ms/op

  Histogram, ms/op:
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 0 
    [1837.500, 1850.000) = 0 
    [1850.000, 1862.500) = 5 
    [1862.500, 1875.000) = 10 
    [1875.000, 1887.500) = 15 
    [1887.500, 1900.000) = 1 
    [1900.000, 1912.500) = 3 
    [1912.500, 1925.000) = 1 
    [1925.000, 1937.500) = 13 
    [1937.500, 1950.000) = 10 
    [1950.000, 1962.500) = 0 
    [1962.500, 1975.000) = 1 
    [1975.000, 1987.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1851.785 ms/op
     p(50.0000) =   1889.534 ms/op
     p(90.0000) =   1941.753 ms/op
     p(95.0000) =   1944.060 ms/op
     p(99.0000) =   1994.392 ms/op
     p(99.9000) =   1994.392 ms/op
     p(99.9900) =   1994.392 ms/op
     p(99.9990) =   1994.392 ms/op
     p(99.9999) =   1994.392 ms/op
    p(100.0000) =   1994.392 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-1)

# Run progress: 97.62% complete, ETA 00:14:57
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 209.151 ±(99.9%) 10.206 ms/op
# Warmup Iteration   2: 199.780 ±(99.9%) 1.338 ms/op
# Warmup Iteration   3: 198.128 ±(99.9%) 0.963 ms/op
# Warmup Iteration   4: 196.500 ±(99.9%) 1.489 ms/op
# Warmup Iteration   5: 198.401 ±(99.9%) 1.080 ms/op
Iteration   1: 199.545 ±(99.9%) 0.742 ms/op
                 executeQuery·p0.00:   196.870 ms/op
                 executeQuery·p0.50:   199.229 ms/op
                 executeQuery·p0.90:   201.851 ms/op
                 executeQuery·p0.95:   203.686 ms/op
                 executeQuery·p0.99:   203.948 ms/op
                 executeQuery·p0.999:  203.948 ms/op
                 executeQuery·p0.9999: 203.948 ms/op
                 executeQuery·p1.00:   203.948 ms/op

Iteration   2: 201.064 ±(99.9%) 0.915 ms/op
                 executeQuery·p0.00:   198.443 ms/op
                 executeQuery·p0.50:   201.458 ms/op
                 executeQuery·p0.90:   203.712 ms/op
                 executeQuery·p0.95:   204.997 ms/op
                 executeQuery·p0.99:   204.997 ms/op
                 executeQuery·p0.999:  204.997 ms/op
                 executeQuery·p0.9999: 204.997 ms/op
                 executeQuery·p1.00:   204.997 ms/op

Iteration   3: 200.481 ±(99.9%) 0.883 ms/op
                 executeQuery·p0.00:   198.967 ms/op
                 executeQuery·p0.50:   199.229 ms/op
                 executeQuery·p0.90:   203.424 ms/op
                 executeQuery·p0.95:   204.472 ms/op
                 executeQuery·p0.99:   204.734 ms/op
                 executeQuery·p0.999:  204.734 ms/op
                 executeQuery·p0.9999: 204.734 ms/op
                 executeQuery·p1.00:   204.734 ms/op

Iteration   4: 198.208 ±(99.9%) 1.179 ms/op
                 executeQuery·p0.00:   193.724 ms/op
                 executeQuery·p0.50:   198.705 ms/op
                 executeQuery·p0.90:   200.540 ms/op
                 executeQuery·p0.95:   203.031 ms/op
                 executeQuery·p0.99:   203.686 ms/op
                 executeQuery·p0.999:  203.686 ms/op
                 executeQuery·p0.9999: 203.686 ms/op
                 executeQuery·p1.00:   203.686 ms/op

Iteration   5: 199.042 ±(99.9%) 0.767 ms/op
                 executeQuery·p0.00:   198.181 ms/op
                 executeQuery·p0.50:   198.443 ms/op
                 executeQuery·p0.90:   202.899 ms/op
                 executeQuery·p0.95:   203.031 ms/op
                 executeQuery·p0.99:   203.162 ms/op
                 executeQuery·p0.999:  203.162 ms/op
                 executeQuery·p0.9999: 203.162 ms/op
                 executeQuery·p1.00:   203.162 ms/op


# Run progress: 98.21% complete, ETA 00:11:10
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 212.365 ±(99.9%) 11.329 ms/op
# Warmup Iteration   2: 201.547 ±(99.9%) 1.163 ms/op
# Warmup Iteration   3: 202.402 ±(99.9%) 0.672 ms/op
# Warmup Iteration   4: 199.266 ±(99.9%) 1.624 ms/op
# Warmup Iteration   5: 197.782 ±(99.9%) 1.042 ms/op
Iteration   1: 204.101 ±(99.9%) 1.466 ms/op
                 executeQuery·p0.00:   196.084 ms/op
                 executeQuery·p0.50:   204.734 ms/op
                 executeQuery·p0.90:   206.858 ms/op
                 executeQuery·p0.95:   207.762 ms/op
                 executeQuery·p0.99:   209.977 ms/op
                 executeQuery·p0.999:  209.977 ms/op
                 executeQuery·p0.9999: 209.977 ms/op
                 executeQuery·p1.00:   209.977 ms/op

Iteration   2: 201.911 ±(99.9%) 1.659 ms/op
                 executeQuery·p0.00:   193.462 ms/op
                 executeQuery·p0.50:   201.851 ms/op
                 executeQuery·p0.90:   206.334 ms/op
                 executeQuery·p0.95:   206.976 ms/op
                 executeQuery·p0.99:   208.404 ms/op
                 executeQuery·p0.999:  208.404 ms/op
                 executeQuery·p0.9999: 208.404 ms/op
                 executeQuery·p1.00:   208.404 ms/op

Iteration   3: 205.649 ±(99.9%) 0.679 ms/op
                 executeQuery·p0.00:   201.589 ms/op
                 executeQuery·p0.50:   205.521 ms/op
                 executeQuery·p0.90:   207.356 ms/op
                 executeQuery·p0.95:   207.775 ms/op
                 executeQuery·p0.99:   208.667 ms/op
                 executeQuery·p0.999:  208.667 ms/op
                 executeQuery·p0.9999: 208.667 ms/op
                 executeQuery·p1.00:   208.667 ms/op

Iteration   4: 197.269 ±(99.9%) 1.676 ms/op
                 executeQuery·p0.00:   192.938 ms/op
                 executeQuery·p0.50:   196.608 ms/op
                 executeQuery·p0.90:   202.559 ms/op
                 executeQuery·p0.95:   204.590 ms/op
                 executeQuery·p0.99:   206.307 ms/op
                 executeQuery·p0.999:  206.307 ms/op
                 executeQuery·p0.9999: 206.307 ms/op
                 executeQuery·p1.00:   206.307 ms/op

Iteration   5: 200.422 ±(99.9%) 0.687 ms/op
                 executeQuery·p0.00:   199.492 ms/op
                 executeQuery·p0.50:   200.016 ms/op
                 executeQuery·p0.90:   201.851 ms/op
                 executeQuery·p0.95:   202.768 ms/op
                 executeQuery·p0.99:   207.880 ms/op
                 executeQuery·p0.999:  207.880 ms/op
                 executeQuery·p0.9999: 207.880 ms/op
                 executeQuery·p1.00:   207.880 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 486
  mean =    200.732 ±(99.9%) 0.496 ms/op

  Histogram, ms/op:
    [190.000, 191.250) = 0 
    [191.250, 192.500) = 0 
    [192.500, 193.750) = 20 
    [193.750, 195.000) = 4 
    [195.000, 196.250) = 10 
    [196.250, 197.500) = 9 
    [197.500, 198.750) = 93 
    [198.750, 200.000) = 125 
    [200.000, 201.250) = 29 
    [201.250, 202.500) = 62 
    [202.500, 203.750) = 26 
    [203.750, 205.000) = 47 
    [205.000, 206.250) = 27 
    [206.250, 207.500) = 26 
    [207.500, 208.750) = 7 

  Percentiles, ms/op:
      p(0.0000) =    192.938 ms/op
     p(50.0000) =    199.754 ms/op
     p(90.0000) =    205.521 ms/op
     p(95.0000) =    206.569 ms/op
     p(99.0000) =    207.880 ms/op
     p(99.9000) =    209.977 ms/op
     p(99.9900) =    209.977 ms/op
     p(99.9990) =    209.977 ms/op
     p(99.9999) =    209.977 ms/op
    p(100.0000) =    209.977 ms/op


# JMH version: 1.36
# VM version: JDK 20.0.1, OpenJDK 64-Bit Server VM, 20.0.1+9-29
# VM invoker: /home/olivier/external_software/openjdk-20.0.1/bin/java
# VM options: --add-modules=jdk.incubator.vector --add-opens=java.base/java.nio=ALL-UNNAMED -Darrow.enable_unsafe_memory_access=true -Darrow.enable_null_check_for_get=false --enable-preview -Xmx32g -Xms16g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery
# Parameters: (tpchInstance = /nvtmp/AethraTestData/tpch/sf-10)

# Run progress: 98.81% complete, ETA 00:07:25
# Fork: 1 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2022.913 ±(99.9%) 517.758 ms/op
# Warmup Iteration   2: 1938.118 ±(99.9%) 79.721 ms/op
# Warmup Iteration   3: 1942.312 ±(99.9%) 59.558 ms/op
# Warmup Iteration   4: 1925.186 ±(99.9%) 83.499 ms/op
# Warmup Iteration   5: 1928.331 ±(99.9%) 70.447 ms/op
Iteration   1: 1925.885 ±(99.9%) 75.280 ms/op
                 executeQuery·p0.00:   1900.020 ms/op
                 executeQuery·p0.50:   1925.186 ms/op
                 executeQuery·p0.90:   1952.449 ms/op
                 executeQuery·p0.95:   1952.449 ms/op
                 executeQuery·p0.99:   1952.449 ms/op
                 executeQuery·p0.999:  1952.449 ms/op
                 executeQuery·p0.9999: 1952.449 ms/op
                 executeQuery·p1.00:   1952.449 ms/op

Iteration   2: 1924.486 ±(99.9%) 78.077 ms/op
                 executeQuery·p0.00:   1889.534 ms/op
                 executeQuery·p0.50:   1929.380 ms/op
                 executeQuery·p0.90:   1950.351 ms/op
                 executeQuery·p0.95:   1950.351 ms/op
                 executeQuery·p0.99:   1950.351 ms/op
                 executeQuery·p0.999:  1950.351 ms/op
                 executeQuery·p0.9999: 1950.351 ms/op
                 executeQuery·p1.00:   1950.351 ms/op

Iteration   3: 1902.117 ±(99.9%) 111.828 ms/op
                 executeQuery·p0.00:   1849.688 ms/op
                 executeQuery·p0.50:   1900.020 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op

Iteration   4: 1882.893 ±(99.9%) 48.979 ms/op
                 executeQuery·p0.00:   1864.368 ms/op
                 executeQuery·p0.50:   1880.097 ms/op
                 executeQuery·p0.90:   1912.603 ms/op
                 executeQuery·p0.95:   1912.603 ms/op
                 executeQuery·p0.99:   1912.603 ms/op
                 executeQuery·p0.999:  1912.603 ms/op
                 executeQuery·p0.9999: 1912.603 ms/op
                 executeQuery·p1.00:   1912.603 ms/op

Iteration   5: 1874.504 ±(99.9%) 31.432 ms/op
                 executeQuery·p0.00:   1864.368 ms/op
                 executeQuery·p0.50:   1872.757 ms/op
                 executeQuery·p0.90:   1891.631 ms/op
                 executeQuery·p0.95:   1891.631 ms/op
                 executeQuery·p0.99:   1891.631 ms/op
                 executeQuery·p0.999:  1891.631 ms/op
                 executeQuery·p0.9999: 1891.631 ms/op
                 executeQuery·p1.00:   1891.631 ms/op


# Run progress: 99.40% complete, ETA 00:03:42
# Fork: 2 of 2
WARNING: Using incubator modules: jdk.incubator.vector
# Warmup Iteration   1: 2023.332 ±(99.9%) 469.047 ms/op
# Warmup Iteration   2: 1947.206 ±(99.9%) 36.773 ms/op
# Warmup Iteration   3: 1914.700 ±(99.9%) 40.059 ms/op
# Warmup Iteration   4: 1938.817 ±(99.9%) 59.131 ms/op
# Warmup Iteration   5: 1951.749 ±(99.9%) 16.069 ms/op
Iteration   1: 1944.759 ±(99.9%) 39.654 ms/op
                 executeQuery·p0.00:   1916.797 ms/op
                 executeQuery·p0.50:   1949.303 ms/op
                 executeQuery·p0.90:   1956.643 ms/op
                 executeQuery·p0.95:   1956.643 ms/op
                 executeQuery·p0.99:   1956.643 ms/op
                 executeQuery·p0.999:  1956.643 ms/op
                 executeQuery·p0.9999: 1956.643 ms/op
                 executeQuery·p1.00:   1956.643 ms/op

Iteration   2: 1920.642 ±(99.9%) 49.541 ms/op
                 executeQuery·p0.00:   1902.117 ms/op
                 executeQuery·p0.50:   1917.846 ms/op
                 executeQuery·p0.90:   1948.254 ms/op
                 executeQuery·p0.95:   1948.254 ms/op
                 executeQuery·p0.99:   1948.254 ms/op
                 executeQuery·p0.999:  1948.254 ms/op
                 executeQuery·p0.9999: 1948.254 ms/op
                 executeQuery·p1.00:   1948.254 ms/op

Iteration   3: 1937.768 ±(99.9%) 69.384 ms/op
                 executeQuery·p0.00:   1902.117 ms/op
                 executeQuery·p0.50:   1944.060 ms/op
                 executeQuery·p0.90:   1971.323 ms/op
                 executeQuery·p0.95:   1971.323 ms/op
                 executeQuery·p0.99:   1971.323 ms/op
                 executeQuery·p0.999:  1971.323 ms/op
                 executeQuery·p0.9999: 1971.323 ms/op
                 executeQuery·p1.00:   1971.323 ms/op

Iteration   4: 1961.536 ±(99.9%) 62.532 ms/op
                 executeQuery·p0.00:   1931.477 ms/op
                 executeQuery·p0.50:   1962.934 ms/op
                 executeQuery·p0.90:   1983.906 ms/op
                 executeQuery·p0.95:   1983.906 ms/op
                 executeQuery·p0.99:   1983.906 ms/op
                 executeQuery·p0.999:  1983.906 ms/op
                 executeQuery·p0.9999: 1983.906 ms/op
                 executeQuery·p1.00:   1983.906 ms/op

Iteration   5: 1980.061 ±(99.9%) 7.817 ms/op
                 executeQuery·p0.00:   1975.517 ms/op
                 executeQuery·p0.50:   1981.809 ms/op
                 executeQuery·p0.90:   1981.809 ms/op
                 executeQuery·p0.95:   1981.809 ms/op
                 executeQuery·p0.99:   1981.809 ms/op
                 executeQuery·p0.999:  1981.809 ms/op
                 executeQuery·p0.9999: 1981.809 ms/op
                 executeQuery·p1.00:   1981.809 ms/op



Result "benchmarks.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery":
  N = 60
  mean =   1925.465 ±(99.9%) 16.914 ms/op

  Histogram, ms/op:
    [1800.000, 1812.500) = 0 
    [1812.500, 1825.000) = 0 
    [1825.000, 1837.500) = 0 
    [1837.500, 1850.000) = 1 
    [1850.000, 1862.500) = 0 
    [1862.500, 1875.000) = 6 
    [1875.000, 1887.500) = 4 
    [1887.500, 1900.000) = 4 
    [1900.000, 1912.500) = 8 
    [1912.500, 1925.000) = 6 
    [1925.000, 1937.500) = 2 
    [1937.500, 1950.000) = 12 
    [1950.000, 1962.500) = 7 
    [1962.500, 1975.000) = 1 
    [1975.000, 1987.500) = 9 

  Percentiles, ms/op:
      p(0.0000) =   1849.688 ms/op
     p(50.0000) =   1932.526 ms/op
     p(90.0000) =   1981.389 ms/op
     p(95.0000) =   1981.809 ms/op
     p(99.0000) =   1983.906 ms/op
     p(99.9000) =   1983.906 ms/op
     p(99.9900) =   1983.906 ms/op
     p(99.9990) =   1983.906 ms/op
     p(99.9999) =   1983.906 ms/op
    p(100.0000) =   1983.906 ms/op


# Run complete. Total time: 10:20:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                                                                                                            (tableFilePath)                    (tpchInstance)    Mode   Cnt       Score      Error  Units
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample   274     371.117 ±    3.541  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           359.137             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           370.409             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           373.293             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           377.094             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           390.857             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           653.263             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           653.263             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           653.263             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample   190     539.123 ±    0.697  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           533.725             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           538.968             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           543.162             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           544.211             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           549.548             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           550.502             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           550.502             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           550.502             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample   140     741.096 ±    3.281  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           717.226             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           739.246             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           757.072             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           759.169             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           765.031             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           765.460             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           765.460             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           765.460             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample    10    2087.715 ±   86.782  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2017.460             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2090.861             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2190.895             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2197.815             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2197.815             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2197.815             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2197.815             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2197.815             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample    10    4915.724 ±  247.514  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          4739.564             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          4882.170             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5141.378             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5142.217             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5142.217             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5142.217             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                               /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5142.217             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                 /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5142.217             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample    30    3688.751 ±   35.183  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          3661.627             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          3670.016             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          3772.357             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          3847.225             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          3904.897             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          3904.897             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          3904.897             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          3904.897             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample    20    5330.960 ±  640.619  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5142.217             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5158.994             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5217.714             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          8301.786             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          8464.105             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          8464.105             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          8464.105             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          8464.105             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample    20    7500.674 ±  129.925  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7331.643             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7457.473             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7859.287             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7901.649             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7902.069             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7902.069             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7902.069             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7902.069             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample    10   22082.172 ± 1706.043  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         20635.976             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         22229.811             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         24001.485             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         24092.082             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         24092.082             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         24092.082             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         24092.082             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         24092.082             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample    10   49539.763 ± 1978.263  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         47513.076             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         49325.015             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         51761.067             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         51808.043             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         51808.043             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         51808.043             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         51808.043             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         51808.043             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample    20    7325.771 ±  169.833  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7088.374             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7407.141             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7560.652             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7741.846             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7751.074             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7751.074             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7751.074             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7751.074             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample    10   12918.456 ±  291.173  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         12717.130             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         12952.011             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13332.854             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13371.441             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13371.441             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13371.441             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13371.441             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13371.441             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample    10   14785.760 ±  419.018  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14310.965             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14856.225             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         15096.139             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         15099.494             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         15099.494             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         15099.494             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         15099.494             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         15099.494             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample    10   47486.232 ± 2892.798  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         44023.415             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         47412.412             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         50264.539             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         50398.757             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         50398.757             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         50398.757             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         50398.757             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         50398.757             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery                                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample    10   98220.533 ± 2966.585  ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample         95160.369             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample         98515.812             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        101951.786             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        102273.909             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        102273.909             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                          /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        102273.909             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                         /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        102273.909             ms/op
b.aggregation_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                           /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        102273.909             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                            /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample   249     407.290 ±    4.413  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           385.876             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           390.595             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           426.246             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           426.770             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           459.538             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           514.327             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           514.327             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_2                               N/A  sample           514.327             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                           /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample   193     529.691 ±    6.063  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           516.948             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           525.861             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           534.249             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           542.743             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           725.740             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           727.712             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           727.712             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                        /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_16                               N/A  sample           727.712             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                         /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample   138     750.537 ±    5.292  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           709.886             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           747.635             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           782.343             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           786.484             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           790.857             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                     /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           791.675             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           791.675             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                      /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_8192                               N/A  sample           791.675             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample    10    2460.379 ±  266.568  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2139.095             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2512.388             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2684.355             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2696.937             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2696.937             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2696.937             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2696.937             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_262144                               N/A  sample          2696.937             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                       /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample    10    5107.823 ±  307.034  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          4848.615             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5070.914             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5384.647             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5385.486             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5385.486             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5385.486             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5385.486             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/aggregation_query_int/arrow_size_31457280_keys_524288                               N/A  sample          5385.486             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample    25    5219.392 ±  957.078  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          4185.915             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          4202.693             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          6754.507             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          6869.431             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          6912.213             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          6912.213             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          6912.213             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_2                               N/A  sample          6912.213             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample    20    5281.468 ±   40.065  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5259.657             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5268.046             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5301.600             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5460.984             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5469.372             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5469.372             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5469.372             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_16                               N/A  sample          5469.372             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample    20    7627.342 ±  125.988  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7289.700             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7629.439             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7793.017             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7816.924             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7818.183             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7818.183             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7818.183             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_8192                               N/A  sample          7818.183             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample    10   25045.028 ± 1327.869  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         23857.201             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         24830.280             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         26407.338             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         26440.892             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         26440.892             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         26440.892             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         26440.892             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_262144                               N/A  sample         26440.892             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample    10   51271.172 ± 1578.332  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         49325.015             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         51573.162             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         52901.917             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         53016.003             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         53016.003             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         53016.003             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         53016.003             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf10/arrow_size_314572800_keys_524288                               N/A  sample         53016.003             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                      /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample    20    7910.877 ±  387.821  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7658.799             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          7776.240             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          8990.071             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          9235.857             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          9244.246             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          9244.246             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          9244.246             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_2                               N/A  sample          9244.246             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                     /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample    10   12787.594 ±  823.198  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         12146.704             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         12893.290             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13384.863             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13388.218             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13388.218             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13388.218             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13388.218             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                  /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_16                               N/A  sample         13388.218             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                   /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample    10   14317.676 ±  869.189  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         13186.892             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14461.960             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14945.144             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14948.499             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14948.499             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                               /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14948.499             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14948.499             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_8192                               N/A  sample         14948.499             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample    10   50418.890 ± 2152.298  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         47110.423             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         50868.519             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         51908.706             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         51942.261             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         51942.261             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         51942.261             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         51942.261             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_262144                               N/A  sample         51942.261             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery                                                 /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample    10  102515.501 ± 3353.166  ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample         99723.772             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        103079.215             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        106635.985             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        106971.529             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        106971.529             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                             /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        106971.529             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                            /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        106971.529             ms/op
b.aggregation_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                              /nvtmp/AethraTestData/aggregation_query_int_sf20/arrow_size_629145600_keys_524288                               N/A  sample        106971.529             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample  1285      77.028 ±    0.169  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            73.138             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            77.201             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            79.299             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            79.692             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            80.478             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            90.439             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            90.702             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            90.702             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample  1290      76.739 ±    0.196  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            73.138             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            76.808             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            79.430             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            79.823             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            80.490             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            89.031             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            89.260             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            89.260             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                      /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample  1271      78.107 ±    0.169  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample            74.187             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample            78.119             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample            80.216             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample            80.609             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample            82.088             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                            /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample            90.560             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                           /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample            91.095             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                             /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample            91.095             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample   140     757.611 ±    1.473  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           745.538             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           757.596             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           764.412             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           767.505             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           769.655             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           769.655             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           769.655             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           769.655             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample   140     754.570 ±    1.463  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           743.440             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           753.926             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           762.315             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           764.412             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           766.079             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           766.509             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           766.509             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           766.509             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample   134     767.456 ±    1.609  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample           752.878             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample           768.606             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample           774.898             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample           776.208             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample           783.863             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample           786.432             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample           786.432             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample           786.432             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample    70    1453.177 ±    3.258  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1438.646             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1451.229             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1463.812             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1465.909             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1468.006             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1468.006             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1468.006             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1468.006             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample    66    1586.114 ±  293.121  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1468.006             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1503.658             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1510.579             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1515.507             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          7113.540             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          7113.540             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          7113.540             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          7113.540             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery                                                 /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample    70    1588.862 ±  232.645  ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1499.464             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1520.435             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1541.407             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1547.698             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          6257.902             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                       /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          6257.902             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                      /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          6257.902             ms/op
b.filter_query.NonVectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                        /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          6257.902             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample  1316      75.341 ±    0.180  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            71.041             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            75.235             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            77.726             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            78.512             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            80.456             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            88.483             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            89.522             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_002_col2_098_col3_098/                               N/A  sample            89.522             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample  1307      75.988 ±    0.181  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            72.090             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            75.760             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            78.643             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            79.430             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            80.609             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample            97.444             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           100.794             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_002_col3_098/                               N/A  sample           100.794             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                         /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample   830     119.969 ±    0.363  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           116.261             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           117.703             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           123.208             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           123.339             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           123.732             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                               /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           139.985             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                              /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           139.985             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                                /nvtmp/AethraTestData/filter_query_int/arrow_col1_098_col2_098_col3_002/                               N/A  sample           139.985             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample   135     753.825 ±    6.112  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           707.789             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           764.412             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           775.317             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           776.995             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           781.399             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           783.286             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           783.286             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_002_col2_098_col3_098/                               N/A  sample           783.286             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample   140     738.827 ±    4.915  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           709.886             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           750.780             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           757.072             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           758.120             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           759.169             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           759.169             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           759.169             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_002_col3_098/                               N/A  sample           759.169             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample    90    1201.179 ±   10.430  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1166.017             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1220.542             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1224.737             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1229.665             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1331.692             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1331.692             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1331.692             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf10/arrow_col1_098_col2_098_col3_002/                               N/A  sample          1331.692             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample    76    1431.527 ±   12.590  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1373.635             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1425.015             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1493.172             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1495.899             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_002_col2_098_col3_098/                               N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample    74    1444.824 ±   13.520  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1392.509             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1431.306             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1494.221             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1499.464             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_002_col3_098/                               N/A  sample          1501.561             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery                                                    /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample    50    2353.592 ±   11.178  ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          2332.033             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.50                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          2348.810             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.90                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          2365.587             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.95                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          2420.113             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.99                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          2453.668             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.999                          /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          2453.668             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p0.9999                         /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          2453.668             ms/op
b.filter_query.VectorisedNonSimd.executeFilterQuery:executeFilterQuery·p1.00                           /nvtmp/AethraTestData/filter_query_int_sf20/arrow_col1_098_col2_098_col3_002/                               N/A  sample          2453.668             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    20    5170.319 ±   95.248  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5007.999             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5154.800             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5391.358             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5434.140             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5435.818             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5435.818             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5435.818             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                 /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5435.818             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery                                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10   58290.759 ±  892.481  ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         56908.317             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         58351.157             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         59136.331             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         59190.018             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         59190.018             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                           /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         59190.018             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         59190.018             ms/op
b.join_query.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                            /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         59190.018             ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    20    5385.486 ±  132.009  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5184.160             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5314.183             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5652.244             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5669.860             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5670.699             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                   /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5670.699             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                  /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5670.699             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          5670.699             ms/op
b.join_query.VectorisedNonSimd.executeQuery                                                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10   57525.718 ± 1888.943  ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         56170.119             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         57176.752             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         60243.627             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         60465.086             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         60465.086             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                              /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         60465.086             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                             /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         60465.086             ms/op
b.join_query.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         60465.086             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    48    2310.799 ±   84.525  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2147.484             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2183.135             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2512.388             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2514.695             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2550.137             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                     /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2550.137             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                    /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2550.137             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                      /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2550.137             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery                                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10   28138.747 ±  117.642  ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         28051.505             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         28185.723             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         28246.121             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         28252.832             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         28252.832             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         28252.832             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                               /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         28252.832             ms/op
b.join_query_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                 /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         28252.832             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    63    1645.665 ±    6.720  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1635.779             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1642.070             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1659.267             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1662.622             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1753.219             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1753.219             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1753.219             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1753.219             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10   20495.047 ±  103.689  ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         20401.095             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         20484.981             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         20599.066             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         20602.421             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         20602.421             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         20602.421             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         20602.421             ms/op
b.join_query_hard_coded.NonVectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         20602.421             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    50    2307.287 ±    7.010  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2290.090             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2308.964             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2315.256             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2334.969             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2369.782             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                        /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2369.782             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                       /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2369.782             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                         /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          2369.782             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery                                                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10   30709.016 ±  319.770  ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         30534.533             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         30635.196             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         31104.958             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         31104.958             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         31104.958             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                   /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         31104.958             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                  /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         31104.958             ms/op
b.join_query_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                    /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         31104.958             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                               /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample    85    1287.553 ±   30.853  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1203.765             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1216.348             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1375.732             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1377.200             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1377.829             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                           /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1377.829             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                          /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1377.829             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                            /nvtmp/AethraTestData/join_query_int/A_B_0.6_C_0.8                               N/A  sample          1377.829             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery                                                          /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample    10   16208.468 ±  579.202  ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         15921.578             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.50                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         16156.459             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.90                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         17027.197             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.95                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         17062.429             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.99                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         17062.429             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.999                                      /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         17062.429             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p0.9999                                     /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         17062.429             ms/op
b.join_query_hard_coded.VectorisedNonSimdHandOptimised.executeQuery:executeQuery·p1.00                                       /nvtmp/AethraTestData/join_query_int_sf10/A_B_0.6_C_0.8                               N/A  sample         17062.429             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   177     356.528 ±    3.402  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           342.884             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           352.322             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           378.012             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           381.787             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           405.369             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           413.139             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           413.139             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           413.139             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    10    4699.298 ±  419.427  ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4303.356             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4806.672             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4999.610             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5007.999             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5007.999             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5007.999             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                             N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5007.999             ms/op
b.tpch.q10_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5007.999             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   178     338.398 ±    6.638  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           307.757             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           331.874             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           395.103             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           404.226             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           411.917             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           423.100             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           423.100             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           423.100             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    10    3866.309 ±  152.006  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3766.485             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3823.108             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4044.148             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4047.503             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4047.503             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4047.503             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4047.503             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4047.503             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   168     373.455 ±    8.376  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           335.020             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           360.448             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           428.868             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           431.489             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           436.008             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           436.732             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           436.732             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           436.732             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                     N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    10    4239.602 ±  191.518  ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4060.086             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4290.773             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4404.858             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4412.408             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4412.408             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4412.408             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4412.408             ms/op
b.tpch.q10_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4412.408             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   330     306.033 ±    1.543  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           297.271             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           301.728             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           314.573             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           315.621             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           320.413             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           377.487             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           377.487             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           377.487             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    40    2908.750 ±   28.667  ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2856.321             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2904.556             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2952.371             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2961.179             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3179.282             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3179.282             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3179.282             ms/op
b.tpch.q1_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3179.282             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   195     514.999 ±    2.364  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           502.792             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           511.181             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           525.337             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           526.909             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           530.621             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           531.628             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           531.628             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           531.628             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    23    5013.105 ±   17.970  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4974.445             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5007.999             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5041.553             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5048.264             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5049.942             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5049.942             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5049.942             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5049.942             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   207     491.714 ±    2.179  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           464.519             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           492.306             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           503.946             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           508.035             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           511.663             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           514.327             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           514.327             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           514.327             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    25    4998.268 ±  286.167  ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4638.900             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          4840.227             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5484.472             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5525.576             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5528.093             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5528.093             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5528.093             ms/op
b.tpch.q1_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          5528.093             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   331     277.175 ±    1.035  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           265.814             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           275.775             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           285.737             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           288.044             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           290.288             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           298.320             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           298.320             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           298.320             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    10    2852.966 ±  301.572  ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2751.463             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2778.726             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3354.604             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3401.581             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3401.581             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                               N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3401.581             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3401.581             ms/op
b.tpch.q3_no_sort_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          3401.581             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   334     269.555 ±    1.481  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           257.425             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           269.484             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           278.397             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           279.970             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           287.651             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           347.079             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           347.079             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           347.079             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    30    2833.812 ±   22.400  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2776.629             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2841.641             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2868.904             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2870.791             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2873.098             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2873.098             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2873.098             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2873.098             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   323     280.656 ±    1.234  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           268.960             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           280.494             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           283.640             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           284.584             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           328.288             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           341.311             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           341.311             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           341.311             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    29    2821.320 ±   18.438  ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2793.406             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2805.989             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2856.321             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2889.875             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2898.264             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                  N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2898.264             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                 N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2898.264             ms/op
b.tpch.q3_no_sort_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                   N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2898.264             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   501     201.026 ±    0.465  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           193.462             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           201.327             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           204.210             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           205.495             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           208.132             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           210.764             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           210.764             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           210.764             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery                                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    59    1953.906 ±   12.944  ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1853.882             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1950.351             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1981.809             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1983.906             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2105.541             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                       N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2105.541             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                      N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2105.541             ms/op
b.tpch.q6_hard_coded.NonVectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                        N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          2105.541             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   492     198.686 ±    0.408  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           193.724             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           197.919             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           202.637             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           203.515             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           205.052             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           219.152             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           219.152             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           219.152             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery                                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    60    1904.249 ±   15.156  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1851.785             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.50                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1889.534             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.90                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1941.753             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.95                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1944.060             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.99                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1994.392             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.999                                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1994.392             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p0.9999                                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1994.392             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimd.executeQuery:executeQuery·p1.00                                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1994.392             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A   /nvtmp/AethraTestData/tpch/sf-1  sample   486     200.732 ±    0.496  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           192.938             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           199.754             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           205.521             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           206.569             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           207.880             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           209.977             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           209.977             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A   /nvtmp/AethraTestData/tpch/sf-1  sample           209.977             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery                                                                                                              N/A  /nvtmp/AethraTestData/tpch/sf-10  sample    60    1925.465 ±   16.914  ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1849.688             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.50                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1932.526             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.90                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1981.389             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.95                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1981.809             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.99                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1983.906             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.999                                                                                          N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1983.906             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p0.9999                                                                                         N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1983.906             ms/op
b.tpch.q6_hard_coded.VectorisedNonSimdReducedSelVecUse.executeQuery:executeQuery·p1.00                                                                                           N/A  /nvtmp/AethraTestData/tpch/sf-10  sample          1983.906             ms/op

Benchmark result is saved to jmh-result.csv
